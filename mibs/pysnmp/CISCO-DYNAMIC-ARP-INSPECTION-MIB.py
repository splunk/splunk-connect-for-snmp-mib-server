#
# PySNMP MIB module CISCO-DYNAMIC-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DYNAMIC-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:39:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
VlanIndexOrZero, = mibBuilder.importSymbols("CISCO-PRIVATE-VLAN-MIB", "VlanIndexOrZero")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, TimeTicks, ModuleIdentity, IpAddress, Unsigned32, MibIdentifier, Bits, Integer32, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "Bits", "Integer32", "Counter32", "Gauge32")
DisplayString, TruthValue, RowStatus, TextualConvention, DateAndTime, StorageType, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention", "DateAndTime", "StorageType", "MacAddress")
ciscoDynamicArpInspectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 374))
ciscoDynamicArpInspectionMIB.setRevisions(('2011-03-21 00:00', '2003-10-29 15:00',))
if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setLastUpdated('201103210000Z')
if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setOrganization('Cisco Systems, Inc.')
cdaiMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 0))
cdaiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1))
cdaiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 2))
cdaiGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1))
cdaiVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2))
cdaiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3))
cdaiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4))
cdaiLoggingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLoggingEnable.setStatus('current')
cdaiAddressValidate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 2), Bits().clone(namedValues=NamedValues(("srcMacAddress", 0), ("dstMacAddress", 1), ("ip", 2), ("ipAllowZeros", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiAddressValidate.setStatus('current')
cdaiLogBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 3), Unsigned32()).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLogBufferSize.setStatus('current')
cdaiLoggingRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 4), Unsigned32()).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLoggingRate.setStatus('current')
cdaiLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLoggingInterval.setStatus('current')
cdaiLogBufferAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLogBufferAction.setStatus('current')
cdaiLogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7), )
if mibBuilder.loadTexts: cdaiLogBufferTable.setStatus('current')
cdaiLogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferIndex"))
if mibBuilder.loadTexts: cdaiLogBufferEntry.setStatus('current')
cdaiLogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cdaiLogBufferIndex.setStatus('current')
cdaiLogBufferInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferInterface.setStatus('current')
cdaiLogBufferVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 3), VlanIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferVlan.setStatus('current')
cdaiLogBufferSenderMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferSenderMacAddress.setStatus('current')
cdaiLogBufferSenderAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferSenderAddressType.setStatus('current')
cdaiLogBufferSenderIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferSenderIpAddress.setStatus('current')
cdaiLogBufferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("deny", 2), ("aclDeny", 3), ("aclPermit", 4), ("dhcpDeny", 5), ("dhcpPermit", 6), ("probePermit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferReason.setStatus('current')
cdaiLogBufferLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferLastUpdate.setStatus('current')
cdaiLogBufferPacketsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferPacketsCount.setStatus('current')
cdaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1), )
if mibBuilder.loadTexts: cdaiVlanConfigTable.setStatus('current')
cdaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanIndex"))
if mibBuilder.loadTexts: cdaiVlanConfigEntry.setStatus('current')
cdaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdaiVlanIndex.setStatus('current')
cdaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiVlanDynArpInspEnable.setStatus('current')
cdaiVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2), )
if mibBuilder.loadTexts: cdaiVlanCfgTable.setStatus('current')
cdaiVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanId"))
if mibBuilder.loadTexts: cdaiVlanCfgEntry.setStatus('current')
cdaiVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdaiVlanId.setStatus('current')
cdaiVlanDynArpInspAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanDynArpInspAdmin.setStatus('current')
cdaiVlanDynArpInspOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDynArpInspOper.setStatus('current')
cdaiVlanFilterArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanFilterArpAclName.setStatus('current')
cdaiVlanFilterArpAclStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanFilterArpAclStatic.setStatus('current')
cdaiVlanAclLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aclMatch", 2), ("deny", 3))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanAclLogging.setStatus('current')
cdaiVlanDhcpBindingLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("permit", 2), ("deny", 3), ("all", 4))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanDhcpBindingLogging.setStatus('current')
cdaiVlanArpProbeLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanArpProbeLogging.setStatus('current')
cdaiVlanCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 9), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanCfgStorageType.setStatus('current')
cdaiVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanCfgRowStatus.setStatus('current')
cdaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 1), )
if mibBuilder.loadTexts: cdaiIfConfigTable.setStatus('current')
cdaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdaiIfConfigEntry.setStatus('current')
cdaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiIfTrustEnable.setStatus('current')
cdaiIfRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 2), )
if mibBuilder.loadTexts: cdaiIfRateLimitTable.setStatus('current')
cdaiIfRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdaiIfRateLimitEntry.setStatus('current')
cdaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 2, 1, 1), Unsigned32()).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiIfRateLimit.setStatus('current')
cdaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1), )
if mibBuilder.loadTexts: cdaiVlanStatsTable.setStatus('current')
cdaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanStatsIndex"))
if mibBuilder.loadTexts: cdaiVlanStatsEntry.setStatus('current')
cdaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdaiVlanStatsIndex.setStatus('current')
cdaiVlanForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanForwarded.setStatus('current')
cdaiVlanDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDropped.setStatus('current')
cdaiVlanAclPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanAclPermitted.setStatus('current')
cdaiVlanDhcpBindingsPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDhcpBindingsPermitted.setStatus('current')
cdaiVlanAclDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanAclDenied.setStatus('current')
cdaiVlanDhcpBindingDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDhcpBindingDenied.setStatus('current')
cdaiVlanSrcMacValidationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanSrcMacValidationFailures.setStatus('current')
cdaiVlanDestMacValidationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDestMacValidationFailures.setStatus('current')
cdaiVlanIpValidationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanIpValidationFailures.setStatus('current')
cdaiVlanArpProbePermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanArpProbePermitted.setStatus('current')
cdaiVlanInvalidProtocolData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanInvalidProtocolData.setStatus('current')
cdaiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 1))
cdaiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2))
cdaiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 1, 1)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiGlobalLoggingGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfRateLimitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiMIBCompliance = cdaiMIBCompliance.setStatus('deprecated')
cdaiMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 1, 2)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanCfgGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiGlobalLoggingGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfRateLimitGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiAddressValidationGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanStatisticsGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanExtStatisticsGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanArpProbeGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferActionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiMIBCompliance1 = cdaiMIBCompliance1.setStatus('current')
cdaiGlobalLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 1)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiGlobalLoggingGroup = cdaiGlobalLoggingGroup.setStatus('current')
cdaiVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 2)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDynArpInspEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanConfigGroup = cdaiVlanConfigGroup.setStatus('current')
cdaiIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 3)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfTrustEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiIfConfigGroup = cdaiIfConfigGroup.setStatus('current')
cdaiIfRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 4)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiIfRateLimitGroup = cdaiIfRateLimitGroup.setStatus('current')
cdaiLoggingConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 5)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSize"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingRate"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiLoggingConfigGroup = cdaiLoggingConfigGroup.setStatus('current')
cdaiAddressValidationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 6)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiAddressValidate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiAddressValidationGroup = cdaiAddressValidationGroup.setStatus('current')
cdaiVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 7)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDynArpInspAdmin"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDynArpInspOper"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanFilterArpAclName"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanFilterArpAclStatic"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanAclLogging"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDhcpBindingLogging"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanCfgStorageType"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanCfgGroup = cdaiVlanCfgGroup.setStatus('current')
cdaiVlanStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 8)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanForwarded"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDropped"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanAclPermitted"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDhcpBindingsPermitted"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanAclDenied"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDhcpBindingDenied"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanSrcMacValidationFailures"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDestMacValidationFailures"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanIpValidationFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanStatisticsGroup = cdaiVlanStatisticsGroup.setStatus('current')
cdaiLogBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 9)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferInterface"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferVlan"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSenderMacAddress"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSenderAddressType"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSenderIpAddress"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferReason"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferLastUpdate"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferPacketsCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiLogBufferGroup = cdaiLogBufferGroup.setStatus('current')
cdaiVlanExtStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 10)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanArpProbePermitted"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanInvalidProtocolData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanExtStatisticsGroup = cdaiVlanExtStatisticsGroup.setStatus('current')
cdaiVlanArpProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 11)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanArpProbeLogging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanArpProbeGroup = cdaiVlanArpProbeGroup.setStatus('current')
cdaiLogBufferActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 12)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiLogBufferActionGroup = cdaiLogBufferActionGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-DYNAMIC-ARP-INSPECTION-MIB", cdaiGlobalLoggingGroup=cdaiGlobalLoggingGroup, cdaiVlanFilterArpAclStatic=cdaiVlanFilterArpAclStatic, cdaiInterface=cdaiInterface, cdaiIfConfigTable=cdaiIfConfigTable, cdaiLogBufferIndex=cdaiLogBufferIndex, cdaiVlan=cdaiVlan, cdaiMIBCompliance1=cdaiMIBCompliance1, cdaiLogBufferTable=cdaiLogBufferTable, cdaiLogBufferVlan=cdaiLogBufferVlan, cdaiVlanDestMacValidationFailures=cdaiVlanDestMacValidationFailures, cdaiVlanCfgRowStatus=cdaiVlanCfgRowStatus, cdaiVlanDynArpInspOper=cdaiVlanDynArpInspOper, cdaiVlanInvalidProtocolData=cdaiVlanInvalidProtocolData, cdaiMIBCompliance=cdaiMIBCompliance, cdaiVlanDhcpBindingLogging=cdaiVlanDhcpBindingLogging, cdaiLogBufferEntry=cdaiLogBufferEntry, cdaiGlobal=cdaiGlobal, cdaiVlanStatisticsGroup=cdaiVlanStatisticsGroup, cdaiVlanDropped=cdaiVlanDropped, cdaiLogBufferPacketsCount=cdaiLogBufferPacketsCount, cdaiVlanDhcpBindingDenied=cdaiVlanDhcpBindingDenied, cdaiLogBufferReason=cdaiLogBufferReason, cdaiVlanForwarded=cdaiVlanForwarded, cdaiMIBCompliances=cdaiMIBCompliances, cdaiVlanCfgEntry=cdaiVlanCfgEntry, cdaiLoggingConfigGroup=cdaiLoggingConfigGroup, cdaiLoggingRate=cdaiLoggingRate, cdaiVlanCfgTable=cdaiVlanCfgTable, cdaiVlanAclLogging=cdaiVlanAclLogging, cdaiAddressValidationGroup=cdaiAddressValidationGroup, cdaiLogBufferSenderMacAddress=cdaiLogBufferSenderMacAddress, cdaiVlanStatsIndex=cdaiVlanStatsIndex, cdaiVlanAclDenied=cdaiVlanAclDenied, cdaiVlanDhcpBindingsPermitted=cdaiVlanDhcpBindingsPermitted, cdaiVlanAclPermitted=cdaiVlanAclPermitted, cdaiVlanCfgGroup=cdaiVlanCfgGroup, cdaiAddressValidate=cdaiAddressValidate, cdaiVlanIpValidationFailures=cdaiVlanIpValidationFailures, cdaiVlanDynArpInspAdmin=cdaiVlanDynArpInspAdmin, cdaiVlanDynArpInspEnable=cdaiVlanDynArpInspEnable, cdaiIfRateLimitEntry=cdaiIfRateLimitEntry, cdaiVlanConfigEntry=cdaiVlanConfigEntry, cdaiMIBGroups=cdaiMIBGroups, cdaiVlanExtStatisticsGroup=cdaiVlanExtStatisticsGroup, cdaiLogBufferSize=cdaiLogBufferSize, cdaiLogBufferActionGroup=cdaiLogBufferActionGroup, cdaiVlanStatsTable=cdaiVlanStatsTable, cdaiLoggingEnable=cdaiLoggingEnable, cdaiIfRateLimitTable=cdaiIfRateLimitTable, cdaiIfConfigGroup=cdaiIfConfigGroup, cdaiIfRateLimit=cdaiIfRateLimit, cdaiVlanArpProbeGroup=cdaiVlanArpProbeGroup, cdaiVlanConfigGroup=cdaiVlanConfigGroup, cdaiVlanSrcMacValidationFailures=cdaiVlanSrcMacValidationFailures, ciscoDynamicArpInspectionMIB=ciscoDynamicArpInspectionMIB, cdaiLogBufferSenderIpAddress=cdaiLogBufferSenderIpAddress, cdaiLogBufferLastUpdate=cdaiLogBufferLastUpdate, cdaiVlanConfigTable=cdaiVlanConfigTable, cdaiLogBufferSenderAddressType=cdaiLogBufferSenderAddressType, cdaiVlanCfgStorageType=cdaiVlanCfgStorageType, cdaiIfTrustEnable=cdaiIfTrustEnable, cdaiVlanFilterArpAclName=cdaiVlanFilterArpAclName, cdaiVlanArpProbePermitted=cdaiVlanArpProbePermitted, cdaiVlanIndex=cdaiVlanIndex, cdaiMIBConformance=cdaiMIBConformance, cdaiStatistics=cdaiStatistics, cdaiMIBObjects=cdaiMIBObjects, cdaiVlanId=cdaiVlanId, cdaiVlanArpProbeLogging=cdaiVlanArpProbeLogging, cdaiIfRateLimitGroup=cdaiIfRateLimitGroup, cdaiLogBufferInterface=cdaiLogBufferInterface, cdaiIfConfigEntry=cdaiIfConfigEntry, cdaiLogBufferGroup=cdaiLogBufferGroup, cdaiLogBufferAction=cdaiLogBufferAction, cdaiVlanStatsEntry=cdaiVlanStatsEntry, PYSNMP_MODULE_ID=ciscoDynamicArpInspectionMIB, cdaiLoggingInterval=cdaiLoggingInterval, cdaiMIBNotifs=cdaiMIBNotifs)
