#
# PySNMP MIB module EFDATA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EFDATA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, NotificationType, enterprises, Bits, Gauge32, Integer32, MibIdentifier, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "NotificationType", "enterprises", "Bits", "Gauge32", "Integer32", "MibIdentifier", "Counter64", "TimeTicks")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
efdata = MibIdentifier((1, 3, 6, 1, 4, 1, 6247))
spectracast = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3))
dtmx5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1))
cbGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1))
cbStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1))
cbStatGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1))
cbStatNumBytesTXed = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumBytesTXed.setStatus('mandatory')
cbStatNumOfPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumOfPackets.setStatus('mandatory')
cbStatAvrPktSize = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatAvrPktSize.setStatus('mandatory')
cbStatAvrBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatAvrBytesPerSec.setStatus('mandatory')
cbStatNumPacketDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumPacketDiscarded.setStatus('mandatory')
cbStatNumNMSFrames = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumNMSFrames.setStatus('mandatory')
cbCPULoad = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCPULoad.setStatus('mandatory')
cbMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMemoryUsage.setStatus('mandatory')
cbStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbStatReset.setStatus('mandatory')
cbStatNumClients = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumClients.setStatus('mandatory')
cbStatClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2))
cbClientIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbClientIP.setStatus('mandatory')
cbClientStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2))
cbClNumSeconds = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumSeconds.setStatus('mandatory')
cbClNumKBytes = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumKBytes.setStatus('mandatory')
cbClNumPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumPackets.setStatus('mandatory')
cbClAvrBytesPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClAvrBytesPerSecond.setStatus('mandatory')
cbClNumPacketsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumPacketsDiscarded.setStatus('mandatory')
cbClStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbClStatReset.setStatus('mandatory')
cbClEncrEnbled = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClEncrEnbled.setStatus('mandatory')
cbStatClTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3))
cbClTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: cbClTable.setStatus('mandatory')
cbClTableNode = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbClTableIP"))
if mibBuilder.loadTexts: cbClTableNode.setStatus('mandatory')
cbClTableIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableIP.setStatus('mandatory')
cbClTableStampTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableStampTime.setStatus('mandatory')
cbClTableStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableStartTime.setStatus('mandatory')
cbClTableTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableTotalPackets.setStatus('mandatory')
cbClTableBytesInSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableBytesInSec.setStatus('mandatory')
cbClTablePacketsDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTablePacketsDiscr.setStatus('mandatory')
cbClTableKBytesTxed = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableKBytesTxed.setStatus('mandatory')
cbClTableReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbNo", 0), ("cbYes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbClTableReset.setStatus('mandatory')
cbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2))
cbNetworkParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1))
cbNetGatewayMngIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetGatewayMngIP.setStatus('mandatory')
cbNetGatewayMngSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetGatewayMngSubnetMask.setStatus('mandatory')
cbNetDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetDefaultGateway.setStatus('mandatory')
cbNetPromiscuous = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetPromiscuous.setStatus('mandatory')
cbNetUnregisteredUsers = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetUnregisteredUsers.setStatus('mandatory')
cbNetMulticast = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetMulticast.setStatus('mandatory')
cbNetDualNIC = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetDualNIC.setStatus('mandatory')
cbNetGatewayDataIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetGatewayDataIP.setStatus('mandatory')
cbNetGatewayDataSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetGatewayDataSubnetMask.setStatus('mandatory')
cbNetTelnet = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetTelnet.setStatus('mandatory')
cbNetFTP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetFTP.setStatus('mandatory')
cbDVBOutputParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2))
cbDVBOutputBitRate = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBOutputBitRate.setStatus('mandatory')
cbDVBPAT = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBPAT.setStatus('mandatory')
cbDVBPMT = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBPMT.setStatus('mandatory')
cbDVBFraming = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbFraming188", 1), ("cbFraming204", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBFraming.setStatus('mandatory')
cbStuffingMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbFFStuffing", 0), ("cbAdaptationField", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStuffingMode.setStatus('mandatory')
cbMpeMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbPacked", 0), ("cbNotPacked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMpeMode.setStatus('mandatory')
cbCRCMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cbZero", 0), ("cbCheckSum", 1), ("cbCRC", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCRCMode.setStatus('mandatory')
cbDVBClockPolarity = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbNotInverted", 0), ("cbInverted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDVBClockPolarity.setStatus('mandatory')
cbDVBAuxInput = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBAuxInput.setStatus('mandatory')
cbDVBAuxNullPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBAuxNullPackets.setStatus('mandatory')
cbDVBAuxInputType = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbASI", 1), ("cbLVDS", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBAuxInputType.setStatus('mandatory')
cbDVBLlcSnap = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBLlcSnap.setStatus('mandatory')
cbGeneralParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3))
cbGatewayEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGatewayEnabled.setStatus('mandatory')
cbGatewaySWReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbGatewaySWReset.setStatus('mandatory')
cbTraceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3))
cbTraceMask = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTraceMask.setStatus('mandatory')
cbTraceLevel = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTraceLevel.setStatus('mandatory')
cbTraceOutputChannel = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cbTraceToVGA", 1), ("cbTraceToCOM1", 2), ("cbTraceToCOM2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTraceOutputChannel.setStatus('mandatory')
cbPktEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbPktEncrypt.setStatus('mandatory')
cbGatewayDescription = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGatewayDescription.setStatus('mandatory')
cbSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbSWVersion.setStatus('mandatory')
cbApplicationFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbApplicationFileName.setStatus('mandatory')
cbDataMappingMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("cbDataStreaming", 2), ("cbProtocolEncapsulation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDataMappingMode.setStatus('mandatory')
cbMaxAllowableDelay = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMaxAllowableDelay.setStatus('mandatory')
cbQualityOfService = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 10))
cbQOSMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbPermissive", 1), ("cbRestrictive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbQOSMode.setStatus('mandatory')
cbQOSActive = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbFalse", 0), ("cbTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbQOSActive.setStatus('mandatory')
cbFlushing = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbNo", 0), ("cbYes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFlushing.setStatus('mandatory')
cbFPGAFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFPGAFileName.setStatus('mandatory')
cbGroupsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4))
cbGrTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: cbGrTable.setStatus('mandatory')
cbGroupsTableNode = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbGrTableIndex"))
if mibBuilder.loadTexts: cbGroupsTableNode.setStatus('mandatory')
cbGrTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableIndex.setStatus('mandatory')
cbGrTablePID = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTablePID.setStatus('mandatory')
cbGrTableQosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbIndividual", 0), ("cbGlobal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableQosMode.setStatus('mandatory')
cbGrTableMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableMinRate.setStatus('mandatory')
cbGrTableMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableMaxRate.setStatus('mandatory')
cbConfigSTUTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5))
cbStaticUserTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: cbStaticUserTable.setStatus('mandatory')
cbStaticUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbStaticUserIP"))
if mibBuilder.loadTexts: cbStaticUserEntry.setStatus('mandatory')
cbStaticUserIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserIP.setStatus('mandatory')
cbStaticUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMask.setStatus('mandatory')
cbStaticUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserGroup.setStatus('mandatory')
cbStaticUserMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMAC.setStatus('mandatory')
cbStaticUserMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMinRate.setStatus('mandatory')
cbStaticUserMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMaxRate.setStatus('mandatory')
cbConfigMulticastTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6))
cbMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: cbMulticastTable.setStatus('mandatory')
cbMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbMulticastIP"))
if mibBuilder.loadTexts: cbMulticastEntry.setStatus('mandatory')
cbMulticastIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastIP.setStatus('mandatory')
cbMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastGroup.setStatus('mandatory')
cbMulticastSID = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastSID.setStatus('mandatory')
cbMulticastMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastMinRate.setStatus('mandatory')
cbMulticastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastMaxRate.setStatus('mandatory')
cbConfigClTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7))
cbCfgClTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: cbCfgClTable.setStatus('mandatory')
cbCfgClTableNode = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbCfgClTableIP"))
if mibBuilder.loadTexts: cbCfgClTableNode.setStatus('mandatory')
cbCfgClTableIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableIP.setStatus('mandatory')
cbCfgClTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMask.setStatus('mandatory')
cbCfgClTableMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMAC.setStatus('mandatory')
cbCfgClTableGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableGroup.setStatus('mandatory')
cbCfgClTableBy = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableBy.setStatus('mandatory')
cbCfgClTableMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMinRate.setStatus('mandatory')
cbCfgClTableMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMaxRate.setStatus('mandatory')
cbCfgClTableEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbFalse", 0), ("cbTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableEncrypt.setStatus('mandatory')
cbTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 8))
cbTime = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTime.setStatus('mandatory')
cbDate = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDate.setStatus('mandatory')
cbClientsInfoReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbClientsInfoReset.setStatus('mandatory')
cbCCUParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10))
cbCCU1 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU1.setStatus('mandatory')
cbCCU2 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU2.setStatus('mandatory')
cbCCU3 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU3.setStatus('mandatory')
cbCCU4 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU4.setStatus('mandatory')
cbCCU5 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU5.setStatus('mandatory')
cbCCU6 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU6.setStatus('mandatory')
cbCCU7 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU7.setStatus('mandatory')
cbCCU8 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU8.setStatus('mandatory')
cbCCU9 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU9.setStatus('mandatory')
cbCCU10 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU10.setStatus('mandatory')
cbHASParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11))
cbHasEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbHasEnable.setStatus('mandatory')
cbHasCpu = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbHasCpu.setStatus('mandatory')
cbHasMemory = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbHasMemory.setStatus('mandatory')
cbDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3))
cbDiagTestTx = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1))
cbDiagTestTxParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 1))
cbTestTxDestIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTestTxDestIP.setStatus('mandatory')
cbTestTxType = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cbTestTypeOnePacket", 1), ("cbTestTypeLowSpeedCont", 2), ("cbTestTypeHighSpeedCont", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTestTxType.setStatus('mandatory')
cbDiagTestTxActive = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDiagTestTxActive.setStatus('mandatory')
cbSWDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4))
cbSWServerIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbSWServerIP.setStatus('mandatory')
cbAppDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2))
cbSWSourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbSWSourceFileName.setStatus('mandatory')
cbSWTargetFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbSWTargetFileName.setStatus('mandatory')
cbSWDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbSWDownloadStart.setStatus('mandatory')
cbSWDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbIdle", 0), ("cbDownloadInProgress", 1), ("cbERRORTFTPServernotFound", 2), ("cbERRORFileNotFound", 3), ("cbERRORNotASWFile", 4), ("cbERRORBadChecksum", 5), ("cbERRORCommunicationFailed", 6), ("cbDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbSWDownloadStatus.setStatus('mandatory')
cbFPGADownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3))
cbFPGASourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFPGASourceFileName.setStatus('mandatory')
cbFPGATargetFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFPGATargetFileName.setStatus('mandatory')
cbFPGADownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbFPGADownloadStart.setStatus('mandatory')
cbFPGADownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbIdle", 0), ("cbDownloadInProgress", 1), ("cbERRORTFTPServernotFound", 2), ("cbERRORFileNotFound", 3), ("cbERRORNotASWFile", 4), ("cbERRORBadChecksum", 5), ("cbERRORCommunicationFailed", 6), ("cbDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbFPGADownloadStatus.setStatus('mandatory')
mibBuilder.exportSymbols("EFDATA-MIB", cbNetFTP=cbNetFTP, cbNetGatewayDataIP=cbNetGatewayDataIP, cbGroupsTableNode=cbGroupsTableNode, cbConfigMulticastTable=cbConfigMulticastTable, cbDiagTestTxParam=cbDiagTestTxParam, cbClientsInfoReset=cbClientsInfoReset, cbQOSMode=cbQOSMode, cbStatNumNMSFrames=cbStatNumNMSFrames, cbStaticUserMaxRate=cbStaticUserMaxRate, cbDiagTestTx=cbDiagTestTx, cbStatClient=cbStatClient, cbClTableIP=cbClTableIP, cbClEncrEnbled=cbClEncrEnbled, cbSWVersion=cbSWVersion, cbConfigClTable=cbConfigClTable, cbCfgClTableNode=cbCfgClTableNode, cbClientIP=cbClientIP, cbGrTableIndex=cbGrTableIndex, cbDVBPMT=cbDVBPMT, cbClStatReset=cbClStatReset, cbCCU8=cbCCU8, cbSWSourceFileName=cbSWSourceFileName, spectracast=spectracast, cbNetUnregisteredUsers=cbNetUnregisteredUsers, cbSWServerIP=cbSWServerIP, cbClTable=cbClTable, cbCCU7=cbCCU7, cbTestTxDestIP=cbTestTxDestIP, cbCCUParam=cbCCUParam, cbCfgClTableMaxRate=cbCfgClTableMaxRate, cbTestTxType=cbTestTxType, cbPktEncrypt=cbPktEncrypt, cbClTableBytesInSec=cbClTableBytesInSec, cbHasCpu=cbHasCpu, cbMulticastIP=cbMulticastIP, cbClNumPackets=cbClNumPackets, cbDVBAuxNullPackets=cbDVBAuxNullPackets, cbClTableTotalPackets=cbClTableTotalPackets, cbApplicationFileName=cbApplicationFileName, cbClientStatistics=cbClientStatistics, cbCfgClTableMAC=cbCfgClTableMAC, cbStatClTable=cbStatClTable, cbCCU4=cbCCU4, cbMulticastEntry=cbMulticastEntry, cbGrTableQosMode=cbGrTableQosMode, cbClTableKBytesTxed=cbClTableKBytesTxed, cbDVBLlcSnap=cbDVBLlcSnap, cbCCU3=cbCCU3, cbStuffingMode=cbStuffingMode, cbMulticastGroup=cbMulticastGroup, cbNetworkParam=cbNetworkParam, cbConfig=cbConfig, dtmx5000=dtmx5000, cbStaticUserGroup=cbStaticUserGroup, cbFPGAFileName=cbFPGAFileName, cbStaticUserEntry=cbStaticUserEntry, cbClTableStartTime=cbClTableStartTime, cbDVBOutputParam=cbDVBOutputParam, cbNetPromiscuous=cbNetPromiscuous, cbCPULoad=cbCPULoad, cbClAvrBytesPerSecond=cbClAvrBytesPerSecond, cbDVBOutputBitRate=cbDVBOutputBitRate, cbNetGatewayDataSubnetMask=cbNetGatewayDataSubnetMask, cbMemoryUsage=cbMemoryUsage, cbTraceInfo=cbTraceInfo, cbStatistics=cbStatistics, cbStatReset=cbStatReset, cbCCU9=cbCCU9, cbHASParam=cbHASParam, cbTime=cbTime, efdata=efdata, cbSWTargetFileName=cbSWTargetFileName, cbAppDownload=cbAppDownload, cbStaticUserTable=cbStaticUserTable, cbStatNumClients=cbStatNumClients, cbGeneralParam=cbGeneralParam, cbCfgClTableIP=cbCfgClTableIP, cbSWDownload=cbSWDownload, cbGrTableMaxRate=cbGrTableMaxRate, cbQOSActive=cbQOSActive, cbGrTablePID=cbGrTablePID, cbNetDualNIC=cbNetDualNIC, cbGateway=cbGateway, cbClNumPacketsDiscarded=cbClNumPacketsDiscarded, cbFPGADownload=cbFPGADownload, cbNetGatewayMngIP=cbNetGatewayMngIP, cbFPGATargetFileName=cbFPGATargetFileName, cbTimeDate=cbTimeDate, cbDVBAuxInputType=cbDVBAuxInputType, cbCfgClTableMask=cbCfgClTableMask, cbDiagnostics=cbDiagnostics, cbNetMulticast=cbNetMulticast, cbCfgClTableEncrypt=cbCfgClTableEncrypt, cbDVBAuxInput=cbDVBAuxInput, cbFlushing=cbFlushing, cbMulticastMaxRate=cbMulticastMaxRate, cbNetTelnet=cbNetTelnet, cbMulticastMinRate=cbMulticastMinRate, cbStatAvrPktSize=cbStatAvrPktSize, cbGatewayDescription=cbGatewayDescription, cbClNumSeconds=cbClNumSeconds, cbFPGADownloadStart=cbFPGADownloadStart, cbNetGatewayMngSubnetMask=cbNetGatewayMngSubnetMask, cbCfgClTable=cbCfgClTable, cbHasEnable=cbHasEnable, cbClTableReset=cbClTableReset, cbDate=cbDate, cbStatNumBytesTXed=cbStatNumBytesTXed, cbDVBClockPolarity=cbDVBClockPolarity, cbCfgClTableGroup=cbCfgClTableGroup, cbMpeMode=cbMpeMode, cbStatAvrBytesPerSec=cbStatAvrBytesPerSec, cbFPGASourceFileName=cbFPGASourceFileName, cbStaticUserMAC=cbStaticUserMAC, cbMulticastSID=cbMulticastSID, cbStaticUserMask=cbStaticUserMask, cbCRCMode=cbCRCMode, cbCCU10=cbCCU10, cbMulticastTable=cbMulticastTable, cbGrTable=cbGrTable, cbDVBFraming=cbDVBFraming, cbClNumKBytes=cbClNumKBytes, cbMaxAllowableDelay=cbMaxAllowableDelay, cbHasMemory=cbHasMemory, cbGrTableMinRate=cbGrTableMinRate, cbStatGeneral=cbStatGeneral, cbSWDownloadStatus=cbSWDownloadStatus, cbClTableNode=cbClTableNode, cbSWDownloadStart=cbSWDownloadStart, cbDVBPAT=cbDVBPAT, cbStaticUserIP=cbStaticUserIP, cbStatNumOfPackets=cbStatNumOfPackets, cbConfigSTUTable=cbConfigSTUTable, cbGroupsTable=cbGroupsTable, cbTraceMask=cbTraceMask, cbClTableStampTime=cbClTableStampTime, cbStatNumPacketDiscarded=cbStatNumPacketDiscarded, cbNetDefaultGateway=cbNetDefaultGateway, cbStaticUserMinRate=cbStaticUserMinRate, cbFPGADownloadStatus=cbFPGADownloadStatus, cbCCU6=cbCCU6, cbQualityOfService=cbQualityOfService, cbCfgClTableBy=cbCfgClTableBy, cbDataMappingMode=cbDataMappingMode, cbGatewaySWReset=cbGatewaySWReset, cbTraceOutputChannel=cbTraceOutputChannel, cbCCU2=cbCCU2, cbCfgClTableMinRate=cbCfgClTableMinRate, cbCCU1=cbCCU1, cbClTablePacketsDiscr=cbClTablePacketsDiscr, cbTraceLevel=cbTraceLevel, cbCCU5=cbCCU5, cbGatewayEnabled=cbGatewayEnabled, cbDiagTestTxActive=cbDiagTestTxActive)
