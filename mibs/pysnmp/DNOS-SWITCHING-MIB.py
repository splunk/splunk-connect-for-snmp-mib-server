#
# PySNMP MIB module DNOS-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-SWITCHING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:37:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dnOS, AgentPortMask = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS", "AgentPortMask")
AgentLogSeverity, = mibBuilder.importSymbols("DNOS-LOGGING-MIB", "AgentLogSeverity")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
dot1qVlanIndex, dot1qFdbId, VlanId, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qFdbId", "VlanId", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, NotificationType, Counter64, Gauge32, MibIdentifier, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, ObjectIdentity, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "MibIdentifier", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "ObjectIdentity", "iso", "Counter32")
RowStatus, TruthValue, PhysAddress, TextualConvention, DateAndTime, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "PhysAddress", "TextualConvention", "DateAndTime", "DisplayString", "MacAddress")
fastPathSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1))
fastPathSwitching.setRevisions(('2014-04-09 00:00', '2011-10-17 00:00', '2003-11-21 00:00', '2003-02-06 18:35',))
if mibBuilder.loadTexts: fastPathSwitching.setLastUpdated('201404090000Z')
if mibBuilder.loadTexts: fastPathSwitching.setOrganization('Dell, Inc.')
class ProtectedPortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 198)

class VlanList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 512)

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class Ipv6AddressPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Ipv6AddressIfIdentifier(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class Ipv6IfIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Ipv6IfIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class PortId(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
agentInventoryFRUNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFRUNumber.setStatus('current')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
agentInventoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryPartNumber.setStatus('current')
agentInventoryManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturer.setStatus('current')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
agentInventoryNetworkProcessingDevice = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setStatus('current')
agentInventoryAdditionalPackages = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setStatus('current')
agentInventorySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setStatus('current')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
agentSupportedMibTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: agentSupportedMibTable.setStatus('current')
agentSupportedMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSupportedMibIndex"))
if mibBuilder.loadTexts: agentSupportedMibEntry.setStatus('current')
agentSupportedMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibIndex.setStatus('current')
agentSupportedMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibName.setStatus('current')
agentSupportedMibDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibDescription.setStatus('current')
agentSwitchCpuProcessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4))
agentSwitchCpuProcessMemFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 1), Integer32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setStatus('current')
agentSwitchCpuProcessMemAvailable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 2), Integer32().clone(2)).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setStatus('current')
agentSwitchCpuProcessRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setStatus('current')
agentSwitchCpuProcessRisingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setStatus('current')
agentSwitchCpuProcessFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setStatus('current')
agentSwitchCpuProcessFallingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setStatus('current')
agentSwitchCpuProcessFreeMemoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setStatus('current')
agentSwitchCpuProcessTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8), )
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setStatus('current')
agentSwitchCpuProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchCpuProcessIndex"))
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setStatus('current')
agentSwitchCpuProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setStatus('current')
agentSwitchCpuProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setStatus('current')
agentSwitchCpuProcessPercentageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setStatus('obsolete')
agentSwitchCpuProcessPercentageUtilizationFive = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilizationFive.setStatus('current')
agentSwitchCpuProcessPercentageUtilizationSixty = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilizationSixty.setStatus('current')
agentSwitchCpuProcessPercentageUtilizationThreeHundred = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilizationThreeHundred.setStatus('current')
agentSwitchCpuProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setStatus('current')
agentSwitchCpuProcessTotalUtilization = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setStatus('obsolete')
agentSwitchCpuProcessTotalUtilizationFive = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilizationFive.setStatus('current')
agentSwitchCpuProcessTotalUtilizationSixty = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilizationSixty.setStatus('current')
agentSwitchCpuProcessTotalUtilizationThreeHundred = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 4, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilizationThreeHundred.setStatus('current')
agentSwitchCpuCosQDropGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 6))
agentSwitchCpuCosQDropTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: agentSwitchCpuCosQDropTable.setStatus('current')
agentSwitchCpuCosQDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchCpuCosQIndex"))
if mibBuilder.loadTexts: agentSwitchCpuCosQDropEntry.setStatus('current')
agentSwitchCpuCosQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentSwitchCpuCosQIndex.setStatus('current')
agentSwitchCpuCosQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuCosQDrops.setStatus('current')
agentSwitchMbufGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7))
agentSwitchMbufsTotal = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsTotal.setStatus('current')
agentSwitchMbufsFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsFree.setStatus('current')
agentSwitchMbufsUsed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsUsed.setStatus('current')
agentSwitchMbufTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: agentSwitchMbufTable.setStatus('current')
agentSwitchMbufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchMbufPrio"))
if mibBuilder.loadTexts: agentSwitchMbufEntry.setStatus('current')
agentSwitchMbufPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentSwitchMbufPrio.setStatus('current')
agentSwitchMbufClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufClassName.setStatus('current')
agentSwitchMbufAllocAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufAllocAttempts.setStatus('current')
agentSwitchMbufAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufAllocFails.setStatus('current')
agentPortStatsRateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8))
agentPortStatsRateTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1), )
if mibBuilder.loadTexts: agentPortStatsRateTable.setStatus('current')
agentPortStatsRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPortStatsRateEntry.setStatus('current')
agentPortStatsRateBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 1), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateBitsPerSecondRx.setStatus('current')
agentPortStatsRateBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 2), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateBitsPerSecondTx.setStatus('current')
agentPortStatsRatePacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRatePacketsPerSecondRx.setStatus('current')
agentPortStatsRatePacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRatePacketsPerSecondTx.setStatus('current')
agentPortStatsRateOverflowBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 5), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowBitsPerSecondRx.setStatus('current')
agentPortStatsRateOverflowBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 6), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowBitsPerSecondTx.setStatus('current')
agentPortStatsRateOverflowPacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowPacketsPerSecondRx.setStatus('current')
agentPortStatsRateOverflowPacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowPacketsPerSecondTx.setStatus('current')
agentPortStatsRateHCBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 9), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondRx.setStatus('current')
agentPortStatsRateHCBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 10), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondTx.setStatus('current')
agentPortStatsRateHCPacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondRx.setStatus('current')
agentPortStatsRateHCPacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 1, 8, 1, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondTx.setStatus('current')
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('obsolete')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("ssh", 3), ("http", 4), ("https", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
agentLoginSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setStatus('current')
agentLoginSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setStatus('current')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3932159))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
agentTelnetMgmtPortNum = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMgmtPortNum.setStatus('current')
agentTelnetExecBannerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetExecBannerState.setStatus('current')
agentTelnetLoginBannerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginBannerState.setStatus('current')
agentTelnetMotdBannerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMotdBannerState.setStatus('current')
agentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3))
agentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigCreate.setStatus('current')
agentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentUserConfigTable.setStatus('current')
agentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentUserIndex"))
if mibBuilder.loadTexts: agentUserConfigEntry.setStatus('current')
agentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentUserIndex.setStatus('current')
agentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserName.setStatus('current')
agentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPassword.setStatus('current')
agentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("suspended", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAccessMode.setStatus('current')
agentUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserStatus.setStatus('current')
agentUserLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserLockoutStatus.setStatus('current')
agentUserPasswordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 3, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setStatus('current')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3932159))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6), ("baud-57600", 7), ("baud-115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
agentSerialExecBannerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialExecBannerState.setStatus('current')
agentSerialLoginBannerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialLoginBannerState.setStatus('current')
agentSerialMotdBannerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialMotdBannerState.setStatus('current')
agentPasswordManagementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6))
agentPasswordManagementMinLength = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setStatus('current')
agentPasswordManagementHistory = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementHistory.setStatus('current')
agentPasswordManagementAging = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementAging.setStatus('current')
agentPasswordManagementLockAttempts = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setStatus('current')
agentPasswordManagementPasswordStrengthCheck = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setStatus('current')
agentPasswordManagementStrengthMinUpperCase = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setStatus('current')
agentPasswordManagementStrengthMinLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setStatus('current')
agentPasswordManagementStrengthMinNumericNumbers = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setStatus('current')
agentPasswordManagementStrengthMinSpecialCharacters = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setStatus('current')
agentPasswordManagementStrengthMaxConsecutiveCharacters = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setStatus('current')
agentPasswordManagementStrengthMaxRepeatedCharacters = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setStatus('current')
agentPasswordManagementStrengthMinCharacterClasses = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setStatus('current')
agentPasswordMgmtLastPasswordSetResult = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setStatus('current')
agentPasswordManagementStrengthExcludeKeywordTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 15), )
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setStatus('current')
agentPasswordManagementStrengthExcludeKeywordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 15, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPasswordMgmtStrengthExcludeKeyword"))
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setStatus('current')
agentPasswordMgmtStrengthExcludeKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setStatus('current')
agentPasswordMgmtStrengthExcludeKeywordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 6, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setStatus('current')
agentCLIBannerConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 7))
agentCLIBannerExec = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCLIBannerExec.setStatus('current')
agentCLIBannerLogin = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 7, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCLIBannerLogin.setStatus('current')
agentCLIBannerMOTD = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCLIBannerMOTD.setStatus('current')
agentIASUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8))
agentIASUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserConfigCreate.setStatus('current')
agentIASUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 2), )
if mibBuilder.loadTexts: agentIASUserConfigTable.setStatus('current')
agentIASUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentIASUserIndex"))
if mibBuilder.loadTexts: agentIASUserConfigEntry.setStatus('current')
agentIASUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: agentIASUserIndex.setStatus('current')
agentIASUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserName.setStatus('current')
agentIASUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserPassword.setStatus('current')
agentIASUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 1, 8, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserStatus.setStatus('current')
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), )))
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('current')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('current')
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentLagSummaryLagIndex"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('current')
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('current')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('current')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('current')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('current')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('current')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('current')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('current')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('current')
agentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryType.setStatus('current')
agentLagSummaryStaticCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setStatus('current')
agentLagSummaryHashMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryHashMode.setStatus('current')
agentLagSummarySwitchportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("general", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummarySwitchportMode.setStatus('current')
agentLagSummaryMinimumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryMinimumActiveLinks.setStatus('current')
agentLagSummaryAccessVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAccessVlanID.setStatus('current')
agentLagSummaryNativeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryNativeVlanID.setStatus('current')
agentLagSummaryLocalPreferenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLocalPreferenceMode.setStatus('current')
agentVpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVpcId.setStatus('current')
agentLagSummaryPortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryPortCounter.setStatus('current')
agentLagSummaryRateLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryRateLoadInterval.setStatus('current')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('current')
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "DNOS-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('current')
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('current')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('current')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('current')
agentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setStatus('current')
agentLagDetailedPortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortCounter.setStatus('current')
agentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setStatus('obsolete')
agentLagClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagClearCounters.setStatus('current')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('current')
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('current')
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('current')
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('current')
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('current')
agentServicePortProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setStatus('current')
agentServicePortIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setStatus('current')
agentServicePortIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 8), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setStatus('current')
agentServicePortIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 9), )
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setStatus('current')
agentServicePortIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 9, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentServicePortIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setStatus('current')
agentServicePortIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 9, 1, 1), Ipv6AddressPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setStatus('current')
agentServicePortIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setStatus('current')
agentServicePortIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setStatus('current')
agentServicePortIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setStatus('current')
agentServicePortIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setStatus('current')
agentServicePortIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setStatus('current')
agentServicePortDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setStatus('current')
agentServicePortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13))
agentServicePortDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setStatus('current')
agentServicePortDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setStatus('current')
agentServicePortDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
agentServicePortDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setStatus('current')
agentServicePortDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setStatus('current')
agentServicePortDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setStatus('current')
agentServicePortDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setStatus('current')
agentServicePortDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setStatus('current')
agentServicePortDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setStatus('current')
agentServicePortDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setStatus('current')
agentServicePortDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 4, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setStatus('current')
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6))
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('obsolete')
agentSnmpCpuTresholdTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCpuTresholdTrapFlag.setStatus('current')
agentSnmpBuffersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 6, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBuffersTrapFlag.setStatus('current')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('obsolete')
agentBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBpduGuardMode.setStatus('obsolete')
agentBPDUFilteringMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBPDUFilteringMode.setStatus('obsolete')
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8))
agentSwitchFdbAddressAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000000), )).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchFdbAddressAgingTimeout.setStatus('current')
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('current')
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('current')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000000), )).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('current')
agentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5), )
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setStatus('current')
agentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchStaticMacFilteringVlanId"), (0, "DNOS-SWITCHING-MIB", "agentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setStatus('current')
agentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setStatus('current')
agentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setStatus('current')
agentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
agentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5, 1, 4), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setStatus('current')
agentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setStatus('current')
agentSwitchSnoopSSMGroupTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupTable.setStatus('current')
agentSwitchSnoopSSMGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMGroupAddressType"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMGroupIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMGroupVlanId"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMGroupAddress"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupEntry.setStatus('current')
agentSwitchSnoopSSMGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddressType.setStatus('current')
agentSwitchSnoopSSMGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddress.setStatus('current')
agentSwitchSnoopSSMGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupIfIndex.setStatus('current')
agentSwitchSnoopSSMGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1, 4), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupVlanId.setStatus('current')
agentSwitchSnoopSSMGroupLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupLastReporter.setStatus('current')
agentSwitchSnoopSSMGroupSourceFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupSourceFilterMode.setStatus('current')
agentSwitchSnoopSSMSrcListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListTable.setStatus('current')
agentSwitchSnoopSSMSrcListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListAddressType"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListVlanId"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListHostAddress"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListAddress"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListEntry.setStatus('current')
agentSwitchSnoopSSMSrcListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddressType.setStatus('current')
agentSwitchSnoopSSMSrcListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddress.setStatus('current')
agentSwitchSnoopSSMSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListIfIndex.setStatus('current')
agentSwitchSnoopSSMSrcListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35, 1, 4), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListVlanId.setStatus('current')
agentSwitchSnoopSSMSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 35, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListHostAddress.setStatus('current')
agentSwitchSnoopSSMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBTable.setStatus('current')
agentSwitchSnoopSSMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMFDBGroupAddressType"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMFDBGroupAddress"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMFDBSourceAddress"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopSSMFDBVlanIndex"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBEntry.setStatus('current')
agentSwitchSnoopSSMFDBVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBVlanIndex.setStatus('current')
agentSwitchSnoopSSMFDBGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1, 2), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddressType.setStatus('current')
agentSwitchSnoopSSMFDBGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1, 3), InetAddress())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddress.setStatus('current')
agentSwitchSnoopSSMFDBSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1, 4), InetAddress())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBSourceAddress.setStatus('current')
agentSwitchSnoopSSMFDBIncludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1, 5), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBIncludePortList.setStatus('current')
agentSwitchSnoopSSMFDBExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 36, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBExcludePortList.setStatus('current')
agentSwitchStormControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12))
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("asymmetric", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
agentSwitchBroadcastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setStatus('current')
agentSwitchBroadcastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThresholdUnit.setStatus('current')
agentSwitchMulticastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setStatus('current')
agentSwitchMulticastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setStatus('current')
agentSwitchMulticastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThresholdUnit.setStatus('current')
agentSwitchUnicastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setStatus('current')
agentSwitchUnicastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setStatus('current')
agentSwitchUnicastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThresholdUnit.setStatus('current')
agentSwitchStormControlType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchStormControlType.setStatus('current')
agentSwitchStormControlAction = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("trap", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchStormControlAction.setStatus('current')
agentSwitchSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6))
agentSwitchSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setStatus('current')
agentSwitchSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setStatus('current')
agentSwitchSnoopingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setStatus('current')
agentSwitchSnoopingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setStatus('current')
agentSwitchSnoopingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6, 1, 1, 3), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setStatus('current')
agentSwitchSnoopingMulticastControlFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setStatus('current')
agentSwitchSnoopingVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8))
agentSwitchSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setStatus('current')
agentSwitchSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setStatus('current')
agentSwitchSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setStatus('current')
agentSwitchSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setStatus('current')
agentSwitchSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setStatus('current')
agentSwitchSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setStatus('current')
agentSwitchSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setStatus('current')
agentSwitchSnoopingVlanReportSuppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanReportSuppMode.setStatus('current')
agentSwitchVlanStaticMrouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 9))
agentSwitchVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 9, 1), )
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setStatus('current')
agentSwitchVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setStatus('current')
agentSwitchVlanStaticMrouterAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setStatus('current')
agentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10))
agentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1), )
if mibBuilder.loadTexts: agentSwitchMFDBTable.setStatus('current')
agentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchMFDBVlanId"), (0, "DNOS-SWITCHING-MIB", "agentSwitchMFDBMacAddress"), (0, "DNOS-SWITCHING-MIB", "agentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setStatus('current')
agentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setStatus('current')
agentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setStatus('current')
agentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("mld", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setStatus('current')
agentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBType.setStatus('current')
agentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setStatus('current')
agentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setStatus('current')
agentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 1, 1, 7), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setStatus('current')
agentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 2), )
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setStatus('current')
agentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchMFDBSummaryVlanId"), (0, "DNOS-SWITCHING-MIB", "agentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setStatus('current')
agentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setStatus('current')
agentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setStatus('current')
agentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 2, 1, 3), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
agentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setStatus('current')
agentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setStatus('current')
agentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setStatus('current')
agentSwitchDVlanTagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11))
agentSwitchDVlanTagEthertype = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDVlanTagEthertype.setStatus('current')
agentSwitchDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 2), )
if mibBuilder.loadTexts: agentSwitchDVlanTagTable.setStatus('current')
agentSwitchDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchDVlanTagTPid"))
if mibBuilder.loadTexts: agentSwitchDVlanTagEntry.setStatus('current')
agentSwitchDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentSwitchDVlanTagTPid.setStatus('current')
agentSwitchDVlanTagPrimaryTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchDVlanTagPrimaryTPid.setStatus('current')
agentSwitchDVlanTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchDVlanTagRowStatus.setStatus('current')
agentSwitchPortDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3), )
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTable.setStatus('current')
agentSwitchPortDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchPortDVlanTagInterfaceIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentSwitchPortDVlanTagTPid"))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagEntry.setStatus('current')
agentSwitchPortDVlanTagInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagInterfaceIfIndex.setStatus('current')
agentSwitchPortDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTPid.setStatus('current')
agentSwitchPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagMode.setStatus('current')
agentSwitchPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagCustomerId.setStatus('current')
agentSwitchPortDVlanTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 11, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagRowStatus.setStatus('current')
agentSwitchVlanMacAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 17))
agentSwitchVlanMacAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 17, 1), )
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setStatus('current')
agentSwitchVlanMacAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 17, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchVlanMacAssociationMacAddress"), (0, "DNOS-SWITCHING-MIB", "agentSwitchVlanMacAssociationVlanId"))
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setStatus('current')
agentSwitchVlanMacAssociationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 17, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setStatus('current')
agentSwitchVlanMacAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 17, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setStatus('current')
agentSwitchVlanMacAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 17, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setStatus('current')
agentSwitchProtectedPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 18))
agentSwitchProtectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 18, 1), )
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setStatus('current')
agentSwitchProtectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 18, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchProtectedPortGroupId"))
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setStatus('current')
agentSwitchProtectedPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setStatus('current')
agentSwitchProtectedPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setStatus('current')
agentSwitchProtectedPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 18, 1, 1, 3), ProtectedPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setStatus('current')
agentSwitchVlanSubnetAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19))
agentSwitchVlanSubnetAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19, 1), )
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationTable.setStatus('current')
agentSwitchVlanSubnetAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchVlanSubnetAssociationIPAddress"), (0, "DNOS-SWITCHING-MIB", "agentSwitchVlanSubnetAssociationSubnetMask"), (0, "DNOS-SWITCHING-MIB", "agentSwitchVlanSubnetAssociationVlanId"))
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationEntry.setStatus('current')
agentSwitchVlanSubnetAssociationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationIPAddress.setStatus('current')
agentSwitchVlanSubnetAssociationSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationSubnetMask.setStatus('current')
agentSwitchVlanSubnetAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19, 1, 1, 3), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationVlanId.setStatus('current')
agentSwitchVlanSubnetAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 19, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationRowStatus.setStatus('current')
agentSwitchSnoopingQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20))
agentSwitchSnoopingQuerierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setStatus('current')
agentSwitchSnoopingQuerierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setStatus('current')
agentSwitchSnoopingQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setStatus('current')
agentSwitchSnoopingQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setStatus('current')
agentSwitchSnoopingQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setStatus('current')
agentSwitchSnoopingQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setStatus('current')
agentSwitchSnoopingQuerierExpiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setStatus('current')
agentSwitchSnoopingQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setStatus('current')
agentSwitchSnoopingQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "DNOS-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setStatus('current')
agentSwitchSnoopingQuerierVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setStatus('current')
agentSwitchSnoopingQuerierVlanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("querier", 1), ("non-querier", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setStatus('current')
agentSwitchSnoopingQuerierElectionParticipateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setStatus('current')
agentSwitchSnoopingQuerierVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setStatus('current')
agentSwitchSnoopingQuerierOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setStatus('current')
agentSwitchSnoopingQuerierOperMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setStatus('current')
agentSwitchSnoopingQuerierLastQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setStatus('current')
agentSwitchSnoopingQuerierLastQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 20, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setStatus('current')
agentSwitchVoiceVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 21))
agentSwitchVoiceVLANAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVoiceVLANAdminMode.setStatus('current')
agentSwitchVoiceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 21, 2), )
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setStatus('current')
agentSwitchVoiceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 21, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSwitchVoiceVlanInterfaceNum"), (0, "DNOS-SWITCHING-MIB", "agentSwitchVoiceVlanDeviceMacAddress"))
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setStatus('current')
agentSwitchVoiceVlanInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setStatus('current')
agentSwitchVoiceVlanDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 21, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setStatus('current')
agentSwitchAddressConflictGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26))
agentSwitchAddressConflictDetectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setStatus('current')
agentSwitchAddressConflictDetectionStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setStatus('current')
agentSwitchLastConflictingIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setStatus('current')
agentSwitchLastConflictingMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setStatus('current')
agentSwitchLastConflictReportedTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setStatus('current')
agentSwitchConflictIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setStatus('current')
agentSwitchConflictMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setStatus('current')
agentSwitchAddressConflictDetectionRun = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 26, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("run", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setStatus('current')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6), ("usb", 7), ("ftp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('deprecated')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("code", 2), ("config-script", 3), ("operationallog", 4), ("startuplog", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
agentTransferUploadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setStatus('current')
agentTransferUploadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setStatus('current')
agentTransferUploadImagename = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("active", 4), ("backup", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadImagename.setStatus('current')
agentTransferUploadUsername = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadUsername.setStatus('current')
agentTransferUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPassword.setStatus('current')
agentTransferUploadRemoteFilename = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadRemoteFilename.setStatus('current')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6), ("usb", 7), ("ftp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('deprecated')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("code", 2), ("config-script", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10), ("ias-users", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
agentTransferDownloadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setStatus('current')
agentTransferDownloadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setStatus('current')
agentTransferDownloadImagename = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("active", 4), ("backup", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadImagename.setStatus('current')
agentTransferDownloadUsername = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadUsername.setStatus('current')
agentTransferDownloadPassword = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPassword.setStatus('current')
agentTransferDownloadRemoteFilename = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadRemoteFilename.setStatus('current')
agentImageConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3))
agentImage1 = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage1.setStatus('obsolete')
agentImage2 = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage2.setStatus('obsolete')
agentActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImage.setStatus('obsolete')
agentNextActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextActiveImage.setStatus('obsolete')
agentActiveImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImageVersion.setStatus('current')
agentBackupImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBackupImageVersion.setStatus('current')
agentNextSelectedImage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 9, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextSelectedImage.setStatus('current')
agentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10))
agentMirroredPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setStatus('obsolete')
agentProbePortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProbePortIfIndex.setStatus('obsolete')
agentPortMirroringMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirroringMode.setStatus('obsolete')
agentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4), )
if mibBuilder.loadTexts: agentPortMirrorTable.setStatus('current')
agentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPortMirrorSessionNum"))
if mibBuilder.loadTexts: agentPortMirrorEntry.setStatus('current')
agentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setStatus('current')
agentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setStatus('current')
agentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setStatus('current')
agentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setStatus('current')
agentPortMirrorSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourceVlan.setStatus('current')
agentPortMirrorRemoteSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteSourceVlan.setStatus('current')
agentPortMirrorRemoteDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteDestinationVlan.setStatus('current')
agentPortMirrorReflectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorReflectorPort.setStatus('current')
agentPortMirrorIpAccessListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorIpAccessListNumber.setStatus('current')
agentPortMirrorMacAccessListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorMacAccessListNumber.setStatus('current')
agentPortMirrorTypeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 5), )
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setStatus('current')
agentPortMirrorTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 5, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPortMirrorSessionNum"), (0, "DNOS-SWITCHING-MIB", "agentPortMirrorTypeSourcePort"))
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setStatus('current')
agentPortMirrorTypeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setStatus('current')
agentPortMirrorTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txrx", 3))).clone('txrx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorTypeType.setStatus('current')
agentPortMirrorRemoteVlan = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlan.setStatus('obsolete')
agentPortMirrorRemoteVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 7), )
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanTable.setStatus('current')
agentPortMirrorRemoteVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 7, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPortMirrorRemoteVlanIndex"))
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanEntry.setStatus('current')
agentPortMirrorRemoteVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 7, 1, 1), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanIndex.setStatus('current')
agentPortMirrorRemoteVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 10, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanRowStatus.setStatus('current')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 12), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('current')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 12, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('current')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('current')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('current')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('obsolete')
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('obsolete')
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('obsolete')
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('obsolete')
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('obsolete')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setStatus('current')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('obsolete')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("asymmetric", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
agentPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagMode.setStatus('current')
agentPortDVlanTagEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagEthertype.setStatus('current')
agentPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagCustomerId.setStatus('current')
agentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setStatus('current')
agentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMaxFrameSize.setStatus('current')
agentPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setStatus('current')
agentPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setStatus('current')
agentPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlMode.setStatus('current')
agentPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setStatus('current')
agentPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlMode.setStatus('current')
agentPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setStatus('current')
agentPortSwitchportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("general", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSwitchportMode.setStatus('current')
agentPortVoiceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vlanid", 2), ("dot1p", 3), ("untagged", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setStatus('current')
agentPortVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanID.setStatus('current')
agentPortVoiceVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setStatus('current')
agentPortVoiceVlanDataPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trust", 1), ("untrust", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setStatus('current')
agentPortVoiceVlanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setStatus('current')
agentPortVoiceVlanAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanAuthenticationMode.setStatus('deprecated')
agentPortDot3FlowControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setStatus('current')
agentPortTransceiverFwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortTransceiverFwPartNumber.setStatus('current')
agentPortTransceiverFwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortTransceiverFwRevision.setStatus('current')
agentPortBroadcastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setStatus('current')
agentPortMulticastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setStatus('current')
agentPortUnicastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setStatus('current')
agentPortVoiceVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setStatus('current')
agentPortVoiceVlanNoneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setStatus('current')
agentPortVoiceVlanDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDSCP.setStatus('current')
agentPortVoiceVlanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setStatus('current')
agentPortAccessVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAccessVlanID.setStatus('current')
agentPortSpeedDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 44), Bits().clone(namedValues=NamedValues(("auto-duplex", 0), ("half-duplex", 1), ("full-duplex", 2), ("speed-auto", 3), ("speed-10mbit", 4), ("speed-100mbit", 5), ("speed-1gbit", 6), ("speed-10gbit", 7), ("na", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSpeedDuplexStatus.setStatus('current')
agentPortNativeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortNativeVlanID.setStatus('current')
agentPortDDisableAutorecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDDisableAutorecoveryTime.setStatus('current')
agentPortDDisableComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDDisableComponents.setStatus('current')
agentPortLoadStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 13, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLoadStatsInterval.setStatus('current')
agentProtocolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14))
agentProtocolGroupCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupCreate.setStatus('obsolete')
agentProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2), )
if mibBuilder.loadTexts: agentProtocolGroupTable.setStatus('current')
agentProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentProtocolGroupId"))
if mibBuilder.loadTexts: agentProtocolGroupEntry.setStatus('current')
agentProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentProtocolGroupId.setStatus('current')
agentProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupName.setStatus('current')
agentProtocolGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setStatus('current')
agentProtocolGroupProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setStatus('obsolete')
agentProtocolGroupProtocolARP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setStatus('obsolete')
agentProtocolGroupProtocolIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setStatus('obsolete')
agentProtocolGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupStatus.setStatus('current')
agentProtocolGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 3), )
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setStatus('current')
agentProtocolGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentProtocolGroupId"), (0, "DNOS-SWITCHING-MIB", "agentProtocolGroupPortIfIndex"))
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setStatus('current')
agentProtocolGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setStatus('current')
agentProtocolGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setStatus('current')
agentProtocolGroupProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 4), )
if mibBuilder.loadTexts: agentProtocolGroupProtocolTable.setStatus('current')
agentProtocolGroupProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 4, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentProtocolGroupId"), (0, "DNOS-SWITCHING-MIB", "agentProtocolGroupProtocolID"))
if mibBuilder.loadTexts: agentProtocolGroupProtocolEntry.setStatus('current')
agentProtocolGroupProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)))
if mibBuilder.loadTexts: agentProtocolGroupProtocolID.setStatus('current')
agentProtocolGroupProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 14, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupProtocolStatus.setStatus('current')
agentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15))
agentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigDigestKey.setStatus('current')
agentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setStatus('current')
agentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigName.setStatus('current')
agentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigRevision.setStatus('current')
agentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpForceVersion.setStatus('current')
agentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpAdminMode.setStatus('current')
agentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7), )
if mibBuilder.loadTexts: agentStpPortTable.setStatus('current')
agentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpPortEntry.setStatus('current')
agentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortState.setStatus('current')
agentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setStatus('current')
agentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setStatus('current')
agentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setStatus('current')
agentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setStatus('current')
agentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setStatus('current')
agentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setStatus('current')
agentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortUpTime.setStatus('current')
agentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setStatus('current')
agentStpPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortRootGuard.setStatus('current')
agentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8))
agentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstHelloTime.setStatus('current')
agentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstMaxAge.setStatus('current')
agentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setStatus('current')
agentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setStatus('current')
agentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setStatus('current')
agentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setStatus('current')
agentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setStatus('current')
agentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setStatus('current')
agentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setStatus('current')
agentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setStatus('current')
agentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgePriority.setStatus('current')
agentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 8, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setStatus('current')
agentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9), )
if mibBuilder.loadTexts: agentStpCstPortTable.setStatus('current')
agentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpCstPortEntry.setStatus('current')
agentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setStatus('current')
agentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setStatus('current')
agentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setStatus('current')
agentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortEdge.setStatus('current')
agentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setStatus('current')
agentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 6), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortId.setStatus('current')
agentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPathCost.setStatus('current')
agentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPriority.setStatus('current')
agentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setStatus('current')
agentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setStatus('current')
agentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 11), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setStatus('current')
agentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setStatus('current')
agentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setStatus('current')
agentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setStatus('current')
agentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setStatus('current')
agentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setStatus('current')
agentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setStatus('current')
agentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setStatus('current')
agentStpCstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setStatus('current')
agentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10), )
if mibBuilder.loadTexts: agentStpMstTable.setStatus('current')
agentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: agentStpMstEntry.setStatus('current')
agentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstId.setStatus('current')
agentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstBridgePriority.setStatus('current')
agentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setStatus('current')
agentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setStatus('current')
agentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPathCost.setStatus('current')
agentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPortId.setStatus('current')
agentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setStatus('current')
agentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setStatus('current')
agentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setStatus('current')
agentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstRowStatus.setStatus('current')
agentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11), )
if mibBuilder.loadTexts: agentStpMstPortTable.setStatus('current')
agentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpMstPortEntry.setStatus('current')
agentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setStatus('current')
agentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortId.setStatus('current')
agentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPathCost.setStatus('current')
agentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPriority.setStatus('current')
agentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setStatus('current')
agentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setStatus('current')
agentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 7), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setStatus('current')
agentStpMstPortLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setStatus('current')
agentStpMstPortTransitionsIntoLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setStatus('current')
agentStpMstPortTransitionsOutOfLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setStatus('current')
agentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 12), )
if mibBuilder.loadTexts: agentStpMstVlanTable.setStatus('current')
agentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 12, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentStpMstVlanEntry.setStatus('current')
agentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setStatus('current')
agentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduGuardMode.setStatus('current')
agentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setStatus('current')
agentAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16))
agentAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListCreate.setStatus('current')
agentAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2), )
if mibBuilder.loadTexts: agentAuthenticationListTable.setStatus('current')
agentAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentAuthenticationListIndex"))
if mibBuilder.loadTexts: agentAuthenticationListEntry.setStatus('current')
agentAuthenticationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthenticationListIndex.setStatus('current')
agentAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListName.setStatus('current')
agentAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setStatus('current')
agentAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setStatus('current')
agentAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setStatus('current')
agentAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListStatus.setStatus('current')
agentAuthenticationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setStatus('current')
agentAuthenticationListMethod5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setStatus('current')
agentUserConfigDefaultAuthenticationList = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setStatus('current')
agentUserAuthenticationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 4), )
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setStatus('current')
agentUserAuthenticationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 4, 1), )
agentUserConfigEntry.registerAugmentions(("DNOS-SWITCHING-MIB", "agentUserAuthenticationConfigEntry"))
agentUserAuthenticationConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setStatus('current')
agentUserAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationList.setStatus('current')
agentUserPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 5), )
if mibBuilder.loadTexts: agentUserPortConfigTable.setStatus('current')
agentUserPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 5, 1), )
agentUserConfigEntry.registerAugmentions(("DNOS-SWITCHING-MIB", "agentUserPortConfigEntry"))
agentUserPortConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserPortConfigEntry.setStatus('current')
agentUserPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 16, 5, 1, 1), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPortSecurity.setStatus('current')
agentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 17))
agentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 17, 1), )
if mibBuilder.loadTexts: agentClassOfServicePortTable.setStatus('current')
agentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DNOS-SWITCHING-MIB", "agentClassOfServicePortPriority"))
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setStatus('current')
agentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setStatus('current')
agentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClassOfServicePortClass.setStatus('current')
agentLinkDependencyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18))
agentLinkDependencyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1), )
if mibBuilder.loadTexts: agentLinkDependencyGroupTable.setStatus('current')
agentLinkDependencyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentLinkDependencyGroupId"))
if mibBuilder.loadTexts: agentLinkDependencyGroupEntry.setStatus('current')
agentLinkDependencyGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: agentLinkDependencyGroupId.setStatus('current')
agentLinkDependencyGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkDependencyGroupStatus.setStatus('current')
agentLinkDependencyGroupMemberPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1, 1, 3), AgentPortMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLinkDependencyGroupMemberPortMask.setStatus('current')
agentLinkDependencyGroupDependsOnPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1, 1, 4), AgentPortMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLinkDependencyGroupDependsOnPortMask.setStatus('current')
agentLinkDependencyGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkDependencyGroupAction.setStatus('current')
agentOperationalModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 20))
agentOperationalModeSimple = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOperationalModeSimple.setStatus('current')
agentHTTPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 21))
agentHTTPWebMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPWebMode.setStatus('current')
agentHTTPJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPJavaMode.setStatus('current')
agentAutoInstallConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22))
agentAutoinstallMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallMode.setStatus('current')
agentAutoinstallAutosaveMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setStatus('current')
agentAutoinstallUnicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setStatus('current')
agentAutoinstallStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAutoinstallStatus.setStatus('current')
agentAutoinstallAutoRebootMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setStatus('current')
agentAutoinstallOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 22, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setStatus('current')
agentVlanSwitchportTrunkModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 23))
agentVlanSwitchportTrunkModeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 23, 1), )
if mibBuilder.loadTexts: agentVlanSwitchportTrunkModeTable.setStatus('current')
agentVlanSwitchportTrunkModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 23, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentVlanSwitchportTrunkModeEntry.setStatus('current')
agentVlanSwitchportTrunkStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 23, 1, 1, 1), ProtectedPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanSwitchportTrunkStaticEgressPorts.setStatus('current')
agentVlanSwitchportTrunkForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 23, 1, 1, 2), ProtectedPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanSwitchportTrunkForbiddenPorts.setStatus('current')
agentExecAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25))
agentExecAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListCreate.setStatus('current')
agentExecAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2), )
if mibBuilder.loadTexts: agentExecAccountingListTable.setStatus('current')
agentExecAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentExecAccountingListIndex"))
if mibBuilder.loadTexts: agentExecAccountingListEntry.setStatus('current')
agentExecAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAccountingListIndex.setStatus('current')
agentExecAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAccountingListName.setStatus('current')
agentExecAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingMethodType.setStatus('current')
agentExecAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setStatus('current')
agentExecAccountingListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setStatus('current')
agentExecAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 25, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListStatus.setStatus('current')
agentCmdsAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26))
agentCmdsAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setStatus('current')
agentCmdsAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2), )
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setStatus('current')
agentCmdsAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentCmdsAccountingListIndex"))
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setStatus('current')
agentCmdsAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setStatus('current')
agentCmdsAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAccountingListName.setStatus('current')
agentCmdsAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setStatus('current')
agentCmdsAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setStatus('current')
agentCmdsAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 26, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setStatus('current')
agentCmdsAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27))
agentCmdsAuthorizationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListCreate.setStatus('current')
agentCmdsAuthorizationListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2), )
if mibBuilder.loadTexts: agentCmdsAuthorizationListTable.setStatus('current')
agentCmdsAuthorizationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentCmdsAuthorizationListIndex"))
if mibBuilder.loadTexts: agentCmdsAuthorizationListEntry.setStatus('current')
agentCmdsAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAuthorizationListIndex.setStatus('current')
agentCmdsAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAuthorizationListName.setStatus('current')
agentCmdsAuthorizationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListStatus.setStatus('current')
agentCmdsAuthorizationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 0), ("none", 1), ("undefined", 2), ("radius", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod1.setStatus('current')
agentCmdsAuthorizationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 0), ("none", 1), ("undefined", 2), ("radius", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod2.setStatus('current')
agentExecAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28))
agentExecAuthorizationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListCreate.setStatus('current')
agentExecAuthorizationListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2), )
if mibBuilder.loadTexts: agentExecAuthorizationListTable.setStatus('current')
agentExecAuthorizationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentExecAuthorizationListIndex"))
if mibBuilder.loadTexts: agentExecAuthorizationListEntry.setStatus('current')
agentExecAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAuthorizationListIndex.setStatus('current')
agentExecAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAuthorizationListName.setStatus('current')
agentExecAuthorizationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListStatus.setStatus('current')
agentExecAuthorizationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 0), ("none", 1), ("undefined", 2), ("radius", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod1.setStatus('current')
agentExecAuthorizationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 0), ("none", 1), ("undefined", 2), ("radius", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod2.setStatus('current')
agentExecAuthorizationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 0), ("none", 1), ("undefined", 2), ("radius", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod3.setStatus('current')
agentExecAuthorizationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 28, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 0), ("none", 1), ("undefined", 2), ("radius", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod4.setStatus('current')
agentSwitchMbufConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 29))
agentSwitchMbufRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 29, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufRisingThreshold.setStatus('current')
agentSwitchMbufFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 29, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufFallingThreshold.setStatus('current')
agentSwitchMbufNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 29, 3), AgentLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufNotificationSeverity.setStatus('current')
agentDynamicAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30))
agentDynamicAuthorizationMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationMode.setStatus('current')
agentDynamicAuthorizationServerKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationServerKey.setStatus('current')
agentDynamicAuthorizationEncryptServerKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationEncryptServerKey.setStatus('current')
agentDynamicAuthorizationPortNum = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(3799)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationPortNum.setStatus('current')
agentDynamicAuthorizationType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("all", 2), ("session-key", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationType.setStatus('current')
agentDynamicAuthorizationIgnoreSessionKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationIgnoreSessionKey.setStatus('current')
agentDynamicAuthorizationIgnoreServerKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationIgnoreServerKey.setStatus('current')
agentDynamicAuthorizationClientTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 8), )
if mibBuilder.loadTexts: agentDynamicAuthorizationClientTable.setStatus('current')
agentDynamicAuthorizationClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 8, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDynamicAuthorizationClientAddress"))
if mibBuilder.loadTexts: agentDynamicAuthorizationClientEntry.setStatus('current')
agentDynamicAuthorizationClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 8, 1, 1), DisplayString())
if mibBuilder.loadTexts: agentDynamicAuthorizationClientAddress.setStatus('current')
agentDynamicAuthorizationClientServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 8, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDynamicAuthorizationClientServerKey.setStatus('current')
agentDynamicAuthorizationClientEncryptServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDynamicAuthorizationClientEncryptServerKey.setStatus('current')
agentDynamicAuthorizationClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDynamicAuthorizationClientRowStatus.setStatus('current')
agentDynamicAuthorizationStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 30, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationStatsClear.setStatus('current')
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3))
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
agentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPasswords.setStatus('current')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
agentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearVlan.setStatus('current')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
agentSaveConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInitiated", 1), ("savingInProcess", 2), ("savingComplete", 3), ("savingFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSaveConfigStatus.setStatus('current')
agentStartupConfigErase = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStartupConfigErase.setStatus('current')
agentCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4))
agentCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterStatus.setStatus('current')
agentCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterIfIndex.setStatus('current')
agentCableTesterCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableStatus.setStatus('current')
agentCableTesterMinimumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setStatus('current')
agentCableTesterMaximumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setStatus('current')
agentCableTesterCableFailureLocation = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setStatus('current')
agentDaiConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22))
agentDaiSrcMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiSrcMacValidate.setStatus('current')
agentDaiDstMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiDstMacValidate.setStatus('current')
agentDaiIPValidate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIPValidate.setStatus('current')
agentDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4), )
if mibBuilder.loadTexts: agentDaiVlanConfigTable.setStatus('current')
agentDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDaiVlanIndex"))
if mibBuilder.loadTexts: agentDaiVlanConfigEntry.setStatus('current')
agentDaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDaiVlanIndex.setStatus('current')
agentDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanDynArpInspEnable.setStatus('current')
agentDaiVlanLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanLoggingEnable.setStatus('current')
agentDaiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanArpAclName.setStatus('current')
agentDaiVlanArpAclStaticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanArpAclStaticFlag.setStatus('current')
agentDaiStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiStatsReset.setStatus('current')
agentDaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6), )
if mibBuilder.loadTexts: agentDaiVlanStatsTable.setStatus('current')
agentDaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDaiVlanStatsIndex"))
if mibBuilder.loadTexts: agentDaiVlanStatsEntry.setStatus('current')
agentDaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDaiVlanStatsIndex.setStatus('current')
agentDaiVlanPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanPktsForwarded.setStatus('current')
agentDaiVlanPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanPktsDropped.setStatus('current')
agentDaiVlanDhcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDhcpDrops.setStatus('current')
agentDaiVlanDhcpPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDhcpPermits.setStatus('current')
agentDaiVlanAclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanAclDrops.setStatus('current')
agentDaiVlanAclPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanAclPermits.setStatus('current')
agentDaiVlanSrcMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanSrcMacFailures.setStatus('current')
agentDaiVlanDstMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDstMacFailures.setStatus('current')
agentDaiVlanIpValidFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanIpValidFailures.setStatus('current')
agentDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 7), )
if mibBuilder.loadTexts: agentDaiIfConfigTable.setStatus('current')
agentDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDaiIfConfigEntry.setStatus('current')
agentDaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfTrustEnable.setStatus('current')
agentDaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(15)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfRateLimit.setStatus('current')
agentDaiIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 22, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfBurstInterval.setStatus('current')
agentArpAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23))
agentArpAclTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 1), )
if mibBuilder.loadTexts: agentArpAclTable.setStatus('current')
agentArpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentArpAclName"))
if mibBuilder.loadTexts: agentArpAclEntry.setStatus('current')
agentArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclName.setStatus('current')
agentArpAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRowStatus.setStatus('current')
agentArpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 2), )
if mibBuilder.loadTexts: agentArpAclRuleTable.setStatus('current')
agentArpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 2, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentArpAclName"), (0, "DNOS-SWITCHING-MIB", "agentArpAclRuleMatchSenderIpAddr"), (0, "DNOS-SWITCHING-MIB", "agentArpAclRuleMatchSenderMacAddr"))
if mibBuilder.loadTexts: agentArpAclRuleEntry.setStatus('current')
agentArpAclRuleMatchSenderIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderIpAddr.setStatus('current')
agentArpAclRuleMatchSenderMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderMacAddr.setStatus('current')
agentArpAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 23, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleRowStatus.setStatus('current')
agentDhcpSnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24))
agentDhcpSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setStatus('current')
agentDhcpSnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setStatus('current')
agentDhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 3), )
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setStatus('current')
agentDhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDhcpSnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setStatus('current')
agentDhcpSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setStatus('current')
agentDhcpSnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setStatus('current')
agentDhcpSnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 4), )
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setStatus('current')
agentDhcpSnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setStatus('current')
agentDhcpSnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setStatus('current')
agentDhcpSnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setStatus('current')
agentDhcpSnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setStatus('current')
agentDhcpSnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setStatus('current')
agentIpsgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 5), )
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setStatus('current')
agentIpsgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setStatus('current')
agentIpsgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setStatus('current')
agentIpsgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setStatus('current')
agentDhcpSnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setStatus('current')
agentDhcpSnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 7), )
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setStatus('current')
agentDhcpSnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setStatus('current')
agentDhcpSnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setStatus('current')
agentDhcpSnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setStatus('current')
agentDhcpSnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setStatus('current')
agentStaticIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8), )
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setStatus('current')
agentStaticIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStaticIpsgBindingIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentStaticIpsgBindingVlanId"), (0, "DNOS-SWITCHING-MIB", "agentStaticIpsgBindingIpAddr"), (0, "DNOS-SWITCHING-MIB", "agentStaticIpsgBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticIpsgBindingEntry.setStatus('current')
agentStaticIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setStatus('current')
agentStaticIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setStatus('current')
agentStaticIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setStatus('current')
agentStaticIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setStatus('current')
agentStaticIpsgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setStatus('current')
agentDynamicIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 9), )
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setStatus('current')
agentDynamicIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 9, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDynamicIpsgBindingIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentDynamicIpsgBindingVlanId"), (0, "DNOS-SWITCHING-MIB", "agentDynamicIpsgBindingIpAddr"), (0, "DNOS-SWITCHING-MIB", "agentDynamicIpsgBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicIpsgBindingEntry.setStatus('current')
agentDynamicIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setStatus('current')
agentDynamicIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setStatus('current')
agentDynamicIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setStatus('current')
agentDynamicIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setStatus('current')
agentStaticDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10), )
if mibBuilder.loadTexts: agentStaticDsBindingTable.setStatus('current')
agentStaticDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStaticDsBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsBindingEntry.setStatus('current')
agentStaticDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setStatus('current')
agentStaticDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setStatus('current')
agentStaticDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setStatus('current')
agentStaticDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setStatus('current')
agentStaticDsBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setStatus('current')
agentDynamicDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11), )
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setStatus('current')
agentDynamicDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDynamicDsBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsBindingEntry.setStatus('current')
agentDynamicDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setStatus('current')
agentDynamicDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setStatus('current')
agentDynamicDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setStatus('current')
agentDynamicDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setStatus('current')
agentDynamicDsBindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setStatus('current')
agentDhcpSnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setStatus('current')
agentDhcpSnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setStatus('current')
agentDhcpSnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 24, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setStatus('current')
fastPathSwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('obsolete')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('obsolete')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('obsolete')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('obsolete')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('obsolete')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('obsolete')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 10)).setObjects(("DNOS-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 11)).setObjects(("DNOS-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('obsolete')
failedUserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 13))
if mibBuilder.loadTexts: failedUserLoginTrap.setStatus('current')
userLockoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 15))
if mibBuilder.loadTexts: userLockoutTrap.setStatus('current')
daiIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 16)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setStatus('current')
stpInstanceLoopInconsistentStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 17)).setObjects(("DNOS-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setStatus('current')
stpInstanceLoopInconsistentEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 18)).setObjects(("DNOS-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setStatus('current')
dhcpSnoopingIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 19)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setStatus('current')
agentSwitchIpAddressConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 20)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchConflictIPAddr"), ("DNOS-SWITCHING-MIB", "agentSwitchConflictMacAddr"))
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setStatus('current')
agentSwitchCpuRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 22)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchCpuProcessRisingThreshold"), ("DNOS-SWITCHING-MIB", "agentSwitchCpuProcessName"))
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setStatus('current')
agentSwitchCpuFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 23)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchCpuProcessFallingThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setStatus('current')
agentSwitchCpuFreeMemBelowThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 24)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setStatus('current')
agentSwitchCpuFreeMemAboveThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 25)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setStatus('current')
agentSwitchStormControlTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 26)).setObjects(("IF-MIB", "ifIndex"), ("DNOS-SWITCHING-MIB", "agentSwitchStormControlType"), ("DNOS-SWITCHING-MIB", "agentSwitchStormControlAction"))
if mibBuilder.loadTexts: agentSwitchStormControlTrap.setStatus('current')
agentSwitchMbufRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 27)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchMbufRisingThreshold"), ("DNOS-SWITCHING-MIB", "agentSwitchMbufsTotal"), ("DNOS-SWITCHING-MIB", "agentSwitchMbufsUsed"), ("DNOS-SWITCHING-MIB", "agentSwitchMbufsFree"))
if mibBuilder.loadTexts: agentSwitchMbufRisingThresholdTrap.setStatus('current')
agentSwitchMbufFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 0, 28)).setObjects(("DNOS-SWITCHING-MIB", "agentSwitchMbufFallingThreshold"), ("DNOS-SWITCHING-MIB", "agentSwitchMbufsTotal"), ("DNOS-SWITCHING-MIB", "agentSwitchMbufsUsed"), ("DNOS-SWITCHING-MIB", "agentSwitchMbufsFree"))
if mibBuilder.loadTexts: agentSwitchMbufFallingThresholdTrap.setStatus('current')
agentSdmPreferConfigEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 27))
agentSdmPreferCurrentTemplate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("dualDataCenter", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSdmPreferCurrentTemplate.setStatus('current')
agentSdmPreferNextTemplate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("default", 0), ("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("dualDataCenter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSdmPreferNextTemplate.setStatus('current')
agentSdmTemplateSummaryTable = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28))
agentSdmTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1), )
if mibBuilder.loadTexts: agentSdmTemplateTable.setStatus('current')
agentSdmTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentSdmTemplateId"))
if mibBuilder.loadTexts: agentSdmTemplateEntry.setStatus('current')
agentSdmTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("dualDataCenter", 5))))
if mibBuilder.loadTexts: agentSdmTemplateId.setStatus('current')
agentArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentArpEntries.setStatus('current')
agentIPv4UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv4UnicastRoutes.setStatus('current')
agentIPv6NdpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6NdpEntries.setStatus('current')
agentIPv6UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6UnicastRoutes.setStatus('current')
agentEcmpNextHops = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpNextHops.setStatus('current')
agentIPv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv4MulticastRoutes.setStatus('current')
agentIPv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 28, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6MulticastRoutes.setStatus('current')
agentSwitchCutThroughGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 29))
agentSwitchCutThroughConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCutThroughConfigMode.setStatus('current')
agentSwitchCutThroughRunningModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCutThroughRunningModeStatus.setStatus('current')
agentSwitchCutThroughConfiguredModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCutThroughConfiguredModeStatus.setStatus('current')
agentPortTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 30))
agentPortType40GigBaseX = ObjectIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 30, 1))
if mibBuilder.loadTexts: agentPortType40GigBaseX.setStatus('current')
agentPrivateVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31))
agentPrivateVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 1), )
if mibBuilder.loadTexts: agentPrivateVlanTable.setStatus('current')
agentPrivateVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentPrivateVlanEntry.setStatus('current')
agentPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("isolated", 2), ("community", 3), ("unconfigured", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanType.setStatus('current')
agentPrivateVlanAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 1, 1, 2), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanAssociate.setStatus('current')
agentPrivateVlanIntfAssocTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2), )
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocTable.setStatus('current')
agentPrivateVlanIntfAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocEntry.setStatus('current')
agentPrivateVlanIntfAssocHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostPrimary.setStatus('current')
agentPrivateVlanIntfAssocHostSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostSecondary.setStatus('current')
agentPrivateVlanIntfAssocPromiscuousPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousPrimary.setStatus('current')
agentPrivateVlanIntfAssocPromiscuousSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2, 1, 4), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousSecondary.setStatus('current')
agentPrivateVlanIntfAssocOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 31, 2, 1, 5), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocOperational.setStatus('current')
agentDhcpL2RelayConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32))
agentDhcpL2RelayAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setStatus('current')
agentDhcpL2RelayIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 2), )
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setStatus('current')
agentDhcpL2RelayIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setStatus('current')
agentDhcpL2RelayIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setStatus('current')
agentDhcpL2RelayIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setStatus('current')
agentDhcpL2RelayVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 3), )
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setStatus('current')
agentDhcpL2RelayVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDhcpL2RelayVlanIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setStatus('current')
agentDhcpL2RelayVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setStatus('current')
agentDhcpL2RelayVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setStatus('current')
agentDhcpL2RelayCircuitIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setStatus('current')
agentDhcpL2RelayRemoteIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setStatus('current')
agentDhcpL2RelayStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setStatus('current')
agentDhcpL2RelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 7), )
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setStatus('current')
agentDhcpL2RelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setStatus('current')
agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setStatus('current')
agentDhcpL2RelayUntrustedClntMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setStatus('current')
agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setStatus('current')
agentDhcpL2RelayTrustedClntMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 32, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setStatus('current')
agentPvrstpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15))
agentPvstpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvstpAdminMode.setStatus('current')
agentPvrstpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpAdminMode.setStatus('current')
agentPvrstpUplinkFast = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpUplinkFast.setStatus('current')
agentPvrstpBackboneFast = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpBackboneFast.setStatus('current')
agentPvrstpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5), )
if mibBuilder.loadTexts: agentPvrstpVlanTable.setStatus('current')
agentPvrstpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPvrstpVlanTableIndex"))
if mibBuilder.loadTexts: agentPvrstpVlanEntry.setStatus('current')
agentPvrstpVlanTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5, 1, 1), VlanId())
if mibBuilder.loadTexts: agentPvrstpVlanTableIndex.setStatus('current')
agentPvrstpVlanRootPriSec = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanRootPriSec.setStatus('current')
agentPvrstpVlanHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanHelloTime.setStatus('current')
agentPvrstpVlanFwdDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanFwdDelayTime.setStatus('current')
agentPvrstpVlanMaxAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpVlanMaxAgeTime.setStatus('current')
agentPvrstpPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 6), )
if mibBuilder.loadTexts: agentPvrstpPortVlanTable.setStatus('current')
agentPvrstpPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 6, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentPvrstpPortIndex"), (0, "DNOS-SWITCHING-MIB", "agentPvrstpVlanIndex"))
if mibBuilder.loadTexts: agentPvrstpPortVlanEntry.setStatus('current')
agentPvrstpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPvrstpPortIndex.setStatus('current')
agentPvrstpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: agentPvrstpVlanIndex.setStatus('current')
agentPvrstpPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 15, 15, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPvrstpPortVlanPriority.setStatus('current')
agentDhcpv6SnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33))
agentDhcpv6SnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingAdminMode.setStatus('current')
agentDhcpv6SnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingVerifyMac.setStatus('current')
agentDhcpv6SnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 3), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigTable.setStatus('current')
agentDhcpv6SnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 3, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDhcpv6SnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigEntry.setStatus('current')
agentDhcpv6SnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanIndex.setStatus('current')
agentDhcpv6SnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanEnable.setStatus('current')
agentDhcpv6SnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 4), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigTable.setStatus('current')
agentDhcpv6SnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigEntry.setStatus('current')
agentDhcpv6SnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfTrustEnable.setStatus('current')
agentDhcpv6SnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfLogEnable.setStatus('current')
agentDhcpv6SnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfRateLimit.setStatus('current')
agentDhcpv6SnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfBurstInterval.setStatus('current')
agentIpv6sgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 5), )
if mibBuilder.loadTexts: agentIpv6sgIfConfigTable.setStatus('current')
agentIpv6sgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpv6sgIfConfigEntry.setStatus('current')
agentIpv6sgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6sgIfVerifySource.setStatus('current')
agentIpv6sgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6sgIfPortSecurity.setStatus('current')
agentDhcpv6SnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsReset.setStatus('current')
agentDhcpv6SnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 7), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsTable.setStatus('current')
agentDhcpv6SnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsEntry.setStatus('current')
agentDhcpv6SnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingMacVerifyFailures.setStatus('current')
agentDhcpv6SnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidClientMessages.setStatus('current')
agentDhcpv6SnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidServerMessages.setStatus('current')
agentStaticIpv6sgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8), )
if mibBuilder.loadTexts: agentStaticIpv6sgBindingTable.setStatus('current')
agentStaticIpv6sgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStaticIpv6sgBindingIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentStaticIpv6sgBindingVlanId"), (0, "DNOS-SWITCHING-MIB", "agentStaticIpv6sgBindingIpAddr"), (0, "DNOS-SWITCHING-MIB", "agentStaticIpv6sgBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticIpv6sgBindingEntry.setStatus('current')
agentStaticIpv6sgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIfIndex.setStatus('current')
agentStaticIpv6sgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingVlanId.setStatus('current')
agentStaticIpv6sgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIpAddr.setStatus('current')
agentStaticIpv6sgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingMacAddr.setStatus('current')
agentStaticIpv6sgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingRowStatus.setStatus('current')
agentDynamicIpv6sgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 9), )
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingTable.setStatus('current')
agentDynamicIpv6sgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 9, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDynamicIpv6sgBindingIfIndex"), (0, "DNOS-SWITCHING-MIB", "agentDynamicIpv6sgBindingVlanId"), (0, "DNOS-SWITCHING-MIB", "agentDynamicIpv6sgBindingIpAddr"), (0, "DNOS-SWITCHING-MIB", "agentDynamicIpv6sgBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingEntry.setStatus('current')
agentDynamicIpv6sgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIfIndex.setStatus('current')
agentDynamicIpv6sgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingVlanId.setStatus('current')
agentDynamicIpv6sgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 9, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIpAddr.setStatus('current')
agentDynamicIpv6sgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingMacAddr.setStatus('current')
agentStaticDsv6BindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10), )
if mibBuilder.loadTexts: agentStaticDsv6BindingTable.setStatus('current')
agentStaticDsv6BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentStaticDsv6BindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsv6BindingEntry.setStatus('current')
agentStaticDsv6BindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingIfIndex.setStatus('current')
agentStaticDsv6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingVlanId.setStatus('current')
agentStaticDsv6BindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingMacAddr.setStatus('current')
agentStaticDsv6BindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingIpAddr.setStatus('current')
agentStaticDsv6BindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingRowStatus.setStatus('current')
agentDynamicDsv6BindingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11), )
if mibBuilder.loadTexts: agentDynamicDsv6BindingTable.setStatus('current')
agentDynamicDsv6BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11, 1), ).setIndexNames((0, "DNOS-SWITCHING-MIB", "agentDynamicDsv6BindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsv6BindingEntry.setStatus('current')
agentDynamicDsv6BindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingIfIndex.setStatus('current')
agentDynamicDsv6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingVlanId.setStatus('current')
agentDynamicDsv6BindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingMacAddr.setStatus('current')
agentDynamicDsv6BindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingIpAddr.setStatus('current')
agentDynamicDsv6BindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingLeaseRemainingTime.setStatus('current')
agentDhcpv6SnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteFileName.setStatus('current')
agentDhcpv6SnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteIpAddr.setStatus('current')
agentDhcpv6SnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 1, 2, 8, 33, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingStoreInterval.setStatus('current')
mibBuilder.exportSymbols("DNOS-SWITCHING-MIB", agentSpanningTreeMode=agentSpanningTreeMode, agentTransferUploadServerAddress=agentTransferUploadServerAddress, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, agentPvrstpVlanTable=agentPvrstpVlanTable, agentPortDDisableAutorecoveryTime=agentPortDDisableAutorecoveryTime, agentPvrstpVlanFwdDelayTime=agentPvrstpVlanFwdDelayTime, agentPasswordManagementConfigGroup=agentPasswordManagementConfigGroup, agentSwitchSnoopingQuerierGroup=agentSwitchSnoopingQuerierGroup, agentPortVoiceVlanAuthenticationMode=agentPortVoiceVlanAuthenticationMode, agentStpPortRootGuard=agentStpPortRootGuard, agentAuthenticationListTable=agentAuthenticationListTable, agentDynamicDsv6BindingIfIndex=agentDynamicDsv6BindingIfIndex, agentSwitchFdbAddressAgingTimeout=agentSwitchFdbAddressAgingTimeout, agentSwitchProtectedPortEntry=agentSwitchProtectedPortEntry, agentLagSummarySwitchportMode=agentLagSummarySwitchportMode, agentTransferDownloadImagename=agentTransferDownloadImagename, agentStpCstPortEntry=agentStpCstPortEntry, agentSwitchMbufClassName=agentSwitchMbufClassName, agentDhcpL2RelayIfEnable=agentDhcpL2RelayIfEnable, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentSwitchVoiceVlanDeviceEntry=agentSwitchVoiceVlanDeviceEntry, agentSwitchCpuProcessMemFree=agentSwitchCpuProcessMemFree, agentSwitchSnoopingQuerierOperVersion=agentSwitchSnoopingQuerierOperVersion, agentDynamicDsv6BindingMacAddr=agentDynamicDsv6BindingMacAddr, agentInventoryManufacturer=agentInventoryManufacturer, agentPortSTPMode=agentPortSTPMode, agentArpAclName=agentArpAclName, agentServicePortSubnetMask=agentServicePortSubnetMask, agentDhcpSnoopingVerifyMac=agentDhcpSnoopingVerifyMac, agentSdmTemplateSummaryTable=agentSdmTemplateSummaryTable, ProtectedPortList=ProtectedPortList, agentSwitchCpuProcessIndex=agentSwitchCpuProcessIndex, agentSwitchCpuRisingThresholdTrap=agentSwitchCpuRisingThresholdTrap, agentPortMirrorTypeType=agentPortMirrorTypeType, agentTransferDownloadServerAddressType=agentTransferDownloadServerAddressType, agentUserAuthenticationConfigEntry=agentUserAuthenticationConfigEntry, agentDaiVlanStatsTable=agentDaiVlanStatsTable, agentStaticDsBindingIfIndex=agentStaticDsBindingIfIndex, agentSwitchStormControlType=agentSwitchStormControlType, agentPvrstpPortIndex=agentPvrstpPortIndex, agentSwitchStaticMacFilteringSourcePortMask=agentSwitchStaticMacFilteringSourcePortMask, agentSwitchMbufsTotal=agentSwitchMbufsTotal, agentCmdsAccountingListMethod1=agentCmdsAccountingListMethod1, agentServicePortDhcp6RENEWMessagesSent=agentServicePortDhcp6RENEWMessagesSent, agentSwitchMFDBSummaryTable=agentSwitchMFDBSummaryTable, agentSwitchMbufsUsed=agentSwitchMbufsUsed, agentStpMstDesignatedPortId=agentStpMstDesignatedPortId, agentPortStatsRateHCBitsPerSecondRx=agentPortStatsRateHCBitsPerSecondRx, agentSwitchMFDBVlanId=agentSwitchMFDBVlanId, agentSwitchMFDBSummaryVlanId=agentSwitchMFDBSummaryVlanId, agentServicePortIpv6AddressAutoConfig=agentServicePortIpv6AddressAutoConfig, agentServicePortDhcp6SOLICITMessagesSent=agentServicePortDhcp6SOLICITMessagesSent, agentDynamicAuthorizationStatsClear=agentDynamicAuthorizationStatsClear, agentProtocolGroupProtocolStatus=agentProtocolGroupProtocolStatus, agentAutoinstallAutoRebootMode=agentAutoinstallAutoRebootMode, agentStaticDsBindingMacAddr=agentStaticDsBindingMacAddr, agentInventorySoftwareVersion=agentInventorySoftwareVersion, agentPrivateVlanTable=agentPrivateVlanTable, agentHTTPJavaMode=agentHTTPJavaMode, agentSwitchCutThroughRunningModeStatus=agentSwitchCutThroughRunningModeStatus, agentPrivateVlanIntfAssocHostPrimary=agentPrivateVlanIntfAssocHostPrimary, agentDynamicAuthorizationType=agentDynamicAuthorizationType, agentLagSummaryPortCounter=agentLagSummaryPortCounter, agentArpAclGroup=agentArpAclGroup, agentPortMirrorTable=agentPortMirrorTable, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentPvrstpVlanRootPriSec=agentPvrstpVlanRootPriSec, agentDhcpv6SnoopingIfTrustEnable=agentDhcpv6SnoopingIfTrustEnable, agentSwitchVoiceVlanDeviceMacAddress=agentSwitchVoiceVlanDeviceMacAddress, agentCmdsAuthorizationListEntry=agentCmdsAuthorizationListEntry, agentPortVoiceVlanUntagged=agentPortVoiceVlanUntagged, agentArpAclRowStatus=agentArpAclRowStatus, agentPortDefaultType=agentPortDefaultType, agentSerialStopBits=agentSerialStopBits, agentPrivateVlanIntfAssocPromiscuousPrimary=agentPrivateVlanIntfAssocPromiscuousPrimary, agentInventoryMachineModel=agentInventoryMachineModel, agentDaiVlanAclPermits=agentDaiVlanAclPermits, agentStpMstPortPathCost=agentStpMstPortPathCost, agentEcmpNextHops=agentEcmpNextHops, agentServicePortProtocolDhcpRenew=agentServicePortProtocolDhcpRenew, agentTransferUploadPath=agentTransferUploadPath, agentSwitchVlanMacAssociationTable=agentSwitchVlanMacAssociationTable, agentPrivateVlanType=agentPrivateVlanType, agentDynamicIpv6sgBindingTable=agentDynamicIpv6sgBindingTable, agentStpCstBridgeHoldTime=agentStpCstBridgeHoldTime, agentCmdsAccountingListStatus=agentCmdsAccountingListStatus, agentDhcpL2RelayIfConfigEntry=agentDhcpL2RelayIfConfigEntry, agentDhcpv6SnoopingRemoteIpAddr=agentDhcpv6SnoopingRemoteIpAddr, agentTransferUploadStart=agentTransferUploadStart, agentIpsgIfVerifySource=agentIpsgIfVerifySource, agentAutoinstallUnicastRetryCount=agentAutoinstallUnicastRetryCount, agentAuthenticationListStatus=agentAuthenticationListStatus, agentUserAuthenticationList=agentUserAuthenticationList, agentLagConfigStaticCapability=agentLagConfigStaticCapability, agentSupportedMibName=agentSupportedMibName, agentStpMstDesignatedRootId=agentStpMstDesignatedRootId, agentPasswordMgmtLastPasswordSetResult=agentPasswordMgmtLastPasswordSetResult, agentDhcpSnoopingMacVerifyFailures=agentDhcpSnoopingMacVerifyFailures, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentSwitchVlanMacAssociationEntry=agentSwitchVlanMacAssociationEntry, agentTrapLogTrap=agentTrapLogTrap, agentStpCstPortTopologyChangeAck=agentStpCstPortTopologyChangeAck, agentStpPortStatsMstpBpduRx=agentStpPortStatsMstpBpduRx, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentIpv6sgIfVerifySource=agentIpv6sgIfVerifySource, agentSwitchSnoopingQuerierCfgEntry=agentSwitchSnoopingQuerierCfgEntry, agentSwitchMFDBFilteringPortMask=agentSwitchMFDBFilteringPortMask, agentPortMirrorRemoteVlanTable=agentPortMirrorRemoteVlanTable, agentPortVoiceVlanDataPriorityMode=agentPortVoiceVlanDataPriorityMode, agentSwitchSnoopSSMSrcListHostAddress=agentSwitchSnoopSSMSrcListHostAddress, agentStpMstDesignatedBridgeId=agentStpMstDesignatedBridgeId, agentPortStatsRateBitsPerSecondTx=agentPortStatsRateBitsPerSecondTx, agentTelnetMgmtPortNum=agentTelnetMgmtPortNum, agentPortMirrorRemoteVlanIndex=agentPortMirrorRemoteVlanIndex, agentHTTPWebMode=agentHTTPWebMode, agentCableTesterCableStatus=agentCableTesterCableStatus, agentDynamicIpv6sgBindingIpAddr=agentDynamicIpv6sgBindingIpAddr, agentSwitchCpuCosQDropEntry=agentSwitchCpuCosQDropEntry, agentTransferUploadMode=agentTransferUploadMode, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentSwitchSnoopingQuerierElectionParticipateMode=agentSwitchSnoopingQuerierElectionParticipateMode, agentStaticDsBindingVlanId=agentStaticDsBindingVlanId, agentPrivateVlanGroup=agentPrivateVlanGroup, agentPortConfigTable=agentPortConfigTable, agentPortStatsRatePacketsPerSecondRx=agentPortStatsRatePacketsPerSecondRx, agentPasswordManagementStrengthMaxRepeatedCharacters=agentPasswordManagementStrengthMaxRepeatedCharacters, agentAutoinstallMode=agentAutoinstallMode, agentVlanSwitchportTrunkStaticEgressPorts=agentVlanSwitchportTrunkStaticEgressPorts, agentDynamicDsv6BindingLeaseRemainingTime=agentDynamicDsv6BindingLeaseRemainingTime, agentSwitchVlanSubnetAssociationIPAddress=agentSwitchVlanSubnetAssociationIPAddress, agentPrivateVlanIntfAssocOperational=agentPrivateVlanIntfAssocOperational, agentStpMstRowStatus=agentStpMstRowStatus, agentStpMstPortTable=agentStpMstPortTable, agentPortMirrorTypeTable=agentPortMirrorTypeTable, agentTransferDownloadGroup=agentTransferDownloadGroup, agentProtocolGroupStatus=agentProtocolGroupStatus, agentDaiVlanAclDrops=agentDaiVlanAclDrops, agentDhcpSnoopingIfConfigTable=agentDhcpSnoopingIfConfigTable, agentStpMstPortTransitionsIntoLoopInconsistentState=agentStpMstPortTransitionsIntoLoopInconsistentState, stpInstanceLoopInconsistentStartTrap=stpInstanceLoopInconsistentStartTrap, agentLagDetailedPortCounter=agentLagDetailedPortCounter, agentLagConfigGroup=agentLagConfigGroup, agentPrivateVlanIntfAssocHostSecondary=agentPrivateVlanIntfAssocHostSecondary, agentPasswordManagementPasswordStrengthCheck=agentPasswordManagementPasswordStrengthCheck, agentStpPortTable=agentStpPortTable, agentSwitchCpuProcessName=agentSwitchCpuProcessName, broadcastStormStartTrap=broadcastStormStartTrap, agentPortVoiceVlanNoneMode=agentPortVoiceVlanNoneMode, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentExecAuthorizationListIndex=agentExecAuthorizationListIndex, agentCableTesterGroup=agentCableTesterGroup, agentExecAccountingListEntry=agentExecAccountingListEntry, agentStartupConfigErase=agentStartupConfigErase, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentSupportedMibDescription=agentSupportedMibDescription, agentArpAclRuleMatchSenderMacAddr=agentArpAclRuleMatchSenderMacAddr, agentSwitchVlanSubnetAssociationTable=agentSwitchVlanSubnetAssociationTable, agentStpCstBridgePriority=agentStpCstBridgePriority, agentDhcpL2RelayRemoteIdVlanEnable=agentDhcpL2RelayRemoteIdVlanEnable, agentPortStatsRateHCPacketsPerSecondTx=agentPortStatsRateHCPacketsPerSecondTx, agentSwitchMFDBCurrentEntries=agentSwitchMFDBCurrentEntries, agentStpForceVersion=agentStpForceVersion, agentUserPortConfigTable=agentUserPortConfigTable, agentTransferConfigGroup=agentTransferConfigGroup, agentPvrstpPortVlanEntry=agentPvrstpPortVlanEntry, agentPortDVlanTagCustomerId=agentPortDVlanTagCustomerId, agentArpAclRuleTable=agentArpAclRuleTable, vlanRequestFailureTrap=vlanRequestFailureTrap, agentPvrstpBackboneFast=agentPvrstpBackboneFast, agentStaticIpsgBindingTable=agentStaticIpsgBindingTable, agentAuthenticationGroup=agentAuthenticationGroup, agentDhcpv6SnoopingVlanConfigTable=agentDhcpv6SnoopingVlanConfigTable, agentStpMstId=agentStpMstId, agentProtocolGroupVlanId=agentProtocolGroupVlanId, agentDhcpL2RelayCircuitIdVlanEnable=agentDhcpL2RelayCircuitIdVlanEnable, agentSwitchCpuProcessPercentageUtilizationSixty=agentSwitchCpuProcessPercentageUtilizationSixty, agentTransferDownloadPath=agentTransferDownloadPath, agentPortMulticastControlMode=agentPortMulticastControlMode, agentDaiVlanIpValidFailures=agentDaiVlanIpValidFailures, agentSwitchMFDBSummaryMacAddress=agentSwitchMFDBSummaryMacAddress, agentPasswordManagementLockAttempts=agentPasswordManagementLockAttempts, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentDynamicDsBindingTable=agentDynamicDsBindingTable, stpInstanceLoopInconsistentEndTrap=stpInstanceLoopInconsistentEndTrap, agentStpMstTimeSinceTopologyChange=agentStpMstTimeSinceTopologyChange, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentDhcpL2RelayVlanIndex=agentDhcpL2RelayVlanIndex, agentUserPortSecurity=agentUserPortSecurity, agentSwitchDVlanTagGroup=agentSwitchDVlanTagGroup, agentSwitchCpuFreeMemBelowThresholdTrap=agentSwitchCpuFreeMemBelowThresholdTrap, agentInventoryFRUNumber=agentInventoryFRUNumber, agentStaticIpv6sgBindingIpAddr=agentStaticIpv6sgBindingIpAddr, agentStaticDsBindingEntry=agentStaticDsBindingEntry, agentProtocolGroupProtocolARP=agentProtocolGroupProtocolARP, agentDhcpSnoopingAdminMode=agentDhcpSnoopingAdminMode, agentTransferDownloadServerAddress=agentTransferDownloadServerAddress, agentSwitchMbufAllocFails=agentSwitchMbufAllocFails, agentProbePortIfIndex=agentProbePortIfIndex, agentArpAclRuleEntry=agentArpAclRuleEntry, agentSupportedMibEntry=agentSupportedMibEntry, agentSwitchMbufsFree=agentSwitchMbufsFree, agentDynamicIpv6sgBindingMacAddr=agentDynamicIpv6sgBindingMacAddr, agentExecAccountingListName=agentExecAccountingListName, agentTransferUploadImagename=agentTransferUploadImagename, agentPortDDisableComponents=agentPortDDisableComponents, userLockoutTrap=userLockoutTrap, agentPortVoiceVlanID=agentPortVoiceVlanID, agentDhcpSnoopingRemoteFileName=agentDhcpSnoopingRemoteFileName, agentAutoinstallStatus=agentAutoinstallStatus, agentPvrstpPortVlanPriority=agentPvrstpPortVlanPriority, agentSwitchSnoopSSMFDBSourceAddress=agentSwitchSnoopSSMFDBSourceAddress, agentSdmTemplateId=agentSdmTemplateId, agentPortStatsRateBitsPerSecondRx=agentPortStatsRateBitsPerSecondRx, agentDhcpv6SnoopingRemoteFileName=agentDhcpv6SnoopingRemoteFileName, agentDynamicIpsgBindingVlanId=agentDynamicIpsgBindingVlanId, agentIASUserName=agentIASUserName, agentBpduGuardMode=agentBpduGuardMode, agentLagSummaryName=agentLagSummaryName, agentCmdsAuthorizationListIndex=agentCmdsAuthorizationListIndex, agentIpv6sgIfPortSecurity=agentIpv6sgIfPortSecurity, agentStpMstTopologyChangeCount=agentStpMstTopologyChangeCount, agentSwitchMFDBForwardingPortMask=agentSwitchMFDBForwardingPortMask, agentPortAdminMode=agentPortAdminMode, agentDhcpv6SnoopingInvalidClientMessages=agentDhcpv6SnoopingInvalidClientMessages, agentPvrstpVlanHelloTime=agentPvrstpVlanHelloTime, agentPasswordManagementAging=agentPasswordManagementAging, agentDhcpL2RelayIfTrustEnable=agentDhcpL2RelayIfTrustEnable, agentDhcpSnoopingVlanIndex=agentDhcpSnoopingVlanIndex, agentStpSwitchConfigGroup=agentStpSwitchConfigGroup, agentSwitchSnoopingQuerierVlanAdminMode=agentSwitchSnoopingQuerierVlanAdminMode, agentStpMstPortForwardingState=agentStpMstPortForwardingState, agentExecAccountingListCreate=agentExecAccountingListCreate, agentSwitchStaticMacFilteringVlanId=agentSwitchStaticMacFilteringVlanId, agentCableTesterCableFailureLocation=agentCableTesterCableFailureLocation, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentPortMirrorTypeEntry=agentPortMirrorTypeEntry, agentSwitchCpuCosQDropGroup=agentSwitchCpuCosQDropGroup, agentServicePortDhcp6ClientDuid=agentServicePortDhcp6ClientDuid, agentStpPortStatsMstpBpduTx=agentStpPortStatsMstpBpduTx, agentCmdsAccountingMethodType=agentCmdsAccountingMethodType, agentSdmTemplateEntry=agentSdmTemplateEntry, agentServicePortIpv6AddrPrefix=agentServicePortIpv6AddrPrefix, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentStaticIpsgBindingEntry=agentStaticIpsgBindingEntry, agentDynamicAuthorizationClientEntry=agentDynamicAuthorizationClientEntry, agentNextActiveImage=agentNextActiveImage, agentSwitchStaticMacFilteringTable=agentSwitchStaticMacFilteringTable, agentSwitchSnoopSSMSrcListAddressType=agentSwitchSnoopSSMSrcListAddressType, agentDaiDstMacValidate=agentDaiDstMacValidate, agentDynamicAuthorizationServerKey=agentDynamicAuthorizationServerKey, agentDaiVlanConfigEntry=agentDaiVlanConfigEntry, agentDaiVlanDynArpInspEnable=agentDaiVlanDynArpInspEnable, agentDhcpSnoopingStatsReset=agentDhcpSnoopingStatsReset, agentServicePortDhcp6MalformedMessagesReceived=agentServicePortDhcp6MalformedMessagesReceived)
mibBuilder.exportSymbols("DNOS-SWITCHING-MIB", agentExecAccountingListTable=agentExecAccountingListTable, agentPortStatsRateHCBitsPerSecondTx=agentPortStatsRateHCBitsPerSecondTx, agentSwitchConfigGroup=agentSwitchConfigGroup, agentDhcpSnoopingIfBurstInterval=agentDhcpSnoopingIfBurstInterval, agentExecAccountingListIndex=agentExecAccountingListIndex, agentTransferUploadFilename=agentTransferUploadFilename, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentCmdsAuthorizationListMethod2=agentCmdsAuthorizationListMethod2, agentDynamicAuthorizationClientServerKey=agentDynamicAuthorizationClientServerKey, agentDhcpv6SnoopingVlanConfigEntry=agentDhcpv6SnoopingVlanConfigEntry, agentCLIBannerExec=agentCLIBannerExec, agentSwitchCpuProcessMemAvailable=agentSwitchCpuProcessMemAvailable, agentPortPhysicalStatus=agentPortPhysicalStatus, agentCableTesterMinimumCableLength=agentCableTesterMinimumCableLength, agentDynamicIpsgBindingIfIndex=agentDynamicIpsgBindingIfIndex, agentSwitchSnoopSSMGroupIfIndex=agentSwitchSnoopSSMGroupIfIndex, agentSwitchMFDBSummaryEntry=agentSwitchMFDBSummaryEntry, agentUserPassword=agentUserPassword, agentSwitchDVlanTagRowStatus=agentSwitchDVlanTagRowStatus, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentStpMstPortLoopInconsistentState=agentStpMstPortLoopInconsistentState, agentCmdsAuthorizationGroup=agentCmdsAuthorizationGroup, agentPortPhysicalMode=agentPortPhysicalMode, agentSwitchAddressConflictDetectionStatus=agentSwitchAddressConflictDetectionStatus, agentSwitchSnoopSSMFDBEntry=agentSwitchSnoopSSMFDBEntry, agentAuthenticationListName=agentAuthenticationListName, agentAutoinstallOperationalMode=agentAutoinstallOperationalMode, agentSwitchSnoopingVlanReportSuppMode=agentSwitchSnoopingVlanReportSuppMode, agentSwitchDVlanTagTPid=agentSwitchDVlanTagTPid, agentDhcpv6SnoopingVlanIndex=agentDhcpv6SnoopingVlanIndex, agentSwitchCpuProcessTotalUtilizationFive=agentSwitchCpuProcessTotalUtilizationFive, agentStpMstBridgeIdentifier=agentStpMstBridgeIdentifier, agentSwitchVlanSubnetAssociationRowStatus=agentSwitchVlanSubnetAssociationRowStatus, agentDhcpv6SnoopingMacVerifyFailures=agentDhcpv6SnoopingMacVerifyFailures, agentInfoGroup=agentInfoGroup, agentDynamicAuthorizationClientTable=agentDynamicAuthorizationClientTable, agentOperationalModeSimple=agentOperationalModeSimple, agentSwitchSnoopingQuerierQueryInterval=agentSwitchSnoopingQuerierQueryInterval, agentStaticDsv6BindingEntry=agentStaticDsv6BindingEntry, agentProtocolGroupProtocolTable=agentProtocolGroupProtocolTable, agentStpCstPortAutoEdge=agentStpCstPortAutoEdge, agentStpCstPortTable=agentStpCstPortTable, agentPortVoiceVlanMode=agentPortVoiceVlanMode, agentServicePortIPAddress=agentServicePortIPAddress, agentSwitchConflictIPAddr=agentSwitchConflictIPAddr, agentCmdsAuthorizationListStatus=agentCmdsAuthorizationListStatus, agentSwitchPortDVlanTagRowStatus=agentSwitchPortDVlanTagRowStatus, agentSwitchSnoopingQuerierVersion=agentSwitchSnoopingQuerierVersion, agentPvrstpSwitchConfigGroup=agentPvrstpSwitchConfigGroup, agentDhcpv6SnoopingIfConfigTable=agentDhcpv6SnoopingIfConfigTable, agentSwitchProtectedPortGroupName=agentSwitchProtectedPortGroupName, agentStpCstPortBpduGuardEffect=agentStpCstPortBpduGuardEffect, agentPortStatsRateOverflowBitsPerSecondTx=agentPortStatsRateOverflowBitsPerSecondTx, agentUserPortConfigEntry=agentUserPortConfigEntry, agentLagSummaryRateLoadInterval=agentLagSummaryRateLoadInterval, agentSwitchCpuProcessEntry=agentSwitchCpuProcessEntry, agentSwitchSnoopSSMSrcListTable=agentSwitchSnoopSSMSrcListTable, agentSwitchMFDBTable=agentSwitchMFDBTable, agentTransferDownloadPassword=agentTransferDownloadPassword, agentExecAccountingListMethod1=agentExecAccountingListMethod1, agentExecAuthorizationListEntry=agentExecAuthorizationListEntry, agentDynamicAuthorizationMode=agentDynamicAuthorizationMode, agentExecAccountingGroup=agentExecAccountingGroup, agentDhcpL2RelayVlanConfigTable=agentDhcpL2RelayVlanConfigTable, agentStpMstVlanEntry=agentStpMstVlanEntry, agentSwitchLastConflictReportedTime=agentSwitchLastConflictReportedTime, agentPortMirrorRemoteVlan=agentPortMirrorRemoteVlan, agentIPv6NdpEntries=agentIPv6NdpEntries, agentLagSummaryNativeVlanID=agentLagSummaryNativeVlanID, agentStaticIpv6sgBindingVlanId=agentStaticIpv6sgBindingVlanId, agentLagClearCounters=agentLagClearCounters, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentIpv6sgIfConfigTable=agentIpv6sgIfConfigTable, agentDhcpv6SnoopingIfBurstInterval=agentDhcpv6SnoopingIfBurstInterval, agentStpMstPortTransitionsOutOfLoopInconsistentState=agentStpMstPortTransitionsOutOfLoopInconsistentState, agentAuthenticationListEntry=agentAuthenticationListEntry, agentPortStatsRateHCPacketsPerSecondRx=agentPortStatsRateHCPacketsPerSecondRx, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentCLIConfigGroup=agentCLIConfigGroup, agentBackupImageVersion=agentBackupImageVersion, agentExecAuthorizationListMethod2=agentExecAuthorizationListMethod2, agentStpCstBridgeFwdDelay=agentStpCstBridgeFwdDelay, agentOperationalModeGroup=agentOperationalModeGroup, agentSwitchMFDBType=agentSwitchMFDBType, agentServicePortIpv6AdminMode=agentServicePortIpv6AdminMode, agentLagSummaryHashMode=agentLagSummaryHashMode, agentIPv4MulticastRoutes=agentIPv4MulticastRoutes, agentPortMaxFrameSizeLimit=agentPortMaxFrameSizeLimit, agentIPv6MulticastRoutes=agentIPv6MulticastRoutes, agentServicePortDhcp6RELEASEMessagesSent=agentServicePortDhcp6RELEASEMessagesSent, agentDhcpv6SnoopingStatsReset=agentDhcpv6SnoopingStatsReset, agentExecAuthorizationGroup=agentExecAuthorizationGroup, agentStaticIpv6sgBindingMacAddr=agentStaticIpv6sgBindingMacAddr, agentLoginSessionInetAddress=agentLoginSessionInetAddress, agentSwitchCpuProcessPercentageUtilizationThreeHundred=agentSwitchCpuProcessPercentageUtilizationThreeHundred, agentAuthenticationListMethod2=agentAuthenticationListMethod2, agentStaticDsBindingRowStatus=agentStaticDsBindingRowStatus, agentPortType40GigBaseX=agentPortType40GigBaseX, agentStpMstRootPortId=agentStpMstRootPortId, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentPortStatsRatePacketsPerSecondTx=agentPortStatsRatePacketsPerSecondTx, agentSwitchSnoopSSMFDBGroupAddress=agentSwitchSnoopSSMFDBGroupAddress, agentStaticDsv6BindingIpAddr=agentStaticDsv6BindingIpAddr, agentSwitchDVlanTagEntry=agentSwitchDVlanTagEntry, agentSwitchSnoopSSMSrcListIfIndex=agentSwitchSnoopSSMSrcListIfIndex, Ipv6IfIndexOrZero=Ipv6IfIndexOrZero, agentLagSummaryAccessVlanID=agentLagSummaryAccessVlanID, agentPortStatsRateOverflowPacketsPerSecondRx=agentPortStatsRateOverflowPacketsPerSecondRx, agentDaiIfConfigEntry=agentDaiIfConfigEntry, agentStaticIpv6sgBindingTable=agentStaticIpv6sgBindingTable, agentPrivateVlanIntfAssocEntry=agentPrivateVlanIntfAssocEntry, agentSwitchSnoopSSMFDBExcludePortList=agentSwitchSnoopSSMFDBExcludePortList, agentUserStatus=agentUserStatus, agentSerialBaudrate=agentSerialBaudrate, agentStpPortEntry=agentStpPortEntry, agentSwitchSnoopingVlanGroupMembershipInterval=agentSwitchSnoopingVlanGroupMembershipInterval, agentExecAuthorizationListStatus=agentExecAuthorizationListStatus, agentArpAclEntry=agentArpAclEntry, agentSwitchMbufGroup=agentSwitchMbufGroup, agentPortTransceiverFwPartNumber=agentPortTransceiverFwPartNumber, agentSwitchSnoopSSMGroupSourceFilterMode=agentSwitchSnoopSSMGroupSourceFilterMode, agentStpPortStatsStpBpduTx=agentStpPortStatsStpBpduTx, fastPathSwitchingTraps=fastPathSwitchingTraps, agentPortAccessVlanID=agentPortAccessVlanID, agentSwitchSnoopingProtocol=agentSwitchSnoopingProtocol, agentVlanSwitchportTrunkModeTable=agentVlanSwitchportTrunkModeTable, agentSwitchSnoopSSMFDBVlanIndex=agentSwitchSnoopSSMFDBVlanIndex, agentAuthenticationListMethod4=agentAuthenticationListMethod4, agentPortMirrorIpAccessListNumber=agentPortMirrorIpAccessListNumber, agentStaticDsv6BindingTable=agentStaticDsv6BindingTable, agentSnmpBuffersTrapFlag=agentSnmpBuffersTrapFlag, agentStpMstPortId=agentStpMstPortId, agentTelnetMaxSessions=agentTelnetMaxSessions, agentClearSwitchStats=agentClearSwitchStats, agentStpCstPortBpduFlood=agentStpCstPortBpduFlood, agentSwitchVlanSubnetAssociationEntry=agentSwitchVlanSubnetAssociationEntry, agentPasswordManagementStrengthMinUpperCase=agentPasswordManagementStrengthMinUpperCase, agentLagSummaryStaticCapability=agentLagSummaryStaticCapability, agentStpPortStatsStpBpduRx=agentStpPortStatsStpBpduRx, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, agentSwitchMFDBGroup=agentSwitchMFDBGroup, agentSwitchSnoopingAdminMode=agentSwitchSnoopingAdminMode, agentSwitchSnoopingVlanAdminMode=agentSwitchSnoopingVlanAdminMode, agentSwitchDVlanTagEthertype=agentSwitchDVlanTagEthertype, agentTransferUploadGroup=agentTransferUploadGroup, agentPortMirrorMacAccessListNumber=agentPortMirrorMacAccessListNumber, agentPortStatsRateOverflowPacketsPerSecondTx=agentPortStatsRateOverflowPacketsPerSecondTx, agentSwitchMbufConfigGroup=agentSwitchMbufConfigGroup, agentSwitchSnoopingQuerierAdminMode=agentSwitchSnoopingQuerierAdminMode, agentTransferUploadRemoteFilename=agentTransferUploadRemoteFilename, agentSwitchCpuCosQDrops=agentSwitchCpuCosQDrops, agentClassOfServicePortClass=agentClassOfServicePortClass, agentLagSummaryMinimumActiveLinks=agentLagSummaryMinimumActiveLinks, agentTransferDownloadStart=agentTransferDownloadStart, agentPortMirrorRemoteVlanEntry=agentPortMirrorRemoteVlanEntry, agentArpAclRuleRowStatus=agentArpAclRuleRowStatus, agentDot3adAggPortTable=agentDot3adAggPortTable, agentDynamicIpsgBindingTable=agentDynamicIpsgBindingTable, agentSwitchSnoopingVlanGroup=agentSwitchSnoopingVlanGroup, agentAuthenticationListCreate=agentAuthenticationListCreate, agentDaiIfConfigTable=agentDaiIfConfigTable, agentPortNativeVlanID=agentPortNativeVlanID, agentTrapLogTable=agentTrapLogTable, agentDynamicIpv6sgBindingEntry=agentDynamicIpv6sgBindingEntry, agentDaiIPValidate=agentDaiIPValidate, agentStpMstVlanTable=agentStpMstVlanTable, agentSwitchCpuFreeMemAboveThresholdTrap=agentSwitchCpuFreeMemAboveThresholdTrap, agentDhcpSnoopingVlanConfigTable=agentDhcpSnoopingVlanConfigTable, agentTrapLogSystemTime=agentTrapLogSystemTime, agentSwitchSnoopingQuerierLastQuerierVersion=agentSwitchSnoopingQuerierLastQuerierVersion, agentStpConfigDigestKey=agentStpConfigDigestKey, agentStpMstRootPathCost=agentStpMstRootPathCost, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentDaiSrcMacValidate=agentDaiSrcMacValidate, Ipv6IfIndex=Ipv6IfIndex, agentServicePortDhcp6REPLYMessagesDiscarded=agentServicePortDhcp6REPLYMessagesDiscarded, agentDynamicIpv6sgBindingVlanId=agentDynamicIpv6sgBindingVlanId, agentStpCstRegionalRootId=agentStpCstRegionalRootId, agentPortTypeGroup=agentPortTypeGroup, agentSwitchPortDVlanTagTPid=agentSwitchPortDVlanTagTPid, agentLagSummaryType=agentLagSummaryType, agentDhcpSnoopingInvalidServerMessages=agentDhcpSnoopingInvalidServerMessages, agentPortSTPState=agentPortSTPState, agentStpCstBridgeHelloTime=agentStpCstBridgeHelloTime, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, agentDhcpL2RelayConfigGroup=agentDhcpL2RelayConfigGroup, agentLoginSessionUserName=agentLoginSessionUserName, agentSwitchSnoopSSMSrcListAddress=agentSwitchSnoopSSMSrcListAddress, agentDhcpv6SnoopingStatsTable=agentDhcpv6SnoopingStatsTable, agentCableTesterMaximumCableLength=agentCableTesterMaximumCableLength, agentPasswordManagementStrengthMaxConsecutiveCharacters=agentPasswordManagementStrengthMaxConsecutiveCharacters, Ipv6Address=Ipv6Address, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentPvrstpPortVlanTable=agentPvrstpPortVlanTable, agentProtocolGroupName=agentProtocolGroupName, agentSwitchSnoopingQuerierVlanAddress=agentSwitchSnoopingQuerierVlanAddress, agentClearPasswords=agentClearPasswords, agentLagConfigCreate=agentLagConfigCreate, agentUserConfigEntry=agentUserConfigEntry, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentSwitchSnoopingPortMask=agentSwitchSnoopingPortMask, agentDaiStatsReset=agentDaiStatsReset, agentSwitchMFDBMostEntriesUsed=agentSwitchMFDBMostEntriesUsed, agentDhcpSnoopingIfLogEnable=agentDhcpSnoopingIfLogEnable, agentPortUnicastControlThreshold=agentPortUnicastControlThreshold, agentStpCstPortEdge=agentStpCstPortEdge, agentSwitchCpuProcessId=agentSwitchCpuProcessId, agentSwitchUnicastControlThresholdUnit=agentSwitchUnicastControlThresholdUnit, agentPortVoiceVlanPriority=agentPortVoiceVlanPriority, agentDhcpv6SnoopingAdminMode=agentDhcpv6SnoopingAdminMode, agentPortLoadStatsInterval=agentPortLoadStatsInterval, agentDhcpv6SnoopingIfRateLimit=agentDhcpv6SnoopingIfRateLimit, agentIASUserConfigCreate=agentIASUserConfigCreate, agentTelnetConfigGroup=agentTelnetConfigGroup, agentLinkDependencyGroupTable=agentLinkDependencyGroupTable, agentSwitchSnoopSSMSrcListVlanId=agentSwitchSnoopSSMSrcListVlanId, agentTransferDownloadRemoteFilename=agentTransferDownloadRemoteFilename, agentSwitchSnoopSSMGroupVlanId=agentSwitchSnoopSSMGroupVlanId, agentSwitchVoiceVLANGroup=agentSwitchVoiceVLANGroup, agentPortMirrorRemoteDestinationVlan=agentPortMirrorRemoteDestinationVlan, agentStpAdminMode=agentStpAdminMode, agentUserIndex=agentUserIndex, agentIASUserConfigEntry=agentIASUserConfigEntry, agentPortMirrorSessionNum=agentPortMirrorSessionNum, agentDynamicDsv6BindingIpAddr=agentDynamicDsv6BindingIpAddr, fanFailureTrap=fanFailureTrap, agentPortBroadcastControlThreshold=agentPortBroadcastControlThreshold, agentSaveConfig=agentSaveConfig, agentPortVoiceVlanOperationalStatus=agentPortVoiceVlanOperationalStatus, agentNextSelectedImage=agentNextSelectedImage, agentIpsgIfConfigTable=agentIpsgIfConfigTable, agentCableTesterIfIndex=agentCableTesterIfIndex, agentExecAuthorizationListCreate=agentExecAuthorizationListCreate, agentStpCstPortPriority=agentStpCstPortPriority, agentDaiIfRateLimit=agentDaiIfRateLimit, agentCmdsAccountingGroup=agentCmdsAccountingGroup, agentStaticIpsgBindingIpAddr=agentStaticIpsgBindingIpAddr, agentSwitchBroadcastControlThreshold=agentSwitchBroadcastControlThreshold, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentProtocolGroupPortStatus=agentProtocolGroupPortStatus, agentPortMirrorDestinationPort=agentPortMirrorDestinationPort, agentSwitchMulticastControlMode=agentSwitchMulticastControlMode, agentSwitchAddressConflictGroup=agentSwitchAddressConflictGroup, agentCLIBannerMOTD=agentCLIBannerMOTD, agentPvrstpVlanTableIndex=agentPvrstpVlanTableIndex, Ipv6AddressIfIdentifier=Ipv6AddressIfIdentifier, agentStpPortUpTime=agentStpPortUpTime, agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82=agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82, agentSwitchCpuCosQIndex=agentSwitchCpuCosQIndex, agentPortStatsRateOverflowBitsPerSecondRx=agentPortStatsRateOverflowBitsPerSecondRx, agentDynamicIpsgBindingEntry=agentDynamicIpsgBindingEntry, agentPortMirrorSourceVlan=agentPortMirrorSourceVlan, agentHTTPConfigGroup=agentHTTPConfigGroup, agentDhcpSnoopingIfTrustEnable=agentDhcpSnoopingIfTrustEnable)
mibBuilder.exportSymbols("DNOS-SWITCHING-MIB", agentInventorySysDescription=agentInventorySysDescription, agentPortDVlanTagEthertype=agentPortDVlanTagEthertype, agentSwitchBroadcastControlThresholdUnit=agentSwitchBroadcastControlThresholdUnit, agentSwitchSnoopingQuerierVlanOperMode=agentSwitchSnoopingQuerierVlanOperMode, agentStpCstExtPortPathCost=agentStpCstExtPortPathCost, agentDaiVlanDhcpDrops=agentDaiVlanDhcpDrops, agentDhcpv6SnoopingStatsEntry=agentDhcpv6SnoopingStatsEntry, agentPortMirroringGroup=agentPortMirroringGroup, agentSwitchMFDBProtocolType=agentSwitchMFDBProtocolType, agentDhcpSnoopingConfigGroup=agentDhcpSnoopingConfigGroup, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentCmdsAccountingListEntry=agentCmdsAccountingListEntry, agentSwitchSnoopingVlanMaxResponseTime=agentSwitchSnoopingVlanMaxResponseTime, agentStaticIpsgBindingIfIndex=agentStaticIpsgBindingIfIndex, agentDot3adAggPort=agentDot3adAggPort, agentPortUnicastControlMode=agentPortUnicastControlMode, agentArpAclTable=agentArpAclTable, agentProtocolGroupProtocolID=agentProtocolGroupProtocolID, agentServicePortIpv6AddrPrefixLength=agentServicePortIpv6AddrPrefixLength, agentInventoryAdditionalPackages=agentInventoryAdditionalPackages, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentSwitchCpuProcessTotalUtilization=agentSwitchCpuProcessTotalUtilization, agentSwitchCpuProcessRisingThreshold=agentSwitchCpuProcessRisingThreshold, agentDhcpL2RelayUntrustedClntMsgsWithOptn82=agentDhcpL2RelayUntrustedClntMsgsWithOptn82, agentTransferUploadServerAddressType=agentTransferUploadServerAddressType, agentProtocolGroupProtocolIPX=agentProtocolGroupProtocolIPX, agentStpCstRootFwdDelay=agentStpCstRootFwdDelay, agentTrapLogIndex=agentTrapLogIndex, agentTelnetMotdBannerState=agentTelnetMotdBannerState, agentSwitchSnoopingQuerierCfgTable=agentSwitchSnoopingQuerierCfgTable, agentPasswordManagementStrengthMinCharacterClasses=agentPasswordManagementStrengthMinCharacterClasses, agentSwitchPortDVlanTagCustomerId=agentSwitchPortDVlanTagCustomerId, agentAuthenticationListMethod5=agentAuthenticationListMethod5, agentLinkDependencyGroupMemberPortMask=agentLinkDependencyGroupMemberPortMask, agentPortSpeedDuplexStatus=agentPortSpeedDuplexStatus, agentStpMstBridgePriority=agentStpMstBridgePriority, agentDaiVlanArpAclName=agentDaiVlanArpAclName, agentSwitchSnoopSSMFDBGroupAddressType=agentSwitchSnoopSSMFDBGroupAddressType, agentExecAuthorizationListName=agentExecAuthorizationListName, agentSwitchSnoopSSMGroupEntry=agentSwitchSnoopSSMGroupEntry, agentPortType=agentPortType, agentServicePortStatsGroup=agentServicePortStatsGroup, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentVlanSwitchportTrunkModeGroup=agentVlanSwitchportTrunkModeGroup, agentPortBroadcastControlMode=agentPortBroadcastControlMode, agentSwitchSnoopSSMFDBIncludePortList=agentSwitchSnoopSSMFDBIncludePortList, agentStpCstBridgeHoldCount=agentStpCstBridgeHoldCount, agentLinkDependencyGroupEntry=agentLinkDependencyGroupEntry, agentSwitchMFDBMacAddress=agentSwitchMFDBMacAddress, agentPortBroadcastControlThresholdUnit=agentPortBroadcastControlThresholdUnit, agentPortMirrorAdminMode=agentPortMirrorAdminMode, agentSwitchSnoopingCfgTable=agentSwitchSnoopingCfgTable, agentSwitchCpuProcessTotalUtilizationThreeHundred=agentSwitchCpuProcessTotalUtilizationThreeHundred, agentSwitchMulticastControlThreshold=agentSwitchMulticastControlThreshold, agentDynamicDsBindingEntry=agentDynamicDsBindingEntry, agentLoginSessionIdleTime=agentLoginSessionIdleTime, vlanDeleteLastTrap=vlanDeleteLastTrap, agentSwitchVoiceVlanDeviceTable=agentSwitchVoiceVlanDeviceTable, agentSwitchSnoopSSMSrcListEntry=agentSwitchSnoopSSMSrcListEntry, agentIASUserConfigGroup=agentIASUserConfigGroup, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentSwitchSnoopingVlanTable=agentSwitchSnoopingVlanTable, agentStpBpduGuardMode=agentStpBpduGuardMode, agentLagSummaryConfigTable=agentLagSummaryConfigTable, failedUserLoginTrap=failedUserLoginTrap, agentPvrstpUplinkFast=agentPvrstpUplinkFast, Ipv6AddressPrefix=Ipv6AddressPrefix, agentProtocolConfigGroup=agentProtocolConfigGroup, agentPrivateVlanAssociate=agentPrivateVlanAssociate, agentClearVlan=agentClearVlan, agentDhcpSnoopingStoreInterval=agentDhcpSnoopingStoreInterval, agentDhcpv6SnoopingIfConfigEntry=agentDhcpv6SnoopingIfConfigEntry, agentDhcpSnoopingStatsEntry=agentDhcpSnoopingStatsEntry, agentSwitchSnoopingGroup=agentSwitchSnoopingGroup, multipleUsersTrap=multipleUsersTrap, agentBPDUFilteringMode=agentBPDUFilteringMode, agentIASUserPassword=agentIASUserPassword, agentTransferUploadDataType=agentTransferUploadDataType, agentSwitchMbufFallingThreshold=agentSwitchMbufFallingThreshold, agentSwitchCutThroughConfigMode=agentSwitchCutThroughConfigMode, agentSwitchSnoopingQuerierVlanTable=agentSwitchSnoopingQuerierVlanTable, agentSerialCharacterSize=agentSerialCharacterSize, agentTrapLogEntry=agentTrapLogEntry, agentDaiVlanDstMacFailures=agentDaiVlanDstMacFailures, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentPortDot1dBasePort=agentPortDot1dBasePort, agentSwitchMFDBMaxTableEntries=agentSwitchMFDBMaxTableEntries, agentLoginSessionTable=agentLoginSessionTable, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentPortVoiceVlanDSCP=agentPortVoiceVlanDSCP, agentSerialExecBannerState=agentSerialExecBannerState, agentSwitchSnoopingQuerierAddress=agentSwitchSnoopingQuerierAddress, agentAuthenticationListIndex=agentAuthenticationListIndex, agentStaticDsv6BindingMacAddr=agentStaticDsv6BindingMacAddr, agentIASUserStatus=agentIASUserStatus, agentPasswordMgmtStrengthExcludeKeywordStatus=agentPasswordMgmtStrengthExcludeKeywordStatus, agentServicePortDhcp6ADVERTISEMessagesDiscarded=agentServicePortDhcp6ADVERTISEMessagesDiscarded, agentDaiVlanPktsDropped=agentDaiVlanPktsDropped, agentPasswordManagementStrengthMinNumericNumbers=agentPasswordManagementStrengthMinNumericNumbers, agentStpPortState=agentStpPortState, agentSerialParityType=agentSerialParityType, agentPortDVlanTagMode=agentPortDVlanTagMode, agentProtocolGroupTable=agentProtocolGroupTable, agentServicePortIpv6AddrEuiFlag=agentServicePortIpv6AddrEuiFlag, agentTransferDownloadFilename=agentTransferDownloadFilename, agentSwitchCpuProcessGroup=agentSwitchCpuProcessGroup, agentPortClearStats=agentPortClearStats, agentDynamicAuthorizationEncryptServerKey=agentDynamicAuthorizationEncryptServerKey, agentClearLoginSessions=agentClearLoginSessions, agentProtocolGroupCreate=agentProtocolGroupCreate, agentExecAuthorizationListMethod1=agentExecAuthorizationListMethod1, agentDynamicDsBindingVlanId=agentDynamicDsBindingVlanId, agentStaticIpv6sgBindingRowStatus=agentStaticIpv6sgBindingRowStatus, agentSwitchSnoopingVlanMRPExpirationTime=agentSwitchSnoopingVlanMRPExpirationTime, agentExecAccountingListMethod2=agentExecAccountingListMethod2, agentSwitchLastConflictingMacAddr=agentSwitchLastConflictingMacAddr, agentSwitchSnoopSSMFDBTable=agentSwitchSnoopSSMFDBTable, agentStpMstPortEntry=agentStpMstPortEntry, agentStpCstPortId=agentStpCstPortId, agentSwitchMbufFallingThresholdTrap=agentSwitchMbufFallingThresholdTrap, agentUserConfigTable=agentUserConfigTable, agentImage2=agentImage2, agentStpCstBridgeMaxAge=agentStpCstBridgeMaxAge, agentPortMirrorEntry=agentPortMirrorEntry, agentPrivateVlanEntry=agentPrivateVlanEntry, agentSwitchVlanMacAssociationRowStatus=agentSwitchVlanMacAssociationRowStatus, agentDaiConfigGroup=agentDaiConfigGroup, agentPvrstpVlanEntry=agentPvrstpVlanEntry, agentSwitchCpuCosQDropTable=agentSwitchCpuCosQDropTable, agentInventoryGroup=agentInventoryGroup, agentStpCstDesignatedPortId=agentStpCstDesignatedPortId, agentExecAccountingMethodType=agentExecAccountingMethodType, agentDynamicAuthorizationGroup=agentDynamicAuthorizationGroup, agentSwitchVlanSubnetAssociationGroup=agentSwitchVlanSubnetAssociationGroup, agentLagSummaryLocalPreferenceMode=agentLagSummaryLocalPreferenceMode, agentAuthenticationListMethod3=agentAuthenticationListMethod3, agentTransferDownloadMode=agentTransferDownloadMode, agentUserConfigCreate=agentUserConfigCreate, agentDynamicDsBindingMacAddr=agentDynamicDsBindingMacAddr, agentDhcpL2RelayVlanEnable=agentDhcpL2RelayVlanEnable, agentSupportedMibIndex=agentSupportedMibIndex, agentSwitchStaticMacFilteringDestPortMask=agentSwitchStaticMacFilteringDestPortMask, agentSwitchDVlanTagPrimaryTPid=agentSwitchDVlanTagPrimaryTPid, agentPvrstpVlanMaxAgeTime=agentPvrstpVlanMaxAgeTime, agentDaiIfBurstInterval=agentDaiIfBurstInterval, agentUserConfigDefaultAuthenticationList=agentUserConfigDefaultAuthenticationList, agentIpv6sgIfConfigEntry=agentIpv6sgIfConfigEntry, agentExecAuthorizationListMethod4=agentExecAuthorizationListMethod4, agentDaiVlanSrcMacFailures=agentDaiVlanSrcMacFailures, agentDynamicDsBindingIpAddr=agentDynamicDsBindingIpAddr, agentPortLinkTrapMode=agentPortLinkTrapMode, agentSaveConfigStatus=agentSaveConfigStatus, agentDhcpL2RelayStatsEntry=agentDhcpL2RelayStatsEntry, agentPortMulticastControlThresholdUnit=agentPortMulticastControlThresholdUnit, agentSwitchVlanSubnetAssociationVlanId=agentSwitchVlanSubnetAssociationVlanId, agentPortMulticastControlThreshold=agentPortMulticastControlThreshold, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentDaiVlanPktsForwarded=agentDaiVlanPktsForwarded, agentSwitchLastConflictingIPAddr=agentSwitchLastConflictingIPAddr, agentTransferUploadUsername=agentTransferUploadUsername, agentTransferDownloadDataType=agentTransferDownloadDataType, agentStpConfigFormatSelector=agentStpConfigFormatSelector, agentServicePortIpv6ConfigProtocol=agentServicePortIpv6ConfigProtocol, agentSwitchAddressConflictDetectionStatusReset=agentSwitchAddressConflictDetectionStatusReset, agentDhcpSnoopingInvalidClientMessages=agentDhcpSnoopingInvalidClientMessages, agentStpMstTopologyChangeParm=agentStpMstTopologyChangeParm, agentResetSystem=agentResetSystem, agentInventorySerialNumber=agentInventorySerialNumber, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentUserConfigGroup=agentUserConfigGroup, agentSwitchMbufRisingThreshold=agentSwitchMbufRisingThreshold, agentPasswordManagementMinLength=agentPasswordManagementMinLength, agentPortStatsRateGroup=agentPortStatsRateGroup, agentMirroredPortIfIndex=agentMirroredPortIfIndex, agentLoginSessionIndex=agentLoginSessionIndex, agentStpMstVlanRowStatus=agentStpMstVlanRowStatus, agentTrapLogGroup=agentTrapLogGroup, agentSwitchSnoopingQuerierOperMaxResponseTime=agentSwitchSnoopingQuerierOperMaxResponseTime, agentStpCstDesignatedCost=agentStpCstDesignatedCost, agentSwitchAddressConflictDetectionRun=agentSwitchAddressConflictDetectionRun, agentClearTrapLog=agentClearTrapLog, agentTelnetExecBannerState=agentTelnetExecBannerState, agentCmdsAccountingListCreate=agentCmdsAccountingListCreate, agentDhcpv6SnoopingVerifyMac=agentDhcpv6SnoopingVerifyMac, agentStpCstRegionalRootPathCost=agentStpCstRegionalRootPathCost, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, agentSwitchPortDVlanTagMode=agentSwitchPortDVlanTagMode, agentStpConfigName=agentStpConfigName, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentCmdsAccountingListTable=agentCmdsAccountingListTable, agentExecAuthorizationListMethod3=agentExecAuthorizationListMethod3, agentInventoryNetworkProcessingDevice=agentInventoryNetworkProcessingDevice, agentPortMirroringMode=agentPortMirroringMode, agentTelnetLoginBannerState=agentTelnetLoginBannerState, agentSdmPreferCurrentTemplate=agentSdmPreferCurrentTemplate, agentPortIfIndex=agentPortIfIndex, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentDhcpSnoopingRemoteIpAddr=agentDhcpSnoopingRemoteIpAddr, agentSwitchMbufPrio=agentSwitchMbufPrio, agentLoginSessionStatus=agentLoginSessionStatus, agentDynamicDsBindingIfIndex=agentDynamicDsBindingIfIndex, agentServicePortDhcp6REPLYMessagesReceived=agentServicePortDhcp6REPLYMessagesReceived, agentSwitchSnoopingMulticastControlFramesProcessed=agentSwitchSnoopingMulticastControlFramesProcessed, agentDaiVlanStatsEntry=agentDaiVlanStatsEntry, agentPasswordManagementHistory=agentPasswordManagementHistory, agentSwitchVlanMacAssociationGroup=agentSwitchVlanMacAssociationGroup, agentLoginSessionEntry=agentLoginSessionEntry, agentProtocolGroupProtocolIP=agentProtocolGroupProtocolIP, dhcpSnoopingIntfErrorDisabledTrap=dhcpSnoopingIntfErrorDisabledTrap, agentSdmPreferNextTemplate=agentSdmPreferNextTemplate, agentStpMstEntry=agentStpMstEntry, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentExecAccountingListStatus=agentExecAccountingListStatus, agentSwitchCpuProcessFallingThresholdInterval=agentSwitchCpuProcessFallingThresholdInterval, agentPortMirrorReflectorPort=agentPortMirrorReflectorPort, agentSwitchMFDBEntry=agentSwitchMFDBEntry, agentSwitchStaticMacFilteringEntry=agentSwitchStaticMacFilteringEntry, agentSwitchSnoopingVlanEntry=agentSwitchSnoopingVlanEntry, agentSwitchMulticastControlThresholdUnit=agentSwitchMulticastControlThresholdUnit, agentSwitchSnoopingVlanFastLeaveAdminMode=agentSwitchSnoopingVlanFastLeaveAdminMode, agentStpCstPortRootGuard=agentStpCstPortRootGuard, PortId=PortId, agentDhcpL2RelayAdminMode=agentDhcpL2RelayAdminMode, agentVlanSwitchportTrunkModeEntry=agentVlanSwitchportTrunkModeEntry, agentSwitchSnoopingQuerierExpiryInterval=agentSwitchSnoopingQuerierExpiryInterval, agentClassOfServicePortTable=agentClassOfServicePortTable, agentDynamicAuthorizationIgnoreSessionKey=agentDynamicAuthorizationIgnoreSessionKey, agentPasswordManagementStrengthExcludeKeywordTable=agentPasswordManagementStrengthExcludeKeywordTable, agentDynamicAuthorizationPortNum=agentDynamicAuthorizationPortNum, agentSwitchCpuFallingThresholdTrap=agentSwitchCpuFallingThresholdTrap, agentSwitchMbufRisingThresholdTrap=agentSwitchMbufRisingThresholdTrap, agentCmdsAccountingListIndex=agentCmdsAccountingListIndex, agentCLIBannerConfigGroup=agentCLIBannerConfigGroup, agentPortMirrorTypeSourcePort=agentPortMirrorTypeSourcePort, agentSnmpCpuTresholdTrapFlag=agentSnmpCpuTresholdTrapFlag, agentSwitchConflictMacAddr=agentSwitchConflictMacAddr, agentDhcpL2RelayStatsReset=agentDhcpL2RelayStatsReset, agentSwitchVlanStaticMrouterAdminMode=agentSwitchVlanStaticMrouterAdminMode, agentSwitchVlanStaticMrouterGroup=agentSwitchVlanStaticMrouterGroup, agentSwitchCpuProcessPercentageUtilizationFive=agentSwitchCpuProcessPercentageUtilizationFive, fastPathSwitching=fastPathSwitching, agentSerialMotdBannerState=agentSerialMotdBannerState, agentSwitchCutThroughGroup=agentSwitchCutThroughGroup, agentSwitchVlanStaticMrouterTable=agentSwitchVlanStaticMrouterTable, agentPortConfigEntry=agentPortConfigEntry, agentPvrstpAdminMode=agentPvrstpAdminMode, agentSerialLoginBannerState=agentSerialLoginBannerState, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentSwitchStaticMacFilteringStatus=agentSwitchStaticMacFilteringStatus, agentStaticIpsgBindingVlanId=agentStaticIpsgBindingVlanId, agentSwitchSnoopSSMGroupAddressType=agentSwitchSnoopSSMGroupAddressType, agentUserAccessMode=agentUserAccessMode, agentSwitchSnoopingQuerierLastQuerierAddress=agentSwitchSnoopingQuerierLastQuerierAddress)
mibBuilder.exportSymbols("DNOS-SWITCHING-MIB", agentTransferDownloadUsername=agentTransferDownloadUsername, agentLinkDependencyGroupDependsOnPortMask=agentLinkDependencyGroupDependsOnPortMask, agentCmdsAuthorizationListCreate=agentCmdsAuthorizationListCreate, agentDhcpSnoopingIfRateLimit=agentDhcpSnoopingIfRateLimit, agentPortUnicastControlThresholdUnit=agentPortUnicastControlThresholdUnit, agentPortIanaType=agentPortIanaType, agentDhcpSnoopingStatsTable=agentDhcpSnoopingStatsTable, agentDynamicIpsgBindingIpAddr=agentDynamicIpsgBindingIpAddr, agentSwitchProtectedPortGroupId=agentSwitchProtectedPortGroupId, agentDhcpL2RelayVlanConfigEntry=agentDhcpL2RelayVlanConfigEntry, agentDhcpv6SnoopingConfigGroup=agentDhcpv6SnoopingConfigGroup, agentSerialTimeout=agentSerialTimeout, agentDhcpL2RelayStatsTable=agentDhcpL2RelayStatsTable, agentSwitchVlanMacAssociationMacAddress=agentSwitchVlanMacAssociationMacAddress, agentProtocolGroupPortEntry=agentProtocolGroupPortEntry, agentCmdsAccountingListName=agentCmdsAccountingListName, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentDhcpv6SnoopingInvalidServerMessages=agentDhcpv6SnoopingInvalidServerMessages, agentStaticDsBindingTable=agentStaticDsBindingTable, agentCmdsAuthorizationListName=agentCmdsAuthorizationListName, agentServicePortDhcp6StatsReset=agentServicePortDhcp6StatsReset, agentDynamicDsv6BindingVlanId=agentDynamicDsv6BindingVlanId, agentDhcpSnoopingVlanEnable=agentDhcpSnoopingVlanEnable, agentLagDetailedPortStatus=agentLagDetailedPortStatus, agentDhcpv6SnoopingStoreInterval=agentDhcpv6SnoopingStoreInterval, linkFailureTrap=linkFailureTrap, agentTransferUploadStatus=agentTransferUploadStatus, agentSwitchMFDBSummaryForwardingPortMask=agentSwitchMFDBSummaryForwardingPortMask, agentSwitchSnoopSSMGroupTable=agentSwitchSnoopSSMGroupTable, agentStpCstDesignatedBridgeId=agentStpCstDesignatedBridgeId, agentPrivateVlanIntfAssocTable=agentPrivateVlanIntfAssocTable, agentSwitchCpuProcessTable=agentSwitchCpuProcessTable, agentSwitchCpuProcessRisingThresholdInterval=agentSwitchCpuProcessRisingThresholdInterval, agentPrivateVlanIntfAssocPromiscuousSecondary=agentPrivateVlanIntfAssocPromiscuousSecondary, agentSwitchPortDVlanTagEntry=agentSwitchPortDVlanTagEntry, agentSwitchProtectedPortPortList=agentSwitchProtectedPortPortList, agentIPv4UnicastRoutes=agentIPv4UnicastRoutes, agentVpcId=agentVpcId, agentServicePortIpv6Gateway=agentServicePortIpv6Gateway, agentIpsgIfPortSecurity=agentIpsgIfPortSecurity, agentPasswordMgmtStrengthExcludeKeyword=agentPasswordMgmtStrengthExcludeKeyword, agentStpCstConfigGroup=agentStpCstConfigGroup, agentImage1=agentImage1, agentSwitchCpuProcessFallingThreshold=agentSwitchCpuProcessFallingThreshold, agentClassOfServicePortPriority=agentClassOfServicePortPriority, agentCableTesterStatus=agentCableTesterStatus, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, agentDhcpL2RelayTrustedClntMsgsWithoutOptn82=agentDhcpL2RelayTrustedClntMsgsWithoutOptn82, agentTrapLogTotal=agentTrapLogTotal, agentProtocolGroupEntry=agentProtocolGroupEntry, agentAutoInstallConfigGroup=agentAutoInstallConfigGroup, agentSdmPreferConfigEntry=agentSdmPreferConfigEntry, agentSwitchPortDVlanTagTable=agentSwitchPortDVlanTagTable, agentStpCstPortForwardingState=agentStpCstPortForwardingState, agentDynamicIpsgBindingMacAddr=agentDynamicIpsgBindingMacAddr, agentStpMstTable=agentStpMstTable, agentPortMirrorSourcePortMask=agentPortMirrorSourcePortMask, agentSwitchIpAddressConflictTrap=agentSwitchIpAddressConflictTrap, agentPasswordManagementStrengthMinSpecialCharacters=agentPasswordManagementStrengthMinSpecialCharacters, agentDaiVlanConfigTable=agentDaiVlanConfigTable, agentSerialGroup=agentSerialGroup, agentLagSummaryStatus=agentLagSummaryStatus, agentImageConfigGroup=agentImageConfigGroup, agentPortMirrorRemoteVlanRowStatus=agentPortMirrorRemoteVlanRowStatus, agentPortSwitchportMode=agentPortSwitchportMode, agentConfigGroup=agentConfigGroup, agentLagSummaryAddPort=agentLagSummaryAddPort, agentArpEntries=agentArpEntries, agentExecAuthorizationListTable=agentExecAuthorizationListTable, agentSwitchMbufAllocAttempts=agentSwitchMbufAllocAttempts, agentStpCstPortTCNGuard=agentStpCstPortTCNGuard, agentLagSummaryStpMode=agentLagSummaryStpMode, agentUserName=agentUserName, PYSNMP_MODULE_ID=fastPathSwitching, agentInventoryMachineType=agentInventoryMachineType, agentSwitchProtectedPortConfigGroup=agentSwitchProtectedPortConfigGroup, agentLinkDependencyGroup=agentLinkDependencyGroup, agentSystemGroup=agentSystemGroup, agentTransferUploadServerIP=agentTransferUploadServerIP, agentStpBpduFilterDefault=agentStpBpduFilterDefault, agentStpCstPortLoopGuard=agentStpCstPortLoopGuard, agentSwitchVoiceVLANAdminMode=agentSwitchVoiceVLANAdminMode, agentDynamicDsv6BindingTable=agentDynamicDsv6BindingTable, agentPortStatsRateTable=agentPortStatsRateTable, agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82=agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82, agentDynamicIpv6sgBindingIfIndex=agentDynamicIpv6sgBindingIfIndex, agentArpAclRuleMatchSenderIpAddr=agentArpAclRuleMatchSenderIpAddr, agentDhcpSnoopingIfConfigEntry=agentDhcpSnoopingIfConfigEntry, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, agentLoginSessionIPAddress=agentLoginSessionIPAddress, agentTransferDownloadStatus=agentTransferDownloadStatus, agentStpMstPortPriority=agentStpMstPortPriority, agentPortMaxFrameSize=agentPortMaxFrameSize, agentDynamicAuthorizationClientEncryptServerKey=agentDynamicAuthorizationClientEncryptServerKey, agentProtocolGroupPortIfIndex=agentProtocolGroupPortIfIndex, agentCLIBannerLogin=agentCLIBannerLogin, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentUserLockoutStatus=agentUserLockoutStatus, agentIpsgIfConfigEntry=agentIpsgIfConfigEntry, daiIntfErrorDisabledTrap=daiIntfErrorDisabledTrap, agentCmdsAuthorizationListMethod1=agentCmdsAuthorizationListMethod1, agentSnmpConfigGroup=agentSnmpConfigGroup, agentSwitchMbufNotificationSeverity=agentSwitchMbufNotificationSeverity, agentDaiVlanStatsIndex=agentDaiVlanStatsIndex, agentDhcpv6SnoopingIfLogEnable=agentDhcpv6SnoopingIfLogEnable, VlanList=VlanList, agentSwitchVoiceVlanInterfaceNum=agentSwitchVoiceVlanInterfaceNum, agentSwitchPortDVlanTagInterfaceIfIndex=agentSwitchPortDVlanTagInterfaceIfIndex, agentSwitchVlanStaticMrouterEntry=agentSwitchVlanStaticMrouterEntry, agentClearConfig=agentClearConfig, agentClearLags=agentClearLags, agentSwitchCutThroughConfiguredModeStatus=agentSwitchCutThroughConfiguredModeStatus, agentSwitchMbufEntry=agentSwitchMbufEntry, agentServicePortDhcp6REBINDMessagesSent=agentServicePortDhcp6REBINDMessagesSent, agentAutoinstallAutosaveMode=agentAutoinstallAutosaveMode, agentDynamicAuthorizationClientAddress=agentDynamicAuthorizationClientAddress, agentDaiVlanLoggingEnable=agentDaiVlanLoggingEnable, agentServicePortIpv6AddrStatus=agentServicePortIpv6AddrStatus, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentStpCstBridgeMaxHops=agentStpCstBridgeMaxHops, agentStaticDsv6BindingVlanId=agentStaticDsv6BindingVlanId, agentServicePortDhcp6REQUESTMessagesSent=agentServicePortDhcp6REQUESTMessagesSent, agentLinkDependencyGroupAction=agentLinkDependencyGroupAction, agentPortTransceiverFwRevision=agentPortTransceiverFwRevision, agentSwitchUnicastControlMode=agentSwitchUnicastControlMode, agentActiveImageVersion=agentActiveImageVersion, agentStpCstMaxAge=agentStpCstMaxAge, agentServicePortIpv6AddrEntry=agentServicePortIpv6AddrEntry, agentPvstpAdminMode=agentPvstpAdminMode, agentDynamicAuthorizationClientRowStatus=agentDynamicAuthorizationClientRowStatus, agentActiveImage=agentActiveImage, agentPortMirrorRemoteSourceVlan=agentPortMirrorRemoteSourceVlan, agentSwitchStormControlGroup=agentSwitchStormControlGroup, agentProtocolGroupProtocolEntry=agentProtocolGroupProtocolEntry, agentSwitchDVlanTagTable=agentSwitchDVlanTagTable, agentStpPortStatsRstpBpduTx=agentStpPortStatsRstpBpduTx, agentStaticIpv6sgBindingIfIndex=agentStaticIpv6sgBindingIfIndex, agentProtocolGroupId=agentProtocolGroupId, agentStpCstHelloTime=agentStpCstHelloTime, agentDynamicAuthorizationIgnoreServerKey=agentDynamicAuthorizationIgnoreServerKey, agentSwitchStaticMacFilteringAddress=agentSwitchStaticMacFilteringAddress, agentSwitchStormControlTrap=agentSwitchStormControlTrap, agentProtocolGroupPortTable=agentProtocolGroupPortTable, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentSupportedMibTable=agentSupportedMibTable, agentStpCstPortBpduFilter=agentStpCstPortBpduFilter, agentCmdsAuthorizationListTable=agentCmdsAuthorizationListTable, agentStaticDsBindingIpAddr=agentStaticDsBindingIpAddr, agentSwitchSnoopingCfgEntry=agentSwitchSnoopingCfgEntry, agentAuthenticationListMethod1=agentAuthenticationListMethod1, agentSwitchCpuProcessPercentageUtilization=agentSwitchCpuProcessPercentageUtilization, agentSwitchSnoopSSMGroupLastReporter=agentSwitchSnoopSSMGroupLastReporter, agentVlanSwitchportTrunkForbiddenPorts=agentVlanSwitchportTrunkForbiddenPorts, agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentSwitchSnoopingQuerierVlanEntry=agentSwitchSnoopingQuerierVlanEntry, agentClassOfServicePortEntry=agentClassOfServicePortEntry, agentStaticIpsgBindingMacAddr=agentStaticIpsgBindingMacAddr, agentDhcpv6SnoopingVlanEnable=agentDhcpv6SnoopingVlanEnable, agentStaticIpsgBindingRowStatus=agentStaticIpsgBindingRowStatus, agentLinkDependencyGroupId=agentLinkDependencyGroupId, agentStaticIpv6sgBindingEntry=agentStaticIpv6sgBindingEntry, agentPortVoiceVlanAuthMode=agentPortVoiceVlanAuthMode, agentInventoryPartNumber=agentInventoryPartNumber, agentSwitchSnoopSSMGroupAddress=agentSwitchSnoopSSMGroupAddress, agentSwitchVlanMacAssociationVlanId=agentSwitchVlanMacAssociationVlanId, agentStpCstPortOperEdge=agentStpCstPortOperEdge, agentPortDot3FlowControlOperStatus=agentPortDot3FlowControlOperStatus, broadcastStormEndTrap=broadcastStormEndTrap, agentIASUserIndex=agentIASUserIndex, agentDaiVlanArpAclStaticFlag=agentDaiVlanArpAclStaticFlag, agentStaticDsv6BindingRowStatus=agentStaticDsv6BindingRowStatus, agentServicePortIpv6AddrTable=agentServicePortIpv6AddrTable, agentDhcpSnoopingVlanConfigEntry=agentDhcpSnoopingVlanConfigEntry, agentServicePortDhcp6ADVERTISEMessagesReceived=agentServicePortDhcp6ADVERTISEMessagesReceived, agentStpCstPortPathCost=agentStpCstPortPathCost, agentIASUserConfigTable=agentIASUserConfigTable, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentPortStatsRateEntry=agentPortStatsRateEntry, agentUserAuthenticationConfigTable=agentUserAuthenticationConfigTable, agentStpConfigRevision=agentStpConfigRevision, agentSwitchStormControlAction=agentSwitchStormControlAction, agentStpPortStatsRstpBpduRx=agentStpPortStatsRstpBpduRx, agentDaiVlanIndex=agentDaiVlanIndex, agentDaiIfTrustEnable=agentDaiIfTrustEnable, agentStaticDsv6BindingIfIndex=agentStaticDsv6BindingIfIndex, agentSwitchCpuProcessFreeMemoryThreshold=agentSwitchCpuProcessFreeMemoryThreshold, agentStpMstDesignatedCost=agentStpMstDesignatedCost, agentSdmTemplateTable=agentSdmTemplateTable, agentIPv6UnicastRoutes=agentIPv6UnicastRoutes, agentDynamicDsv6BindingEntry=agentDynamicDsv6BindingEntry, agentSwitchUnicastControlThreshold=agentSwitchUnicastControlThreshold, agentSwitchProtectedPortTable=agentSwitchProtectedPortTable, agentTransferUploadPassword=agentTransferUploadPassword, agentServicePortConfigGroup=agentServicePortConfigGroup, agentLoginSessionInetAddressType=agentLoginSessionInetAddressType, agentUserPasswordExpireTime=agentUserPasswordExpireTime, agentPasswordManagementStrengthMinLowerCase=agentPasswordManagementStrengthMinLowerCase, agentSwitchMbufTable=agentSwitchMbufTable, agentStpPortMigrationCheck=agentStpPortMigrationCheck, agentStpCstPortOperPointToPoint=agentStpCstPortOperPointToPoint, agentDaiVlanDhcpPermits=agentDaiVlanDhcpPermits, agentPasswordManagementStrengthExcludeKeywordEntry=agentPasswordManagementStrengthExcludeKeywordEntry, agentClassOfServiceGroup=agentClassOfServiceGroup, agentSwitchCpuProcessTotalUtilizationSixty=agentSwitchCpuProcessTotalUtilizationSixty, agentClearPortStats=agentClearPortStats, agentLinkDependencyGroupStatus=agentLinkDependencyGroupStatus, agentPvrstpVlanIndex=agentPvrstpVlanIndex, agentDhcpL2RelayIfConfigTable=agentDhcpL2RelayIfConfigTable, agentSwitchVlanSubnetAssociationSubnetMask=agentSwitchVlanSubnetAssociationSubnetMask, agentDynamicDsBindingLeaseRemainingTime=agentDynamicDsBindingLeaseRemainingTime, agentSwitchMFDBDescription=agentSwitchMFDBDescription)
