#
# PySNMP MIB module BLADE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, enterprises, NotificationType, iso, IpAddress, NotificationType, ModuleIdentity, Gauge32, Integer32, Counter32, MibIdentifier, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "enterprises", "NotificationType", "iso", "IpAddress", "NotificationType", "ModuleIdentity", "Gauge32", "Integer32", "Counter32", "MibIdentifier", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3))
netfinitySupportProcessorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51))
bladeCenterSnmpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2))
errorLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3))
configureSP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4))
telcoManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5))
restartReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7))
bladeCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1))
planarTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1))
mmTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmTemp.setStatus('mandatory')
cpuXTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 2))
ambientTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5))
frontPanelTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontPanelTemp.setStatus('mandatory')
voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2))
planarVolt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1))
plus5Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus5Volt.setStatus('mandatory')
plus3Pt3Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus3Pt3Volt.setStatus('mandatory')
plus12Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus12Volt.setStatus('mandatory')
minus5Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minus5Volt.setStatus('mandatory')
plus2Pt5Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus2Pt5Volt.setStatus('mandatory')
plus1Pt8Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus1Pt8Volt.setStatus('mandatory')
blowers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3))
blower1speed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blower1speed.setStatus('mandatory')
blower2speed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blower2speed.setStatus('mandatory')
blower1State = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blower1State.setStatus('mandatory')
blower2State = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blower2State.setStatus('mandatory')
powerModuleHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4))
powerModuleHealthTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1), )
if mibBuilder.loadTexts: powerModuleHealthTable.setStatus('mandatory')
powerModuleHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1), ).setIndexNames((0, "BLADE-MIB", "powerModuleIndex"))
if mibBuilder.loadTexts: powerModuleHealthEntry.setStatus('mandatory')
powerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleIndex.setStatus('mandatory')
powerModuleExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleExists.setStatus('mandatory')
powerModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleState.setStatus('mandatory')
powerModuleDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerModuleDetails.setStatus('mandatory')
spStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5))
mmBistAndChassisStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2))
bistSdram = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSdram.setStatus('mandatory')
bistRs485Port1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistRs485Port1.setStatus('mandatory')
bistRs485Port2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistRs485Port2.setStatus('mandatory')
bistNvram = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistNvram.setStatus('mandatory')
bistRtc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistRtc.setStatus('mandatory')
bistLocalI2CBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistLocalI2CBus.setStatus('mandatory')
bistPrimaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPrimaryMainAppFlashImage.setStatus('mandatory')
bistSecondaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSecondaryMainAppFlashImage.setStatus('mandatory')
bistBootRomFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBootRomFlashImage.setStatus('mandatory')
bistEthernetPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistEthernetPort1.setStatus('mandatory')
bistEthernetPort2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistEthernetPort2.setStatus('mandatory')
bistInternalPCIBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistInternalPCIBus.setStatus('mandatory')
bistExternalI2CDevices = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistExternalI2CDevices.setStatus('mandatory')
bistUSBController = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistUSBController.setStatus('mandatory')
bistVideoCompressorBoard = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistVideoCompressorBoard.setStatus('mandatory')
bistPrimaryBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPrimaryBus.setStatus('mandatory')
bistInternalEthernetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("testSucceeded", 0), ("testFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistInternalEthernetSwitch.setStatus('mandatory')
bistBladesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBladesInstalled.setStatus('mandatory')
bistBladesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBladesCommunicating.setStatus('mandatory')
bistBlowersInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBlowersInstalled.setStatus('mandatory')
bistBlowersFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistBlowersFunctional.setStatus('mandatory')
bistMediaTrayInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistMediaTrayInstalled.setStatus('mandatory')
bistMediaTrayCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistMediaTrayCommunicating.setStatus('mandatory')
bistPowerModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPowerModulesInstalled.setStatus('mandatory')
bistPowerModulesFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistPowerModulesFunctional.setStatus('mandatory')
bistSwitchModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSwitchModulesInstalled.setStatus('mandatory')
bistSwitchModulesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSwitchModulesCommunicating.setStatus('mandatory')
systemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7))
systemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 255))).clone(namedValues=NamedValues(("critical", 0), ("nonCritical", 2), ("systemLevel", 4), ("normal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthStat.setStatus('mandatory')
systemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2), )
if mibBuilder.loadTexts: systemHealthSummaryTable.setStatus('mandatory')
systemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1), ).setIndexNames((0, "BLADE-MIB", "systemHealthSummaryIndex"))
if mibBuilder.loadTexts: systemHealthSummaryEntry.setStatus('mandatory')
systemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryIndex.setStatus('mandatory')
systemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummarySeverity.setStatus('mandatory')
systemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryDescription.setStatus('mandatory')
leds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8))
frontPanelLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1))
systemErrorLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemErrorLED.setStatus('mandatory')
informationLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: informationLED.setStatus('mandatory')
temperatureLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureLED.setStatus('mandatory')
identityLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identityLED.setStatus('mandatory')
bladeLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2))
bladeLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1), )
if mibBuilder.loadTexts: bladeLEDsTable.setStatus('mandatory')
bladeLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1), ).setIndexNames((0, "BLADE-MIB", "bladeStatusIndex"))
if mibBuilder.loadTexts: bladeLEDsEntry.setStatus('mandatory')
ledBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeIndex.setStatus('mandatory')
ledBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeId.setStatus('mandatory')
ledBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeExists.setStatus('mandatory')
ledBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladePowerState.setStatus('mandatory')
ledBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeHealthState.setStatus('mandatory')
ledBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeName.setStatus('mandatory')
ledBladeSystemError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeSystemError.setStatus('mandatory')
ledBladeInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledBladeInformation.setStatus('mandatory')
ledBladeKVM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeKVM.setStatus('mandatory')
ledBladeMediaTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledBladeMediaTray.setStatus('mandatory')
ledBladeIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledBladeIdentity.setStatus('mandatory')
telcoPanelLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3))
criticalLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: criticalLED.setStatus('mandatory')
majorLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLED.setStatus('mandatory')
minorLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLED.setStatus('mandatory')
telcoIdentityLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telcoIdentityLED.setStatus('mandatory')
telcoColorSel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("amber", 0), ("red", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telcoColorSel.setStatus('mandatory')
criticalityAssertionMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: criticalityAssertionMode.setStatus('mandatory')
smLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4))
smLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1), )
if mibBuilder.loadTexts: smLEDsTable.setStatus('mandatory')
smLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1), ).setIndexNames((0, "BLADE-MIB", "ledSMIndex"))
if mibBuilder.loadTexts: smLEDsEntry.setStatus('mandatory')
ledSMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSMIndex.setStatus('mandatory')
ledSMLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSMLEDs.setStatus('mandatory')
telcoSystemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9))
telcoSystemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 5, 4, 3, 2, 1, 255))).clone(namedValues=NamedValues(("critical-power", 6), ("critical", 5), ("major-power", 4), ("major", 3), ("minor-power", 2), ("minor", 1), ("normal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthStat.setStatus('mandatory')
telcoSystemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2), )
if mibBuilder.loadTexts: telcoSystemHealthSummaryTable.setStatus('mandatory')
telcoSystemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1), ).setIndexNames((0, "BLADE-MIB", "telcoSystemHealthSummaryIndex"))
if mibBuilder.loadTexts: telcoSystemHealthSummaryEntry.setStatus('mandatory')
telcoSystemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthSummaryIndex.setStatus('mandatory')
telcoSystemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthSummarySeverity.setStatus('mandatory')
telcoSystemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthSummaryDescription.setStatus('mandatory')
telcoSystemHealthSummaryEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthSummaryEventName.setStatus('mandatory')
telcoSystemHealthSummaryEventKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthSummaryEventKeyID.setStatus('mandatory')
telcoSystemHealthSummaryAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unacknowledged", 0), ("acknowledged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoSystemHealthSummaryAcknowledge.setStatus('mandatory')
fuelGauge = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10))
fuelGaugeInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1))
fuelGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1), )
if mibBuilder.loadTexts: fuelGaugeTable.setStatus('mandatory')
fuelGaugeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1), ).setIndexNames((0, "BLADE-MIB", "fuelGaugeIndex"))
if mibBuilder.loadTexts: fuelGaugeEntry.setStatus('mandatory')
fuelGaugeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeIndex.setStatus('mandatory')
fuelGaugePowerDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerDomain1", 1), ("powerDomain2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerDomainNumber.setStatus('mandatory')
fuelGaugeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStatus.setStatus('mandatory')
fuelGaugeFirstPowerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeFirstPowerModule.setStatus('mandatory')
fuelGaugeSecondPowerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeSecondPowerModule.setStatus('mandatory')
fuelGaugePowerManagementPolicySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("redundantWithoutPerformanceImpact", 0), ("redundantWithPerformanceImpact", 1), ("nonRedundant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerManagementPolicySetting.setStatus('mandatory')
fuelGaugeTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalPower.setStatus('mandatory')
fuelGaugeReservedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeReservedPower.setStatus('mandatory')
fuelGaugeRemainingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeRemainingPower.setStatus('mandatory')
fuelGaugePowerInUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerInUsed.setStatus('mandatory')
powerDomain1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2))
powerDomain1Table = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1), )
if mibBuilder.loadTexts: powerDomain1Table.setStatus('mandatory')
powerDomain1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "BLADE-MIB", "pd1Index"))
if mibBuilder.loadTexts: powerDomain1Entry.setStatus('mandatory')
pd1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1Index.setStatus('mandatory')
pd1BayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1BayNumber.setStatus('mandatory')
pd1BladePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1BladePrimarySlot.setStatus('mandatory')
pd1ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("insufficientPower", 0), ("moduleIsThrottling", 1), ("moduleNotThrottling", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleStatus.setStatus('mandatory')
pd1ModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleName.setStatus('mandatory')
pd1ModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("standby", 0), ("on", 1), ("notPresent", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleState.setStatus('mandatory')
pd1ModuleAllocatedPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleAllocatedPowerCurrent.setStatus('mandatory')
pd1ModuleAllocatedPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleAllocatedPowerMax.setStatus('mandatory')
pd1ModuleAllocatedPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleAllocatedPowerMin.setStatus('mandatory')
pd1ModuleCPUDutyCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleCPUDutyCycles.setStatus('mandatory')
pd1ModuleThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd1ModuleThrottle.setStatus('mandatory')
powerDomain2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3))
powerDomain2Table = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1), )
if mibBuilder.loadTexts: powerDomain2Table.setStatus('mandatory')
powerDomain2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1), ).setIndexNames((0, "BLADE-MIB", "pd2Index"))
if mibBuilder.loadTexts: powerDomain2Entry.setStatus('mandatory')
pd2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2Index.setStatus('mandatory')
pd2BayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2BayNumber.setStatus('mandatory')
pd2BladePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2BladePrimarySlot.setStatus('mandatory')
pd2ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("insufficientPower", 0), ("moduleIsThrottling", 1), ("moduleNotThrottling", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleStatus.setStatus('mandatory')
pd2ModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleName.setStatus('mandatory')
pd2ModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("standby", 0), ("on", 1), ("notPresent", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleState.setStatus('mandatory')
pd2ModuleAllocatedPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleAllocatedPowerCurrent.setStatus('mandatory')
pd2ModuleAllocatedPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleAllocatedPowerMax.setStatus('mandatory')
pd2ModuleAllocatedPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleAllocatedPowerMin.setStatus('mandatory')
pd2ModuleCPUDutyCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleCPUDutyCycles.setStatus('mandatory')
pd2ModuleThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pd2ModuleThrottle.setStatus('mandatory')
eventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4))
readEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2), )
if mibBuilder.loadTexts: readEventLogTable.setStatus('mandatory')
readEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1), ).setIndexNames((0, "BLADE-MIB", "readEventLogIndex"))
if mibBuilder.loadTexts: readEventLogEntry.setStatus('mandatory')
readEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogIndex.setStatus('mandatory')
readEventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readEventLogString.setStatus('mandatory')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearEventLog.setStatus('mandatory')
monitorLogStateEvents = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorLogStateEvents.setStatus('mandatory')
remoteAccessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1))
generalRemoteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1))
remoteAlertRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noretry", 0), ("retry1", 1), ("retry2", 2), ("retry3", 3), ("retry4", 4), ("retry5", 5), ("retry6", 6), ("retry7", 7), ("retry8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryCount.setStatus('mandatory')
remoteAlertRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120, 150, 180, 210, 240))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("oneAndHalfMinutes", 90), ("twoMinutes", 120), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryDelay.setStatus('mandatory')
remoteAccessTamperDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 30, 60, 120, 180, 240))).clone(namedValues=NamedValues(("nowait", 0), ("oneMinute", 1), ("twoMinutes", 2), ("threeMinutes", 3), ("fourMinutes", 4), ("fiveMinutes", 5), ("sixMinutes", 6), ("sevenMinutes", 7), ("tenMinutes", 10), ("fifteenMinutes", 15), ("twentyMinutes", 20), ("thirtyMinutes", 30), ("sixtyMinutes", 60), ("oneTwentyMinutes", 120), ("oneEightyMinutes", 180), ("twoFortyMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessTamperDelay.setStatus('mandatory')
userAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("localOnly", 0), ("ldapOnly", 1), ("localFirstThenLdap", 2), ("ldapFirstThenLocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthenticationMethod.setStatus('mandatory')
allowModemLogin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowModemLogin.setStatus('mandatory')
remoteAlertIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3))
remoteAlertIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1), )
if mibBuilder.loadTexts: remoteAlertIdsTable.setStatus('mandatory')
remoteAlertIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1), ).setIndexNames((0, "BLADE-MIB", "remoteAlertIdEntryIndex"))
if mibBuilder.loadTexts: remoteAlertIdsEntry.setStatus('mandatory')
remoteAlertIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlertIdEntryIndex.setStatus('mandatory')
remoteAlertIdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("disabledAndValid", 1), ("enabledAndValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryStatus.setStatus('mandatory')
remoteAlertIdEntryIpOrHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryIpOrHostAddress.setStatus('mandatory')
remoteAlertIdEntryTextDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryTextDescription.setStatus('mandatory')
remoteAlertIdEntryNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("ibmDirectorOverLAN", 8), ("snmpOverLan", 4), ("emailOverLan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryNotificationType.setStatus('mandatory')
remoteAlertIdEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEmailAddr.setStatus('mandatory')
remoteAlertIdEntrySelectiveAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("critOnlyAlerts", 0), ("allAlerts", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySelectiveAlert.setStatus('mandatory')
generateTestAlert = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generateTestAlert.setStatus('mandatory')
remoteAccessIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4))
remoteAccessIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: remoteAccessIdsTable.setStatus('mandatory')
remoteAccessIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "BLADE-MIB", "remoteAccessIdEntryIndex"))
if mibBuilder.loadTexts: remoteAccessIdsEntry.setStatus('mandatory')
remoteAccessIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryIndex.setStatus('mandatory')
remoteAccessIdEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryUserId.setStatus('mandatory')
remoteAccessIdEntryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryPassword.setStatus('mandatory')
remoteAccessIdEntryEncodedLoginPw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryEncodedLoginPw.setStatus('mandatory')
remoteAccessUserAuthorityLevelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2), )
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelTable.setStatus('mandatory')
remoteAccessUserAuthorityLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1), ).setIndexNames((0, "BLADE-MIB", "ualIndex"))
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelEntry.setStatus('mandatory')
ualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ualIndex.setStatus('mandatory')
ualId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ualId.setStatus('mandatory')
ualSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualSupervisor.setStatus('mandatory')
ualReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualReadOnly.setStatus('mandatory')
ualAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAccountManagement.setStatus('mandatory')
ualConsoleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualConsoleAccess.setStatus('mandatory')
ualConsoleAndVirtualMediaAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualConsoleAndVirtualMediaAccess.setStatus('mandatory')
ualServerPowerAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualServerPowerAccess.setStatus('mandatory')
ualAllowClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAllowClearLog.setStatus('mandatory')
ualAdapterBasicConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterBasicConfig.setStatus('mandatory')
ualAdapterNetworkAndSecurityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterNetworkAndSecurityConfig.setStatus('mandatory')
ualAdapterAdvancedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterAdvancedConfig.setStatus('mandatory')
remoteAccessRBSroleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3), )
if mibBuilder.loadTexts: remoteAccessRBSroleTable.setStatus('mandatory')
remoteAccessRBSroleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1), ).setIndexNames((0, "BLADE-MIB", "roleIndex"))
if mibBuilder.loadTexts: remoteAccessRBSroleEntry.setStatus('mandatory')
roleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleIndex.setStatus('mandatory')
roleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleId.setStatus('mandatory')
rbsSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSupervisor.setStatus('mandatory')
rbsOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsOperator.setStatus('mandatory')
rbsChassisOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisOperator.setStatus('mandatory')
rbsChassisAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisAccountManagement.setStatus('mandatory')
rbsChassisLogManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisLogManagement.setStatus('mandatory')
rbsChassisConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisConfiguration.setStatus('mandatory')
rbsChassisAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassisAdministration.setStatus('mandatory')
rbsBladeOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeOperator.setStatus('mandatory')
rbsBladeRemotePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeRemotePresence.setStatus('mandatory')
rbsBladeConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeConfiguration.setStatus('mandatory')
rbsBladeAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBladeAdministration.setStatus('mandatory')
rbsSwitchModuleOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitchModuleOperator.setStatus('mandatory')
rbsSwitchModuleConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitchModuleConfiguration.setStatus('mandatory')
rbsSwitchModuleAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitchModuleAdministration.setStatus('mandatory')
remoteAccessRBSscopeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4), )
if mibBuilder.loadTexts: remoteAccessRBSscopeTable.setStatus('mandatory')
remoteAccessRBSscopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1), ).setIndexNames((0, "BLADE-MIB", "scopeIndex"))
if mibBuilder.loadTexts: remoteAccessRBSscopeEntry.setStatus('mandatory')
scopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scopeIndex.setStatus('mandatory')
scopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scopeId.setStatus('mandatory')
rbsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsChassis.setStatus('mandatory')
rbsBlade1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade1.setStatus('mandatory')
rbsBlade2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade2.setStatus('mandatory')
rbsBlade3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade3.setStatus('mandatory')
rbsBlade4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade4.setStatus('mandatory')
rbsBlade5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade5.setStatus('mandatory')
rbsBlade6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade6.setStatus('mandatory')
rbsBlade7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade7.setStatus('mandatory')
rbsBlade8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade8.setStatus('mandatory')
rbsBlade9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade9.setStatus('mandatory')
rbsBlade10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade10.setStatus('mandatory')
rbsBlade11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade11.setStatus('mandatory')
rbsBlade12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade12.setStatus('mandatory')
rbsBlade13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade13.setStatus('mandatory')
rbsBlade14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsBlade14.setStatus('mandatory')
rbsSwitch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch1.setStatus('mandatory')
rbsSwitch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch2.setStatus('mandatory')
rbsSwitch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch3.setStatus('mandatory')
rbsSwitch4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbsSwitch4.setStatus('mandatory')
remoteAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2))
remoteAlertsCrit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1))
critTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critTemp.setStatus('mandatory')
critVolt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critVolt.setStatus('mandatory')
critMultiBlower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critMultiBlower.setStatus('mandatory')
critPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critPower.setStatus('mandatory')
critHardDrive = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critHardDrive.setStatus('mandatory')
critVRM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critVRM.setStatus('mandatory')
critMultipleSwitchModule = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critMultipleSwitchModule.setStatus('mandatory')
critInvalidConfig = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: critInvalidConfig.setStatus('mandatory')
remoteAlertsNonCrit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2))
warnSingleBlower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnSingleBlower.setStatus('mandatory')
warnTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnTemp.setStatus('mandatory')
warnVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnVoltage.setStatus('mandatory')
warnRedundantModule = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnRedundantModule.setStatus('mandatory')
warnMediaTrayKVMSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnMediaTrayKVMSwitch.setStatus('mandatory')
remoteAlertsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3))
systemPowerOff = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPowerOff.setStatus('mandatory')
systemPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPowerOn.setStatus('mandatory')
systemPFA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPFA.setStatus('mandatory')
systemInventory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemInventory.setStatus('mandatory')
systemLog75PctFull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLog75PctFull.setStatus('mandatory')
networkChangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkChangeNotification.setStatus('mandatory')
systemBladeThrottling = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemBladeThrottling.setStatus('mandatory')
systemPowerManagement = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPowerManagement.setStatus('mandatory')
monitorThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20))
voltageThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2))
voltageThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1), )
if mibBuilder.loadTexts: voltageThresholdsTable.setStatus('mandatory')
voltageThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1), ).setIndexNames((0, "BLADE-MIB", "voltageThresholdEntryIndex"))
if mibBuilder.loadTexts: voltageThresholdsEntry.setStatus('mandatory')
voltageThresholdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryIndex.setStatus('mandatory')
voltageThresholdEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryName.setStatus('mandatory')
voltageThresholdEntryCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryCurrentValue.setStatus('mandatory')
voltageThresholdEntryWarningHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryWarningHighValue.setStatus('mandatory')
voltageThresholdEntryWarningResetHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryWarningResetHighValue.setStatus('mandatory')
voltageThresholdEntryWarningLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryWarningLowValue.setStatus('mandatory')
voltageThresholdEntryWarningResetLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdEntryWarningResetLowValue.setStatus('mandatory')
vpdInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21))
chassisVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1))
bladeCenterVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1))
bladeCenterVpdMachineType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterVpdMachineType.setStatus('mandatory')
bladeCenterVpdMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterVpdMachineModel.setStatus('mandatory')
bladeCenterSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterSerialNumber.setStatus('mandatory')
bladeCenterUUID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterUUID.setStatus('mandatory')
bladeCenterManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterManufacturingId.setStatus('mandatory')
bladeCenterHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterHardwareRevision.setStatus('mandatory')
bladeCenterFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterFruNumber.setStatus('mandatory')
bladeCenterManufDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterManufDate.setStatus('mandatory')
bladeCenterPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterPartNumber.setStatus('mandatory')
bladeCenterFruSerial = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCenterFruSerial.setStatus('mandatory')
mmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2))
mmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1), )
if mibBuilder.loadTexts: mmHardwareVpdTable.setStatus('mandatory')
mmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1), ).setIndexNames((0, "BLADE-MIB", "mmHardwareVpdIndex"))
if mibBuilder.loadTexts: mmHardwareVpdEntry.setStatus('mandatory')
mmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdIndex.setStatus('mandatory')
mmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdBayNumber.setStatus('mandatory')
mmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdManufacturingId.setStatus('mandatory')
mmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdFruNumber.setStatus('mandatory')
mmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdHardwareRevision.setStatus('mandatory')
mmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdUuid.setStatus('mandatory')
mmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdManufDate.setStatus('mandatory')
mmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdPartNumber.setStatus('mandatory')
mmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmHardwareVpdFruSerial.setStatus('mandatory')
mmFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3))
mmMainApplVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1), )
if mibBuilder.loadTexts: mmMainApplVpdTable.setStatus('mandatory')
mmMainApplVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1), ).setIndexNames((0, "BLADE-MIB", "mmMainApplVpdIndex"))
if mibBuilder.loadTexts: mmMainApplVpdEntry.setStatus('mandatory')
mmMainApplVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdIndex.setStatus('mandatory')
mmMainApplVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdName.setStatus('mandatory')
mmMainApplVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdBuildId.setStatus('mandatory')
mmMainApplVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdRevisonNumber.setStatus('mandatory')
mmMainApplVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdFilename.setStatus('mandatory')
mmMainApplVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmMainApplVpdBuildDate.setStatus('mandatory')
mmBootROMVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2), )
if mibBuilder.loadTexts: mmBootROMVpdTable.setStatus('mandatory')
mmBootROMVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1), ).setIndexNames((0, "BLADE-MIB", "mmBootROMVpdIndex"))
if mibBuilder.loadTexts: mmBootROMVpdEntry.setStatus('mandatory')
mmBootROMVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmBootROMVpdIndex.setStatus('mandatory')
mmBootROMVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmBootROMVpdName.setStatus('mandatory')
mmBootROMVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmBootROMVpdBuildId.setStatus('mandatory')
mmBootROMVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmBootROMVpdRevisonNumber.setStatus('mandatory')
mmBootROMVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmBootROMVpdFilename.setStatus('mandatory')
mmBootROMVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmBootROMVpdBuildDate.setStatus('mandatory')
mmRemoteControlVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3), )
if mibBuilder.loadTexts: mmRemoteControlVpdTable.setStatus('mandatory')
mmRemoteControlVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1), ).setIndexNames((0, "BLADE-MIB", "mmRemoteControlVpdIndex"))
if mibBuilder.loadTexts: mmRemoteControlVpdEntry.setStatus('mandatory')
mmRemoteControlVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmRemoteControlVpdIndex.setStatus('mandatory')
mmRemoteControlVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmRemoteControlVpdName.setStatus('mandatory')
mmRemoteControlVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmRemoteControlVpdBuildId.setStatus('mandatory')
mmRemoteControlVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmRemoteControlVpdRevisonNumber.setStatus('mandatory')
mmRemoteControlVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmRemoteControlVpdFilename.setStatus('mandatory')
mmRemoteControlVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmRemoteControlVpdBuildDate.setStatus('mandatory')
mmPS2toUSBConvVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4), )
if mibBuilder.loadTexts: mmPS2toUSBConvVpdTable.setStatus('mandatory')
mmPS2toUSBConvVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1), ).setIndexNames((0, "BLADE-MIB", "mmPS2toUSBConvVpdIndex"))
if mibBuilder.loadTexts: mmPS2toUSBConvVpdEntry.setStatus('mandatory')
mmPS2toUSBConvVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPS2toUSBConvVpdIndex.setStatus('mandatory')
mmPS2toUSBConvVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPS2toUSBConvVpdName.setStatus('mandatory')
mmPS2toUSBConvVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPS2toUSBConvVpdBuildId.setStatus('mandatory')
mmPS2toUSBConvVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPS2toUSBConvVpdRevisonNumber.setStatus('mandatory')
mmPS2toUSBConvVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPS2toUSBConvVpdFilename.setStatus('mandatory')
mmPS2toUSBConvVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPS2toUSBConvVpdBuildDate.setStatus('mandatory')
mmToUSBIntfVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5), )
if mibBuilder.loadTexts: mmToUSBIntfVpdTable.setStatus('mandatory')
mmToUSBIntfVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1), ).setIndexNames((0, "BLADE-MIB", "mmToUSBIntfVpdIndex"))
if mibBuilder.loadTexts: mmToUSBIntfVpdEntry.setStatus('mandatory')
mmToUSBIntfVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmToUSBIntfVpdIndex.setStatus('mandatory')
mmToUSBIntfVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmToUSBIntfVpdName.setStatus('mandatory')
mmToUSBIntfVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmToUSBIntfVpdBuildId.setStatus('mandatory')
mmToUSBIntfVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmToUSBIntfVpdRevisonNumber.setStatus('mandatory')
mmToUSBIntfVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmToUSBIntfVpdFilename.setStatus('mandatory')
mmToUSBIntfVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmToUSBIntfVpdBuildDate.setStatus('mandatory')
inventoryManagementVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21), )
if mibBuilder.loadTexts: inventoryManagementVpdTable.setStatus('mandatory')
inventoryManagementVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1), ).setIndexNames((0, "BLADE-MIB", "componentLevelVpdIndex"))
if mibBuilder.loadTexts: inventoryManagementVpdEntry.setStatus('mandatory')
componentLevelVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdIndex.setStatus('mandatory')
componentLevelVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdFruNumber.setStatus('mandatory')
componentLevelVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdSerialNumber.setStatus('mandatory')
componentLevelVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdManufacturingId.setStatus('mandatory')
componentLevelVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdBayNumber.setStatus('mandatory')
componentLevelVpdTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 17, 18, 19, 20, 21, 40, 33, 34, 35, 47, 81, 97, 113, 129))).clone(namedValues=NamedValues(("unknown", 0), ("bladeX86OneWay", 1), ("bladeX86TwoWay", 2), ("bladeX86FourWay", 4), ("switchModuleEthernet", 17), ("switchModuleFiberChannel", 18), ("scalabilityPortModule", 19), ("switchModuleInfiniband", 20), ("switchModuleMixedProtocol", 21), ("switchModuleCopperPassThrough", 40), ("bladeEthernetDaughterCard", 33), ("bladeFiberChannelDaughterCard", 34), ("bladeStorageExpansionUnit", 35), ("serialPortExpansionCard", 47), ("managementModule", 81), ("chassis", 97), ("powerModule", 113), ("mediaTray", 129)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTypeCode.setStatus('mandatory')
componentLevelVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdMachineType.setStatus('mandatory')
componentLevelVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdHardwareRevision.setStatus('mandatory')
inventoryManagementActivityVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22), )
if mibBuilder.loadTexts: inventoryManagementActivityVpdTable.setStatus('mandatory')
inventoryManagementActivityVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1), ).setIndexNames((0, "BLADE-MIB", "componentLevelActivityVpdIndex"))
if mibBuilder.loadTexts: inventoryManagementActivityVpdEntry.setStatus('mandatory')
componentLevelActivityVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdIndex.setStatus('mandatory')
componentLevelActivityVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdFruNumber.setStatus('mandatory')
componentLevelActivityVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdSerialNumber.setStatus('mandatory')
componentLevelActivityVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdManufacturingId.setStatus('mandatory')
componentLevelActivityVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdBayNumber.setStatus('mandatory')
componentLevelActivityVpdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdAction.setStatus('mandatory')
componentLevelActivityVpdTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelActivityVpdTimestamp.setStatus('mandatory')
bladeHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4))
bladeHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1), )
if mibBuilder.loadTexts: bladeHardwareVpdTable.setStatus('mandatory')
bladeHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1), ).setIndexNames((0, "BLADE-MIB", "bladeHardwareVpdIndex"))
if mibBuilder.loadTexts: bladeHardwareVpdEntry.setStatus('mandatory')
bladeHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdIndex.setStatus('mandatory')
bladeHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdBayNumber.setStatus('mandatory')
bladeHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdManufacturingId.setStatus('mandatory')
bladeHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdFruNumber.setStatus('mandatory')
bladeHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdHardwareRevision.setStatus('mandatory')
bladeHardwareVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdSerialNumber.setStatus('mandatory')
bladeHardwareVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdMachineType.setStatus('mandatory')
bladeHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdUuid.setStatus('mandatory')
bladeHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdManufDate.setStatus('mandatory')
bladeHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdPartNumber.setStatus('mandatory')
bladeHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHardwareVpdFruSerial.setStatus('mandatory')
bladeDaughterVpdCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("network", 1), ("dasd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdCardType.setStatus('mandatory')
bladeDaughterVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdManufacturingId.setStatus('mandatory')
bladeDaughterVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdFruNumber.setStatus('mandatory')
bladeDaughterVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdHardwareRevision.setStatus('mandatory')
bladeDaughterVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdSerialNumber.setStatus('mandatory')
bladeDaughterVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdMachineType.setStatus('mandatory')
bladeDaughterVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdUuid.setStatus('mandatory')
bladeDaughterVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdManufDate.setStatus('mandatory')
bladeDaughterVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdPartNumber.setStatus('mandatory')
bladeDaughterVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterVpdFruSerial.setStatus('mandatory')
bladeMACAddressVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2), )
if mibBuilder.loadTexts: bladeMACAddressVpdTable.setStatus('mandatory')
bladeMACAddressVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1), ).setIndexNames((0, "BLADE-MIB", "bladeMACAddressVpdIndex"))
if mibBuilder.loadTexts: bladeMACAddressVpdEntry.setStatus('mandatory')
bladeMACAddressVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddressVpdIndex.setStatus('mandatory')
bladeMACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress1Vpd.setStatus('mandatory')
bladeMACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress2Vpd.setStatus('mandatory')
bladeMACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress3Vpd.setStatus('mandatory')
bladeMACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard1MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard1MACAddress4Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress1Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress2Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress3Vpd.setStatus('mandatory')
bladeDaughterCard2MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDaughterCard2MACAddress4Vpd.setStatus('mandatory')
bladeFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5))
bladeBiosVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1), )
if mibBuilder.loadTexts: bladeBiosVPDTable.setStatus('mandatory')
bladeBiosVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1), ).setIndexNames((0, "BLADE-MIB", "bladeBiosVpdIndex"))
if mibBuilder.loadTexts: bladeBiosVPDEntry.setStatus('mandatory')
bladeBiosVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdIndex.setStatus('mandatory')
bladeBiosVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdId.setStatus('mandatory')
bladeBiosVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdExists.setStatus('mandatory')
bladeBiosVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdPowerState.setStatus('mandatory')
bladeBiosVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdName.setStatus('mandatory')
bladeBiosVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdBuildId.setStatus('mandatory')
bladeBiosVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdRevision.setStatus('mandatory')
bladeBiosVpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVpdDate.setStatus('mandatory')
bladeDiagsVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2), )
if mibBuilder.loadTexts: bladeDiagsVPDTable.setStatus('mandatory')
bladeDiagsVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1), ).setIndexNames((0, "BLADE-MIB", "bladeDiagsVpdIndex"))
if mibBuilder.loadTexts: bladeDiagsVPDEntry.setStatus('mandatory')
bladeDiagsVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdIndex.setStatus('mandatory')
bladeDiagsVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdId.setStatus('mandatory')
bladeDiagsVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdExists.setStatus('mandatory')
bladeDiagsVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdPowerState.setStatus('mandatory')
bladeDiagsVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdName.setStatus('mandatory')
bladeDiagsVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdBuildId.setStatus('mandatory')
bladeDiagsVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdRevision.setStatus('mandatory')
bladeDiagsVpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeDiagsVpdDate.setStatus('mandatory')
bladeSysMgmtProcVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3), )
if mibBuilder.loadTexts: bladeSysMgmtProcVPDTable.setStatus('mandatory')
bladeSysMgmtProcVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1), ).setIndexNames((0, "BLADE-MIB", "bladeSysMgmtProcVpdIndex"))
if mibBuilder.loadTexts: bladeSysMgmtProcVPDEntry.setStatus('mandatory')
bladeSysMgmtProcVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdIndex.setStatus('mandatory')
bladeSysMgmtProcVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdId.setStatus('mandatory')
bladeSysMgmtProcVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdExists.setStatus('mandatory')
bladeSysMgmtProcVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdPowerState.setStatus('mandatory')
bladeSysMgmtProcVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdName.setStatus('mandatory')
bladeSysMgmtProcVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdBuildId.setStatus('mandatory')
bladeSysMgmtProcVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSysMgmtProcVpdRevision.setStatus('mandatory')
smHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6))
smHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1), )
if mibBuilder.loadTexts: smHardwareVpdTable.setStatus('mandatory')
smHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1), ).setIndexNames((0, "BLADE-MIB", "smHardwareVpdIndex"))
if mibBuilder.loadTexts: smHardwareVpdEntry.setStatus('mandatory')
smHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdIndex.setStatus('mandatory')
smHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdBayNumber.setStatus('mandatory')
smHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdManufacturingId.setStatus('mandatory')
smHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdFruNumber.setStatus('mandatory')
smHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdHardwareRevision.setStatus('mandatory')
smHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdUuid.setStatus('mandatory')
smHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdManufDate.setStatus('mandatory')
smHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdPartNumber.setStatus('mandatory')
smHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHardwareVpdFruSerial.setStatus('mandatory')
smFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7))
smMainAppVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1), )
if mibBuilder.loadTexts: smMainAppVpdTable.setStatus('mandatory')
smMainAppVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1), ).setIndexNames((0, "BLADE-MIB", "smMainAppVpdIndex"))
if mibBuilder.loadTexts: smMainAppVpdEntry.setStatus('mandatory')
smMainAppVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdIndex.setStatus('mandatory')
smMainAppVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdId.setStatus('mandatory')
smMainAppVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdExists.setStatus('mandatory')
smMainAppVpdSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("opm", 3), ("serialCM", 4), ("copperPassThrough", 5), ("infiniband", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainAppVpdSwitchType.setStatus('mandatory')
smMainApp1VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp1VpdBuildId.setStatus('mandatory')
smMainApp1VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp1VpdBuildDate.setStatus('mandatory')
smMainApp1VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp1VpdRevisionNumber.setStatus('mandatory')
smMainApp2VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp2VpdBuildId.setStatus('mandatory')
smMainApp2VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp2VpdBuildDate.setStatus('mandatory')
smMainApp2VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMainApp2VpdRevisionNumber.setStatus('mandatory')
smBootRomVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2), )
if mibBuilder.loadTexts: smBootRomVpdTable.setStatus('mandatory')
smBootRomVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1), ).setIndexNames((0, "BLADE-MIB", "smBootRomVpdIndex"))
if mibBuilder.loadTexts: smBootRomVpdEntry.setStatus('mandatory')
smBootRomVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdIndex.setStatus('mandatory')
smBootRomVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdId.setStatus('mandatory')
smBootRomVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdExists.setStatus('mandatory')
smBootRomVpdSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("opm", 3), ("serialCM", 4), ("copperPassThrough", 5), ("infiniband", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdSwitchType.setStatus('mandatory')
smBootRomVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdBuildId.setStatus('mandatory')
smBootRomVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdBuildDate.setStatus('mandatory')
smBootRomVpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBootRomVpdRevisionNumber.setStatus('mandatory')
pmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8))
pmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1), )
if mibBuilder.loadTexts: pmHardwareVpdTable.setStatus('mandatory')
pmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1), ).setIndexNames((0, "BLADE-MIB", "pmHardwareVpdIndex"))
if mibBuilder.loadTexts: pmHardwareVpdEntry.setStatus('mandatory')
pmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdIndex.setStatus('mandatory')
pmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdBayNumber.setStatus('mandatory')
pmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdManufacturingId.setStatus('mandatory')
pmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdFruNumber.setStatus('mandatory')
pmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdHardwareRevision.setStatus('mandatory')
pmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdUuid.setStatus('mandatory')
pmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdManufDate.setStatus('mandatory')
pmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdPartNumber.setStatus('mandatory')
pmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmHardwareVpdFruSerial.setStatus('mandatory')
mtHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9))
mtHardwareVpdManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtHardwareVpdManufacturingId.setStatus('mandatory')
mtHardwareVpdFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtHardwareVpdFruNumber.setStatus('mandatory')
mtHardwareVpdHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtHardwareVpdHardwareRevision.setStatus('mandatory')
mtHardwareVpdUuid = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtHardwareVpdUuid.setStatus('mandatory')
spClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4))
spClockDateAndTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockDateAndTimeSetting.setStatus('mandatory')
spClockTimezoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockTimezoneSetting.setStatus('mandatory')
spIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5))
spTxtId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spTxtId.setStatus('mandatory')
networkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9))
networkInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1))
extEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1))
extEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceType.setStatus('mandatory')
extEthernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceHostName.setStatus('mandatory')
extEthernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceIPAddress.setStatus('mandatory')
extEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("enet10Megabit", 3), ("enet100Megabit", 4), ("autoSpeed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDataRate.setStatus('mandatory')
extEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDuplexSetting.setStatus('mandatory')
extEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceLAA.setStatus('mandatory')
extEthernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dhcpDisabled", 0), ("dhcpEnabled", 1), ("tryDhcpThenTryStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceDhcpEnabled.setStatus('mandatory')
extEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceGatewayIPAddress.setStatus('mandatory')
extEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extEthernetInterfaceBIA.setStatus('mandatory')
extEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceMTU.setStatus('mandatory')
extEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extEthernetInterfaceSubnetMask.setStatus('mandatory')
dhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16))
dhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpHostName.setStatus('mandatory')
dhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIPAddress.setStatus('mandatory')
dhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGatewayIPAddress.setStatus('mandatory')
dhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('mandatory')
dhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDomainName.setStatus('mandatory')
dhcpDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDHCPServer.setStatus('mandatory')
dhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPrimaryDNSServer.setStatus('mandatory')
dhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSecondaryDNSServer.setStatus('mandatory')
dhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpTertiaryDNSServer.setStatus('mandatory')
intEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2))
intEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intEthernetInterfaceType.setStatus('mandatory')
intEthernetInterfaceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interfaceDisabled", 0), ("interfaceEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intEthernetInterfaceEnabled.setStatus('mandatory')
intEthernetInterfaceLocalIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intEthernetInterfaceLocalIPAddress.setStatus('mandatory')
intEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("enet10Megabit", 3), ("enet100Megabit", 4), ("autoSpeed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intEthernetInterfaceDataRate.setStatus('mandatory')
intEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intEthernetInterfaceDuplexSetting.setStatus('mandatory')
intEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intEthernetInterfaceLAA.setStatus('mandatory')
intEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intEthernetInterfaceGatewayIPAddress.setStatus('mandatory')
intEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: intEthernetInterfaceBIA.setStatus('mandatory')
intEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intEthernetInterfaceMTU.setStatus('mandatory')
intEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intEthernetInterfaceSubnetMask.setStatus('mandatory')
tcpProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3))
snmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1))
snmpSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemContact.setStatus('mandatory')
snmpSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemLocation.setStatus('mandatory')
snmpSystemAgentTrapsDisable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("trapsEnabled", 0), ("trapsDisabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemAgentTrapsDisable.setStatus('mandatory')
snmpAgentCommunityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4))
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('mandatory')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1), ).setIndexNames((0, "BLADE-MIB", "snmpCommunityEntryIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('mandatory')
snmpCommunityEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityEntryIndex.setStatus('mandatory')
snmpCommunityEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityName.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress1.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress2.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress3.setStatus('mandatory')
snmpCommunityEntryCommunityViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-Traps", 1), ("write-Read-Traps", 2), ("traps-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityViewType.setStatus('mandatory')
snmpv1SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv1SystemAgentEnable.setStatus('mandatory')
snmpv3SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SystemAgentEnable.setStatus('mandatory')
snmpAgentUserProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9))
snmpUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1), )
if mibBuilder.loadTexts: snmpUserProfileTable.setStatus('mandatory')
snmpUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1), ).setIndexNames((0, "BLADE-MIB", "snmpUserProfileEntryIndex"))
if mibBuilder.loadTexts: snmpUserProfileEntry.setStatus('mandatory')
snmpUserProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserProfileEntryIndex.setStatus('mandatory')
snmpUserProfileEntryContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryContextName.setStatus('mandatory')
snmpUserProfileEntryAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryAuthProt.setStatus('mandatory')
snmpUserProfileEntryPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivProt.setStatus('mandatory')
snmpUserProfileEntryPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivPassword.setStatus('mandatory')
snmpUserProfileEntryViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-Traps", 1), ("read-Write-Traps", 2), ("traps-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryViewType.setStatus('mandatory')
snmpUserProfileEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryIpAddress.setStatus('mandatory')
dnsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2))
dnsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dnsDisabled", 0), ("dnsEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnabled.setStatus('mandatory')
dnsServerIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress1.setStatus('mandatory')
dnsServerIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress2.setStatus('mandatory')
dnsServerIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress3.setStatus('mandatory')
smtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3))
smtpServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerNameOrIPAddress.setStatus('mandatory')
attachmentsToEmailAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAttachments", 0), ("attachEventLog", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: attachmentsToEmailAlerts.setStatus('mandatory')
tcpApplicationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4))
telnetInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetInactivityTimeout.setStatus('mandatory')
commandModeInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandModeInactivityTimeout.setStatus('mandatory')
commandModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("diabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandModeEnable.setStatus('mandatory')
slpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("multicast", 0), ("broadcast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpAddrType.setStatus('mandatory')
slpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpMulticastAddr.setStatus('mandatory')
tcpPortAssignmentCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5))
tcpPortsRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortsRestoreDefault.setStatus('mandatory')
httpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPortAssignment.setStatus('mandatory')
httpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPortAssignment.setStatus('mandatory')
telnetPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortAssignment.setStatus('mandatory')
sshPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortAssignment.setStatus('mandatory')
snmpAgentPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentPortAssignment.setStatus('mandatory')
snmpTrapsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsPortAssignment.setStatus('mandatory')
ldapClientCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6))
ldapServer1NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1NameOrIPAddress.setStatus('mandatory')
ldapServer1PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1PortNumber.setStatus('mandatory')
ldapServer2NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2NameOrIPAddress.setStatus('mandatory')
ldapServer2PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2PortNumber.setStatus('mandatory')
ldapServer3NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3NameOrIPAddress.setStatus('mandatory')
ldapServer3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3PortNumber.setStatus('mandatory')
ldapRootDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRootDN.setStatus('mandatory')
ldapUserSearchBaseDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUserSearchBaseDN.setStatus('mandatory')
ldapGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupFilter.setStatus('mandatory')
ldapBindingMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("anonymousAuthentication", 0), ("clientAuthentication", 1), ("userPrincipalName", 2), ("strictUserPrincipalName", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBindingMethod.setStatus('mandatory')
ldapClientAuthenticationDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationDN.setStatus('mandatory')
ldapClientAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationPassword.setStatus('mandatory')
ldapUIDsearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUIDsearchAttribute.setStatus('mandatory')
ldapGroupSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupSearchAttribute.setStatus('mandatory')
ldapLoginPermissionAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapLoginPermissionAttribute.setStatus('mandatory')
ldapUseDNSOrPreConfiguredServers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePreConfiguredLDAPServers", 0), ("useDNSToFindLDAPServers", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUseDNSOrPreConfiguredServers.setStatus('mandatory')
ldapDomainSource = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("extractSearchDomainFromLoginID", 0), ("useOnlyConfiguredSearchDomainBelow", 1), ("tryLoginFirstThenConfiguredValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapDomainSource.setStatus('mandatory')
ldapSearchDomain = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapSearchDomain.setStatus('mandatory')
ldapServiceName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServiceName.setStatus('mandatory')
uplinkCheckConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7))
uplinkCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uplinkCheckDisabled", 0), ("uplinkCheckEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uplinkCheckEnabled.setStatus('mandatory')
uplinkCheckDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uplinkCheckDelay.setStatus('mandatory')
solConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10))
solGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1))
solEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("solDiabled", 0), ("solEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solEnable.setStatus('mandatory')
solVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solVlanId.setStatus('mandatory')
solAccumulateTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solAccumulateTimeout.setStatus('mandatory')
solCharSendThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solCharSendThreshold.setStatus('mandatory')
solRetry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solRetry.setStatus('mandatory')
solRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solRetryInterval.setStatus('mandatory')
solExitToCliKeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solExitToCliKeySeq.setStatus('mandatory')
solResetBladeKeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solResetBladeKeySeq.setStatus('mandatory')
solBladeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2))
solBladeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1), )
if mibBuilder.loadTexts: solBladeTable.setStatus('mandatory')
solBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1), ).setIndexNames((0, "BLADE-MIB", "solBladeIndex"))
if mibBuilder.loadTexts: solBladeEntry.setStatus('mandatory')
solBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeIndex.setStatus('mandatory')
solBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeName.setStatus('mandatory')
solBladeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("solBladeDiabled", 0), ("solBladeEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solBladeEnable.setStatus('mandatory')
solBladeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeIpAddr.setStatus('mandatory')
solBladeSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("solSessionNotReady", 0), ("solSessionReady", 1), ("solSessionActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeSessionStatus.setStatus('mandatory')
solBladeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupport", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solBladeCapability.setStatus('mandatory')
telcoAlarmReq = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1))
telcoAlarmSet = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telcoAlarmSet.setStatus('mandatory')
telcoAlarmAck = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telcoAlarmAck.setStatus('mandatory')
telcoAlarmClear = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telcoAlarmClear.setStatus('mandatory')
telcoOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 127))
telcoOEMs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 127, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telcoOEMs.setStatus('mandatory')
restartSPImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartSPImmediately.setStatus('mandatory')
switchOverRedundantMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchOverRedundantMM.setStatus('mandatory')
resetSPConfigAndRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSPConfigAndRestart.setStatus('mandatory')
processorBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1))
bladeMediaTrayBladeId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("managementModule", 0), ("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeMediaTrayBladeId.setStatus('mandatory')
bladeKVMBladeId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("managementModule", 0), ("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeKVMBladeId.setStatus('mandatory')
bladeBootSequenceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3), )
if mibBuilder.loadTexts: bladeBootSequenceTable.setStatus('mandatory')
bladeBootSequenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1), ).setIndexNames((0, "BLADE-MIB", "bootSequenceIndex"))
if mibBuilder.loadTexts: bladeBootSequenceEntry.setStatus('mandatory')
bootSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceIndex.setStatus('mandatory')
bootSequenceBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceBladeId.setStatus('mandatory')
bootSequenceBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceBladeExists.setStatus('mandatory')
bootSequenceBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceBladePowerState.setStatus('mandatory')
bootSequenceBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceBladeHealthState.setStatus('mandatory')
bootSequenceBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootSequenceBladeName.setStatus('mandatory')
bootSequence1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noneSpecified", 0), ("floppy", 1), ("cdrom", 2), ("hardDrive0", 3), ("hardDrive1", 4), ("hardDrive2", 5), ("hardDrive3", 6), ("networkBoot", 7), ("notAvailable", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootSequence1.setStatus('mandatory')
bootSequence2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noneSpecified", 0), ("floppy", 1), ("cdrom", 2), ("hardDrive0", 3), ("hardDrive1", 4), ("hardDrive2", 5), ("hardDrive3", 6), ("networkBoot", 7), ("notAvailable", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootSequence2.setStatus('mandatory')
bootSequence3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noneSpecified", 0), ("floppy", 1), ("cdrom", 2), ("hardDrive0", 3), ("hardDrive1", 4), ("hardDrive2", 5), ("hardDrive3", 6), ("networkBoot", 7), ("notAvailable", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootSequence3.setStatus('mandatory')
bootSequence4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noneSpecified", 0), ("floppy", 1), ("cdrom", 2), ("hardDrive0", 3), ("hardDrive1", 4), ("hardDrive2", 5), ("hardDrive3", 6), ("networkBoot", 7), ("notAvailable", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootSequence4.setStatus('mandatory')
bladeRemoteControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4))
bladeRemoteControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1), )
if mibBuilder.loadTexts: bladeRemoteControlTable.setStatus('mandatory')
bladeRemoteControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1), ).setIndexNames((0, "BLADE-MIB", "remoteControlIndex"))
if mibBuilder.loadTexts: bladeRemoteControlEntry.setStatus('mandatory')
remoteControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteControlIndex.setStatus('mandatory')
remoteControlBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteControlBladeId.setStatus('mandatory')
remoteControlBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteControlBladeExists.setStatus('mandatory')
remoteControlBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteControlBladePowerState.setStatus('mandatory')
remoteControlBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3), ("kernel", 4), ("init", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteControlBladeHealthState.setStatus('mandatory')
remoteControlBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteControlBladeName.setStatus('mandatory')
remotePowerControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remotePowerControlEnable.setStatus('mandatory')
remoteMediaTrayControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteMediaTrayControlEnable.setStatus('mandatory')
remoteKVMControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteKVMControlEnable.setStatus('mandatory')
remoteWakeOnLanControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteWakeOnLanControlEnable.setStatus('mandatory')
bladePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2))
bladePolicyPowerControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePolicyPowerControlEnable.setStatus('mandatory')
bladePolicyMediaTrayControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePolicyMediaTrayControlEnable.setStatus('mandatory')
bladePolicyKVMControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePolicyKVMControlEnable.setStatus('mandatory')
bladePolicyWakeOnLanControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePolicyWakeOnLanControlEnable.setStatus('mandatory')
bladeMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5))
bladeSystemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1), )
if mibBuilder.loadTexts: bladeSystemStatusTable.setStatus('mandatory')
bladeSystemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1), ).setIndexNames((0, "BLADE-MIB", "bladeStatusIndex"))
if mibBuilder.loadTexts: bladeSystemStatusEntry.setStatus('mandatory')
bladeStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeStatusIndex.setStatus('mandatory')
bladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeId.setStatus('mandatory')
bladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeExists.setStatus('mandatory')
bladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePowerState.setStatus('mandatory')
bladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthState.setStatus('mandatory')
bladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeName.setStatus('mandatory')
bladeRemotePowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeRemotePowerEnable.setStatus('mandatory')
bladeRemoteMediaTrayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeRemoteMediaTrayEnable.setStatus('mandatory')
bladeRemoteKVMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeRemoteKVMEnable.setStatus('mandatory')
bladeConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConnectionType.setStatus('mandatory')
bladeOwnsKVM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeOwnsKVM.setStatus('mandatory')
bladeOwnsMediaTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeOwnsMediaTray.setStatus('mandatory')
bladeRemoteWakeOnLanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeRemoteWakeOnLanEnable.setStatus('mandatory')
bladeServerExpansion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeServerExpansion.setStatus('mandatory')
bladeWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeWidth.setStatus('mandatory')
bladeSupportCapacityOnDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSupportCapacityOnDemand.setStatus('mandatory')
bladeHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2), )
if mibBuilder.loadTexts: bladeHealthSummaryTable.setStatus('mandatory')
bladeHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1), ).setIndexNames((0, "BLADE-MIB", "bladeHealthSummaryIndex"))
if mibBuilder.loadTexts: bladeHealthSummaryEntry.setStatus('mandatory')
bladeHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryIndex.setStatus('mandatory')
bladeHealthSummaryBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryBladeId.setStatus('mandatory')
bladeHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummarySeverity.setStatus('mandatory')
bladeHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeHealthSummaryDescription.setStatus('mandatory')
bladeTemperaturesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3), )
if mibBuilder.loadTexts: bladeTemperaturesTable.setStatus('mandatory')
bladeTemperaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1), ).setIndexNames((0, "BLADE-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: bladeTemperaturesEntry.setStatus('mandatory')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureIndex.setStatus('mandatory')
temperatureBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladeId.setStatus('mandatory')
temperatureBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladeExists.setStatus('mandatory')
temperatureBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladePowerState.setStatus('mandatory')
temperatureBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureBladeName.setStatus('mandatory')
temperatureCPU1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1.setStatus('mandatory')
temperatureCPU2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2.setStatus('mandatory')
temperatureCPU3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3.setStatus('mandatory')
temperatureCPU4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4.setStatus('mandatory')
temperatureDASD1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1.setStatus('mandatory')
bladeSensorTempCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensorTempCapability.setStatus('mandatory')
bladeSensor1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1Temp.setStatus('mandatory')
bladeSensor2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2Temp.setStatus('mandatory')
bladeSensor3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3Temp.setStatus('mandatory')
bladeSensor4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4Temp.setStatus('mandatory')
bladeSensor5Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5Temp.setStatus('mandatory')
bladeSensor6Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6Temp.setStatus('mandatory')
bladeTemperatureThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4), )
if mibBuilder.loadTexts: bladeTemperatureThresholdsTable.setStatus('mandatory')
bladeTemperatureThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1), ).setIndexNames((0, "BLADE-MIB", "temperatureThresholdIndex"))
if mibBuilder.loadTexts: bladeTemperatureThresholdsEntry.setStatus('mandatory')
temperatureThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdIndex.setStatus('mandatory')
temperatureThresholdBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladeId.setStatus('mandatory')
temperatureThresholdBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladeExists.setStatus('mandatory')
temperatureThresholdBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladePowerState.setStatus('mandatory')
temperatureThresholdBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureThresholdBladeName.setStatus('mandatory')
temperatureCPU1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1HardShutdown.setStatus('mandatory')
temperatureCPU1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1Warning.setStatus('mandatory')
temperatureCPU1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU1WarningReset.setStatus('mandatory')
temperatureCPU2HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2HardShutdown.setStatus('mandatory')
temperatureCPU2Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2Warning.setStatus('mandatory')
temperatureCPU2WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU2WarningReset.setStatus('mandatory')
temperatureCPU3HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3HardShutdown.setStatus('mandatory')
temperatureCPU3Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3Warning.setStatus('mandatory')
temperatureCPU3WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU3WarningReset.setStatus('mandatory')
temperatureCPU4HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4HardShutdown.setStatus('mandatory')
temperatureCPU4Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4Warning.setStatus('mandatory')
temperatureCPU4WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCPU4WarningReset.setStatus('mandatory')
temperatureDASD1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1HardShutdown.setStatus('mandatory')
temperatureDASD1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1Warning.setStatus('mandatory')
temperatureDASD1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureDASD1WarningReset.setStatus('mandatory')
bladeTempThresholdSensorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeTempThresholdSensorCapability.setStatus('mandatory')
temperatureSensor1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor1HardShutdown.setStatus('mandatory')
temperatureSensor1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor1Warning.setStatus('mandatory')
temperatureSensor1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor1WarningReset.setStatus('mandatory')
temperatureSensor2HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor2HardShutdown.setStatus('mandatory')
temperatureSensor2Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor2Warning.setStatus('mandatory')
temperatureSensor2WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor2WarningReset.setStatus('mandatory')
temperatureSensor3HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor3HardShutdown.setStatus('mandatory')
temperatureSensor3Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor3Warning.setStatus('mandatory')
temperatureSensor3WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor3WarningReset.setStatus('mandatory')
temperatureSensor4HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor4HardShutdown.setStatus('mandatory')
temperatureSensor4Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor4Warning.setStatus('mandatory')
temperatureSensor4WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor4WarningReset.setStatus('mandatory')
temperatureSensor5HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor5HardShutdown.setStatus('mandatory')
temperatureSensor5Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor5Warning.setStatus('mandatory')
temperatureSensor5WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor5WarningReset.setStatus('mandatory')
temperatureSensor6HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor6HardShutdown.setStatus('mandatory')
temperatureSensor6Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor6Warning.setStatus('mandatory')
temperatureSensor6WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensor6WarningReset.setStatus('mandatory')
bladeVoltagesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5), )
if mibBuilder.loadTexts: bladeVoltagesTable.setStatus('mandatory')
bladeVoltagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1), ).setIndexNames((0, "BLADE-MIB", "voltageIndex"))
if mibBuilder.loadTexts: bladeVoltagesEntry.setStatus('mandatory')
voltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageIndex.setStatus('mandatory')
voltageBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladeId.setStatus('mandatory')
voltageBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladeExists.setStatus('mandatory')
voltageBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladePowerState.setStatus('mandatory')
voltageBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageBladeName.setStatus('mandatory')
bladePlus5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus5Volt.setStatus('mandatory')
bladePlus3pt3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus3pt3Volt.setStatus('mandatory')
bladePlus12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus12Volt.setStatus('mandatory')
bladePlus2pt5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus2pt5Volt.setStatus('mandatory')
bladePlus1pt5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt5Volt.setStatus('mandatory')
bladePlus1pt25Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt25Volt.setStatus('mandatory')
bladeVRM1Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeVRM1Volt.setStatus('mandatory')
bladeSensorVoltCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensorVoltCapability.setStatus('mandatory')
bladeSensor1Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1Volt.setStatus('mandatory')
bladeSensor2Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2Volt.setStatus('mandatory')
bladeSensor3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3Volt.setStatus('mandatory')
bladeSensor4Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4Volt.setStatus('mandatory')
bladeSensor5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5Volt.setStatus('mandatory')
bladeSensor6Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6Volt.setStatus('mandatory')
bladeSensor7Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7Volt.setStatus('mandatory')
bladeSensor8Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8Volt.setStatus('mandatory')
bladeSensor9Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9Volt.setStatus('mandatory')
bladeSensor10Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor10Volt.setStatus('mandatory')
bladeSensor11Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor11Volt.setStatus('mandatory')
bladeSensor12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor12Volt.setStatus('mandatory')
bladeSensor13Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor13Volt.setStatus('mandatory')
bladeSensor14Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor14Volt.setStatus('mandatory')
bladeSensor15Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor15Volt.setStatus('mandatory')
bladeSensor16Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor16Volt.setStatus('mandatory')
bladeSensor17Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor17Volt.setStatus('mandatory')
bladeSensor18Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor18Volt.setStatus('mandatory')
bladeSensor19Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor19Volt.setStatus('mandatory')
bladeSensor20Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor20Volt.setStatus('mandatory')
bladeSensor21Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor21Volt.setStatus('mandatory')
bladeSensor22Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor22Volt.setStatus('mandatory')
bladeSensor23Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor23Volt.setStatus('mandatory')
bladeSensor24Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor24Volt.setStatus('mandatory')
bladeSensor25Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor25Volt.setStatus('mandatory')
bladeSensor26Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor26Volt.setStatus('mandatory')
bladeSensor27Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor27Volt.setStatus('mandatory')
bladeSensor28Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor28Volt.setStatus('mandatory')
bladeSensor29Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor29Volt.setStatus('mandatory')
bladeSensor30Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor30Volt.setStatus('mandatory')
bladeVoltageThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6), )
if mibBuilder.loadTexts: bladeVoltageThresholdsTable.setStatus('mandatory')
bladeVoltageThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1), ).setIndexNames((0, "BLADE-MIB", "voltageThresholdIndex"))
if mibBuilder.loadTexts: bladeVoltageThresholdsEntry.setStatus('mandatory')
voltageThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdIndex.setStatus('mandatory')
voltageThresholdBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdBladeId.setStatus('mandatory')
voltageThresholdBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdBladeExists.setStatus('mandatory')
voltageThresholdBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageThresholdBladePowerState.setStatus('mandatory')
voltageThresholdBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageThresholdBladeName.setStatus('mandatory')
bladePlus5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus5VoltHighWarning.setStatus('mandatory')
bladePlus5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus5VoltLowWarning.setStatus('mandatory')
bladePlus3pt3VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus3pt3VoltHighWarning.setStatus('mandatory')
bladePlus3pt3VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus3pt3VoltLowWarning.setStatus('mandatory')
bladePlus12VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus12VoltHighWarning.setStatus('mandatory')
bladePlus12VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus12VoltLowWarning.setStatus('mandatory')
bladePlus2pt5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus2pt5VoltHighWarning.setStatus('mandatory')
bladePlus2pt5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus2pt5VoltLowWarning.setStatus('mandatory')
bladePlus1pt5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt5VoltHighWarning.setStatus('mandatory')
bladePlus1pt5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt5VoltLowWarning.setStatus('mandatory')
bladePlus1pt25VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt25VoltHighWarning.setStatus('mandatory')
bladePlus1pt25VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePlus1pt25VoltLowWarning.setStatus('mandatory')
bladeVoltThresholdSensorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeVoltThresholdSensorCapability.setStatus('mandatory')
bladeSensor1VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1VoltHighWarning.setStatus('mandatory')
bladeSensor1VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor1VoltLowWarning.setStatus('mandatory')
bladeSensor2VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2VoltHighWarning.setStatus('mandatory')
bladeSensor2VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor2VoltLowWarning.setStatus('mandatory')
bladeSensor3VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3VoltHighWarning.setStatus('mandatory')
bladeSensor3VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor3VoltLowWarning.setStatus('mandatory')
bladeSensor4VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4VoltHighWarning.setStatus('mandatory')
bladeSensor4VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor4VoltLowWarning.setStatus('mandatory')
bladeSensor5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5VoltHighWarning.setStatus('mandatory')
bladeSensor5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor5VoltLowWarning.setStatus('mandatory')
bladeSensor6VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6VoltHighWarning.setStatus('mandatory')
bladeSensor6VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor6VoltLowWarning.setStatus('mandatory')
bladeSensor7VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7VoltHighWarning.setStatus('mandatory')
bladeSensor7VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor7VoltLowWarning.setStatus('mandatory')
bladeSensor8VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8VoltHighWarning.setStatus('mandatory')
bladeSensor8VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor8VoltLowWarning.setStatus('mandatory')
bladeSensor9VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9VoltHighWarning.setStatus('mandatory')
bladeSensor9VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor9VoltLowWarning.setStatus('mandatory')
bladeSensor10VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor10VoltHighWarning.setStatus('mandatory')
bladeSensor10VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor10VoltLowWarning.setStatus('mandatory')
bladeSensor11VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor11VoltHighWarning.setStatus('mandatory')
bladeSensor11VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor11VoltLowWarning.setStatus('mandatory')
bladeSensor12VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor12VoltHighWarning.setStatus('mandatory')
bladeSensor12VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor12VoltLowWarning.setStatus('mandatory')
bladeSensor13VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor13VoltHighWarning.setStatus('mandatory')
bladeSensor13VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor13VoltLowWarning.setStatus('mandatory')
bladeSensor14VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor14VoltHighWarning.setStatus('mandatory')
bladeSensor14VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 50), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor14VoltLowWarning.setStatus('mandatory')
bladeSensor15VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor15VoltHighWarning.setStatus('mandatory')
bladeSensor15VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor15VoltLowWarning.setStatus('mandatory')
bladeSensor16VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor16VoltHighWarning.setStatus('mandatory')
bladeSensor16VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor16VoltLowWarning.setStatus('mandatory')
bladeSensor17VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor17VoltHighWarning.setStatus('mandatory')
bladeSensor17VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor17VoltLowWarning.setStatus('mandatory')
bladeSensor18VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor18VoltHighWarning.setStatus('mandatory')
bladeSensor18VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor18VoltLowWarning.setStatus('mandatory')
bladeSensor19VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor19VoltHighWarning.setStatus('mandatory')
bladeSensor19VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor19VoltLowWarning.setStatus('mandatory')
bladeSensor20VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor20VoltHighWarning.setStatus('mandatory')
bladeSensor20VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor20VoltLowWarning.setStatus('mandatory')
bladeSensor21VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor21VoltHighWarning.setStatus('mandatory')
bladeSensor21VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor21VoltLowWarning.setStatus('mandatory')
bladeSensor22VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor22VoltHighWarning.setStatus('mandatory')
bladeSensor22VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor22VoltLowWarning.setStatus('mandatory')
bladeSensor23VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor23VoltHighWarning.setStatus('mandatory')
bladeSensor23VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor23VoltLowWarning.setStatus('mandatory')
bladeSensor24VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 69), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor24VoltHighWarning.setStatus('mandatory')
bladeSensor24VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 70), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor24VoltLowWarning.setStatus('mandatory')
bladeSensor25VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 71), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor25VoltHighWarning.setStatus('mandatory')
bladeSensor25VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor25VoltLowWarning.setStatus('mandatory')
bladeSensor26VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor26VoltHighWarning.setStatus('mandatory')
bladeSensor26VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 74), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor26VoltLowWarning.setStatus('mandatory')
bladeSensor27VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor27VoltHighWarning.setStatus('mandatory')
bladeSensor27VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor27VoltLowWarning.setStatus('mandatory')
bladeSensor28VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 77), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor28VoltHighWarning.setStatus('mandatory')
bladeSensor28VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 78), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor28VoltLowWarning.setStatus('mandatory')
bladeSensor29VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 79), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor29VoltHighWarning.setStatus('mandatory')
bladeSensor29VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor29VoltLowWarning.setStatus('mandatory')
bladeSensor30VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor30VoltHighWarning.setStatus('mandatory')
bladeSensor30VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 82), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSensor30VoltLowWarning.setStatus('mandatory')
bladePowerRestart = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6))
bladePowerRestartTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1), )
if mibBuilder.loadTexts: bladePowerRestartTable.setStatus('mandatory')
bladePowerRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1), ).setIndexNames((0, "BLADE-MIB", "powerRestartIndex"))
if mibBuilder.loadTexts: bladePowerRestartEntry.setStatus('mandatory')
powerRestartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartIndex.setStatus('mandatory')
powerRestartBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeId.setStatus('mandatory')
powerRestartBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeExists.setStatus('mandatory')
powerRestartBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladePowerState.setStatus('mandatory')
powerRestartBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeHealthState.setStatus('mandatory')
powerRestartBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRestartBladeName.setStatus('mandatory')
powerOnOffBlade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerOnOffBlade.setStatus('mandatory')
restartBlade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBlade.setStatus('mandatory')
restartBladeSMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeSMP.setStatus('mandatory')
restartBladeNMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeNMI.setStatus('mandatory')
restartBladeClearNVRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeClearNVRAM.setStatus('mandatory')
restartBladeInvokeDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeInvokeDiags.setStatus('mandatory')
restartBladeInvokeDiagsFromDefaultBootList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartBladeInvokeDiagsFromDefaultBootList.setStatus('mandatory')
bladeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7))
bladeConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1), )
if mibBuilder.loadTexts: bladeConfigurationTable.setStatus('mandatory')
bladeConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1), ).setIndexNames((0, "BLADE-MIB", "configurationIndex"))
if mibBuilder.loadTexts: bladeConfigurationEntry.setStatus('mandatory')
configurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationIndex.setStatus('mandatory')
configurationBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladeId.setStatus('mandatory')
configurationBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladeExists.setStatus('mandatory')
configurationBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBladePowerState.setStatus('mandatory')
configurationBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationBladeName.setStatus('mandatory')
bladePowerManagementPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2))
powerdomain1Oversubscription = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-allowed", 0), ("recoverable", 1), ("non-recoverable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerdomain1Oversubscription.setStatus('mandatory')
powerdomain2Oversubscription = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-allowed", 0), ("recoverable", 1), ("non-recoverable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerdomain2Oversubscription.setStatus('mandatory')
acousticMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acousticMode.setStatus('mandatory')
bladeIPAddrRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeIPAddrRangeStart.setStatus('mandatory')
bladeCapacityOnDemand = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9))
bladeCapacityOnDemandTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1), )
if mibBuilder.loadTexts: bladeCapacityOnDemandTable.setStatus('mandatory')
bladeCapacityOnDemandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1), ).setIndexNames((0, "BLADE-MIB", "bladeCapacityOnDemandIndex"))
if mibBuilder.loadTexts: bladeCapacityOnDemandEntry.setStatus('mandatory')
bladeCapacityOnDemandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCapacityOnDemandIndex.setStatus('mandatory')
bladeCapacityOnDemandBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeCapacityOnDemandBladeName.setStatus('mandatory')
bladeCapacityOnDemandState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("standby", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladeCapacityOnDemandState.setStatus('mandatory')
bladeBootCountPowerOnTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10))
bladeBootCountPowerOnTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1), )
if mibBuilder.loadTexts: bladeBootCountPowerOnTimeTable.setStatus('mandatory')
bladeBootCountPowerOnTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1), ).setIndexNames((0, "BLADE-MIB", "bootCountPowerOnTimeBladeIndex"))
if mibBuilder.loadTexts: bladeBootCountPowerOnTimeEntry.setStatus('mandatory')
bootCountPowerOnTimeBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootCountPowerOnTimeBladeIndex.setStatus('mandatory')
bootCountPowerOnTimeBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("blade1", 1), ("blade2", 2), ("blade3", 3), ("blade4", 4), ("blade5", 5), ("blade6", 6), ("blade7", 7), ("blade8", 8), ("blade9", 9), ("blade10", 10), ("blade11", 11), ("blade12", 12), ("blade13", 13), ("blade14", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootCountPowerOnTimeBladeId.setStatus('mandatory')
bootCountPowerOnTimeBoots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootCountPowerOnTimeBoots.setStatus('mandatory')
bootCountPowerOnTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootCountPowerOnTimeSecs.setStatus('mandatory')
switchModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3))
switchModuleControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1))
smControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1), )
if mibBuilder.loadTexts: smControlTable.setStatus('mandatory')
smControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1), ).setIndexNames((0, "BLADE-MIB", "smControlIndex"))
if mibBuilder.loadTexts: smControlEntry.setStatus('mandatory')
smControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smControlIndex.setStatus('mandatory')
switchModuleControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchModuleControlId.setStatus('mandatory')
smPostResultsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPostResultsAvailable.setStatus('mandatory')
smPostResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPostResultsValue.setStatus('mandatory')
switchModuleMemDiagEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchModuleMemDiagEnableDisable.setStatus('mandatory')
smCfgCtrlEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smCfgCtrlEnableDisable.setStatus('mandatory')
smExtEthPortsEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smExtEthPortsEnableDisable.setStatus('mandatory')
switchPingRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPingRequest.setStatus('mandatory')
smCfgCtrlOnResetEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smCfgCtrlOnResetEnableDisable.setStatus('mandatory')
smHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("warning", 2), ("bad", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHealthState.setStatus('mandatory')
smPowerRestartTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7), )
if mibBuilder.loadTexts: smPowerRestartTable.setStatus('mandatory')
smPowerRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1), ).setIndexNames((0, "BLADE-MIB", "smPowerRestartIndex"))
if mibBuilder.loadTexts: smPowerRestartEntry.setStatus('mandatory')
smPowerRestartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerRestartIndex.setStatus('mandatory')
smPowerRestartId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smPowerRestartId.setStatus('mandatory')
smSwitchExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSwitchExists.setStatus('mandatory')
smSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("fibre", 2), ("opm", 3), ("serialCM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSwitchType.setStatus('mandatory')
smMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smMACAddress.setStatus('mandatory')
smIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smIPAddress.setStatus('mandatory')
switchModulePowerOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("poweroff", 0), ("poweron", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchModulePowerOnOff.setStatus('mandatory')
smReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smReset.setStatus('mandatory')
smResetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smResetToDefault.setStatus('mandatory')
smRestartAndRunStdDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRestartAndRunStdDiag.setStatus('mandatory')
smRestartAndRunExtDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRestartAndRunExtDiag.setStatus('mandatory')
smRestartAndRunFullDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smRestartAndRunFullDiag.setStatus('mandatory')
switchModuleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2))
switchMgmtNetworkCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1))
switchCurrentNwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1))
smCurrentIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1), )
if mibBuilder.loadTexts: smCurrentIPInfoTable.setStatus('mandatory')
smCurrentIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1), ).setIndexNames((0, "BLADE-MIB", "smCurrentIPInfoIndex"))
if mibBuilder.loadTexts: smCurrentIPInfoEntry.setStatus('mandatory')
smCurrentIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoIndex.setStatus('mandatory')
smCurrentIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoId.setStatus('mandatory')
smCurrentIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoExists.setStatus('mandatory')
smCurrentIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPInfoPowerState.setStatus('mandatory')
smCurrentIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPAddr.setStatus('mandatory')
smCurrentSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentSubnetMask.setStatus('mandatory')
smCurrentGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentGateway.setStatus('mandatory')
smCurrentIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("static", 1), ("dhcp", 2), ("bootp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCurrentIPConfigMethod.setStatus('mandatory')
switchNewNwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2))
smNewIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1), )
if mibBuilder.loadTexts: smNewIPInfoTable.setStatus('mandatory')
smNewIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1), ).setIndexNames((0, "BLADE-MIB", "smNewIPInfoIndex"))
if mibBuilder.loadTexts: smNewIPInfoEntry.setStatus('mandatory')
smNewIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoIndex.setStatus('mandatory')
smNewIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module1", 1), ("module2", 2), ("module3", 3), ("module4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoId.setStatus('mandatory')
smNewIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoExists.setStatus('mandatory')
smNewIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smNewIPInfoPowerState.setStatus('mandatory')
smNewIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewIPAddr.setStatus('mandatory')
smNewSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewSubnetMask.setStatus('mandatory')
smNewGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewGateway.setStatus('mandatory')
smNewIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("static", 1), ("dhcp", 2), ("bootp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewIPConfigMethod.setStatus('mandatory')
smNewIPConfigEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smNewIPConfigEnableDisable.setStatus('mandatory')
chassisTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4))
chassisResponseVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisResponseVersion.setStatus('mandatory')
chassisFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("serverBlade", 1), ("rackOrStandAlone", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFlags.setStatus('mandatory')
chassisName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisName.setStatus('mandatory')
chassisNoOfPBsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfPBsSupported.setStatus('mandatory')
chassisNoOfSMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfSMsSupported.setStatus('mandatory')
chassisNoOfMMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfMMsSupported.setStatus('mandatory')
chassisNoOfPMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfPMsSupported.setStatus('mandatory')
chassisNoOfMTsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfMTsSupported.setStatus('mandatory')
chassisNoOfBlowersSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNoOfBlowersSupported.setStatus('mandatory')
chassisPBsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPBsInstalled.setStatus('mandatory')
chassisSMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSMsInstalled.setStatus('mandatory')
chassisMMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMMsInstalled.setStatus('mandatory')
chassisPMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPMsInstalled.setStatus('mandatory')
chassisMTInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMTInstalled.setStatus('mandatory')
chassisBlowersInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBlowersInstalled.setStatus('mandatory')
chassisActiveMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisActiveMM.setStatus('mandatory')
chassisKVMOwner = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisKVMOwner.setStatus('mandatory')
chassisMediaTrayOwner = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMediaTrayOwner.setStatus('mandatory')
managementModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5))
mmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1), )
if mibBuilder.loadTexts: mmStatusTable.setStatus('mandatory')
mmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1), ).setIndexNames((0, "BLADE-MIB", "mmStatusIndex"))
if mibBuilder.loadTexts: mmStatusEntry.setStatus('mandatory')
mmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmStatusIndex.setStatus('mandatory')
mmPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPresent.setStatus('mandatory')
mmExtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmExtIpAddress.setStatus('mandatory')
mmPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmPrimary.setStatus('mandatory')
firmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9))
firmwareUpdateTarget = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 255))).clone(namedValues=NamedValues(("managementModule", 0), ("switchModule1", 2), ("switchModule2", 3), ("switchModule3", 4), ("switchModule4", 5), ("blade1", 10), ("blade2", 11), ("blade3", 12), ("blade4", 13), ("blade5", 14), ("blade6", 15), ("blade7", 16), ("blade8", 17), ("blade9", 18), ("blade10", 19), ("blade11", 20), ("blade12", 21), ("blade13", 22), ("blade14", 23), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTarget.setStatus('mandatory')
firmwareUpdateTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTftpServer.setStatus('mandatory')
firmwareUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateFileName.setStatus('mandatory')
firmwareUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateStart.setStatus('mandatory')
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('mandatory')
ipmiManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 20))
ipmiEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipmiDisabled", 0), ("ipmiEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmiEnabled.setStatus('mandatory')
mibBuilder.exportSymbols("BLADE-MIB", systemPowerOff=systemPowerOff, critPower=critPower, mmBootROMVpdRevisonNumber=mmBootROMVpdRevisonNumber, solBladeIpAddr=solBladeIpAddr, telcoManagement=telcoManagement, bladeSensor19VoltHighWarning=bladeSensor19VoltHighWarning, smHardwareVpdManufacturingId=smHardwareVpdManufacturingId, mtHardwareVpdUuid=mtHardwareVpdUuid, bladeCenterFruSerial=bladeCenterFruSerial, bladeRemoteControlTable=bladeRemoteControlTable, powerOnOffBlade=powerOnOffBlade, ibm=ibm, bistMediaTrayInstalled=bistMediaTrayInstalled, bladeRemoteWakeOnLanEnable=bladeRemoteWakeOnLanEnable, snmpUserProfileEntryAuthProt=snmpUserProfileEntryAuthProt, bladeHardwareVpdPartNumber=bladeHardwareVpdPartNumber, remoteWakeOnLanControlEnable=remoteWakeOnLanControlEnable, smHardwareVpdFruSerial=smHardwareVpdFruSerial, remoteControlBladeExists=remoteControlBladeExists, smNewIPInfoIndex=smNewIPInfoIndex, mmMainApplVpdFilename=mmMainApplVpdFilename, ambientTemp=ambientTemp, bladeSensor10Volt=bladeSensor10Volt, warnMediaTrayKVMSwitch=warnMediaTrayKVMSwitch, remoteAccessIdsEntry=remoteAccessIdsEntry, temperatureSensor4WarningReset=temperatureSensor4WarningReset, restartBladeSMP=restartBladeSMP, switchModuleControl=switchModuleControl, ledSMIndex=ledSMIndex, remoteAlertIds=remoteAlertIds, bladeSensor1Temp=bladeSensor1Temp, snmpAgentUserProfileConfig=snmpAgentUserProfileConfig, bladeSensor25VoltHighWarning=bladeSensor25VoltHighWarning, bladeBiosVpdBuildId=bladeBiosVpdBuildId, snmpUserProfileEntryIpAddress=snmpUserProfileEntryIpAddress, bladeSensor3Volt=bladeSensor3Volt, inventoryManagementVpdTable=inventoryManagementVpdTable, firmwareUpdate=firmwareUpdate, solGlobalConfig=solGlobalConfig, snmpCommunityEntryCommunityName=snmpCommunityEntryCommunityName, pd2BayNumber=pd2BayNumber, ldapClientAuthenticationPassword=ldapClientAuthenticationPassword, bladeDaughterVpdFruNumber=bladeDaughterVpdFruNumber, ldapUseDNSOrPreConfiguredServers=ldapUseDNSOrPreConfiguredServers, chassisPMsInstalled=chassisPMsInstalled, criticalityAssertionMode=criticalityAssertionMode, smMainApp1VpdBuildDate=smMainApp1VpdBuildDate, snmpUserProfileEntryPrivPassword=snmpUserProfileEntryPrivPassword, bladeHardwareVpdManufDate=bladeHardwareVpdManufDate, systemHealthSummaryIndex=systemHealthSummaryIndex, bladeSensor5VoltHighWarning=bladeSensor5VoltHighWarning, bladeDaughterVpdManufacturingId=bladeDaughterVpdManufacturingId, bladeSensor9VoltLowWarning=bladeSensor9VoltLowWarning, smBootRomVpdTable=smBootRomVpdTable, telcoSystemHealthSummaryDescription=telcoSystemHealthSummaryDescription, bladeCenterVpdMachineModel=bladeCenterVpdMachineModel, bladeHealthSummaryEntry=bladeHealthSummaryEntry, bladeVoltageThresholdsEntry=bladeVoltageThresholdsEntry, bladeSensor5VoltLowWarning=bladeSensor5VoltLowWarning, bladeBiosVpdRevision=bladeBiosVpdRevision, solBladeEntry=solBladeEntry, bladeConfigurationEntry=bladeConfigurationEntry, rbsBladeConfiguration=rbsBladeConfiguration, bladeServerExpansion=bladeServerExpansion, snmpCommunityEntryIndex=snmpCommunityEntryIndex, smMainApp2VpdBuildDate=smMainApp2VpdBuildDate, voltageThresholdEntryCurrentValue=voltageThresholdEntryCurrentValue, ldapClientCfg=ldapClientCfg, bladeRemoteMediaTrayEnable=bladeRemoteMediaTrayEnable, bladeSensorVoltCapability=bladeSensorVoltCapability, firmwareUpdateTftpServer=firmwareUpdateTftpServer, extEthernetInterfaceDataRate=extEthernetInterfaceDataRate, ualAdapterAdvancedConfig=ualAdapterAdvancedConfig, smCurrentSubnetMask=smCurrentSubnetMask, rbsChassisConfiguration=rbsChassisConfiguration, temperatureCPU4HardShutdown=temperatureCPU4HardShutdown, bladeHealthState=bladeHealthState, pmHardwareVpdFruSerial=pmHardwareVpdFruSerial, tcpPortAssignmentCfg=tcpPortAssignmentCfg, criticalLED=criticalLED, powerRestartBladeHealthState=powerRestartBladeHealthState, temperatureCPU2Warning=temperatureCPU2Warning, temperatureSensor2Warning=temperatureSensor2Warning, bladePlus5VoltLowWarning=bladePlus5VoltLowWarning, bladeSensor1Volt=bladeSensor1Volt, switchMgmtNetworkCfg=switchMgmtNetworkCfg, bladeSensor27VoltHighWarning=bladeSensor27VoltHighWarning, powerDomain2=powerDomain2, bladeSensor16Volt=bladeSensor16Volt, bladeMediaTrayBladeId=bladeMediaTrayBladeId, spStatus=spStatus, telcoSystemHealthSummaryIndex=telcoSystemHealthSummaryIndex, bladeSensor16VoltHighWarning=bladeSensor16VoltHighWarning, remoteControlBladePowerState=remoteControlBladePowerState, remoteAlertIdsTable=remoteAlertIdsTable, bladePlus12VoltHighWarning=bladePlus12VoltHighWarning, managementModule=managementModule, majorLED=majorLED, remoteAccessRBSroleTable=remoteAccessRBSroleTable, smHardwareVpdIndex=smHardwareVpdIndex, smBootRomVpdEntry=smBootRomVpdEntry, bladeSensor4Temp=bladeSensor4Temp, bladeCenter=bladeCenter, rbsBlade1=rbsBlade1, solBladeTable=solBladeTable, componentLevelVpdHardwareRevision=componentLevelVpdHardwareRevision, systemHealthStat=systemHealthStat, solBladeName=solBladeName, systemErrorLED=systemErrorLED, bladePlus1pt5VoltLowWarning=bladePlus1pt5VoltLowWarning, mmBootROMVpdIndex=mmBootROMVpdIndex, bladeSensor8Volt=bladeSensor8Volt, solBladeEnable=solBladeEnable, firmwareUpdateFileName=firmwareUpdateFileName, bladeDiagsVpdIndex=bladeDiagsVpdIndex, temperatureBladeExists=temperatureBladeExists, bladeId=bladeId, allowModemLogin=allowModemLogin, bladeHardwareVpdFruNumber=bladeHardwareVpdFruNumber, mmRemoteControlVpdFilename=mmRemoteControlVpdFilename, smBootRomVpdIndex=smBootRomVpdIndex, bladeWidth=bladeWidth, bladeConfigurationTable=bladeConfigurationTable, bladeLEDs=bladeLEDs, remoteAlertIdEntryIndex=remoteAlertIdEntryIndex, bladeSensor13VoltHighWarning=bladeSensor13VoltHighWarning, remoteAlertIdEntrySelectiveAlert=remoteAlertIdEntrySelectiveAlert, dnsServerIPAddress3=dnsServerIPAddress3, smPostResultsAvailable=smPostResultsAvailable, temperatureDASD1HardShutdown=temperatureDASD1HardShutdown, minorLED=minorLED, ledBladeSystemError=ledBladeSystemError, bladeHardwareVpdSerialNumber=bladeHardwareVpdSerialNumber, bistUSBController=bistUSBController, remoteAccessIds=remoteAccessIds, bladeDaughterCard2MACAddress4Vpd=bladeDaughterCard2MACAddress4Vpd, bladeCenterFruNumber=bladeCenterFruNumber, dhcpIPAddress=dhcpIPAddress, bladeHealthSummaryBladeId=bladeHealthSummaryBladeId, rbsSwitchModuleAdministration=rbsSwitchModuleAdministration, bistInternalPCIBus=bistInternalPCIBus, switchNewNwCfg=switchNewNwCfg, smNewIPInfoExists=smNewIPInfoExists, bladeDaughterCard1MACAddress4Vpd=bladeDaughterCard1MACAddress4Vpd, bladeBiosVPDEntry=bladeBiosVPDEntry, solConfiguration=solConfiguration, uplinkCheckEnabled=uplinkCheckEnabled, bladeSensor9Volt=bladeSensor9Volt, rbsBlade9=rbsBlade9, bladeSensor27VoltLowWarning=bladeSensor27VoltLowWarning, bladeHealthSummaryTable=bladeHealthSummaryTable, systemHealthSummarySeverity=systemHealthSummarySeverity, voltageBladeName=voltageBladeName, mmPrimary=mmPrimary, bladeMACAddressVpdIndex=bladeMACAddressVpdIndex, bladeHardwareVpdHardwareRevision=bladeHardwareVpdHardwareRevision, snmpUserProfileEntryViewType=snmpUserProfileEntryViewType, mtHardwareVpd=mtHardwareVpd, rbsBlade13=rbsBlade13, bladeRemotePowerEnable=bladeRemotePowerEnable, bladeHealthSummarySeverity=bladeHealthSummarySeverity, ledBladeKVM=ledBladeKVM, bistExternalI2CDevices=bistExternalI2CDevices, voltageBladeExists=voltageBladeExists, temperatureSensor2WarningReset=temperatureSensor2WarningReset, bladeHardwareVpdUuid=bladeHardwareVpdUuid, bladeSensor6VoltHighWarning=bladeSensor6VoltHighWarning, httpsPortAssignment=httpsPortAssignment, bladeTempThresholdSensorCapability=bladeTempThresholdSensorCapability, intEthernetInterfaceLocalIPAddress=intEthernetInterfaceLocalIPAddress, bladeDiagsVpdName=bladeDiagsVpdName, temperatureSensor6HardShutdown=temperatureSensor6HardShutdown, bladeDaughterCard2MACAddress2Vpd=bladeDaughterCard2MACAddress2Vpd, remoteAccessIdEntryPassword=remoteAccessIdEntryPassword, fuelGaugeRemainingPower=fuelGaugeRemainingPower, voltage=voltage, cpuXTemp=cpuXTemp, mmToUSBIntfVpdFilename=mmToUSBIntfVpdFilename, solExitToCliKeySeq=solExitToCliKeySeq, componentLevelActivityVpdBayNumber=componentLevelActivityVpdBayNumber, temperatureThresholdBladePowerState=temperatureThresholdBladePowerState, restartBlade=restartBlade, bistNvram=bistNvram, snmpAgentPortAssignment=snmpAgentPortAssignment, componentLevelActivityVpdSerialNumber=componentLevelActivityVpdSerialNumber, planarVolt=planarVolt, ualServerPowerAccess=ualServerPowerAccess, bladeDaughterVpdPartNumber=bladeDaughterVpdPartNumber, bladeDaughterCard2MACAddress1Vpd=bladeDaughterCard2MACAddress1Vpd, powerModuleHealthEntry=powerModuleHealthEntry, powerModuleState=powerModuleState, telcoSystemHealthSummaryEventKeyID=telcoSystemHealthSummaryEventKeyID, extEthernetInterfaceIPAddress=extEthernetInterfaceIPAddress, bladeCapacityOnDemandEntry=bladeCapacityOnDemandEntry, bladeHardwareVpdTable=bladeHardwareVpdTable, temperatureCPU3=temperatureCPU3, bladeHealthSummaryDescription=bladeHealthSummaryDescription, ldapServiceName=ldapServiceName, mmRemoteControlVpdName=mmRemoteControlVpdName, bladeSensor28VoltHighWarning=bladeSensor28VoltHighWarning, fuelGaugeInformation=fuelGaugeInformation, bladeDiagsVpdDate=bladeDiagsVpdDate, networkConfiguration=networkConfiguration, componentLevelVpdIndex=componentLevelVpdIndex, bladeSensor8VoltHighWarning=bladeSensor8VoltHighWarning, configurationBladeName=configurationBladeName, bistSdram=bistSdram, voltageThresholdEntryWarningHighValue=voltageThresholdEntryWarningHighValue, bladeSensor12Volt=bladeSensor12Volt, telnetInactivityTimeout=telnetInactivityTimeout, bladePolicyWakeOnLanControlEnable=bladePolicyWakeOnLanControlEnable, bladeSupportCapacityOnDemand=bladeSupportCapacityOnDemand, bladeDiagsVpdBuildId=bladeDiagsVpdBuildId, remoteAccessIdsTable=remoteAccessIdsTable, mmBootROMVpdFilename=mmBootROMVpdFilename, bootSequence4=bootSequence4, plus5Volt=plus5Volt, plus3Pt3Volt=plus3Pt3Volt, bladeBiosVpdDate=bladeBiosVpdDate, blowers=blowers, bladeHardwareVpdManufacturingId=bladeHardwareVpdManufacturingId, mmRemoteControlVpdBuildId=mmRemoteControlVpdBuildId, rbsChassisAdministration=rbsChassisAdministration, rbsChassisLogManagement=rbsChassisLogManagement, plus2Pt5Volt=plus2Pt5Volt, remoteAlertsSystem=remoteAlertsSystem, chassisNoOfPBsSupported=chassisNoOfPBsSupported, intEthernetInterfaceSubnetMask=intEthernetInterfaceSubnetMask, componentLevelActivityVpdAction=componentLevelActivityVpdAction, bladePlus5VoltHighWarning=bladePlus5VoltHighWarning, smHardwareVpdManufDate=smHardwareVpdManufDate, bistBladesInstalled=bistBladesInstalled, componentLevelVpdMachineType=componentLevelVpdMachineType, bootSequenceBladeHealthState=bootSequenceBladeHealthState, bladeSysMgmtProcVpdPowerState=bladeSysMgmtProcVpdPowerState, smCurrentIPInfoIndex=smCurrentIPInfoIndex, chassisMMsInstalled=chassisMMsInstalled, bootSequence1=bootSequence1, smBootRomVpdBuildId=smBootRomVpdBuildId, ldapRootDN=ldapRootDN, bladeSystemStatusTable=bladeSystemStatusTable, temperatureThresholdIndex=temperatureThresholdIndex, bladeFirmwareVpd=bladeFirmwareVpd, intEthernetInterfaceLAA=intEthernetInterfaceLAA, smPowerRestartTable=smPowerRestartTable, bladeSensor21VoltHighWarning=bladeSensor21VoltHighWarning, chassisNoOfBlowersSupported=chassisNoOfBlowersSupported, bladePlus2pt5VoltLowWarning=bladePlus2pt5VoltLowWarning, bladeSensor18VoltHighWarning=bladeSensor18VoltHighWarning, ldapServer3PortNumber=ldapServer3PortNumber, solCharSendThreshold=solCharSendThreshold, bladeSensor21VoltLowWarning=bladeSensor21VoltLowWarning, ualConsoleAccess=ualConsoleAccess, smIPAddress=smIPAddress)
mibBuilder.exportSymbols("BLADE-MIB", clearEventLog=clearEventLog, mmToUSBIntfVpdBuildDate=mmToUSBIntfVpdBuildDate, chassisTopology=chassisTopology, componentLevelActivityVpdManufacturingId=componentLevelActivityVpdManufacturingId, ualAdapterBasicConfig=ualAdapterBasicConfig, bladeRemoteKVMEnable=bladeRemoteKVMEnable, ualAdapterNetworkAndSecurityConfig=ualAdapterNetworkAndSecurityConfig, mmBootROMVpdEntry=mmBootROMVpdEntry, voltageThresholdsTable=voltageThresholdsTable, extEthernetInterfaceDhcpEnabled=extEthernetInterfaceDhcpEnabled, mmToUSBIntfVpdBuildId=mmToUSBIntfVpdBuildId, bladeSensor14VoltLowWarning=bladeSensor14VoltLowWarning, bistEthernetPort1=bistEthernetPort1, warnVoltage=warnVoltage, smReset=smReset, inventoryManagementVpdEntry=inventoryManagementVpdEntry, tcpApplicationConfig=tcpApplicationConfig, sshPortAssignment=sshPortAssignment, rbsSwitch1=rbsSwitch1, smControlTable=smControlTable, critHardDrive=critHardDrive, ledBladeExists=ledBladeExists, systemHealthSummaryEntry=systemHealthSummaryEntry, bladeExists=bladeExists, mmExtIpAddress=mmExtIpAddress, ldapUIDsearchAttribute=ldapUIDsearchAttribute, fuelGaugePowerDomainNumber=fuelGaugePowerDomainNumber, temperatureThresholdBladeExists=temperatureThresholdBladeExists, bladeSensor28VoltLowWarning=bladeSensor28VoltLowWarning, vpdInformation=vpdInformation, snmpSystemContact=snmpSystemContact, mmPresent=mmPresent, pd2ModuleCPUDutyCycles=pd2ModuleCPUDutyCycles, bladePlus2pt5VoltHighWarning=bladePlus2pt5VoltHighWarning, voltageThresholdsEntry=voltageThresholdsEntry, smCfgCtrlOnResetEnableDisable=smCfgCtrlOnResetEnableDisable, rbsBladeOperator=rbsBladeOperator, inventoryManagementActivityVpdEntry=inventoryManagementActivityVpdEntry, temperatureBladeName=temperatureBladeName, critVolt=critVolt, smNewIPInfoTable=smNewIPInfoTable, slpAddrType=slpAddrType, remoteAlertsNonCrit=remoteAlertsNonCrit, rbsSwitchModuleOperator=rbsSwitchModuleOperator, chassisActiveMM=chassisActiveMM, bistSwitchModulesCommunicating=bistSwitchModulesCommunicating, bladeSensor23VoltHighWarning=bladeSensor23VoltHighWarning, pmHardwareVpdManufacturingId=pmHardwareVpdManufacturingId, commandModeInactivityTimeout=commandModeInactivityTimeout, temperatureSensor5HardShutdown=temperatureSensor5HardShutdown, bladePolicy=bladePolicy, bladeRemoteControlEntry=bladeRemoteControlEntry, mmRemoteControlVpdEntry=mmRemoteControlVpdEntry, intEthernetInterfaceMTU=intEthernetInterfaceMTU, critMultiBlower=critMultiBlower, remoteAlertRetryCount=remoteAlertRetryCount, telcoAlarmReq=telcoAlarmReq, bootSequence2=bootSequence2, bladeSensor26Volt=bladeSensor26Volt, pd1ModuleState=pd1ModuleState, intEthernetInterfaceType=intEthernetInterfaceType, telnetPortAssignment=telnetPortAssignment, bladeSensor30VoltHighWarning=bladeSensor30VoltHighWarning, systemHealthSummaryTable=systemHealthSummaryTable, chassisNoOfSMsSupported=chassisNoOfSMsSupported, powerDomain1=powerDomain1, pd1ModuleStatus=pd1ModuleStatus, chassisFlags=chassisFlags, intEthernetInterfaceDataRate=intEthernetInterfaceDataRate, bladePlus1pt25Volt=bladePlus1pt25Volt, bladeSensor22Volt=bladeSensor22Volt, ledBladeInformation=ledBladeInformation, fuelGaugeStatus=fuelGaugeStatus, bladeMACAddressVpdEntry=bladeMACAddressVpdEntry, systemHealth=systemHealth, bladeSensor15VoltLowWarning=bladeSensor15VoltLowWarning, snmpv3SystemAgentEnable=snmpv3SystemAgentEnable, voltageThresholdBladeName=voltageThresholdBladeName, informationLED=informationLED, bladePlus1pt25VoltHighWarning=bladePlus1pt25VoltHighWarning, systemPowerManagement=systemPowerManagement, solBladeCapability=solBladeCapability, powerdomain1Oversubscription=powerdomain1Oversubscription, temperatureCPU3Warning=temperatureCPU3Warning, fuelGaugeTotalPower=fuelGaugeTotalPower, bladeSensor23VoltLowWarning=bladeSensor23VoltLowWarning, bladeDiagsVPDTable=bladeDiagsVPDTable, ldapServer1PortNumber=ldapServer1PortNumber, bootCountPowerOnTimeBoots=bootCountPowerOnTimeBoots, scopeIndex=scopeIndex, spClockTimezoneSetting=spClockTimezoneSetting, ledBladeHealthState=ledBladeHealthState, mmPS2toUSBConvVpdFilename=mmPS2toUSBConvVpdFilename, powerRestartBladeId=powerRestartBladeId, networkInterfaces=networkInterfaces, bladeSensor7VoltLowWarning=bladeSensor7VoltLowWarning, frontPanelTemp=frontPanelTemp, httpPortAssignment=httpPortAssignment, temperatureCPU1HardShutdown=temperatureCPU1HardShutdown, netfinitySupportProcessorAgent=netfinitySupportProcessorAgent, bistSecondaryMainAppFlashImage=bistSecondaryMainAppFlashImage, bladeSensor6VoltLowWarning=bladeSensor6VoltLowWarning, bladeSensor11VoltLowWarning=bladeSensor11VoltLowWarning, bladeSysMgmtProcVpdName=bladeSysMgmtProcVpdName, mmTemp=mmTemp, smMainAppVpdId=smMainAppVpdId, intEthernetInterfaceGatewayIPAddress=intEthernetInterfaceGatewayIPAddress, smPowerRestartIndex=smPowerRestartIndex, pmHardwareVpdIndex=pmHardwareVpdIndex, remoteAlertIdsEntry=remoteAlertIdsEntry, mmRemoteControlVpdTable=mmRemoteControlVpdTable, pd1ModuleThrottle=pd1ModuleThrottle, warnSingleBlower=warnSingleBlower, componentLevelVpdManufacturingId=componentLevelVpdManufacturingId, temperatureSensor6Warning=temperatureSensor6Warning, bladeSensor20VoltHighWarning=bladeSensor20VoltHighWarning, rbsBladeRemotePresence=rbsBladeRemotePresence, bladeMonitors=bladeMonitors, bladeSensor6Temp=bladeSensor6Temp, leds=leds, bladeSensor20VoltLowWarning=bladeSensor20VoltLowWarning, rbsSwitchModuleConfiguration=rbsSwitchModuleConfiguration, telcoAlarmSet=telcoAlarmSet, bladeSensor3Temp=bladeSensor3Temp, powerModuleDetails=powerModuleDetails, powerDomain2Table=powerDomain2Table, remoteAlertIdEntryStatus=remoteAlertIdEntryStatus, bistSwitchModulesInstalled=bistSwitchModulesInstalled, solResetBladeKeySeq=solResetBladeKeySeq, remoteControlBladeId=remoteControlBladeId, ledBladeIdentity=ledBladeIdentity, bladeVoltageThresholdsTable=bladeVoltageThresholdsTable, bladeDaughterVpdMachineType=bladeDaughterVpdMachineType, smNewIPConfigEnableDisable=smNewIPConfigEnableDisable, mmHardwareVpdManufDate=mmHardwareVpdManufDate, bladeDaughterCard1MACAddress2Vpd=bladeDaughterCard1MACAddress2Vpd, dhcpEthernetInterface=dhcpEthernetInterface, bladePlus5Volt=bladePlus5Volt, bladeSensor4Volt=bladeSensor4Volt, bladeBiosVpdExists=bladeBiosVpdExists, mtHardwareVpdHardwareRevision=mtHardwareVpdHardwareRevision, componentLevelVpdFruNumber=componentLevelVpdFruNumber, bladeSensor2VoltHighWarning=bladeSensor2VoltHighWarning, bladeDiagsVpdPowerState=bladeDiagsVpdPowerState, voltageBladeId=voltageBladeId, remoteAccessIdEntryEncodedLoginPw=remoteAccessIdEntryEncodedLoginPw, smHardwareVpdBayNumber=smHardwareVpdBayNumber, bladeVoltagesTable=bladeVoltagesTable, smSwitchExists=smSwitchExists, bladeSysMgmtProcVPDEntry=bladeSysMgmtProcVPDEntry, bladeMACAddress2Vpd=bladeMACAddress2Vpd, bladeConfiguration=bladeConfiguration, smBootRomVpdId=smBootRomVpdId, pd2Index=pd2Index, powerModuleHealth=powerModuleHealth, systemPowerOn=systemPowerOn, voltageThresholds=voltageThresholds, rbsOperator=rbsOperator, pd2ModuleName=pd2ModuleName, chassisPBsInstalled=chassisPBsInstalled, smRestartAndRunExtDiag=smRestartAndRunExtDiag, chassisBlowersInstalled=chassisBlowersInstalled, telcoSystemHealthSummaryEventName=telcoSystemHealthSummaryEventName, scopeId=scopeId, rbsBlade11=rbsBlade11, bladeSensor3VoltHighWarning=bladeSensor3VoltHighWarning, switchModule=switchModule, mmHardwareVpdManufacturingId=mmHardwareVpdManufacturingId, smHardwareVpdPartNumber=smHardwareVpdPartNumber, smFirmwareVpd=smFirmwareVpd, smCurrentIPInfoPowerState=smCurrentIPInfoPowerState, planarTemp=planarTemp, smMainAppVpdIndex=smMainAppVpdIndex, temperatureDASD1=temperatureDASD1, bladeSensor1VoltLowWarning=bladeSensor1VoltLowWarning, mmHardwareVpdTable=mmHardwareVpdTable, smNewIPInfoPowerState=smNewIPInfoPowerState, powerRestartBladeName=powerRestartBladeName, bladeCapacityOnDemandIndex=bladeCapacityOnDemandIndex, monitorLogStateEvents=monitorLogStateEvents, dhcpDomainName=dhcpDomainName, solRetryInterval=solRetryInterval, bootCountPowerOnTimeBladeIndex=bootCountPowerOnTimeBladeIndex, switchModulePowerOnOff=switchModulePowerOnOff, mmStatusIndex=mmStatusIndex, bistPrimaryMainAppFlashImage=bistPrimaryMainAppFlashImage, networkChangeNotification=networkChangeNotification, bladeCenterManufDate=bladeCenterManufDate, pmHardwareVpdHardwareRevision=pmHardwareVpdHardwareRevision, configurationIndex=configurationIndex, rbsBlade3=rbsBlade3, intEthernetInterfaceDuplexSetting=intEthernetInterfaceDuplexSetting, remoteAccessUserAuthorityLevelEntry=remoteAccessUserAuthorityLevelEntry, bladeCenterVpdMachineType=bladeCenterVpdMachineType, mmPS2toUSBConvVpdBuildDate=mmPS2toUSBConvVpdBuildDate, bistInternalEthernetSwitch=bistInternalEthernetSwitch, ldapServer2PortNumber=ldapServer2PortNumber, switchModuleMemDiagEnableDisable=switchModuleMemDiagEnableDisable, smNewIPInfoEntry=smNewIPInfoEntry, mtHardwareVpdManufacturingId=mtHardwareVpdManufacturingId, readEventLogEntry=readEventLogEntry, tcpPortsRestoreDefault=tcpPortsRestoreDefault, bootSequenceBladeName=bootSequenceBladeName, configurationBladePowerState=configurationBladePowerState, pmHardwareVpdUuid=pmHardwareVpdUuid, bladeName=bladeName, mmMainApplVpdName=mmMainApplVpdName, bladeCapacityOnDemandBladeName=bladeCapacityOnDemandBladeName, temperatureIndex=temperatureIndex, smCurrentIPInfoExists=smCurrentIPInfoExists, bladeSensor30Volt=bladeSensor30Volt, fuelGauge=fuelGauge, bladeSensor4VoltLowWarning=bladeSensor4VoltLowWarning, telcoPanelLEDs=telcoPanelLEDs, readEventLogIndex=readEventLogIndex, bladeCapacityOnDemandTable=bladeCapacityOnDemandTable, bladeSensor26VoltLowWarning=bladeSensor26VoltLowWarning, voltageThresholdBladeExists=voltageThresholdBladeExists, smCurrentIPInfoId=smCurrentIPInfoId, critVRM=critVRM, mmHardwareVpdEntry=mmHardwareVpdEntry, dnsServerIPAddress1=dnsServerIPAddress1, smCurrentGateway=smCurrentGateway, attachmentsToEmailAlerts=attachmentsToEmailAlerts, chassisNoOfPMsSupported=chassisNoOfPMsSupported, pd2ModuleAllocatedPowerMin=pd2ModuleAllocatedPowerMin, readEventLogString=readEventLogString, componentLevelVpdBayNumber=componentLevelVpdBayNumber, temperatureBladeId=temperatureBladeId, smPostResultsValue=smPostResultsValue, dhcpDHCPServer=dhcpDHCPServer, fuelGaugeSecondPowerModule=fuelGaugeSecondPowerModule, ledBladeIndex=ledBladeIndex, bladeSensor8VoltLowWarning=bladeSensor8VoltLowWarning, snmpCommunityTable=snmpCommunityTable, bladeSensorTempCapability=bladeSensorTempCapability, bladeSensor4VoltHighWarning=bladeSensor4VoltHighWarning, firmwareUpdateTarget=firmwareUpdateTarget, blower1speed=blower1speed, voltageThresholdEntryWarningResetLowValue=voltageThresholdEntryWarningResetLowValue, smNewIPInfoId=smNewIPInfoId, remoteAccessRBSroleEntry=remoteAccessRBSroleEntry, remoteControlBladeHealthState=remoteControlBladeHealthState, bladeDiagsVpdId=bladeDiagsVpdId, smLEDsEntry=smLEDsEntry, intEthernetInterface=intEthernetInterface, bladeCenterSnmpMIB=bladeCenterSnmpMIB, rbsSwitch4=rbsSwitch4, remoteKVMControlEnable=remoteKVMControlEnable, ldapServer3NameOrIPAddress=ldapServer3NameOrIPAddress, bladeSysMgmtProcVpdId=bladeSysMgmtProcVpdId, configurationBladeExists=configurationBladeExists, remoteAlertIdEmailAddr=remoteAlertIdEmailAddr, bladeTemperatureThresholdsTable=bladeTemperatureThresholdsTable)
mibBuilder.exportSymbols("BLADE-MIB", telcoSystemHealthSummarySeverity=telcoSystemHealthSummarySeverity, temperatureCPU4=temperatureCPU4, bladeSysMgmtProcVpdBuildId=bladeSysMgmtProcVpdBuildId, bladeDaughterVpdCardType=bladeDaughterVpdCardType, solVlanId=solVlanId, bladePolicyPowerControlEnable=bladePolicyPowerControlEnable, temperatureSensor3HardShutdown=temperatureSensor3HardShutdown, rbsBladeAdministration=rbsBladeAdministration, spTxtId=spTxtId, restartReset=restartReset, telcoSystemHealth=telcoSystemHealth, mmBootROMVpdBuildDate=mmBootROMVpdBuildDate, bladeHealthSummaryIndex=bladeHealthSummaryIndex, bladeTemperaturesEntry=bladeTemperaturesEntry, temperatureSensor4HardShutdown=temperatureSensor4HardShutdown, bootCountPowerOnTimeSecs=bootCountPowerOnTimeSecs, ipmiManagement=ipmiManagement, componentLevelActivityVpdIndex=componentLevelActivityVpdIndex, switchModuleConfig=switchModuleConfig, restartSPImmediately=restartSPImmediately, remoteAlerts=remoteAlerts, mmPS2toUSBConvVpdRevisonNumber=mmPS2toUSBConvVpdRevisonNumber, smCurrentIPAddr=smCurrentIPAddr, bistBladesCommunicating=bistBladesCommunicating, bladeSensor12VoltLowWarning=bladeSensor12VoltLowWarning, remoteAlertIdEntryIpOrHostAddress=remoteAlertIdEntryIpOrHostAddress, ldapBindingMethod=ldapBindingMethod, bladeSensor28Volt=bladeSensor28Volt, ldapGroupFilter=ldapGroupFilter, smHardwareVpdFruNumber=smHardwareVpdFruNumber, critMultipleSwitchModule=critMultipleSwitchModule, mmHardwareVpdUuid=mmHardwareVpdUuid, intEthernetInterfaceEnabled=intEthernetInterfaceEnabled, chassisMediaTrayOwner=chassisMediaTrayOwner, mmPS2toUSBConvVpdIndex=mmPS2toUSBConvVpdIndex, pd1ModuleName=pd1ModuleName, bladeSensor23Volt=bladeSensor23Volt, dhcpSubnetMask=dhcpSubnetMask, intEthernetInterfaceBIA=intEthernetInterfaceBIA, remoteAccessIdEntryUserId=remoteAccessIdEntryUserId, bladeSensor9VoltHighWarning=bladeSensor9VoltHighWarning, temperatureDASD1Warning=temperatureDASD1Warning, mmHardwareVpdHardwareRevision=mmHardwareVpdHardwareRevision, smHardwareVpdTable=smHardwareVpdTable, snmpCommunityEntryCommunityIpAddress1=snmpCommunityEntryCommunityIpAddress1, temperatureCPU4Warning=temperatureCPU4Warning, bladeSensor15Volt=bladeSensor15Volt, telcoOEM=telcoOEM, systemInventory=systemInventory, systemBladeThrottling=systemBladeThrottling, plus1Pt8Volt=plus1Pt8Volt, bladeCenterHardwareRevision=bladeCenterHardwareRevision, smSwitchType=smSwitchType, mmMainApplVpdBuildDate=mmMainApplVpdBuildDate, fuelGaugePowerManagementPolicySetting=fuelGaugePowerManagementPolicySetting, bladePlus12Volt=bladePlus12Volt, mmPS2toUSBConvVpdEntry=mmPS2toUSBConvVpdEntry, mmMainApplVpdEntry=mmMainApplVpdEntry, ualIndex=ualIndex, mmMainApplVpdBuildId=mmMainApplVpdBuildId, smMainAppVpdSwitchType=smMainAppVpdSwitchType, bladeDaughterVpdFruSerial=bladeDaughterVpdFruSerial, bladeMACAddress3Vpd=bladeMACAddress3Vpd, bladeDaughterCard1MACAddress3Vpd=bladeDaughterCard1MACAddress3Vpd, extEthernetInterfaceHostName=extEthernetInterfaceHostName, smPowerRestartEntry=smPowerRestartEntry, bootSequenceIndex=bootSequenceIndex, restartBladeInvokeDiags=restartBladeInvokeDiags, powerModuleHealthTable=powerModuleHealthTable, bladeSensor10VoltHighWarning=bladeSensor10VoltHighWarning, bladeSensor26VoltHighWarning=bladeSensor26VoltHighWarning, pd1Index=pd1Index, snmpCommunityEntry=snmpCommunityEntry, mmToUSBIntfVpdRevisonNumber=mmToUSBIntfVpdRevisonNumber, roleId=roleId, bladeLEDsEntry=bladeLEDsEntry, frontPanelLEDs=frontPanelLEDs, ledSMLEDs=ledSMLEDs, rbsBlade2=rbsBlade2, bladeLEDsTable=bladeLEDsTable, extEthernetInterfaceType=extEthernetInterfaceType, ldapServer2NameOrIPAddress=ldapServer2NameOrIPAddress, smResetToDefault=smResetToDefault, bladePlus2pt5Volt=bladePlus2pt5Volt, mmMainApplVpdTable=mmMainApplVpdTable, bladeSensor19VoltLowWarning=bladeSensor19VoltLowWarning, temperatureCPU1Warning=temperatureCPU1Warning, bladeMACAddress1Vpd=bladeMACAddress1Vpd, bladeSensor19Volt=bladeSensor19Volt, bladeSensor17Volt=bladeSensor17Volt, pd1ModuleAllocatedPowerMin=pd1ModuleAllocatedPowerMin, temperatureSensor1Warning=temperatureSensor1Warning, bladeSensor24VoltLowWarning=bladeSensor24VoltLowWarning, smBootRomVpdRevisionNumber=smBootRomVpdRevisionNumber, ledBladeId=ledBladeId, bladeVoltThresholdSensorCapability=bladeVoltThresholdSensorCapability, bladePowerRestartEntry=bladePowerRestartEntry, bladeDiagsVPDEntry=bladeDiagsVPDEntry, pd1ModuleCPUDutyCycles=pd1ModuleCPUDutyCycles, pd2ModuleThrottle=pd2ModuleThrottle, rbsChassis=rbsChassis, systemHealthSummaryDescription=systemHealthSummaryDescription, mmToUSBIntfVpdTable=mmToUSBIntfVpdTable, solAccumulateTimeout=solAccumulateTimeout, mmStatusEntry=mmStatusEntry, telcoAlarmAck=telcoAlarmAck, temperatureThresholdBladeId=temperatureThresholdBladeId, smBootRomVpdSwitchType=smBootRomVpdSwitchType, dhcpPrimaryDNSServer=dhcpPrimaryDNSServer, bladeSensor20Volt=bladeSensor20Volt, extEthernetInterfaceLAA=extEthernetInterfaceLAA, smtpServerNameOrIPAddress=smtpServerNameOrIPAddress, blower2State=blower2State, bistRs485Port2=bistRs485Port2, solRetry=solRetry, fuelGaugeIndex=fuelGaugeIndex, bladePolicyKVMControlEnable=bladePolicyKVMControlEnable, powerRestartIndex=powerRestartIndex, solBladeSessionStatus=solBladeSessionStatus, powerRestartBladePowerState=powerRestartBladePowerState, bistPrimaryBus=bistPrimaryBus, remoteAlertIdEntryTextDescription=remoteAlertIdEntryTextDescription, fuelGaugeTable=fuelGaugeTable, fuelGaugeReservedPower=fuelGaugeReservedPower, rbsBlade14=rbsBlade14, extEthernetInterfaceSubnetMask=extEthernetInterfaceSubnetMask, temperatureSensor3WarningReset=temperatureSensor3WarningReset, bladeDiagsVpdExists=bladeDiagsVpdExists, bladeCapacityOnDemand=bladeCapacityOnDemand, smCurrentIPInfoTable=smCurrentIPInfoTable, bladeSysMgmtProcVpdIndex=bladeSysMgmtProcVpdIndex, bladeSensor17VoltHighWarning=bladeSensor17VoltHighWarning, chassisKVMOwner=chassisKVMOwner, resetSPConfigAndRestart=resetSPConfigAndRestart, errorLogs=errorLogs, pmHardwareVpdBayNumber=pmHardwareVpdBayNumber, chassisMTInstalled=chassisMTInstalled, bladePlus3pt3Volt=bladePlus3pt3Volt, bladePlus1pt5Volt=bladePlus1pt5Volt, remoteAccessUserAuthorityLevelTable=remoteAccessUserAuthorityLevelTable, snmpUserProfileEntry=snmpUserProfileEntry, remoteControlIndex=remoteControlIndex, smBootRomVpdExists=smBootRomVpdExists, bladeSensor11Volt=bladeSensor11Volt, bladeSensor13VoltLowWarning=bladeSensor13VoltLowWarning, bladePlus1pt5VoltHighWarning=bladePlus1pt5VoltHighWarning, solBladeConfig=solBladeConfig, pmHardwareVpdManufDate=pmHardwareVpdManufDate, remoteAccessRBSscopeEntry=remoteAccessRBSscopeEntry, pd1ModuleAllocatedPowerCurrent=pd1ModuleAllocatedPowerCurrent, bladeCenterSerialNumber=bladeCenterSerialNumber, dhcpSecondaryDNSServer=dhcpSecondaryDNSServer, snmpUserProfileEntryContextName=snmpUserProfileEntryContextName, ldapDomainSource=ldapDomainSource, bladeSensor18VoltLowWarning=bladeSensor18VoltLowWarning, smRestartAndRunFullDiag=smRestartAndRunFullDiag, bladeSensor25VoltLowWarning=bladeSensor25VoltLowWarning, ldapServer1NameOrIPAddress=ldapServer1NameOrIPAddress, voltageThresholdIndex=voltageThresholdIndex, temperatureSensor5WarningReset=temperatureSensor5WarningReset, remoteAlertRetryDelay=remoteAlertRetryDelay, telcoSystemHealthSummaryAcknowledge=telcoSystemHealthSummaryAcknowledge, snmpCommunityEntryCommunityIpAddress3=snmpCommunityEntryCommunityIpAddress3, plus12Volt=plus12Volt, mmStatusTable=mmStatusTable, readEventLogTable=readEventLogTable, powerModuleExists=powerModuleExists, bladeSensor2Volt=bladeSensor2Volt, powerRestartBladeExists=powerRestartBladeExists, bladeCenterVpd=bladeCenterVpd, bladeSensor21Volt=bladeSensor21Volt, bladeSensor27Volt=bladeSensor27Volt, temperatureSensor1HardShutdown=temperatureSensor1HardShutdown, bladeSensor30VoltLowWarning=bladeSensor30VoltLowWarning, ledBladeName=ledBladeName, bistBlowersFunctional=bistBlowersFunctional, fuelGaugePowerInUsed=fuelGaugePowerInUsed, temperatureCPU1=temperatureCPU1, temperatureCPU3WarningReset=temperatureCPU3WarningReset, smCurrentIPConfigMethod=smCurrentIPConfigMethod, bladeCenterPartNumber=bladeCenterPartNumber, bistBootRomFlashImage=bistBootRomFlashImage, telcoSystemHealthSummaryEntry=telcoSystemHealthSummaryEntry, bladeHardwareVpdEntry=bladeHardwareVpdEntry, bladeBootSequenceEntry=bladeBootSequenceEntry, bladeDiagsVpdRevision=bladeDiagsVpdRevision, bladeSensor7Volt=bladeSensor7Volt, critInvalidConfig=critInvalidConfig, pmHardwareVpdFruNumber=pmHardwareVpdFruNumber, temperatureSensor1WarningReset=temperatureSensor1WarningReset, bladeSysMgmtProcVPDTable=bladeSysMgmtProcVPDTable, telcoOEMs=telcoOEMs, generateTestAlert=generateTestAlert, bistRtc=bistRtc, eventLog=eventLog, bladeSensor7VoltHighWarning=bladeSensor7VoltHighWarning, mmPS2toUSBConvVpdTable=mmPS2toUSBConvVpdTable, powerdomain2Oversubscription=powerdomain2Oversubscription, bladeRemoteControl=bladeRemoteControl, ipmiEnabled=ipmiEnabled, bladeSensor14Volt=bladeSensor14Volt, fuelGaugeFirstPowerModule=fuelGaugeFirstPowerModule, bladeCenterManufacturingId=bladeCenterManufacturingId, remoteControlBladeName=remoteControlBladeName, bladeTemperatureThresholdsEntry=bladeTemperatureThresholdsEntry, dhcpGatewayIPAddress=dhcpGatewayIPAddress, bootCountPowerOnTimeBladeId=bootCountPowerOnTimeBladeId, smMainApp1VpdRevisionNumber=smMainApp1VpdRevisionNumber, mmHardwareVpdPartNumber=mmHardwareVpdPartNumber, bladeSensor1VoltHighWarning=bladeSensor1VoltHighWarning, smNewIPConfigMethod=smNewIPConfigMethod, temperatureLED=temperatureLED, bladeSensor6Volt=bladeSensor6Volt, smMainAppVpdTable=smMainAppVpdTable, monitors=monitors, temperatureCPU3HardShutdown=temperatureCPU3HardShutdown, bistVideoCompressorBoard=bistVideoCompressorBoard, bistPowerModulesFunctional=bistPowerModulesFunctional, remoteAccessTamperDelay=remoteAccessTamperDelay, componentLevelVpdSerialNumber=componentLevelVpdSerialNumber, bootSequence3=bootSequence3, restartBladeNMI=restartBladeNMI, snmpAgentConfig=snmpAgentConfig, bladeTemperaturesTable=bladeTemperaturesTable, bladeSensor18Volt=bladeSensor18Volt, userAuthenticationMethod=userAuthenticationMethod, bladeSensor29Volt=bladeSensor29Volt, mmRemoteControlVpdIndex=mmRemoteControlVpdIndex, rbsBlade10=rbsBlade10, temperatureCPU2=temperatureCPU2, bladeHardwareVpdMachineType=bladeHardwareVpdMachineType, smBootRomVpdBuildDate=smBootRomVpdBuildDate, bladeSensor2VoltLowWarning=bladeSensor2VoltLowWarning, processorBlade=processorBlade, bladeSysMgmtProcVpdExists=bladeSysMgmtProcVpdExists, snmpUserProfileEntryPrivProt=snmpUserProfileEntryPrivProt, ledBladeMediaTray=ledBladeMediaTray, snmpTrapsPortAssignment=snmpTrapsPortAssignment, pd1ModuleAllocatedPowerMax=pd1ModuleAllocatedPowerMax, inventoryManagementActivityVpdTable=inventoryManagementActivityVpdTable, remoteAlertIdEntryNotificationType=remoteAlertIdEntryNotificationType, bootSequenceBladePowerState=bootSequenceBladePowerState, snmpSystemAgentTrapsDisable=snmpSystemAgentTrapsDisable, snmpv1SystemAgentEnable=snmpv1SystemAgentEnable, voltageThresholdEntryName=voltageThresholdEntryName, voltageThresholdBladeId=voltageThresholdBladeId, bladeCapacityOnDemandState=bladeCapacityOnDemandState, rbsBlade7=rbsBlade7, pd1BayNumber=pd1BayNumber, telcoSystemHealthStat=telcoSystemHealthStat, remoteAccessRBSscopeTable=remoteAccessRBSscopeTable, bladeSensor5Temp=bladeSensor5Temp, bladeOwnsMediaTray=bladeOwnsMediaTray, bladeSensor5Volt=bladeSensor5Volt)
mibBuilder.exportSymbols("BLADE-MIB", pd2ModuleAllocatedPowerMax=pd2ModuleAllocatedPowerMax, ualSupervisor=ualSupervisor, bladePlus12VoltLowWarning=bladePlus12VoltLowWarning, bladeSensor22VoltLowWarning=bladeSensor22VoltLowWarning, smControlIndex=smControlIndex, mmBootROMVpdBuildId=mmBootROMVpdBuildId, bladeIPAddrRangeStart=bladeIPAddrRangeStart, smRestartAndRunStdDiag=smRestartAndRunStdDiag, bladeBootCountPowerOnTime=bladeBootCountPowerOnTime, bladePlus3pt3VoltHighWarning=bladePlus3pt3VoltHighWarning, firmwareUpdateStatus=firmwareUpdateStatus, chassisVpd=chassisVpd, powerDomain1Table=powerDomain1Table, configureSP=configureSP, ldapLoginPermissionAttribute=ldapLoginPermissionAttribute, bladeKVMBladeId=bladeKVMBladeId, bladeBiosVpdIndex=bladeBiosVpdIndex, temperatureThresholdBladeName=temperatureThresholdBladeName, bistLocalI2CBus=bistLocalI2CBus, mmToUSBIntfVpdEntry=mmToUSBIntfVpdEntry, configurationBladeId=configurationBladeId, pmHardwareVpdTable=pmHardwareVpdTable, rbsBlade5=rbsBlade5, dnsServerIPAddress2=dnsServerIPAddress2, remoteMediaTrayControlEnable=remoteMediaTrayControlEnable, bootSequenceBladeId=bootSequenceBladeId, ledBladePowerState=ledBladePowerState, temperatureCPU2WarningReset=temperatureCPU2WarningReset, bladeSensor2Temp=bladeSensor2Temp, bladeSensor29VoltHighWarning=bladeSensor29VoltHighWarning, restartBladeInvokeDiagsFromDefaultBootList=restartBladeInvokeDiagsFromDefaultBootList, smCfgCtrlEnableDisable=smCfgCtrlEnableDisable, smMainApp2VpdRevisionNumber=smMainApp2VpdRevisionNumber, firmwareUpdateStart=firmwareUpdateStart, pd2ModuleAllocatedPowerCurrent=pd2ModuleAllocatedPowerCurrent, bladeMACAddressVpdTable=bladeMACAddressVpdTable, bladeCenterUUID=bladeCenterUUID, dnsEnabled=dnsEnabled, slpMulticastAddr=slpMulticastAddr, spClock=spClock, voltageThresholdEntryWarningLowValue=voltageThresholdEntryWarningLowValue, bladeConnectionType=bladeConnectionType, rbsSwitch3=rbsSwitch3, rbsChassisOperator=rbsChassisOperator, voltageBladePowerState=voltageBladePowerState, ualId=ualId, critTemp=critTemp, voltageThresholdEntryWarningResetHighValue=voltageThresholdEntryWarningResetHighValue, bladeDaughterCard1MACAddress1Vpd=bladeDaughterCard1MACAddress1Vpd, bladeSensor15VoltHighWarning=bladeSensor15VoltHighWarning, mmHardwareVpdFruNumber=mmHardwareVpdFruNumber, warnRedundantModule=warnRedundantModule, dhcpHostName=dhcpHostName, tcpProtocols=tcpProtocols, extEthernetInterfaceGatewayIPAddress=extEthernetInterfaceGatewayIPAddress, bladeSensor10VoltLowWarning=bladeSensor10VoltLowWarning, bladeHardwareVpdBayNumber=bladeHardwareVpdBayNumber, rbsSupervisor=rbsSupervisor, bladeBiosVpdName=bladeBiosVpdName, rbsBlade12=rbsBlade12, mmToUSBIntfVpdName=mmToUSBIntfVpdName, componentLevelVpdTypeCode=componentLevelVpdTypeCode, pd2ModuleState=pd2ModuleState, bladeDaughterVpdSerialNumber=bladeDaughterVpdSerialNumber, componentLevelActivityVpdFruNumber=componentLevelActivityVpdFruNumber, bootSequenceBladeExists=bootSequenceBladeExists, ualAllowClearLog=ualAllowClearLog, bladePowerRestartTable=bladePowerRestartTable, snmpUserProfileTable=snmpUserProfileTable, rbsChassisAccountManagement=rbsChassisAccountManagement, mmRemoteControlVpdRevisonNumber=mmRemoteControlVpdRevisonNumber, smMainApp2VpdBuildId=smMainApp2VpdBuildId, dhcpTertiaryDNSServer=dhcpTertiaryDNSServer, pd2BladePrimarySlot=pd2BladePrimarySlot, smtpConfig=smtpConfig, bladeBiosVpdId=bladeBiosVpdId, pmHardwareVpdPartNumber=pmHardwareVpdPartNumber, ldapGroupSearchAttribute=ldapGroupSearchAttribute, restartBladeClearNVRAM=restartBladeClearNVRAM, smMainAppVpdEntry=smMainAppVpdEntry, snmpCommunityEntryCommunityIpAddress2=snmpCommunityEntryCommunityIpAddress2, telcoAlarmClear=telcoAlarmClear, systemLog75PctFull=systemLog75PctFull, temperatureSensor5Warning=temperatureSensor5Warning, bladePlus1pt25VoltLowWarning=bladePlus1pt25VoltLowWarning, temperatureBladePowerState=temperatureBladePowerState, extEthernetInterface=extEthernetInterface, pd2ModuleStatus=pd2ModuleStatus, snmpCommunityEntryCommunityViewType=snmpCommunityEntryCommunityViewType, voltageIndex=voltageIndex, pmHardwareVpd=pmHardwareVpd, bistRs485Port1=bistRs485Port1, bladeDaughterVpdManufDate=bladeDaughterVpdManufDate, bladeSensor11VoltHighWarning=bladeSensor11VoltHighWarning, remoteAccessConfig=remoteAccessConfig, bladeOwnsKVM=bladeOwnsKVM, bladeStatusIndex=bladeStatusIndex, rbsBlade4=rbsBlade4, smHardwareVpd=smHardwareVpd, bladeSensor13Volt=bladeSensor13Volt, smLEDs=smLEDs, temperature=temperature, extEthernetInterfaceMTU=extEthernetInterfaceMTU, snmpSystemLocation=snmpSystemLocation, pd1BladePrimarySlot=pd1BladePrimarySlot, chassisSMsInstalled=chassisSMsInstalled, rbsSwitch2=rbsSwitch2, snmpAgentCommunityConfig=snmpAgentCommunityConfig, mmHardwareVpdBayNumber=mmHardwareVpdBayNumber, solEnable=solEnable, spClockDateAndTimeSetting=spClockDateAndTimeSetting, smExtEthPortsEnableDisable=smExtEthPortsEnableDisable, smHardwareVpdHardwareRevision=smHardwareVpdHardwareRevision, telcoSystemHealthSummaryTable=telcoSystemHealthSummaryTable, bladeSensor24VoltHighWarning=bladeSensor24VoltHighWarning, smNewIPAddr=smNewIPAddr, mmToUSBIntfVpdIndex=mmToUSBIntfVpdIndex, chassisResponseVersion=chassisResponseVersion, solBladeIndex=solBladeIndex, chassisNoOfMTsSupported=chassisNoOfMTsSupported, bladeSensor24Volt=bladeSensor24Volt, powerModuleIndex=powerModuleIndex, bladeSensor16VoltLowWarning=bladeSensor16VoltLowWarning, mmRemoteControlVpdBuildDate=mmRemoteControlVpdBuildDate, bladeDaughterVpdHardwareRevision=bladeDaughterVpdHardwareRevision, systemPFA=systemPFA, powerDomain1Entry=powerDomain1Entry, temperatureCPU1WarningReset=temperatureCPU1WarningReset, mmHardwareVpdFruSerial=mmHardwareVpdFruSerial, acousticMode=acousticMode, telcoIdentityLED=telcoIdentityLED, bistBlowersInstalled=bistBlowersInstalled, mmMainApplVpdRevisonNumber=mmMainApplVpdRevisonNumber, voltageThresholdEntryIndex=voltageThresholdEntryIndex, mmFirmwareVpd=mmFirmwareVpd, bladeBiosVpdPowerState=bladeBiosVpdPowerState, mmBistAndChassisStatus=mmBistAndChassisStatus, bladeBootCountPowerOnTimeTable=bladeBootCountPowerOnTimeTable, uplinkCheckDelay=uplinkCheckDelay, temperatureSensor6WarningReset=temperatureSensor6WarningReset, bladeSystemStatusEntry=bladeSystemStatusEntry, bladeSensor22VoltHighWarning=bladeSensor22VoltHighWarning, switchCurrentNwCfg=switchCurrentNwCfg, mmPS2toUSBConvVpdName=mmPS2toUSBConvVpdName, uplinkCheckConfig=uplinkCheckConfig, telcoColorSel=telcoColorSel, bladeSysMgmtProcVpdRevision=bladeSysMgmtProcVpdRevision, smControlEntry=smControlEntry, powerDomain2Entry=powerDomain2Entry, smMainApp1VpdBuildId=smMainApp1VpdBuildId, ualReadOnly=ualReadOnly, remoteAccessIdEntryIndex=remoteAccessIdEntryIndex, bladeHardwareVpdFruSerial=bladeHardwareVpdFruSerial, ualAccountManagement=ualAccountManagement, chassisNoOfMMsSupported=chassisNoOfMMsSupported, mmBootROMVpdTable=mmBootROMVpdTable, bladeSensor29VoltLowWarning=bladeSensor29VoltLowWarning, bladePowerManagementPolicy=bladePowerManagementPolicy, bladeVoltagesEntry=bladeVoltagesEntry, ldapUserSearchBaseDN=ldapUserSearchBaseDN, extEthernetInterfaceDuplexSetting=extEthernetInterfaceDuplexSetting, ldapClientAuthenticationDN=ldapClientAuthenticationDN, smLEDsTable=smLEDsTable, bladeBiosVPDTable=bladeBiosVPDTable, temperatureSensor4Warning=temperatureSensor4Warning, bladeBootSequenceTable=bladeBootSequenceTable, bistMediaTrayCommunicating=bistMediaTrayCommunicating, mtHardwareVpdFruNumber=mtHardwareVpdFruNumber, monitorThresholds=monitorThresholds, bladePowerState=bladePowerState, commandModeEnable=commandModeEnable, temperatureSensor3Warning=temperatureSensor3Warning, voltageThresholdBladePowerState=voltageThresholdBladePowerState, bladeDaughterVpdUuid=bladeDaughterVpdUuid, dnsConfig=dnsConfig, identityLED=identityLED, spIdentification=spIdentification, fuelGaugeEntry=fuelGaugeEntry, roleIndex=roleIndex, smHealthState=smHealthState, bladeDaughterCard2MACAddress3Vpd=bladeDaughterCard2MACAddress3Vpd, switchModuleControlId=switchModuleControlId, warnTemp=warnTemp, ualConsoleAndVirtualMediaAccess=ualConsoleAndVirtualMediaAccess, switchPingRequest=switchPingRequest, extEthernetInterfaceBIA=extEthernetInterfaceBIA, smHardwareVpdEntry=smHardwareVpdEntry, smNewGateway=smNewGateway, ibmAgents=ibmAgents, blower2speed=blower2speed, temperatureCPU2HardShutdown=temperatureCPU2HardShutdown, rbsBlade6=rbsBlade6, componentLevelActivityVpdTimestamp=componentLevelActivityVpdTimestamp, bladePlus3pt3VoltLowWarning=bladePlus3pt3VoltLowWarning, pmHardwareVpdEntry=pmHardwareVpdEntry, bladeBootCountPowerOnTimeEntry=bladeBootCountPowerOnTimeEntry, smMACAddress=smMACAddress, temperatureDASD1WarningReset=temperatureDASD1WarningReset, bladeSensor14VoltHighWarning=bladeSensor14VoltHighWarning, chassisName=chassisName, bladePowerRestart=bladePowerRestart, smPowerRestartId=smPowerRestartId, switchOverRedundantMM=switchOverRedundantMM, bladeSensor17VoltLowWarning=bladeSensor17VoltLowWarning, mmHardwareVpdIndex=mmHardwareVpdIndex, mmMainApplVpdIndex=mmMainApplVpdIndex, mmHardwareVpd=mmHardwareVpd, bladeHardwareVpd=bladeHardwareVpd, minus5Volt=minus5Volt, blower1State=blower1State, mmBootROMVpdName=mmBootROMVpdName, smMainAppVpdExists=smMainAppVpdExists, ldapSearchDomain=ldapSearchDomain, temperatureCPU4WarningReset=temperatureCPU4WarningReset, bladeMACAddress4Vpd=bladeMACAddress4Vpd, bladeSensor25Volt=bladeSensor25Volt, bladeSensor3VoltLowWarning=bladeSensor3VoltLowWarning, bistEthernetPort2=bistEthernetPort2, bladePolicyMediaTrayControlEnable=bladePolicyMediaTrayControlEnable, smCurrentIPInfoEntry=smCurrentIPInfoEntry, rbsBlade8=rbsBlade8, smNewSubnetMask=smNewSubnetMask, bladeVRM1Volt=bladeVRM1Volt, bladeSensor12VoltHighWarning=bladeSensor12VoltHighWarning, remotePowerControlEnable=remotePowerControlEnable, bistPowerModulesInstalled=bistPowerModulesInstalled, remoteAlertsCrit=remoteAlertsCrit, generalRemoteCfg=generalRemoteCfg, snmpUserProfileEntryIndex=snmpUserProfileEntryIndex, temperatureSensor2HardShutdown=temperatureSensor2HardShutdown, bladeHardwareVpdIndex=bladeHardwareVpdIndex, smHardwareVpdUuid=smHardwareVpdUuid, mmPS2toUSBConvVpdBuildId=mmPS2toUSBConvVpdBuildId)
