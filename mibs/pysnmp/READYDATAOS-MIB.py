#
# PySNMP MIB module READYDATAOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/READYDATAOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, enterprises, Integer32, MibIdentifier, Counter32, Counter64, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, IpAddress, Gauge32, iso, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "Integer32", "MibIdentifier", "Counter32", "Counter64", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "IpAddress", "Gauge32", "iso", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 100))
ReadyDATAOS = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 100, 15))
ngNasManager = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 22))
nasMgrSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasMgrSoftwareVersion.setStatus('current')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 22, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1), ).setIndexNames((0, "READYDATAOS-MIB", "diskNumber"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
diskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
diskID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskID.setStatus('mandatory')
diskSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSlotName.setStatus('mandatory')
diskSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSerial.setStatus('mandatory')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('mandatory')
ataError = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ataError.setStatus('mandatory')
diskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskCapacity.setStatus('mandatory')
diskInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskInterface.setStatus('mandatory')
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('mandatory')
diskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTemperature.setStatus('mandatory')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 22, 4), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 22, 4, 1), ).setIndexNames((0, "READYDATAOS-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
fanRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRPM.setStatus('mandatory')
fanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanStatus.setStatus('mandatory')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanType.setStatus('mandatory')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 22, 5), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 22, 5, 1), ).setIndexNames((0, "READYDATAOS-MIB", "temperatureNumber"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureNumber.setStatus('mandatory')
temperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureValue.setStatus('mandatory')
temperatureTyoe = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureTyoe.setStatus('mandatory')
temperatureMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMin.setStatus('mandatory')
temperatureMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMax.setStatus('mandatory')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 22, 7), )
if mibBuilder.loadTexts: volumeTable.setStatus('mandatory')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1), ).setIndexNames((0, "READYDATAOS-MIB", "volumeNumber"))
if mibBuilder.loadTexts: volumeEntry.setStatus('mandatory')
volumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('mandatory')
volumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeName.setStatus('mandatory')
volumeRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeRAIDLevel.setStatus('mandatory')
volumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeStatus.setStatus('mandatory')
volumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSize.setStatus('mandatory')
volumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpace.setStatus('mandatory')
psuTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 22, 8), )
if mibBuilder.loadTexts: psuTable.setStatus('mandatory')
psuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 22, 8, 1), ).setMaxAccess("readonly").setIndexNames((0, "READYDATAOS-MIB", "psuNumber"))
if mibBuilder.loadTexts: psuEntry.setStatus('mandatory')
psuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuNumber.setStatus('mandatory')
psuDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuDesc.setStatus('mandatory')
psuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 22, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuStatus.setStatus('mandatory')
aryMgrEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 22, 200))
controllerNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 201), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNameEv.setStatus('mandatory')
channelNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumberEv.setStatus('mandatory')
targetIDEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIDEv.setStatus('mandatory')
virtualDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 204), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameEv.setStatus('mandatory')
arrayDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 205), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNameEv.setStatus('mandatory')
oldVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 206), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldVDConfigEv.setStatus('mandatory')
newVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 207), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newVDConfigEv.setStatus('mandatory')
enclosureNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumberEv.setStatus('mandatory')
unitNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNumberEv.setStatus('mandatory')
enclosureNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 210), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNameEv.setStatus('mandatory')
unitNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 211), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNameEv.setStatus('mandatory')
timeEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeEv.setStatus('mandatory')
volumeNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 200, 213), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNameEv.setStatus('mandatory')
fanFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 400), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFailureMesg.setStatus('current')
tempFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 401), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempFailureMesg.setStatus('current')
powerVoltageMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 402), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerVoltageMesg.setStatus('current')
raidEventNoticeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 403), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidEventNoticeMesg.setStatus('current')
snapshotEventNoticeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 404), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotEventNoticeMesg.setStatus('current')
upsEventNoticeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 405), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEventNoticeMesg.setStatus('current')
hotplugDiskNoticeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 406), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotplugDiskNoticeMesg.setStatus('current')
volumeNoticeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 407), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNoticeMesg.setStatus('current')
diskTempWarningMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 408), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTempWarningMesg.setStatus('current')
backupNoticeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 409), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupNoticeMesg.setStatus('current')
diskSmartWarningMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 410), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSmartWarningMesg.setStatus('current')
psuWarningMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 22, 411), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuWarningMesg.setStatus('current')
nasTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 22, 300))
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,10)).setObjects(("READYDATAOS-MIB", "fanFailureMesg"))
tempFailure = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,20)).setObjects(("READYDATAOS-MIB", "tempFailureMesg"))
powerVoltage = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,30)).setObjects(("READYDATAOS-MIB", "powerVoltageMesg"))
raidEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,40)).setObjects(("READYDATAOS-MIB", "raidEventNoticeMesg"))
snapshotEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,50)).setObjects(("READYDATAOS-MIB", "snapshotEventNoticeMesg"))
hotplugDiskNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,60)).setObjects(("READYDATAOS-MIB", "hotplugDiskNoticeMesg"))
upsEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,70)).setObjects(("READYDATAOS-MIB", "upsEventNoticeMesg"))
volumeNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,80)).setObjects(("READYDATAOS-MIB", "volumeNoticeMesg"))
diskTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,90)).setObjects(("READYDATAOS-MIB", "diskTempWarningMesg"))
backupNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,100)).setObjects(("READYDATAOS-MIB", "backupNoticeMesg"))
diskSmartWarning = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,110)).setObjects(("READYDATAOS-MIB", "diskSmartWarningMesg"))
psuWarning = NotificationType((1, 3, 6, 1, 4, 1, 4526, 22, 300) + (0,120)).setObjects(("READYDATAOS-MIB", "psuWarningMesg"))
mibBuilder.exportSymbols("READYDATAOS-MIB", fanFailure=fanFailure, nasTraps=nasTraps, volumeNumber=volumeNumber, enclosureNameEv=enclosureNameEv, diskCapacity=diskCapacity, fanEntry=fanEntry, psuWarningMesg=psuWarningMesg, diskSmartWarningMesg=diskSmartWarningMesg, psuNumber=psuNumber, powerVoltage=powerVoltage, productID=productID, virtualDiskNameEv=virtualDiskNameEv, volumeEntry=volumeEntry, temperatureNumber=temperatureNumber, unitNumberEv=unitNumberEv, psuEntry=psuEntry, fanFailureMesg=fanFailureMesg, volumeSize=volumeSize, psuTable=psuTable, volumeRAIDLevel=volumeRAIDLevel, ngNasManager=ngNasManager, diskID=diskID, unitNameEv=unitNameEv, ataError=ataError, enclosureNumberEv=enclosureNumberEv, netgear=netgear, diskModel=diskModel, snapshotEventNoticeMesg=snapshotEventNoticeMesg, tempFailure=tempFailure, temperatureTyoe=temperatureTyoe, arrayDiskNameEv=arrayDiskNameEv, newVDConfigEv=newVDConfigEv, temperatureTable=temperatureTable, temperatureValue=temperatureValue, nasMgrSoftwareVersion=nasMgrSoftwareVersion, ReadyDATAOS=ReadyDATAOS, diskTemperature=diskTemperature, upsEventNotice=upsEventNotice, targetIDEv=targetIDEv, diskSmartWarning=diskSmartWarning, hotplugDiskNotice=hotplugDiskNotice, tempFailureMesg=tempFailureMesg, psuWarning=psuWarning, volumeNameEv=volumeNameEv, diskTempWarningMesg=diskTempWarningMesg, raidEventNotice=raidEventNotice, diskSlotName=diskSlotName, volumeNoticeMesg=volumeNoticeMesg, temperatureMin=temperatureMin, volumeName=volumeName, backupNotice=backupNotice, psuStatus=psuStatus, fanNumber=fanNumber, temperatureMax=temperatureMax, controllerNameEv=controllerNameEv, diskTable=diskTable, volumeTable=volumeTable, hotplugDiskNoticeMesg=hotplugDiskNoticeMesg, volumeStatus=volumeStatus, upsEventNoticeMesg=upsEventNoticeMesg, diskSerial=diskSerial, diskState=diskState, raidEventNoticeMesg=raidEventNoticeMesg, backupNoticeMesg=backupNoticeMesg, channelNumberEv=channelNumberEv, fanStatus=fanStatus, timeEv=timeEv, snapshotEventNotice=snapshotEventNotice, oldVDConfigEv=oldVDConfigEv, volumeNotice=volumeNotice, volumeFreeSpace=volumeFreeSpace, diskEntry=diskEntry, temperatureEntry=temperatureEntry, psuDesc=psuDesc, diskTempWarning=diskTempWarning, diskInterface=diskInterface, fanRPM=fanRPM, powerVoltageMesg=powerVoltageMesg, diskNumber=diskNumber, fanTable=fanTable, fanType=fanType, aryMgrEvts=aryMgrEvts)
