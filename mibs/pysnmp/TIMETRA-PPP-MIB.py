#
# PySNMP MIB module TIMETRA-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-PPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:13:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, Counter32, Counter64, Bits, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Integer32, ModuleIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Counter32", "Counter64", "Bits", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Integer32", "ModuleIdentity", "Gauge32", "iso")
DisplayString, TimeStamp, TimeInterval, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TimeInterval", "TextualConvention", "MacAddress")
tmnxHwObjs, tmnxChassisIndex, tmnxHwConformance, tmnxHwNotification = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxHwObjs", "tmnxChassisIndex", "tmnxHwConformance", "tmnxHwNotification")
timetraSRMIBModules, = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
tmnxPortPortID, = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "tmnxPortPortID")
tmnxPppMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 26))
tmnxPppMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-03-15 00:00', '1905-01-24 00:00', '1904-03-01 00:00',))
if mibBuilder.loadTexts: tmnxPppMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: tmnxPppMIBModule.setOrganization('Alcatel-Lucent')
tmnxPppObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5))
tmnxPppNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3))
tmnxPppNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0))
tmnxPppConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3))
class TmnxPppCpState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("requestSent", 7), ("ackReceived", 8), ("ackSent", 9), ("opened", 10))

tmnxPppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1), )
if mibBuilder.loadTexts: tmnxPppTable.setStatus('current')
tmnxPppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPppEntry.setStatus('current')
tmnxPppLinkPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dead", 1), ("establish", 2), ("authenticate", 3), ("network", 4), ("terminate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLinkPhase.setStatus('current')
tmnxPppLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalAddress.setStatus('obsolete')
tmnxPppRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteAddress.setStatus('obsolete')
tmnxPppRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteMacAddress.setStatus('current')
tmnxPppLineMonitorMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("keepalive", 2), ("lqm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLineMonitorMethod.setStatus('current')
tmnxPppKaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppKaPeriod.setStatus('current')
tmnxPppKaDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppKaDropCount.setStatus('current')
tmnxPppKaLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaLastClearedTime.setStatus('current')
tmnxPppKaThresholdExceedsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaThresholdExceedsCount.setStatus('current')
tmnxPppKaInPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaInPktCount.setStatus('current')
tmnxPppKaOutPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaOutPktCount.setStatus('current')
tmnxPppKaTimeDropLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppKaTimeDropLink.setStatus('current')
tmnxPppQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppQuality.setStatus('current')
tmnxPppLqmOperPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmOperPeriod.setStatus('current')
tmnxPppLqmInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmInRate.setStatus('current')
tmnxPppLqmOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmOutRate.setStatus('current')
tmnxPppLqmLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmLastClearedTime.setStatus('current')
tmnxPppLqmThresholdExceedsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmThresholdExceedsCount.setStatus('current')
tmnxPppLqmInPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmInPktCount.setStatus('current')
tmnxPppLqmOutPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmOutPktCount.setStatus('current')
tmnxPppLqmTimeDropLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 21), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLqmTimeDropLink.setStatus('current')
tmnxPppLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalMagicNumber.setStatus('current')
tmnxPppRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteMagicNumber.setStatus('current')
tmnxPppLocalIPv4AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv4AddressType.setStatus('current')
tmnxPppLocalIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 25), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv4Address.setStatus('current')
tmnxPppLocalIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv6AddressType.setStatus('current')
tmnxPppLocalIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 27), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppLocalIPv6Address.setStatus('current')
tmnxPppRemoteIPv4AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv4AddressType.setStatus('current')
tmnxPppRemoteIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 29), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv4Address.setStatus('current')
tmnxPppRemoteIPv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv6AddressType.setStatus('current')
tmnxPppRemoteIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 31), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppRemoteIPv6Address.setStatus('current')
tmnxPppHdrCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 1, 1, 32), Bits().clone(namedValues=NamedValues(("acfc", 0), ("pfc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPppHdrCompression.setStatus('current')
tmnxPppCpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2), )
if mibBuilder.loadTexts: tmnxPppCpTable.setStatus('current')
tmnxPppCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PPP-MIB", "tmnxPppCpProtocol"))
if mibBuilder.loadTexts: tmnxPppCpEntry.setStatus('current')
tmnxPppCpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lcp", 1), ("ipcp", 2), ("mplscp", 3), ("bcp", 4), ("osicp", 5), ("lqr", 6), ("ipv6cp", 7))))
if mibBuilder.loadTexts: tmnxPppCpProtocol.setStatus('current')
tmnxPppCpState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 2), TmnxPppCpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpState.setStatus('current')
tmnxPppCpLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpLastChange.setStatus('current')
tmnxPppCpRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpRestartCount.setStatus('current')
tmnxPppCpLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 5, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPppCpLastClearedTime.setStatus('current')
tmnxPppCpUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 1)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppCpUp.setStatus('current')
tmnxPppCpDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 2)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppCpDown.setStatus('current')
tmnxPppNcpUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 3)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppNcpUp.setStatus('current')
tmnxPppNcpDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 4)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpState"))
if mibBuilder.loadTexts: tmnxPppNcpDown.setStatus('current')
tmnxPppKeepaliveFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 5)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"))
if mibBuilder.loadTexts: tmnxPppKeepaliveFailure.setStatus('current')
tmnxPppLqmFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 6)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"))
if mibBuilder.loadTexts: tmnxPppLqmFailure.setStatus('current')
tmnxPppLoopback = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 7)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"))
if mibBuilder.loadTexts: tmnxPppLoopback.setStatus('current')
tmnxPppLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 3, 0, 8)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"))
if mibBuilder.loadTexts: tmnxPppLoopbackClear.setStatus('current')
tmnxPppCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1))
tmnxPppGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2))
tmnxPppCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 1)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppGroup"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppCompliance = tmnxPppCompliance.setStatus('obsolete')
tmnxPpp7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 2)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7450V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7450V4v0Compliance = tmnxPpp7450V4v0Compliance.setStatus('obsolete')
tmnxPpp7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 3)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7750V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7750V4v0Compliance = tmnxPpp7750V4v0Compliance.setStatus('obsolete')
tmnxPpp7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 4)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7450V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7450V6v0Compliance = tmnxPpp7450V6v0Compliance.setStatus('current')
tmnxPpp77x0V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 1, 5)).setObjects(("TIMETRA-PPP-MIB", "tmnxPpp7750V4v0Group"), ("TIMETRA-PPP-MIB", "tmnxPppNotificationGroup"), ("TIMETRA-PPP-MIB", "tmnxPppCompressionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp77x0V6v0Compliance = tmnxPpp77x0V6v0Compliance.setStatus('current')
tmnxPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 1)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLinkPhase"), ("TIMETRA-PPP-MIB", "tmnxPppLocalAddress"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteAddress"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMacAddress"), ("TIMETRA-PPP-MIB", "tmnxPppLineMonitorMethod"), ("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppKaDropCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppKaThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOperPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLqmThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppCpState"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastChange"), ("TIMETRA-PPP-MIB", "tmnxPppCpRestartCount"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppGroup = tmnxPppGroup.setStatus('obsolete')
tmnxPppNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 3)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppCpUp"), ("TIMETRA-PPP-MIB", "tmnxPppCpDown"), ("TIMETRA-PPP-MIB", "tmnxPppCpDown"), ("TIMETRA-PPP-MIB", "tmnxPppNcpUp"), ("TIMETRA-PPP-MIB", "tmnxPppNcpDown"), ("TIMETRA-PPP-MIB", "tmnxPppKeepaliveFailure"), ("TIMETRA-PPP-MIB", "tmnxPppLqmFailure"), ("TIMETRA-PPP-MIB", "tmnxPppLoopback"), ("TIMETRA-PPP-MIB", "tmnxPppLoopbackClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppNotificationGroup = tmnxPppNotificationGroup.setStatus('current')
tmnxPPPObsoleteV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 4)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLocalAddress"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPPPObsoleteV4v0Group = tmnxPPPObsoleteV4v0Group.setStatus('current')
tmnxPpp7450V4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 5)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLinkPhase"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMacAddress"), ("TIMETRA-PPP-MIB", "tmnxPppLineMonitorMethod"), ("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppKaDropCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppKaThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOperPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLqmThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppCpState"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastChange"), ("TIMETRA-PPP-MIB", "tmnxPppCpRestartCount"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4Address"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7450V4v0Group = tmnxPpp7450V4v0Group.setStatus('current')
tmnxPpp7750V4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 6)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppLinkPhase"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMacAddress"), ("TIMETRA-PPP-MIB", "tmnxPppLineMonitorMethod"), ("TIMETRA-PPP-MIB", "tmnxPppKaPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppKaDropCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppKaThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppKaTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppQuality"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOperPeriod"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutRate"), ("TIMETRA-PPP-MIB", "tmnxPppLqmLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLqmThresholdExceedsCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmInPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmOutPktCount"), ("TIMETRA-PPP-MIB", "tmnxPppLqmTimeDropLink"), ("TIMETRA-PPP-MIB", "tmnxPppLocalMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteMagicNumber"), ("TIMETRA-PPP-MIB", "tmnxPppCpState"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastChange"), ("TIMETRA-PPP-MIB", "tmnxPppCpRestartCount"), ("TIMETRA-PPP-MIB", "tmnxPppCpLastClearedTime"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv4Address"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv6AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppLocalIPv6Address"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv4Address"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv6AddressType"), ("TIMETRA-PPP-MIB", "tmnxPppRemoteIPv6Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPpp7750V4v0Group = tmnxPpp7750V4v0Group.setStatus('current')
tmnxPppCompressionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 3, 2, 7)).setObjects(("TIMETRA-PPP-MIB", "tmnxPppHdrCompression"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPppCompressionGroup = tmnxPppCompressionGroup.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-PPP-MIB", tmnxPppTable=tmnxPppTable, tmnxPpp7450V6v0Compliance=tmnxPpp7450V6v0Compliance, tmnxPppNotifyPrefix=tmnxPppNotifyPrefix, tmnxPppLocalAddress=tmnxPppLocalAddress, tmnxPppLocalIPv4Address=tmnxPppLocalIPv4Address, tmnxPppLqmOperPeriod=tmnxPppLqmOperPeriod, tmnxPpp7450V4v0Group=tmnxPpp7450V4v0Group, tmnxPppLqmThresholdExceedsCount=tmnxPppLqmThresholdExceedsCount, tmnxPppLqmFailure=tmnxPppLqmFailure, tmnxPppLocalMagicNumber=tmnxPppLocalMagicNumber, tmnxPppEntry=tmnxPppEntry, tmnxPppLocalIPv4AddressType=tmnxPppLocalIPv4AddressType, tmnxPppRemoteAddress=tmnxPppRemoteAddress, TmnxPppCpState=TmnxPppCpState, tmnxPppKeepaliveFailure=tmnxPppKeepaliveFailure, tmnxPppCpEntry=tmnxPppCpEntry, tmnxPppKaOutPktCount=tmnxPppKaOutPktCount, tmnxPppRemoteIPv4Address=tmnxPppRemoteIPv4Address, tmnxPppLoopbackClear=tmnxPppLoopbackClear, tmnxPppRemoteMagicNumber=tmnxPppRemoteMagicNumber, tmnxPppNotificationGroup=tmnxPppNotificationGroup, tmnxPppLineMonitorMethod=tmnxPppLineMonitorMethod, tmnxPppCpTable=tmnxPppCpTable, tmnxPppCpUp=tmnxPppCpUp, tmnxPppObjs=tmnxPppObjs, tmnxPppNotification=tmnxPppNotification, tmnxPppLocalIPv6AddressType=tmnxPppLocalIPv6AddressType, tmnxPppGroup=tmnxPppGroup, tmnxPPPObsoleteV4v0Group=tmnxPPPObsoleteV4v0Group, tmnxPppKaPeriod=tmnxPppKaPeriod, tmnxPppRemoteIPv6AddressType=tmnxPppRemoteIPv6AddressType, tmnxPpp7750V4v0Group=tmnxPpp7750V4v0Group, tmnxPppCpRestartCount=tmnxPppCpRestartCount, tmnxPppKaInPktCount=tmnxPppKaInPktCount, tmnxPppLinkPhase=tmnxPppLinkPhase, tmnxPppKaThresholdExceedsCount=tmnxPppKaThresholdExceedsCount, tmnxPppLqmLastClearedTime=tmnxPppLqmLastClearedTime, tmnxPppKaTimeDropLink=tmnxPppKaTimeDropLink, tmnxPppCpState=tmnxPppCpState, tmnxPppNcpUp=tmnxPppNcpUp, tmnxPppKaLastClearedTime=tmnxPppKaLastClearedTime, tmnxPppLqmOutPktCount=tmnxPppLqmOutPktCount, tmnxPppRemoteMacAddress=tmnxPppRemoteMacAddress, tmnxPppCompliance=tmnxPppCompliance, tmnxPppCpProtocol=tmnxPppCpProtocol, tmnxPppCompliances=tmnxPppCompliances, tmnxPppMIBModule=tmnxPppMIBModule, tmnxPppHdrCompression=tmnxPppHdrCompression, tmnxPppLocalIPv6Address=tmnxPppLocalIPv6Address, tmnxPppCpDown=tmnxPppCpDown, PYSNMP_MODULE_ID=tmnxPppMIBModule, tmnxPppLqmInRate=tmnxPppLqmInRate, tmnxPpp7750V4v0Compliance=tmnxPpp7750V4v0Compliance, tmnxPppLqmOutRate=tmnxPppLqmOutRate, tmnxPppGroups=tmnxPppGroups, tmnxPppRemoteIPv4AddressType=tmnxPppRemoteIPv4AddressType, tmnxPppCompressionGroup=tmnxPppCompressionGroup, tmnxPpp7450V4v0Compliance=tmnxPpp7450V4v0Compliance, tmnxPppLqmInPktCount=tmnxPppLqmInPktCount, tmnxPppRemoteIPv6Address=tmnxPppRemoteIPv6Address, tmnxPppQuality=tmnxPppQuality, tmnxPppLqmTimeDropLink=tmnxPppLqmTimeDropLink, tmnxPppCpLastClearedTime=tmnxPppCpLastClearedTime, tmnxPppLoopback=tmnxPppLoopback, tmnxPppConformance=tmnxPppConformance, tmnxPppNcpDown=tmnxPppNcpDown, tmnxPpp77x0V6v0Compliance=tmnxPpp77x0V6v0Compliance, tmnxPppCpLastChange=tmnxPppCpLastChange, tmnxPppKaDropCount=tmnxPppKaDropCount)
