#
# PySNMP MIB module TNPP-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TNPP-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, IpAddress, Counter64, ModuleIdentity, Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, enterprises, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "IpAddress", "Counter64", "ModuleIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "enterprises", "TimeTicks", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTTNPPPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32), )
if mibBuilder.loadTexts: cdx6500PPCTTNPPPortTable.setStatus('mandatory')
cdx6500PPCTTNPPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1), ).setIndexNames((0, "TNPP-OPT-MIB", "tnppPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTTNPPPortEntry.setStatus('mandatory')
tnppPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgPortNumber.setStatus('mandatory')
tnppPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(37))).clone(namedValues=NamedValues(("tnpp", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgPortType.setStatus('mandatory')
tnppPCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 13, 14, 15, 16))).clone(namedValues=NamedValues(("speed300", 3), ("speed1200", 4), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgPortSpeed.setStatus('mandatory')
tnppPCfgCallControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 100))).clone(namedValues=NamedValues(("dtr", 2), ("dataDrv", 3), ("powerOn", 4), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgCallControl.setStatus('mandatory')
tnppPCfgCRCOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("transp", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgCRCOption.setStatus('mandatory')
tnppPCfgTANControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("mps2000Mode", 1), ("unipageMode", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgTANControl.setStatus('mandatory')
tnppPCfgCANReports = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgCANReports.setStatus('mandatory')
tnppPCfgRSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgRSCount.setStatus('mandatory')
tnppPCfgMaxRSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgMaxRSCount.setStatus('mandatory')
tnppPCfgRSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgRSSupport.setStatus('mandatory')
tnppPCfgAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgAutocallMnemonic.setStatus('mandatory')
tnppPCfgAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgAutocallTimeout.setStatus('mandatory')
tnppPCfgMaxAutocallAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgMaxAutocallAttempt.setStatus('mandatory')
tnppPCfgProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("none", 1), ("cpOnly", 2), ("fullDcp", 3), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgProtectionLevel.setStatus('mandatory')
tnppPCfgReconnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgReconnTimeout.setStatus('mandatory')
tnppPCfgMaxReconnAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgMaxReconnAttempt.setStatus('mandatory')
tnppPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgElectricalInterfaceType.setStatus('mandatory')
tnppPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
tnppPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 32, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTTNPPPStatTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33))
tnppPGenStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1), )
if mibBuilder.loadTexts: tnppPGenStatTable.setStatus('mandatory')
tnppPGenStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1), ).setIndexNames((0, "TNPP-OPT-MIB", "tnppPGStatPortNumber"))
if mibBuilder.loadTexts: tnppPGenStatEntry.setStatus('mandatory')
tnppPGStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatPortNumber.setStatus('mandatory')
tnppPGStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(36))).clone(namedValues=NamedValues(("tnpp", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatPortType.setStatus('mandatory')
tnppPGStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("up", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatPortStatus.setStatus('mandatory')
tnppPGStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatPortSpeed.setStatus('mandatory')
tnppPGStatPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatPortUtilIn.setStatus('mandatory')
tnppPGStatPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatPortUtilOut.setStatus('mandatory')
tnppPGStatParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatParityErrors.setStatus('mandatory')
tnppPGStatOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatOverrunErrors.setStatus('mandatory')
tnppPGStatFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatFramingErrors.setStatus('mandatory')
tnppPGStatLocalDTEState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatLocalDTEState.setStatus('mandatory')
tnppPGStatRemoteDTEState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatRemoteDTEState.setStatus('mandatory')
tnppPGStatRemotePadQ = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatRemotePadQ.setStatus('mandatory')
tnppPGStatLocalTerminalQ = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatLocalTerminalQ.setStatus('mandatory')
tnppPGStatReadyQ = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatReadyQ.setStatus('mandatory')
tnppPGStatHoldQ = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPGStatHoldQ.setStatus('mandatory')
tnppPDataSummaryStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2), )
if mibBuilder.loadTexts: tnppPDataSummaryStatTable.setStatus('mandatory')
tnppPDataSummaryStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1), ).setIndexNames((0, "TNPP-OPT-MIB", "tnppPDSStatPortNumber"))
if mibBuilder.loadTexts: tnppPDataSummaryStatEntry.setStatus('mandatory')
tnppPDSStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatPortNumber.setStatus('mandatory')
tnppPDSStatTotalCharIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatTotalCharIn.setStatus('mandatory')
tnppPDSStatTotalCharOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatTotalCharOut.setStatus('mandatory')
tnppPDSStatTotalFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatTotalFramesIn.setStatus('mandatory')
tnppPDSStatTotalFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatTotalFramesOut.setStatus('mandatory')
tnppPDSStatCharInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatCharInPerSec.setStatus('mandatory')
tnppPDSStatCharOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatCharOutPerSec.setStatus('mandatory')
tnppPDSStatFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatFramesInPerSec.setStatus('mandatory')
tnppPDSStatFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPDSStatFramesOutPerSec.setStatus('mandatory')
tnppPFrameSummaryStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3), )
if mibBuilder.loadTexts: tnppPFrameSummaryStatTable.setStatus('mandatory')
tnppPFrameSummaryStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1), ).setIndexNames((0, "TNPP-OPT-MIB", "tnppPFSStatPortNumber"))
if mibBuilder.loadTexts: tnppPFrameSummaryStatEntry.setStatus('mandatory')
tnppPFSStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatPortNumber.setStatus('mandatory')
tnppPFSStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("init", 1), ("awaitEnqResp", 2), ("ready", 3), ("transmitting", 4), ("trnsmitResponse", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatLinkState.setStatus('mandatory')
tnppPFSStatCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatCRCErrors.setStatus('mandatory')
tnppPFSStatLinkFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatLinkFramingErrors.setStatus('mandatory')
tnppPFSStatProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatProtocolErrors.setStatus('mandatory')
tnppPFSStatACKFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatACKFramesIn.setStatus('mandatory')
tnppPFSStatACKFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatACKFramesOut.setStatus('mandatory')
tnppPFSStatNAKFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatNAKFramesIn.setStatus('mandatory')
tnppPFSStatNAKFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatNAKFramesOut.setStatus('mandatory')
tnppPFSStatRSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatRSFramesIn.setStatus('mandatory')
tnppPFSStatRSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatRSFramesOut.setStatus('mandatory')
tnppPFSStatCANFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatCANFramesIn.setStatus('mandatory')
tnppPFSStatCANFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatCANFramesOut.setStatus('mandatory')
tnppPFSStatEOTFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatEOTFramesIn.setStatus('mandatory')
tnppPFSStatEOTFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatEOTFramesOut.setStatus('mandatory')
tnppPFSStatENQFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatENQFramesIn.setStatus('mandatory')
tnppPFSStatENQFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatENQFramesOut.setStatus('mandatory')
tnppPFSStatDataFramesInPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatDataFramesInPassed.setStatus('mandatory')
tnppPFSStatDataFramesOutPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatDataFramesOutPassed.setStatus('mandatory')
tnppPFSStatDataFramesInDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatDataFramesInDiscarded.setStatus('mandatory')
tnppPFSStatDataFramesOutDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 33, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnppPFSStatDataFramesOutDiscarded.setStatus('mandatory')
cdx6500ContTNPPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 15))
cdx6500ContTNPPPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 15, 1), )
if mibBuilder.loadTexts: cdx6500ContTNPPPortTable.setStatus('mandatory')
cdx6500ContTNPPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 15, 1, 1), ).setIndexNames((0, "TNPP-OPT-MIB", "tnppPContPortNumber"))
if mibBuilder.loadTexts: cdx6500ContTNPPPortEntry.setStatus('mandatory')
tnppPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: tnppPContPortNumber.setStatus('mandatory')
tnppPContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("busyout", 4), ("resetstats", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tnppPContPortControl.setStatus('mandatory')
mibBuilder.exportSymbols("TNPP-OPT-MIB", tnppPGStatPortUtilIn=tnppPGStatPortUtilIn, cdxProductSpecific=cdxProductSpecific, cdx6500ContTNPPPortEntry=cdx6500ContTNPPPortEntry, tnppPDataSummaryStatEntry=tnppPDataSummaryStatEntry, tnppPDSStatTotalCharOut=tnppPDSStatTotalCharOut, tnppPDSStatPortNumber=tnppPDSStatPortNumber, tnppPDSStatCharOutPerSec=tnppPDSStatCharOutPerSec, cdx6500ContTNPPTable=cdx6500ContTNPPTable, tnppPCfgV24ElectricalInterfaceOption=tnppPCfgV24ElectricalInterfaceOption, tnppPGStatRemoteDTEState=tnppPGStatRemoteDTEState, tnppPCfgPortSpeed=tnppPCfgPortSpeed, cdx6500Statistics=cdx6500Statistics, cdx6500ContTNPPPortTable=cdx6500ContTNPPPortTable, tnppPCfgReconnTimeout=tnppPCfgReconnTimeout, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500PPSTTNPPPStatTable=cdx6500PPSTTNPPPStatTable, cdx6500PPCTTNPPPortEntry=cdx6500PPCTTNPPPortEntry, tnppPCfgAutocallTimeout=tnppPCfgAutocallTimeout, tnppPCfgMaxReconnAttempt=tnppPCfgMaxReconnAttempt, tnppPFSStatENQFramesOut=tnppPFSStatENQFramesOut, tnppPFSStatDataFramesInDiscarded=tnppPFSStatDataFramesInDiscarded, tnppPFSStatCANFramesIn=tnppPFSStatCANFramesIn, tnppPDSStatFramesInPerSec=tnppPDSStatFramesInPerSec, tnppPFSStatPortNumber=tnppPFSStatPortNumber, tnppPDSStatTotalCharIn=tnppPDSStatTotalCharIn, tnppPFSStatLinkFramingErrors=tnppPFSStatLinkFramingErrors, tnppPGStatOverrunErrors=tnppPGStatOverrunErrors, tnppPFSStatACKFramesIn=tnppPFSStatACKFramesIn, tnppPGStatPortUtilOut=tnppPGStatPortUtilOut, tnppPContPortControl=tnppPContPortControl, tnppPFSStatACKFramesOut=tnppPFSStatACKFramesOut, tnppPFSStatNAKFramesOut=tnppPFSStatNAKFramesOut, tnppPGStatFramingErrors=tnppPGStatFramingErrors, tnppPCfgAutocallMnemonic=tnppPCfgAutocallMnemonic, tnppPDSStatTotalFramesIn=tnppPDSStatTotalFramesIn, tnppPFSStatDataFramesOutPassed=tnppPFSStatDataFramesOutPassed, cdx6500PPCTTNPPPortTable=cdx6500PPCTTNPPPortTable, tnppPFrameSummaryStatTable=tnppPFrameSummaryStatTable, tnppPContPortNumber=tnppPContPortNumber, tnppPDSStatTotalFramesOut=tnppPDSStatTotalFramesOut, tnppPGStatPortType=tnppPGStatPortType, tnppPCfgRSCount=tnppPCfgRSCount, tnppPGStatReadyQ=tnppPGStatReadyQ, tnppPGenStatEntry=tnppPGenStatEntry, cdx6500Controls=cdx6500Controls, tnppPGStatPortStatus=tnppPGStatPortStatus, tnppPCfgRSSupport=tnppPCfgRSSupport, tnppPGStatPortSpeed=tnppPGStatPortSpeed, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, tnppPGStatPortNumber=tnppPGStatPortNumber, tnppPDSStatCharInPerSec=tnppPDSStatCharInPerSec, cdx6500=cdx6500, tnppPFSStatENQFramesIn=tnppPFSStatENQFramesIn, tnppPGStatParityErrors=tnppPGStatParityErrors, tnppPFSStatProtocolErrors=tnppPFSStatProtocolErrors, cdx6500Configuration=cdx6500Configuration, codex=codex, tnppPFSStatCRCErrors=tnppPFSStatCRCErrors, tnppPGStatRemotePadQ=tnppPGStatRemotePadQ, tnppPGStatHoldQ=tnppPGStatHoldQ, tnppPGStatLocalDTEState=tnppPGStatLocalDTEState, tnppPCfgProtectionLevel=tnppPCfgProtectionLevel, tnppPFrameSummaryStatEntry=tnppPFrameSummaryStatEntry, tnppPFSStatEOTFramesOut=tnppPFSStatEOTFramesOut, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, tnppPCfgCallControl=tnppPCfgCallControl, tnppPFSStatRSFramesIn=tnppPFSStatRSFramesIn, tnppPGenStatTable=tnppPGenStatTable, tnppPCfgCANReports=tnppPCfgCANReports, tnppPFSStatDataFramesInPassed=tnppPFSStatDataFramesInPassed, tnppPCfgElectricalInterfaceType=tnppPCfgElectricalInterfaceType, tnppPDSStatFramesOutPerSec=tnppPDSStatFramesOutPerSec, tnppPFSStatDataFramesOutDiscarded=tnppPFSStatDataFramesOutDiscarded, tnppPCfgMaxAutocallAttempt=tnppPCfgMaxAutocallAttempt, tnppPFSStatNAKFramesIn=tnppPFSStatNAKFramesIn, tnppPCfgPortType=tnppPCfgPortType, tnppPCfgMaxRSCount=tnppPCfgMaxRSCount, tnppPCfgHighSpeedElectricalInterfaceOption=tnppPCfgHighSpeedElectricalInterfaceOption, tnppPFSStatRSFramesOut=tnppPFSStatRSFramesOut, tnppPCfgCRCOption=tnppPCfgCRCOption, DisplayString=DisplayString, tnppPFSStatLinkState=tnppPFSStatLinkState, tnppPFSStatEOTFramesIn=tnppPFSStatEOTFramesIn, tnppPDataSummaryStatTable=tnppPDataSummaryStatTable, tnppPFSStatCANFramesOut=tnppPFSStatCANFramesOut, tnppPCfgTANControl=tnppPCfgTANControl, tnppPGStatLocalTerminalQ=tnppPGStatLocalTerminalQ, tnppPCfgPortNumber=tnppPCfgPortNumber)
