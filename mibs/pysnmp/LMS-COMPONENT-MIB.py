#
# PySNMP MIB module LMS-COMPONENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LMS-COMPONENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, Integer32, NotificationType, ModuleIdentity, ObjectIdentity, IpAddress, Bits, Counter32, iso, Gauge32, MibIdentifier, Unsigned32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Integer32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Bits", "Counter32", "iso", "Gauge32", "MibIdentifier", "Unsigned32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lotus = MibIdentifier((1, 3, 6, 1, 4, 1, 334))
notes = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 1))
lcs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 2))
softswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3))
common_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 1)).setLabel("common-mibs")
lms = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2))
class TimeInterval(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class UInteger32(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

lmsComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1))
lmsSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1))
lmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 2))
lmsMsgStore = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 3))
lmsTransports = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4))
lmsIPC = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5))
lmsDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6))
lmsSwitchID = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchID.setStatus('mandatory')
lmsSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchName.setStatus('mandatory')
lmsSwitchVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchVersion.setStatus('mandatory')
lmsSwitchUpTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchUpTime.setStatus('mandatory')
lmsSwitchOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("starting", 3), ("shutdown", 4), ("configurable", 5), ("running", 6), ("stopping", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchOperStatus.setStatus('mandatory')
lmsSwitchLastChange = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchLastChange.setStatus('mandatory')
lmsSwitchDesiredOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stopped", 1), ("shutdown", 2), ("configurable", 3), ("running", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchDesiredOperStatus.setStatus('mandatory')
lmsSwitchDescr = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchDescr.setStatus('mandatory')
lmsSwitchContact = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchContact.setStatus('mandatory')
lmsMsgStoreDatabaseUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsMsgStoreDatabaseUtilization.setStatus('mandatory')
lmsMsgStoreFileSystemUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsMsgStoreFileSystemUtilization.setStatus('mandatory')
snaState = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaState.setStatus('mandatory')
osiState = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osiState.setStatus('mandatory')
tcpIpState = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIpState.setStatus('mandatory')
transportLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transportLastUpdate.setStatus('mandatory')
ipcOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcOperStatus.setStatus('mandatory')
semaphoreMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 2), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreMaxUsers.setStatus('mandatory')
semaphoreCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreCurrUsers.setStatus('mandatory')
semaphoreMaxSemaphores = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 4), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreMaxSemaphores.setStatus('mandatory')
semaphoreCurrSemaphores = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreCurrSemaphores.setStatus('mandatory')
semaphoreMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 6), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreMaxNodes.setStatus('mandatory')
semaphoreCurrNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreCurrNodes.setStatus('mandatory')
sharedmemMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 8), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxUsers.setStatus('mandatory')
sharedmemCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrUsers.setStatus('mandatory')
sharedmemMaxSeqments = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 10), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxSeqments.setStatus('mandatory')
sharedmemCurrSegments = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrSegments.setStatus('mandatory')
sharedmemMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 12), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxNodes.setStatus('mandatory')
sharedmemCurrNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrNodes.setStatus('mandatory')
sharedmemMaxMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 14), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxMempool.setStatus('mandatory')
sharedmemCurrMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrMempool.setStatus('mandatory')
msgqueueMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 16), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxUsers.setStatus('mandatory')
msgqueueCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrUsers.setStatus('mandatory')
msgqueueMaxQueues = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 18), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxQueues.setStatus('mandatory')
msgqueueCurrQueues = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrQueues.setStatus('mandatory')
msgqueueMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 20), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxNodes.setStatus('mandatory')
msgqueueCurrNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrNodes.setStatus('mandatory')
msgqueueMaxMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 22), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxMempool.setStatus('mandatory')
msgqueueCurrMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrMempool.setStatus('mandatory')
dbConfigSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbConfigSpaceUtilization.setStatus('mandatory')
dbNameSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbNameSpaceUtilization.setStatus('mandatory')
dbDistribSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbDistribSpaceUtilization.setStatus('mandatory')
dbSystemSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSystemSpaceUtilization.setStatus('mandatory')
dbLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbLastUpdate.setStatus('mandatory')
mibBuilder.exportSymbols("LMS-COMPONENT-MIB", lmsSwitchUpTime=lmsSwitchUpTime, osiState=osiState, msgqueueMaxMempool=msgqueueMaxMempool, lmsSwitchID=lmsSwitchID, semaphoreCurrSemaphores=semaphoreCurrSemaphores, lotus=lotus, sharedmemCurrSegments=sharedmemCurrSegments, ipcOperStatus=ipcOperStatus, msgqueueMaxUsers=msgqueueMaxUsers, msgqueueCurrQueues=msgqueueCurrQueues, dbNameSpaceUtilization=dbNameSpaceUtilization, dbDistribSpaceUtilization=dbDistribSpaceUtilization, lmsSwitchDesiredOperStatus=lmsSwitchDesiredOperStatus, semaphoreMaxUsers=semaphoreMaxUsers, notes=notes, sharedmemMaxSeqments=sharedmemMaxSeqments, lms=lms, UInteger32=UInteger32, lmsMsgStore=lmsMsgStore, msgqueueCurrNodes=msgqueueCurrNodes, lmsSwitchDescr=lmsSwitchDescr, lmsDatabase=lmsDatabase, semaphoreCurrNodes=semaphoreCurrNodes, sharedmemCurrUsers=sharedmemCurrUsers, lmsTransports=lmsTransports, transportLastUpdate=transportLastUpdate, TimeInterval=TimeInterval, dbLastUpdate=dbLastUpdate, lmsComponent=lmsComponent, common_mibs=common_mibs, softswitch=softswitch, sharedmemCurrMempool=sharedmemCurrMempool, lmsSwitchVersion=lmsSwitchVersion, sharedmemMaxUsers=sharedmemMaxUsers, sharedmemMaxNodes=sharedmemMaxNodes, dbConfigSpaceUtilization=dbConfigSpaceUtilization, tcpIpState=tcpIpState, lmsSwitchName=lmsSwitchName, lmsSystem=lmsSystem, lcs=lcs, sharedmemCurrNodes=sharedmemCurrNodes, lmsSwitchContact=lmsSwitchContact, lmsSwitchOperStatus=lmsSwitchOperStatus, msgqueueMaxNodes=msgqueueMaxNodes, semaphoreMaxNodes=semaphoreMaxNodes, lmsSwitch=lmsSwitch, lmsMsgStoreFileSystemUtilization=lmsMsgStoreFileSystemUtilization, sharedmemMaxMempool=sharedmemMaxMempool, semaphoreMaxSemaphores=semaphoreMaxSemaphores, lmsIPC=lmsIPC, msgqueueCurrUsers=msgqueueCurrUsers, snaState=snaState, msgqueueCurrMempool=msgqueueCurrMempool, dbSystemSpaceUtilization=dbSystemSpaceUtilization, lmsMsgStoreDatabaseUtilization=lmsMsgStoreDatabaseUtilization, lmsSwitchLastChange=lmsSwitchLastChange, msgqueueMaxQueues=msgqueueMaxQueues, semaphoreCurrUsers=semaphoreCurrUsers)
