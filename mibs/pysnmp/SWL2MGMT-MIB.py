#
# PySNMP MIB module SWL2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWL2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, ModuleIdentity, Bits, Integer32, MibIdentifier, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, NotificationType, NotificationType, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "ModuleIdentity", "Bits", "Integer32", "MibIdentifier", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "NotificationType", "NotificationType", "ObjectIdentity", "Counter32")
MacAddress, DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
privateMgmt, = mibBuilder.importSymbols("SWPRIMGMT-MIB", "privateMgmt")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('enterprise, Inc.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class VlanIndex(Unsigned32):
    pass

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1))
swL2UnitMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 2))
swL2ModuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 3))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4))
swL2FilterMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 9))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10))
swL2TrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12))
swL2QosMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 14))
swL2StormCtrlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15))
swL2ACLQosMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16))
swL2MgmtPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1))
swDevInfoSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setStatus('current')
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swDevInfoConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoConsoleInUse.setStatus('current')
swDevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 324))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setStatus('current')
swL2DevCtrlUpDownloadState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("in-process", 2), ("invalid-file", 3), ("violation", 4), ("file-not-found", 5), ("disk-full", 6), ("complete", 7), ("time-out", 8), ("tftp-establish-fail", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DevCtrlUpDownloadState.setStatus('current')
swDevInfoSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("proceeding", 2), ("ready", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoSaveCfg.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlUpDownloadImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlUpDownloadImageFileName.setStatus('current')
swL2DevCtrlUpDownloadImageSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlUpDownloadImageSourceAddr.setStatus('current')
swL2DevCtrlUpDownloadImage = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlUpDownloadImage.setStatus('current')
swL2DevCtrlSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSaveCfg.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlStpForwardBPDU = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpForwardBPDU.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2UnitCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 2, 1))
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2PortInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setStatus('current')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("portType-100Base-TX", 2), ("portType-100Base-FX", 3), ("portType-100Base-FL", 4), ("portType-1000Base-T", 5), ("portType-1000Base-SX", 6), ("portType-1000Base-LX", 7), ("portType-1000Base-GBIC-SX", 8), ("portType-1000Base-GBIC-LX", 9), ("portType-1000Base-GBIC-CWDM", 10), ("portType-1000Base-GBIC-XD", 11), ("portType-1000Base-GBIC-ZX", 12), ("portType-1000Base-GBIC-COPPER", 13), ("portType-1000Base-GBIC-OTHER", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2PortCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Full", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlAddressLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAddressLearningState.setStatus('current')
swL2PortUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 3), )
if mibBuilder.loadTexts: swL2PortUtilTable.setStatus('current')
swL2PortUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 3, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2PortUtilPortIndex"))
if mibBuilder.loadTexts: swL2PortUtilEntry.setStatus('current')
swL2PortUtilPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortUtilPortIndex.setStatus('current')
swL2PortUtilTxSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortUtilTxSec.setStatus('current')
swL2PortUtilRxSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortUtilRxSec.setStatus('current')
swL2PortUtilUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortUtilUtilization.setStatus('current')
swL2FilterAddrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1))
swL2FilterAddrMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FilterAddrMaxSupportedEntries.setStatus('current')
swL2FilterAddrCurrentTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FilterAddrCurrentTotalEntries.setStatus('current')
swL2FilterAddrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1, 3), )
if mibBuilder.loadTexts: swL2FilterAddrCtrlTable.setStatus('current')
swL2FilterAddrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1, 3, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2FilterAddrMacIndex"))
if mibBuilder.loadTexts: swL2FilterAddrCtrlEntry.setStatus('current')
swL2FilterAddrMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FilterAddrMacIndex.setStatus('current')
swL2FilterAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4), ("invalid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FilterAddrState.setStatus('current')
swL2StaticVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1), )
if mibBuilder.loadTexts: swL2StaticVlanTable.setStatus('current')
swL2StaticVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2StaticVlanIndex"))
if mibBuilder.loadTexts: swL2StaticVlanEntry.setStatus('current')
swL2StaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StaticVlanIndex.setStatus('current')
swL2StaticVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanName.setStatus('current')
swL2StaticVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byport", 1), ("byIpSubnet", 2), ("byProtocolId", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanType.setStatus('current')
swL2StaticVlanProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 0), ("ipEther2", 1), ("rarpEther2", 2), ("ipx802dot3", 3), ("ipx802dot2", 4), ("ipxSnap", 5), ("ipxEther2", 6), ("apltkEther2Snap", 7), ("decEther2", 8), ("decOtherEther2", 9), ("sna802dot2", 10), ("snaEther2", 11), ("netBios", 12), ("xnsEther2", 13), ("vinesEther2", 14), ("ipv6Ether2", 15), ("userDefined", 16), ("arpEther2", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanProtocolId.setStatus('current')
swL2StaticVlanIpSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanIpSubnetAddr.setStatus('current')
swL2StaticVlanIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanIpSubnetMask.setStatus('current')
swL2StaticVlanUserDefinedPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanUserDefinedPid.setStatus('current')
swL2StaticVlanEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("ethernet2", 2), ("llc", 3), ("snap", 4), ("un-used", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanEncap.setStatus('current')
swL2StaticVlanUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 4), ValueRangeConstraint(6, 6), ValueRangeConstraint(7, 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanUserPriority.setStatus('current')
swL2StaticVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanEgressPorts.setStatus('current')
swL2StaticVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 11), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanUntaggedPorts.setStatus('current')
swL2StaticVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanStatus.setStatus('current')
swL2StaticVlanIpSubnetArpClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StaticVlanIpSubnetArpClassId.setStatus('current')
swL2VlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 2), )
if mibBuilder.loadTexts: swL2VlanPortTable.setStatus('current')
swL2VlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 2, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2VlanPortIndex"))
if mibBuilder.loadTexts: swL2VlanPortEntry.setStatus('current')
swL2VlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortIndex.setStatus('current')
swL2VlanPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortPvid.setStatus('current')
swL2VlanPortIngressChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanPortIngressChecking.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkBPDU8600InterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkBPDU8600InterState.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 9, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 4, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
swL2IGMPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5), )
if mibBuilder.loadTexts: swL2IGMPGroupTable.setStatus('current')
swL2IGMPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2IGMPVid"), (0, "SWL2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPGroupEntry.setStatus('current')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
swL2IGMPForwardTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 6), )
if mibBuilder.loadTexts: swL2IGMPForwardTable.setStatus('current')
swL2IGMPForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 6, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2IGMPForwardVid"), (0, "SWL2MGMT-MIB", "swL2IGMPForwardGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPForwardEntry.setStatus('current')
swL2IGMPForwardVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardVid.setStatus('current')
swL2IGMPForwardGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardGroupIpAddr.setStatus('current')
swL2IGMPForwardPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardPortMap.setStatus('current')
swL2IGMPRPTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 7), )
if mibBuilder.loadTexts: swL2IGMPRPTable.setStatus('current')
swL2IGMPRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 7, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2IGMPRPVid"))
if mibBuilder.loadTexts: swL2IGMPRPEntry.setStatus('current')
swL2IGMPRPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRPVid.setStatus('current')
swL2IGMPRPStaticRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 7, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRPStaticRouterPort.setStatus('current')
swL2IGMPRPDynamicRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 7, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRPDynamicRouterPort.setStatus('current')
swL2IGMPMulticastRouterOnly = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastRouterOnly.setStatus('current')
swL2IGMPGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 9), )
if mibBuilder.loadTexts: swL2IGMPGroupPortTable.setStatus('current')
swL2IGMPGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 9, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2IGMPVid"), (0, "SWL2MGMT-MIB", "swL2IGMPGroupIpAddr"), (0, "SWL2MGMT-MIB", "swL2IGMPPortMember"))
if mibBuilder.loadTexts: swL2IGMPGroupPortEntry.setStatus('current')
swL2IGMPPortMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMember.setStatus('current')
swL2IGMPPortAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortAgingTime.setStatus('current')
swL2IGMPMulticastFilter = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastFilter.setStatus('current')
swL2TrafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1), )
if mibBuilder.loadTexts: swL2TrafficCtrlTable.setStatus('current')
swL2TrafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2TrafficCtrlGroupIndex"))
if mibBuilder.loadTexts: swL2TrafficCtrlEntry.setStatus('current')
swL2TrafficCtrlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlGroupIndex.setStatus('current')
swL2TrafficCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlUnitIndex.setStatus('current')
swL2TrafficCtrlBMStormthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBMStormthreshold.setStatus('current')
swL2TrafficCtrlBcastStormCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBcastStormCtrl.setStatus('current')
swL2TrafficCtrlMcastStormCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlMcastStormCtrl.setStatus('current')
swL2TrafficCtrlDlfStormCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlDlfStormCtrl.setStatus('current')
swL2QosSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 1), )
if mibBuilder.loadTexts: swL2QosSchedulingTable.setStatus('current')
swL2QosSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 1, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2QosSchedulingClassId"))
if mibBuilder.loadTexts: swL2QosSchedulingEntry.setStatus('current')
swL2QosSchedulingClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QosSchedulingClassId.setStatus('current')
swL2QosSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosSchedulingMaxPkts.setStatus('current')
swL2QosSchedulingMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosSchedulingMaxLatency.setStatus('current')
swL2QosPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2), )
if mibBuilder.loadTexts: swL2QosPriorityTable.setStatus('current')
swL2QosPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2QosPriorityType"), (0, "SWL2MGMT-MIB", "swL2QosPriorityValue"))
if mibBuilder.loadTexts: swL2QosPriorityEntry.setStatus('current')
swL2QosPriorityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("type-dscp", 2), ("type-8021p", 3), ("type-tcp", 4), ("type-udp", 5), ("type-ip", 6), ("type-mac", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QosPriorityType.setStatus('current')
swL2QosPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 1), ValueSizeConstraint(2, 2), ValueSizeConstraint(4, 4), ValueSizeConstraint(6, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QosPriorityValue.setStatus('current')
swL2QosPriorityPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosPriorityPriority.setStatus('current')
swL2QosPriorityPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosPriorityPriorityState.setStatus('current')
swL2QosPriorityReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosPriorityReplaceDscp.setStatus('current')
swL2QosPriorityReplaceDscpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosPriorityReplaceDscpState.setStatus('current')
swL2QosPriorityReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosPriorityReplacePriority.setStatus('current')
swL2QosPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QosPriorityState.setStatus('current')
managementPortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2) + (0,1))
managementPortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2) + (0,2))
swL2StormCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 1), )
if mibBuilder.loadTexts: swL2StormCtrlTable.setStatus('current')
swL2StormCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 1, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2StormCtrlPortIndex"))
if mibBuilder.loadTexts: swL2StormCtrlEntry.setStatus('current')
swL2StormCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StormCtrlPortIndex.setStatus('current')
swL2StormCtrlBcastStormCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StormCtrlBcastStormCtrl.setStatus('current')
swL2StormCtrlMcastStormCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StormCtrlMcastStormCtrl.setStatus('current')
swL2StormCtrlBMStormThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StormCtrlBMStormThreshold.setStatus('current')
swL2StormCtrlDlfState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StormCtrlDlfState.setStatus('current')
swL2StormCtrlDlfThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 148810))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StormCtrlDlfThreshold.setStatus('current')
swL2CpuRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 4), )
if mibBuilder.loadTexts: swL2CpuRateLimitTable.setStatus('current')
swL2CpuRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 4, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2CpuRateLimitPortIndex"))
if mibBuilder.loadTexts: swL2CpuRateLimitEntry.setStatus('current')
swL2CpuRateLimitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CpuRateLimitPortIndex.setStatus('current')
swL2CpuRateLimitState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CpuRateLimitState.setStatus('current')
swL2CpuRateLimitBcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CpuRateLimitBcastThreshold.setStatus('current')
swL2CpuRateLimitMcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CpuRateLimitMcastThreshold.setStatus('current')
swL2CpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CpuUtilization.setStatus('current')
swL2ACLQosTemplate1Mode = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("security", 2), ("qos", 3), ("l4-switch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplate1Mode.setStatus('current')
swL2ACLQosTemplate2Mode = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("security", 2), ("qos", 3), ("l4-switch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplate2Mode.setStatus('current')
swL2ACLQosFlowClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3), )
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierTable.setStatus('current')
swL2ACLQosFlowClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosFlowClassifierTemplateId"))
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierEntry.setStatus('current')
swL2ACLQosFlowClassifierTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierTemplateId.setStatus('current')
swL2ACLQosFlowClassifierCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("security", 2), ("qos", 3), ("l4-switch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierCurrentMode.setStatus('current')
swL2ACLQosFlowClassifierSecuritySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierSecuritySrcMask.setStatus('current')
swL2ACLQosFlowClassifierQosFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flavor-8021p", 1), ("flavor-dscp", 2), ("flavor-ip", 3), ("flavor-tcp", 4), ("flavor-udp", 5), ("flavor-un-used", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierQosFlavor.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchTCPDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchTCPDstIp.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchTCPSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchTCPSrcIp.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchTCPTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchTCPTos.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchTCPDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchTCPDstPort.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchTCPSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchTCPSrcPort.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchTCPFlags.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchUDPDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchUDPDstIp.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchUDPSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchUDPSrcIp.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchUDPTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchUDPTos.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchUDPDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchUDPDstPort.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchUDPSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchUDPSrcPort.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchOtherDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchOtherDstIp.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchOtherSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchOtherSrcIp.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchOtherTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchOtherTos.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchOtherL4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchOtherL4Protocol.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchOtherICMPMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchOtherICMPMessage.setStatus('current')
swL2ACLQosFlowClassifierL4SwitchOtherIGMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierL4SwitchOtherIGMPType.setStatus('current')
swL2ACLQosFlowClassifierActiveRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierActiveRuleNumber.setStatus('current')
swL2ACLQosFlowClassifierSecurityDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 3, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierSecurityDstMask.setStatus('current')
swL2ACLQosFlowClassifierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 4), )
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierVlanTable.setStatus('current')
swL2ACLQosFlowClassifierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 4, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosFlowClassifierVlanTemplateId"), (0, "SWL2MGMT-MIB", "swL2ACLQosFlowClassifierVlanVlanName"))
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierVlanEntry.setStatus('current')
swL2ACLQosFlowClassifierVlanTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierVlanTemplateId.setStatus('current')
swL2ACLQosFlowClassifierVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierVlanVlanName.setStatus('current')
swL2ACLQosFlowClassifierVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("attached", 2), ("detached", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFlowClassifierVlanState.setStatus('current')
swL2ACLQosTemplateRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5), )
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleTable.setStatus('current')
swL2ACLQosTemplateRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosTemplateRuleTemplateId"), (0, "SWL2MGMT-MIB", "swL2ACLQosTemplateRuleIndex"))
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleEntry.setStatus('current')
swL2ACLQosTemplateRuleTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleTemplateId.setStatus('current')
swL2ACLQosTemplateRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleIndex.setStatus('current')
swL2ACLQosTemplateRuleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("security", 2), ("qos", 3), ("l4-switch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleMode.setStatus('current')
swL2ACLQosTemplateRuleSecuritySrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleSecuritySrcIp.setStatus('current')
swL2ACLQosTemplateRuleQosFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flavor-8021p", 1), ("flavor-dscp", 2), ("flavor-ip", 3), ("flavor-tcp", 4), ("flavor-udp", 5), ("flavor-un-used", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleQosFlavor.setStatus('current')
swL2ACLQosTemplateRuleQosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), ValueSizeConstraint(2, 2), ValueSizeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleQosValue.setStatus('current')
swL2ACLQosTemplateRuleQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleQosPriority.setStatus('current')
swL2ACLQosTemplateRuleQosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleQosDscp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("other", 3), ("un-used", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionType.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPDstIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPTos.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPDstPort.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcPort.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fin", 1), ("syn", 2), ("rst", 3), ("psh", 4), ("ack", 5), ("urg", 6), ("un-used", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPFlags.setStatus('deprecated')
swL2ACLQosTemplateRuleL4SwitchSessionUDPDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionUDPDstIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionUDPTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionUDPTos.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionUDPDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionUDPDstPort.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcPort.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherDstIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherSrcIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherTos.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherL4Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("un-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherL4Protocol.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPType.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPCode.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionOtherIGMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("query", 1), ("response-version-1", 2), ("response-version-2", 3), ("response-version-all", 4), ("un-used", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionOtherIGMPType.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2), ("redirect", 3), ("un-used", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchActionType.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchActionForwardPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchActionForwardPriorityState.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchActionForwardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchActionForwardPriority.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchActionForwardDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchActionForwardDscp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchActionRedirectIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchActionRedirectIp.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchActionRedirectDropUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchActionRedirectDropUnreachable.setStatus('current')
swL2ACLQosTemplateRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleState.setStatus('current')
swL2ACLQosTemplateRuleL4SwitchSessionTCPFlagsAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 35), Bits().clone(namedValues=NamedValues(("fin", 0), ("syn", 1), ("rst", 2), ("psh", 3), ("ack", 4), ("urg", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleL4SwitchSessionTCPFlagsAll.setStatus('current')
swL2ACLQosTemplateRuleSecurityDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 5, 1, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosTemplateRuleSecurityDstIp.setStatus('current')
swL2ACLQosDestinationIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 6), )
if mibBuilder.loadTexts: swL2ACLQosDestinationIpFilterTable.setStatus('current')
swL2ACLQosDestinationIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 6, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosDestinationIpFilterIpAddr"))
if mibBuilder.loadTexts: swL2ACLQosDestinationIpFilterEntry.setStatus('current')
swL2ACLQosDestinationIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosDestinationIpFilterIndex.setStatus('obsolete')
swL2ACLQosDestinationIpFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosDestinationIpFilterIpAddr.setStatus('current')
swL2ACLQosDestinationIpFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosDestinationIpFilterState.setStatus('current')
swL2ACLQosFDBFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 7), )
if mibBuilder.loadTexts: swL2ACLQosFDBFilterTable.setStatus('current')
swL2ACLQosFDBFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 7, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosFDBFilterVlanName"), (0, "SWL2MGMT-MIB", "swL2ACLQosFDBFilterMacAddress"))
if mibBuilder.loadTexts: swL2ACLQosFDBFilterEntry.setStatus('current')
swL2ACLQosFDBFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFDBFilterIndex.setStatus('obsolete')
swL2ACLQosFDBFilterVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFDBFilterVlanName.setStatus('current')
swL2ACLQosFDBFilterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosFDBFilterMacAddress.setStatus('current')
swL2ACLQosFDBFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosFDBFilterState.setStatus('current')
swL2ACLQosIpFragmentFilterDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosIpFragmentFilterDropPkts.setStatus('current')
swL2ACLQosSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 9), )
if mibBuilder.loadTexts: swL2ACLQosSchedulingTable.setStatus('current')
swL2ACLQosSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 9, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosSchedulingPortIndex"), (0, "SWL2MGMT-MIB", "swL2ACLQosSchedulingClassId"))
if mibBuilder.loadTexts: swL2ACLQosSchedulingEntry.setStatus('current')
swL2ACLQosSchedulingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosSchedulingPortIndex.setStatus('current')
swL2ACLQosSchedulingClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosSchedulingClassId.setStatus('current')
swL2ACLQosSchedulingWRRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosSchedulingWRRValue.setStatus('current')
swL2ACLQosMacPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10), )
if mibBuilder.loadTexts: swL2ACLQosMacPriorityTable.setStatus('current')
swL2ACLQosMacPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10, 1), ).setIndexNames((0, "SWL2MGMT-MIB", "swL2ACLQosMacPriorityVlanName"), (0, "SWL2MGMT-MIB", "swL2ACLQosMacPriorityDstMacAddress"))
if mibBuilder.loadTexts: swL2ACLQosMacPriorityEntry.setStatus('current')
swL2ACLQosMacPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosMacPriorityIndex.setStatus('obsolete')
swL2ACLQosMacPriorityVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosMacPriorityVlanName.setStatus('current')
swL2ACLQosMacPriorityDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2ACLQosMacPriorityDstMacAddress.setStatus('current')
swL2ACLQosMacPriorityPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosMacPriorityPriorityValue.setStatus('current')
swL2ACLQosMacPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 16, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2ACLQosMacPriorityState.setStatus('current')
swL2MgmtPortCurrentLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MgmtPortCurrentLinkStatus.setStatus('current')
swL2MgmtPortCurrentNwayStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("half-10Mbps", 2), ("full-10Mbps", 3), ("half-100Mbps", 4), ("full-100Mbps", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MgmtPortCurrentNwayStatus.setStatus('current')
swL2MgmtPortAdminState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MgmtPortAdminState.setStatus('current')
swL2MgmtPortNwayState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MgmtPortNwayState.setStatus('current')
swL2MgmtPortFlowCtrlState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MgmtPortFlowCtrlState.setStatus('current')
swL2MgmtPortLinkUpDownTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 2, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MgmtPortLinkUpDownTrapEnable.setStatus('current')
mibBuilder.exportSymbols("SWL2MGMT-MIB", swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2DevInfo=swL2DevInfo, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2ACLQosFlowClassifierVlanTemplateId=swL2ACLQosFlowClassifierVlanTemplateId, swL2IGMPForwardPortMap=swL2IGMPForwardPortMap, swL2StormCtrlDlfThreshold=swL2StormCtrlDlfThreshold, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2ACLQosFlowClassifierTable=swL2ACLQosFlowClassifierTable, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2IGMPForwardVid=swL2IGMPForwardVid, swL2ACLQosFlowClassifierL4SwitchTCPDstPort=swL2ACLQosFlowClassifierL4SwitchTCPDstPort, swL2ACLQosSchedulingClassId=swL2ACLQosSchedulingClassId, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2FilterAddrCurrentTotalEntries=swL2FilterAddrCurrentTotalEntries, swL2IGMPQueryState=swL2IGMPQueryState, swL2MgmtPortCurrentNwayStatus=swL2MgmtPortCurrentNwayStatus, swL2ACLQosTemplateRuleL4SwitchSessionOtherTos=swL2ACLQosTemplateRuleL4SwitchSessionOtherTos, swL2ACLQosTemplateRuleL4SwitchActionForwardDscp=swL2ACLQosTemplateRuleL4SwitchActionForwardDscp, swL2FilterAddrMaxSupportedEntries=swL2FilterAddrMaxSupportedEntries, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2StaticVlanTable=swL2StaticVlanTable, swL2StormCtrlDlfState=swL2StormCtrlDlfState, swL2UnitCtrl=swL2UnitCtrl, swL2TrafficCtrlDlfStormCtrl=swL2TrafficCtrlDlfStormCtrl, swL2IGMPGroupEntry=swL2IGMPGroupEntry, swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcIp=swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcIp, swL2ACLQosDestinationIpFilterIndex=swL2ACLQosDestinationIpFilterIndex, swL2DevCtrlUpDownloadImageSourceAddr=swL2DevCtrlUpDownloadImageSourceAddr, swL2ACLQosFDBFilterIndex=swL2ACLQosFDBFilterIndex, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2ACLQosFlowClassifierL4SwitchTCPSrcPort=swL2ACLQosFlowClassifierL4SwitchTCPSrcPort, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2ACLQosFlowClassifierSecuritySrcMask=swL2ACLQosFlowClassifierSecuritySrcMask, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2IGMPMgmt=swL2IGMPMgmt, swL2VlanPortPvid=swL2VlanPortPvid, swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPCode=swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPCode, swL2MgmtPortAdminState=swL2MgmtPortAdminState, swL2ACLQosTemplateRuleL4SwitchSessionUDPDstPort=swL2ACLQosTemplateRuleL4SwitchSessionUDPDstPort, swL2TrunkMgmt=swL2TrunkMgmt, swL2TrunkMember=swL2TrunkMember, swL2VlanPortTable=swL2VlanPortTable, swL2StaticVlanEntry=swL2StaticVlanEntry, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swL2ACLQosTemplateRuleQosPriority=swL2ACLQosTemplateRuleQosPriority, swL2ACLQosMacPriorityPriorityValue=swL2ACLQosMacPriorityPriorityValue, swL2ACLQosTemplateRuleIndex=swL2ACLQosTemplateRuleIndex, swL2ACLQosMgmt=swL2ACLQosMgmt, swL2DevAlarm=swL2DevAlarm, swL2ACLQosIpFragmentFilterDropPkts=swL2ACLQosIpFragmentFilterDropPkts, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, VlanIndex=VlanIndex, swL2QosSchedulingTable=swL2QosSchedulingTable, swL2QosPriorityReplaceDscpState=swL2QosPriorityReplaceDscpState, swL2StormCtrlMcastStormCtrl=swL2StormCtrlMcastStormCtrl, swL2ACLQosFlowClassifierL4SwitchOtherICMPMessage=swL2ACLQosFlowClassifierL4SwitchOtherICMPMessage, swL2ACLQosTemplateRuleL4SwitchActionRedirectDropUnreachable=swL2ACLQosTemplateRuleL4SwitchActionRedirectDropUnreachable, swL2ACLQosFlowClassifierL4SwitchOtherL4Protocol=swL2ACLQosFlowClassifierL4SwitchOtherL4Protocol, swL2TrafficCtrlTable=swL2TrafficCtrlTable, swL2IGMPRPStaticRouterPort=swL2IGMPRPStaticRouterPort, swL2QosPriorityType=swL2QosPriorityType, swL2TrunkName=swL2TrunkName, swL2PortUtilTxSec=swL2PortUtilTxSec, swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcPort=swL2ACLQosTemplateRuleL4SwitchSessionTCPSrcPort, swL2ACLQosFlowClassifierL4SwitchOtherIGMPType=swL2ACLQosFlowClassifierL4SwitchOtherIGMPType, swL2StaticVlanUserPriority=swL2StaticVlanUserPriority, swL2IGMPRPVid=swL2IGMPRPVid, swL2QosPriorityPriorityState=swL2QosPriorityPriorityState, swL2ACLQosTemplateRuleL4SwitchSessionTCPFlags=swL2ACLQosTemplateRuleL4SwitchSessionTCPFlags, swL2ACLQosFlowClassifierActiveRuleNumber=swL2ACLQosFlowClassifierActiveRuleNumber, swL2ACLQosSchedulingWRRValue=swL2ACLQosSchedulingWRRValue, swL2StaticVlanEgressPorts=swL2StaticVlanEgressPorts, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2QosPriorityReplaceDscp=swL2QosPriorityReplaceDscp, swL2IGMPGroupTable=swL2IGMPGroupTable, swL2QosPriorityTable=swL2QosPriorityTable, swL2DevCtrl=swL2DevCtrl, swL2IGMPPortMember=swL2IGMPPortMember, swL2ACLQosDestinationIpFilterTable=swL2ACLQosDestinationIpFilterTable, swL2QosMgmt=swL2QosMgmt, swL2ACLQosTemplateRuleMode=swL2ACLQosTemplateRuleMode, swL2FilterAddrConfig=swL2FilterAddrConfig, swL2FilterAddrCtrlTable=swL2FilterAddrCtrlTable, swL2StaticVlanEncap=swL2StaticVlanEncap, swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcPort=swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcPort, swL2ACLQosFDBFilterTable=swL2ACLQosFDBFilterTable, swL2PortCtrlAddressLearningState=swL2PortCtrlAddressLearningState, swL2ACLQosTemplateRuleL4SwitchSessionTCPTos=swL2ACLQosTemplateRuleL4SwitchSessionTCPTos, swL2ACLQosTemplateRuleL4SwitchActionForwardPriorityState=swL2ACLQosTemplateRuleL4SwitchActionForwardPriorityState, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2TrunkState=swL2TrunkState, swL2DevCtrlUpDownloadImageFileName=swL2DevCtrlUpDownloadImageFileName, swDevInfoSaveCfg=swDevInfoSaveCfg, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2IGMPForwardGroupIpAddr=swL2IGMPForwardGroupIpAddr, swL2PortInfoPortIndex=swL2PortInfoPortIndex, managementPortLinkDown=managementPortLinkDown, swL2ACLQosTemplateRuleState=swL2ACLQosTemplateRuleState, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2ACLQosDestinationIpFilterState=swL2ACLQosDestinationIpFilterState, swL2ACLQosFDBFilterState=swL2ACLQosFDBFilterState, swL2TrafficCtrlGroupIndex=swL2TrafficCtrlGroupIndex, swL2TrafficCtrlBcastStormCtrl=swL2TrafficCtrlBcastStormCtrl, swL2ACLQosSchedulingTable=swL2ACLQosSchedulingTable, swL2ACLQosSchedulingPortIndex=swL2ACLQosSchedulingPortIndex, swL2ACLQosDestinationIpFilterEntry=swL2ACLQosDestinationIpFilterEntry, swL2FilterAddrState=swL2FilterAddrState, swL2VlanPortIndex=swL2VlanPortIndex, swL2MgmtPortLinkUpDownTrapEnable=swL2MgmtPortLinkUpDownTrapEnable, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2StaticVlanIpSubnetMask=swL2StaticVlanIpSubnetMask, swL2IGMPPortMap=swL2IGMPPortMap, swL2StormCtrlTable=swL2StormCtrlTable, swL2IGMPMulticastFilter=swL2IGMPMulticastFilter, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2StaticVlanUserDefinedPid=swL2StaticVlanUserDefinedPid, swL2IGMPRPEntry=swL2IGMPRPEntry, swL2ACLQosTemplateRuleL4SwitchSessionUDPDstIp=swL2ACLQosTemplateRuleL4SwitchSessionUDPDstIp, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2ACLQosTemplateRuleSecurityDstIp=swL2ACLQosTemplateRuleSecurityDstIp, swL2StaticVlanType=swL2StaticVlanType, swL2DevCtrlStpForwardBPDU=swL2DevCtrlStpForwardBPDU, swL2VlanPortEntry=swL2VlanPortEntry, swL2ACLQosDestinationIpFilterIpAddr=swL2ACLQosDestinationIpFilterIpAddr, swL2MgmtPortMgmt=swL2MgmtPortMgmt, swL2ACLQosFlowClassifierL4SwitchUDPDstPort=swL2ACLQosFlowClassifierL4SwitchUDPDstPort, swL2StormCtrlBcastStormCtrl=swL2StormCtrlBcastStormCtrl, swL2StaticVlanIndex=swL2StaticVlanIndex, swL2DevMgmt=swL2DevMgmt, swL2ACLQosFlowClassifierL4SwitchUDPDstIp=swL2ACLQosFlowClassifierL4SwitchUDPDstIp, swL2CpuRateLimitTable=swL2CpuRateLimitTable, swL2ACLQosFlowClassifierL4SwitchOtherTos=swL2ACLQosFlowClassifierL4SwitchOtherTos, swL2ACLQosFlowClassifierTemplateId=swL2ACLQosFlowClassifierTemplateId, swL2ACLQosTemplate2Mode=swL2ACLQosTemplate2Mode, swL2TrafficCtrlUnitIndex=swL2TrafficCtrlUnitIndex, swL2ACLQosFlowClassifierVlanTable=swL2ACLQosFlowClassifierVlanTable, swL2IGMPGroupPortTable=swL2IGMPGroupPortTable, swL2QosSchedulingEntry=swL2QosSchedulingEntry, swDevInfoSystemUpTime=swDevInfoSystemUpTime, swL2StaticVlanStatus=swL2StaticVlanStatus, swL2ACLQosFlowClassifierL4SwitchTCPTos=swL2ACLQosFlowClassifierL4SwitchTCPTos, swL2ACLQosFDBFilterEntry=swL2ACLQosFDBFilterEntry, swL2ACLQosMacPriorityIndex=swL2ACLQosMacPriorityIndex, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2QosPriorityState=swL2QosPriorityState, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2ACLQosTemplateRuleL4SwitchSessionTCPDstIp=swL2ACLQosTemplateRuleL4SwitchSessionTCPDstIp, swL2ACLQosTemplateRuleL4SwitchSessionOtherIGMPType=swL2ACLQosTemplateRuleL4SwitchSessionOtherIGMPType, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2ACLQosMacPriorityEntry=swL2ACLQosMacPriorityEntry, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2ACLQosMacPriorityVlanName=swL2ACLQosMacPriorityVlanName, swL2ACLQosFlowClassifierL4SwitchUDPTos=swL2ACLQosFlowClassifierL4SwitchUDPTos, swL2ACLQosTemplateRuleEntry=swL2ACLQosTemplateRuleEntry, swL2TrunkBPDU8600InterState=swL2TrunkBPDU8600InterState, swL2MgmtPortNwayState=swL2MgmtPortNwayState, swL2ACLQosMacPriorityDstMacAddress=swL2ACLQosMacPriorityDstMacAddress, PortList=PortList, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2PortUtilTable=swL2PortUtilTable, swL2IGMPForwardEntry=swL2IGMPForwardEntry, swL2QosPriorityValue=swL2QosPriorityValue, swL2FilterAddrMacIndex=swL2FilterAddrMacIndex, swL2ACLQosTemplateRuleQosValue=swL2ACLQosTemplateRuleQosValue, swL2QosPriorityPriority=swL2QosPriorityPriority, swL2StormCtrlBMStormThreshold=swL2StormCtrlBMStormThreshold, swL2ACLQosTemplateRuleL4SwitchSessionOtherSrcIp=swL2ACLQosTemplateRuleL4SwitchSessionOtherSrcIp, swL2IGMPRPTable=swL2IGMPRPTable, swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcIp=swL2ACLQosTemplateRuleL4SwitchSessionUDPSrcIp, swL2TrafficCtrlEntry=swL2TrafficCtrlEntry, swL2ACLQosFlowClassifierVlanVlanName=swL2ACLQosFlowClassifierVlanVlanName, swL2ACLQosMacPriorityState=swL2ACLQosMacPriorityState, swL2CpuRateLimitEntry=swL2CpuRateLimitEntry, swL2ACLQosTemplateRuleL4SwitchActionForwardPriority=swL2ACLQosTemplateRuleL4SwitchActionForwardPriority, swL2ACLQosTemplateRuleQosDscp=swL2ACLQosTemplateRuleQosDscp, swL2ACLQosFlowClassifierL4SwitchTCPFlags=swL2ACLQosFlowClassifierL4SwitchTCPFlags, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2FilterMgmt=swL2FilterMgmt, swL2StormCtrlMgmt=swL2StormCtrlMgmt, swL2ACLQosFlowClassifierL4SwitchTCPDstIp=swL2ACLQosFlowClassifierL4SwitchTCPDstIp, swL2ACLQosTemplateRuleL4SwitchSessionTCPFlagsAll=swL2ACLQosTemplateRuleL4SwitchSessionTCPFlagsAll, swL2ACLQosFlowClassifierSecurityDstMask=swL2ACLQosFlowClassifierSecurityDstMask, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2PortUtilUtilization=swL2PortUtilUtilization, swL2ACLQosTemplateRuleL4SwitchSessionTCPDstPort=swL2ACLQosTemplateRuleL4SwitchSessionTCPDstPort, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2IGMPForwardTable=swL2IGMPForwardTable, swL2PortInfoTable=swL2PortInfoTable, swL2UnitMgmt=swL2UnitMgmt, swL2ACLQosFlowClassifierVlanEntry=swL2ACLQosFlowClassifierVlanEntry, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2ACLQosTemplateRuleTemplateId=swL2ACLQosTemplateRuleTemplateId, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2ACLQosTemplateRuleQosFlavor=swL2ACLQosTemplateRuleQosFlavor, swL2ACLQosFlowClassifierCurrentMode=swL2ACLQosFlowClassifierCurrentMode, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortUtilEntry=swL2PortUtilEntry, swL2StormCtrlEntry=swL2StormCtrlEntry, swL2ACLQosFlowClassifierVlanState=swL2ACLQosFlowClassifierVlanState, swL2PortCtrlTable=swL2PortCtrlTable, swL2DevCtrlUpDownloadState=swL2DevCtrlUpDownloadState, swL2PortInfoType=swL2PortInfoType, swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPType=swL2ACLQosTemplateRuleL4SwitchSessionOtherICMPType, swL2PortUtilPortIndex=swL2PortUtilPortIndex, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2ACLQosTemplateRuleL4SwitchSessionUDPTos=swL2ACLQosTemplateRuleL4SwitchSessionUDPTos, swL2ACLQosSchedulingEntry=swL2ACLQosSchedulingEntry, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2ACLQosTemplateRuleTable=swL2ACLQosTemplateRuleTable, swL2StaticVlanUntaggedPorts=swL2StaticVlanUntaggedPorts, swL2PortUtilRxSec=swL2PortUtilRxSec, swL2PortMgmt=swL2PortMgmt, swL2VlanMgmt=swL2VlanMgmt, swL2QosSchedulingMaxPkts=swL2QosSchedulingMaxPkts, swL2ACLQosTemplateRuleL4SwitchSessionOtherL4Protocol=swL2ACLQosTemplateRuleL4SwitchSessionOtherL4Protocol, swL2ACLQosTemplateRuleL4SwitchActionType=swL2ACLQosTemplateRuleL4SwitchActionType, swL2IGMPGroupPortEntry=swL2IGMPGroupPortEntry, swL2TrafficCtrlBMStormthreshold=swL2TrafficCtrlBMStormthreshold, swL2ACLQosFDBFilterMacAddress=swL2ACLQosFDBFilterMacAddress, swL2MgmtMIB=swL2MgmtMIB, swL2MgmtPortFlowCtrlState=swL2MgmtPortFlowCtrlState, swL2ACLQosFDBFilterVlanName=swL2ACLQosFDBFilterVlanName, swL2ACLQosFlowClassifierL4SwitchOtherSrcIp=swL2ACLQosFlowClassifierL4SwitchOtherSrcIp, swL2MirrorMgmt=swL2MirrorMgmt, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2DevCtrlUpDownloadImage=swL2DevCtrlUpDownloadImage, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swDevInfoConsoleInUse=swDevInfoConsoleInUse, swL2IGMPRobustness=swL2IGMPRobustness, swL2CpuRateLimitBcastThreshold=swL2CpuRateLimitBcastThreshold, swL2ACLQosTemplateRuleSecuritySrcIp=swL2ACLQosTemplateRuleSecuritySrcIp, swL2ACLQosTemplateRuleL4SwitchActionRedirectIp=swL2ACLQosTemplateRuleL4SwitchActionRedirectIp, swL2TrunkIndex=swL2TrunkIndex, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2CpuUtilization=swL2CpuUtilization, swL2TrafficCtrlMcastStormCtrl=swL2TrafficCtrlMcastStormCtrl, swL2QosSchedulingClassId=swL2QosSchedulingClassId, swL2MgmtPortCurrentLinkStatus=swL2MgmtPortCurrentLinkStatus, swL2QosSchedulingMaxLatency=swL2QosSchedulingMaxLatency, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2IGMPMulticastRouterOnly=swL2IGMPMulticastRouterOnly, swL2ACLQosTemplateRuleL4SwitchSessionType=swL2ACLQosTemplateRuleL4SwitchSessionType, managementPortLinkUp=managementPortLinkUp, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress)
mibBuilder.exportSymbols("SWL2MGMT-MIB", swL2CpuRateLimitPortIndex=swL2CpuRateLimitPortIndex, swL2StaticVlanIpSubnetAddr=swL2StaticVlanIpSubnetAddr, swL2StaticVlanName=swL2StaticVlanName, swL2ACLQosTemplateRuleL4SwitchSessionOtherDstIp=swL2ACLQosTemplateRuleL4SwitchSessionOtherDstIp, swL2StaticVlanProtocolId=swL2StaticVlanProtocolId, swL2MirrorPortState=swL2MirrorPortState, swL2StaticVlanIpSubnetArpClassId=swL2StaticVlanIpSubnetArpClassId, swDevInfoFrontPanelLedStatus=swDevInfoFrontPanelLedStatus, swL2QosPriorityEntry=swL2QosPriorityEntry, swL2ACLQosTemplate1Mode=swL2ACLQosTemplate1Mode, swL2ModuleMgmt=swL2ModuleMgmt, swL2QosPriorityReplacePriority=swL2QosPriorityReplacePriority, swL2ACLQosFlowClassifierL4SwitchUDPSrcPort=swL2ACLQosFlowClassifierL4SwitchUDPSrcPort, swL2ACLQosFlowClassifierL4SwitchOtherDstIp=swL2ACLQosFlowClassifierL4SwitchOtherDstIp, swL2ACLQosMacPriorityTable=swL2ACLQosMacPriorityTable, swL2FilterAddrCtrlEntry=swL2FilterAddrCtrlEntry, swL2ACLQosFlowClassifierL4SwitchTCPSrcIp=swL2ACLQosFlowClassifierL4SwitchTCPSrcIp, swL2DevCtrlSaveCfg=swL2DevCtrlSaveCfg, swL2ACLQosFlowClassifierQosFlavor=swL2ACLQosFlowClassifierQosFlavor, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2TrafficMgmt=swL2TrafficMgmt, swL2PortInfoUnitIndex=swL2PortInfoUnitIndex, swL2IGMPVid=swL2IGMPVid, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2CpuRateLimitState=swL2CpuRateLimitState, swL2IGMPPortAgingTime=swL2IGMPPortAgingTime, swL2CpuRateLimitMcastThreshold=swL2CpuRateLimitMcastThreshold, swL2ACLQosFlowClassifierEntry=swL2ACLQosFlowClassifierEntry, swL2ACLQosFlowClassifierL4SwitchUDPSrcIp=swL2ACLQosFlowClassifierL4SwitchUDPSrcIp, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2VlanPortIngressChecking=swL2VlanPortIngressChecking, swL2IGMPRPDynamicRouterPort=swL2IGMPRPDynamicRouterPort, swL2StormCtrlPortIndex=swL2StormCtrlPortIndex)
