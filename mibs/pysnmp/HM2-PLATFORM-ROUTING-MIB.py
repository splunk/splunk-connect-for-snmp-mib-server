#
# PySNMP MIB module HM2-PLATFORM-ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-ROUTING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hm2PlatformMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2PlatformMibs", "HmEnabledStatus")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddressIPv4, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressType", "InetAddress")
ospfNbrEntry, ospfAreaEntry, ospfVirtIfEntry, RouterID, ospfIfMetricEntry, ospfIfEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfNbrEntry", "ospfAreaEntry", "ospfVirtIfEntry", "RouterID", "ospfIfMetricEntry", "ospfIfEntry")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Counter32, Unsigned32, iso, MibIdentifier, Gauge32, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Counter32", "Unsigned32", "iso", "MibIdentifier", "Gauge32", "TimeTicks", "ModuleIdentity", "IpAddress")
TruthValue, PhysAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "PhysAddress", "DisplayString", "RowStatus", "TextualConvention")
vrrpOperVrId, = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId")
hm2PlatformRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2))
hm2PlatformRouting.setRevisions(('2011-09-08 00:00',))
if mibBuilder.loadTexts: hm2PlatformRouting.setLastUpdated('201109080000Z')
if mibBuilder.loadTexts: hm2PlatformRouting.setOrganization('Hirschmann Automation and Control GmbH')
hm2AgentSwitchArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 1))
hm2AgentSwitchArpAgeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 21600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpAgeoutTime.setStatus('current')
hm2AgentSwitchArpResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpResponseTime.setStatus('current')
hm2AgentSwitchArpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpMaxRetries.setStatus('current')
hm2AgentSwitchArpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpCacheSize.setStatus('current')
hm2AgentSwitchArpDynamicRenew = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 5), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpDynamicRenew.setStatus('current')
hm2AgentSwitchArpTotalEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpTotalEntryCountCurrent.setStatus('current')
hm2AgentSwitchArpTotalEntryCountPeak = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpTotalEntryCountPeak.setStatus('current')
hm2AgentSwitchArpStaticEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpStaticEntryCountCurrent.setStatus('current')
hm2AgentSwitchArpStaticEntryCountMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpStaticEntryCountMax.setStatus('current')
hm2AgentSwitchLocalProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 11), )
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpTable.setStatus('current')
hm2AgentSwitchLocalProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpEntry.setStatus('current')
hm2AgentSwitchLocalProxyArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 11, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpMode.setStatus('current')
hm2AgentSwitchIntfArpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12), )
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpTable.setStatus('current')
hm2AgentSwitchIntfArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfArpIpAddress"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfArpIfIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpEntry.setStatus('current')
hm2AgentSwitchIntfArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpIpAddress.setStatus('current')
hm2AgentSwitchIntfArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpIfIndex.setStatus('current')
hm2AgentSwitchIntfArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpAge.setStatus('current')
hm2AgentSwitchIntfArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpMacAddress.setStatus('current')
hm2AgentSwitchIntfArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpType.setStatus('current')
hm2AgentSwitchIntfArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpStatus.setStatus('current')
hm2AgentSwitchArpSparseLearn = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 100), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpSparseLearn.setStatus('current')
hm2AgentSwitchArpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("flushARP", 2), ("flushARPWithGateway", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpCacheClear.setStatus('current')
hm2AgentSwitchProxyArpMaxResponseDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), )).clone(800)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchProxyArpMaxResponseDelay.setStatus('current')
hm2AgentSwitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 2))
hm2AgentSwitchIpRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRoutingMode.setStatus('current')
hm2AgentSwitchIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpDefaultGateway.setStatus('current')
hm2AgentSwitchIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3), )
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceTable.setStatus('current')
hm2AgentSwitchIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpInterfaceIfIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceEntry.setStatus('current')
hm2AgentSwitchIpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIfIndex.setStatus('current')
hm2AgentSwitchIPAddressConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("manual", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIPAddressConfigMethod.setStatus('current')
hm2AgentSwitchIpInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIpAddress.setStatus('current')
hm2AgentSwitchIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNetMask.setStatus('current')
hm2AgentSwitchIpInterfaceClearIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 5), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceClearIp.setStatus('current')
hm2AgentSwitchIpInterfaceRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 6), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceRoutingMode.setStatus('current')
hm2AgentSwitchIpInterfaceProxyARPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceProxyARPMode.setStatus('current')
hm2AgentSwitchIpInterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(68, 12266), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceMtuValue.setStatus('current')
hm2AgentSwitchIpInterfaceBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceBandwidth.setStatus('current')
hm2AgentSwitchIpInterfaceUnnumberedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceUnnumberedIfIndex.setStatus('current')
hm2AgentSwitchIpInterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIcmpUnreachables.setStatus('current')
hm2AgentSwitchIpInterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIcmpRedirects.setStatus('current')
hm2AgentSwitchDhcpOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("renew", 1), ("release", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchDhcpOperation.setStatus('current')
hm2AgentSwitchIpInterfaceSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsuppressed", 0), ("suppressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceSuppressed.setStatus('current')
hm2AgentSwitchIpInterfaceNumberOfFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNumberOfFlaps.setStatus('current')
hm2AgentSwitchIpInterfaceCurrentPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceCurrentPenalty.setStatus('current')
hm2AgentSwitchIpInterfaceReUseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceReUseTime.setStatus('current')
hm2AgentSwitchIpInterfaceNetdirectedBCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNetdirectedBCMode.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4), )
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryTable.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpRouterDiscoveryIfIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryEntry.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryIfIndex.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertiseMode.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800)).clone(450)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryPreferenceLevel.setStatus('current')
hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 7), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress.setStatus('current')
hm2AgentSwitchIpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5), )
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanTable.setStatus('current')
hm2AgentSwitchIpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpVlanId"))
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanEntry.setStatus('current')
hm2AgentSwitchIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanId.setStatus('current')
hm2AgentSwitchIpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanIfIndex.setStatus('current')
hm2AgentSwitchIpVlanRoutingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanRoutingStatus.setStatus('current')
hm2AgentSwitchSecondaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6), )
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryAddressTable.setStatus('current')
hm2AgentSwitchSecondaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpInterfaceIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchSecondaryIpAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryAddressEntry.setStatus('current')
hm2AgentSwitchSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryIpAddress.setStatus('current')
hm2AgentSwitchSecondaryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryNetMask.setStatus('current')
hm2AgentSwitchSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryStatus.setStatus('current')
hm2AgentSwitchIpIcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8))
hm2AgentSwitchIpIcmpEchoReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpEchoReplyMode.setStatus('current')
hm2AgentSwitchIpIcmpRedirectsMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRedirectsMode.setStatus('current')
hm2AgentSwitchIpIcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitInterval.setStatus('current')
hm2AgentSwitchIpIcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitBurstSize.setStatus('current')
hm2AgentSwitchIntfIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10), )
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperAddressTable.setStatus('current')
hm2AgentSwitchIpFirstActiveAddressType = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 248), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpFirstActiveAddressType.setStatus('current')
hm2AgentSwitchIpFirstActiveAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 249), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpFirstActiveAddress.setStatus('current')
hm2AgentSwitchIpStaticDefaultPref = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 250), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpStaticDefaultPref.setStatus('current')
hm2AgentSwitchIntfIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpInterfaceIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfIpHelperUdpPort"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfIpHelperIpAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperAddressEntry.setStatus('current')
hm2AgentSwitchIntfIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperUdpPort.setStatus('current')
hm2AgentSwitchIntfIpHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperIpAddress.setStatus('current')
hm2AgentSwitchIntfIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperHitCount.setStatus('current')
hm2AgentSwitchIntfIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperStatus.setStatus('current')
hm2AgentSwitchClearIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchClearIpDefaultGateway.setStatus('current')
hm2AgentRouterRipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 3))
hm2AgentRouterRipAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipAdminState.setStatus('current')
hm2AgentRouterRipSplitHorizonMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("poisonReverse", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipSplitHorizonMode.setStatus('current')
hm2AgentRouterRipAutoSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipAutoSummaryMode.setStatus('current')
hm2AgentRouterRipHostRoutesAcceptMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 4), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipHostRoutesAcceptMode.setStatus('current')
hm2AgentRouterRipDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultMetric.setStatus('current')
hm2AgentRouterRipDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultMetricConfigured.setStatus('current')
hm2AgentRouterRipDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultInfoOriginate.setStatus('current')
hm2AgentRipRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8), )
if mibBuilder.loadTexts: hm2AgentRipRouteRedistTable.setStatus('current')
hm2AgentRipRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentRipRouteRedistSource"))
if mibBuilder.loadTexts: hm2AgentRipRouteRedistEntry.setStatus('current')
hm2AgentRipRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistSource.setStatus('current')
hm2AgentRipRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMode.setStatus('current')
hm2AgentRipRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMetric.setStatus('current')
hm2AgentRipRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMetricConfigured.setStatus('current')
hm2AgentRipRouteRedistMatchInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchInternal.setStatus('current')
hm2AgentRipRouteRedistMatchExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchExternal1.setStatus('current')
hm2AgentRipRouteRedistMatchExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchExternal2.setStatus('current')
hm2AgentRipRouteRedistMatchNSSAExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchNSSAExternal1.setStatus('current')
hm2AgentRipRouteRedistMatchNSSAExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchNSSAExternal2.setStatus('current')
hm2AgentRipRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 1099), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistDistList.setStatus('current')
hm2AgentRipRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistDistListConfigured.setStatus('current')
hm2AgentRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 9), )
if mibBuilder.loadTexts: hm2AgentRip2IfConfTable.setStatus('current')
hm2AgentRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 9, 1), )
rip2IfConfEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentRip2IfConfEntry"))
hm2AgentRip2IfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentRip2IfConfEntry.setStatus('current')
hm2AgentRip2IfConfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentRip2IfConfAuthKeyId.setStatus('current')
hm2AgentRouterRipRoutePref = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipRoutePref.setStatus('current')
hm2AgentRouterRipUpdateTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 248), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipUpdateTimerInterval.setStatus('current')
hm2AgentRouterOspfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 4))
hm2AgentOspfDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultMetric.setStatus('current')
hm2AgentOspfDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultMetricConfigured.setStatus('current')
hm2AgentOspfDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginate.setStatus('current')
hm2AgentOspfDefaultInfoOriginateAlways = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateAlways.setStatus('current')
hm2AgentOspfDefaultInfoOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetric.setStatus('current')
hm2AgentOspfDefaultInfoOriginateMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetricConfigured.setStatus('current')
hm2AgentOspfDefaultInfoOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetricType.setStatus('current')
hm2AgentOspfRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8), )
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistTable.setStatus('current')
hm2AgentOspfRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfRouteRedistSource"))
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistEntry.setStatus('current')
hm2AgentOspfRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("rip", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistSource.setStatus('current')
hm2AgentOspfRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMode.setStatus('current')
hm2AgentOspfRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetric.setStatus('current')
hm2AgentOspfRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetricConfigured.setStatus('current')
hm2AgentOspfRouteRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone('externalType2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetricType.setStatus('current')
hm2AgentOspfRouteRedistTag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistTag.setStatus('current')
hm2AgentOspfRouteRedistSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistSubnets.setStatus('current')
hm2AgentOspfRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistDistList.setStatus('current')
hm2AgentOspfRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistDistListConfigured.setStatus('current')
hm2AgentOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9), )
if mibBuilder.loadTexts: hm2AgentOspfIfTable.setStatus('current')
hm2AgentOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1), )
ospfIfEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfIfEntry"))
hm2AgentOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfIfEntry.setStatus('current')
hm2AgentOspfIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentOspfIfAuthKeyId.setStatus('current')
hm2AgentOspfIfIpMtuIgnoreFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 2), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfIpMtuIgnoreFlag.setStatus('current')
hm2AgentOspfIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfPassiveMode.setStatus('current')
hm2AgentOspfIfAdvertiseSecondaries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 4), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfAdvertiseSecondaries.setStatus('current')
hm2AgentOspfIfFastHelloMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfFastHelloMode.setStatus('current')
hm2AgentOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 10), )
if mibBuilder.loadTexts: hm2AgentOspfVirtIfTable.setStatus('current')
hm2AgentOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 10, 1), )
ospfVirtIfEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfVirtIfEntry"))
hm2AgentOspfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfVirtIfEntry.setStatus('current')
hm2AgentOspfVirtIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentOspfVirtIfAuthKeyId.setStatus('current')
hm2AgentRouterOspfRFC1583CompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterOspfRFC1583CompatibilityMode.setStatus('current')
hm2AgentOspfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfSpfDelayTime.setStatus('current')
hm2AgentOspfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfSpfHoldTime.setStatus('current')
hm2AgentOspfAutoCostRefBw = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAutoCostRefBw.setStatus('current')
hm2AgentOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfOpaqueLsaSupport.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16), )
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbTable.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbAreaId"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbLsid"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbRouterId"))
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbEntry.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAreaId.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbType.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbLsid.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbRouterId.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbSequence.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAge.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbChecksum.setStatus('current')
hm2AgentOspfAreaOpaqueLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAdvertisement.setStatus('current')
hm2AgentOspfLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17), )
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbTable.setStatus('current')
hm2AgentOspfLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbIpAddress"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbAddressLessIf"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbLsid"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbRouterId"))
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbEntry.setStatus('current')
hm2AgentOspfLocalLsdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbIpAddress.setStatus('current')
hm2AgentOspfLocalLsdbAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAddressLessIf.setStatus('current')
hm2AgentOspfLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbType.setStatus('current')
hm2AgentOspfLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbLsid.setStatus('current')
hm2AgentOspfLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 5), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbRouterId.setStatus('current')
hm2AgentOspfLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbSequence.setStatus('current')
hm2AgentOspfLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAge.setStatus('current')
hm2AgentOspfLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbChecksum.setStatus('current')
hm2AgentOspfLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAdvertisement.setStatus('current')
hm2AgentOspfAsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18), )
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbTable.setStatus('current')
hm2AgentOspfAsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAsLsdbType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAsLsdbLsid"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAsLsdbRouterId"))
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbEntry.setStatus('current')
hm2AgentOspfAsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11))).clone(namedValues=NamedValues(("asOpaqueLink", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbType.setStatus('current')
hm2AgentOspfAsLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbLsid.setStatus('current')
hm2AgentOspfAsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbRouterId.setStatus('current')
hm2AgentOspfAsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbSequence.setStatus('current')
hm2AgentOspfAsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAge.setStatus('current')
hm2AgentOspfAsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbChecksum.setStatus('current')
hm2AgentOspfAsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAdvertisement.setStatus('current')
hm2AgentOspfDefaultPassiveMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultPassiveMode.setStatus('current')
hm2AgentOspfRoutePrefIntraArea = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefIntraArea.setStatus('current')
hm2AgentOspfRoutePrefInterArea = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefInterArea.setStatus('current')
hm2AgentOspfRoutePrefExternal = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefExternal.setStatus('current')
hm2AgentOspfAreaNSSATable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248), )
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSATable.setStatus('current')
hm2AgentOspfAreaNSSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1), )
ospfAreaEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaNSSAEntry"))
hm2AgentOspfAreaNSSAEntry.setIndexNames(*ospfAreaEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSAEntry.setStatus('current')
hm2AgentOspfAreaNSSAImportSummaries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSAImportSummaries.setStatus('current')
hm2AgentOspfAreaNSSARedistribute = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSARedistribute.setStatus('current')
hm2AgentOspfAreaNSSADefaultInfoOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultInfoOriginate.setStatus('current')
hm2AgentOspfAreaNSSADefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777214)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultMetric.setStatus('current')
hm2AgentOspfAreaNSSADefaultMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparable", 2), ("nonComparable", 3))).clone('nonComparable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultMetricType.setStatus('current')
hm2AgentOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 249), )
if mibBuilder.loadTexts: hm2AgentOspfIfMetricTable.setStatus('current')
hm2AgentOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 249, 1), )
ospfIfMetricEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfIfMetricEntry"))
hm2AgentOspfIfMetricEntry.setIndexNames(*ospfIfMetricEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfIfMetricEntry.setStatus('current')
hm2AgentOspfIfMetricCalculatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 249, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfIfMetricCalculatedCost.setStatus('current')
hm2AgentSnmpTrapFlagsConfigGroupLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 5))
hm2AgentSnmpVRRPNewMasterTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSnmpVRRPNewMasterTrapFlag.setStatus('current')
hm2AgentSnmpVRRPAuthFailureTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 5, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSnmpVRRPAuthFailureTrapFlag.setStatus('current')
hm2AgentBootpDhcpRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 6))
hm2AgentBootpDhcpRelayMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayMaxHopCount.setStatus('current')
hm2AgentBootpDhcpRelayMinWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayMinWaitTime.setStatus('current')
hm2AgentBootpDhcpRelayCircuitIdOptionMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 6, 5), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayCircuitIdOptionMode.setStatus('current')
hm2AgentECMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 7))
hm2AgentECMPOspfMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentECMPOspfMaxPaths.setStatus('current')
hm2AgentRouterVrrpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 8))
hm2AgentRouterVrrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 8, 1), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterVrrpAdminState.setStatus('current')
hm2AgentVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 9))
hm2AgentRouterVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 1), )
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperTable.setStatus('obsolete')
hm2AgentRouterVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperEntry.setStatus('obsolete')
hm2AgentRouterVrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperPriority.setStatus('obsolete')
hm2AgentRouterVrrpNumberOfFastInst = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 248), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouterVrrpNumberOfFastInst.setStatus('current')
hm2AgentIpHelperGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 11))
hm2AgentIpHelperAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 1), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentIpHelperAdminMode.setStatus('current')
hm2AgentDhcpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpClientMsgsReceived.setStatus('current')
hm2AgentDhcpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpClientMsgsRelayed.setStatus('current')
hm2AgentDhcpServerMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpServerMsgsReceived.setStatus('current')
hm2AgentDhcpServerMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpServerMsgsRelayed.setStatus('current')
hm2AgentUdpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsReceived.setStatus('current')
hm2AgentUdpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsRelayed.setStatus('current')
hm2AgentSwitchIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8), )
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddressTable.setStatus('current')
hm2AgentSwitchIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpHelperUdpPort"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpHelperAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddressEntry.setStatus('current')
hm2AgentSwitchIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperUdpPort.setStatus('current')
hm2AgentSwitchIpHelperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddress.setStatus('current')
hm2AgentSwitchIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperHitCount.setStatus('current')
hm2AgentSwitchIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperStatus.setStatus('current')
hm2AgentUdpClientMsgsTtlExpired = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsTtlExpired.setStatus('current')
hm2AgentUdpClientMsgsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsDiscarded.setStatus('current')
hm2AgentInternalVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 12))
hm2AgentInternalVlanBase = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 1), VlanId().clone(4093)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentInternalVlanBase.setStatus('current')
hm2AgentInternalVlanPolicy = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascending", 0), ("descending", 1))).clone('descending')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentInternalVlanPolicy.setStatus('current')
hm2AgentSwitchInternalVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3), )
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanTable.setStatus('current')
hm2AgentSwitchInternalVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchInternalVlanId"))
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanEntry.setStatus('current')
hm2AgentSwitchInternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanId.setStatus('current')
hm2AgentSwitchInternalVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanIfIndex.setStatus('current')
hm2AgentOspfQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 13))
hm2AgentOspfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1), )
if mibBuilder.loadTexts: hm2AgentOspfQueueTable.setStatus('current')
hm2AgentOspfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfQueueIndex"))
if mibBuilder.loadTexts: hm2AgentOspfQueueEntry.setStatus('current')
hm2AgentOspfQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentOspfQueueIndex.setStatus('current')
hm2AgentOspfQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueName.setStatus('current')
hm2AgentOspfQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueLength.setStatus('current')
hm2AgentOspfQueueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueHigh.setStatus('current')
hm2AgentOspfQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueDrops.setStatus('current')
hm2AgentOspfQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueLimit.setStatus('current')
hm2AgentOspfPacketStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 14))
hm2AgentOspfCountersCleared = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfCountersCleared.setStatus('current')
hm2AgentOspfLsaRetxCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsaRetxCount.setStatus('current')
hm2AgentOspfHellosRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfHellosRx.setStatus('current')
hm2AgentOspfHellosTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfHellosTx.setStatus('current')
hm2AgentOspfDdRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfDdRx.setStatus('current')
hm2AgentOspfDdTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfDdTx.setStatus('current')
hm2AgentOspfLsReqRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsReqRx.setStatus('current')
hm2AgentOspfLsReqTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsReqTx.setStatus('current')
hm2AgentOspfLsUpdatesRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesRx.setStatus('current')
hm2AgentOspfLsUpdatesTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesTx.setStatus('current')
hm2AgentOspfLsAckRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsAckRx.setStatus('current')
hm2AgentOspfLsAckTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsAckTx.setStatus('current')
hm2AgentOspfLsUpdatesRxMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesRxMax.setStatus('current')
hm2AgentOspfLsUpdatesTxMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesTxMax.setStatus('current')
hm2AgentOspfType1LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType1LsasRx.setStatus('current')
hm2AgentOspfType2LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType2LsasRx.setStatus('current')
hm2AgentOspfType3LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType3LsasRx.setStatus('current')
hm2AgentOspfType4LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType4LsasRx.setStatus('current')
hm2AgentOspfType5LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType5LsasRx.setStatus('current')
hm2AgentOspfType7LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType7LsasRx.setStatus('current')
hm2AgentOspfType9LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType9LsasRx.setStatus('current')
hm2AgentOspfType10LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType10LsasRx.setStatus('current')
hm2AgentOspfType11LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType11LsasRx.setStatus('current')
hm2AgentOspfSpfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 15), )
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsTable.setStatus('current')
hm2AgentOspfSpfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfSpfIndex"))
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsEntry.setStatus('current')
hm2AgentOspfSpfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentOspfSpfIndex.setStatus('current')
hm2AgentOspfSpfStatsDeltaT = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsDeltaT.setStatus('current')
hm2AgentOspfSpfStatsIntra = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 3), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsIntra.setStatus('current')
hm2AgentOspfSpfStatsSumm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 4), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsSumm.setStatus('current')
hm2AgentOspfSpfStatsExt = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 5), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsExt.setStatus('current')
hm2AgentOspfSpfStatsSpfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 6), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsSpfTotal.setStatus('current')
hm2AgentOspfSpfStatsRibUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 7), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsRibUpdate.setStatus('current')
hm2AgentOspfSpfStatsReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsReason.setStatus('current')
hm2AgentRoutingHeapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 16))
hm2AgentRoutingHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 16, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRoutingHeapSize.setStatus('current')
hm2AgentRoutingHeapInUse = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 16, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRoutingHeapInUse.setStatus('current')
hm2AgentRoutingHeapHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 16, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRoutingHeapHigh.setStatus('current')
hm2AgentRoutingTableSummaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 17))
hm2AgentConnectedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentConnectedRoutes.setStatus('current')
hm2AgentStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStaticRoutes.setStatus('current')
hm2AgentRipRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRipRoutes.setStatus('current')
hm2AgentOspfRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRoutes.setStatus('current')
hm2AgentOspfIntraRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfIntraRoutes.setStatus('current')
hm2AgentOspfInterRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfInterRoutes.setStatus('current')
hm2AgentOspfExt1Routes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfExt1Routes.setStatus('current')
hm2AgentOspfExt2Routes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfExt2Routes.setStatus('current')
hm2AgentBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentBgpRoutes.setStatus('current')
hm2AgentEbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEbgpRoutes.setStatus('current')
hm2AgentIbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIbgpRoutes.setStatus('current')
hm2AgentLocalBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLocalBgpRoutes.setStatus('current')
hm2AgentRejectRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRejectRoutes.setStatus('current')
hm2AgentTotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentTotalRoutes.setStatus('current')
hm2AgentBestRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentBestRoutes.setStatus('current')
hm2AgentBestRoutesHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentBestRoutesHigh.setStatus('current')
hm2AgentAlternateRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAlternateRoutes.setStatus('current')
hm2AgentRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouteAdds.setStatus('current')
hm2AgentRouteModifies = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouteModifies.setStatus('current')
hm2AgentRouteDeletes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouteDeletes.setStatus('current')
hm2AgentUnresolvedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUnresolvedRouteAdds.setStatus('current')
hm2AgentInvalidRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentInvalidRouteAdds.setStatus('current')
hm2AgentFailedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentFailedRouteAdds.setStatus('current')
hm2AgentReservedLocals = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentReservedLocals.setStatus('current')
hm2AgentUniqueNextHops = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUniqueNextHops.setStatus('current')
hm2AgentUniqueNextHopsHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUniqueNextHopsHigh.setStatus('current')
hm2AgentNextHopGroups = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentNextHopGroups.setStatus('current')
hm2AgentNextHopGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentNextHopGroupsHigh.setStatus('current')
hm2AgentEcmpGroups = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpGroups.setStatus('current')
hm2AgentEcmpGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpGroupsHigh.setStatus('current')
hm2AgentEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpRoutes.setStatus('current')
hm2AgentTruncEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentTruncEcmpRoutes.setStatus('current')
hm2AgentEcmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpRetries.setStatus('current')
hm2AgentEcmpCountTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 18), )
if mibBuilder.loadTexts: hm2AgentEcmpCountTable.setStatus('current')
hm2AgentEcmpCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 18, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentEcmpNextHopCount"))
if mibBuilder.loadTexts: hm2AgentEcmpCountEntry.setStatus('current')
hm2AgentEcmpNextHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hm2AgentEcmpNextHopCount.setStatus('current')
hm2AgentEcmpRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpRouteCount.setStatus('current')
hm2AgentOspfStubRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 19))
hm2AgentOspfStubRouterAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotAdvertise", 1), ("advertise", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterAdvertisement.setStatus('current')
hm2AgentOspfStubRouterReason = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("configured", 0), ("startup", 1), ("resource-limitation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterReason.setStatus('current')
hm2AgentOspfStubRouterStartupTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterStartupTimeRemaining.setStatus('current')
hm2AgentOspfStubRouterDuration = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterDuration.setStatus('current')
hm2AgentOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 249), )
if mibBuilder.loadTexts: hm2AgentOspfNbrTable.setStatus('current')
hm2AgentOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 249, 1), )
ospfNbrEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfNbrEntry"))
hm2AgentOspfNbrEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfNbrEntry.setStatus('current')
hm2AgentOspfNbrDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 249, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfNbrDeadTime.setStatus('current')
hm2AgentOspfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 250), )
if mibBuilder.loadTexts: hm2AgentOspfRouteTable.setStatus('current')
hm2AgentOspfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfRouteNet"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfRouteMask"))
if mibBuilder.loadTexts: hm2AgentOspfRouteEntry.setStatus('current')
hm2AgentOspfRouteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hm2AgentOspfRouteNet.setStatus('current')
hm2AgentOspfRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hm2AgentOspfRouteMask.setStatus('current')
hm2AgentOspfRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRouteCost.setStatus('current')
hm2AgentOspfRouteProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("intra", 1), ("inter", 2), ("ext-type1", 3), ("ext-type2", 4), ("nssa-type1", 5), ("nssa-type2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRouteProtoType.setStatus('current')
hm2AgentVrrpExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 260))
hm2AgentVrrpTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1), )
if mibBuilder.loadTexts: hm2AgentVrrpTrackingTable.setStatus('current')
hm2AgentVrrpTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpTrackIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpTrackVrid"), (1, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpTrackId"))
if mibBuilder.loadTexts: hm2AgentVrrpTrackingEntry.setStatus('current')
hm2AgentVrrpTrackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2AgentVrrpTrackIfIndex.setStatus('current')
hm2AgentVrrpTrackVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hm2AgentVrrpTrackVrid.setStatus('current')
hm2AgentVrrpTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 3), SnmpAdminString())
if mibBuilder.loadTexts: hm2AgentVrrpTrackId.setStatus('current')
hm2AgentVrrpTrackDecrement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 253))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpTrackDecrement.setStatus('current')
hm2AgentVrrpTrackOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpTrackOperStatus.setStatus('current')
hm2AgentVrrpTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentVrrpTrackRowStatus.setStatus('current')
hm2AgentVrrpExtTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2), )
if mibBuilder.loadTexts: hm2AgentVrrpExtTable.setStatus('current')
hm2AgentVrrpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpExtIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpExtVrid"))
if mibBuilder.loadTexts: hm2AgentVrrpExtEntry.setStatus('current')
hm2AgentVrrpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2AgentVrrpExtIfIndex.setStatus('current')
hm2AgentVrrpExtVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hm2AgentVrrpExtVrid.setStatus('current')
hm2AgentVrrpExtDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainId.setStatus('current')
hm2AgentVrrpExtDomainRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("member", 2), ("supervisor", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainRole.setStatus('current')
hm2AgentVrrpExtDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("noSupervisor", 2), ("supervisorDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainStatus.setStatus('current')
hm2AgentVrrpExtAdvertAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 6), IpAddress().clone(hexValue="E0000012")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtAdvertAddress.setStatus('current')
hm2AgentVrrpExtAdvertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 255000)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtAdvertTimer.setStatus('current')
hm2AgentVrrpExtCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtCfgPriority.setStatus('current')
hm2AgentVrrpExtNotifyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtNotifyAddress.setStatus('current')
hm2AgentVrrpExtNotifyLinkdown = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtNotifyLinkdown.setStatus('current')
hm2AgentVrrpExtPreemptionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtPreemptionDelay.setStatus('current')
hm2AgentVrrpPrimaryVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpPrimaryVirtualAddress.setStatus('current')
hm2AgentVrrpExtMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("config", 2), ("ttdp", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtMethod.setStatus('current')
hm2AgentVrrpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3), )
if mibBuilder.loadTexts: hm2AgentVrrpDomainTable.setStatus('current')
hm2AgentVrrpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpDomainId"))
if mibBuilder.loadTexts: hm2AgentVrrpDomainEntry.setStatus('current')
hm2AgentVrrpDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hm2AgentVrrpDomainId.setStatus('current')
hm2AgentVrrpDomainMemberSendAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpDomainMemberSendAdv.setStatus('current')
hm2AgentVrrpDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("noSupervisor", 2), ("supervisorDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainStatus.setStatus('current')
hm2AgentVrrpDomainSupervisorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorIfIndex.setStatus('current')
hm2AgentVrrpDomainSupervisorVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorVrid.setStatus('current')
hm2AgentVrrpDomainOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainOperPriority.setStatus('current')
hm2AgentVrrpDomainSupervisorOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorOperState.setStatus('current')
hm2AgentNeighbourGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 270))
hm2AgentStaticNeighbourTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10), )
if mibBuilder.loadTexts: hm2AgentStaticNeighbourTable.setStatus('current')
hm2AgentStaticNeighbourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentStaticNeighbourAddressType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentStaticNeighbourAddress"))
if mibBuilder.loadTexts: hm2AgentStaticNeighbourEntry.setStatus('current')
hm2AgentStaticNeighbourAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hm2AgentStaticNeighbourAddressType.setStatus('current')
hm2AgentStaticNeighbourAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hm2AgentStaticNeighbourAddress.setStatus('current')
hm2AgentStaticNeighbourPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticNeighbourPhysAddress.setStatus('current')
hm2AgentStaticNeighbourIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStaticNeighbourIfIndex.setStatus('current')
hm2AgentStaticNeighbourRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticNeighbourRowStatus.setStatus('current')
hm2AgentDynamicNeighbourTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11), )
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourTable.setStatus('current')
hm2AgentDynamicNeighbourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentDynamicNeighbourAddressType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentDynamicNeighbourAddress"))
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourEntry.setStatus('current')
hm2AgentDynamicNeighbourAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAddressType.setStatus('current')
hm2AgentDynamicNeighbourAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAddress.setStatus('current')
hm2AgentDynamicNeighbourPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourPhysAddress.setStatus('current')
hm2AgentDynamicNeighbourIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourIfIndex.setStatus('current')
hm2AgentDynamicNeighbourAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 2), ("static", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAction.setStatus('current')
hm2AgentRoutingSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 280))
hm2AgentIpHelperTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 1))
if mibBuilder.loadTexts: hm2AgentIpHelperTableFullErrorReturn.setStatus('current')
hm2AgentIpHelperInvalidServerAddrErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 2))
if mibBuilder.loadTexts: hm2AgentIpHelperInvalidServerAddrErrorReturn.setStatus('current')
hm2AgentRouterOspfDependenciesNotMet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 3))
if mibBuilder.loadTexts: hm2AgentRouterOspfDependenciesNotMet.setStatus('current')
hm2AgentRouterOspfRangeTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 4))
if mibBuilder.loadTexts: hm2AgentRouterOspfRangeTableFullErrorReturn.setStatus('current')
hm2AgentRouterOspfVirtNbrTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 5))
if mibBuilder.loadTexts: hm2AgentRouterOspfVirtNbrTableFullErrorReturn.setStatus('current')
hm2AgentRouterRIPDependenciesNotMet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 8))
if mibBuilder.loadTexts: hm2AgentRouterRIPDependenciesNotMet.setStatus('current')
hm2AgentIpHelperInvalidUdpPortErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 9))
if mibBuilder.loadTexts: hm2AgentIpHelperInvalidUdpPortErrorReturn.setStatus('current')
hm2AgentStaticNeighbourTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 10))
if mibBuilder.loadTexts: hm2AgentStaticNeighbourTableFullErrorReturn.setStatus('current')
hm2AgentSecondaryAddrNoPrimaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 11))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrNoPrimaryErrorReturn.setStatus('current')
hm2AgentSecondaryAddrDifferentPrimaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 12))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrDifferentPrimaryErrorReturn.setStatus('current')
hm2AgentSecondaryAddrWrongIpClassErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 13))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrWrongIpClassErrorReturn.setStatus('current')
hm2AgentSecondaryAddrWrongSubnetErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 14))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrWrongSubnetErrorReturn.setStatus('obsolete')
hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 15))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn.setStatus('current')
hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 16))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn.setStatus('current')
hm2AgentSecondaryAddrStaticRouteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 17))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrStaticRouteErrorReturn.setStatus('current')
hm2AgentSecondaryAddrStaticARPErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 18))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrStaticARPErrorReturn.setStatus('current')
hm2AgentSecondaryAddrAbsentEntryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 19))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrAbsentEntryErrorReturn.setStatus('current')
hm2AgentPrimaryAddrWrongIpClassErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 20))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrWrongIpClassErrorReturn.setStatus('current')
hm2AgentPrimaryAddrConflictErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 21))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrConflictErrorReturn.setStatus('obsolete')
hm2AgentPrimaryAddrStaticRouteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 22))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrStaticRouteErrorReturn.setStatus('current')
hm2AgentPrimaryAddrStaticARPErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 23))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrStaticARPErrorReturn.setStatus('current')
hm2AgentPrimaryAddrExistingSecondaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 24))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrExistingSecondaryErrorReturn.setStatus('current')
hm2AgentPrimaryAddrNetworkConflictErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 25))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrNetworkConflictErrorReturn.setStatus('obsolete')
hm2AgentPrimaryAddrRoutingTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 26))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrRoutingTableFullErrorReturn.setStatus('current')
hm2AgentDstAddrHostBitSetErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 27))
if mibBuilder.loadTexts: hm2AgentDstAddrHostBitSetErrorReturn.setStatus('current')
hm2AgentSamePrefRouteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 28))
if mibBuilder.loadTexts: hm2AgentSamePrefRouteErrorReturn.setStatus('current')
hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 29))
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress.setStatus('current')
hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 30))
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress.setStatus('current')
hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 31))
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID.setStatus('current')
hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 32))
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn.setStatus('current')
hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 33))
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn.setStatus('current')
hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 34))
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn.setStatus('current')
hm2AgentRouterOspfMaxAreaErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 35))
if mibBuilder.loadTexts: hm2AgentRouterOspfMaxAreaErrorReturn.setStatus('current')
hm2AgentospfRouterIdChange = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 36))
if mibBuilder.loadTexts: hm2AgentospfRouterIdChange.setStatus('current')
hm2AgentOspfRedistDistList = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 37))
if mibBuilder.loadTexts: hm2AgentOspfRedistDistList.setStatus('current')
hm2AgentOspfDefaultAreaDeleteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 38))
if mibBuilder.loadTexts: hm2AgentOspfDefaultAreaDeleteErrorReturn.setStatus('current')
hm2AgentLocalArpDeleteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 39))
if mibBuilder.loadTexts: hm2AgentLocalArpDeleteErrorReturn.setStatus('current')
hm2AgentDynamicVlanRoutingErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 40))
if mibBuilder.loadTexts: hm2AgentDynamicVlanRoutingErrorReturn.setStatus('current')
mibBuilder.exportSymbols("HM2-PLATFORM-ROUTING-MIB", hm2AgentOspfAreaNSSADefaultInfoOriginate=hm2AgentOspfAreaNSSADefaultInfoOriginate, hm2AgentIpHelperAdminMode=hm2AgentIpHelperAdminMode, hm2AgentRouteAdds=hm2AgentRouteAdds, hm2AgentRouteModifies=hm2AgentRouteModifies, hm2AgentIpHelperInvalidServerAddrErrorReturn=hm2AgentIpHelperInvalidServerAddrErrorReturn, hm2AgentOspfAreaOpaqueLsdbEntry=hm2AgentOspfAreaOpaqueLsdbEntry, hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn=hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn, hm2AgentSwitchIntfIpHelperHitCount=hm2AgentSwitchIntfIpHelperHitCount, hm2AgentSwitchSecondaryNetMask=hm2AgentSwitchSecondaryNetMask, PYSNMP_MODULE_ID=hm2PlatformRouting, hm2AgentDynamicNeighbourAddress=hm2AgentDynamicNeighbourAddress, hm2AgentOspfStubRouterDuration=hm2AgentOspfStubRouterDuration, hm2AgentSwitchLocalProxyArpEntry=hm2AgentSwitchLocalProxyArpEntry, hm2AgentOspfDefaultInfoOriginateMetricType=hm2AgentOspfDefaultInfoOriginateMetricType, hm2AgentSwitchIntfArpType=hm2AgentSwitchIntfArpType, hm2AgentOspfLocalLsdbSequence=hm2AgentOspfLocalLsdbSequence, hm2AgentSwitchArpGroup=hm2AgentSwitchArpGroup, hm2AgentVrrpOperations=hm2AgentVrrpOperations, hm2AgentVrrpTrackId=hm2AgentVrrpTrackId, hm2AgentSwitchIpIcmpRedirectsMode=hm2AgentSwitchIpIcmpRedirectsMode, hm2AgentOspfLocalLsdbChecksum=hm2AgentOspfLocalLsdbChecksum, hm2AgentSwitchIpIcmpRateLimitInterval=hm2AgentSwitchIpIcmpRateLimitInterval, hm2AgentOspfSpfStatsSumm=hm2AgentOspfSpfStatsSumm, hm2AgentPrimaryAddrStaticARPErrorReturn=hm2AgentPrimaryAddrStaticARPErrorReturn, hm2AgentECMPGroup=hm2AgentECMPGroup, hm2AgentRouteDeletes=hm2AgentRouteDeletes, hm2AgentVrrpDomainSupervisorOperState=hm2AgentVrrpDomainSupervisorOperState, hm2AgentSnmpVRRPNewMasterTrapFlag=hm2AgentSnmpVRRPNewMasterTrapFlag, hm2AgentVrrpExtDomainStatus=hm2AgentVrrpExtDomainStatus, hm2AgentSwitchIntfArpIpAddress=hm2AgentSwitchIntfArpIpAddress, hm2AgentOspfIfIpMtuIgnoreFlag=hm2AgentOspfIfIpMtuIgnoreFlag, hm2AgentVrrpExtMethod=hm2AgentVrrpExtMethod, hm2AgentSwitchIPAddressConfigMethod=hm2AgentSwitchIPAddressConfigMethod, hm2PlatformRouting=hm2PlatformRouting, hm2AgentOspfRouteNet=hm2AgentOspfRouteNet, hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime=hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime, hm2AgentSwitchIpVlanEntry=hm2AgentSwitchIpVlanEntry, hm2AgentOspfIfEntry=hm2AgentOspfIfEntry, hm2AgentSwitchArpCacheSize=hm2AgentSwitchArpCacheSize, hm2AgentBestRoutesHigh=hm2AgentBestRoutesHigh, hm2AgentSecondaryAddrAbsentEntryErrorReturn=hm2AgentSecondaryAddrAbsentEntryErrorReturn, hm2AgentSwitchIpHelperAddress=hm2AgentSwitchIpHelperAddress, hm2AgentOspfAreaNSSARedistribute=hm2AgentOspfAreaNSSARedistribute, hm2AgentOspfQueueName=hm2AgentOspfQueueName, hm2AgentSwitchIpInterfaceIpAddress=hm2AgentSwitchIpInterfaceIpAddress, hm2AgentRipRouteRedistMetricConfigured=hm2AgentRipRouteRedistMetricConfigured, hm2AgentOspfStubRouterGroup=hm2AgentOspfStubRouterGroup, hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn=hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn, hm2AgentSnmpTrapFlagsConfigGroupLayer3=hm2AgentSnmpTrapFlagsConfigGroupLayer3, hm2AgentVrrpExtAdvertTimer=hm2AgentVrrpExtAdvertTimer, hm2AgentOspfRouteRedistSubnets=hm2AgentOspfRouteRedistSubnets, hm2AgentSwitchIntfArpEntry=hm2AgentSwitchIntfArpEntry, hm2AgentSecondaryAddrWrongSubnetErrorReturn=hm2AgentSecondaryAddrWrongSubnetErrorReturn, hm2AgentRipRouteRedistMatchExternal1=hm2AgentRipRouteRedistMatchExternal1, hm2AgentRoutingSNMPExtensionGroup=hm2AgentRoutingSNMPExtensionGroup, hm2AgentOspfAsLsdbAdvertisement=hm2AgentOspfAsLsdbAdvertisement, hm2AgentOspfExt1Routes=hm2AgentOspfExt1Routes, hm2AgentOspfRouteTable=hm2AgentOspfRouteTable, hm2AgentPrimaryAddrWrongIpClassErrorReturn=hm2AgentPrimaryAddrWrongIpClassErrorReturn, hm2AgentOspfAsLsdbChecksum=hm2AgentOspfAsLsdbChecksum, hm2AgentOspfAreaOpaqueLsdbAdvertisement=hm2AgentOspfAreaOpaqueLsdbAdvertisement, hm2AgentRoutingHeapHigh=hm2AgentRoutingHeapHigh, hm2AgentVrrpDomainEntry=hm2AgentVrrpDomainEntry, hm2AgentSecondaryAddrDifferentPrimaryErrorReturn=hm2AgentSecondaryAddrDifferentPrimaryErrorReturn, hm2AgentSwitchIpHelperStatus=hm2AgentSwitchIpHelperStatus, hm2AgentDynamicNeighbourAction=hm2AgentDynamicNeighbourAction, hm2AgentVrrpTrackVrid=hm2AgentVrrpTrackVrid, hm2AgentSwitchIntfIpHelperIpAddress=hm2AgentSwitchIntfIpHelperIpAddress, hm2AgentIpHelperInvalidUdpPortErrorReturn=hm2AgentIpHelperInvalidUdpPortErrorReturn, hm2AgentRipRouteRedistMatchExternal2=hm2AgentRipRouteRedistMatchExternal2, hm2AgentSwitchInternalVlanEntry=hm2AgentSwitchInternalVlanEntry, hm2AgentRouterVrrpAdminState=hm2AgentRouterVrrpAdminState, hm2AgentOspfLsUpdatesTx=hm2AgentOspfLsUpdatesTx, hm2AgentSwitchProxyArpMaxResponseDelay=hm2AgentSwitchProxyArpMaxResponseDelay, hm2AgentSecondaryAddrNoPrimaryErrorReturn=hm2AgentSecondaryAddrNoPrimaryErrorReturn, hm2AgentECMPOspfMaxPaths=hm2AgentECMPOspfMaxPaths, hm2AgentRipRouteRedistDistList=hm2AgentRipRouteRedistDistList, hm2AgentOspfQueueIndex=hm2AgentOspfQueueIndex, hm2AgentOspfType5LsasRx=hm2AgentOspfType5LsasRx, hm2AgentSwitchIpInterfaceEntry=hm2AgentSwitchIpInterfaceEntry, hm2AgentOspfLsUpdatesTxMax=hm2AgentOspfLsUpdatesTxMax, hm2AgentOspfLsAckRx=hm2AgentOspfLsAckRx, hm2AgentSwitchIntfIpHelperUdpPort=hm2AgentSwitchIntfIpHelperUdpPort, hm2AgentOspfType9LsasRx=hm2AgentOspfType9LsasRx, hm2AgentPrimaryAddrRoutingTableFullErrorReturn=hm2AgentPrimaryAddrRoutingTableFullErrorReturn, hm2AgentRouterOspfRFC1583CompatibilityMode=hm2AgentRouterOspfRFC1583CompatibilityMode, hm2AgentRoutingHeapSize=hm2AgentRoutingHeapSize, hm2AgentSwitchIpInterfaceNetMask=hm2AgentSwitchIpInterfaceNetMask, hm2AgentEcmpCountEntry=hm2AgentEcmpCountEntry, hm2AgentSwitchIntfIpHelperAddressEntry=hm2AgentSwitchIntfIpHelperAddressEntry, hm2AgentRipRouteRedistMode=hm2AgentRipRouteRedistMode, hm2AgentOspfDefaultMetricConfigured=hm2AgentOspfDefaultMetricConfigured, hm2AgentOspfAutoCostRefBw=hm2AgentOspfAutoCostRefBw, hm2AgentOspfAreaNSSATable=hm2AgentOspfAreaNSSATable, hm2AgentReservedLocals=hm2AgentReservedLocals, hm2AgentOspfIfAuthKeyId=hm2AgentOspfIfAuthKeyId, hm2AgentOspfQueueLimit=hm2AgentOspfQueueLimit, hm2AgentVrrpExtPreemptionDelay=hm2AgentVrrpExtPreemptionDelay, hm2AgentSwitchIpRoutingMode=hm2AgentSwitchIpRoutingMode, hm2AgentOspfLocalLsdbRouterId=hm2AgentOspfLocalLsdbRouterId, hm2AgentOspfQueueEntry=hm2AgentOspfQueueEntry, hm2AgentSwitchIntfArpTable=hm2AgentSwitchIntfArpTable, hm2AgentStaticNeighbourTableFullErrorReturn=hm2AgentStaticNeighbourTableFullErrorReturn, hm2AgentDynamicVlanRoutingErrorReturn=hm2AgentDynamicVlanRoutingErrorReturn, hm2AgentOspfRouteCost=hm2AgentOspfRouteCost, hm2AgentUniqueNextHopsHigh=hm2AgentUniqueNextHopsHigh, hm2AgentStaticNeighbourRowStatus=hm2AgentStaticNeighbourRowStatus, hm2AgentOspfAreaNSSAEntry=hm2AgentOspfAreaNSSAEntry, hm2AgentVrrpDomainOperPriority=hm2AgentVrrpDomainOperPriority, hm2AgentStaticNeighbourTable=hm2AgentStaticNeighbourTable, hm2AgentSwitchIpInterfaceNetdirectedBCMode=hm2AgentSwitchIpInterfaceNetdirectedBCMode, hm2AgentSwitchInternalVlanId=hm2AgentSwitchInternalVlanId, hm2AgentVrrpExtIfIndex=hm2AgentVrrpExtIfIndex, hm2AgentSwitchInternalVlanIfIndex=hm2AgentSwitchInternalVlanIfIndex, hm2AgentSwitchClearIpDefaultGateway=hm2AgentSwitchClearIpDefaultGateway, hm2AgentSwitchArpDynamicRenew=hm2AgentSwitchArpDynamicRenew, hm2AgentVrrpDomainTable=hm2AgentVrrpDomainTable, hm2AgentOspfAreaNSSADefaultMetricType=hm2AgentOspfAreaNSSADefaultMetricType, hm2AgentSwitchSecondaryAddressEntry=hm2AgentSwitchSecondaryAddressEntry, hm2AgentOspfSpfStatsDeltaT=hm2AgentOspfSpfStatsDeltaT, hm2AgentOspfStubRouterStartupTimeRemaining=hm2AgentOspfStubRouterStartupTimeRemaining, hm2AgentOspfType11LsasRx=hm2AgentOspfType11LsasRx, hm2AgentUdpClientMsgsDiscarded=hm2AgentUdpClientMsgsDiscarded, hm2AgentSwitchIpInterfaceTable=hm2AgentSwitchIpInterfaceTable, hm2AgentOspfAsLsdbLsid=hm2AgentOspfAsLsdbLsid, hm2AgentOspfSpfStatsRibUpdate=hm2AgentOspfSpfStatsRibUpdate, hm2AgentStaticNeighbourPhysAddress=hm2AgentStaticNeighbourPhysAddress, hm2AgentOspfRouteRedistMetric=hm2AgentOspfRouteRedistMetric, hm2AgentNextHopGroups=hm2AgentNextHopGroups, hm2AgentOspfRouteMask=hm2AgentOspfRouteMask, hm2AgentSwitchIpVlanIfIndex=hm2AgentSwitchIpVlanIfIndex, hm2AgentOspfAreaNSSAImportSummaries=hm2AgentOspfAreaNSSAImportSummaries, hm2AgentOspfRedistDistList=hm2AgentOspfRedistDistList, hm2AgentNeighbourGroup=hm2AgentNeighbourGroup, hm2AgentOspfRouteRedistDistListConfigured=hm2AgentOspfRouteRedistDistListConfigured, hm2AgentRouterRipDefaultMetric=hm2AgentRouterRipDefaultMetric, hm2AgentBestRoutes=hm2AgentBestRoutes, hm2AgentSwitchIpInterfaceBandwidth=hm2AgentSwitchIpInterfaceBandwidth, hm2AgentVrrpDomainSupervisorIfIndex=hm2AgentVrrpDomainSupervisorIfIndex, hm2AgentVrrpExtVrid=hm2AgentVrrpExtVrid, hm2AgentOspfDefaultMetric=hm2AgentOspfDefaultMetric, hm2AgentPrimaryAddrStaticRouteErrorReturn=hm2AgentPrimaryAddrStaticRouteErrorReturn, hm2AgentUniqueNextHops=hm2AgentUniqueNextHops, hm2AgentPrimaryAddrConflictErrorReturn=hm2AgentPrimaryAddrConflictErrorReturn, hm2AgentSwitchIpInterfaceMtuValue=hm2AgentSwitchIpInterfaceMtuValue, hm2AgentOspfIfMetricTable=hm2AgentOspfIfMetricTable, hm2AgentRouterRipRoutePref=hm2AgentRouterRipRoutePref, hm2AgentOspfType3LsasRx=hm2AgentOspfType3LsasRx, hm2AgentOspfRoutePrefInterArea=hm2AgentOspfRoutePrefInterArea, hm2AgentBootpDhcpRelayCircuitIdOptionMode=hm2AgentBootpDhcpRelayCircuitIdOptionMode, hm2AgentOspfVirtIfEntry=hm2AgentOspfVirtIfEntry, hm2AgentStaticNeighbourAddressType=hm2AgentStaticNeighbourAddressType, hm2AgentOspfSpfDelayTime=hm2AgentOspfSpfDelayTime, hm2AgentOspfPacketStatsGroup=hm2AgentOspfPacketStatsGroup, hm2AgentSamePrefRouteErrorReturn=hm2AgentSamePrefRouteErrorReturn, hm2AgentLocalArpDeleteErrorReturn=hm2AgentLocalArpDeleteErrorReturn, hm2AgentOspfLocalLsdbIpAddress=hm2AgentOspfLocalLsdbIpAddress, hm2AgentEcmpGroupsHigh=hm2AgentEcmpGroupsHigh, hm2AgentRouterRipConfigGroup=hm2AgentRouterRipConfigGroup, hm2AgentSwitchIpInterfaceRoutingMode=hm2AgentSwitchIpInterfaceRoutingMode, hm2AgentVrrpTrackingTable=hm2AgentVrrpTrackingTable, hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress=hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress, hm2AgentEbgpRoutes=hm2AgentEbgpRoutes, hm2AgentOspfDefaultPassiveMode=hm2AgentOspfDefaultPassiveMode, hm2AgentDynamicNeighbourPhysAddress=hm2AgentDynamicNeighbourPhysAddress, hm2AgentOspfRouteRedistSource=hm2AgentOspfRouteRedistSource, hm2AgentSwitchIpInterfaceSuppressed=hm2AgentSwitchIpInterfaceSuppressed, hm2AgentConnectedRoutes=hm2AgentConnectedRoutes, hm2AgentSwitchIpInterfaceIcmpUnreachables=hm2AgentSwitchIpInterfaceIcmpUnreachables, hm2AgentSecondaryAddrWrongIpClassErrorReturn=hm2AgentSecondaryAddrWrongIpClassErrorReturn, hm2AgentSwitchIpVlanId=hm2AgentSwitchIpVlanId, hm2AgentSwitchArpCacheClear=hm2AgentSwitchArpCacheClear, hm2AgentOspfRoutePrefExternal=hm2AgentOspfRoutePrefExternal, hm2AgentVrrpTrackOperStatus=hm2AgentVrrpTrackOperStatus, hm2AgentSwitchArpMaxRetries=hm2AgentSwitchArpMaxRetries, hm2AgentBootpDhcpRelayMaxHopCount=hm2AgentBootpDhcpRelayMaxHopCount, hm2AgentSwitchIpInterfaceIcmpRedirects=hm2AgentSwitchIpInterfaceIcmpRedirects, hm2AgentSwitchArpAgeoutTime=hm2AgentSwitchArpAgeoutTime, hm2AgentDhcpServerMsgsRelayed=hm2AgentDhcpServerMsgsRelayed, hm2AgentSwitchIpRouterDiscoveryIfIndex=hm2AgentSwitchIpRouterDiscoveryIfIndex, hm2AgentRouterOspfRangeTableFullErrorReturn=hm2AgentRouterOspfRangeTableFullErrorReturn, hm2AgentVrrpExtNotifyLinkdown=hm2AgentVrrpExtNotifyLinkdown, hm2AgentOspfDdTx=hm2AgentOspfDdTx, hm2AgentUdpClientMsgsRelayed=hm2AgentUdpClientMsgsRelayed, hm2AgentEcmpGroups=hm2AgentEcmpGroups, hm2AgentospfRouterIdChange=hm2AgentospfRouterIdChange, hm2AgentOspfAreaOpaqueLsdbTable=hm2AgentOspfAreaOpaqueLsdbTable, hm2AgentOspfRouteProtoType=hm2AgentOspfRouteProtoType, hm2AgentOspfAreaOpaqueLsdbLsid=hm2AgentOspfAreaOpaqueLsdbLsid, hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval=hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval, hm2AgentRouterVrrpOperPriority=hm2AgentRouterVrrpOperPriority, hm2AgentVrrpDomainId=hm2AgentVrrpDomainId, hm2AgentRipRoutes=hm2AgentRipRoutes, hm2AgentRipRouteRedistMatchNSSAExternal1=hm2AgentRipRouteRedistMatchNSSAExternal1, hm2AgentBootpDhcpRelayGroup=hm2AgentBootpDhcpRelayGroup, hm2AgentSwitchArpStaticEntryCountCurrent=hm2AgentSwitchArpStaticEntryCountCurrent, hm2AgentRouterVrrpOperTable=hm2AgentRouterVrrpOperTable, hm2AgentSwitchIntfArpAge=hm2AgentSwitchIntfArpAge, hm2AgentOspfDefaultAreaDeleteErrorReturn=hm2AgentOspfDefaultAreaDeleteErrorReturn, hm2AgentOspfHellosTx=hm2AgentOspfHellosTx, hm2AgentOspfRouteRedistMetricType=hm2AgentOspfRouteRedistMetricType, hm2AgentSwitchInternalVlanTable=hm2AgentSwitchInternalVlanTable, hm2AgentSwitchIpHelperAddressEntry=hm2AgentSwitchIpHelperAddressEntry, hm2AgentOspfDefaultInfoOriginateAlways=hm2AgentOspfDefaultInfoOriginateAlways, hm2AgentOspfNbrDeadTime=hm2AgentOspfNbrDeadTime, hm2AgentLocalBgpRoutes=hm2AgentLocalBgpRoutes, hm2AgentSwitchLocalProxyArpMode=hm2AgentSwitchLocalProxyArpMode, hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress=hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress, hm2AgentOspfLocalLsdbEntry=hm2AgentOspfLocalLsdbEntry, hm2AgentSwitchIpStaticDefaultPref=hm2AgentSwitchIpStaticDefaultPref, hm2AgentSwitchIntfIpHelperAddressTable=hm2AgentSwitchIntfIpHelperAddressTable, hm2AgentSwitchSecondaryIpAddress=hm2AgentSwitchSecondaryIpAddress, hm2AgentOspfNbrTable=hm2AgentOspfNbrTable, hm2AgentOspfSpfIndex=hm2AgentOspfSpfIndex, hm2AgentRouterVrrpOperEntry=hm2AgentRouterVrrpOperEntry, hm2AgentOspfLsReqTx=hm2AgentOspfLsReqTx, hm2AgentOspfSpfStatsTable=hm2AgentOspfSpfStatsTable, hm2AgentRouterRipAdminState=hm2AgentRouterRipAdminState, hm2AgentSwitchIpIcmpRateLimitBurstSize=hm2AgentSwitchIpIcmpRateLimitBurstSize, hm2AgentOspfSpfStatsIntra=hm2AgentOspfSpfStatsIntra, hm2AgentOspfStubRouterAdvertisement=hm2AgentOspfStubRouterAdvertisement, hm2AgentVrrpTrackIfIndex=hm2AgentVrrpTrackIfIndex, hm2AgentOspfType1LsasRx=hm2AgentOspfType1LsasRx, hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID=hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID, hm2AgentEcmpNextHopCount=hm2AgentEcmpNextHopCount, hm2AgentEcmpRouteCount=hm2AgentEcmpRouteCount, hm2AgentOspfRoutePrefIntraArea=hm2AgentOspfRoutePrefIntraArea, hm2AgentRipRouteRedistMatchNSSAExternal2=hm2AgentRipRouteRedistMatchNSSAExternal2, hm2AgentTotalRoutes=hm2AgentTotalRoutes, hm2AgentSwitchIpInterfaceReUseTime=hm2AgentSwitchIpInterfaceReUseTime, hm2AgentSwitchIpInterfaceClearIp=hm2AgentSwitchIpInterfaceClearIp, hm2AgentSwitchIpFirstActiveAddress=hm2AgentSwitchIpFirstActiveAddress, hm2AgentRipRouteRedistDistListConfigured=hm2AgentRipRouteRedistDistListConfigured, hm2AgentRoutingHeapInUse=hm2AgentRoutingHeapInUse, hm2AgentEcmpRoutes=hm2AgentEcmpRoutes, hm2AgentOspfAreaOpaqueLsdbRouterId=hm2AgentOspfAreaOpaqueLsdbRouterId, hm2AgentOspfSpfStatsExt=hm2AgentOspfSpfStatsExt, hm2AgentOspfLsUpdatesRx=hm2AgentOspfLsUpdatesRx, hm2AgentIpHelperGroup=hm2AgentIpHelperGroup, hm2AgentOspfRouteRedistDistList=hm2AgentOspfRouteRedistDistList, hm2AgentDhcpClientMsgsRelayed=hm2AgentDhcpClientMsgsRelayed, hm2AgentDhcpClientMsgsReceived=hm2AgentDhcpClientMsgsReceived, hm2AgentOspfVirtIfAuthKeyId=hm2AgentOspfVirtIfAuthKeyId, hm2AgentSwitchSecondaryStatus=hm2AgentSwitchSecondaryStatus, hm2AgentDhcpServerMsgsReceived=hm2AgentDhcpServerMsgsReceived, hm2AgentOspfHellosRx=hm2AgentOspfHellosRx, hm2AgentRouterOspfMaxAreaErrorReturn=hm2AgentRouterOspfMaxAreaErrorReturn, hm2AgentRouterOspfVirtNbrTableFullErrorReturn=hm2AgentRouterOspfVirtNbrTableFullErrorReturn, hm2AgentSwitchIpFirstActiveAddressType=hm2AgentSwitchIpFirstActiveAddressType, hm2AgentOspfQueueHigh=hm2AgentOspfQueueHigh, hm2AgentRouterRipHostRoutesAcceptMode=hm2AgentRouterRipHostRoutesAcceptMode, hm2AgentRoutingTableSummaryGroup=hm2AgentRoutingTableSummaryGroup, hm2AgentRipRouteRedistSource=hm2AgentRipRouteRedistSource, hm2AgentSecondaryAddrStaticARPErrorReturn=hm2AgentSecondaryAddrStaticARPErrorReturn)
mibBuilder.exportSymbols("HM2-PLATFORM-ROUTING-MIB", hm2AgentOspfIfAdvertiseSecondaries=hm2AgentOspfIfAdvertiseSecondaries, hm2AgentOspfSpfStatsReason=hm2AgentOspfSpfStatsReason, hm2AgentOspfIfMetricCalculatedCost=hm2AgentOspfIfMetricCalculatedCost, hm2AgentSwitchIpHelperAddressTable=hm2AgentSwitchIpHelperAddressTable, hm2AgentSwitchIpDefaultGateway=hm2AgentSwitchIpDefaultGateway, hm2AgentDynamicNeighbourAddressType=hm2AgentDynamicNeighbourAddressType, hm2AgentOspfAsLsdbRouterId=hm2AgentOspfAsLsdbRouterId, hm2AgentSwitchDhcpOperation=hm2AgentSwitchDhcpOperation, hm2AgentPrimaryAddrExistingSecondaryErrorReturn=hm2AgentPrimaryAddrExistingSecondaryErrorReturn, hm2AgentRipRouteRedistTable=hm2AgentRipRouteRedistTable, hm2AgentOspfAreaOpaqueLsdbSequence=hm2AgentOspfAreaOpaqueLsdbSequence, hm2AgentSwitchIpRouterDiscoveryEntry=hm2AgentSwitchIpRouterDiscoveryEntry, hm2AgentEcmpRetries=hm2AgentEcmpRetries, hm2AgentFailedRouteAdds=hm2AgentFailedRouteAdds, hm2AgentRouterVrrpNumberOfFastInst=hm2AgentRouterVrrpNumberOfFastInst, hm2AgentTruncEcmpRoutes=hm2AgentTruncEcmpRoutes, hm2AgentOspfIfMetricEntry=hm2AgentOspfIfMetricEntry, hm2AgentOspfLsUpdatesRxMax=hm2AgentOspfLsUpdatesRxMax, hm2AgentOspfLsaRetxCount=hm2AgentOspfLsaRetxCount, hm2AgentRouterRipDefaultMetricConfigured=hm2AgentRouterRipDefaultMetricConfigured, hm2AgentRipRouteRedistMatchInternal=hm2AgentRipRouteRedistMatchInternal, hm2AgentOspfAreaOpaqueLsdbType=hm2AgentOspfAreaOpaqueLsdbType, hm2AgentSwitchIpHelperUdpPort=hm2AgentSwitchIpHelperUdpPort, hm2AgentInternalVlanBase=hm2AgentInternalVlanBase, hm2AgentOspfAreaOpaqueLsdbChecksum=hm2AgentOspfAreaOpaqueLsdbChecksum, hm2AgentSwitchIpRouterDiscoveryPreferenceLevel=hm2AgentSwitchIpRouterDiscoveryPreferenceLevel, hm2AgentSwitchArpTotalEntryCountCurrent=hm2AgentSwitchArpTotalEntryCountCurrent, hm2AgentOspfLocalLsdbType=hm2AgentOspfLocalLsdbType, hm2AgentOspfStubRouterReason=hm2AgentOspfStubRouterReason, hm2AgentStaticNeighbourAddress=hm2AgentStaticNeighbourAddress, hm2AgentOspfDefaultInfoOriginateMetric=hm2AgentOspfDefaultInfoOriginateMetric, hm2AgentRouterRipUpdateTimerInterval=hm2AgentRouterRipUpdateTimerInterval, hm2AgentRouterOspfDependenciesNotMet=hm2AgentRouterOspfDependenciesNotMet, hm2AgentSwitchIpInterfaceCurrentPenalty=hm2AgentSwitchIpInterfaceCurrentPenalty, hm2AgentOspfDdRx=hm2AgentOspfDdRx, hm2AgentOspfQueueTable=hm2AgentOspfQueueTable, hm2AgentUnresolvedRouteAdds=hm2AgentUnresolvedRouteAdds, hm2AgentOspfLocalLsdbAddressLessIf=hm2AgentOspfLocalLsdbAddressLessIf, hm2AgentVrrpExtDomainId=hm2AgentVrrpExtDomainId, hm2AgentOspfRouteRedistTable=hm2AgentOspfRouteRedistTable, hm2AgentRipRouteRedistEntry=hm2AgentRipRouteRedistEntry, hm2AgentVrrpExtCfgPriority=hm2AgentVrrpExtCfgPriority, hm2AgentOspfIntraRoutes=hm2AgentOspfIntraRoutes, hm2AgentOspfRouteRedistMode=hm2AgentOspfRouteRedistMode, hm2AgentOspfInterRoutes=hm2AgentOspfInterRoutes, hm2AgentVrrpExtEntry=hm2AgentVrrpExtEntry, hm2AgentVrrpTrackDecrement=hm2AgentVrrpTrackDecrement, hm2AgentSwitchIntfArpStatus=hm2AgentSwitchIntfArpStatus, hm2AgentOspfLocalLsdbAge=hm2AgentOspfLocalLsdbAge, hm2AgentOspfAreaOpaqueLsdbAreaId=hm2AgentOspfAreaOpaqueLsdbAreaId, hm2AgentOspfType2LsasRx=hm2AgentOspfType2LsasRx, hm2AgentOspfSpfStatsSpfTotal=hm2AgentOspfSpfStatsSpfTotal, hm2AgentDynamicNeighbourIfIndex=hm2AgentDynamicNeighbourIfIndex, hm2AgentOspfOpaqueLsaSupport=hm2AgentOspfOpaqueLsaSupport, hm2AgentOspfRouteRedistTag=hm2AgentOspfRouteRedistTag, hm2AgentEcmpCountTable=hm2AgentEcmpCountTable, hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn=hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn, hm2AgentOspfRouteRedistMetricConfigured=hm2AgentOspfRouteRedistMetricConfigured, hm2AgentOspfIfPassiveMode=hm2AgentOspfIfPassiveMode, hm2AgentRip2IfConfEntry=hm2AgentRip2IfConfEntry, hm2AgentNextHopGroupsHigh=hm2AgentNextHopGroupsHigh, hm2AgentInternalVlanPolicy=hm2AgentInternalVlanPolicy, hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn=hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn, hm2AgentSwitchArpStaticEntryCountMax=hm2AgentSwitchArpStaticEntryCountMax, hm2AgentSwitchArpSparseLearn=hm2AgentSwitchArpSparseLearn, hm2AgentOspfLsAckTx=hm2AgentOspfLsAckTx, hm2AgentOspfExt2Routes=hm2AgentOspfExt2Routes, hm2AgentVrrpDomainStatus=hm2AgentVrrpDomainStatus, hm2AgentOspfType10LsasRx=hm2AgentOspfType10LsasRx, hm2AgentOspfNbrEntry=hm2AgentOspfNbrEntry, hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress=hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress, hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn=hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn, hm2AgentSwitchIpRouterDiscoveryTable=hm2AgentSwitchIpRouterDiscoveryTable, hm2AgentUdpClientMsgsReceived=hm2AgentUdpClientMsgsReceived, hm2AgentVrrpExtTable=hm2AgentVrrpExtTable, hm2AgentStaticNeighbourIfIndex=hm2AgentStaticNeighbourIfIndex, hm2AgentRip2IfConfAuthKeyId=hm2AgentRip2IfConfAuthKeyId, hm2AgentOspfIfFastHelloMode=hm2AgentOspfIfFastHelloMode, hm2AgentSwitchIpRouterDiscoveryAdvertiseMode=hm2AgentSwitchIpRouterDiscoveryAdvertiseMode, hm2AgentOspfAsLsdbTable=hm2AgentOspfAsLsdbTable, hm2AgentVrrpExtDomainRole=hm2AgentVrrpExtDomainRole, hm2AgentDynamicNeighbourTable=hm2AgentDynamicNeighbourTable, hm2AgentAlternateRoutes=hm2AgentAlternateRoutes, hm2AgentSwitchIpIcmpControlGroup=hm2AgentSwitchIpIcmpControlGroup, hm2AgentOspfSpfStatsEntry=hm2AgentOspfSpfStatsEntry, hm2AgentOspfRouteEntry=hm2AgentOspfRouteEntry, hm2AgentSecondaryAddrStaticRouteErrorReturn=hm2AgentSecondaryAddrStaticRouteErrorReturn, hm2AgentSwitchArpTotalEntryCountPeak=hm2AgentSwitchArpTotalEntryCountPeak, hm2AgentSwitchIpInterfaceIfIndex=hm2AgentSwitchIpInterfaceIfIndex, hm2AgentOspfAsLsdbEntry=hm2AgentOspfAsLsdbEntry, hm2AgentBootpDhcpRelayMinWaitTime=hm2AgentBootpDhcpRelayMinWaitTime, hm2AgentStaticRoutes=hm2AgentStaticRoutes, hm2AgentStaticNeighbourEntry=hm2AgentStaticNeighbourEntry, hm2AgentSwitchIpGroup=hm2AgentSwitchIpGroup, hm2AgentOspfIfTable=hm2AgentOspfIfTable, hm2AgentRoutingHeapGroup=hm2AgentRoutingHeapGroup, hm2AgentOspfLocalLsdbTable=hm2AgentOspfLocalLsdbTable, hm2AgentOspfType7LsasRx=hm2AgentOspfType7LsasRx, hm2AgentVrrpTrackingEntry=hm2AgentVrrpTrackingEntry, hm2AgentVrrpDomainMemberSendAdv=hm2AgentVrrpDomainMemberSendAdv, hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval=hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval, hm2AgentUdpClientMsgsTtlExpired=hm2AgentUdpClientMsgsTtlExpired, hm2AgentOspfAreaNSSADefaultMetric=hm2AgentOspfAreaNSSADefaultMetric, hm2AgentBgpRoutes=hm2AgentBgpRoutes, hm2AgentOspfVirtIfTable=hm2AgentOspfVirtIfTable, hm2AgentSwitchIntfIpHelperStatus=hm2AgentSwitchIntfIpHelperStatus, hm2AgentInvalidRouteAdds=hm2AgentInvalidRouteAdds, hm2AgentVrrpTrackRowStatus=hm2AgentVrrpTrackRowStatus, hm2AgentOspfAreaOpaqueLsdbAge=hm2AgentOspfAreaOpaqueLsdbAge, hm2AgentOspfDefaultInfoOriginate=hm2AgentOspfDefaultInfoOriginate, hm2AgentSwitchIpVlanTable=hm2AgentSwitchIpVlanTable, hm2AgentSwitchIntfArpMacAddress=hm2AgentSwitchIntfArpMacAddress, hm2AgentInternalVlanGroup=hm2AgentInternalVlanGroup, hm2AgentOspfQueueDrops=hm2AgentOspfQueueDrops, hm2AgentSwitchIpHelperHitCount=hm2AgentSwitchIpHelperHitCount, hm2AgentVrrpExtAdvertAddress=hm2AgentVrrpExtAdvertAddress, hm2AgentRip2IfConfTable=hm2AgentRip2IfConfTable, hm2AgentRouterOspfConfigGroup=hm2AgentRouterOspfConfigGroup, hm2AgentSwitchIntfArpIfIndex=hm2AgentSwitchIntfArpIfIndex, hm2AgentSwitchArpResponseTime=hm2AgentSwitchArpResponseTime, hm2AgentSwitchLocalProxyArpTable=hm2AgentSwitchLocalProxyArpTable, hm2AgentOspfDefaultInfoOriginateMetricConfigured=hm2AgentOspfDefaultInfoOriginateMetricConfigured, hm2AgentOspfAsLsdbType=hm2AgentOspfAsLsdbType, hm2AgentOspfLocalLsdbLsid=hm2AgentOspfLocalLsdbLsid, hm2AgentOspfLocalLsdbAdvertisement=hm2AgentOspfLocalLsdbAdvertisement, hm2AgentIpHelperTableFullErrorReturn=hm2AgentIpHelperTableFullErrorReturn, hm2AgentOspfQueueLength=hm2AgentOspfQueueLength, hm2AgentOspfQueueGroup=hm2AgentOspfQueueGroup, hm2AgentIbgpRoutes=hm2AgentIbgpRoutes, hm2AgentSwitchIpInterfaceProxyARPMode=hm2AgentSwitchIpInterfaceProxyARPMode, hm2AgentSwitchIpInterfaceNumberOfFlaps=hm2AgentSwitchIpInterfaceNumberOfFlaps, hm2AgentRouterRipDefaultInfoOriginate=hm2AgentRouterRipDefaultInfoOriginate, hm2AgentSwitchIpInterfaceUnnumberedIfIndex=hm2AgentSwitchIpInterfaceUnnumberedIfIndex, hm2AgentOspfAsLsdbAge=hm2AgentOspfAsLsdbAge, hm2AgentRejectRoutes=hm2AgentRejectRoutes, hm2AgentSwitchIpIcmpEchoReplyMode=hm2AgentSwitchIpIcmpEchoReplyMode, hm2AgentVrrpExtGroup=hm2AgentVrrpExtGroup, hm2AgentSwitchSecondaryAddressTable=hm2AgentSwitchSecondaryAddressTable, hm2AgentOspfSpfHoldTime=hm2AgentOspfSpfHoldTime, hm2AgentRouterVrrpConfigGroup=hm2AgentRouterVrrpConfigGroup, hm2AgentDynamicNeighbourEntry=hm2AgentDynamicNeighbourEntry, hm2AgentOspfRouteRedistEntry=hm2AgentOspfRouteRedistEntry, hm2AgentVrrpDomainSupervisorVrid=hm2AgentVrrpDomainSupervisorVrid, hm2AgentOspfLsReqRx=hm2AgentOspfLsReqRx, hm2AgentRipRouteRedistMetric=hm2AgentRipRouteRedistMetric, hm2AgentVrrpExtNotifyAddress=hm2AgentVrrpExtNotifyAddress, hm2AgentRouterRipAutoSummaryMode=hm2AgentRouterRipAutoSummaryMode, hm2AgentSnmpVRRPAuthFailureTrapFlag=hm2AgentSnmpVRRPAuthFailureTrapFlag, hm2AgentVrrpPrimaryVirtualAddress=hm2AgentVrrpPrimaryVirtualAddress, hm2AgentOspfAsLsdbSequence=hm2AgentOspfAsLsdbSequence, hm2AgentOspfRoutes=hm2AgentOspfRoutes, hm2AgentPrimaryAddrNetworkConflictErrorReturn=hm2AgentPrimaryAddrNetworkConflictErrorReturn, hm2AgentOspfCountersCleared=hm2AgentOspfCountersCleared, hm2AgentRouterRipSplitHorizonMode=hm2AgentRouterRipSplitHorizonMode, hm2AgentDstAddrHostBitSetErrorReturn=hm2AgentDstAddrHostBitSetErrorReturn, hm2AgentSwitchIpVlanRoutingStatus=hm2AgentSwitchIpVlanRoutingStatus, hm2AgentRouterRIPDependenciesNotMet=hm2AgentRouterRIPDependenciesNotMet, hm2AgentOspfType4LsasRx=hm2AgentOspfType4LsasRx)
