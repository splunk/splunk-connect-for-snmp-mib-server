#
# PySNMP MIB module DAP-3520-v115 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DAP-3520-v115
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, Gauge32, private, Counter64, ObjectIdentity, Bits, IpAddress, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "Gauge32", "private", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
class DisplayString(OctetString):
    pass

enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_dapfamily = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37)).setLabel("dlink-dapfamily")
dap3520 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2))
lan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1))
lanIfSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1))
lanIfSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1), )
if mibBuilder.loadTexts: lanIfSettingTable.setStatus('mandatory')
lanIfSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lanIfSettingEntry.setStatus('mandatory')
lanIfGetIpAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfGetIpAddressFrom.setStatus('mandatory')
lanIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfIpAddress.setStatus('mandatory')
lanIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfSubnetMask.setStatus('mandatory')
lanIfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfDefaultGateway.setStatus('mandatory')
lanIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIfMacAddress.setStatus('mandatory')
lanIfPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfPrimaryDNS.setStatus('mandatory')
lanIfSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfSecondaryDNS.setStatus('mandatory')
wirelesslan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3))
wirelessLanIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLanIfNumber.setStatus('mandatory')
wirelessLanIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 2), )
if mibBuilder.loadTexts: wirelessLanIfTable.setStatus('mandatory')
wirelessLanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wirelessLanIfEntry.setStatus('mandatory')
wirelessLanIfDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessLanIfDesc.setStatus('mandatory')
wirelessLanIfObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLanIfObjectID.setStatus('mandatory')
ieee802dot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3))
dot11Parameters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1))
dot11ParametersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: dot11ParametersTable.setStatus('mandatory')
dot11ParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ParametersEntry.setStatus('mandatory')
dot11Ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Ssid.setStatus('mandatory')
dot11SsidBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SsidBroadcast.setStatus('mandatory')
dot11Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Channel.setStatus('mandatory')
dot11ChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelList.setStatus('mandatory')
dot11Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Frequency.setStatus('mandatory')
dot11DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate.setStatus('mandatory')
dot11WifiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6, 7, 8, 9))).clone(namedValues=NamedValues(("band2dot4-n", 2), ("band2dot4-bg", 3), ("band2dot4-bgn", 6), ("band5-a", 7), ("band5-n", 8), ("band5-an", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WifiMode.setStatus('mandatory')
dot11BeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BeaconInterval.setStatus('mandatory')
dot11Dtim = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Dtim.setStatus('mandatory')
dot11TransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("quarter", 3), ("eighth", 4), ("min", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TransmitPower.setStatus('mandatory')
dot11RadioWave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadioWave.setStatus('mandatory')
dot11AutoChannelScan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoChannelScan.setStatus('mandatory')
dot11Wmm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Wmm.setStatus('mandatory')
dot11ApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ap", 1), ("wdsWithAp", 2), ("wdsWithoutAp", 3), ("wirelessClient", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ApMode.setStatus('mandatory')
dot11ChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cwm20MHz", 1), ("cwmAuto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ChannelWidth.setStatus('mandatory')
dot11DataRateList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DataRateList.setStatus('mandatory')
dot11AckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AckTimeout.setStatus('mandatory')
dot11ShortGI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortGI.setStatus('mandatory')
dot11Igmpsnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Igmpsnooping.setStatus('mandatory')
dot11Band = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("band2dot4gHz", 0), ("band5gHz", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Band.setStatus('mandatory')
dot11Band5GHzDataRateList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Band5GHzDataRateList.setStatus('mandatory')
dot11Band5GHzWdsChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Band5GHzWdsChannelList.setStatus('mandatory')
dot11Band5GHzChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Band5GHzChannelList.setStatus('mandatory')
dot11ApModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ApModeStatus.setStatus('mandatory')
dot11Countrycode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Countrycode.setStatus('mandatory')
dot11Application = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("indoor", 1), ("outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Application.setStatus('mandatory')
dot11Band5GHzOutdoorChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Band5GHzOutdoorChannelList.setStatus('mandatory')
dot11MulticastRateABandList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastRateABandList.setStatus('mandatory')
dot11MulticastRateGBandList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastRateGBandList.setStatus('mandatory')
dot11MulticastRateABand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 44), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MulticastRateABand.setStatus('mandatory')
dot11MulticastRateGBand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MulticastRateGBand.setStatus('mandatory')
dot11HT2040Coexistence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HT2040Coexistence.setStatus('mandatory')
dot11RemoteApMacAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2))
dot11RemoteApMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dot11RemoteApMacAddressTable.setStatus('mandatory')
dot11RemoteApMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11RemoteApMacAddressIndex"))
if mibBuilder.loadTexts: dot11RemoteApMacAddressEntry.setStatus('mandatory')
dot11RemoteApMacAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11RemoteApMacAddressIndex.setStatus('mandatory')
dot11RemoteApMacAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RemoteApMacAddressList.setStatus('mandatory')
dot11RemoteApMacAddressAccessTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 2), )
if mibBuilder.loadTexts: dot11RemoteApMacAddressAccessTable.setStatus('mandatory')
dot11RemoteApMacAddressAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11RemoteApMacAddressAccessEntry.setStatus('mandatory')
dot11RemoteApMacAddressAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RemoteApMacAddressAdd.setStatus('mandatory')
dot11RemoteApMacAddressDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RemoteApMacAddressDelete.setStatus('mandatory')
dot11RemoteApMacAddressDeleteAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleteall", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RemoteApMacAddressDeleteAll.setStatus('mandatory')
dot11SiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3))
dot11SiteSurveyRefreshTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dot11SiteSurveyRefreshTable.setStatus('mandatory')
dot11SiteSurveyRefreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SiteSurveyRefreshEntry.setStatus('mandatory')
dot11SiteSurveyRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SiteSurveyRefresh.setStatus('mandatory')
dot11SiteSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2), )
if mibBuilder.loadTexts: dot11SiteSurveyTable.setStatus('mandatory')
dot11SiteSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11SiteSurveyIndex"))
if mibBuilder.loadTexts: dot11SiteSurveyEntry.setStatus('mandatory')
dot11SiteSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11SiteSurveyIndex.setStatus('mandatory')
dot11SiteSurveyBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyBssType.setStatus('mandatory')
dot11SiteSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyChannel.setStatus('mandatory')
dot11SiteSurveyRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyRssi.setStatus('mandatory')
dot11SiteSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyBssid.setStatus('mandatory')
dot11SiteSurveyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyEncryption.setStatus('mandatory')
dot11SiteSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveySsid.setStatus('mandatory')
dot11WdsSiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4))
dot11WdsSiteSurveyRefreshTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 1), )
if mibBuilder.loadTexts: dot11WdsSiteSurveyRefreshTable.setStatus('mandatory')
dot11WdsSiteSurveyRefreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11WdsSiteSurveyRefreshEntry.setStatus('mandatory')
dot11WdsSiteSurveyRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WdsSiteSurveyRefresh.setStatus('mandatory')
dot11WdsSiteSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2), )
if mibBuilder.loadTexts: dot11WdsSiteSurveyTable.setStatus('mandatory')
dot11WdsSiteSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11WdsSiteSurveyIndex"))
if mibBuilder.loadTexts: dot11WdsSiteSurveyEntry.setStatus('mandatory')
dot11WdsSiteSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11WdsSiteSurveyIndex.setStatus('mandatory')
dot11WdsSiteSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsSiteSurveyChannel.setStatus('mandatory')
dot11WdsSiteSurveyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsSiteSurveyMode.setStatus('mandatory')
dot11WdsSiteSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsSiteSurveyBssid.setStatus('mandatory')
dot11WdsSiteSurveyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsSiteSurveyEncryption.setStatus('mandatory')
dot11WdsSiteSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 1, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsSiteSurveySsid.setStatus('mandatory')
dot11Securities = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2))
dot11SecuritiesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: dot11SecuritiesTable.setStatus('mandatory')
dot11SecuritiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SecuritiesEntry.setStatus('mandatory')
dot11Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa2-auto-psk", 8), ("wpa2-auto-eap", 9), ("dot1x", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Authentication.setStatus('mandatory')
dot11Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Encryption.setStatus('mandatory')
dot11KeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KeyIndex.setStatus('mandatory')
dot11PassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PassPhrase.setStatus('mandatory')
dot11CipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("aes", 2), ("tkip", 3), ("wep", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CipherType.setStatus('mandatory')
dot11GroupKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupKeyUpdateInterval.setStatus('mandatory')
dot11PrimaryRadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrimaryRadiusServer.setStatus('mandatory')
dot11PrimaryRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrimaryRadiusPort.setStatus('mandatory')
dot11PrimaryRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrimaryRadiusSecret.setStatus('mandatory')
dot11NetworkAccessProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11NetworkAccessProtection.setStatus('mandatory')
dot11RadiusKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusKeyUpdateInterval.setStatus('mandatory')
dot11WpaEapType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ttls", 1), ("peap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WpaEapType.setStatus('mandatory')
dot11WpaEapAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("mschapv2", 2), ("pap", 3), ("chap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WpaEapAuthenticationType.setStatus('mandatory')
dot11WpaEapUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WpaEapUsername.setStatus('mandatory')
dot11WpaEapPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WpaEapPasswd.setStatus('mandatory')
dot11AutoRekeyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoRekeyControl.setStatus('mandatory')
dot11AutoRekeyStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoRekeyStartWeek.setStatus('mandatory')
dot11AutoRekeyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoRekeyStartTime.setStatus('mandatory')
dot11AutoRekeyTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoRekeyTimeInterval.setStatus('mandatory')
dot11AutoRekeyPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 1, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AutoRekeyPassPhrase.setStatus('mandatory')
dot11WepKeyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: dot11WepKeyTable.setStatus('mandatory')
dot11WepKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11wepKeyIndex"))
if mibBuilder.loadTexts: dot11WepKeyEntry.setStatus('mandatory')
dot11wepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11wepKeyIndex.setStatus('mandatory')
dot11WepKeyEntryMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WepKeyEntryMethod.setStatus('mandatory')
dot11WepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WepKey.setStatus('mandatory')
dot11Filter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3))
dot11PartionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1), )
if mibBuilder.loadTexts: dot11PartionTable.setStatus('mandatory')
dot11PartionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PartionEntry.setStatus('mandatory')
dot11EthernetToWlanAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EthernetToWlanAccess.setStatus('mandatory')
dot11InternalStationConnectionPrimarySSID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("guestmode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InternalStationConnectionPrimarySSID.setStatus('mandatory')
dot11InternalStationConnectionMultiSSID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("guestmode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InternalStationConnectionMultiSSID1.setStatus('mandatory')
dot11InternalStationConnectionMultiSSID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("guestmode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InternalStationConnectionMultiSSID2.setStatus('mandatory')
dot11InternalStationConnectionMultiSSID3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("guestmode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InternalStationConnectionMultiSSID3.setStatus('mandatory')
dot11MacAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 2), )
if mibBuilder.loadTexts: dot11MacAccessControlTable.setStatus('mandatory')
dot11MacAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11MacAccessControlEntry.setStatus('mandatory')
dot11MacAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControl.setStatus('mandatory')
dot11MacAccessControlMacAddressAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControlMacAddressAdd.setStatus('mandatory')
dot11MacAccessControlMacAddressDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControlMacAddressDelete.setStatus('mandatory')
dot11MacAccessControlListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 3), )
if mibBuilder.loadTexts: dot11MacAccessControlListTable.setStatus('mandatory')
dot11MacAccessControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11MacAccessControlListIndex"))
if mibBuilder.loadTexts: dot11MacAccessControlListEntry.setStatus('mandatory')
dot11MacAccessControlListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dot11MacAccessControlListIndex.setStatus('mandatory')
dot11MacAccessControlListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 2, 3, 3, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControlListMacAddress.setStatus('mandatory')
dot11ClientInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4))
dot11GetClientInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: dot11GetClientInformationTable.setStatus('mandatory')
dot11GetClientInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11GetClientInformationEntry.setStatus('mandatory')
dot11ClientInformationRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ClientInformationRefresh.setStatus('mandatory')
dot11ClientInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: dot11ClientInformationTable.setStatus('mandatory')
dot11ClientInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11ClientIndex"))
if mibBuilder.loadTexts: dot11ClientInformationEntry.setStatus('mandatory')
dot11ClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11ClientIndex.setStatus('mandatory')
dot11ClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientMacAddress.setStatus('mandatory')
dot11ClientBand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11g", 2), ("dot11n", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientBand.setStatus('mandatory')
dot11ClientAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa2-auto-psk", 8), ("wpa2-auto-eap", 9), ("dot1x", 10), ("wep", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientAuthentication.setStatus('mandatory')
dot11ClientRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientRssi.setStatus('mandatory')
dot11ClientPsm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientPsm.setStatus('mandatory')
dot11SSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SSIDIndex.setStatus('mandatory')
dot11ClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientIpAddress.setStatus('mandatory')
dot11ClientTxBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientTxBytesCount.setStatus('mandatory')
dot11ClientRxBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientRxBytesCount.setStatus('mandatory')
dot11WdsMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5))
dot11GetWdsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: dot11GetWdsTable.setStatus('mandatory')
dot11GetWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11GetWdsEntry.setStatus('mandatory')
dot11WdsRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WdsRefresh.setStatus('mandatory')
dot11WdsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2), )
if mibBuilder.loadTexts: dot11WdsTable.setStatus('mandatory')
dot11WdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11WdsIndex"))
if mibBuilder.loadTexts: dot11WdsEntry.setStatus('mandatory')
dot11WdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11WdsIndex.setStatus('mandatory')
dot11WdsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsMacAddress.setStatus('mandatory')
dot11WdsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11g", 2), ("dot11n", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsBand.setStatus('mandatory')
dot11WdsAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 11))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("wpa-enterprise", 3), ("wpa-personal", 4), ("wpa2-enterprise", 6), ("wpa2-personal", 7), ("wpa2-auto-enterprise", 8), ("wpa2-auto-personal", 9), ("wep", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsAuthentication.setStatus('mandatory')
dot11WdsRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsRssi.setStatus('mandatory')
dot11WdsSsidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsSsidIndex.setStatus('mandatory')
dot11WdsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsConnected.setStatus('mandatory')
dot11WdsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsStatus.setStatus('mandatory')
dot11WdsPsm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsPsm.setStatus('mandatory')
dot11MacClone = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6))
dot11MacCloneTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 1), )
if mibBuilder.loadTexts: dot11MacCloneTable.setStatus('mandatory')
dot11MacCloneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11MacCloneEntry.setStatus('mandatory')
dot11MacCloneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacCloneStatus.setStatus('mandatory')
dot11MacCloneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacCloneSource.setStatus('mandatory')
dot11MacCloneMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacCloneMacAddress.setStatus('mandatory')
dot11MacCloneAddressRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacCloneAddressRefresh.setStatus('mandatory')
dot11MacCloneSurveryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 2), )
if mibBuilder.loadTexts: dot11MacCloneSurveryTable.setStatus('mandatory')
dot11MacCloneSurveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11MacCloneSurveryIndex"))
if mibBuilder.loadTexts: dot11MacCloneSurveryEntry.setStatus('mandatory')
dot11MacCloneSurveryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11MacCloneSurveryIndex.setStatus('mandatory')
dot11MacCloneSurveryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 6, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MacCloneSurveryMacAddress.setStatus('mandatory')
dot11ZoneDefence = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7))
dot11ZoneDefenceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 1), )
if mibBuilder.loadTexts: dot11ZoneDefenceTable.setStatus('mandatory')
dot11ZoneDefenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ZoneDefenceEntry.setStatus('mandatory')
dot11ZoneDefenceControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ZoneDefenceControl.setStatus('mandatory')
dot11ZoneDefenceIpAddressAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ZoneDefenceIpAddressAdd.setStatus('mandatory')
dot11ZoneDefenceIpAddressDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ZoneDefenceIpAddressDelete.setStatus('mandatory')
dot11ZoneDefenceIpAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 2), )
if mibBuilder.loadTexts: dot11ZoneDefenceIpAddressListTable.setStatus('mandatory')
dot11ZoneDefenceIpAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11ZoneDefenceIpAddressListIndex"))
if mibBuilder.loadTexts: dot11ZoneDefenceIpAddressListEntry.setStatus('mandatory')
dot11ZoneDefenceIpAddressListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dot11ZoneDefenceIpAddressListIndex.setStatus('mandatory')
dot11ZoneDefenceIpAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 2, 1, 3, 3, 7, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ZoneDefenceIpAddressList.setStatus('mandatory')
advance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3))
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1))
dhcpServerControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerControl.setStatus('mandatory')
dhcpServerDynamicParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2))
dhcpServerDynamicControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDynamicControl.setStatus('mandatory')
dhcpServerDomainNameStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerDomainNameStatus.setStatus('mandatory')
dhcpServerDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2), )
if mibBuilder.loadTexts: dhcpServerDynamicTable.setStatus('mandatory')
dhcpServerDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "dynamicIndex"))
if mibBuilder.loadTexts: dhcpServerDynamicEntry.setStatus('mandatory')
dynamicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dynamicIndex.setStatus('mandatory')
dynamicIpPoolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicIpPoolStart.setStatus('mandatory')
dynamicIpPoolEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicIpPoolEnd.setStatus('mandatory')
dynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicMask.setStatus('mandatory')
dynamicGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicGateway.setStatus('mandatory')
dynamicWins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicWins.setStatus('mandatory')
dynamicDns = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDns.setStatus('mandatory')
dynamicDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDomainName.setStatus('mandatory')
dynamicLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 31536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLeaseTime.setStatus('mandatory')
dhcpServerStaticParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3))
dhcpServerStaticControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerStaticControl.setStatus('mandatory')
dhcpServerStaticDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerStaticDelete.setStatus('mandatory')
dhcpServerStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2), )
if mibBuilder.loadTexts: dhcpServerStaticTable.setStatus('mandatory')
dhcpServerStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "staticIndex"))
if mibBuilder.loadTexts: dhcpServerStaticEntry.setStatus('mandatory')
staticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staticIndex.setStatus('mandatory')
staticEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticEntryStatus.setStatus('mandatory')
staticHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticHostName.setStatus('mandatory')
staticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIP.setStatus('mandatory')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMac.setStatus('mandatory')
staticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMask.setStatus('mandatory')
staticGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticGateway.setStatus('mandatory')
staticDns = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDns.setStatus('mandatory')
staticWins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticWins.setStatus('mandatory')
staticDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDomainName.setStatus('mandatory')
dhcpServerCurrentList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4))
refreshCurrentDynamicList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refreshCurrentDynamicList.setStatus('mandatory')
currentDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2), )
if mibBuilder.loadTexts: currentDynamicTable.setStatus('mandatory')
currentDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "currentDynamicIndex"))
if mibBuilder.loadTexts: currentDynamicEntry.setStatus('mandatory')
currentDynamicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: currentDynamicIndex.setStatus('mandatory')
currentDynamicHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentDynamicHostName.setStatus('mandatory')
currentDynamicMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicMacAddress.setStatus('mandatory')
currentDynamicAssignedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicAssignedIP.setStatus('mandatory')
currentDynamicLease = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicLease.setStatus('mandatory')
refreshCurrentStaticList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refreshCurrentStaticList.setStatus('mandatory')
currentStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 4), )
if mibBuilder.loadTexts: currentStaticTable.setStatus('mandatory')
currentStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 4, 1), ).setIndexNames((0, "DAP-3520-v115", "currentStaticIndex"))
if mibBuilder.loadTexts: currentStaticEntry.setStatus('mandatory')
currentStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: currentStaticIndex.setStatus('mandatory')
currentStaticHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticHostName.setStatus('mandatory')
currentStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticMacAddress.setStatus('mandatory')
currentStaticAssignedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 1, 4, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticAssignedIP.setStatus('mandatory')
ieee802dot11Grouping = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 2))
dot11GroupingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 2, 1), )
if mibBuilder.loadTexts: dot11GroupingTable.setStatus('mandatory')
dot11GroupingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11GroupingEntry.setStatus('mandatory')
dot11LoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LoadBalance.setStatus('mandatory')
dot11UserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11UserLimit.setStatus('mandatory')
dot11LinkIntegrate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LinkIntegrate.setStatus('mandatory')
ieee802dot11MultiSsid = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3))
dot11MssidStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 1), )
if mibBuilder.loadTexts: dot11MssidStateTable.setStatus('mandatory')
dot11MssidStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11MssidStateEntry.setStatus('mandatory')
dot11MssidState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidState.setStatus('mandatory')
dot11MssidPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPriorityState.setStatus('mandatory')
dot11MssidTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3), )
if mibBuilder.loadTexts: dot11MssidTable.setStatus('mandatory')
dot11MssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DAP-3520-v115", "dot11MssidIndex"))
if mibBuilder.loadTexts: dot11MssidEntry.setStatus('mandatory')
dot11MssidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11MssidIndex.setStatus('mandatory')
dot11MssIndividualState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssIndividualState.setStatus('mandatory')
dot11MssidSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidSsid.setStatus('mandatory')
dot11MssidSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidSuppress.setStatus('mandatory')
dot11MssidAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa2-auto-psk", 8), ("wpa2-auto-eap", 9), ("dot1x", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAuthentication.setStatus('mandatory')
dot11MssidEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidEncryption.setStatus('mandatory')
dot11MssidWepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWepKeyIndex.setStatus('mandatory')
dot11MssidWepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWepKey.setStatus('mandatory')
dot11MssidCipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("aes", 2), ("tkip", 3), ("wep", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidCipherType.setStatus('mandatory')
dot11MssidPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPassPhrase.setStatus('mandatory')
dot11MssidKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidKeyType.setStatus('mandatory')
dot11MssidWmm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWmm.setStatus('mandatory')
dot11MssidGroupKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidGroupKeyUpdateInterval.setStatus('mandatory')
dot11MssidPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPriority.setStatus('mandatory')
dot11MssidAutoRekeyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAutoRekeyControl.setStatus('mandatory')
dot11MssidAutoRekeyStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAutoRekeyStartWeek.setStatus('mandatory')
dot11MssidAutoRekeyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAutoRekeyStartTime.setStatus('mandatory')
dot11MssidAutoRekeyTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAutoRekeyTimeInterval.setStatus('mandatory')
dot11MssidAutoRekeyPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MssidAutoRekeyPassPhrase.setStatus('mandatory')
dot11MssidRADIUSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4), )
if mibBuilder.loadTexts: dot11MssidRADIUSTable.setStatus('mandatory')
dot11MssidRADIUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11MssidRADIUSIndex"), (0, "DAP-3520-v115", "dot11MssidIndex"))
if mibBuilder.loadTexts: dot11MssidRADIUSEntry.setStatus('mandatory')
dot11MssidRADIUSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11MssidRADIUSIndex.setStatus('mandatory')
dot11MssidRADIUSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidRADIUSServer.setStatus('mandatory')
dot11MssidRADIUSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidRADIUSPort.setStatus('mandatory')
dot11MssidRADIUSSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidRADIUSSecret.setStatus('mandatory')
dot11MssidRadiusKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidRadiusKeyUpdateInterval.setStatus('mandatory')
ieee802dot11RogueApDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4))
dot11RogueApSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4))
dot11RogueApSurveyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApSurveyRefresh.setStatus('mandatory')
dot11RogueApAddtoValid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAddtoValid.setStatus('mandatory')
dot11RogueApAddtoNeighbor = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAddtoNeighbor.setStatus('mandatory')
dot11RogueApAddtoRouge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAddtoRouge.setStatus('mandatory')
dot11RogueApAddtoNew = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAddtoNew.setStatus('mandatory')
dot11RogueApAllNewNodesAsValid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAllNewNodesAsValid.setStatus('mandatory')
dot11RogueApAllNewNodesAsRogue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAllNewNodesAsRogue.setStatus('mandatory')
dot11RogueApSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4), )
if mibBuilder.loadTexts: dot11RogueApSurveyTable.setStatus('mandatory')
dot11RogueApSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11RogueApSurveyIndex"))
if mibBuilder.loadTexts: dot11RogueApSurveyEntry.setStatus('mandatory')
dot11RogueApSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RogueApSurveyIndex.setStatus('mandatory')
dot11RogueApSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyChannel.setStatus('mandatory')
dot11RogueApSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyBssid.setStatus('mandatory')
dot11RogueApSurveyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11g", 1), ("dot11n", 2), ("dot11a", 3), ("dot11b", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyMode.setStatus('mandatory')
dot11RogueApSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveySsid.setStatus('mandatory')
dot11RogueApSurveyLastseen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyLastseen.setStatus('mandatory')
dot11RogueApSurveyType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("new", 1), ("valid", 2), ("neighborhood", 3), ("rogue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyType.setStatus('mandatory')
dot11RogueApSurveyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("up", 2), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyStatus.setStatus('mandatory')
dot11RogueApListRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5))
dot11RogueApDeleteFromRecord = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApDeleteFromRecord.setStatus('mandatory')
dot11RogueApListRecordTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2), )
if mibBuilder.loadTexts: dot11RogueApListRecordTable.setStatus('mandatory')
dot11RogueApListRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11RogueApListRecordIndex"))
if mibBuilder.loadTexts: dot11RogueApListRecordEntry.setStatus('mandatory')
dot11RogueApListRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RogueApListRecordIndex.setStatus('mandatory')
dot11RogueApListRecordChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordChannel.setStatus('mandatory')
dot11RogueApListRecordBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordBssid.setStatus('mandatory')
dot11RogueApListRecordMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11b", 2), ("dot11g", 3), ("dot11n", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordMode.setStatus('mandatory')
dot11RogueApListRecordSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordSsid.setStatus('mandatory')
dot11RogueApListRecordLastseen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordLastseen.setStatus('mandatory')
dot11RogueApListRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("new", 1), ("valid", 2), ("neighborhood", 3), ("rogue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordType.setStatus('mandatory')
dot11RogueApListRecordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 4, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("up", 2), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordStatus.setStatus('mandatory')
ieee802dot11VLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6))
dot11VLANParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1))
dot11VlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11VlanStatus.setStatus('mandatory')
dot11VlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11VlanMode.setStatus('mandatory')
dot11GroupVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3), )
if mibBuilder.loadTexts: dot11GroupVlanListTable.setStatus('mandatory')
dot11GroupVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11GroupVlanListIndex"))
if mibBuilder.loadTexts: dot11GroupVlanListEntry.setStatus('mandatory')
dot11GroupVlanListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11GroupVlanListIndex.setStatus('mandatory')
dot11GroupVlanListVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListVid.setStatus('mandatory')
dot11GroupVlanListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListName.setStatus('mandatory')
dot11GroupVlanListMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListMgmt.setStatus('mandatory')
dot11GroupVlanListLan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListLan.setStatus('mandatory')
dot11GroupVlanListPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListPrimary.setStatus('mandatory')
dot11GroupVlanListMssid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListMssid1.setStatus('mandatory')
dot11GroupVlanListMssid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListMssid2.setStatus('mandatory')
dot11GroupVlanListMssid3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListMssid3.setStatus('mandatory')
dot11GroupVlanListWds1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListWds1.setStatus('mandatory')
dot11GroupVlanListWds2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListWds2.setStatus('mandatory')
dot11GroupVlanListWds3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListWds3.setStatus('mandatory')
dot11GroupVlanListWds4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupVlanListWds4.setStatus('mandatory')
dot11VlanListSurveydelete = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11VlanListSurveydelete.setStatus('mandatory')
dot11PvidSettingRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2))
dot11PvidAutoAssignStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidAutoAssignStatus.setStatus('mandatory')
dot11PvidSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2), )
if mibBuilder.loadTexts: dot11PvidSettingTable.setStatus('mandatory')
dot11PvidSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11PvidSettingIndex"))
if mibBuilder.loadTexts: dot11PvidSettingEntry.setStatus('mandatory')
dot11PvidSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11PvidSettingIndex.setStatus('mandatory')
dot11PvidSettingMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingMgmt.setStatus('mandatory')
dot11PvidSettingLan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingLan.setStatus('mandatory')
dot11PvidSettingPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingPrimary.setStatus('mandatory')
dot11PvidSettingMssid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingMssid1.setStatus('mandatory')
dot11PvidSettingMssid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingMssid2.setStatus('mandatory')
dot11PvidSettingMssid3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingMssid3.setStatus('mandatory')
dot11PvidSettingWds1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingWds1.setStatus('mandatory')
dot11PvidSettingWds2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingWds2.setStatus('mandatory')
dot11PvidSettingWds3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingWds3.setStatus('mandatory')
dot11PvidSettingWds4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PvidSettingWds4.setStatus('mandatory')
dot11PortListRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3))
dot11PortListRefresh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PortListRefresh.setStatus('mandatory')
dot11PortListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 2), )
if mibBuilder.loadTexts: dot11PortListTable.setStatus('mandatory')
dot11PortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 2, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11PortListIndex"))
if mibBuilder.loadTexts: dot11PortListEntry.setStatus('mandatory')
dot11PortListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11PortListIndex.setStatus('mandatory')
dot11PortListTagVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PortListTagVid.setStatus('mandatory')
dot11PortListUntagVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PortListUntagVid.setStatus('mandatory')
dot11PortLisPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 6, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PortLisPortName.setStatus('mandatory')
ieee802dot11Qos = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7))
dot11QosStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosStatus.setStatus('mandatory')
dot11QosPriorityClassifiers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2))
dot11QosHttp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosHttp.setStatus('mandatory')
dot11QosAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosAutomatic.setStatus('mandatory')
dot11QosRuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRuleStatus.setStatus('mandatory')
dot11QosRulesDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesDelete.setStatus('mandatory')
dot11QosRulesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5), )
if mibBuilder.loadTexts: dot11QosRulesTable.setStatus('mandatory')
dot11QosRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11QosRulesIndex"))
if mibBuilder.loadTexts: dot11QosRulesEntry.setStatus('mandatory')
dot11QosRulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11QosRulesIndex.setStatus('mandatory')
dot11QosRulesState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesState.setStatus('mandatory')
dot11QosRulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesName.setStatus('mandatory')
dot11QosRulesPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vo", 0), ("vi", 1), ("be", 2), ("bk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesPriority.setStatus('mandatory')
dot11QosRulesProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesProtocol.setStatus('mandatory')
dot11QosRulesProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 0), ("tcp", 1), ("udp", 2), ("both", 3), ("icmp", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesProtocolType.setStatus('mandatory')
dot11QosRulesHostOneIpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostOneIpStart.setStatus('mandatory')
dot11QosRulesHostOneIpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostOneIpEnd.setStatus('mandatory')
dot11QosRulesHostOneIpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostOneIpRange.setStatus('mandatory')
dot11QosRulesHostOnePortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostOnePortStart.setStatus('mandatory')
dot11QosRulesHostOnePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostOnePortEnd.setStatus('mandatory')
dot11QosRulesHostOnePortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostOnePortRange.setStatus('mandatory')
dot11QosRulesHostTwoIpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostTwoIpStart.setStatus('mandatory')
dot11QosRulesHostTwoIpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostTwoIpEnd.setStatus('mandatory')
dot11QosRulesHostTwoIpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostTwoIpRange.setStatus('mandatory')
dot11QosRulesHostTwoPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostTwoPortStart.setStatus('mandatory')
dot11QosRulesHostTwoPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostTwoPortEnd.setStatus('mandatory')
dot11QosRulesHostTwoPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 7, 2, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QosRulesHostTwoPortRange.setStatus('mandatory')
capwap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8))
capwapWlanSwitchSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1))
capwapWtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: capwapWtpStatus.setStatus('mandatory')
capwapWtpName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capwapWtpName.setStatus('mandatory')
capwapWtpLocationData = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capwapWtpLocationData.setStatus('mandatory')
capwapWtpConnectingSwitchIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capwapWtpConnectingSwitchIP.setStatus('mandatory')
capwapWtpConnectingSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capwapWtpConnectingSwitchName.setStatus('mandatory')
capwapWtpSwitchIpAddressDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: capwapWtpSwitchIpAddressDelete.setStatus('mandatory')
capwapWtpSwitchIpAddressAdd = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: capwapWtpSwitchIpAddressAdd.setStatus('mandatory')
wtpSwitchAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 8), )
if mibBuilder.loadTexts: wtpSwitchAddressListTable.setStatus('mandatory')
wtpSwitchAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 8, 1), ).setIndexNames((0, "DAP-3520-v115", "wtpSwitchAddressIndex"))
if mibBuilder.loadTexts: wtpSwitchAddressListEntry.setStatus('mandatory')
wtpSwitchAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: wtpSwitchAddressIndex.setStatus('mandatory')
wtpSwitchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 8, 1, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtpSwitchIpAddress.setStatus('mandatory')
ieee802dot11Schedule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10))
ieee802dot11ScheduleSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1))
ieee802dot11ScheduleStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 1))
dot11ScheduleStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleStatus.setStatus('mandatory')
ieee802dot11ScheduleRuleSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2))
dot11ScheduleRuleName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleRuleName.setStatus('mandatory')
dot11ScheduleDaysSelect = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleDaysSelect.setStatus('mandatory')
dot11ScheduleAllDaySelect = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleAllDaySelect.setStatus('mandatory')
dot11ScheduleRuleStartTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleRuleStartTime.setStatus('mandatory')
dot11ScheduleRuleEndTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleRuleEndTime.setStatus('mandatory')
dot11ScheduleAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("del", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleAction.setStatus('mandatory')
dot11ScheduleSSIDIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleSSIDIndex.setStatus('mandatory')
dot11ScheduleNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleNodeStatus.setStatus('mandatory')
dot11ScheduleOverNight = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleOverNight.setStatus('mandatory')
ieee802dot11ScheduleList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2))
dot11ScheduleListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1), )
if mibBuilder.loadTexts: dot11ScheduleListTable.setStatus('mandatory')
dot11ScheduleListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11ScheduleListIndex"))
if mibBuilder.loadTexts: dot11ScheduleListEntry.setStatus('mandatory')
dot11ScheduleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11ScheduleListIndex.setStatus('mandatory')
dot11ScheduleListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListName.setStatus('mandatory')
dot11ScheduleListDays = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListDays.setStatus('mandatory')
dot11ScheduleListTimeFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListTimeFrame.setStatus('mandatory')
dot11ScheduleListWirelessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListWirelessStatus.setStatus('mandatory')
dot11ScheduleListSSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListSSIDIndex.setStatus('mandatory')
dot11ScheduleListSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListSSID.setStatus('mandatory')
dot11ScheduleListNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListNodeStatus.setStatus('mandatory')
dot11ScheduleListOverNight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 10, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleListOverNight.setStatus('mandatory')
ieee802dot11APArray = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11))
ieee802dot11APArraySetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1))
ieee802dot11APArrayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 1))
dot11APArrayStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArrayStatus.setStatus('mandatory')
dot11APArrayModeSelect = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("masterbackup", 2), ("slave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArrayModeSelect.setStatus('mandatory')
dot11ApArrayName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ApArrayName.setStatus('mandatory')
dot11ApArrayPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ApArrayPassword.setStatus('mandatory')
ieee802dot11APArrayScans = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2))
ieee802dot11APArrayScanSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1))
dot11ApArrayScan = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ApArrayScan.setStatus('mandatory')
ieee802dot11APArrayScanList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3))
dot11APArrayScanListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: dot11APArrayScanListTable.setStatus('mandatory')
dot11APArrayScanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11APArrayScanListIndex"))
if mibBuilder.loadTexts: dot11APArrayScanListEntry.setStatus('mandatory')
dot11APArrayScanListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11APArrayScanListIndex.setStatus('mandatory')
dot11APArrayScanListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListName.setStatus('mandatory')
dot11APArrayScanListMasterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListMasterIP.setStatus('mandatory')
dot11APArrayScanListMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListMac.setStatus('mandatory')
dot11APArrayScanListMasterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListMasterNumber.setStatus('mandatory')
dot11APArrayScanListBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListBackupNumber.setStatus('mandatory')
dot11APArrayScanListSlaverNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListSlaverNumber.setStatus('mandatory')
dot11APArrayScanListTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 1, 2, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayScanListTotal.setStatus('mandatory')
ieee802dot11APArrayMeberList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2))
dot11APArrayMeberListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1), )
if mibBuilder.loadTexts: dot11APArrayMeberListTable.setStatus('mandatory')
dot11APArrayMeberListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11APArrayMeberListIndex"))
if mibBuilder.loadTexts: dot11APArrayMeberListEntry.setStatus('mandatory')
dot11APArrayMeberListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11APArrayMeberListIndex.setStatus('mandatory')
dot11APArrayMeberListRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("masterbackup", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayMeberListRole.setStatus('mandatory')
dot11APArrayMeberListIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayMeberListIP.setStatus('mandatory')
dot11APArrayMeberListMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayMeberListMac.setStatus('mandatory')
dot11APArrayMeberListLoacation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APArrayMeberListLoacation.setStatus('mandatory')
ieee802dot11APArraySyncParametersStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3))
dot11APArraySyncParametersStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1), )
if mibBuilder.loadTexts: dot11APArraySyncParametersStatusTable.setStatus('mandatory')
dot11APArraySyncParametersStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11APArraySyncParametersStatusIndex"))
if mibBuilder.loadTexts: dot11APArraySyncParametersStatusEntry.setStatus('mandatory')
dot11APArraySyncParametersStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11APArraySyncParametersStatusIndex.setStatus('mandatory')
dot11APArraySyncSSIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncSSIDStatus.setStatus('mandatory')
dot11APArraySyncSsidHiddenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncSsidHiddenStatus.setStatus('mandatory')
dot11APArraySyncAutoChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncAutoChannelStatus.setStatus('mandatory')
dot11APArraySyncChannelWidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncChannelWidthStatus.setStatus('mandatory')
dot11APArraySyncSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncSecurityStatus.setStatus('mandatory')
dot11APArraySyncFixedRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncFixedRateStatus.setStatus('mandatory')
dot11APArraySyncBeaconIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncBeaconIntervalStatus.setStatus('mandatory')
dot11APArraySyncDtimStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncDtimStatus.setStatus('mandatory')
dot11APArraySyncTxPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncTxPowerStatus.setStatus('mandatory')
dot11APArraySyncWMMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncWMMStatus.setStatus('mandatory')
dot11APArraySyncAckTimeoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncAckTimeoutStatus.setStatus('mandatory')
dot11APArraySyncShortGIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncShortGIStatus.setStatus('mandatory')
dot11APArraySyncIgmpSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncIgmpSnoopStatus.setStatus('mandatory')
dot11APArraySyncConnectionLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncConnectionLimitStatus.setStatus('mandatory')
dot11APArraySyncLinkIntegrityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncLinkIntegrityStatus.setStatus('mandatory')
dot11APArraySyncMultiSsidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncMultiSsidStatus.setStatus('mandatory')
dot11APArraySyncMultiSsidHiddenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncMultiSsidHiddenStatus.setStatus('mandatory')
dot11APArraySyncMultiSsidSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncMultiSsidSecurityStatus.setStatus('mandatory')
dot11APArraySyncMultiSsidWMMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncMultiSsidWMMStatus.setStatus('mandatory')
dot11APArraySyncQOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncQOSStatus.setStatus('mandatory')
dot11APArraySyncVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncVlanStatus.setStatus('mandatory')
dot11APArraySyncScheduleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncScheduleStatus.setStatus('mandatory')
dot11APArraySyncTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncTimeStatus.setStatus('mandatory')
dot11APArraySyncLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncLogStatus.setStatus('mandatory')
dot11APArraySyncAdminLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncAdminLimitStatus.setStatus('mandatory')
dot11APArraySyncSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncSystemStatus.setStatus('mandatory')
dot11APArraySyncConsoleProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncConsoleProtocolStatus.setStatus('mandatory')
dot11APArraySyncSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncSnmpStatus.setStatus('mandatory')
dot11APArraySyncPingCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncPingCtlStatus.setStatus('mandatory')
dot11APArraySyncDhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncDhcpStatus.setStatus('mandatory')
dot11APArraySyncLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncLoginStatus.setStatus('mandatory')
dot11APArraySyncAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncAclStatus.setStatus('mandatory')
dot11APArraySyncBandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 11, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11APArraySyncBandStatus.setStatus('mandatory')
ieee802dot11WebRedirection = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14))
ieee802dot11WebRedirectionSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 1))
dot11WebRedirectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionStatus.setStatus('mandatory')
ieee802dot11WebRedirectionAccountSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2))
dot11WebRedirectionAccountName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionAccountName.setStatus('mandatory')
dot11WebRedirectionAccountPasswd = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionAccountPasswd.setStatus('mandatory')
dot11WebRedirectionAccountStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionAccountStatus.setStatus('mandatory')
dot11WebRedirectionAccountAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("del", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionAccountAction.setStatus('mandatory')
dot11WebRedirectionAccountTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 5), )
if mibBuilder.loadTexts: dot11WebRedirectionAccountTable.setStatus('mandatory')
dot11WebRedirectionAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 5, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11WebRedirectionIndex"))
if mibBuilder.loadTexts: dot11WebRedirectionAccountEntry.setStatus('mandatory')
dot11WebRedirectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11WebRedirectionIndex.setStatus('mandatory')
dot11WebRedirectionListAccountName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionListAccountName.setStatus('mandatory')
dot11WebRedirectionListAccountPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionListAccountPasswd.setStatus('mandatory')
dot11WebRedirectionListAccountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 14, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WebRedirectionListAccountStatus.setStatus('mandatory')
ieee802dot11ARPSpoofingPrevention = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15))
ieee802dot11ARPSpoofingPreventionSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 1))
dot11ARPSpoofingPreventionStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionStatus.setStatus('mandatory')
ieee802dot11ARPSpoofingPreventionAddressSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2))
dot11ARPSpoofingPreventionIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionIpAddress.setStatus('mandatory')
dot11ARPSpoofingPreventionMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionMacAddress.setStatus('mandatory')
dot11ARPSpoofingPreventionAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("del", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionAction.setStatus('mandatory')
dot11ARPSpoofingPreventionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 4), )
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionTable.setStatus('mandatory')
dot11ARPSpoofingPreventionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 4, 1), ).setIndexNames((0, "DAP-3520-v115", "dot11ARPSpoofingPreventionIndex"))
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionEntry.setStatus('mandatory')
dot11ARPSpoofingPreventionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionIndex.setStatus('mandatory')
dot11ARPSpoofingPreventionListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionListIpAddress.setStatus('mandatory')
dot11ARPSpoofingPreventionListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 3, 15, 2, 4, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ARPSpoofingPreventionListMacAddress.setStatus('mandatory')
administration = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 1))
usersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 1, 1), )
if mibBuilder.loadTexts: usersTable.setStatus('mandatory')
usersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 1, 1, 1), ).setIndexNames((0, "DAP-3520-v115", "usersIndex"))
if mibBuilder.loadTexts: usersEntry.setStatus('mandatory')
usersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: usersIndex.setStatus('mandatory')
usersName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usersName.setStatus('mandatory')
usersPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usersPassword.setStatus('mandatory')
device = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 2))
deviceRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRestart.setStatus('mandatory')
deviceFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFactoryDefault.setStatus('mandatory')
deviceSettingApply = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceSettingApply.setStatus('mandatory')
deviceSettingDiscard = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceSettingDiscard.setStatus('mandatory')
languagePackClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: languagePackClear.setStatus('mandatory')
update = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3))
updateFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateFirmwareVersion.setStatus('mandatory')
tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 2))
tftpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIPAddress.setStatus('mandatory')
tftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRemoteFileName.setStatus('mandatory')
tftpCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connect", 1), ("get", 2), ("put", 3), ("nothing", 4), ("putacl", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCommand.setStatus('mandatory')
tftpUpgradeSettingCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("firmwareUpdate", 1), ("configSetting", 2), ("configSave", 3), ("reboot", 4), ("factoryReset", 5), ("nothing", 6), ("certificateFileUpdate", 7), ("keyFileUpdate", 8), ("getacl", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpUpgradeSettingCommand.setStatus('mandatory')
ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3))
ftpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpServerIPAddress.setStatus('mandatory')
ftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUserName.setStatus('mandatory')
ftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPassword.setStatus('mandatory')
ftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpRemoteFileName.setStatus('mandatory')
ftpCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connect", 1), ("get", 2), ("put", 3), ("nothing", 4), ("putacl", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpCommand.setStatus('mandatory')
ftpUpgradeSettingCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("firmwareUpdate", 1), ("configSetting", 2), ("configSave", 3), ("reboot", 4), ("factoryReset", 5), ("nothing", 6), ("certificateFileUpdate", 7), ("keyFileUpdate", 8), ("getacl", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUpgradeSettingCommand.setStatus('mandatory')
updateStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("correct", 0), ("fwSuccess", 1), ("wrongImageFile", 2), ("wrongConfigFile", 3), ("wrongAclFile", 4), ("configSuccess", 5), ("inProcess", 7), ("failed", 8), ("none", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateStatus.setStatus('mandatory')
console = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 4))
telnet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnet.setStatus('mandatory')
ssh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssh.setStatus('mandatory')
timeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("never", 0), ("s60", 1), ("s180", 2), ("s300", 3), ("s600", 4), ("s900", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeout.setStatus('mandatory')
web = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 5))
webStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webStatus.setStatus('mandatory')
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 6))
ssl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 7))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8))
sntpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('mandatory')
sntpTimeZoneIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneIndex.setStatus('mandatory')
sntpDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDayLightSaving.setStatus('mandatory')
sntpTimeofDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpTimeofDay.setStatus('mandatory')
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('mandatory')
sntpInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one-day", 1), ("three-days", 2), ("seven-days", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpInterval.setStatus('mandatory')
setTimeManually = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setTimeManually.setStatus('mandatory')
sntpDstStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstStartMonth.setStatus('mandatory')
sntpDstStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstStartWeek.setStatus('mandatory')
sntpDstStartDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstStartDayOfWeek.setStatus('mandatory')
sntpDstStartCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstStartCurrentTime.setStatus('mandatory')
sntpDstEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstEndMonth.setStatus('mandatory')
sntpDstEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstEndWeek.setStatus('mandatory')
sntpDstEndDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstEndDayOfWeek.setStatus('mandatory')
sntpDstEndCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDstEndCurrentTime.setStatus('mandatory')
sntpDayLightSavingOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 8, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpDayLightSavingOffset.setStatus('mandatory')
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 9))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('mandatory')
smtpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerIpAddress.setStatus('mandatory')
smtpAccountingName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 9, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAccountingName.setStatus('mandatory')
smtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 9, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpPassword.setStatus('mandatory')
limitedAdministrator = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10))
managerAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1))
managerIpAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("vlanID", 1), ("ipaddress", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddressStatus.setStatus('mandatory')
managerIpAddressDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddressDelete.setStatus('mandatory')
managerIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 4), )
if mibBuilder.loadTexts: managerIpAddressTable.setStatus('mandatory')
managerIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 4, 1), ).setIndexNames((0, "DAP-3520-v115", "managerIpAddressIndex"))
if mibBuilder.loadTexts: managerIpAddressEntry.setStatus('mandatory')
managerIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: managerIpAddressIndex.setStatus('mandatory')
managerIpAddressPoolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddressPoolStart.setStatus('mandatory')
managerIpAddressPoolEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 1, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddressPoolEnd.setStatus('mandatory')
manergeVLANTag = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manergeVLANTag.setStatus('mandatory')
pingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 12))
pingControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingControlStatus.setStatus('mandatory')
report = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5))
deviceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1))
deviceInformationFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationFirmwareVersion.setStatus('mandatory')
interfaceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2))
interfaceInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1), )
if mibBuilder.loadTexts: interfaceInformationTable.setStatus('mandatory')
interfaceInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: interfaceInformationEntry.setStatus('mandatory')
ifGetIpAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifGetIpAddressFrom.setStatus('mandatory')
ifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIpAddress.setStatus('mandatory')
ifSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSubnetMask.setStatus('mandatory')
ifDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDefaultGateway.setStatus('mandatory')
ifMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMacAddress.setStatus('mandatory')
wirelessLed2dot4G = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("blinking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLed2dot4G.setStatus('mandatory')
wirelessLed5G = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("blinking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLed5G.setStatus('mandatory')
dataBaseChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBaseChannel.setStatus('mandatory')
mssid1MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssid1MacAddress.setStatus('mandatory')
mssid2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssid2MacAddress.setStatus('mandatory')
mssid3MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssid3MacAddress.setStatus('mandatory')
lanLED = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("blinking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanLED.setStatus('mandatory')
trafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2))
trafficStatisticsWired = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1))
dot3TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1))
dot3TrafficStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1), )
if mibBuilder.loadTexts: dot3TrafficStatisticsTable.setStatus('mandatory')
dot3TrafficStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot3TrafficStatisticsEntry.setStatus('mandatory')
dot3TransmittedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedPacketCount.setStatus('mandatory')
dot3TransmittedBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedBytesCount.setStatus('mandatory')
dot3TransmittedDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedDroppedPacketCount.setStatus('mandatory')
dot3ReceivedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedPacketCount.setStatus('mandatory')
dot3ReceivedBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedBytesCount.setStatus('mandatory')
dot3ReceivedDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedDroppedPacketCount.setStatus('mandatory')
dot3Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3Clear.setStatus('mandatory')
trafficStatisticsWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2))
dot11TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1))
dot11TrafficStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1), )
if mibBuilder.loadTexts: dot11TrafficStatisticsTable.setStatus('mandatory')
dot11TrafficStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11TrafficStatisticsEntry.setStatus('mandatory')
dot11TransmitSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitSuccessRate.setStatus('mandatory')
dot11TransmitRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitRetryRate.setStatus('mandatory')
dot11TransmittedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedPacketCount.setStatus('mandatory')
dot11TransmittedBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedBytesCount.setStatus('mandatory')
dot11TransmittedDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedDroppedPacketCount.setStatus('mandatory')
dot11TransmittedRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedRetryCount.setStatus('mandatory')
dot11ReceivedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedPacketCount.setStatus('mandatory')
dot11ReceivedBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedBytesCount.setStatus('mandatory')
dot11ReceivedDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedDroppedPacketCount.setStatus('mandatory')
dot11ReceivedCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedCRCCount.setStatus('mandatory')
dot11ReceivedDecryptionErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedDecryptionErrorCount.setStatus('mandatory')
dot11ReceivedMICErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedMICErrorCount.setStatus('mandatory')
dot11ReceivedPHYErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedPHYErrorCount.setStatus('mandatory')
dot11Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 2, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Clear.setStatus('mandatory')
systemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4))
systemLogSystemLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogSystemLevel.setStatus('mandatory')
systemLogWirelessLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogWirelessLevel.setStatus('mandatory')
systemLogNoticeLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogNoticeLevel.setStatus('mandatory')
systemLogTFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogTFTPServerIPAddress.setStatus('mandatory')
systemLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogFileName.setStatus('mandatory')
systemLogGetLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogGetLog.setStatus('mandatory')
systemLogRemoteLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogRemoteLogState.setStatus('mandatory')
systemLogServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogServerIPAddress.setStatus('mandatory')
systemLogClearLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogClearLocalLog.setStatus('mandatory')
emailNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11))
emailNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1), )
if mibBuilder.loadTexts: emailNotificationTable.setStatus('mandatory')
emailNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1), ).setIndexNames((0, "DAP-3520-v115", "emailNtfIndex"))
if mibBuilder.loadTexts: emailNotificationEntry.setStatus('mandatory')
emailNtfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: emailNtfIndex.setStatus('mandatory')
emailNtfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfStatus.setStatus('mandatory')
emailNtfFromIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfFromIPAddress.setStatus('mandatory')
emailNtfToIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfToIPAddress.setStatus('mandatory')
emailNtfServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfServerIPAddress.setStatus('mandatory')
emailNtfAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfAuthentication.setStatus('mandatory')
emailNtfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfPassword.setStatus('mandatory')
emailNtfOnSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfOnSchedule.setStatus('mandatory')
emailNtfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfPort.setStatus('mandatory')
emailNtfSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfSSL.setStatus('mandatory')
emailNtfMailServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("gmail", 2), ("hotmail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfMailServerIndex.setStatus('mandatory')
emailNtfUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 4, 11, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailNtfUsername.setStatus('mandatory')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7))
trapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1))
trapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
trapHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 3), )
if mibBuilder.loadTexts: trapHostTable.setStatus('mandatory')
trapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 3, 1), ).setIndexNames((0, "DAP-3520-v115", "trapHostIndex"))
if mibBuilder.loadTexts: trapHostEntry.setStatus('mandatory')
trapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trapHostIndex.setStatus('mandatory')
trapHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapHostIPAddress.setStatus('mandatory')
trapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('mandatory')
trapSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSecurityName.setStatus('mandatory')
trapInstances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2))
sshLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 1)).setObjects(("DAP-3520-v115", "usersName"))
if mibBuilder.loadTexts: sshLoginFail.setStatus('current')
webNotify = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 2)).setObjects(("DAP-3520-v115", "usersName"))
if mibBuilder.loadTexts: webNotify.setStatus('current')
telnetLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 3)).setObjects(("DAP-3520-v115", "usersName"))
if mibBuilder.loadTexts: telnetLoginFail.setStatus('current')
cpuLoadingFull = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 4))
if mibBuilder.loadTexts: cpuLoadingFull.setStatus('current')
memoryPoor = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 5))
if mibBuilder.loadTexts: memoryPoor.setStatus('current')
wlanIfLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 7)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanIfLinkUp.setStatus('current')
deauthenticateAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 8)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: deauthenticateAttack.setStatus('current')
disassociateAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 9)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: disassociateAttack.setStatus('current')
bcFlood = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 10)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bcFlood.setStatus('current')
webLogoutSuccessful = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 11)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: webLogoutSuccessful.setStatus('current')
wlanIfLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 13)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanIfLinkDown.setStatus('current')
stationAssocNotify = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 14))
if mibBuilder.loadTexts: stationAssocNotify.setStatus('current')
stationDisassocNotify = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 15))
if mibBuilder.loadTexts: stationDisassocNotify.setStatus('current')
deAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 5, 7, 2, 20))
if mibBuilder.loadTexts: deAuthentication.setStatus('current')
miscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 37, 6))
mibBuilder.exportSymbols("DAP-3520-v115", dot11APArraySyncPingCtlStatus=dot11APArraySyncPingCtlStatus, updateStatus=updateStatus, dot11MacAccessControlTable=dot11MacAccessControlTable, dot11MssidEncryption=dot11MssidEncryption, sntpDayLightSaving=sntpDayLightSaving, dot11PrimaryRadiusSecret=dot11PrimaryRadiusSecret, dot11APArrayStatus=dot11APArrayStatus, wirelessLed2dot4G=wirelessLed2dot4G, dot11QosPriorityClassifiers=dot11QosPriorityClassifiers, dot11QosRulesHostOnePortStart=dot11QosRulesHostOnePortStart, dot11PvidSettingWds4=dot11PvidSettingWds4, dot11QosRulesState=dot11QosRulesState, managerAddress=managerAddress, dot11WdsRefresh=dot11WdsRefresh, dot11MacAccessControlMacAddressDelete=dot11MacAccessControlMacAddressDelete, dot11PortListRecord=dot11PortListRecord, dot11Dtim=dot11Dtim, smtpAccountingName=smtpAccountingName, dot11MacAccessControl=dot11MacAccessControl, dhcpServerStaticTable=dhcpServerStaticTable, dot11RogueApDeleteFromRecord=dot11RogueApDeleteFromRecord, dot11GroupVlanListWds2=dot11GroupVlanListWds2, dot11APArraySyncLinkIntegrityStatus=dot11APArraySyncLinkIntegrityStatus, dot11WdsSiteSurveyRefresh=dot11WdsSiteSurveyRefresh, dot11WepKey=dot11WepKey, dot11PvidSettingMssid2=dot11PvidSettingMssid2, dot11RogueApAllNewNodesAsValid=dot11RogueApAllNewNodesAsValid, dot11APArrayScanListName=dot11APArrayScanListName, lanLED=lanLED, dot11ClientPsm=dot11ClientPsm, snmp=snmp, dot11BeaconInterval=dot11BeaconInterval, dot11WebRedirectionAccountStatus=dot11WebRedirectionAccountStatus, dot11QosRulesHostOnePortRange=dot11QosRulesHostOnePortRange, staticGateway=staticGateway, miscellaneous=miscellaneous, enterprises=enterprises, dot11RemoteApMacAddressDelete=dot11RemoteApMacAddressDelete, systemLogRemoteLogState=systemLogRemoteLogState, wirelessLanIfTable=wirelessLanIfTable, dot11SiteSurveyTable=dot11SiteSurveyTable, dot11PvidSettingTable=dot11PvidSettingTable, dot11ScheduleListEntry=dot11ScheduleListEntry, interfaceInformationEntry=interfaceInformationEntry, dot11WdsSiteSurveyRefreshEntry=dot11WdsSiteSurveyRefreshEntry, pingControlStatus=pingControlStatus, emailNtfSSL=emailNtfSSL, staticDomainName=staticDomainName, lan=lan, trapVersion=trapVersion, dot11PortListTagVid=dot11PortListTagVid, dot11PassPhrase=dot11PassPhrase, staticDns=staticDns, dot11WebRedirectionAccountEntry=dot11WebRedirectionAccountEntry, dot11wepKeyIndex=dot11wepKeyIndex, currentDynamicLease=currentDynamicLease, ftpRemoteFileName=ftpRemoteFileName, dot11WepKeyEntryMethod=dot11WepKeyEntryMethod, dot11SiteSurveyChannel=dot11SiteSurveyChannel, wirelessLanIfDesc=wirelessLanIfDesc, dot11WdsRssi=dot11WdsRssi, dot11WebRedirectionAccountAction=dot11WebRedirectionAccountAction, staticIP=staticIP, traps=traps, dot11Parameters=dot11Parameters, ieee802dot11ARPSpoofingPreventionSetting=ieee802dot11ARPSpoofingPreventionSetting, ftpServerIPAddress=ftpServerIPAddress, dot11WdsSiteSurveyEncryption=dot11WdsSiteSurveyEncryption, dot11ClientInformationRefresh=dot11ClientInformationRefresh, emailNtfPort=emailNtfPort, emailNtfAuthentication=emailNtfAuthentication, dot11PvidAutoAssignStatus=dot11PvidAutoAssignStatus, staticMac=staticMac, dot11RogueApListRecordChannel=dot11RogueApListRecordChannel, dot11ARPSpoofingPreventionIpAddress=dot11ARPSpoofingPreventionIpAddress, systemLogServerIPAddress=systemLogServerIPAddress, dot11GroupVlanListWds4=dot11GroupVlanListWds4, dot11RemoteApMacAddressDeleteAll=dot11RemoteApMacAddressDeleteAll, ftpCommand=ftpCommand, dot11WdsTable=dot11WdsTable, dot11MssidRADIUSEntry=dot11MssidRADIUSEntry, lanIfGetIpAddressFrom=lanIfGetIpAddressFrom, dot11RemoteApMacAddressEntry=dot11RemoteApMacAddressEntry, dot11Countrycode=dot11Countrycode, dot11APArrayScanListMac=dot11APArrayScanListMac, currentStaticMacAddress=currentStaticMacAddress, wtpSwitchIpAddress=wtpSwitchIpAddress, dot11GetClientInformationTable=dot11GetClientInformationTable, deviceInformation=deviceInformation, tftp=tftp, dhcpServerCurrentList=dhcpServerCurrentList, update=update, trafficStatisticsWireless=trafficStatisticsWireless, dot11TrafficStatistics=dot11TrafficStatistics, dot11ChannelWidth=dot11ChannelWidth, dot11GroupVlanListMgmt=dot11GroupVlanListMgmt, dot11InternalStationConnectionMultiSSID3=dot11InternalStationConnectionMultiSSID3, trapSecurityName=trapSecurityName, smtpStatus=smtpStatus, dot11WpaEapType=dot11WpaEapType, dot11ScheduleListIndex=dot11ScheduleListIndex, dot11APArraySyncSnmpStatus=dot11APArraySyncSnmpStatus, dot11TransmittedPacketCount=dot11TransmittedPacketCount, dot11PortLisPortName=dot11PortLisPortName, dot11AutoRekeyStartWeek=dot11AutoRekeyStartWeek, dot11CipherType=dot11CipherType, dot11VlanListSurveydelete=dot11VlanListSurveydelete, capwapWtpStatus=capwapWtpStatus, trapHostIPAddress=trapHostIPAddress, dot11QosRulesHostOneIpStart=dot11QosRulesHostOneIpStart, dot11QosRulesHostOneIpRange=dot11QosRulesHostOneIpRange, stationDisassocNotify=stationDisassocNotify, dot11LinkIntegrate=dot11LinkIntegrate, DisplayString=DisplayString, dot11ScheduleListWirelessStatus=dot11ScheduleListWirelessStatus, dot11ScheduleRuleName=dot11ScheduleRuleName, dot11ReceivedDecryptionErrorCount=dot11ReceivedDecryptionErrorCount, dlink_dapfamily=dlink_dapfamily, dot11Band5GHzDataRateList=dot11Band5GHzDataRateList, dot11MacCloneSurveryMacAddress=dot11MacCloneSurveryMacAddress, systemLogTFTPServerIPAddress=systemLogTFTPServerIPAddress, dot11MssidRADIUSServer=dot11MssidRADIUSServer, dot11ClientBand=dot11ClientBand, ieee802dot11APArrayMeberList=ieee802dot11APArrayMeberList, ieee802dot11ScheduleRuleSetting=ieee802dot11ScheduleRuleSetting, dot11RogueApSurveyTable=dot11RogueApSurveyTable, deviceSettingApply=deviceSettingApply, dot11APArraySyncBandStatus=dot11APArraySyncBandStatus, sntpServerIpAddress=sntpServerIpAddress, dot11LoadBalance=dot11LoadBalance, dot11RogueApAddtoNeighbor=dot11RogueApAddtoNeighbor, users=users, dot11Wmm=dot11Wmm, dot11ClientInformation=dot11ClientInformation, dynamicDns=dynamicDns, dot11WdsIndex=dot11WdsIndex, dot11GroupVlanListMssid1=dot11GroupVlanListMssid1, dot11PortListTable=dot11PortListTable, dot11QosRulesHostTwoPortEnd=dot11QosRulesHostTwoPortEnd, dot11Clear=dot11Clear, ssl=ssl, dhcpServerControl=dhcpServerControl, capwap=capwap, dot11WepKeyTable=dot11WepKeyTable, dot11APArraySyncAckTimeoutStatus=dot11APArraySyncAckTimeoutStatus, dot11RemoteApMacAddress=dot11RemoteApMacAddress, ieee802dot11ARPSpoofingPrevention=ieee802dot11ARPSpoofingPrevention, dot11MssidStateTable=dot11MssidStateTable, dot11RogueApListRecordLastseen=dot11RogueApListRecordLastseen, dot11ScheduleDaysSelect=dot11ScheduleDaysSelect, dot11ApArrayName=dot11ApArrayName, dot11TransmittedBytesCount=dot11TransmittedBytesCount, dot11GroupingEntry=dot11GroupingEntry, dot11ParametersTable=dot11ParametersTable, dot11QosRuleStatus=dot11QosRuleStatus, dot11EthernetToWlanAccess=dot11EthernetToWlanAccess, dot11Authentication=dot11Authentication, dot11MssidEntry=dot11MssidEntry, sntpDstStartMonth=sntpDstStartMonth, dot11ParametersEntry=dot11ParametersEntry, dot11ZoneDefenceIpAddressList=dot11ZoneDefenceIpAddressList, ieee802dot11ScheduleSetting=ieee802dot11ScheduleSetting, dot11PvidSettingMssid1=dot11PvidSettingMssid1, dot11APArrayMeberListTable=dot11APArrayMeberListTable, lanIfPrimaryDNS=lanIfPrimaryDNS, usersPassword=usersPassword, dot11APArraySyncParametersStatusEntry=dot11APArraySyncParametersStatusEntry, dot11ARPSpoofingPreventionTable=dot11ARPSpoofingPreventionTable, dot11ScheduleNodeStatus=dot11ScheduleNodeStatus, dot11MacCloneTable=dot11MacCloneTable, dot11QosRulesHostOnePortEnd=dot11QosRulesHostOnePortEnd, dot11RogueApSurveyBssid=dot11RogueApSurveyBssid, bcFlood=bcFlood, tftpCommand=tftpCommand, dot11APArrayScanListSlaverNumber=dot11APArrayScanListSlaverNumber, dot11PortListEntry=dot11PortListEntry, staticWins=staticWins, ieee802dot11APArraySetting=ieee802dot11APArraySetting, dot11ZoneDefenceIpAddressListEntry=dot11ZoneDefenceIpAddressListEntry, emailNtfMailServerIndex=emailNtfMailServerIndex, dot11Securities=dot11Securities, smtpServerIpAddress=smtpServerIpAddress, dot11ScheduleListTimeFrame=dot11ScheduleListTimeFrame, dot11APArraySyncVlanStatus=dot11APArraySyncVlanStatus, dot11APArraySyncTimeStatus=dot11APArraySyncTimeStatus, dot11WepKeyEntry=dot11WepKeyEntry, dot11ScheduleListTable=dot11ScheduleListTable, managerIpAddressEntry=managerIpAddressEntry, dot11SiteSurveyBssid=dot11SiteSurveyBssid, interface=interface, dot11APArraySyncSecurityStatus=dot11APArraySyncSecurityStatus, wirelessLanIfObjectID=wirelessLanIfObjectID, dot11APArraySyncLogStatus=dot11APArraySyncLogStatus, dot11ApArrayScan=dot11ApArrayScan, mssid1MacAddress=mssid1MacAddress, console=console, lanIfSecondaryDNS=lanIfSecondaryDNS, dot11QosRulesProtocolType=dot11QosRulesProtocolType, dot11GroupVlanListMssid2=dot11GroupVlanListMssid2, dot11TransmitSuccessRate=dot11TransmitSuccessRate, dot3ReceivedDroppedPacketCount=dot3ReceivedDroppedPacketCount, usersIndex=usersIndex, dot11MacCloneEntry=dot11MacCloneEntry, dot11HT2040Coexistence=dot11HT2040Coexistence, dot11RogueApSurveyType=dot11RogueApSurveyType, capwapWtpLocationData=capwapWtpLocationData, dhcpServerDynamicEntry=dhcpServerDynamicEntry, dot11RogueApListRecordType=dot11RogueApListRecordType, dot11APArrayScanListBackupNumber=dot11APArrayScanListBackupNumber, dot11ShortGI=dot11ShortGI, dot11GetClientInformationEntry=dot11GetClientInformationEntry, dot11QosRulesPriority=dot11QosRulesPriority, dot11WdsSiteSurveyChannel=dot11WdsSiteSurveyChannel, ieee802dot11WebRedirectionAccountSetting=ieee802dot11WebRedirectionAccountSetting, dot11MssidAuthentication=dot11MssidAuthentication, dot11APArrayMeberListEntry=dot11APArrayMeberListEntry, dot11WdsEntry=dot11WdsEntry, dot11APArraySyncTxPowerStatus=dot11APArraySyncTxPowerStatus, dot11MacCloneSurveryTable=dot11MacCloneSurveryTable, dot11GroupVlanListPrimary=dot11GroupVlanListPrimary, deauthenticateAttack=deauthenticateAttack, refreshCurrentDynamicList=refreshCurrentDynamicList, dot11RemoteApMacAddressAccessEntry=dot11RemoteApMacAddressAccessEntry, dot11WebRedirectionAccountTable=dot11WebRedirectionAccountTable, dot11QosRulesHostTwoPortRange=dot11QosRulesHostTwoPortRange, dot11PvidSettingMgmt=dot11PvidSettingMgmt, dot11ZoneDefenceIpAddressDelete=dot11ZoneDefenceIpAddressDelete, dynamicDomainName=dynamicDomainName, ieee802dot11WebRedirectionSetting=ieee802dot11WebRedirectionSetting, updateFirmwareVersion=updateFirmwareVersion, dot11WebRedirectionAccountName=dot11WebRedirectionAccountName, dot11ClientTxBytesCount=dot11ClientTxBytesCount, dot11WebRedirectionListAccountStatus=dot11WebRedirectionListAccountStatus, currentDynamicAssignedIP=currentDynamicAssignedIP, dot11MssidSsid=dot11MssidSsid, emailNotificationEntry=emailNotificationEntry, dot11GroupVlanListEntry=dot11GroupVlanListEntry, wlanIfLinkUp=wlanIfLinkUp, dot11AckTimeout=dot11AckTimeout, dot11RogueApSurveySsid=dot11RogueApSurveySsid, dot11QosAutomatic=dot11QosAutomatic, dot11WdsSiteSurveySsid=dot11WdsSiteSurveySsid, dot11ScheduleRuleStartTime=dot11ScheduleRuleStartTime, dot11PortListUntagVid=dot11PortListUntagVid, dot11Application=dot11Application, dot11APArrayScanListIndex=dot11APArrayScanListIndex, dot11APArrayMeberListMac=dot11APArrayMeberListMac, trafficStatisticsWired=trafficStatisticsWired, emailNtfUsername=emailNtfUsername, dot11NetworkAccessProtection=dot11NetworkAccessProtection, lanIfSettingEntry=lanIfSettingEntry, staticMask=staticMask, dot11WdsSiteSurveyTable=dot11WdsSiteSurveyTable, dot11RogueApSurveyStatus=dot11RogueApSurveyStatus)
mibBuilder.exportSymbols("DAP-3520-v115", dot11WdsSiteSurveyMode=dot11WdsSiteSurveyMode, timeout=timeout, dot11RadioWave=dot11RadioWave, lanIfDefaultGateway=lanIfDefaultGateway, systemLogSystemLevel=systemLogSystemLevel, dot11ZoneDefenceEntry=dot11ZoneDefenceEntry, dot11APArrayMeberListRole=dot11APArrayMeberListRole, sntpInterval=sntpInterval, dot11RemoteApMacAddressAdd=dot11RemoteApMacAddressAdd, dot11TransmitPower=dot11TransmitPower, dot11QosRulesHostTwoIpStart=dot11QosRulesHostTwoIpStart, dot11MulticastRateABand=dot11MulticastRateABand, dot11APArraySyncParametersStatusIndex=dot11APArraySyncParametersStatusIndex, dot11ScheduleListNodeStatus=dot11ScheduleListNodeStatus, dot11APArraySyncMultiSsidWMMStatus=dot11APArraySyncMultiSsidWMMStatus, web=web, ieee802dot11RogueApDetection=ieee802dot11RogueApDetection, setTimeManually=setTimeManually, dot11MssidWepKeyIndex=dot11MssidWepKeyIndex, emailNtfIndex=emailNtfIndex, dot11RadiusKeyUpdateInterval=dot11RadiusKeyUpdateInterval, currentDynamicEntry=currentDynamicEntry, dot11MacCloneSurveryEntry=dot11MacCloneSurveryEntry, systemLogWirelessLevel=systemLogWirelessLevel, dot11MssidRadiusKeyUpdateInterval=dot11MssidRadiusKeyUpdateInterval, dot11WpaEapUsername=dot11WpaEapUsername, dot11ClientRxBytesCount=dot11ClientRxBytesCount, dot11RogueApListRecordSsid=dot11RogueApListRecordSsid, ieee802dot11ScheduleStatus=ieee802dot11ScheduleStatus, dot11MssidIndex=dot11MssidIndex, dot11RogueApSurveyEntry=dot11RogueApSurveyEntry, dot11RogueApListRecord=dot11RogueApListRecord, dot11SiteSurveyIndex=dot11SiteSurveyIndex, dhcpServerStaticDelete=dhcpServerStaticDelete, dot11MssidState=dot11MssidState, dot11GroupVlanListWds3=dot11GroupVlanListWds3, sntpDstEndDayOfWeek=sntpDstEndDayOfWeek, dot11MacCloneSurveryIndex=dot11MacCloneSurveryIndex, dot11RogueApListRecordMode=dot11RogueApListRecordMode, dot11ZoneDefenceIpAddressAdd=dot11ZoneDefenceIpAddressAdd, dot11WdsSiteSurveyRefreshTable=dot11WdsSiteSurveyRefreshTable, dot11WdsSiteSurvey=dot11WdsSiteSurvey, dot11SiteSurveyRssi=dot11SiteSurveyRssi, dot11SiteSurveyEntry=dot11SiteSurveyEntry, deAuthentication=deAuthentication, lanIfIpAddress=lanIfIpAddress, dot11WdsSiteSurveyIndex=dot11WdsSiteSurveyIndex, ieee802dot11APArrayScanList=ieee802dot11APArrayScanList, dot3TransmittedBytesCount=dot3TransmittedBytesCount, dot11MacAccessControlListMacAddress=dot11MacAccessControlListMacAddress, sntpStatus=sntpStatus, currentStaticEntry=currentStaticEntry, sntpDstStartCurrentTime=sntpDstStartCurrentTime, dot11PartionEntry=dot11PartionEntry, ieee802dot11APArraySyncParametersStatus=ieee802dot11APArraySyncParametersStatus, capwapWtpConnectingSwitchName=capwapWtpConnectingSwitchName, dot11MacCloneStatus=dot11MacCloneStatus, dot11QosRulesHostTwoPortStart=dot11QosRulesHostTwoPortStart, dot11APArrayMeberListIndex=dot11APArrayMeberListIndex, webNotify=webNotify, manergeVLANTag=manergeVLANTag, dot11RogueApListRecordBssid=dot11RogueApListRecordBssid, sntp=sntp, dot11MacClone=dot11MacClone, dot11MssidAutoRekeyTimeInterval=dot11MssidAutoRekeyTimeInterval, dot11MssidCipherType=dot11MssidCipherType, dot11AutoRekeyPassPhrase=dot11AutoRekeyPassPhrase, dot11MssidPriorityState=dot11MssidPriorityState, dot11PvidSettingIndex=dot11PvidSettingIndex, dot11WebRedirectionIndex=dot11WebRedirectionIndex, advance=advance, dot11MssidKeyType=dot11MssidKeyType, dot11ReceivedCRCCount=dot11ReceivedCRCCount, dot11APArraySyncDtimStatus=dot11APArraySyncDtimStatus, dot11PortListRefresh=dot11PortListRefresh, dot11ZoneDefence=dot11ZoneDefence, dot11KeyIndex=dot11KeyIndex, dot11PvidSettingWds1=dot11PvidSettingWds1, dot3TransmittedPacketCount=dot3TransmittedPacketCount, dot11TrafficStatisticsEntry=dot11TrafficStatisticsEntry, dot11SsidBroadcast=dot11SsidBroadcast, dot11MssIndividualState=dot11MssIndividualState, dot11ApMode=dot11ApMode, dot11ClientIndex=dot11ClientIndex, dot11PvidSettingRecord=dot11PvidSettingRecord, ieee802dot11APArrayScanSetting=ieee802dot11APArrayScanSetting, dot11Band=dot11Band, ftpUpgradeSettingCommand=ftpUpgradeSettingCommand, dot11QosRulesHostTwoIpEnd=dot11QosRulesHostTwoIpEnd, currentDynamicHostName=currentDynamicHostName, dot11SiteSurveySsid=dot11SiteSurveySsid, dot11ApModeStatus=dot11ApModeStatus, managerIpAddressIndex=managerIpAddressIndex, wirelessLed5G=wirelessLed5G, ssh=ssh, dot11RogueApAddtoValid=dot11RogueApAddtoValid, dot11APArrayScanListMasterIP=dot11APArrayScanListMasterIP, dot11APArraySyncScheduleStatus=dot11APArraySyncScheduleStatus, dot11SiteSurveyRefresh=dot11SiteSurveyRefresh, currentStaticIndex=currentStaticIndex, dot11AutoRekeyControl=dot11AutoRekeyControl, dot11ZoneDefenceIpAddressListIndex=dot11ZoneDefenceIpAddressListIndex, ieee802dot11=ieee802dot11, dot11PvidSettingLan=dot11PvidSettingLan, dot11GroupVlanListWds1=dot11GroupVlanListWds1, dot11RogueApSurveyIndex=dot11RogueApSurveyIndex, dynamicIpPoolEnd=dynamicIpPoolEnd, dot11WdsStatus=dot11WdsStatus, sshLoginFail=sshLoginFail, dot11PvidSettingMssid3=dot11PvidSettingMssid3, systemLog=systemLog, telnetLoginFail=telnetLoginFail, dot11MssidPassPhrase=dot11MssidPassPhrase, systemLogNoticeLevel=systemLogNoticeLevel, smtpPassword=smtpPassword, ieee802dot11Schedule=ieee802dot11Schedule, dot11TransmittedDroppedPacketCount=dot11TransmittedDroppedPacketCount, usersName=usersName, dot11SiteSurveyRefreshEntry=dot11SiteSurveyRefreshEntry, dhcpServerStaticParameter=dhcpServerStaticParameter, dot11APArrayScanListMasterNumber=dot11APArrayScanListMasterNumber, ieee802dot11Qos=ieee802dot11Qos, dot11APArraySyncShortGIStatus=dot11APArraySyncShortGIStatus, managerIpAddressDelete=managerIpAddressDelete, dot11TrafficStatisticsTable=dot11TrafficStatisticsTable, dot11ScheduleListDays=dot11ScheduleListDays, dot11Band5GHzOutdoorChannelList=dot11Band5GHzOutdoorChannelList, dot11APArraySyncIgmpSnoopStatus=dot11APArraySyncIgmpSnoopStatus, ieee802dot11Grouping=ieee802dot11Grouping, systemLogGetLog=systemLogGetLog, dot11WdsSiteSurveyBssid=dot11WdsSiteSurveyBssid, dot11Band5GHzChannelList=dot11Band5GHzChannelList, dot11DataRate=dot11DataRate, dot11APArraySyncMultiSsidStatus=dot11APArraySyncMultiSsidStatus, dot11ReceivedBytesCount=dot11ReceivedBytesCount, dynamicLeaseTime=dynamicLeaseTime, dhcpServerStaticEntry=dhcpServerStaticEntry, emailNtfToIPAddress=emailNtfToIPAddress, dot11RogueApAddtoNew=dot11RogueApAddtoNew, dot11PvidSettingPrimary=dot11PvidSettingPrimary, dot11ScheduleOverNight=dot11ScheduleOverNight, dot11QosRulesDelete=dot11QosRulesDelete, dot11PrimaryRadiusPort=dot11PrimaryRadiusPort, dot11ARPSpoofingPreventionIndex=dot11ARPSpoofingPreventionIndex, managerIpAddressStatus=managerIpAddressStatus, systemLogClearLocalLog=systemLogClearLocalLog, stationAssocNotify=stationAssocNotify, sntpDayLightSavingOffset=sntpDayLightSavingOffset, dot11APArraySyncSsidHiddenStatus=dot11APArraySyncSsidHiddenStatus, emailNtfStatus=emailNtfStatus, dhcpServerDynamicTable=dhcpServerDynamicTable, dot11ClientInformationEntry=dot11ClientInformationEntry, dot3Clear=dot3Clear, dot11WebRedirectionAccountPasswd=dot11WebRedirectionAccountPasswd, dot11APArraySyncSystemStatus=dot11APArraySyncSystemStatus, ifSubnetMask=ifSubnetMask, dot11APArraySyncMultiSsidHiddenStatus=dot11APArraySyncMultiSsidHiddenStatus, lanIfSubnetMask=lanIfSubnetMask, dot11APArrayModeSelect=dot11APArrayModeSelect, usersTable=usersTable, dot11WdsMacAddress=dot11WdsMacAddress, staticEntryStatus=staticEntryStatus, dot11QosRulesProtocol=dot11QosRulesProtocol, dot11APArraySyncConsoleProtocolStatus=dot11APArraySyncConsoleProtocolStatus, languagePackClear=languagePackClear, wirelessLanIfEntry=wirelessLanIfEntry, dot11MssidStateEntry=dot11MssidStateEntry, dot11ARPSpoofingPreventionListIpAddress=dot11ARPSpoofingPreventionListIpAddress, dot11PvidSettingEntry=dot11PvidSettingEntry, deviceRestart=deviceRestart, memoryPoor=memoryPoor, disassociateAttack=disassociateAttack, trapInstances=trapInstances, dlink=dlink, wtpSwitchAddressListEntry=wtpSwitchAddressListEntry, dot11SiteSurvey=dot11SiteSurvey, dot11APArrayScanListEntry=dot11APArrayScanListEntry, dot11APArraySyncWMMStatus=dot11APArraySyncWMMStatus, dot11MssidSuppress=dot11MssidSuppress, dot3ReceivedPacketCount=dot3ReceivedPacketCount, dot11WdsBand=dot11WdsBand, emailNtfServerIPAddress=emailNtfServerIPAddress, dot11GroupingTable=dot11GroupingTable, wtpSwitchAddressIndex=wtpSwitchAddressIndex, dot11ScheduleListSSID=dot11ScheduleListSSID, dot11ARPSpoofingPreventionAction=dot11ARPSpoofingPreventionAction, dot11QosRulesTable=dot11QosRulesTable, dot11ZoneDefenceControl=dot11ZoneDefenceControl, currentStaticHostName=currentStaticHostName, dot11MssidRADIUSTable=dot11MssidRADIUSTable, currentStaticAssignedIP=currentStaticAssignedIP, dot11ChannelList=dot11ChannelList, device=device, webStatus=webStatus, dot11RemoteApMacAddressTable=dot11RemoteApMacAddressTable, wtpSwitchAddressListTable=wtpSwitchAddressListTable, dot11APArraySyncMultiSsidSecurityStatus=dot11APArraySyncMultiSsidSecurityStatus, interfaceInformation=interfaceInformation, managerIpAddressPoolStart=managerIpAddressPoolStart, dot11AutoChannelScan=dot11AutoChannelScan, dot11VlanMode=dot11VlanMode, ifIpAddress=ifIpAddress, mssid2MacAddress=mssid2MacAddress, dynamicIndex=dynamicIndex, dot11APArraySyncLoginStatus=dot11APArraySyncLoginStatus, dot11SSIDIndex=dot11SSIDIndex, deviceSettingDiscard=deviceSettingDiscard, sntpDstStartDayOfWeek=sntpDstStartDayOfWeek, dot11MssidAutoRekeyStartWeek=dot11MssidAutoRekeyStartWeek, dot11Channel=dot11Channel, usersEntry=usersEntry, dot11ClientRssi=dot11ClientRssi, dot11MacAccessControlMacAddressAdd=dot11MacAccessControlMacAddressAdd, currentDynamicIndex=currentDynamicIndex, dot11GroupVlanListIndex=dot11GroupVlanListIndex, administration=administration, dot11Ssid=dot11Ssid, dot11APArraySyncChannelWidthStatus=dot11APArraySyncChannelWidthStatus, systemLogFileName=systemLogFileName, dot11RogueApListRecordEntry=dot11RogueApListRecordEntry, dot11RogueApAllNewNodesAsRogue=dot11RogueApAllNewNodesAsRogue, dot11RogueApAddtoRouge=dot11RogueApAddtoRouge, sntpTimeofDay=sntpTimeofDay, dot11ScheduleStatus=dot11ScheduleStatus, dot11GroupVlanListName=dot11GroupVlanListName, ieee802dot11WebRedirection=ieee802dot11WebRedirection, emailNotification=emailNotification, dot11InternalStationConnectionMultiSSID2=dot11InternalStationConnectionMultiSSID2, dot11ScheduleAction=dot11ScheduleAction, dot11RogueApListRecordTable=dot11RogueApListRecordTable, dot11ScheduleListOverNight=dot11ScheduleListOverNight, dot11ReceivedMICErrorCount=dot11ReceivedMICErrorCount, dot11QosRulesIndex=dot11QosRulesIndex, dhcpServerDynamicParameter=dhcpServerDynamicParameter, dot11VLANParameter=dot11VLANParameter, ieee802dot11MultiSsid=ieee802dot11MultiSsid, ifGetIpAddressFrom=ifGetIpAddressFrom, dot11MssidRADIUSSecret=dot11MssidRADIUSSecret, ieee802dot11APArrayStatus=ieee802dot11APArrayStatus, dot11ScheduleAllDaySelect=dot11ScheduleAllDaySelect, dot11MacAccessControlEntry=dot11MacAccessControlEntry, dot11ReceivedDroppedPacketCount=dot11ReceivedDroppedPacketCount, dot11QosRulesHostOneIpEnd=dot11QosRulesHostOneIpEnd, lanIfMacAddress=lanIfMacAddress, dot11MacCloneSource=dot11MacCloneSource, dot11DataRateList=dot11DataRateList, sntpDstEndMonth=sntpDstEndMonth, dynamicGateway=dynamicGateway, dot11GroupVlanListLan=dot11GroupVlanListLan, sntpDstEndWeek=sntpDstEndWeek, dot3TrafficStatistics=dot3TrafficStatistics, dynamicMask=dynamicMask, sntpDstEndCurrentTime=sntpDstEndCurrentTime, dataBaseChannel=dataBaseChannel)
mibBuilder.exportSymbols("DAP-3520-v115", dot11Encryption=dot11Encryption, dot11PartionTable=dot11PartionTable, staticHostName=staticHostName, dot11RogueApSurveyChannel=dot11RogueApSurveyChannel, dot11RogueApListRecordStatus=dot11RogueApListRecordStatus, dot11GetWdsEntry=dot11GetWdsEntry, smtp=smtp, dot11APArraySyncParametersStatusTable=dot11APArraySyncParametersStatusTable, dot11WdsSsidIndex=dot11WdsSsidIndex, managerIpAddressPoolEnd=managerIpAddressPoolEnd, dot11RogueApSurveyMode=dot11RogueApSurveyMode, dot11APArraySyncBeaconIntervalStatus=dot11APArraySyncBeaconIntervalStatus, dot3ReceivedBytesCount=dot3ReceivedBytesCount, dot11MssidAutoRekeyControl=dot11MssidAutoRekeyControl, dot11PortListIndex=dot11PortListIndex, currentDynamicTable=currentDynamicTable, dot11APArraySyncDhcpStatus=dot11APArraySyncDhcpStatus, dot11MacCloneAddressRefresh=dot11MacCloneAddressRefresh, dot11MssidWepKey=dot11MssidWepKey, dot11RemoteApMacAddressList=dot11RemoteApMacAddressList, dynamicWins=dynamicWins, dot11ARPSpoofingPreventionMacAddress=dot11ARPSpoofingPreventionMacAddress, dot11APArrayScanListTotal=dot11APArrayScanListTotal, dot11QosRulesName=dot11QosRulesName, dot11MssidTable=dot11MssidTable, capwapWtpName=capwapWtpName, dot11MulticastRateABandList=dot11MulticastRateABandList, dot11SecuritiesEntry=dot11SecuritiesEntry, dot11Band5GHzWdsChannelList=dot11Band5GHzWdsChannelList, trapHostIndex=trapHostIndex, dot11MacAccessControlListEntry=dot11MacAccessControlListEntry, dot11MulticastRateGBand=dot11MulticastRateGBand, dot11ApArrayPassword=dot11ApArrayPassword, dot11APArraySyncAutoChannelStatus=dot11APArraySyncAutoChannelStatus, dot11ReceivedPacketCount=dot11ReceivedPacketCount, emailNotificationTable=emailNotificationTable, dot11APArraySyncQOSStatus=dot11APArraySyncQOSStatus, dot3TrafficStatisticsTable=dot3TrafficStatisticsTable, dot11MacCloneMacAddress=dot11MacCloneMacAddress, dot11ARPSpoofingPreventionListMacAddress=dot11ARPSpoofingPreventionListMacAddress, dot11WdsConnected=dot11WdsConnected, dot11GroupVlanListVid=dot11GroupVlanListVid, wirelesslan=wirelesslan, dot11QosRulesHostTwoIpRange=dot11QosRulesHostTwoIpRange, dot11WpaEapAuthenticationType=dot11WpaEapAuthenticationType, ieee802dot11ScheduleList=ieee802dot11ScheduleList, dot11WebRedirectionListAccountName=dot11WebRedirectionListAccountName, dot11ZoneDefenceIpAddressListTable=dot11ZoneDefenceIpAddressListTable, ftpPassword=ftpPassword, dot11AutoRekeyTimeInterval=dot11AutoRekeyTimeInterval, currentDynamicMacAddress=currentDynamicMacAddress, dot11SiteSurveyEncryption=dot11SiteSurveyEncryption, dot11GroupKeyUpdateInterval=dot11GroupKeyUpdateInterval, dot11ClientAuthentication=dot11ClientAuthentication, ftp=ftp, dot11InternalStationConnectionPrimarySSID=dot11InternalStationConnectionPrimarySSID, dot3TransmittedDroppedPacketCount=dot3TransmittedDroppedPacketCount, dot11ReceivedPHYErrorCount=dot11ReceivedPHYErrorCount, dot11MssidGroupKeyUpdateInterval=dot11MssidGroupKeyUpdateInterval, dap3520=dap3520, dot11ScheduleRuleEndTime=dot11ScheduleRuleEndTime, mssid3MacAddress=mssid3MacAddress, refreshCurrentStaticList=refreshCurrentStaticList, dot11SecuritiesTable=dot11SecuritiesTable, dot11WdsMonitor=dot11WdsMonitor, pingControl=pingControl, dot11ScheduleListSSIDIndex=dot11ScheduleListSSIDIndex, dot11APArraySyncAdminLimitStatus=dot11APArraySyncAdminLimitStatus, wlanIfLinkDown=wlanIfLinkDown, dot11SiteSurveyBssType=dot11SiteSurveyBssType, dot11APArraySyncSSIDStatus=dot11APArraySyncSSIDStatus, dhcpServerStaticControl=dhcpServerStaticControl, dot11SiteSurveyRefreshTable=dot11SiteSurveyRefreshTable, dot11GroupVlanListTable=dot11GroupVlanListTable, dot11AutoRekeyStartTime=dot11AutoRekeyStartTime, lanIfSetting=lanIfSetting, ifDefaultGateway=ifDefaultGateway, trapHostTable=trapHostTable, dot11TransmittedRetryCount=dot11TransmittedRetryCount, tftpUpgradeSettingCommand=tftpUpgradeSettingCommand, webLogoutSuccessful=webLogoutSuccessful, dot11QosHttp=dot11QosHttp, dot11WebRedirectionStatus=dot11WebRedirectionStatus, dot11WebRedirectionListAccountPasswd=dot11WebRedirectionListAccountPasswd, dot11RogueApListRecordIndex=dot11RogueApListRecordIndex, dot11PvidSettingWds3=dot11PvidSettingWds3, dot11Igmpsnooping=dot11Igmpsnooping, managerIpAddressTable=managerIpAddressTable, telnet=telnet, emailNtfOnSchedule=emailNtfOnSchedule, sntpDstStartWeek=sntpDstStartWeek, sntpTimeZoneIndex=sntpTimeZoneIndex, dot11ScheduleSSIDIndex=dot11ScheduleSSIDIndex, dot11WdsAuthentication=dot11WdsAuthentication, trapHostEntry=trapHostEntry, dot11MssidAutoRekeyPassPhrase=dot11MssidAutoRekeyPassPhrase, capwapWlanSwitchSetting=capwapWlanSwitchSetting, dot11GetWdsTable=dot11GetWdsTable, dot11ClientInformationTable=dot11ClientInformationTable, capwapWtpSwitchIpAddressAdd=capwapWtpSwitchIpAddressAdd, dot11InternalStationConnectionMultiSSID1=dot11InternalStationConnectionMultiSSID1, limitedAdministrator=limitedAdministrator, ifMacAddress=ifMacAddress, dot11ClientIpAddress=dot11ClientIpAddress, interfaceInformationTable=interfaceInformationTable, ieee802dot11APArrayScans=ieee802dot11APArrayScans, capwapWtpSwitchIpAddressDelete=capwapWtpSwitchIpAddressDelete, trafficStatistics=trafficStatistics, ftpUserName=ftpUserName, dot11GroupVlanListMssid3=dot11GroupVlanListMssid3, dhcpServerDomainNameStatus=dhcpServerDomainNameStatus, dhcpServerDynamicControl=dhcpServerDynamicControl, emailNtfFromIPAddress=emailNtfFromIPAddress, dot11MssidRADIUSIndex=dot11MssidRADIUSIndex, dot11ARPSpoofingPreventionEntry=dot11ARPSpoofingPreventionEntry, dot11Frequency=dot11Frequency, emailNtfPassword=emailNtfPassword, currentStaticTable=currentStaticTable, dot11MssidAutoRekeyStartTime=dot11MssidAutoRekeyStartTime, dot11MacAccessControlListIndex=dot11MacAccessControlListIndex, ieee802dot11VLAN=ieee802dot11VLAN, tftpRemoteFileName=tftpRemoteFileName, dot11MacAccessControlListTable=dot11MacAccessControlListTable, dot11WifiMode=dot11WifiMode, dot11ARPSpoofingPreventionStatus=dot11ARPSpoofingPreventionStatus, dot11RogueApSurveyLastseen=dot11RogueApSurveyLastseen, dynamicIpPoolStart=dynamicIpPoolStart, dot11ZoneDefenceTable=dot11ZoneDefenceTable, dot11WdsSiteSurveyEntry=dot11WdsSiteSurveyEntry, tftpServerIPAddress=tftpServerIPAddress, staticIndex=staticIndex, dot3TrafficStatisticsEntry=dot3TrafficStatisticsEntry, deviceInformationFirmwareVersion=deviceInformationFirmwareVersion, dot11APArraySyncAclStatus=dot11APArraySyncAclStatus, dot11PrimaryRadiusServer=dot11PrimaryRadiusServer, dhcpServer=dhcpServer, cpuLoadingFull=cpuLoadingFull, lanIfSettingTable=lanIfSettingTable, dot11APArraySyncFixedRateStatus=dot11APArraySyncFixedRateStatus, dot11PvidSettingWds2=dot11PvidSettingWds2, dot11ClientMacAddress=dot11ClientMacAddress, deviceFactoryDefault=deviceFactoryDefault, dot11QosRulesEntry=dot11QosRulesEntry, dot11APArrayScanListTable=dot11APArrayScanListTable, dot11APArraySyncConnectionLimitStatus=dot11APArraySyncConnectionLimitStatus, dot11VlanStatus=dot11VlanStatus, dot11Filter=dot11Filter, dot11TransmitRetryRate=dot11TransmitRetryRate, dot11QosStatus=dot11QosStatus, dot11MssidWmm=dot11MssidWmm, ieee802dot11APArray=ieee802dot11APArray, dot11RogueApSurvey=dot11RogueApSurvey, dot11UserLimit=dot11UserLimit, dot11MssidRADIUSPort=dot11MssidRADIUSPort, dot11ScheduleListName=dot11ScheduleListName, dot11APArrayMeberListLoacation=dot11APArrayMeberListLoacation, ieee802dot11ARPSpoofingPreventionAddressSetting=ieee802dot11ARPSpoofingPreventionAddressSetting, wirelessLanIfNumber=wirelessLanIfNumber, dot11RemoteApMacAddressAccessTable=dot11RemoteApMacAddressAccessTable, dot11WdsPsm=dot11WdsPsm, capwapWtpConnectingSwitchIP=capwapWtpConnectingSwitchIP, dot11RogueApSurveyRefresh=dot11RogueApSurveyRefresh, trapStatus=trapStatus, dot11MulticastRateGBandList=dot11MulticastRateGBandList, dot11APArrayMeberListIP=dot11APArrayMeberListIP, trapSetting=trapSetting, report=report, dot11WpaEapPasswd=dot11WpaEapPasswd, dot11RemoteApMacAddressIndex=dot11RemoteApMacAddressIndex, dlink_products=dlink_products, dot11MssidPriority=dot11MssidPriority)
