#
# PySNMP MIB module ZHNWIRELESS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNWIRELESS
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Counter64, ModuleIdentity, Counter32, Unsigned32, iso, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, ObjectIdentity, TimeTicks, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "ModuleIdentity", "Counter32", "Unsigned32", "iso", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "ObjectIdentity", "TimeTicks", "enterprises", "Bits")
DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhnWireless = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46))
zhnWireless.setRevisions(('2012-07-11 12:00', '2012-06-21 12:00', '2012-05-16 12:00', '2012-04-18 12:00', '2012-01-30 12:00',))
if mibBuilder.loadTexts: zhnWireless.setLastUpdated('201207111200Z')
if mibBuilder.loadTexts: zhnWireless.setOrganization('Zhone Technologies, Inc.')
zhnWirelessObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1))
class WlChannelSelections(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9), ("channel10", 10), ("channel11", 11), ("channel12", 12), ("channel13", 13), ("auto", 14))

class WlMimoNEwcModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("auto", 1), ("disabled", 2))

class WlMimoNRates(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("auto", 1), ("use54g", 2), ("rate6Dot5M", 3), ("rate13M", 4), ("rate19Dot5M", 5), ("rate26M", 6), ("rate39M", 7), ("rate52M", 8), ("rate58Dot5M", 9), ("rate65M", 10), ("rate78M", 11), ("rate104M", 12), ("rate117M", 13), ("rate130M", 14))

class WlMimoNProtectionModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("auto", 2))

class Wl54gMulticastRates(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("rate1M", 1), ("rate2M", 2), ("rate5Dot5M", 3), ("rate6M", 4), ("rate9M", 5), ("rate11M", 6), ("rate12M", 7), ("rate18M", 8), ("rate24M", 9), ("rate36M", 10), ("rate48M", 11), ("rate54M", 12), ("auto", 13))

class WlBasicRates(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("all", 2), ("rate1And2", 3), ("stdRates", 4))

class WlWepModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class WlWpaModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tkip", 1), ("aes", 2), ("tkipAes", 3))

class WlAuthenticationModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("mode8011x", 1), ("open", 2), ("shared", 3), ("wpa", 4), ("wpa2", 5), ("wpaPsk", 6), ("wpa2Psk", 7), ("mixedWpa2Wpa", 8), ("mixedWpa2WpaPsk", 9))

class WlSecurityKeyCodes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("bit64", 1), ("bit128", 2))

class WlMACFilterModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("allow", 1), ("deny", 2), ("disable", 3))

class WlBridgeAPModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accessPoint", 1), ("wirelessBridge", 2))

class WlBridgeRestrictModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enable", 1), ("enableScan", 2), ("disable", 3))

class WlCountryCodes(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class WlWpsAddClientMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pushButton", 1), ("accessPointPIN", 2), ("stationPIN", 3))

wlBaseCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1), )
if mibBuilder.loadTexts: wlBaseCfgTable.setStatus('current')
wlBaseCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlBaseCfgIndex"))
if mibBuilder.loadTexts: wlBaseCfgEntry.setStatus('current')
wlBaseCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlBaseCfgIndex.setStatus('current')
wlBaseCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgEnable.setStatus('current')
wlBaseCfgBand = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgBand.setStatus('current')
wlBaseCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 4), WlChannelSelections()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgChannel.setStatus('current')
wlBaseCfgCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 5), WlChannelSelections()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgCurrentChannel.setStatus('current')
wlBaseCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgBandwidth.setStatus('current')
wlBaseCfgAutoScanTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgAutoScanTimer.setStatus('current')
wlBaseCfgMimoNEwc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 8), WlMimoNEwcModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgMimoNEwc.setStatus('current')
wlBaseCfgMimoNRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 9), WlMimoNRates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgMimoNRate.setStatus('current')
wlBaseCfgMimoNProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 10), WlMimoNProtectionModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgMimoNProtection.setStatus('current')
wlBaseCfgNClientsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgNClientsOnly.setStatus('current')
wlBaseCfg54gRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 12), Wl54gMulticastRates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfg54gRate.setStatus('current')
wlBaseCfgMulticastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 13), Wl54gMulticastRates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgMulticastRate.setStatus('current')
wlBaseCfgBasicRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 14), WlBasicRates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgBasicRate.setStatus('current')
wlBaseCfgFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgFragThreshold.setStatus('current')
wlBaseCfgRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgRTSThreshold.setStatus('current')
wlBaseCfgDTIMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgDTIMInterval.setStatus('current')
wlBaseCfgBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgBeaconInterval.setStatus('current')
wlBaseCfgGlobalMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgGlobalMaxClients.setStatus('current')
wlBaseCfgXPress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgXPress.setStatus('current')
wlBaseCfgTxPowerPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgTxPowerPercent.setStatus('current')
wlBaseCfgWMMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgWMMEnable.setStatus('current')
wlBaseCfgWMMNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgWMMNoAck.setStatus('current')
wlBaseCfgWMMApsd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgWMMApsd.setStatus('current')
wlBaseCfgWpsAddClientMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 25), WlWpsAddClientMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgWpsAddClientMethod.setStatus('current')
wlBaseCfgWpsApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgWpsApMode.setStatus('current')
wlBaseCfgWpsConfigAp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgWpsConfigAp.setStatus('current')
wlBaseCfgWpsDevicePIN = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgWpsDevicePIN.setStatus('current')
wlBaseCfgWpsAddEnrollee = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgWpsAddEnrollee.setStatus('current')
wlBaseCfgWpsStationPIN = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgWpsStationPIN.setStatus('current')
wlBaseCfgBridgeRestrictMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 31), WlBridgeRestrictModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlBaseCfgBridgeRestrictMode.setStatus('current')
wlBaseCfgBridgeRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 1, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlBaseCfgBridgeRefresh.setStatus('current')
wlVirtualIntfTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2), )
if mibBuilder.loadTexts: wlVirtualIntfTable.setStatus('current')
wlVirtualIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlBaseCfgIndex"), (0, "ZHNWIRELESS", "wlVirtualIndex"))
if mibBuilder.loadTexts: wlVirtualIntfEntry.setStatus('current')
wlVirtualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlVirtualIndex.setStatus('current')
wlVirtualHide = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualHide.setStatus('current')
wlVirtualAPIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualAPIsolation.setStatus('current')
wlVirtualDisableWme = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualDisableWme.setStatus('current')
wlVirtualEnableWmf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualEnableWmf.setStatus('current')
wlVirtualSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 72))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualSsid.setStatus('current')
wlVirtualBssMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlVirtualBssMacAddr.setStatus('current')
wlVirtualCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 8), WlCountryCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlVirtualCountryCode.setStatus('current')
wlVirtualMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualMaxClients.setStatus('current')
wlVirtualEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlVirtualEnable.setStatus('current')
wlSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3), )
if mibBuilder.loadTexts: wlSecurityTable.setStatus('current')
wlSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlBaseCfgIndex"), (0, "ZHNWIRELESS", "wlVirtualIndex"))
if mibBuilder.loadTexts: wlSecurityEntry.setStatus('current')
wlSecuritySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 72))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlSecuritySsid.setStatus('current')
wlSecurityWps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlSecurityWps.setStatus('current')
wlSecurityAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 3), WlAuthenticationModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityAuthMode.setStatus('current')
wlSecurityWpaPsk = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 72))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWpaPsk.setStatus('current')
wlSecurityWpaGTKRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWpaGTKRekey.setStatus('current')
wlSecurityWpaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 6), WlWpaModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWpaMode.setStatus('current')
wlSecurityWepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 7), WlWepModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWepStatus.setStatus('current')
wlSecurityRadiusServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityRadiusServerIP.setStatus('current')
wlSecurityRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityRadiusPort.setStatus('current')
wlSecurityRadiusKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 72))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityRadiusKey.setStatus('current')
wlSecurityWepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 11), WlSecurityKeyCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWepKey.setStatus('current')
wlSecurityCurrentWepKeyIndex64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityCurrentWepKeyIndex64.setStatus('current')
wlSecurityCurrentWepKeyIndex128 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityCurrentWepKeyIndex128.setStatus('current')
wlSecurityWep64Key1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep64Key1.setStatus('current')
wlSecurityWep64Key2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep64Key2.setStatus('current')
wlSecurityWep64Key3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep64Key3.setStatus('current')
wlSecurityWep64Key4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep64Key4.setStatus('current')
wlSecurityWep128Key1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep128Key1.setStatus('current')
wlSecurityWep128Key2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep128Key2.setStatus('current')
wlSecurityWep128Key3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep128Key3.setStatus('current')
wlSecurityWep128Key4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWep128Key4.setStatus('current')
wlSecurityWpa2Preauth = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWpa2Preauth.setStatus('current')
wlSecurityWpa2NetReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityWpa2NetReauth.setStatus('current')
wlSecurityMACFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 3, 1, 24), WlMACFilterModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlSecurityMACFilterMode.setStatus('current')
wlMACFilterTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4), )
if mibBuilder.loadTexts: wlMACFilterTable.setStatus('current')
wlMACFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlBaseCfgIndex"), (0, "ZHNWIRELESS", "wlVirtualIndex"), (0, "ZHNWIRELESS", "wlMACFilterIndex"))
if mibBuilder.loadTexts: wlMACFilterEntry.setStatus('current')
wlMACFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlMACFilterIndex.setStatus('current')
wlMACFilterSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 72))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlMACFilterSsid.setStatus('current')
wlMACFilterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlMACFilterMacAddr.setStatus('current')
wlMACFilterIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 72))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlMACFilterIfName.setStatus('current')
wlMACFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 4, 1, 5), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlMACFilterRowStatus.setStatus('current')
wlStaticWdsMACAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 5), )
if mibBuilder.loadTexts: wlStaticWdsMACAddrTable.setStatus('current')
wlStaticWdsMACAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 5, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlBaseCfgIndex"), (0, "ZHNWIRELESS", "wlStaticWdsMACIndex"))
if mibBuilder.loadTexts: wlStaticWdsMACAddrEntry.setStatus('current')
wlStaticWdsMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlStaticWdsMACIndex.setStatus('current')
wlStaticWdsRemoteMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 5, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlStaticWdsRemoteMACAddr.setStatus('current')
wlScanWdsMACAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 6), )
if mibBuilder.loadTexts: wlScanWdsMACAddrTable.setStatus('current')
wlScanWdsMACAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 6, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlBaseCfgIndex"), (0, "ZHNWIRELESS", "wlScanWdsMACIndex"))
if mibBuilder.loadTexts: wlScanWdsMACAddrEntry.setStatus('current')
wlScanWdsMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlScanWdsMACIndex.setStatus('current')
wlScanWdsRemoteMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlScanWdsRemoteMACAddr.setStatus('current')
wlAuthStationsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7), )
if mibBuilder.loadTexts: wlAuthStationsTable.setStatus('current')
wlAuthStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1), ).setIndexNames((0, "ZHNWIRELESS", "wlAuthStationIndex"))
if mibBuilder.loadTexts: wlAuthStationsEntry.setStatus('current')
wlAuthStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlAuthStationIndex.setStatus('current')
wlAuthStationMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlAuthStationMACAddr.setStatus('current')
wlAuthStationAssociationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlAuthStationAssociationStatus.setStatus('current')
wlAuthStationAuthorizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlAuthStationAuthorizationStatus.setStatus('current')
wlAuthStationSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlAuthStationSSID.setStatus('current')
wlAuthStationInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 1, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlAuthStationInterface.setStatus('current')
zhnWirelessConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2))
zhnWirelessGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1))
zhnWirelessCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 2))
zhnWirelessCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 2, 1)).setObjects(("ZHNWIRELESS", "zhnWlBaseCfgGroup"), ("ZHNWIRELESS", "zhnWlVirtualCfgGroup"), ("ZHNWIRELESS", "zhnWlSecurityGroup"), ("ZHNWIRELESS", "zhnWlMACFilterGroup"), ("ZHNWIRELESS", "zhnWlStaticWdsMACAddrGroup"), ("ZHNWIRELESS", "zhnWlScanWdsMACAddrGroup"), ("ZHNWIRELESS", "zhnWlAuthStationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWirelessCompliance = zhnWirelessCompliance.setStatus('current')
zhnWlBaseCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 1)).setObjects(("ZHNWIRELESS", "wlBaseCfgEnable"), ("ZHNWIRELESS", "wlBaseCfgBand"), ("ZHNWIRELESS", "wlBaseCfgChannel"), ("ZHNWIRELESS", "wlBaseCfgCurrentChannel"), ("ZHNWIRELESS", "wlBaseCfgBandwidth"), ("ZHNWIRELESS", "wlBaseCfgAutoScanTimer"), ("ZHNWIRELESS", "wlBaseCfgMimoNEwc"), ("ZHNWIRELESS", "wlBaseCfgMimoNRate"), ("ZHNWIRELESS", "wlBaseCfgMimoNProtection"), ("ZHNWIRELESS", "wlBaseCfgNClientsOnly"), ("ZHNWIRELESS", "wlBaseCfg54gRate"), ("ZHNWIRELESS", "wlBaseCfgMulticastRate"), ("ZHNWIRELESS", "wlBaseCfgBasicRate"), ("ZHNWIRELESS", "wlBaseCfgFragThreshold"), ("ZHNWIRELESS", "wlBaseCfgRTSThreshold"), ("ZHNWIRELESS", "wlBaseCfgDTIMInterval"), ("ZHNWIRELESS", "wlBaseCfgBeaconInterval"), ("ZHNWIRELESS", "wlBaseCfgGlobalMaxClients"), ("ZHNWIRELESS", "wlBaseCfgXPress"), ("ZHNWIRELESS", "wlBaseCfgTxPowerPercent"), ("ZHNWIRELESS", "wlBaseCfgWMMEnable"), ("ZHNWIRELESS", "wlBaseCfgWMMNoAck"), ("ZHNWIRELESS", "wlBaseCfgWMMApsd"), ("ZHNWIRELESS", "wlBaseCfgWpsAddClientMethod"), ("ZHNWIRELESS", "wlBaseCfgWpsApMode"), ("ZHNWIRELESS", "wlBaseCfgWpsConfigAp"), ("ZHNWIRELESS", "wlBaseCfgWpsDevicePIN"), ("ZHNWIRELESS", "wlBaseCfgWpsAddEnrollee"), ("ZHNWIRELESS", "wlBaseCfgWpsStationPIN"), ("ZHNWIRELESS", "wlBaseCfgBridgeRestrictMode"), ("ZHNWIRELESS", "wlBaseCfgBridgeRefresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlBaseCfgGroup = zhnWlBaseCfgGroup.setStatus('current')
zhnWlVirtualCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 2)).setObjects(("ZHNWIRELESS", "wlVirtualHide"), ("ZHNWIRELESS", "wlVirtualAPIsolation"), ("ZHNWIRELESS", "wlVirtualDisableWme"), ("ZHNWIRELESS", "wlVirtualEnableWmf"), ("ZHNWIRELESS", "wlVirtualSsid"), ("ZHNWIRELESS", "wlVirtualBssMacAddr"), ("ZHNWIRELESS", "wlVirtualCountryCode"), ("ZHNWIRELESS", "wlVirtualMaxClients"), ("ZHNWIRELESS", "wlVirtualEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlVirtualCfgGroup = zhnWlVirtualCfgGroup.setStatus('current')
zhnWlSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 3)).setObjects(("ZHNWIRELESS", "wlSecuritySsid"), ("ZHNWIRELESS", "wlSecurityWps"), ("ZHNWIRELESS", "wlSecurityAuthMode"), ("ZHNWIRELESS", "wlSecurityWpaPsk"), ("ZHNWIRELESS", "wlSecurityWpaGTKRekey"), ("ZHNWIRELESS", "wlSecurityWpaMode"), ("ZHNWIRELESS", "wlSecurityWepStatus"), ("ZHNWIRELESS", "wlSecurityRadiusServerIP"), ("ZHNWIRELESS", "wlSecurityRadiusPort"), ("ZHNWIRELESS", "wlSecurityRadiusKey"), ("ZHNWIRELESS", "wlSecurityWepKey"), ("ZHNWIRELESS", "wlSecurityCurrentWepKeyIndex64"), ("ZHNWIRELESS", "wlSecurityCurrentWepKeyIndex128"), ("ZHNWIRELESS", "wlSecurityWep64Key1"), ("ZHNWIRELESS", "wlSecurityWep64Key2"), ("ZHNWIRELESS", "wlSecurityWep64Key3"), ("ZHNWIRELESS", "wlSecurityWep64Key4"), ("ZHNWIRELESS", "wlSecurityWep128Key1"), ("ZHNWIRELESS", "wlSecurityWep128Key2"), ("ZHNWIRELESS", "wlSecurityWep128Key3"), ("ZHNWIRELESS", "wlSecurityWep128Key4"), ("ZHNWIRELESS", "wlSecurityWpa2Preauth"), ("ZHNWIRELESS", "wlSecurityWpa2NetReauth"), ("ZHNWIRELESS", "wlSecurityMACFilterMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlSecurityGroup = zhnWlSecurityGroup.setStatus('current')
zhnWlMACFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 4)).setObjects(("ZHNWIRELESS", "wlMACFilterSsid"), ("ZHNWIRELESS", "wlMACFilterMacAddr"), ("ZHNWIRELESS", "wlMACFilterIfName"), ("ZHNWIRELESS", "wlMACFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlMACFilterGroup = zhnWlMACFilterGroup.setStatus('current')
zhnWlStaticWdsMACAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 5)).setObjects(("ZHNWIRELESS", "wlStaticWdsRemoteMACAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlStaticWdsMACAddrGroup = zhnWlStaticWdsMACAddrGroup.setStatus('current')
zhnWlScanWdsMACAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 6)).setObjects(("ZHNWIRELESS", "wlScanWdsRemoteMACAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlScanWdsMACAddrGroup = zhnWlScanWdsMACAddrGroup.setStatus('current')
zhnWlAuthStationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 46, 2, 1, 7)).setObjects(("ZHNWIRELESS", "wlAuthStationMACAddr"), ("ZHNWIRELESS", "wlAuthStationAssociationStatus"), ("ZHNWIRELESS", "wlAuthStationAuthorizationStatus"), ("ZHNWIRELESS", "wlAuthStationSSID"), ("ZHNWIRELESS", "wlAuthStationInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnWlAuthStationsGroup = zhnWlAuthStationsGroup.setStatus('current')
mibBuilder.exportSymbols("ZHNWIRELESS", wlMACFilterEntry=wlMACFilterEntry, wlScanWdsMACIndex=wlScanWdsMACIndex, wlBaseCfgWpsStationPIN=wlBaseCfgWpsStationPIN, wlVirtualIntfTable=wlVirtualIntfTable, wlBaseCfgBeaconInterval=wlBaseCfgBeaconInterval, WlCountryCodes=WlCountryCodes, wlBaseCfgEnable=wlBaseCfgEnable, wlBaseCfgBridgeRestrictMode=wlBaseCfgBridgeRestrictMode, wlBaseCfgWpsDevicePIN=wlBaseCfgWpsDevicePIN, wlVirtualEnableWmf=wlVirtualEnableWmf, zhnWlVirtualCfgGroup=zhnWlVirtualCfgGroup, Wl54gMulticastRates=Wl54gMulticastRates, wlAuthStationsTable=wlAuthStationsTable, WlChannelSelections=WlChannelSelections, wlSecuritySsid=wlSecuritySsid, wlSecurityWep64Key2=wlSecurityWep64Key2, wlVirtualBssMacAddr=wlVirtualBssMacAddr, wlScanWdsMACAddrTable=wlScanWdsMACAddrTable, wlSecurityWep64Key4=wlSecurityWep64Key4, wlSecurityWpaGTKRekey=wlSecurityWpaGTKRekey, WlWpaModes=WlWpaModes, wlBaseCfgGlobalMaxClients=wlBaseCfgGlobalMaxClients, wlBaseCfgNClientsOnly=wlBaseCfgNClientsOnly, wlAuthStationMACAddr=wlAuthStationMACAddr, wlSecurityRadiusServerIP=wlSecurityRadiusServerIP, wlVirtualMaxClients=wlVirtualMaxClients, wlSecurityCurrentWepKeyIndex64=wlSecurityCurrentWepKeyIndex64, WlMimoNRates=WlMimoNRates, zhnWlScanWdsMACAddrGroup=zhnWlScanWdsMACAddrGroup, wlVirtualCountryCode=wlVirtualCountryCode, wlAuthStationAssociationStatus=wlAuthStationAssociationStatus, wlSecurityWepStatus=wlSecurityWepStatus, wlVirtualSsid=wlVirtualSsid, wlVirtualHide=wlVirtualHide, wlVirtualEnable=wlVirtualEnable, zhnWlBaseCfgGroup=zhnWlBaseCfgGroup, wlBaseCfgWpsAddEnrollee=wlBaseCfgWpsAddEnrollee, wlVirtualIndex=wlVirtualIndex, wlSecurityWpaMode=wlSecurityWpaMode, WlMimoNProtectionModes=WlMimoNProtectionModes, wlAuthStationIndex=wlAuthStationIndex, WlBridgeRestrictModes=WlBridgeRestrictModes, wlSecurityEntry=wlSecurityEntry, wlScanWdsRemoteMACAddr=wlScanWdsRemoteMACAddr, wlBaseCfgMulticastRate=wlBaseCfgMulticastRate, wlBaseCfgXPress=wlBaseCfgXPress, wlAuthStationSSID=wlAuthStationSSID, wlMACFilterSsid=wlMACFilterSsid, zhnWirelessGroups=zhnWirelessGroups, wlBaseCfgTxPowerPercent=wlBaseCfgTxPowerPercent, zhnWlSecurityGroup=zhnWlSecurityGroup, wlSecurityWep128Key3=wlSecurityWep128Key3, zhnWlMACFilterGroup=zhnWlMACFilterGroup, wlSecurityWep64Key3=wlSecurityWep64Key3, WlAuthenticationModes=WlAuthenticationModes, wlBaseCfgMimoNProtection=wlBaseCfgMimoNProtection, wlVirtualIntfEntry=wlVirtualIntfEntry, wlAuthStationAuthorizationStatus=wlAuthStationAuthorizationStatus, WlSecurityKeyCodes=WlSecurityKeyCodes, wlBaseCfgFragThreshold=wlBaseCfgFragThreshold, wlBaseCfgCurrentChannel=wlBaseCfgCurrentChannel, WlWpsAddClientMethod=WlWpsAddClientMethod, zhnWlStaticWdsMACAddrGroup=zhnWlStaticWdsMACAddrGroup, wlSecurityRadiusPort=wlSecurityRadiusPort, wlSecurityWep128Key2=wlSecurityWep128Key2, PYSNMP_MODULE_ID=zhnWireless, zhnWirelessCompliances=zhnWirelessCompliances, wlSecurityWepKey=wlSecurityWepKey, wlBaseCfgWMMEnable=wlBaseCfgWMMEnable, wlSecurityWep64Key1=wlSecurityWep64Key1, wlBaseCfgDTIMInterval=wlBaseCfgDTIMInterval, wlBaseCfgAutoScanTimer=wlBaseCfgAutoScanTimer, wlAuthStationInterface=wlAuthStationInterface, wlBaseCfgEntry=wlBaseCfgEntry, wlStaticWdsMACIndex=wlStaticWdsMACIndex, wlBaseCfgTable=wlBaseCfgTable, wlBaseCfgIndex=wlBaseCfgIndex, wlSecurityWpa2NetReauth=wlSecurityWpa2NetReauth, wlBaseCfgWpsAddClientMethod=wlBaseCfgWpsAddClientMethod, wlSecurityAuthMode=wlSecurityAuthMode, wlBaseCfgMimoNEwc=wlBaseCfgMimoNEwc, WlMACFilterModes=WlMACFilterModes, wlBaseCfgMimoNRate=wlBaseCfgMimoNRate, wlMACFilterIndex=wlMACFilterIndex, wlSecurityMACFilterMode=wlSecurityMACFilterMode, zhnWirelessObjects=zhnWirelessObjects, zhnWireless=zhnWireless, wlSecurityWpa2Preauth=wlSecurityWpa2Preauth, zhnWlAuthStationsGroup=zhnWlAuthStationsGroup, wlStaticWdsMACAddrEntry=wlStaticWdsMACAddrEntry, wlSecurityWep128Key4=wlSecurityWep128Key4, wlScanWdsMACAddrEntry=wlScanWdsMACAddrEntry, wlMACFilterMacAddr=wlMACFilterMacAddr, wlSecurityWps=wlSecurityWps, wlBaseCfgWMMNoAck=wlBaseCfgWMMNoAck, WlMimoNEwcModes=WlMimoNEwcModes, wlAuthStationsEntry=wlAuthStationsEntry, wlBaseCfg54gRate=wlBaseCfg54gRate, wlSecurityRadiusKey=wlSecurityRadiusKey, wlBaseCfgRTSThreshold=wlBaseCfgRTSThreshold, wlMACFilterIfName=wlMACFilterIfName, wlVirtualDisableWme=wlVirtualDisableWme, wlStaticWdsRemoteMACAddr=wlStaticWdsRemoteMACAddr, WlBasicRates=WlBasicRates, wlBaseCfgBridgeRefresh=wlBaseCfgBridgeRefresh, wlBaseCfgChannel=wlBaseCfgChannel, wlMACFilterTable=wlMACFilterTable, wlBaseCfgWpsConfigAp=wlBaseCfgWpsConfigAp, zhnWirelessCompliance=zhnWirelessCompliance, wlBaseCfgBasicRate=wlBaseCfgBasicRate, wlBaseCfgWpsApMode=wlBaseCfgWpsApMode, zhnWirelessConformance=zhnWirelessConformance, wlMACFilterRowStatus=wlMACFilterRowStatus, wlSecurityWpaPsk=wlSecurityWpaPsk, wlStaticWdsMACAddrTable=wlStaticWdsMACAddrTable, wlSecurityTable=wlSecurityTable, wlVirtualAPIsolation=wlVirtualAPIsolation, wlSecurityCurrentWepKeyIndex128=wlSecurityCurrentWepKeyIndex128, wlSecurityWep128Key1=wlSecurityWep128Key1, wlBaseCfgBand=wlBaseCfgBand, wlBaseCfgWMMApsd=wlBaseCfgWMMApsd, wlBaseCfgBandwidth=wlBaseCfgBandwidth, WlBridgeAPModes=WlBridgeAPModes, WlWepModes=WlWepModes)
