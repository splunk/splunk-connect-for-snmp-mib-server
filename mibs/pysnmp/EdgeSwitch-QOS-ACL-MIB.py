#
# PySNMP MIB module EdgeSwitch-QOS-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-QOS-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:56:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
fastPathQOS, = mibBuilder.importSymbols("EdgeSwitch-QOS-MIB", "fastPathQOS")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, TimeTicks, IpAddress, Gauge32, ObjectIdentity, Counter32, Integer32, ModuleIdentity, Unsigned32, Counter64, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "TimeTicks", "IpAddress", "Gauge32", "ObjectIdentity", "Counter32", "Integer32", "ModuleIdentity", "Unsigned32", "Counter64", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, MacAddress, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "TruthValue", "RowStatus")
fastPathQOSACL = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2))
fastPathQOSACL.setRevisions(('2012-04-27 00:00', '2012-02-14 00:00', '2011-01-26 00:00', '2007-05-23 00:00', '2005-07-08 00:00', '2004-09-20 00:00', '2003-11-21 00:00', '2003-02-06 23:34',))
if mibBuilder.loadTexts: fastPathQOSACL.setLastUpdated('201204270000Z')
if mibBuilder.loadTexts: fastPathQOSACL.setOrganization('Broadcom Inc')
class EtypeValue(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class AclBurstSize(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

aclNamedIpv4IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNamedIpv4IndexNextFree.setStatus('current')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIndex.setStatus('current')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
aclName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclName.setStatus('current')
aclIfTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8), )
if mibBuilder.loadTexts: aclIfTable.setStatus('current')
aclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIfIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfDirection"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfSequence"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfAclType"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIfAclId"))
if mibBuilder.loadTexts: aclIfEntry.setStatus('current')
aclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIfIndex.setStatus('current')
aclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclIfDirection.setStatus('current')
aclIfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclIfSequence.setStatus('current')
aclIfAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: aclIfAclType.setStatus('current')
aclIfAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIfAclId.setStatus('current')
aclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIfStatus.setStatus('current')
aclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: aclRuleTable.setStatus('current')
aclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: aclRuleEntry.setStatus('current')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
aclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAction.setStatus('current')
aclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleProtocol.setStatus('current')
aclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setStatus('current')
aclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpMask.setStatus('current')
aclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4Port.setStatus('current')
aclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setStatus('current')
aclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setStatus('current')
aclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpAddress.setStatus('current')
aclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpMask.setStatus('current')
aclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4Port.setStatus('current')
aclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setStatus('current')
aclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setStatus('current')
aclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIPDSCP.setStatus('current')
aclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpPrecedence.setStatus('current')
aclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosBits.setStatus('current')
aclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosMask.setStatus('current')
aclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleStatus.setStatus('current')
aclRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAssignQueueId.setStatus('current')
aclRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRedirectIntf.setStatus('current')
aclRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMatchEvery.setStatus('current')
aclRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 22), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMirrorIntf.setStatus('current')
aclRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleLogging.setStatus('current')
aclRuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleTimeRangeName.setStatus('current')
aclRuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclRuleTimeRangeStatus.setStatus('current')
aclRuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRateLimitCrate.setStatus('current')
aclRuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 27), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRateLimitCburst.setStatus('current')
aclRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIcmpType.setStatus('current')
aclRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIcmpCode.setStatus('current')
aclRuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIgmpType.setStatus('current')
aclRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 32), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleEstablished.setStatus('current')
aclRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 4, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleFragments.setStatus('current')
aclMacIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacIndexNextFree.setStatus('current')
aclMacTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: aclMacTable.setStatus('current')
aclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclMacIndex"))
if mibBuilder.loadTexts: aclMacEntry.setStatus('current')
aclMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclMacIndex.setStatus('current')
aclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacName.setStatus('current')
aclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacStatus.setStatus('current')
aclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7), )
if mibBuilder.loadTexts: aclMacRuleTable.setStatus('current')
aclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclMacIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclMacRuleIndex"))
if mibBuilder.loadTexts: aclMacRuleEntry.setStatus('current')
aclMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclMacRuleIndex.setStatus('current')
aclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAction.setStatus('current')
aclMacRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos.setStatus('current')
aclMacRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos2.setStatus('current')
aclMacRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacAddr.setStatus('current')
aclMacRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacMask.setStatus('current')
aclMacRuleEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeKey.setStatus('current')
aclMacRuleEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 8), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeValue.setStatus('current')
aclMacRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacAddr.setStatus('current')
aclMacRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacMask.setStatus('current')
aclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId.setStatus('current')
aclMacRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeStart.setStatus('current')
aclMacRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeEnd.setStatus('current')
aclMacRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2.setStatus('current')
aclMacRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeStart.setStatus('current')
aclMacRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeEnd.setStatus('current')
aclMacRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleStatus.setStatus('current')
aclMacRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAssignQueueId.setStatus('current')
aclMacRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRedirectIntf.setStatus('current')
aclMacRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMatchEvery.setStatus('current')
aclMacRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 21), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMirrorIntf.setStatus('current')
aclMacRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleLogging.setStatus('current')
aclMacRuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleTimeRangeName.setStatus('current')
aclMacRuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacRuleTimeRangeStatus.setStatus('current')
aclMacRuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRateLimitCrate.setStatus('current')
aclMacRuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 7, 1, 26), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRateLimitCburst.setStatus('current')
aclLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9))
aclTrapRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleIndex.setStatus('current')
aclTrapRuleAction = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleAction.setStatus('current')
aclTrapRuleHitCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 4), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleHitCount.setStatus('current')
aclTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclTrapFlag.setStatus('current')
aclTrapRuleTimeRangeName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleTimeRangeName.setStatus('current')
aclTrapRuleTimeRangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2), ("delete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleTimeRangeNotification.setStatus('current')
aclTrapRuleInstallationStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("success", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleInstallationStatus.setStatus('current')
aclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 0))
aclTrapRuleLogEvent = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 0, 1)).setObjects(("EdgeSwitch-QOS-ACL-MIB", "aclIfAclType"), ("EdgeSwitch-QOS-ACL-MIB", "aclIfAclId"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleIndex"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleAction"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleHitCount"))
if mibBuilder.loadTexts: aclTrapRuleLogEvent.setStatus('current')
aclTrapRuleTimeRangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 0, 2)).setObjects(("EdgeSwitch-QOS-ACL-MIB", "aclIfAclType"), ("EdgeSwitch-QOS-ACL-MIB", "aclIfAclId"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleIndex"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleTimeRangeName"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleTimeRangeNotification"), ("EdgeSwitch-QOS-ACL-MIB", "aclTrapRuleInstallationStatus"))
if mibBuilder.loadTexts: aclTrapRuleTimeRangeEvent.setStatus('current')
aclIpv6IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpv6IndexNextFree.setStatus('current')
aclIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11), )
if mibBuilder.loadTexts: aclIpv6Table.setStatus('current')
aclIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIpv6Index"))
if mibBuilder.loadTexts: aclIpv6Entry.setStatus('current')
aclIpv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIpv6Index.setStatus('current')
aclIpv6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6Name.setStatus('current')
aclIpv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6Status.setStatus('current')
aclIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12), )
if mibBuilder.loadTexts: aclIpv6RuleTable.setStatus('current')
aclIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclIpv6Index"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclIpv6RuleIndex"))
if mibBuilder.loadTexts: aclIpv6RuleEntry.setStatus('current')
aclIpv6RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIpv6RuleIndex.setStatus('current')
aclIpv6RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleAction.setStatus('current')
aclIpv6RuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleLogging.setStatus('current')
aclIpv6RuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleAssignQueueId.setStatus('current')
aclIpv6RuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRedirectIntf.setStatus('current')
aclIpv6RuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleMirrorIntf.setStatus('current')
aclIpv6RuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleMatchEvery.setStatus('current')
aclIpv6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleProtocol.setStatus('current')
aclIpv6RuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4Port.setStatus('current')
aclIpv6RuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeStart.setStatus('current')
aclIpv6RuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeEnd.setStatus('current')
aclIpv6RuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4Port.setStatus('current')
aclIpv6RuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeStart.setStatus('current')
aclIpv6RuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeEnd.setStatus('current')
aclIpv6RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleStatus.setStatus('current')
aclIpv6RuleFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleFlowLabel.setStatus('current')
aclIpv6RuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIPDSCP.setStatus('current')
aclRuleSrcIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 18), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclRuleSrcIpv6Prefix.setStatus('current')
aclRuleSrcIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpv6PrefixLength.setStatus('current')
aclRuleDstIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 20), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclRuleDstIpv6Prefix.setStatus('current')
aclRuleDstIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDstIpv6PrefixLength.setStatus('current')
aclIpv6RuleTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleTimeRangeName.setStatus('current')
aclIpv6RuleTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpv6RuleTimeRangeStatus.setStatus('current')
aclIpv6RuleRateLimitCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRateLimitCrate.setStatus('current')
aclIpv6RuleRateLimitCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 25), AclBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRateLimitCburst.setStatus('current')
aclIpv6RuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIcmpType.setStatus('current')
aclIpv6RuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIcmpCode.setStatus('current')
aclIpv6RuleRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 29), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRouting.setStatus('current')
aclIpv6RuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleFragments.setStatus('current')
aclIpv6RuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 12, 1, 31), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleEstablished.setStatus('current')
aclVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13), )
if mibBuilder.loadTexts: aclVlanTable.setStatus('current')
aclVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1), ).setIndexNames((0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanIndex"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanDirection"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanSequence"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanAclType"), (0, "EdgeSwitch-QOS-ACL-MIB", "aclVlanAclId"))
if mibBuilder.loadTexts: aclVlanEntry.setStatus('current')
aclVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclVlanIndex.setStatus('current')
aclVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclVlanDirection.setStatus('current')
aclVlanSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclVlanSequence.setStatus('current')
aclVlanAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: aclVlanAclType.setStatus('current')
aclVlanAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclVlanAclId.setStatus('current')
aclVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 3, 2, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclVlanStatus.setStatus('current')
mibBuilder.exportSymbols("EdgeSwitch-QOS-ACL-MIB", aclRuleIndex=aclRuleIndex, fastPathQOSACL=fastPathQOSACL, EtypeValue=EtypeValue, aclRuleTimeRangeStatus=aclRuleTimeRangeStatus, aclVlanTable=aclVlanTable, aclMacRuleTimeRangeName=aclMacRuleTimeRangeName, aclRuleStatus=aclRuleStatus, aclIpv6RuleSrcL4Port=aclIpv6RuleSrcL4Port, aclMacRuleSrcMacAddr=aclMacRuleSrcMacAddr, aclIpv6RuleEntry=aclIpv6RuleEntry, aclName=aclName, aclRuleRateLimitCrate=aclRuleRateLimitCrate, aclIfStatus=aclIfStatus, Ipv6AddressPrefix=Ipv6AddressPrefix, aclTrapFlag=aclTrapFlag, aclIpv6RuleAssignQueueId=aclIpv6RuleAssignQueueId, aclIpv6RuleFlowLabel=aclIpv6RuleFlowLabel, aclRuleRateLimitCburst=aclRuleRateLimitCburst, aclIpv6Index=aclIpv6Index, aclIfIndex=aclIfIndex, aclMacRuleCos2=aclMacRuleCos2, aclMacRuleSrcMacMask=aclMacRuleSrcMacMask, aclMacRuleVlanId=aclMacRuleVlanId, aclRuleEstablished=aclRuleEstablished, aclIpv6RuleTimeRangeName=aclIpv6RuleTimeRangeName, aclRuleDstIpv6PrefixLength=aclRuleDstIpv6PrefixLength, aclRuleRedirectIntf=aclRuleRedirectIntf, aclIpv6RuleRouting=aclIpv6RuleRouting, aclMacRuleVlanId2RangeStart=aclMacRuleVlanId2RangeStart, aclMacRuleTable=aclMacRuleTable, aclMacName=aclMacName, aclIfEntry=aclIfEntry, aclTrapRuleInstallationStatus=aclTrapRuleInstallationStatus, aclMacRuleDestMacAddr=aclMacRuleDestMacAddr, aclTrapRuleHitCount=aclTrapRuleHitCount, aclMacRuleVlanId2RangeEnd=aclMacRuleVlanId2RangeEnd, aclIpv6Status=aclIpv6Status, aclRuleDstIpv6Prefix=aclRuleDstIpv6Prefix, aclIfAclId=aclIfAclId, aclMacRuleEtypeValue=aclMacRuleEtypeValue, aclMacRuleRedirectIntf=aclMacRuleRedirectIntf, aclRuleIpPrecedence=aclRuleIpPrecedence, aclMacRuleStatus=aclMacRuleStatus, PYSNMP_MODULE_ID=fastPathQOSACL, aclMacRuleVlanIdRangeStart=aclMacRuleVlanIdRangeStart, aclMacRuleEtypeKey=aclMacRuleEtypeKey, aclEntry=aclEntry, aclRuleDestL4PortRangeStart=aclRuleDestL4PortRangeStart, aclStatus=aclStatus, aclIpv6RuleRateLimitCburst=aclIpv6RuleRateLimitCburst, aclRuleDestL4PortRangeEnd=aclRuleDestL4PortRangeEnd, aclIpv6RuleRateLimitCrate=aclIpv6RuleRateLimitCrate, aclMacRuleIndex=aclMacRuleIndex, aclIndex=aclIndex, aclMacRuleCos=aclMacRuleCos, aclIpv6RuleDestL4PortRangeStart=aclIpv6RuleDestL4PortRangeStart, aclMacRuleDestMacMask=aclMacRuleDestMacMask, aclMacStatus=aclMacStatus, aclRuleDestIpMask=aclRuleDestIpMask, aclTrapRuleTimeRangeEvent=aclTrapRuleTimeRangeEvent, aclMacTable=aclMacTable, AclBurstSize=AclBurstSize, aclRuleAction=aclRuleAction, aclIpv6RuleIcmpType=aclIpv6RuleIcmpType, aclRuleSrcL4PortRangeStart=aclRuleSrcL4PortRangeStart, aclMacRuleEntry=aclMacRuleEntry, aclTrapRuleIndex=aclTrapRuleIndex, aclIpv6RuleIPDSCP=aclIpv6RuleIPDSCP, aclRuleIpTosBits=aclRuleIpTosBits, aclVlanAclType=aclVlanAclType, aclVlanDirection=aclVlanDirection, aclIpv6RuleIcmpCode=aclIpv6RuleIcmpCode, aclMacRuleRateLimitCrate=aclMacRuleRateLimitCrate, aclMacRuleVlanIdRangeEnd=aclMacRuleVlanIdRangeEnd, aclRuleTable=aclRuleTable, aclIpv6RuleStatus=aclIpv6RuleStatus, aclRuleFragments=aclRuleFragments, aclRuleIpTosMask=aclRuleIpTosMask, aclRuleSrcL4PortRangeEnd=aclRuleSrcL4PortRangeEnd, aclRuleEntry=aclRuleEntry, aclNamedIpv4IndexNextFree=aclNamedIpv4IndexNextFree, aclRuleTimeRangeName=aclRuleTimeRangeName, aclIpv6RuleSrcL4PortRangeStart=aclIpv6RuleSrcL4PortRangeStart, aclMacIndexNextFree=aclMacIndexNextFree, aclIfAclType=aclIfAclType, aclIpv6RuleDestL4Port=aclIpv6RuleDestL4Port, aclRuleLogging=aclRuleLogging, aclRuleIcmpType=aclRuleIcmpType, aclRuleMirrorIntf=aclRuleMirrorIntf, aclMacRuleRateLimitCburst=aclMacRuleRateLimitCburst, aclLoggingGroup=aclLoggingGroup, aclRuleProtocol=aclRuleProtocol, aclRuleIgmpType=aclRuleIgmpType, aclMacRuleVlanId2=aclMacRuleVlanId2, aclRuleIPDSCP=aclRuleIPDSCP, aclIpv6RuleLogging=aclIpv6RuleLogging, aclMacIndex=aclMacIndex, aclVlanStatus=aclVlanStatus, aclIpv6RuleIndex=aclIpv6RuleIndex, aclVlanSequence=aclVlanSequence, aclIpv6RuleSrcL4PortRangeEnd=aclIpv6RuleSrcL4PortRangeEnd, aclTrapRuleLogEvent=aclTrapRuleLogEvent, aclRuleSrcIpv6Prefix=aclRuleSrcIpv6Prefix, aclRuleDestL4Port=aclRuleDestL4Port, aclIfTable=aclIfTable, aclRuleMatchEvery=aclRuleMatchEvery, aclIpv6RuleTimeRangeStatus=aclIpv6RuleTimeRangeStatus, aclTable=aclTable, aclMacRuleAction=aclMacRuleAction, aclMacEntry=aclMacEntry, aclRuleDestIpAddress=aclRuleDestIpAddress, aclIpv6Table=aclIpv6Table, aclTrapRuleTimeRangeName=aclTrapRuleTimeRangeName, aclRuleSrcL4Port=aclRuleSrcL4Port, aclIpv6RuleMatchEvery=aclIpv6RuleMatchEvery, aclRuleSrcIpv6PrefixLength=aclRuleSrcIpv6PrefixLength, aclVlanIndex=aclVlanIndex, aclIpv6RuleAction=aclIpv6RuleAction, aclMacRuleMirrorIntf=aclMacRuleMirrorIntf, aclRuleIcmpCode=aclRuleIcmpCode, aclTrapRuleTimeRangeNotification=aclTrapRuleTimeRangeNotification, aclIpv6RuleTable=aclIpv6RuleTable, aclIfDirection=aclIfDirection, aclIfSequence=aclIfSequence, aclIpv6RuleEstablished=aclIpv6RuleEstablished, aclRuleSrcIpAddress=aclRuleSrcIpAddress, aclTrapRuleAction=aclTrapRuleAction, aclVlanEntry=aclVlanEntry, aclVlanAclId=aclVlanAclId, aclMacRuleLogging=aclMacRuleLogging, aclRuleSrcIpMask=aclRuleSrcIpMask, aclIpv6RuleRedirectIntf=aclIpv6RuleRedirectIntf, aclIpv6Name=aclIpv6Name, aclNotifications=aclNotifications, aclIpv6RuleFragments=aclIpv6RuleFragments, aclMacRuleAssignQueueId=aclMacRuleAssignQueueId, aclMacRuleMatchEvery=aclMacRuleMatchEvery, aclIpv6IndexNextFree=aclIpv6IndexNextFree, aclIpv6RuleMirrorIntf=aclIpv6RuleMirrorIntf, aclRuleAssignQueueId=aclRuleAssignQueueId, aclIpv6Entry=aclIpv6Entry, aclMacRuleTimeRangeStatus=aclMacRuleTimeRangeStatus, aclIpv6RuleDestL4PortRangeEnd=aclIpv6RuleDestL4PortRangeEnd, aclIpv6RuleProtocol=aclIpv6RuleProtocol)
