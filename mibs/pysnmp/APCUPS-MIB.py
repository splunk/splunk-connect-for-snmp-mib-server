#
# PySNMP MIB module APCUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APCUPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Unsigned32, TimeTicks, NotificationType, IpAddress, Counter32, Counter64, Gauge32, iso, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Unsigned32", "TimeTicks", "NotificationType", "IpAddress", "Counter32", "Counter64", "Gauge32", "iso", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

apc = MibIdentifier((1, 3, 6, 1, 4, 1, 318))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2))
powerChuteDMIAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccuredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tUpsBattery = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: tUpsBattery.setStatus('mandatory')
eUpsBattery = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eUpsBattery.setStatus('mandatory')
a2BatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vUnknown", 1), ("vBatteryNormal", 2), ("vBatteryLow", 3), ("vBatteryDepleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BatteryStatus.setStatus('mandatory')
a2SecondsOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SecondsOnBattery.setStatus('mandatory')
a2EstimatedMinutesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2EstimatedMinutesRemaining.setStatus('mandatory')
a2EstimatedChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 4), DmiGauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2EstimatedChargeRemaining.setStatus('mandatory')
a2BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 5), DmiGauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BatteryVoltage.setStatus('mandatory')
a2BatteryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 6), DmiGauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BatteryCurrent.setStatus('mandatory')
a2TemperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2TemperatureProbeIndex.setStatus('mandatory')
a2FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2FruGroupIndex.setStatus('mandatory')
a2OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2OperationalGroupIndex.setStatus('mandatory')
tTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: tTemperatureProbe.setStatus('mandatory')
eTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTemperatureProbe.setStatus('mandatory')
a3TemperatureProbeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureProbeTableIndex.setStatus('mandatory')
a3TemperatureProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vProcessor", 3), ("vDisk", 4), ("vPeripheralBay", 5), ("vSmbMaster", 6), ("vMotherboard", 7), ("vMemoryModule", 8), ("vProcessorModule", 9), ("vPowerUnit", 10), ("vAdd-inCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureProbeLocation.setStatus('mandatory')
a3TemperatureProbeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureProbeDescription.setStatus('mandatory')
a3TemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureStatus.setStatus('mandatory')
a3TemperatureProbeTemperatureReading = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureProbeTemperatureReading.setStatus('mandatory')
a3MonitoredTemperatureNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3MonitoredTemperatureNominalReading.setStatus('mandatory')
a3MonitoredTemperatureNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3MonitoredTemperatureNormalMaximum.setStatus('mandatory')
a3MonitoredTemperatureNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3MonitoredTemperatureNormalMinimum.setStatus('mandatory')
a3TemperatureProbeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureProbeMaximum.setStatus('mandatory')
a3TemperatureProbeMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3TemperatureProbeMinimum.setStatus('mandatory')
a3TemperatureReadingLowerThreshold_Non_c = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 11), DmiInteger()).setLabel("a3TemperatureReadingLowerThreshold-Non-c").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureReadingLowerThreshold_Non_c.setStatus('mandatory')
a3TemperatureReadingUpperThreshold_Non_c = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 12), DmiInteger()).setLabel("a3TemperatureReadingUpperThreshold-Non-c").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureReadingUpperThreshold_Non_c.setStatus('mandatory')
a3TemperatureReadingLowerThreshold_Criti = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 13), DmiInteger()).setLabel("a3TemperatureReadingLowerThreshold-Criti").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureReadingLowerThreshold_Criti.setStatus('mandatory')
a3TemperatureReadingUpperThreshold_Criti = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 14), DmiInteger()).setLabel("a3TemperatureReadingUpperThreshold-Criti").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureReadingUpperThreshold_Criti.setStatus('mandatory')
a3TemperatureReadingLowerThreshold_Non_r = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 15), DmiInteger()).setLabel("a3TemperatureReadingLowerThreshold-Non-r").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureReadingLowerThreshold_Non_r.setStatus('mandatory')
a3TemperatureReadingUpperThreshold_Non_r = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 16), DmiInteger()).setLabel("a3TemperatureReadingUpperThreshold-Non-r").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureReadingUpperThreshold_Non_r.setStatus('mandatory')
a3TemperatureProbeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureProbeResolution.setStatus('mandatory')
a3TemperatureProbeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureProbeTolerance.setStatus('mandatory')
a3TemperatureProbeAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3TemperatureProbeAccuracy.setStatus('mandatory')
a3FruGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FruGroupIndex.setStatus('mandatory')
a3OperationalGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperationalGroupIndex.setStatus('mandatory')
tOperationalStateTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: tOperationalStateTable.setStatus('mandatory')
eOperationalStateTable = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"), (0, "APCUPS-MIB", "a4OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalStateTable.setStatus('mandatory')
a4OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4OperationalStateInstanceIndex.setStatus('mandatory')
a4DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceGroupIndex.setStatus('mandatory')
a4OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4OperationalStatus.setStatus('mandatory')
a4UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4UsageState.setStatus('mandatory')
a4AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4AvailabilityStatus.setStatus('mandatory')
a4AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4AdministrativeState.setStatus('mandatory')
a4FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FatalErrorCount.setStatus('mandatory')
a4MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4MajorErrorCount.setStatus('mandatory')
a4WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarningErrorCount.setStatus('mandatory')
a4CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4CurrentErrorStatus.setStatus('mandatory')
tDiagnostics = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5), )
if mibBuilder.loadTexts: tDiagnostics.setStatus('mandatory')
eDiagnostics = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"), (0, "APCUPS-MIB", "a5DiagnosticFunctionTableIndex"))
if mibBuilder.loadTexts: eDiagnostics.setStatus('mandatory')
a5DiagnosticFunctionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DiagnosticFunctionTableIndex.setStatus('mandatory')
a5DiagnosticFunctionName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DiagnosticFunctionName.setStatus('mandatory')
a5DiagnosticFunctionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DiagnosticFunctionDescription.setStatus('mandatory')
a5ExclusiveAccessRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5ExclusiveAccessRequired.setStatus('mandatory')
a5PrerequisiteConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoPrerequisites", 3), ("vWrapPlugInstalled", 4), ("vNoMediaInstalled", 5), ("vScratchMediaInstalled", 6), ("vTestMediaInstalled", 7), ("vSystemReferenceDisketteInstalled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5PrerequisiteConditions.setStatus('mandatory')
a5PrerequisiteDiagnosticFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5PrerequisiteDiagnosticFunction.setStatus('mandatory')
tDiagnosticRequestGroup = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 6), )
if mibBuilder.loadTexts: tDiagnosticRequestGroup.setStatus('mandatory')
eDiagnosticRequestGroup = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 6, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eDiagnosticRequestGroup.setStatus('mandatory')
a6DiagnosticFunctionReserveKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a6DiagnosticFunctionReserveKey.setStatus('mandatory')
a6DiagnosticFunctionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 6, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a6DiagnosticFunctionRequest.setStatus('mandatory')
a6DiagnosticFunctionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 6, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DiagnosticFunctionResult.setStatus('mandatory')
tDiagnosticResults = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 7), )
if mibBuilder.loadTexts: tDiagnosticResults.setStatus('mandatory')
eDiagnosticResults = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 7, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"), (0, "APCUPS-MIB", "a7DiagnosticFunctionId"), (0, "APCUPS-MIB", "a7DiagnosticFunctionResult"))
if mibBuilder.loadTexts: eDiagnosticResults.setStatus('mandatory')
a7DiagnosticFunctionId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DiagnosticFunctionId.setStatus('mandatory')
a7DiagnosticFunctionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DiagnosticFunctionResult.setStatus('mandatory')
a7DiagnosticFunctionResultDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 7, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DiagnosticFunctionResultDescription.setStatus('mandatory')
a7FaultIsolatedToThisComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FaultIsolatedToThisComponent.setStatus('mandatory')
tErrorControlGroup = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8), )
if mibBuilder.loadTexts: tErrorControlGroup.setStatus('mandatory')
eErrorControlGroup = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eErrorControlGroup.setStatus('mandatory')
a8Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Selfid.setStatus('mandatory')
a8NumberOfFatalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFatalErrors.setStatus('mandatory')
a8NumberOfMajorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfMajorErrors.setStatus('mandatory')
a8NumberOfWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfWarnings.setStatus('mandatory')
a8ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vOk", 0), ("vWarning", 1), ("vMajor", 2), ("vFatal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8ErrorStatus.setStatus('mandatory')
a8ErrorStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vPost", 0), ("vRuntime", 1), ("vDiagnosticTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8ErrorStatusType.setStatus('mandatory')
a8AlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a8AlarmGeneration.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 99, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1), ).setIndexNames((0, "APCUPS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
pwrchuteEventError = NotificationType((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 9999, 1) + (0,1)).setObjects(("APCUPS-MIB", "a9999ErrorTime"), ("APCUPS-MIB", "a9999ErrorStatus"), ("APCUPS-MIB", "a9999ErrorGroupId"), ("APCUPS-MIB", "a9999ErrorInstanceId"), ("APCUPS-MIB", "a9999ComponentId"), ("APCUPS-MIB", "a9999GroupId"), ("APCUPS-MIB", "a9999InstanceId"), ("APCUPS-MIB", "a9999VendorCode1"), ("APCUPS-MIB", "a9999VendorCode2"), ("APCUPS-MIB", "a9999VendorText"), ("APCUPS-MIB", "a9999ParentGroupId"), ("APCUPS-MIB", "a9999ParentInstanceId"))
mibBuilder.exportSymbols("APCUPS-MIB", a9999GroupId=a9999GroupId, a4AvailabilityStatus=a4AvailabilityStatus, dmtfGroups=dmtfGroups, a8ErrorStatusType=a8ErrorStatusType, a2EstimatedMinutesRemaining=a2EstimatedMinutesRemaining, a9999ErrorInstanceId=a9999ErrorInstanceId, a6DiagnosticFunctionReserveKey=a6DiagnosticFunctionReserveKey, a1Installation=a1Installation, a3TemperatureProbeTemperatureReading=a3TemperatureProbeTemperatureReading, a3TemperatureReadingUpperThreshold_Criti=a3TemperatureReadingUpperThreshold_Criti, a3TemperatureProbeMaximum=a3TemperatureProbeMaximum, a9999ErrorStatus=a9999ErrorStatus, tDiagnosticResults=tDiagnosticResults, a9999ErrorTime=a9999ErrorTime, a5DiagnosticFunctionDescription=a5DiagnosticFunctionDescription, a5PrerequisiteConditions=a5PrerequisiteConditions, DmiCounter=DmiCounter, a3MonitoredTemperatureNormalMinimum=a3MonitoredTemperatureNormalMinimum, tOperationalStateTable=tOperationalStateTable, a9999ParentInstanceId=a9999ParentInstanceId, a8ErrorStatus=a8ErrorStatus, powerChuteDMIAgent=powerChuteDMIAgent, a2FruGroupIndex=a2FruGroupIndex, tUpsBattery=tUpsBattery, a5ExclusiveAccessRequired=a5ExclusiveAccessRequired, a5DiagnosticFunctionTableIndex=a5DiagnosticFunctionTableIndex, a99MibOid=a99MibOid, a6DiagnosticFunctionResult=a6DiagnosticFunctionResult, a3FruGroupIndex=a3FruGroupIndex, tDiagnostics=tDiagnostics, a9999InstanceId=a9999InstanceId, a4OperationalStateInstanceIndex=a4OperationalStateInstanceIndex, eErrorControlGroup=eErrorControlGroup, a6DiagnosticFunctionRequest=a6DiagnosticFunctionRequest, a9999ParentGroupId=a9999ParentGroupId, a2OperationalGroupIndex=a2OperationalGroupIndex, DmiDisplaystring=DmiDisplaystring, tComponentid=tComponentid, a4OperationalStatus=a4OperationalStatus, a3TemperatureReadingUpperThreshold_Non_c=a3TemperatureReadingUpperThreshold_Non_c, a3TemperatureProbeLocation=a3TemperatureProbeLocation, a3TemperatureProbeTolerance=a3TemperatureProbeTolerance, a4MajorErrorCount=a4MajorErrorCount, a3TemperatureProbeAccuracy=a3TemperatureProbeAccuracy, a1Version=a1Version, a3TemperatureProbeDescription=a3TemperatureProbeDescription, a4DeviceGroupIndex=a4DeviceGroupIndex, a9999VendorCode2=a9999VendorCode2, a3MonitoredTemperatureNormalMaximum=a3MonitoredTemperatureNormalMaximum, eOperationalStateTable=eOperationalStateTable, a3TemperatureReadingLowerThreshold_Non_c=a3TemperatureReadingLowerThreshold_Non_c, eDiagnostics=eDiagnostics, a99DisableTrap=a99DisableTrap, a2EstimatedChargeRemaining=a2EstimatedChargeRemaining, eTrapGroup=eTrapGroup, DmiInteger=DmiInteger, eTemperatureProbe=eTemperatureProbe, a3TemperatureProbeResolution=a3TemperatureProbeResolution, a2BatteryCurrent=a2BatteryCurrent, a1Manufacturer=a1Manufacturer, a3OperationalGroupIndex=a3OperationalGroupIndex, a1Verify=a1Verify, a9999ComponentId=a9999ComponentId, a8NumberOfFatalErrors=a8NumberOfFatalErrors, apc=apc, a3TemperatureProbeMinimum=a3TemperatureProbeMinimum, a3TemperatureStatus=a3TemperatureStatus, a7DiagnosticFunctionResult=a7DiagnosticFunctionResult, a1Product=a1Product, tTemperatureProbe=tTemperatureProbe, a7DiagnosticFunctionId=a7DiagnosticFunctionId, eMiftomib=eMiftomib, a4WarningErrorCount=a4WarningErrorCount, a8NumberOfMajorErrors=a8NumberOfMajorErrors, a3TemperatureReadingLowerThreshold_Criti=a3TemperatureReadingLowerThreshold_Criti, a2BatteryVoltage=a2BatteryVoltage, a9999ErrorGroupId=a9999ErrorGroupId, a5PrerequisiteDiagnosticFunction=a5PrerequisiteDiagnosticFunction, pwrchuteEventError=pwrchuteEventError, DmiComponentIndex=DmiComponentIndex, eDiagnosticResults=eDiagnosticResults, a9999VendorCode1=a9999VendorCode1, DmiGauge=DmiGauge, eDiagnosticRequestGroup=eDiagnosticRequestGroup, a8Selfid=a8Selfid, eComponentid=eComponentid, a4FatalErrorCount=a4FatalErrorCount, a8NumberOfWarnings=a8NumberOfWarnings, a3TemperatureProbeTableIndex=a3TemperatureProbeTableIndex, a2TemperatureProbeIndex=a2TemperatureProbeIndex, products=products, tErrorControlGroup=tErrorControlGroup, a4CurrentErrorStatus=a4CurrentErrorStatus, a4UsageState=a4UsageState, a2SecondsOnBattery=a2SecondsOnBattery, a3TemperatureReadingLowerThreshold_Non_r=a3TemperatureReadingLowerThreshold_Non_r, software=software, tMiftomib=tMiftomib, a3MonitoredTemperatureNominalReading=a3MonitoredTemperatureNominalReading, tTrapGroup=tTrapGroup, a2BatteryStatus=a2BatteryStatus, DmiDateX=DmiDateX, a99MibName=a99MibName, a1SerialNumber=a1SerialNumber, eUpsBattery=eUpsBattery, a8AlarmGeneration=a8AlarmGeneration, a4AdministrativeState=a4AdministrativeState, tDiagnosticRequestGroup=tDiagnosticRequestGroup, a3TemperatureReadingUpperThreshold_Non_r=a3TemperatureReadingUpperThreshold_Non_r, a7FaultIsolatedToThisComponent=a7FaultIsolatedToThisComponent, a7DiagnosticFunctionResultDescription=a7DiagnosticFunctionResultDescription, a5DiagnosticFunctionName=a5DiagnosticFunctionName, a9999VendorText=a9999VendorText)
