#
# PySNMP MIB module BayNetworks-BPKG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-BPKG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:25:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, TimeTicks, Counter64, iso, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, MibIdentifier, Unsigned32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "iso", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "MibIdentifier", "Unsigned32", "NotificationType", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfBacPktGenGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBacPktGenGroup")
wfBacPktGenBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 1))
wfBacPktGenDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenDelete.setStatus('mandatory')
wfBacPktGenDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenDisable.setStatus('mandatory')
wfBacPktGenState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenState.setStatus('mandatory')
wfBacPktGenTxTabSum = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenTxTabSum.setStatus('mandatory')
wfBacPktGenRxTabSum = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenRxTabSum.setStatus('mandatory')
wfBacPktGenCxpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 2), )
if mibBuilder.loadTexts: wfBacPktGenCxpTable.setStatus('mandatory')
wfBacPktGenCxpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 2, 1), ).setIndexNames((0, "BayNetworks-BPKG-MIB", "wfBacPktGenCxpId"))
if mibBuilder.loadTexts: wfBacPktGenCxpEntry.setStatus('mandatory')
wfBacPktGenCxpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenCxpDelete.setStatus('mandatory')
wfBacPktGenCxpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenCxpId.setStatus('mandatory')
wfBacPktGenStreamMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenStreamMask.setStatus('mandatory')
wfBacPktGenPktSeed = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 3))
wfBacPktGenSeedPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seedpackets", 1), ("unseedpackets", 2))).clone('unseedpackets')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenSeedPkts.setStatus('mandatory')
wfBacPktGenPktSeedState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("packetseeded", 1), ("packetunseeded", 2), ("operationstarted", 3), ("idle", 4))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenPktSeedState.setStatus('mandatory')
wfBacPktGenCxpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 4))
wfBacPktGenCxpGlobalDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenCxpGlobalDelete.setStatus('mandatory')
wfBacPktGenGlobalStreamMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 4, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenGlobalStreamMask.setStatus('mandatory')
wfBacPktGenGlobalRecActive = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenGlobalRecActive.setStatus('mandatory')
wfBacPktGenCctTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 5), )
if mibBuilder.loadTexts: wfBacPktGenCctTable.setStatus('mandatory')
wfBacPktGenCctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 5, 1), ).setIndexNames((0, "BayNetworks-BPKG-MIB", "wfBacPktGenCctNumber"))
if mibBuilder.loadTexts: wfBacPktGenCctEntry.setStatus('mandatory')
wfBacPktGenCctDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenCctDelete.setStatus('mandatory')
wfBacPktGenCctNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenCctNumber.setStatus('mandatory')
wfBacPktGenCctState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenCctState.setStatus('mandatory')
wfBacPktGenCctName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenCctName.setStatus('mandatory')
wfBacPktGenPktFile = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 6))
wfBacPktGenPktFileAppend = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenPktFileAppend.setStatus('mandatory')
wfBacPktGenPktFileName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktFileName.setStatus('mandatory')
wfBacPktGenPktGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7), )
if mibBuilder.loadTexts: wfBacPktGenPktGrpTable.setStatus('mandatory')
wfBacPktGenPktGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1), ).setIndexNames((0, "BayNetworks-BPKG-MIB", "wfBacPktGenPktGrpNumber"))
if mibBuilder.loadTexts: wfBacPktGenPktGrpEntry.setStatus('mandatory')
wfBacPktGenPktGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenPktGrpNumber.setStatus('mandatory')
wfBacPktGenPktGrpDelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpDelay1.setStatus('mandatory')
wfBacPktGenPktGrpDelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpDelay2.setStatus('mandatory')
wfBacPktGenPktGrpDelay3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpDelay3.setStatus('mandatory')
wfBacPktGenPktGrpDelay4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpDelay4.setStatus('mandatory')
wfBacPktGenPktGrpCount1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpCount1.setStatus('mandatory')
wfBacPktGenPktGrpCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpCount2.setStatus('mandatory')
wfBacPktGenPktGrpCount3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpCount3.setStatus('mandatory')
wfBacPktGenPktGrpCount4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenPktGrpCount4.setStatus('mandatory')
wfBacPktGenPktSeedSum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenPktSeedSum.setStatus('mandatory')
wfBacPktGenPktGrpCxp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenPktGrpCxp.setStatus('mandatory')
wfBacPktGenStrmCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8), )
if mibBuilder.loadTexts: wfBacPktGenStrmCtrlTable.setStatus('mandatory')
wfBacPktGenStrmCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8, 1), ).setIndexNames((0, "BayNetworks-BPKG-MIB", "wfBacPktGenStrmNumber"), (0, "BayNetworks-BPKG-MIB", "wfBacPktGenStrmCxp"))
if mibBuilder.loadTexts: wfBacPktGenStrmCtrlEntry.setStatus('mandatory')
wfBacPktGenStrmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenStrmNumber.setStatus('mandatory')
wfBacPktGenStrmCxp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenStrmCxp.setStatus('mandatory')
wfBacPktGenStrmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("pktgen", 1), ("killed", 2), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenStrmState.setStatus('mandatory')
wfBacPktGenSetStrmPktGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenSetStrmPktGrp.setStatus('mandatory')
wfBacPktGenStrmPktGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 4, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBacPktGenStrmPktGrp.setStatus('mandatory')
mibBuilder.exportSymbols("BayNetworks-BPKG-MIB", wfBacPktGenStrmCxp=wfBacPktGenStrmCxp, wfBacPktGenStrmState=wfBacPktGenStrmState, wfBacPktGenPktGrpTable=wfBacPktGenPktGrpTable, wfBacPktGenPktSeedSum=wfBacPktGenPktSeedSum, wfBacPktGenCxpDelete=wfBacPktGenCxpDelete, wfBacPktGenCxpId=wfBacPktGenCxpId, wfBacPktGenPktSeedState=wfBacPktGenPktSeedState, wfBacPktGenPktGrpCount4=wfBacPktGenPktGrpCount4, wfBacPktGenDisable=wfBacPktGenDisable, wfBacPktGenPktGrpCount3=wfBacPktGenPktGrpCount3, wfBacPktGenPktGrpEntry=wfBacPktGenPktGrpEntry, wfBacPktGenDelete=wfBacPktGenDelete, wfBacPktGenBase=wfBacPktGenBase, wfBacPktGenRxTabSum=wfBacPktGenRxTabSum, wfBacPktGenPktFileAppend=wfBacPktGenPktFileAppend, wfBacPktGenCctEntry=wfBacPktGenCctEntry, wfBacPktGenTxTabSum=wfBacPktGenTxTabSum, wfBacPktGenPktGrpCount2=wfBacPktGenPktGrpCount2, wfBacPktGenStrmPktGrp=wfBacPktGenStrmPktGrp, wfBacPktGenPktGrpCxp=wfBacPktGenPktGrpCxp, wfBacPktGenCxpGlobalDelete=wfBacPktGenCxpGlobalDelete, wfBacPktGenStrmCtrlEntry=wfBacPktGenStrmCtrlEntry, wfBacPktGenPktFileName=wfBacPktGenPktFileName, wfBacPktGenPktSeed=wfBacPktGenPktSeed, wfBacPktGenPktGrpDelay2=wfBacPktGenPktGrpDelay2, wfBacPktGenCctState=wfBacPktGenCctState, wfBacPktGenPktGrpDelay3=wfBacPktGenPktGrpDelay3, wfBacPktGenStrmCtrlTable=wfBacPktGenStrmCtrlTable, wfBacPktGenCctName=wfBacPktGenCctName, wfBacPktGenPktGrpCount1=wfBacPktGenPktGrpCount1, wfBacPktGenStreamMask=wfBacPktGenStreamMask, wfBacPktGenCctDelete=wfBacPktGenCctDelete, wfBacPktGenCxpGlobal=wfBacPktGenCxpGlobal, wfBacPktGenSeedPkts=wfBacPktGenSeedPkts, wfBacPktGenCxpTable=wfBacPktGenCxpTable, wfBacPktGenGlobalStreamMask=wfBacPktGenGlobalStreamMask, wfBacPktGenSetStrmPktGrp=wfBacPktGenSetStrmPktGrp, wfBacPktGenCctTable=wfBacPktGenCctTable, wfBacPktGenPktGrpDelay1=wfBacPktGenPktGrpDelay1, wfBacPktGenPktGrpDelay4=wfBacPktGenPktGrpDelay4, wfBacPktGenGlobalRecActive=wfBacPktGenGlobalRecActive, wfBacPktGenPktGrpNumber=wfBacPktGenPktGrpNumber, wfBacPktGenCxpEntry=wfBacPktGenCxpEntry, wfBacPktGenPktFile=wfBacPktGenPktFile, wfBacPktGenCctNumber=wfBacPktGenCctNumber, wfBacPktGenState=wfBacPktGenState, wfBacPktGenStrmNumber=wfBacPktGenStrmNumber)
