#
# PySNMP MIB module INTEL-CSU-HW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-CSU-HW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, TimeTicks, iso, Gauge32, Integer32, ObjectIdentity, ModuleIdentity, IpAddress, NotificationType, private = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "TimeTicks", "iso", "Gauge32", "Integer32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "NotificationType", "private")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
csudsu = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 36))
csu = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 36, 1))
csuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1), )
if mibBuilder.loadTexts: csuInfoTable.setStatus('mandatory')
csuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1), ).setIndexNames((0, "INTEL-CSU-HW-MIB", "csuInfoLineIndex"))
if mibBuilder.loadTexts: csuInfoEntry.setStatus('mandatory')
csuInfoLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuInfoLineIndex.setStatus('mandatory')
csuAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("csuAlarmNone", 1), ("csuAlarmRED", 2), ("csuAlarmBLUE", 4), ("csuAlarmYELLOW", 8), ("csuAlarmOUTOFFRAMING", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarm.setStatus('mandatory')
csuReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("csuReceiveLevelPlus2ToMinus7Point5", 1), ("csuReceiveLevelMinus7Point5ToMinus15", 2), ("csuReceiveLevelMinus15ToMinus22point5", 3), ("csuReceiveLevelLessThanMinus22Point5", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceiveLevel.setStatus('mandatory')
csuLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("csuLoopbackNone", 1), ("csuLoopbackLocalPayload", 2), ("csuLoopbackLocalLine", 3), ("csuLoopbackLocalChannel", 4), ("csuLoopbackRemotePayload", 5), ("csuLoopbackRemoteLine", 6), ("csuLoopbackRemoteChannel", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLoopbackState.setStatus('mandatory')
csuLossofsynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLossofsynchronization.setStatus('mandatory')
csuChangeofFrameAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChangeofFrameAlignment.setStatus('mandatory')
csuEightZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuEightZeroDetect.setStatus('mandatory')
csuSixteenZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSixteenZeroDetect.setStatus('mandatory')
csuSeverelyErroredFramingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSeverelyErroredFramingEvent.setStatus('mandatory')
csuB8ZSCodeWordDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuB8ZSCodeWordDetect.setStatus('mandatory')
csuFrameBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFrameBitError.setStatus('mandatory')
csuReceivePulseDensityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceivePulseDensityViolation.setStatus('mandatory')
csuTransmitPulseDensityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTransmitPulseDensityViolation.setStatus('mandatory')
csuJitterAttenuatorLimitTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuJitterAttenuatorLimitTrip.setStatus('mandatory')
csuLossofReceiveClock = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLossofReceiveClock.setStatus('mandatory')
csuFramerReceiveCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFramerReceiveCarrierLoss.setStatus('mandatory')
csuLineCodeViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLineCodeViolationCount.setStatus('mandatory')
csuPathCodeViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPathCodeViolationCount.setStatus('mandatory')
csuMultiframesOutofSyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuMultiframesOutofSyncCount.setStatus('mandatory')
csuCRC6errors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCRC6errors.setStatus('mandatory')
csuErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuErrorRate.setStatus('mandatory')
csuLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuLinkStateUp", 1), ("csuLinkStateDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLinkState.setStatus('mandatory')
csuErrorsThisSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuErrorsThisSecond.setStatus('mandatory')
csuPercentEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPercentEFS.setStatus('mandatory')
csuTXChannelPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTXChannelPayload.setStatus('mandatory')
csuRXChannelPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuRXChannelPayload.setStatus('mandatory')
csuDetectedChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDetectedChannelMap.setStatus('mandatory')
csuYellowAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuYellowAlarmCount.setStatus('mandatory')
csuAISDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAISDefects.setStatus('mandatory')
csuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2), )
if mibBuilder.loadTexts: csuConfigTable.setStatus('mandatory')
csuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1), ).setIndexNames((0, "INTEL-CSU-HW-MIB", "csuConfigLineIndex"))
if mibBuilder.loadTexts: csuConfigEntry.setStatus('mandatory')
csuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuConfigLineIndex.setStatus('mandatory')
csuChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csu64kbps", 1), ("csu56kbps", 2), ("csuAutoBandwidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChannelBandwidth.setStatus('mandatory')
csuDataInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuNotInverted", 1), ("csuInverted", 2), ("csuAutoInverted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDataInversion.setStatus('mandatory')
csuDataCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNRZ", 1), ("csuNRZI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDataCoding.setStatus('mandatory')
csuTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNetworkTiming", 1), ("csuLoopTiming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTimingMode.setStatus('mandatory')
csuLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("csu0DB", 1), ("csu75DB", 2), ("csu15DB", 3), ("csu225DB", 4), ("csu0to133", 5), ("csu133to266", 6), ("csu266to399", 7), ("csu399to533", 8), ("csu533to655", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLineBuildOut.setStatus('mandatory')
csuLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuB8ZS", 1), ("csuAMI", 2), ("csuAutoLineCoding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLineCode.setStatus('mandatory')
csuPulseDensityEnforcer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuPDEnforceOFF", 1), ("csuPDEnforceON", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPulseDensityEnforcer.setStatus('mandatory')
csuFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuESF", 1), ("csuD4", 2), ("csuAutoFraming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFramingFormat.setStatus('mandatory')
csuJapaneseCRC6 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuJapanCRCDisable", 1), ("csuJapanCRCEnable", 2), ("csuAutoBandwidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuJapaneseCRC6.setStatus('mandatory')
csuReceiverSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuSensitivityExtended", 1), ("csuSensitivityNormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceiverSensitivity.setStatus('mandatory')
csuFDLidleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuFDLIdleIsFlags", 1), ("csuFdlIdleIsIdles", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFDLidleCode.setStatus('mandatory')
csuANSIPRMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuANSIPRMEnabled", 1), ("csuANSIPRMDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuANSIPRMEnable.setStatus('mandatory')
csuANSIPRMaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuANSIPrm0x38", 1), ("csuANSIPrm0x3a", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuANSIPRMaddress.setStatus('mandatory')
csuATTresponseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuATTResponseEnabled", 1), ("csuATTResponseDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuATTresponseEnable.setStatus('mandatory')
csuATTresponseaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuATTResponseBoth", 1), ("csuATTResponseCSU", 2), ("csuATTResponseDSU", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuATTresponseaddress.setStatus('mandatory')
csuAllocatedChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAllocatedChannelMap.setStatus('mandatory')
csuFracTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3), )
if mibBuilder.loadTexts: csuFracTable.setStatus('mandatory')
csuFracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1), ).setIndexNames((0, "INTEL-CSU-HW-MIB", "csuFracLineIndex"), (0, "INTEL-CSU-HW-MIB", "csuFracNumber"))
if mibBuilder.loadTexts: csuFracEntry.setStatus('mandatory')
csuFracLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracLineIndex.setStatus('mandatory')
csuFracNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracNumber.setStatus('mandatory')
csuFracInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuChannelInUse", 1), ("csuChannelNotInUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracInUse.setStatus('mandatory')
csuFracDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuChannelInUse", 1), ("csuChannelNotInUse", 2), ("csuChannelUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracDetected.setStatus('mandatory')
mibBuilder.exportSymbols("INTEL-CSU-HW-MIB", csuChangeofFrameAlignment=csuChangeofFrameAlignment, csuANSIPRMaddress=csuANSIPRMaddress, csuJapaneseCRC6=csuJapaneseCRC6, csuB8ZSCodeWordDetect=csuB8ZSCodeWordDetect, csuANSIPRMEnable=csuANSIPRMEnable, csuErrorRate=csuErrorRate, csuFracInUse=csuFracInUse, csuTimingMode=csuTimingMode, csuPulseDensityEnforcer=csuPulseDensityEnforcer, csudsu=csudsu, csuAllocatedChannelMap=csuAllocatedChannelMap, csuDataInversion=csuDataInversion, csuFracDetected=csuFracDetected, csuPathCodeViolationCount=csuPathCodeViolationCount, csuErrorsThisSecond=csuErrorsThisSecond, csuFDLidleCode=csuFDLidleCode, csuPercentEFS=csuPercentEFS, csuDataCoding=csuDataCoding, csu=csu, csuDetectedChannelMap=csuDetectedChannelMap, csuChannelBandwidth=csuChannelBandwidth, csuFramerReceiveCarrierLoss=csuFramerReceiveCarrierLoss, csuFrameBitError=csuFrameBitError, csuCRC6errors=csuCRC6errors, csuTransmitPulseDensityViolation=csuTransmitPulseDensityViolation, csuLossofsynchronization=csuLossofsynchronization, csuAlarm=csuAlarm, csuFramingFormat=csuFramingFormat, csuFracNumber=csuFracNumber, csuATTresponseaddress=csuATTresponseaddress, csuLineCodeViolationCount=csuLineCodeViolationCount, csuJitterAttenuatorLimitTrip=csuJitterAttenuatorLimitTrip, csuEightZeroDetect=csuEightZeroDetect, csuSeverelyErroredFramingEvent=csuSeverelyErroredFramingEvent, csuTXChannelPayload=csuTXChannelPayload, csuInfoEntry=csuInfoEntry, csuReceiveLevel=csuReceiveLevel, csuRXChannelPayload=csuRXChannelPayload, csuATTresponseEnable=csuATTresponseEnable, csuLossofReceiveClock=csuLossofReceiveClock, csuAISDefects=csuAISDefects, csuReceivePulseDensityViolation=csuReceivePulseDensityViolation, csuMultiframesOutofSyncCount=csuMultiframesOutofSyncCount, csuConfigEntry=csuConfigEntry, csuLineBuildOut=csuLineBuildOut, csuLineCode=csuLineCode, csuFracEntry=csuFracEntry, csuConfigTable=csuConfigTable, csuYellowAlarmCount=csuYellowAlarmCount, csuLoopbackState=csuLoopbackState, csuSixteenZeroDetect=csuSixteenZeroDetect, csuLinkState=csuLinkState, csuFracTable=csuFracTable, csuInfoLineIndex=csuInfoLineIndex, csuConfigLineIndex=csuConfigLineIndex, csuFracLineIndex=csuFracLineIndex, csuReceiverSensitivity=csuReceiverSensitivity, csuInfoTable=csuInfoTable)
