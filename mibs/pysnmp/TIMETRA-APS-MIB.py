#
# PySNMP MIB module TIMETRA-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-APS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:09:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
apsCommandEntry, apsStatusK1K2Trans, apsStatusCurrent, apsChanConfigEntry, apsConfigEntry, apsStatusK1K2Rcv, apsCommandSwitch, apsStatusSwitchedChannel = mibBuilder.importSymbols("APS-MIB", "apsCommandEntry", "apsStatusK1K2Trans", "apsStatusCurrent", "apsChanConfigEntry", "apsConfigEntry", "apsStatusK1K2Rcv", "apsCommandSwitch", "apsStatusSwitchedChannel")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, Counter32, Unsigned32, ObjectIdentity, IpAddress, MibIdentifier, Integer32, Bits, iso, ModuleIdentity, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter32", "Unsigned32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Integer32", "Bits", "iso", "ModuleIdentity", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRObjs, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRObjs", "tmnxSRConfs")
timetraAPSMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 29))
timetraAPSMIBModule.setRevisions(('1911-02-01 00:00', '1906-03-23 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-10-28 00:00',))
if mibBuilder.loadTexts: timetraAPSMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraAPSMIBModule.setOrganization('Alcatel-Lucent')
tApsMIBObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29))
tApsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29))
tApsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0))
tApsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29))
tApsCommandTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 1), )
if mibBuilder.loadTexts: tApsCommandTable.setStatus('current')
tApsCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 1, 1), )
apsCommandEntry.registerAugmentions(("TIMETRA-APS-MIB", "tApsCommandEntry"))
tApsCommandEntry.setIndexNames(*apsCommandEntry.getIndexNames())
if mibBuilder.loadTexts: tApsCommandEntry.setStatus('current')
tApsExerciseCommandResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("preempted", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tApsExerciseCommandResult.setStatus('current')
tApsChanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 2), )
if mibBuilder.loadTexts: tApsChanStatusTable.setStatus('current')
tApsChanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 2, 1), )
apsChanConfigEntry.registerAugmentions(("TIMETRA-APS-MIB", "tApsChanStatusEntry"))
tApsChanStatusEntry.setIndexNames(*apsChanConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tApsChanStatusEntry.setStatus('current')
tApsChanTxLaisState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("clear", 0), ("momentary", 1), ("persistent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tApsChanTxLaisState.setStatus('current')
tApsMcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 3), )
if mibBuilder.loadTexts: tApsMcConfigTable.setStatus('current')
tApsMcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 3, 1), )
apsConfigEntry.registerAugmentions(("TIMETRA-APS-MIB", "tApsMcConfigEntry"))
tApsMcConfigEntry.setIndexNames(*apsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tApsMcConfigEntry.setStatus('current')
tApsMcNeighborAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 3, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsMcNeighborAddrType.setStatus('current')
tApsMcNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20)).clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsMcNeighborAddr.setStatus('current')
tApsMcAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 650)).clone(10)).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsMcAdvertiseInterval.setStatus('current')
tApsMcHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 650)).clone(30)).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsMcHoldTime.setStatus('current')
tApsMcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 4), )
if mibBuilder.loadTexts: tApsMcStatusTable.setStatus('current')
tApsMcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 4, 1), )
apsConfigEntry.registerAugmentions(("TIMETRA-APS-MIB", "tApsMcStatusEntry"))
tApsMcStatusEntry.setIndexNames(*apsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tApsMcStatusEntry.setStatus('current')
tApsMcApsCtlLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("up", 0), ("dnSignalingFailure", 1), ("dnIncompatibleNbr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tApsMcApsCtlLinkState.setStatus('current')
tApsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 5), )
if mibBuilder.loadTexts: tApsConfigTable.setStatus('current')
tApsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 5, 1), )
apsConfigEntry.registerAugmentions(("TIMETRA-APS-MIB", "tApsConfigEntry"))
tApsConfigEntry.setIndexNames(*apsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tApsConfigEntry.setStatus('current')
tApsProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onePlusOneSignalling", 1), ("onePlusOne", 2))).clone('onePlusOneSignalling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsProtectionType.setStatus('current')
tApsLineSFHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsLineSFHoldTime.setStatus('current')
tApsLineSDHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsLineSDHoldTime.setStatus('current')
tApsRdiAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("suppress", 0), ("circuit", 1))).clone('circuit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsRdiAlarmGeneration.setStatus('current')
tApsGroupCommandTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 6), )
if mibBuilder.loadTexts: tApsGroupCommandTable.setStatus('current')
tApsGroupCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 6, 1), )
apsConfigEntry.registerAugmentions(("TIMETRA-APS-MIB", "tApsGroupCommandEntry"))
tApsGroupCommandEntry.setIndexNames(*apsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tApsGroupCommandEntry.setStatus('current')
tApsAnnexBCommandSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 29, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCmd", 1), ("lockout", 2), ("clearLockout", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tApsAnnexBCommandSwitch.setStatus('current')
tApsModeMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 1)).setObjects(("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: tApsModeMismatchClear.setStatus('current')
tApsChannelMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 2)).setObjects(("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: tApsChannelMismatchClear.setStatus('current')
tApsPSBFClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 3)).setObjects(("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: tApsPSBFClear.setStatus('current')
tApsFEPLFClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 4)).setObjects(("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: tApsFEPLFClear.setStatus('current')
tApsLocalSwitchCommandSet = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 5)).setObjects(("APS-MIB", "apsCommandSwitch"))
if mibBuilder.loadTexts: tApsLocalSwitchCommandSet.setStatus('current')
tApsLocalSwitchCommandClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 6)).setObjects(("APS-MIB", "apsCommandSwitch"))
if mibBuilder.loadTexts: tApsLocalSwitchCommandClear.setStatus('current')
tApsRemoteSwitchCommandSet = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 7)).setObjects(("APS-MIB", "apsCommandSwitch"))
if mibBuilder.loadTexts: tApsRemoteSwitchCommandSet.setStatus('current')
tApsRemoteSwitchCommandClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 8)).setObjects(("APS-MIB", "apsCommandSwitch"))
if mibBuilder.loadTexts: tApsRemoteSwitchCommandClear.setStatus('current')
tApsMcApsCtlLinkStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 9)).setObjects(("TIMETRA-APS-MIB", "tApsMcApsCtlLinkState"))
if mibBuilder.loadTexts: tApsMcApsCtlLinkStateChange.setStatus('current')
tApsChanTxLaisStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 10)).setObjects(("TIMETRA-APS-MIB", "tApsChanTxLaisState"))
if mibBuilder.loadTexts: tApsChanTxLaisStateChange.setStatus('current')
tApsPrimaryChannelChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 29, 0, 11)).setObjects(("APS-MIB", "apsStatusSwitchedChannel"), ("APS-MIB", "apsStatusK1K2Trans"), ("APS-MIB", "apsStatusK1K2Rcv"))
if mibBuilder.loadTexts: tApsPrimaryChannelChange.setStatus('current')
tmnxApsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 1))
tmnxApsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2))
tApsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 1, 1)).setObjects(("TIMETRA-APS-MIB", "tmnxApsSwitchCommand"), ("TIMETRA-APS-MIB", "tmnxApsChanStatus"), ("TIMETRA-APS-MIB", "tmnxApsNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tApsMIBCompliance = tApsMIBCompliance.setStatus('obsolete')
tApsMIBComplianceV4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 1, 2)).setObjects(("TIMETRA-APS-MIB", "tmnxApsSwitchCommand"), ("TIMETRA-APS-MIB", "tmnxApsChanStatus"), ("TIMETRA-APS-MIB", "tmnxApsMcGroup"), ("TIMETRA-APS-MIB", "tmnxApsNotificationsV4v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tApsMIBComplianceV4v0 = tApsMIBComplianceV4v0.setStatus('obsolete')
tApsMIBComplianceV7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 1, 3)).setObjects(("TIMETRA-APS-MIB", "tmnxApsSwitchCommand"), ("TIMETRA-APS-MIB", "tmnxApsChanStatus"), ("TIMETRA-APS-MIB", "tmnxApsMcGroup"), ("TIMETRA-APS-MIB", "tmnxApsNotificationsV4v0"), ("TIMETRA-APS-MIB", "tmnxApsConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tApsMIBComplianceV7v0 = tApsMIBComplianceV7v0.setStatus('obsolete')
tApsMIBComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 1, 4)).setObjects(("TIMETRA-APS-MIB", "tmnxApsSwitchCommand"), ("TIMETRA-APS-MIB", "tmnxApsChanStatus"), ("TIMETRA-APS-MIB", "tmnxApsMcGroup"), ("TIMETRA-APS-MIB", "tmnxApsNotificationsV4v0"), ("TIMETRA-APS-MIB", "tmnxApsConfigGroup"), ("TIMETRA-APS-MIB", "tmnxApsConfigV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tApsMIBComplianceV8v0 = tApsMIBComplianceV8v0.setStatus('obsolete')
tApsMIBComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 1, 5)).setObjects(("TIMETRA-APS-MIB", "tmnxApsSwitchCommand"), ("TIMETRA-APS-MIB", "tmnxApsChanStatus"), ("TIMETRA-APS-MIB", "tmnxApsMcGroup"), ("TIMETRA-APS-MIB", "tmnxApsNotificationsV4v0"), ("TIMETRA-APS-MIB", "tmnxApsConfigGroup"), ("TIMETRA-APS-MIB", "tmnxApsConfigV8v0Group"), ("TIMETRA-APS-MIB", "tmnxApsGroupCommandV9v0Group"), ("TIMETRA-APS-MIB", "tmnxApsNotificationsV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tApsMIBComplianceV9v0 = tApsMIBComplianceV9v0.setStatus('current')
tmnxApsSwitchCommand = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 1)).setObjects(("TIMETRA-APS-MIB", "tApsExerciseCommandResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsSwitchCommand = tmnxApsSwitchCommand.setStatus('current')
tmnxApsChanStatus = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 2)).setObjects(("TIMETRA-APS-MIB", "tApsChanTxLaisState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsChanStatus = tmnxApsChanStatus.setStatus('current')
tmnxApsNotifications = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 3)).setObjects(("TIMETRA-APS-MIB", "tApsModeMismatchClear"), ("TIMETRA-APS-MIB", "tApsChannelMismatchClear"), ("TIMETRA-APS-MIB", "tApsPSBFClear"), ("TIMETRA-APS-MIB", "tApsFEPLFClear"), ("TIMETRA-APS-MIB", "tApsLocalSwitchCommandSet"), ("TIMETRA-APS-MIB", "tApsLocalSwitchCommandClear"), ("TIMETRA-APS-MIB", "tApsRemoteSwitchCommandSet"), ("TIMETRA-APS-MIB", "tApsRemoteSwitchCommandClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsNotifications = tmnxApsNotifications.setStatus('obsolete')
tmnxApsNotificationsV4v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 4)).setObjects(("TIMETRA-APS-MIB", "tApsModeMismatchClear"), ("TIMETRA-APS-MIB", "tApsChannelMismatchClear"), ("TIMETRA-APS-MIB", "tApsPSBFClear"), ("TIMETRA-APS-MIB", "tApsFEPLFClear"), ("TIMETRA-APS-MIB", "tApsLocalSwitchCommandSet"), ("TIMETRA-APS-MIB", "tApsLocalSwitchCommandClear"), ("TIMETRA-APS-MIB", "tApsRemoteSwitchCommandSet"), ("TIMETRA-APS-MIB", "tApsRemoteSwitchCommandClear"), ("TIMETRA-APS-MIB", "tApsMcApsCtlLinkStateChange"), ("TIMETRA-APS-MIB", "tApsChanTxLaisStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsNotificationsV4v0 = tmnxApsNotificationsV4v0.setStatus('current')
tmnxApsMcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 5)).setObjects(("TIMETRA-APS-MIB", "tApsMcNeighborAddrType"), ("TIMETRA-APS-MIB", "tApsMcNeighborAddr"), ("TIMETRA-APS-MIB", "tApsMcAdvertiseInterval"), ("TIMETRA-APS-MIB", "tApsMcHoldTime"), ("TIMETRA-APS-MIB", "tApsMcApsCtlLinkState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsMcGroup = tmnxApsMcGroup.setStatus('current')
tmnxApsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 6)).setObjects(("TIMETRA-APS-MIB", "tApsProtectionType"), ("TIMETRA-APS-MIB", "tApsLineSFHoldTime"), ("TIMETRA-APS-MIB", "tApsLineSDHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsConfigGroup = tmnxApsConfigGroup.setStatus('current')
tmnxApsConfigV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 7)).setObjects(("TIMETRA-APS-MIB", "tApsRdiAlarmGeneration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsConfigV8v0Group = tmnxApsConfigV8v0Group.setStatus('current')
tmnxApsGroupCommandV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 8)).setObjects(("TIMETRA-APS-MIB", "tApsAnnexBCommandSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsGroupCommandV9v0Group = tmnxApsGroupCommandV9v0Group.setStatus('current')
tmnxApsNotificationsV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 29, 2, 9)).setObjects(("TIMETRA-APS-MIB", "tApsPrimaryChannelChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApsNotificationsV9v0Group = tmnxApsNotificationsV9v0Group.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-APS-MIB", tApsChanStatusEntry=tApsChanStatusEntry, tApsPrimaryChannelChange=tApsPrimaryChannelChange, tApsRemoteSwitchCommandSet=tApsRemoteSwitchCommandSet, tmnxApsMcGroup=tmnxApsMcGroup, tApsAnnexBCommandSwitch=tApsAnnexBCommandSwitch, tApsLineSDHoldTime=tApsLineSDHoldTime, PYSNMP_MODULE_ID=timetraAPSMIBModule, tApsMcConfigEntry=tApsMcConfigEntry, tApsMIBCompliance=tApsMIBCompliance, tmnxApsNotificationsV9v0Group=tmnxApsNotificationsV9v0Group, tApsGroupCommandTable=tApsGroupCommandTable, tApsMcHoldTime=tApsMcHoldTime, tmnxApsSwitchCommand=tmnxApsSwitchCommand, tApsChanStatusTable=tApsChanStatusTable, tApsMIBConformance=tApsMIBConformance, tApsMcAdvertiseInterval=tApsMcAdvertiseInterval, tApsNotificationsPrefix=tApsNotificationsPrefix, tApsMcStatusTable=tApsMcStatusTable, tApsProtectionType=tApsProtectionType, tApsMcNeighborAddr=tApsMcNeighborAddr, tApsLineSFHoldTime=tApsLineSFHoldTime, tApsPSBFClear=tApsPSBFClear, tApsFEPLFClear=tApsFEPLFClear, tApsMIBComplianceV4v0=tApsMIBComplianceV4v0, tApsMcStatusEntry=tApsMcStatusEntry, tApsNotifications=tApsNotifications, tApsMIBComplianceV9v0=tApsMIBComplianceV9v0, tApsExerciseCommandResult=tApsExerciseCommandResult, tApsGroupCommandEntry=tApsGroupCommandEntry, tmnxApsGroupCommandV9v0Group=tmnxApsGroupCommandV9v0Group, tApsRdiAlarmGeneration=tApsRdiAlarmGeneration, tApsMcApsCtlLinkStateChange=tApsMcApsCtlLinkStateChange, tApsMIBComplianceV7v0=tApsMIBComplianceV7v0, tApsConfigTable=tApsConfigTable, tApsMIBComplianceV8v0=tApsMIBComplianceV8v0, tmnxApsMIBGroups=tmnxApsMIBGroups, tApsChannelMismatchClear=tApsChannelMismatchClear, tApsMcConfigTable=tApsMcConfigTable, tmnxApsNotifications=tmnxApsNotifications, tApsRemoteSwitchCommandClear=tApsRemoteSwitchCommandClear, tApsLocalSwitchCommandClear=tApsLocalSwitchCommandClear, tmnxApsNotificationsV4v0=tmnxApsNotificationsV4v0, timetraAPSMIBModule=timetraAPSMIBModule, tmnxApsConfigGroup=tmnxApsConfigGroup, tApsLocalSwitchCommandSet=tApsLocalSwitchCommandSet, tmnxApsConfigV8v0Group=tmnxApsConfigV8v0Group, tmnxApsChanStatus=tmnxApsChanStatus, tApsMcApsCtlLinkState=tApsMcApsCtlLinkState, tApsModeMismatchClear=tApsModeMismatchClear, tApsMcNeighborAddrType=tApsMcNeighborAddrType, tApsCommandEntry=tApsCommandEntry, tApsConfigEntry=tApsConfigEntry, tApsChanTxLaisState=tApsChanTxLaisState, tmnxApsMIBCompliances=tmnxApsMIBCompliances, tApsChanTxLaisStateChange=tApsChanTxLaisStateChange, tApsMIBObjs=tApsMIBObjs, tApsCommandTable=tApsCommandTable)
