#
# PySNMP MIB module HH3C-TE-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-TE-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:17:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
MplsTunnelInstanceIndex, MplsTunnelIndex, MplsExtendedTunnelId, MplsLabel = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelInstanceIndex", "MplsTunnelIndex", "MplsExtendedTunnelId", "MplsLabel")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, TimeTicks, ObjectIdentity, Unsigned32, ModuleIdentity, Counter32, Gauge32, MibIdentifier, NotificationType, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter32", "Gauge32", "MibIdentifier", "NotificationType", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso")
TextualConvention, RowPointer, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowPointer", "DisplayString")
hh3cTeTunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 115))
if mibBuilder.loadTexts: hh3cTeTunnel.setLastUpdated('201103240948Z')
if mibBuilder.loadTexts: hh3cTeTunnel.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cTeTunnelScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 1))
hh3cTeTunnelMaxTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 115, 1, 1), MplsTunnelIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelMaxTunnelIndex.setStatus('current')
hh3cTeTunnelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2))
hh3cTeTunnelStaticCrlspTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1), )
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspTable.setStatus('current')
hh3cTeTunnelStaticCrlspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1), ).setIndexNames((0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspInLabel"))
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspEntry.setStatus('current')
hh3cTeTunnelStaticCrlspInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 1), MplsLabel())
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspInLabel.setStatus('current')
hh3cTeTunnelStaticCrlspName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspName.setStatus('current')
hh3cTeTunnelStaticCrlspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspStatus.setStatus('current')
hh3cTeTunnelStaticCrlspRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transit", 1), ("tail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspRole.setStatus('current')
hh3cTeTunnelStaticCrlspXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspXCPointer.setStatus('current')
hh3cTeTunnelCoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2), )
if mibBuilder.loadTexts: hh3cTeTunnelCoTable.setStatus('current')
hh3cTeTunnelCoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1), ).setIndexNames((0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoIndex"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoLspInstance"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoIngressLSRId"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoEgressLSRId"))
if mibBuilder.loadTexts: hh3cTeTunnelCoEntry.setStatus('current')
hh3cTeTunnelCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: hh3cTeTunnelCoIndex.setStatus('current')
hh3cTeTunnelCoLspInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: hh3cTeTunnelCoLspInstance.setStatus('current')
hh3cTeTunnelCoIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelCoIngressLSRId.setStatus('current')
hh3cTeTunnelCoEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 4), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelCoEgressLSRId.setStatus('current')
hh3cTeTunnelCoBiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coroutedActive", 1), ("coroutedPassive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelCoBiMode.setStatus('current')
hh3cTeTunnelCoReverseLspInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 6), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelCoReverseLspInstance.setStatus('current')
hh3cTeTunnelCoReverseLspXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelCoReverseLspXCPointer.setStatus('current')
hh3cTeTunnelPsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3), )
if mibBuilder.loadTexts: hh3cTeTunnelPsTable.setStatus('current')
hh3cTeTunnelPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1), ).setIndexNames((0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsIndex"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsIngressLSRId"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsEgressLSRId"))
if mibBuilder.loadTexts: hh3cTeTunnelPsEntry.setStatus('current')
hh3cTeTunnelPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: hh3cTeTunnelPsIndex.setStatus('current')
hh3cTeTunnelPsIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 2), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelPsIngressLSRId.setStatus('current')
hh3cTeTunnelPsEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelPsEgressLSRId.setStatus('current')
hh3cTeTunnelPsProtectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 4), MplsTunnelIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectIndex.setStatus('current')
hh3cTeTunnelPsProtectIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 5), MplsExtendedTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectIngressLSRId.setStatus('current')
hh3cTeTunnelPsProtectEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 6), MplsExtendedTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectEgressLSRId.setStatus('current')
hh3cTeTunnelPsProtectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneToOne", 1), ("onePlusOne", 2))).clone('oneToOne')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectType.setStatus('current')
hh3cTeTunnelPsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("noRevertive", 2))).clone('revertive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsRevertiveMode.setStatus('current')
hh3cTeTunnelPsWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(24)).setUnits('30 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsWtrTime.setStatus('current')
hh3cTeTunnelPsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('500ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsHoldOffTime.setStatus('current')
hh3cTeTunnelPsSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2))).clone('uniDirectional')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchMode.setStatus('current')
hh3cTeTunnelPsWorkPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("noDefect", 2), ("inDefect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsWorkPathStatus.setStatus('current')
hh3cTeTunnelPsProtectPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("noDefect", 2), ("inDefect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectPathStatus.setStatus('current')
hh3cTeTunnelPsSwitchResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("workPath", 1), ("protectPath", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchResult.setStatus('current')
hh3cTeTunnelNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3))
hh3cTeTunnelNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3, 0))
hh3cTeTunnelPsSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3, 0, 1)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWorkPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectPathStatus"))
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchWtoP.setStatus('current')
hh3cTeTunnelPsSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3, 0, 2)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWorkPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectPathStatus"))
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchPtoW.setStatus('current')
hh3cTeTunnelConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4))
hh3cTeTunnelCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 1))
hh3cTeTunnelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 1, 1)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelNotificationsGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelScalarsGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCorouteGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelCompliance = hh3cTeTunnelCompliance.setStatus('current')
hh3cTeTunnelGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2))
hh3cTeTunnelNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 1)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchPtoW"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchWtoP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelNotificationsGroup = hh3cTeTunnelNotificationsGroup.setStatus('current')
hh3cTeTunnelScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 2)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelMaxTunnelIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelScalarsGroup = hh3cTeTunnelScalarsGroup.setStatus('current')
hh3cTeTunnelStaticCrlspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 3)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspName"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspRole"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspXCPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelStaticCrlspGroup = hh3cTeTunnelStaticCrlspGroup.setStatus('current')
hh3cTeTunnelCorouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 4)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoBiMode"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoReverseLspInstance"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoReverseLspXCPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelCorouteGroup = hh3cTeTunnelCorouteGroup.setStatus('current')
hh3cTeTunnelPsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 5)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectIndex"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectIngressLSRId"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectEgressLSRId"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectType"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsRevertiveMode"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWtrTime"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsHoldOffTime"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchMode"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWorkPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelPsGroup = hh3cTeTunnelPsGroup.setStatus('current')
mibBuilder.exportSymbols("HH3C-TE-TUNNEL-MIB", hh3cTeTunnelStaticCrlspRole=hh3cTeTunnelStaticCrlspRole, hh3cTeTunnelMaxTunnelIndex=hh3cTeTunnelMaxTunnelIndex, hh3cTeTunnelPsIngressLSRId=hh3cTeTunnelPsIngressLSRId, hh3cTeTunnelPsProtectIngressLSRId=hh3cTeTunnelPsProtectIngressLSRId, hh3cTeTunnelNotificationsGroup=hh3cTeTunnelNotificationsGroup, hh3cTeTunnelCoReverseLspInstance=hh3cTeTunnelCoReverseLspInstance, hh3cTeTunnelPsSwitchWtoP=hh3cTeTunnelPsSwitchWtoP, hh3cTeTunnelCoLspInstance=hh3cTeTunnelCoLspInstance, hh3cTeTunnelPsGroup=hh3cTeTunnelPsGroup, hh3cTeTunnelPsProtectType=hh3cTeTunnelPsProtectType, hh3cTeTunnelPsIndex=hh3cTeTunnelPsIndex, hh3cTeTunnelNotificationsPrefix=hh3cTeTunnelNotificationsPrefix, hh3cTeTunnelPsWtrTime=hh3cTeTunnelPsWtrTime, hh3cTeTunnelStaticCrlspXCPointer=hh3cTeTunnelStaticCrlspXCPointer, hh3cTeTunnelCoReverseLspXCPointer=hh3cTeTunnelCoReverseLspXCPointer, hh3cTeTunnelPsHoldOffTime=hh3cTeTunnelPsHoldOffTime, hh3cTeTunnelPsSwitchMode=hh3cTeTunnelPsSwitchMode, hh3cTeTunnelGroups=hh3cTeTunnelGroups, hh3cTeTunnelPsTable=hh3cTeTunnelPsTable, hh3cTeTunnelCoIndex=hh3cTeTunnelCoIndex, hh3cTeTunnelNotifications=hh3cTeTunnelNotifications, hh3cTeTunnelObjects=hh3cTeTunnelObjects, hh3cTeTunnelCoTable=hh3cTeTunnelCoTable, hh3cTeTunnelStaticCrlspInLabel=hh3cTeTunnelStaticCrlspInLabel, hh3cTeTunnelStaticCrlspGroup=hh3cTeTunnelStaticCrlspGroup, hh3cTeTunnelScalarsGroup=hh3cTeTunnelScalarsGroup, hh3cTeTunnelPsRevertiveMode=hh3cTeTunnelPsRevertiveMode, hh3cTeTunnelCorouteGroup=hh3cTeTunnelCorouteGroup, hh3cTeTunnelCompliances=hh3cTeTunnelCompliances, PYSNMP_MODULE_ID=hh3cTeTunnel, hh3cTeTunnelPsProtectIndex=hh3cTeTunnelPsProtectIndex, hh3cTeTunnelPsSwitchResult=hh3cTeTunnelPsSwitchResult, hh3cTeTunnelCompliance=hh3cTeTunnelCompliance, hh3cTeTunnelScalars=hh3cTeTunnelScalars, hh3cTeTunnelStaticCrlspEntry=hh3cTeTunnelStaticCrlspEntry, hh3cTeTunnelStaticCrlspName=hh3cTeTunnelStaticCrlspName, hh3cTeTunnelCoIngressLSRId=hh3cTeTunnelCoIngressLSRId, hh3cTeTunnelCoEgressLSRId=hh3cTeTunnelCoEgressLSRId, hh3cTeTunnelCoBiMode=hh3cTeTunnelCoBiMode, hh3cTeTunnelConformance=hh3cTeTunnelConformance, hh3cTeTunnelPsProtectPathStatus=hh3cTeTunnelPsProtectPathStatus, hh3cTeTunnelStaticCrlspStatus=hh3cTeTunnelStaticCrlspStatus, hh3cTeTunnelCoEntry=hh3cTeTunnelCoEntry, hh3cTeTunnelPsEntry=hh3cTeTunnelPsEntry, hh3cTeTunnelPsSwitchPtoW=hh3cTeTunnelPsSwitchPtoW, hh3cTeTunnel=hh3cTeTunnel, hh3cTeTunnelStaticCrlspTable=hh3cTeTunnelStaticCrlspTable, hh3cTeTunnelPsWorkPathStatus=hh3cTeTunnelPsWorkPathStatus, hh3cTeTunnelPsEgressLSRId=hh3cTeTunnelPsEgressLSRId, hh3cTeTunnelPsProtectEgressLSRId=hh3cTeTunnelPsProtectEgressLSRId)
