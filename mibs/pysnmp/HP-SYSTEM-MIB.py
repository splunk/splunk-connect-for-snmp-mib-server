#
# PySNMP MIB module HP-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hpProcurveCommon, = mibBuilder.importSymbols("HP-BASE-MIB", "hpProcurveCommon")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, Bits, Counter32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Counter64, Integer32, iso, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Bits", "Counter32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Counter64", "Integer32", "iso", "Unsigned32", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
hpProcurveSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1))
hpProcurveSystem.setRevisions(('2005-02-01 14:55',))
if mibBuilder.loadTexts: hpProcurveSystem.setLastUpdated('200502011455Z')
if mibBuilder.loadTexts: hpProcurveSystem.setOrganization('Hewlett Packard Company, ProCurve Networking Business')
hpProcurveSysMib = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1))
hpSystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2))
hpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1))
hpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 2))
hpNotificationsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3))
hpProductDescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductDescription.setStatus('current')
hpProductHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductHWVersion.setStatus('current')
hpProductSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductSWVersion.setStatus('current')
hpProductSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductSerialNumber.setStatus('current')
hpProductLastChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductLastChange.setStatus('current')
hpCpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpCpuTemperature.setStatus('current')
hpPowerSupplyTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPowerSupplyTemperature.setStatus('deprecated')
hpChassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpChassisTemperature.setStatus('current')
hpFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9), )
if mibBuilder.loadTexts: hpFanStatusTable.setStatus('current')
hpFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1), ).setIndexNames((0, "HP-SYSTEM-MIB", "hpFanNumber"))
if mibBuilder.loadTexts: hpFanStatusEntry.setStatus('current')
hpFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpu", 1), ("power", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFanNumber.setStatus('current')
hpFanOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFanOperational.setStatus('current')
hpFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFanSpeed.setStatus('current')
hpName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpName.setStatus('current')
hpSystemID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemID.setStatus('current')
hpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("primary", 4), ("secondary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpState.setStatus('current')
hpDistributionType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("rightsPush", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDistributionType.setStatus('current')
hpDistributionStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("succeeded", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDistributionStatus.setStatus('current')
hpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpIpAddress.setStatus('current')
hpPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpPeerIpAddress.setStatus('current')
hpTechSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpTechSupportEnabled.setStatus('current')
hpFailedAdminIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFailedAdminIpAddress.setStatus('current')
hpNumAccessControllers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpNumAccessControllers.setStatus('current')
hpNumClients = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpNumClients.setStatus('current')
hpFailoverNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpFailoverNotificationEnabled.setStatus('current')
hpDistributionNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpDistributionNotificationEnabled.setStatus('current')
hpAdminAuthFailureNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpAdminAuthFailureNotificationEnabled.setStatus('current')
hpSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0))
fanDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 1)).setObjects(("HP-SYSTEM-MIB", "hpFanNumber"))
if mibBuilder.loadTexts: fanDown.setStatus('current')
fanUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 2)).setObjects(("HP-SYSTEM-MIB", "hpFanNumber"))
if mibBuilder.loadTexts: fanUp.setStatus('current')
temperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 3)).setObjects(("HP-SYSTEM-MIB", "hpCpuTemperature"))
if mibBuilder.loadTexts: temperatureAlarm.setStatus('current')
hpFailover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 4)).setObjects(("HP-SYSTEM-MIB", "hpIpAddress"))
if mibBuilder.loadTexts: hpFailover.setStatus('current')
hpDistributionEvent = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 5)).setObjects(("HP-SYSTEM-MIB", "hpDistributionType"), ("HP-SYSTEM-MIB", "hpDistributionStatus"))
if mibBuilder.loadTexts: hpDistributionEvent.setStatus('current')
hpAdminAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 6)).setObjects(("HP-SYSTEM-MIB", "hpFailedAdminIpAddress"))
if mibBuilder.loadTexts: hpAdminAuthFailure.setStatus('current')
hpSystemMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3))
hpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 1))
hpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2))
hpSystemMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 1, 1)).setObjects(("HP-SYSTEM-MIB", "hpSystemGroup"), ("HP-SYSTEM-MIB", "hpConfigGroup"), ("HP-SYSTEM-MIB", "hpEnvGroup"), ("HP-SYSTEM-MIB", "hpStatusGroup"), ("HP-SYSTEM-MIB", "hpNotificationsConfigGroup"), ("HP-SYSTEM-MIB", "hpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSystemMIBCompliance1 = hpSystemMIBCompliance1.setStatus('current')
hpSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 1)).setObjects(("HP-SYSTEM-MIB", "hpProductDescription"), ("HP-SYSTEM-MIB", "hpProductHWVersion"), ("HP-SYSTEM-MIB", "hpProductSWVersion"), ("HP-SYSTEM-MIB", "hpProductSerialNumber"), ("HP-SYSTEM-MIB", "hpProductLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSystemGroup = hpSystemGroup.setStatus('current')
hpEnvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 2)).setObjects(("HP-SYSTEM-MIB", "hpCpuTemperature"), ("HP-SYSTEM-MIB", "hpPowerSupplyTemperature"), ("HP-SYSTEM-MIB", "hpChassisTemperature"), ("HP-SYSTEM-MIB", "hpFanNumber"), ("HP-SYSTEM-MIB", "hpFanOperational"), ("HP-SYSTEM-MIB", "hpFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpEnvGroup = hpEnvGroup.setStatus('current')
hpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 3)).setObjects(("HP-SYSTEM-MIB", "hpName"), ("HP-SYSTEM-MIB", "hpSystemID"), ("HP-SYSTEM-MIB", "hpState"), ("HP-SYSTEM-MIB", "hpIpAddress"), ("HP-SYSTEM-MIB", "hpPeerIpAddress"), ("HP-SYSTEM-MIB", "hpTechSupportEnabled"), ("HP-SYSTEM-MIB", "hpDistributionType"), ("HP-SYSTEM-MIB", "hpDistributionStatus"), ("HP-SYSTEM-MIB", "hpFailedAdminIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpConfigGroup = hpConfigGroup.setStatus('current')
hpStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 4)).setObjects(("HP-SYSTEM-MIB", "hpNumAccessControllers"), ("HP-SYSTEM-MIB", "hpNumClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStatusGroup = hpStatusGroup.setStatus('current')
hpNotificationsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 5)).setObjects(("HP-SYSTEM-MIB", "hpFailoverNotificationEnabled"), ("HP-SYSTEM-MIB", "hpDistributionNotificationEnabled"), ("HP-SYSTEM-MIB", "hpAdminAuthFailureNotificationEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpNotificationsConfigGroup = hpNotificationsConfigGroup.setStatus('current')
hpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 6)).setObjects(("HP-SYSTEM-MIB", "fanDown"), ("HP-SYSTEM-MIB", "fanUp"), ("HP-SYSTEM-MIB", "temperatureAlarm"), ("HP-SYSTEM-MIB", "hpFailover"), ("HP-SYSTEM-MIB", "hpDistributionEvent"), ("HP-SYSTEM-MIB", "hpAdminAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpNotificationsGroup = hpNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("HP-SYSTEM-MIB", hpProcurveSystem=hpProcurveSystem, hpState=hpState, hpProductSerialNumber=hpProductSerialNumber, PYSNMP_MODULE_ID=hpProcurveSystem, hpSystemTraps=hpSystemTraps, hpNotificationsGroup=hpNotificationsGroup, hpProductSWVersion=hpProductSWVersion, hpSystemID=hpSystemID, hpSystemMIBCompliance1=hpSystemMIBCompliance1, hpFanOperational=hpFanOperational, hpEnvGroup=hpEnvGroup, hpProductHWVersion=hpProductHWVersion, hpProcurveSysMib=hpProcurveSysMib, hpCpuTemperature=hpCpuTemperature, hpSystemMIBObjects=hpSystemMIBObjects, hpTechSupportEnabled=hpTechSupportEnabled, hpFanSpeed=hpFanSpeed, hpSystemGroup=hpSystemGroup, hpSystemMIBConformance=hpSystemMIBConformance, hpFailoverNotificationEnabled=hpFailoverNotificationEnabled, hpConfigGroup=hpConfigGroup, hpNumAccessControllers=hpNumAccessControllers, hpIpAddress=hpIpAddress, hpFanNumber=hpFanNumber, hpDistributionStatus=hpDistributionStatus, hpStatus=hpStatus, hpDistributionNotificationEnabled=hpDistributionNotificationEnabled, hpDistributionEvent=hpDistributionEvent, hpFailedAdminIpAddress=hpFailedAdminIpAddress, hpPowerSupplyTemperature=hpPowerSupplyTemperature, hpNumClients=hpNumClients, hpPeerIpAddress=hpPeerIpAddress, hpAdminAuthFailure=hpAdminAuthFailure, hpFanStatusEntry=hpFanStatusEntry, hpDistributionType=hpDistributionType, hpStatusGroup=hpStatusGroup, hpAdminAuthFailureNotificationEnabled=hpAdminAuthFailureNotificationEnabled, hpNotificationsConfigGroup=hpNotificationsConfigGroup, fanDown=fanDown, hpProductDescription=hpProductDescription, hpConfig=hpConfig, hpProductLastChange=hpProductLastChange, temperatureAlarm=temperatureAlarm, hpCompliances=hpCompliances, fanUp=fanUp, hpChassisTemperature=hpChassisTemperature, hpGroups=hpGroups, hpFanStatusTable=hpFanStatusTable, hpFailover=hpFailover, hpNotificationsConfig=hpNotificationsConfig, hpName=hpName)
