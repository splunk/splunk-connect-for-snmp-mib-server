#
# PySNMP MIB module ASANTE-AH1012-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASANTE-AH1012-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, private, Counter64, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, NotificationType, ModuleIdentity, ObjectIdentity, MibIdentifier, IpAddress, enterprises, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "private", "Counter64", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "NotificationType", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "IpAddress", "enterprises", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
asante = MibIdentifier((1, 3, 6, 1, 4, 1, 298))
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

products = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1))
adaptCard = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 2))
concentrator = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3))
agentSw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 1))
agentFw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 2))
agentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 3))
agentNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5))
ipagentProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1))
concChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 1))
concConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 2))
concStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3))
concStateCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 4))
concNodeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 5))
concAlarmMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 6))
concBasicGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1))
eSmartHubConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1))
eStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1))
eStateCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1))
eGlobalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1))
agentNetProtoStkCapMap = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetProtoStkCapMap.setStatus('mandatory')
agentRunTimeImageMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMajorVer.setStatus('mandatory')
agentRunTimeImageMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMinorVer.setStatus('mandatory')
agentImageLoadMode = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("localBoot", 2), ("netBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentImageLoadMode.setStatus('mandatory')
agentRemoteBootInfo = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("eepromBootInfo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRemoteBootInfo.setStatus('mandatory')
agentRemoteBootProtocol = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bootp-tftp", 2), ("tftp-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootProtocol.setStatus('mandatory')
agentRemoteBootFile = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootFile.setStatus('mandatory')
agentOutBandDialString = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandDialString.setStatus('mandatory')
agentOutBandBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b1200", 2), ("b2400", 3), ("b4800", 4), ("b9600", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandBaudRate.setStatus('mandatory')
agentReset = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("not-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReset.setStatus('mandatory')
agentHwReVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwReVer.setStatus('mandatory')
agentHwVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwVer.setStatus('mandatory')
agentFwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMajorVer.setStatus('mandatory')
agentFwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMinorVer.setStatus('mandatory')
ipagentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpAddr.setStatus('mandatory')
ipagentIpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpNetMask.setStatus('mandatory')
ipagentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentDefaultGateway.setStatus('mandatory')
ipagentBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentBootServerAddr.setStatus('mandatory')
ipagentUnAuthIP = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthIP.setStatus('mandatory')
ipagentUnAuthComm = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthComm.setStatus('mandatory')
ipagentTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2), )
if mibBuilder.loadTexts: ipagentTrapRcvrTable.setStatus('mandatory')
ipagentTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ipagentTrapRcvrIpAddr"))
if mibBuilder.loadTexts: ipagentTrapRcvrEntry.setStatus('mandatory')
ipagentTrapRcvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentTrapRcvrIpAddr.setStatus('mandatory')
ipagentTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrStatus.setStatus('mandatory')
ipagentTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrComm.setStatus('mandatory')
concChassisType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("aH1012", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisType.setStatus('mandatory')
concChassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("no-backplane", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisBkplType.setStatus('mandatory')
concChassisBkplRev = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisBkplRev.setStatus('mandatory')
concChassisPsTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: concChassisPsTable.setStatus('mandatory')
concChassisPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "concChassisPsIndex"))
if mibBuilder.loadTexts: concChassisPsEntry.setStatus('mandatory')
concChassisPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisPsIndex.setStatus('mandatory')
concChassisPsModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisPsModuleType.setStatus('mandatory')
concChassisPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("good", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisPsStatus.setStatus('mandatory')
concChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("no-fan", 2), ("good", 3), ("bad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisFanStatus.setStatus('mandatory')
concChassisGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGroupCapacity.setStatus('mandatory')
concChassisGroupMap = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGroupMap.setStatus('mandatory')
concChassisGrpTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: concChassisGrpTable.setStatus('mandatory')
concChassisGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "concChassisGrpIndex"))
if mibBuilder.loadTexts: concChassisGrpEntry.setStatus('mandatory')
concChassisGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpIndex.setStatus('mandatory')
concChassisGrpNumberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpNumberPort.setStatus('mandatory')
concChassisGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpType.setStatus('mandatory')
concChassisGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpDescr.setStatus('mandatory')
concChassisGrpHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concChassisGrpHwRev.setStatus('mandatory')
eSmartHubId = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubId.setStatus('mandatory')
eSmartHubAssignedId = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubAssignedId.setStatus('mandatory')
eSmartHubTerSwitch = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("terminal", 2), ("pc-modem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubTerSwitch.setStatus('mandatory')
eSmartHubHwLoadPatStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSmartHubHwLoadPatStatus.setStatus('mandatory')
eSmartHubHwLoadPatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHubHwLoadPatCapacity.setStatus('mandatory')
eSmartHubNodeAgeTimer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSmartHubNodeAgeTimer.setStatus('mandatory')
eSmartHub3in1LnConStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("uTP", 2), ("aUI", 3), ("uTP-and-AUI", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSmartHub3in1LnConStatus.setStatus('mandatory')
eSmartHub3in1StateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("uTP", 2), ("bNC", 3), ("aUI", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSmartHub3in1StateCtrl.setStatus('mandatory')
eGlobalHubReadableFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubReadableFrames.setStatus('mandatory')
eGlobalHubMcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubMcastFrames.setStatus('mandatory')
eGlobalHubBcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubBcastFrames.setStatus('mandatory')
eGlobalHubFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubFrameTooLongs.setStatus('mandatory')
eGlobalHubRunts = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubRunts.setStatus('mandatory')
eGlobalHubAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubAlignmentErrors.setStatus('mandatory')
eGlobalHubFragmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubFragmentErrors.setStatus('mandatory')
eGlobalHubFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubFCSErrors.setStatus('mandatory')
eGlobalHubIFGErrors = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubIFGErrors.setStatus('mandatory')
eGlobalHubDataRateMismatchs = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubDataRateMismatchs.setStatus('mandatory')
eGlobalHubShortEvents = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubShortEvents.setStatus('mandatory')
eGlobalHubCollisions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubCollisions.setStatus('mandatory')
eGlobalHubLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubLateCollisions.setStatus('mandatory')
eGlobalHubMJLPs = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubMJLPs.setStatus('mandatory')
eGlobalHubAutoPartitions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubAutoPartitions.setStatus('mandatory')
eGlobalHubSFDMissings = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubSFDMissings.setStatus('mandatory')
eGlobalHubBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGlobalHubBadFrames.setStatus('mandatory')
eGrpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3), )
if mibBuilder.loadTexts: eGrpStatisticsTable.setStatus('mandatory')
eGrpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "eGrpStatIndex"))
if mibBuilder.loadTexts: eGrpStatisticsEntry.setStatus('mandatory')
eGrpStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatIndex.setStatus('mandatory')
eGrpStatReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatReadableFrames.setStatus('mandatory')
eGrpStatMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatMcastFrames.setStatus('mandatory')
eGrpStatBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatBcastFrames.setStatus('mandatory')
eGrpStatFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatFrameTooLongs.setStatus('mandatory')
eGrpStatRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatRunts.setStatus('mandatory')
eGrpStatAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatAlignmentErrors.setStatus('mandatory')
eGrpStatFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatFragmentErrors.setStatus('mandatory')
eGrpStatFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatFCSErrors.setStatus('mandatory')
eGrpStatIFGErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatIFGErrors.setStatus('mandatory')
eGrpStatDataRateMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatDataRateMismatchs.setStatus('mandatory')
eGrpStatShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatShortEvents.setStatus('mandatory')
eGrpStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatCollisions.setStatus('mandatory')
eGrpStatLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatLateCollisions.setStatus('mandatory')
eGrpStatMJLPs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatMJLPs.setStatus('mandatory')
eGrpStatAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatAutoPartitions.setStatus('mandatory')
eGrpStatSFDMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatSFDMissings.setStatus('mandatory')
eGrpStatBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGrpStatBadFrames.setStatus('mandatory')
ePortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4), )
if mibBuilder.loadTexts: ePortStatisticsTable.setStatus('mandatory')
ePortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ePortGrpIndex"), (0, "ASANTE-AH1012-MIB", "ePortIndex"))
if mibBuilder.loadTexts: ePortStatisticsEntry.setStatus('mandatory')
ePortGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortGrpIndex.setStatus('mandatory')
ePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortIndex.setStatus('mandatory')
ePortStatReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatReadableFrames.setStatus('mandatory')
ePortStatMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatMcastFrames.setStatus('mandatory')
ePortStatBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatBcastFrames.setStatus('mandatory')
ePortStatFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatFrameTooLongs.setStatus('mandatory')
ePortStatRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatRunts.setStatus('mandatory')
ePortStatAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatAlignmentErrors.setStatus('mandatory')
ePortStatFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatFragmentErrors.setStatus('mandatory')
ePortStatFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatFCSErrors.setStatus('mandatory')
ePortStatIFGErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatIFGErrors.setStatus('mandatory')
ePortStatDataRateMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatDataRateMismatchs.setStatus('mandatory')
ePortStatShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatShortEvents.setStatus('mandatory')
ePortStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatCollisions.setStatus('mandatory')
ePortStatLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatLateCollisions.setStatus('mandatory')
ePortStatMJLPs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatMJLPs.setStatus('mandatory')
ePortStatAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatAutoPartitions.setStatus('mandatory')
ePortStatSFDMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatSFDMissings.setStatus('mandatory')
ePortStatBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatBadFrames.setStatus('mandatory')
eTrafficMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5), )
if mibBuilder.loadTexts: eTrafficMatrixTable.setStatus('mandatory')
eTrafficMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "eTrafficMatrixLength"))
if mibBuilder.loadTexts: eTrafficMatrixEntry.setStatus('mandatory')
eTrafficMatrixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTrafficMatrixLength.setStatus('mandatory')
eTrafficMatrixRange = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("from-1-to-63-bytes", 2), ("from-64-to-127-bytes", 3), ("from-128-to-255-bytes", 4), ("from-256-to-511-bytes", 5), ("from-512-to-767-bytes", 6), ("from-768-to-1023-bytes", 7), ("from-1024-to-1518-bytes", 8), ("from-512-to-1023-bytes", 9), ("from-65-to-511-bytes", 10), ("exact-64-bytes", 11), ("over-1518-bytes", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTrafficMatrixRange.setStatus('mandatory')
eTrafficMatrixFramesCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTrafficMatrixFramesCounts.setStatus('mandatory')
eSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6))
eSmartHubSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1))
eColGraphBar = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eColGraphBar.setStatus('mandatory')
eUtilGraphBar = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eUtilGraphBar.setStatus('mandatory')
ePortRateTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6), )
if mibBuilder.loadTexts: ePortRateTable.setStatus('optional')
ePortRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ePortRateGrpIndex"), (0, "ASANTE-AH1012-MIB", "ePortRatePortIndex"))
if mibBuilder.loadTexts: ePortRateEntry.setStatus('optional')
ePortRateGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateGrpIndex.setStatus('optional')
ePortRatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRatePortIndex.setStatus('optional')
ePortRateReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateReadableFrames.setStatus('optional')
ePortRateMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateMcastFrames.setStatus('optional')
ePortRateBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateBcastFrames.setStatus('optional')
ePortRateFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateFrameTooLongs.setStatus('optional')
ePortRateRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateRunts.setStatus('optional')
ePortRateAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateAlignmentErrors.setStatus('optional')
ePortRateFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateFragmentErrors.setStatus('optional')
ePortRateFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateFCSErrors.setStatus('optional')
ePortRateIFGErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateIFGErrors.setStatus('optional')
ePortRateDataRateMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateDataRateMismatch.setStatus('optional')
ePortRateShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateShortEvents.setStatus('optional')
ePortRateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateCollisions.setStatus('optional')
ePortRateLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateLateCollisions.setStatus('optional')
ePortRateMJLPs = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateMJLPs.setStatus('optional')
ePortRateAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateAutoPartitions.setStatus('optional')
ePortRateSFDMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateSFDMissings.setStatus('optional')
ePortRateBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 3, 1, 6, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortRateBadFrames.setStatus('optional')
ePortStateCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1), )
if mibBuilder.loadTexts: ePortStateCtrlTable.setStatus('mandatory')
ePortStateCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "ePortStateGrpIndex"), (0, "ASANTE-AH1012-MIB", "ePortStatePortIndex"))
if mibBuilder.loadTexts: ePortStateCtrlEntry.setStatus('mandatory')
ePortStateGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateGrpIndex.setStatus('mandatory')
ePortStatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatePortIndex.setStatus('mandatory')
ePortStateType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("bNC", 2), ("aUI", 3), ("rJ45", 4), ("foil", 5), ("three-in-one", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateType.setStatus('mandatory')
ePortStateLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("linkon", 2), ("linkoff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateLinkStatus.setStatus('mandatory')
ePortStateLinkIntegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("linkTestEnable", 2), ("linkTestDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateLinkIntegTest.setStatus('mandatory')
ePortStateAutoPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("autopartitioned", 2), ("notautopartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateAutoPartStatus.setStatus('mandatory')
ePortStateJabberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStateJabberStatus.setStatus('mandatory')
ePortStateJabberState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateJabberState.setStatus('mandatory')
ePortStateAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateAdminState.setStatus('mandatory')
ePortStateRDTState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("unreduce", 2), ("reduce", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStateRDTState.setStatus('mandatory')
ePortStatePolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("normal", 2), ("reversed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortStatePolarityStatus.setStatus('mandatory')
ePortStatePolarityState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("others", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortStatePolarityState.setStatus('mandatory')
nodeSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1), )
if mibBuilder.loadTexts: nodeSummaryTable.setStatus('mandatory')
nodeSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "nodeSummaryGrpIndex"), (0, "ASANTE-AH1012-MIB", "nodeSummaryPortIndex"), (0, "ASANTE-AH1012-MIB", "nodeSummarySrcMacAddr"), (0, "ASANTE-AH1012-MIB", "nodeSummaryDestMacAddr"))
if mibBuilder.loadTexts: nodeSummaryEntry.setStatus('mandatory')
nodeSummaryGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryGrpIndex.setStatus('mandatory')
nodeSummaryPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryPortIndex.setStatus('mandatory')
nodeSummarySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummarySrcMacAddr.setStatus('mandatory')
nodeSummaryDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryDestMacAddr.setStatus('mandatory')
nodeSummaryEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryEtherType.setStatus('mandatory')
nodeSummaryIpAddrPair = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryIpAddrPair.setStatus('mandatory')
nodeSummaryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSummaryTimeStamp.setStatus('mandatory')
nodeSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2))
nodeSecuLev1Table = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1), )
if mibBuilder.loadTexts: nodeSecuLev1Table.setStatus('mandatory')
nodeSecuLev1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "nodeSecuLev1GrpIndex"), (0, "ASANTE-AH1012-MIB", "nodeSecuLev1PortIndex"))
if mibBuilder.loadTexts: nodeSecuLev1Entry.setStatus('mandatory')
nodeSecuLev1GrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecuLev1GrpIndex.setStatus('mandatory')
nodeSecuLev1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecuLev1PortIndex.setStatus('mandatory')
nodeSecuLev1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecuLev1Status.setStatus('mandatory')
nodeSecuLev1AllowedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecuLev1AllowedAddr.setStatus('mandatory')
nodeSecuLev1Action = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("partition-port", 2), ("send-trap", 3), ("partition-port-and-send-trap", 4), ("send-trap-and-request-page", 5), ("partition-port-and-send-trap-and-request-page", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecuLev1Action.setStatus('mandatory')
thresholdAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1))
thresholdLev1Table = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1), )
if mibBuilder.loadTexts: thresholdLev1Table.setStatus('optional')
thresholdLev1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1), ).setIndexNames((0, "ASANTE-AH1012-MIB", "thresholdLev1Index"))
if mibBuilder.loadTexts: thresholdLev1Entry.setStatus('optional')
thresholdLev1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdLev1Index.setStatus('optional')
thresholdLev1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Status.setStatus('optional')
thresholdLev1Target = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hub", 2), ("port", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Target.setStatus('optional')
thresholdLev1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1GroupIndex.setStatus('optional')
thresholdLev1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1PortIndex.setStatus('optional')
thresholdLev1Subject = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("readable-frames", 2), ("mcast-frames", 3), ("bcast-frames", 4), ("frame-too-longs", 5), ("runts", 6), ("alignment-errors", 7), ("fragment-errors", 8), ("fCS-errors", 9), ("iFG-errors", 10), ("data-rate-mismatch", 11), ("short-events", 12), ("collisions", 13), ("late-collisions", 14), ("auto-partitions", 15), ("sfd-missing", 16), ("bad-frames", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Subject.setStatus('optional')
thresholdLev1SampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("event-per-second", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1SampleType.setStatus('optional')
thresholdLev1StartupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("rising", 2), ("falling", 3), ("rising-or-falling", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1StartupAlarm.setStatus('optional')
thresholdLev1WaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1WaterMark.setStatus('optional')
thresholdLev1DetectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdLev1DetectedValue.setStatus('optional')
thresholdLev1RisingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("partition-port", 2), ("send-trap", 3), ("partition-port-and-send-trap", 4), ("send-trap-and-request-page", 5), ("partition-port-and-send-trap-and-request-page", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1RisingEvent.setStatus('optional')
thresholdLev1FallingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("partition-port", 2), ("send-trap", 3), ("partition-port-and-send-trap", 4), ("send-trap-and-request-page", 5), ("partition-port-and-send-trap-and-request-page", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1FallingEvent.setStatus('optional')
thresholdLev1Interval = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1Interval.setStatus('optional')
thresholdLev1OwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 3, 6, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdLev1OwnerString.setStatus('optional')
adapterProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 1))
concProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2))
hub1012 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 1))
hub1012_bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 2)).setLabel("hub1012-bridge")
thresholdLev1 = NotificationType((1, 3, 6, 1, 4, 1, 298, 2, 2, 1) + (0,1)).setObjects(("ASANTE-AH1012-MIB", "thresholdLev1Target"), ("ASANTE-AH1012-MIB", "thresholdLev1GroupIndex"), ("ASANTE-AH1012-MIB", "thresholdLev1PortIndex"), ("ASANTE-AH1012-MIB", "thresholdLev1Subject"), ("ASANTE-AH1012-MIB", "thresholdLev1SampleType"), ("ASANTE-AH1012-MIB", "thresholdLev1WaterMark"), ("ASANTE-AH1012-MIB", "thresholdLev1DetectedValue"), ("ASANTE-AH1012-MIB", "thresholdLev1OwnerString"), ("ASANTE-AH1012-MIB", "thresholdLev1RisingEvent"), ("ASANTE-AH1012-MIB", "thresholdLev1FallingEvent"))
nodeSecuLevel1 = NotificationType((1, 3, 6, 1, 4, 1, 298, 2, 2, 1) + (0,2))
mibBuilder.exportSymbols("ASANTE-AH1012-MIB", ePortStateCtrlTable=ePortStateCtrlTable, nodeSummaryGrpIndex=nodeSummaryGrpIndex, concChassisPsStatus=concChassisPsStatus, eGrpStatDataRateMismatchs=eGrpStatDataRateMismatchs, nodeSummaryEtherType=nodeSummaryEtherType, thresholdLev1Table=thresholdLev1Table, thresholdLev1FallingEvent=thresholdLev1FallingEvent, ipagentUnAuthIP=ipagentUnAuthIP, ePortRateReadableFrames=ePortRateReadableFrames, thresholdLev1Entry=thresholdLev1Entry, ipagentProtocol=ipagentProtocol, thresholdLev1Status=thresholdLev1Status, nodeSecuLev1GrpIndex=nodeSecuLev1GrpIndex, eGrpStatMcastFrames=eGrpStatMcastFrames, agentOutBandBaudRate=agentOutBandBaudRate, eGlobalHubFCSErrors=eGlobalHubFCSErrors, ePortRateMJLPs=ePortRateMJLPs, nodeSecuLev1Action=nodeSecuLev1Action, eSmartHubHwLoadPatCapacity=eSmartHubHwLoadPatCapacity, eGrpStatFragmentErrors=eGrpStatFragmentErrors, nodeSummaryEntry=nodeSummaryEntry, ePortGrpIndex=ePortGrpIndex, eGlobalHubMcastFrames=eGlobalHubMcastFrames, ePortStatFrameTooLongs=ePortStatFrameTooLongs, ePortIndex=ePortIndex, eGrpStatAlignmentErrors=eGrpStatAlignmentErrors, ePortStatAutoPartitions=ePortStatAutoPartitions, ePortRatePortIndex=ePortRatePortIndex, ePortRateAlignmentErrors=ePortRateAlignmentErrors, nodeSummaryIpAddrPair=nodeSummaryIpAddrPair, eGrpStatFCSErrors=eGrpStatFCSErrors, concChassisBkplRev=concChassisBkplRev, ePortRateLateCollisions=ePortRateLateCollisions, eStateCtrl=eStateCtrl, agentFwMinorVer=agentFwMinorVer, concChassisGrpEntry=concChassisGrpEntry, nodeSecuLev1PortIndex=nodeSecuLev1PortIndex, eGrpStatisticsTable=eGrpStatisticsTable, ePortStatePolarityState=ePortStatePolarityState, concChassisGrpHwRev=concChassisGrpHwRev, ePortStatIFGErrors=ePortStatIFGErrors, eSmartHubSpec=eSmartHubSpec, concentrator=concentrator, nodeSummaryDestMacAddr=nodeSummaryDestMacAddr, thresholdLev1Subject=thresholdLev1Subject, agentRemoteBootProtocol=agentRemoteBootProtocol, ePortStateAdminState=ePortStateAdminState, ePortStatMcastFrames=ePortStatMcastFrames, concChassisGrpDescr=concChassisGrpDescr, concChassisPsTable=concChassisPsTable, eGrpStatIFGErrors=eGrpStatIFGErrors, ePortStatSFDMissings=ePortStatSFDMissings, ePortStateRDTState=ePortStateRDTState, nodeSecurity=nodeSecurity, hub1012_bridge=hub1012_bridge, thresholdAlarm=thresholdAlarm, eGlobalHubLateCollisions=eGlobalHubLateCollisions, eGlobalHubFragmentErrors=eGlobalHubFragmentErrors, eGlobalHubBcastFrames=eGlobalHubBcastFrames, ePortStatBadFrames=ePortStatBadFrames, ipagentIpNetMask=ipagentIpNetMask, thresholdLev1DetectedValue=thresholdLev1DetectedValue, agentFw=agentFw, concChassisBkplType=concChassisBkplType, ePortRateFCSErrors=ePortRateFCSErrors, ePortRateSFDMissings=ePortRateSFDMissings, concChassisType=concChassisType, ePortStateLinkStatus=ePortStateLinkStatus, thresholdLev1=thresholdLev1, ePortRateFrameTooLongs=ePortRateFrameTooLongs, eGrpStatShortEvents=eGrpStatShortEvents, eSmartHub3in1StateCtrl=eSmartHub3in1StateCtrl, eSmartHubNodeAgeTimer=eSmartHubNodeAgeTimer, ePortRateShortEvents=ePortRateShortEvents, ePortStatLateCollisions=ePortStatLateCollisions, eSmartHubHwLoadPatStatus=eSmartHubHwLoadPatStatus, thresholdLev1WaterMark=thresholdLev1WaterMark, thresholdLev1PortIndex=thresholdLev1PortIndex, ipagentBootServerAddr=ipagentBootServerAddr, ePortStatePolarityStatus=ePortStatePolarityStatus, eGrpStatAutoPartitions=eGrpStatAutoPartitions, thresholdLev1RisingEvent=thresholdLev1RisingEvent, ePortRateBcastFrames=ePortRateBcastFrames, thresholdLev1StartupAlarm=thresholdLev1StartupAlarm, eColGraphBar=eColGraphBar, ipagentDefaultGateway=ipagentDefaultGateway, eGrpStatBcastFrames=eGrpStatBcastFrames, ePortRateFragmentErrors=ePortRateFragmentErrors, ePortStatReadableFrames=ePortStatReadableFrames, ePortStatisticsEntry=ePortStatisticsEntry, agentRunTimeImageMinorVer=agentRunTimeImageMinorVer, ePortRateDataRateMismatch=ePortRateDataRateMismatch, concChassisGrpTable=concChassisGrpTable, eGrpStatFrameTooLongs=eGrpStatFrameTooLongs, ePortStateLinkIntegTest=ePortStateLinkIntegTest, eSmartHub3in1LnConStatus=eSmartHub3in1LnConStatus, eGrpStatRunts=eGrpStatRunts, eTrafficMatrixTable=eTrafficMatrixTable, eSmartHubId=eSmartHubId, concChassisPsModuleType=concChassisPsModuleType, ePortRateTable=ePortRateTable, ePortStateJabberStatus=ePortStateJabberStatus, eGrpStatBadFrames=eGrpStatBadFrames, thresholdLev1SampleType=thresholdLev1SampleType, nodeSummarySrcMacAddr=nodeSummarySrcMacAddr, ePortStateJabberState=ePortStateJabberState, nodeSecuLevel1=nodeSecuLevel1, eTrafficMatrixLength=eTrafficMatrixLength, ePortStatRunts=ePortStatRunts, eSmartHubTerSwitch=eSmartHubTerSwitch, ePortRateRunts=ePortRateRunts, nodeSummaryTable=nodeSummaryTable, thresholdLev1Interval=thresholdLev1Interval, nodeSummaryPortIndex=nodeSummaryPortIndex, ePortStateGrpIndex=ePortStateGrpIndex, nodeSecuLev1Table=nodeSecuLev1Table, eGlobalHubFrameTooLongs=eGlobalHubFrameTooLongs, ePortStatAlignmentErrors=ePortStatAlignmentErrors, eGrpStatMJLPs=eGrpStatMJLPs, eGrpStatIndex=eGrpStatIndex, DisplayString=DisplayString, agentRunTimeImageMajorVer=agentRunTimeImageMajorVer, concChassisPsEntry=concChassisPsEntry, eGlobalHubRunts=eGlobalHubRunts, agentNetProtoStkCapMap=agentNetProtoStkCapMap, eGlobalHubIFGErrors=eGlobalHubIFGErrors, asante=asante, agentOutBandDialString=agentOutBandDialString, ipagentIpAddr=ipagentIpAddr, concChassisGrpType=concChassisGrpType, eGlobalHubCollisions=eGlobalHubCollisions, ePortStatFragmentErrors=ePortStatFragmentErrors, ePortStatCollisions=ePortStatCollisions, eGlobalHubShortEvents=eGlobalHubShortEvents, eStatistics=eStatistics, ePortStatisticsTable=ePortStatisticsTable, concAlarmMgt=concAlarmMgt, ipagentTrapRcvrIpAddr=ipagentTrapRcvrIpAddr, ePortStatBcastFrames=ePortStatBcastFrames, nodeSummaryTimeStamp=nodeSummaryTimeStamp, concChassis=concChassis, eGrpStatisticsEntry=eGrpStatisticsEntry, agentRemoteBootFile=agentRemoteBootFile, concChassisPsIndex=concChassisPsIndex, eSmartHubAssignedId=eSmartHubAssignedId, ePortStatePortIndex=ePortStatePortIndex, products=products, adaptCard=adaptCard, eGlobalHubDataRateMismatchs=eGlobalHubDataRateMismatchs, nodeSecuLev1AllowedAddr=nodeSecuLev1AllowedAddr, eTrafficMatrixRange=eTrafficMatrixRange, ipagentTrapRcvrComm=ipagentTrapRcvrComm, eTrafficMatrixFramesCounts=eTrafficMatrixFramesCounts, eGlobalHubMJLPs=eGlobalHubMJLPs, agentSw=agentSw, ePortRateIFGErrors=ePortRateIFGErrors, ePortStateType=ePortStateType, nodeSecuLev1Entry=nodeSecuLev1Entry, concBasicGrp=concBasicGrp, ipagentTrapRcvrTable=ipagentTrapRcvrTable, concChassisGroupCapacity=concChassisGroupCapacity, eGrpStatReadableFrames=eGrpStatReadableFrames, ePortStatFCSErrors=ePortStatFCSErrors, concConfiguration=concConfiguration, agentHwVer=agentHwVer, agentNetProtocol=agentNetProtocol, eGlobalStatistics=eGlobalStatistics, agentHwReVer=agentHwReVer, ePortRateEntry=ePortRateEntry, ePortRateCollisions=ePortRateCollisions, thresholdLev1OwnerString=thresholdLev1OwnerString, ePortRateGrpIndex=ePortRateGrpIndex, eGlobalHubReadableFrames=eGlobalHubReadableFrames, ePortRateBadFrames=ePortRateBadFrames, agentHw=agentHw, agentFwMajorVer=agentFwMajorVer, eGrpStatLateCollisions=eGrpStatLateCollisions, eUtilGraphBar=eUtilGraphBar, eGrpStatSFDMissings=eGrpStatSFDMissings, PhysAddress=PhysAddress, ipagentTrapRcvrStatus=ipagentTrapRcvrStatus, eGlobalHubSFDMissings=eGlobalHubSFDMissings, eSmartHubConfig=eSmartHubConfig, eGlobalHubAutoPartitions=eGlobalHubAutoPartitions, ipagentTrapRcvrEntry=ipagentTrapRcvrEntry, thresholdLev1Target=thresholdLev1Target, concChassisFanStatus=concChassisFanStatus, eSpecific=eSpecific, concChassisGrpNumberPort=concChassisGrpNumberPort, ePortStatDataRateMismatchs=ePortStatDataRateMismatchs, ePortStatMJLPs=ePortStatMJLPs, concChassisGrpIndex=concChassisGrpIndex, agentImageLoadMode=agentImageLoadMode, snmpAgent=snmpAgent, eTrafficMatrixEntry=eTrafficMatrixEntry, agentReset=agentReset, nodeSecuLev1Status=nodeSecuLev1Status, ePortRateMcastFrames=ePortRateMcastFrames, productId=productId, eGrpStatCollisions=eGrpStatCollisions, thresholdLev1Index=thresholdLev1Index, concStatistics=concStatistics, agentRemoteBootInfo=agentRemoteBootInfo, ipagentUnAuthComm=ipagentUnAuthComm, eGlobalHubBadFrames=eGlobalHubBadFrames, ePortStateCtrlEntry=ePortStateCtrlEntry, thresholdLev1GroupIndex=thresholdLev1GroupIndex, adapterProductId=adapterProductId, hub1012=hub1012, ePortRateAutoPartitions=ePortRateAutoPartitions, concProductId=concProductId, concNodeMgt=concNodeMgt, concChassisGroupMap=concChassisGroupMap, ePortStatShortEvents=ePortStatShortEvents, ePortStateAutoPartStatus=ePortStateAutoPartStatus, concStateCtrl=concStateCtrl, eGlobalHubAlignmentErrors=eGlobalHubAlignmentErrors)
