#
# PySNMP MIB module HM2-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-VPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
HmLargeDisplayString, HmTimeSeconds1970, hm2ConfigurationMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmLargeDisplayString", "HmTimeSeconds1970", "hm2ConfigurationMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, Counter64, Bits, NotificationType, iso, MibIdentifier, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Counter64", "Bits", "NotificationType", "iso", "MibIdentifier", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ObjectIdentity", "Counter32")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hm2VpnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 120))
hm2VpnMib.setRevisions(('2014-03-14 12:00',))
if mibBuilder.loadTexts: hm2VpnMib.setLastUpdated('201403141200Z')
if mibBuilder.loadTexts: hm2VpnMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2VpnMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 0))
hm2VpnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 1))
hm2VpnMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 3))
hm2VpnGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 1))
hm2VpnConnectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2))
hm2VpnTrafficSelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3))
hm2VpnCertificateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4))
hm2VpnConnMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnMax.setStatus('current')
hm2VpnConnActiveMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnActiveMax.setStatus('current')
hm2VpnConnNext = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnNext.setStatus('current')
hm2VpnConnTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10), )
if mibBuilder.loadTexts: hm2VpnConnTable.setStatus('current')
hm2VpnConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1), ).setIndexNames((0, "HM2-VPN-MIB", "hm2VpnConnIndex"))
if mibBuilder.loadTexts: hm2VpnConnEntry.setStatus('current')
hm2VpnConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2VpnConnIndex.setStatus('current')
hm2VpnConnIkeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ike", 1), ("ikev1", 2), ("ikev2", 3))).clone('ike')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeVersion.setStatus('current')
hm2VpnConnIkeStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2))).clone('responder')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeStartup.setStatus('current')
hm2VpnConnIkeLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeLifetime.setStatus('current')
hm2VpnConnIkeDpdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeDpdTimeout.setStatus('current')
hm2VpnConnIkeLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeLocalAddr.setStatus('current')
hm2VpnConnIkeRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeRemoteAddr.setStatus('current')
hm2VpnConnIkeAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("psk", 1), ("individualx509", 2), ("pkcs12", 3))).clone('psk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthType.setStatus('current')
hm2VpnConnIkeAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2))).clone('main')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthMode.setStatus('current')
hm2VpnConnIkeAuthCertCA = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthCertCA.setStatus('current')
hm2VpnConnIkeAuthCertRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthCertRemote.setStatus('current')
hm2VpnConnIkeAuthCertLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthCertLocal.setStatus('current')
hm2VpnConnIkeAuthPrivKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthPrivKey.setStatus('current')
hm2VpnConnIkeAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthPasswd.setStatus('current')
hm2VpnConnIkeAuthPsk = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthPsk.setStatus('current')
hm2VpnConnIkeAuthLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthLocId.setStatus('current')
hm2VpnConnIkeAuthLocType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("address", 2), ("id", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthLocType.setStatus('current')
hm2VpnConnIkeAuthRemId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthRemId.setStatus('current')
hm2VpnConnIkeAuthRemType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("address", 2), ("id", 3))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAuthRemType.setStatus('current')
hm2VpnConnIkeAlgDh = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("modp1024", 2), ("modp1536", 3), ("modp2048", 4), ("modp3072", 5), ("modp4096", 6))).clone('modp1024')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAlgDh.setStatus('current')
hm2VpnConnIkeAlgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("hmacmd5", 2), ("hmacsha1", 3), ("hmacsha256", 4), ("hmacsha384", 5), ("hmacsha512", 6))).clone('hmacsha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAlgMac.setStatus('current')
hm2VpnConnIkeAlgEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("des", 2), ("des3", 3), ("aes128", 4), ("aes192", 5), ("aes256", 6))).clone('aes128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeAlgEncr.setStatus('current')
hm2VpnConnIkeReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIkeReAuth.setStatus('current')
hm2VpnConnIpsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tunnel", 1))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIpsecMode.setStatus('current')
hm2VpnConnIpsecLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 28800)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIpsecLifetime.setStatus('current')
hm2VpnConnMargintime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnMargintime.setStatus('current')
hm2VpnConnIpsecAlgDh = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("modp1024", 2), ("modp1536", 3), ("modp2048", 4), ("modp3072", 5), ("modp4096", 6), ("none", 7))).clone('modp1024')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIpsecAlgDh.setStatus('current')
hm2VpnConnIpsecAlgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("hmacmd5", 2), ("hmacsha1", 3), ("hmacsha256", 4), ("hmacsha384", 5), ("hmacsha512", 6))).clone('hmacsha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIpsecAlgMac.setStatus('current')
hm2VpnConnIpsecAlgEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("any", 1), ("des", 2), ("des3", 3), ("aes128", 4), ("aes192", 5), ("aes256", 6), ("aes128ctr", 7), ("aes192ctr", 8), ("aes256ctr", 9), ("aes128gcm64", 10), ("aes128gcm96", 11), ("aes128gcm128", 12), ("aes192gcm64", 13), ("aes192gcm96", 14), ("aes192gcm128", 15), ("aes256gcm64", 16), ("aes256gcm96", 17), ("aes256gcm128", 18))).clone('aes128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnIpsecAlgEncr.setStatus('current')
hm2VpnConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("negotiation", 3), ("constructing", 4), ("dormant", 5), ("re-keying", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnOperStatus.setStatus('current')
hm2VpnConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnDesc.setStatus('current')
hm2VpnConnLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 32), HmLargeDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnLastError.setStatus('current')
hm2VpnConnDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 33), Bits().clone(namedValues=NamedValues(("informational", 0), ("unhandled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnDebug.setStatus('current')
hm2VpnConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 10, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnConnRowStatus.setStatus('current')
hm2VpnConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15), )
if mibBuilder.loadTexts: hm2VpnConnInfoTable.setStatus('current')
hm2VpnConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1), ).setIndexNames((0, "HM2-VPN-MIB", "hm2VpnConnIndex"))
if mibBuilder.loadTexts: hm2VpnConnInfoEntry.setStatus('current')
hm2VpnConnInfoIkeVersionUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ikev1", 1), ("ikev2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIkeVersionUsed.setStatus('current')
hm2VpnConnInfoIkeProposal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIkeProposal.setStatus('current')
hm2VpnConnInfoIpsecProposal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecProposal.setStatus('current')
hm2VpnConnInfoLocalHost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoLocalHost.setStatus('current')
hm2VpnConnInfoRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoRemoteHost.setStatus('current')
hm2VpnConnInfoEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoEstablished.setStatus('current')
hm2VpnConnInfoIKEReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIKEReauth.setStatus('current')
hm2VpnConnInfoIKERekeying = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIKERekeying.setStatus('current')
hm2VpnConnInfoIpsecRekeying = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecRekeying.setStatus('current')
hm2VpnConnInfoIpsecInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecInBytes.setStatus('current')
hm2VpnConnInfoIpsecInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecInPackets.setStatus('current')
hm2VpnConnInfoIpsecInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecInUse.setStatus('current')
hm2VpnConnInfoIpsecOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecOutBytes.setStatus('current')
hm2VpnConnInfoIpsecOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecOutPackets.setStatus('current')
hm2VpnConnInfoIpsecOutUse = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecOutUse.setStatus('current')
hm2VpnConnInfoIKEInitiatorSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIKEInitiatorSPI.setStatus('current')
hm2VpnConnInfoIKEResponderSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIKEResponderSPI.setStatus('current')
hm2VpnConnInfoIpsecInSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecInSPI.setStatus('current')
hm2VpnConnInfoIpsecOutSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 2, 15, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnConnInfoIpsecOutSPI.setStatus('current')
hm2VpnTrafficSelTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1), )
if mibBuilder.loadTexts: hm2VpnTrafficSelTable.setStatus('current')
hm2VpnTrafficSelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1), ).setIndexNames((0, "HM2-VPN-MIB", "hm2VpnConnIndex"), (0, "HM2-VPN-MIB", "hm2VpnTrafficSelIndex"))
if mibBuilder.loadTexts: hm2VpnTrafficSelEntry.setStatus('current')
hm2VpnTrafficSelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hm2VpnTrafficSelIndex.setStatus('current')
hm2VpnTrafficSelSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnTrafficSelSrcAddr.setStatus('current')
hm2VpnTrafficSelDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnTrafficSelDstAddr.setStatus('current')
hm2VpnTrafficSelSrcRest = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnTrafficSelSrcRest.setStatus('current')
hm2VpnTrafficSelDstRest = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnTrafficSelDstRest.setStatus('current')
hm2VpnTrafficSelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnTrafficSelDesc.setStatus('current')
hm2VpnTrafficSelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2VpnTrafficSelRowStatus.setStatus('current')
hm2VpnCertificateUploadPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2VpnCertificateUploadPassphrase.setStatus('current')
hm2VpnCertificateTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10), )
if mibBuilder.loadTexts: hm2VpnCertificateTable.setStatus('current')
hm2VpnCertificateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1), ).setIndexNames((0, "HM2-VPN-MIB", "hm2VpnCertificateIndex"))
if mibBuilder.loadTexts: hm2VpnCertificateEntry.setStatus('current')
hm2VpnCertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: hm2VpnCertificateIndex.setStatus('current')
hm2VpnCertificateSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateSubject.setStatus('current')
hm2VpnCertificateIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateIssuer.setStatus('current')
hm2VpnCertificateStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 4), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateStartDate.setStatus('current')
hm2VpnCertificateEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 5), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateEndDate.setStatus('current')
hm2VpnCertificateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateFileName.setStatus('current')
hm2VpnCertificateType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ca", 1), ("peer", 2), ("encryptedkey", 3), ("pkcs12", 4), ("encryptedpkcs12", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateType.setStatus('current')
hm2VpnCertificateCertUploadDate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 8), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateCertUploadDate.setStatus('current')
hm2VpnCertificatePrivateKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("present", 2), ("notFound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificatePrivateKeyStatus.setStatus('current')
hm2VpnCertificatePrivateKeyFile = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificatePrivateKeyFile.setStatus('current')
hm2VpnCertificateNoConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2VpnCertificateNoConnections.setStatus('current')
hm2VpnCertificateUserActions = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 120, 1, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2VpnCertificateUserActions.setStatus('current')
hm2VpnMibSNMPExtensionNoTrafficSelector = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 120, 3, 1))
if mibBuilder.loadTexts: hm2VpnMibSNMPExtensionNoTrafficSelector.setStatus('current')
hm2VpnMibSNMPExtensionTooManyActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 120, 3, 2))
if mibBuilder.loadTexts: hm2VpnMibSNMPExtensionTooManyActive.setStatus('current')
hm2VpnMibSNMPExtensionTooManyConns = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 120, 3, 3))
if mibBuilder.loadTexts: hm2VpnMibSNMPExtensionTooManyConns.setStatus('current')
hm2VpnMibSNMPExtensionActiveRow = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 120, 3, 4))
if mibBuilder.loadTexts: hm2VpnMibSNMPExtensionActiveRow.setStatus('current')
hm2VpnMibSNMPExtensionInitiatorAny = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 120, 3, 5))
if mibBuilder.loadTexts: hm2VpnMibSNMPExtensionInitiatorAny.setStatus('current')
hm2VpnUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 120, 0, 1)).setObjects(("HM2-VPN-MIB", "hm2VpnConnIndex"), ("HM2-VPN-MIB", "hm2VpnConnOperStatus"))
if mibBuilder.loadTexts: hm2VpnUpTrap.setStatus('current')
hm2VpnDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 120, 0, 2)).setObjects(("HM2-VPN-MIB", "hm2VpnConnIndex"), ("HM2-VPN-MIB", "hm2VpnConnOperStatus"))
if mibBuilder.loadTexts: hm2VpnDownTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-VPN-MIB", hm2VpnCertificateIndex=hm2VpnCertificateIndex, hm2VpnConnIkeRemoteAddr=hm2VpnConnIkeRemoteAddr, hm2VpnMibSNMPExtensionInitiatorAny=hm2VpnMibSNMPExtensionInitiatorAny, hm2VpnCertificatePrivateKeyFile=hm2VpnCertificatePrivateKeyFile, hm2VpnConnInfoIpsecOutSPI=hm2VpnConnInfoIpsecOutSPI, hm2VpnCertificateCertUploadDate=hm2VpnCertificateCertUploadDate, hm2VpnConnIkeAuthCertLocal=hm2VpnConnIkeAuthCertLocal, hm2VpnConnInfoIpsecProposal=hm2VpnConnInfoIpsecProposal, hm2VpnConnIkeAuthPsk=hm2VpnConnIkeAuthPsk, hm2VpnCertificatePrivateKeyStatus=hm2VpnCertificatePrivateKeyStatus, hm2VpnConnIkeLocalAddr=hm2VpnConnIkeLocalAddr, hm2VpnConnIkeAuthLocType=hm2VpnConnIkeAuthLocType, hm2VpnCertificateStartDate=hm2VpnCertificateStartDate, hm2VpnMib=hm2VpnMib, hm2VpnConnInfoEntry=hm2VpnConnInfoEntry, hm2VpnTrafficSelDstAddr=hm2VpnTrafficSelDstAddr, hm2VpnConnIpsecAlgDh=hm2VpnConnIpsecAlgDh, hm2VpnConnIkeAuthCertRemote=hm2VpnConnIkeAuthCertRemote, hm2VpnTrafficSelGroup=hm2VpnTrafficSelGroup, hm2VpnConnInfoEstablished=hm2VpnConnInfoEstablished, hm2VpnConnIndex=hm2VpnConnIndex, hm2VpnConnIkeDpdTimeout=hm2VpnConnIkeDpdTimeout, hm2VpnConnInfoIkeProposal=hm2VpnConnInfoIkeProposal, hm2VpnConnInfoIKEResponderSPI=hm2VpnConnInfoIKEResponderSPI, hm2VpnMibSNMPExtensionActiveRow=hm2VpnMibSNMPExtensionActiveRow, hm2VpnTrafficSelDstRest=hm2VpnTrafficSelDstRest, hm2VpnConnActiveMax=hm2VpnConnActiveMax, hm2VpnMibObjects=hm2VpnMibObjects, hm2VpnUpTrap=hm2VpnUpTrap, hm2VpnConnIkeAlgMac=hm2VpnConnIkeAlgMac, hm2VpnConnTable=hm2VpnConnTable, hm2VpnConnIkeAuthRemType=hm2VpnConnIkeAuthRemType, hm2VpnConnectionGroup=hm2VpnConnectionGroup, hm2VpnConnInfoIpsecInBytes=hm2VpnConnInfoIpsecInBytes, hm2VpnConnOperStatus=hm2VpnConnOperStatus, hm2VpnConnIpsecAlgEncr=hm2VpnConnIpsecAlgEncr, hm2VpnConnInfoIpsecInSPI=hm2VpnConnInfoIpsecInSPI, hm2VpnMibNotifications=hm2VpnMibNotifications, hm2VpnCertificateIssuer=hm2VpnCertificateIssuer, hm2VpnCertificateFileName=hm2VpnCertificateFileName, hm2VpnConnIkeAuthPrivKey=hm2VpnConnIkeAuthPrivKey, hm2VpnTrafficSelEntry=hm2VpnTrafficSelEntry, hm2VpnTrafficSelDesc=hm2VpnTrafficSelDesc, hm2VpnConnIkeLifetime=hm2VpnConnIkeLifetime, hm2VpnConnIkeAuthRemId=hm2VpnConnIkeAuthRemId, hm2VpnConnInfoRemoteHost=hm2VpnConnInfoRemoteHost, hm2VpnMibSNMPExtensionNoTrafficSelector=hm2VpnMibSNMPExtensionNoTrafficSelector, hm2VpnTrafficSelSrcAddr=hm2VpnTrafficSelSrcAddr, hm2VpnConnIkeAlgEncr=hm2VpnConnIkeAlgEncr, hm2VpnCertificateNoConnections=hm2VpnCertificateNoConnections, hm2VpnConnIkeAuthCertCA=hm2VpnConnIkeAuthCertCA, hm2VpnConnInfoIpsecOutBytes=hm2VpnConnInfoIpsecOutBytes, hm2VpnConnIkeStartup=hm2VpnConnIkeStartup, hm2VpnConnInfoIKERekeying=hm2VpnConnInfoIKERekeying, hm2VpnConnIkeReAuth=hm2VpnConnIkeReAuth, hm2VpnConnIkeAlgDh=hm2VpnConnIkeAlgDh, hm2VpnConnInfoTable=hm2VpnConnInfoTable, hm2VpnConnIpsecAlgMac=hm2VpnConnIpsecAlgMac, hm2VpnConnMargintime=hm2VpnConnMargintime, hm2VpnTrafficSelIndex=hm2VpnTrafficSelIndex, hm2VpnCertificateEndDate=hm2VpnCertificateEndDate, hm2VpnTrafficSelRowStatus=hm2VpnTrafficSelRowStatus, hm2VpnDownTrap=hm2VpnDownTrap, hm2VpnConnIkeVersion=hm2VpnConnIkeVersion, hm2VpnConnIkeAuthPasswd=hm2VpnConnIkeAuthPasswd, hm2VpnConnInfoLocalHost=hm2VpnConnInfoLocalHost, hm2VpnConnMax=hm2VpnConnMax, hm2VpnConnInfoIpsecOutUse=hm2VpnConnInfoIpsecOutUse, hm2VpnConnInfoIKEInitiatorSPI=hm2VpnConnInfoIKEInitiatorSPI, hm2VpnCertificateType=hm2VpnCertificateType, hm2VpnConnInfoIkeVersionUsed=hm2VpnConnInfoIkeVersionUsed, PYSNMP_MODULE_ID=hm2VpnMib, hm2VpnMibSNMPExtensionTooManyActive=hm2VpnMibSNMPExtensionTooManyActive, hm2VpnConnInfoIpsecOutPackets=hm2VpnConnInfoIpsecOutPackets, hm2VpnConnDesc=hm2VpnConnDesc, hm2VpnConnIpsecLifetime=hm2VpnConnIpsecLifetime, hm2VpnConnIkeAuthMode=hm2VpnConnIkeAuthMode, hm2VpnMibSNMPExtensionGroup=hm2VpnMibSNMPExtensionGroup, hm2VpnCertificateSubject=hm2VpnCertificateSubject, hm2VpnConnInfoIpsecInPackets=hm2VpnConnInfoIpsecInPackets, hm2VpnConnEntry=hm2VpnConnEntry, hm2VpnConnInfoIpsecInUse=hm2VpnConnInfoIpsecInUse, hm2VpnConnInfoIKEReauth=hm2VpnConnInfoIKEReauth, hm2VpnConnIkeAuthType=hm2VpnConnIkeAuthType, hm2VpnCertificateUploadPassphrase=hm2VpnCertificateUploadPassphrase, hm2VpnTrafficSelTable=hm2VpnTrafficSelTable, hm2VpnTrafficSelSrcRest=hm2VpnTrafficSelSrcRest, hm2VpnCertificateEntry=hm2VpnCertificateEntry, hm2VpnGeneralGroup=hm2VpnGeneralGroup, hm2VpnCertificateGroup=hm2VpnCertificateGroup, hm2VpnConnNext=hm2VpnConnNext, hm2VpnCertificateTable=hm2VpnCertificateTable, hm2VpnConnLastError=hm2VpnConnLastError, hm2VpnConnDebug=hm2VpnConnDebug, hm2VpnCertificateUserActions=hm2VpnCertificateUserActions, hm2VpnConnRowStatus=hm2VpnConnRowStatus, hm2VpnConnIkeAuthLocId=hm2VpnConnIkeAuthLocId, hm2VpnConnIpsecMode=hm2VpnConnIpsecMode, hm2VpnConnInfoIpsecRekeying=hm2VpnConnInfoIpsecRekeying, hm2VpnMibSNMPExtensionTooManyConns=hm2VpnMibSNMPExtensionTooManyConns)
