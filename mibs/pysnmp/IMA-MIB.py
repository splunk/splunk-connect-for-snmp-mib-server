#
# PySNMP MIB module IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IMA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:44:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, ObjectIdentity, ModuleIdentity, NotificationType, Counter64, IpAddress, Integer32, MibIdentifier, Counter32, iso, TimeTicks, Gauge32, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Counter64", "IpAddress", "Integer32", "MibIdentifier", "Counter32", "iso", "TimeTicks", "Gauge32", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "DisplayString", "TextualConvention")
atmfImaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 7, 1))
atmfImaMib.setRevisions(('1999-02-11 18:30', '1997-01-09 22:45',))
if mibBuilder.loadTexts: atmfImaMib.setLastUpdated('9902111830Z')
if mibBuilder.loadTexts: atmfImaMib.setOrganization('The ATM Forum')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfIma = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7))
atmfImaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1))
atmfImaMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 2))
atmfImaMibTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 2, 0))
atmfImaMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3))
class MilliSeconds(TextualConvention, Integer32):
    status = 'current'

class ImaGroupState(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.2.1 on page 55'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class ImaGroupFailureStatus(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.2.1, page 55'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class ImaAlarmStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cleared", 1), ("declared", 2))

class ImaAlarmType(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 12.2.3 on page 79'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("imaAlarmLinkLif", 1), ("imaAlarmLinkLods", 2), ("imaAlarmLinkRfi", 3), ("imaAlarmLinkTxMisConnect", 4), ("imaAlarmLinkRxMisConnect", 5), ("imaAlarmLinkTxFault", 6), ("imaAlarmLinkRxFault", 7), ("imaAlarmLinkTxUnusableFe", 8), ("imaAlarmLinkRxUnusableFe", 9), ("imaAlarmGroupStartupFe", 10), ("imaAlarmGroupCfgAbort", 11), ("imaAlarmGroupCfgAbortFe", 12), ("imaAlarmGroupInsuffLinks", 13), ("imaAlarmGroupInsuffLinksFe", 14), ("imaAlarmGroupBlockedFe", 15), ("imaAlarmGroupTimingSynch", 16))

class ImaGroupTxClkMode(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 7 on page 38'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class ImaGroupSymmetry(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 5.2.2.7 on page 35'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))

class ImaFrameLength(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 5.2.2.4.2 on page 34'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))
    namedValues = NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))

class ImaLinkState(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.1.2 on page 48'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class ImaLinkFailureStatus(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.1.2 on page 48'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class ImaTestProcStatus(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 13 on page 81'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("operating", 2), ("linkFail", 3))

imaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumber.setStatus('current')
imaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2), )
if mibBuilder.loadTexts: imaGroupTable.setStatus('current')
imaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupEntry.setStatus('current')
imaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: imaGroupIndex.setStatus('current')
imaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupRowStatus.setStatus('current')
imaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIfIndex.setStatus('current')
imaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 4), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeState.setStatus('current')
imaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 5), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeState.setStatus('current')
imaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 6), ImaGroupFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFailureStatus.setStatus('current')
imaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 7), ImaGroupSymmetry().clone('symmetricOperation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupSymmetry.setStatus('current')
imaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setStatus('current')
imaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setStatus('current')
imaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 10), ImaGroupTxClkMode().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setStatus('current')
imaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 11), ImaGroupTxClkMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setStatus('current')
imaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setStatus('current')
imaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setStatus('current')
imaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLastChange.setStatus('current')
imaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTxImaId.setStatus('current')
imaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxImaId.setStatus('current')
imaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 17), ImaFrameLength().clone('m128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTxFrameLength.setStatus('current')
imaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 18), ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxFrameLength.setStatus('current')
imaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 19), MilliSeconds().clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setStatus('current')
imaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setStatus('current')
imaGroupDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 21), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setStatus('current')
imaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupAlphaValue.setStatus('current')
imaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupBetaValue.setStatus('current')
imaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupGammaValue.setStatus('current')
imaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRunningSecs.setStatus('current')
imaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupUnavailSecs.setStatus('current')
imaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeNumFailures.setStatus('current')
imaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeNumFailures.setStatus('current')
imaGroupTxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxAvailCellRate.setStatus('current')
imaGroupRxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxAvailCellRate.setStatus('current')
imaGroupNumTxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxCfgLinks.setStatus('current')
imaGroupNumRxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxCfgLinks.setStatus('current')
imaGroupNumTxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxActLinks.setStatus('current')
imaGroupNumRxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxActLinks.setStatus('current')
imaGroupTestLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setStatus('current')
imaGroupTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTestPattern.setStatus('current')
imaGroupTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 37), ImaTestProcStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTestProcStatus.setStatus('current')
imaGroupValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupValidIntervals.setStatus('current')
imaGroupInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupInvalidIntervals.setStatus('current')
imaGroupTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTimeElapsed.setStatus('current')
imaGroupTxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxOamLabelValue.setStatus('current')
imaGroupRxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxOamLabelValue.setStatus('current')
imaGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 3), )
if mibBuilder.loadTexts: imaGroupMappingTable.setStatus('current')
imaGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: imaGroupMappingEntry.setStatus('current')
imaGroupMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupMappingIndex.setStatus('current')
imaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4), )
if mibBuilder.loadTexts: imaLinkTable.setStatus('current')
imaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1), ).setIndexNames((0, "IMA-MIB", "imaLinkIfIndex"))
if mibBuilder.loadTexts: imaLinkEntry.setStatus('current')
imaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: imaLinkIfIndex.setStatus('current')
imaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaLinkRowStatus.setStatus('current')
imaLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaLinkGroupIndex.setStatus('current')
imaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 4), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxState.setStatus('current')
imaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 5), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxState.setStatus('current')
imaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 6), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxState.setStatus('current')
imaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 7), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxState.setStatus('current')
imaLinkNeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 8), ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setStatus('current')
imaLinkFeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 9), ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setStatus('current')
imaLinkTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxLid.setStatus('current')
imaLinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxLid.setStatus('current')
imaLinkRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 12), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRelDelay.setStatus('current')
imaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkImaViolations.setStatus('current')
imaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkOifAnomalies.setStatus('current')
imaLinkNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeSevErroredSecs.setStatus('current')
imaLinkFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeSevErroredSecs.setStatus('current')
imaLinkNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeUnavailSecs.setStatus('current')
imaLinkFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeUnavailSecs.setStatus('current')
imaLinkNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxUnusableSecs.setStatus('current')
imaLinkNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxUnusableSecs.setStatus('current')
imaLinkFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxUnusableSecs.setStatus('current')
imaLinkFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxUnusableSecs.setStatus('current')
imaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setStatus('current')
imaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setStatus('current')
imaLinkFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setStatus('current')
imaLinkFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setStatus('current')
imaLinkTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxStuffs.setStatus('current')
imaLinkRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxStuffs.setStatus('current')
imaLinkRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxTestPattern.setStatus('current')
imaLinkTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 30), ImaTestProcStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTestProcStatus.setStatus('current')
imaLinkValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkValidIntervals.setStatus('current')
imaLinkInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkInvalidIntervals.setStatus('current')
imaLinkTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTimeElapsed.setStatus('current')
imaAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 5), ImaAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaAlarmStatus.setStatus('current')
imaAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 6), ImaAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaAlarmType.setStatus('current')
imaFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 2, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IMA-MIB", "imaAlarmStatus"), ("IMA-MIB", "imaAlarmType"))
if mibBuilder.loadTexts: imaFailureAlarm.setStatus('current')
imaGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7), )
if mibBuilder.loadTexts: imaGroupCurrentTable.setStatus('current')
imaGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupCurrentEntry.setStatus('current')
imaGroupCurrentUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupCurrentUnavailSecs.setStatus('current')
imaGroupCurrentNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupCurrentNeNumFailures.setStatus('current')
imaGroupCurrentFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupCurrentFeNumFailures.setStatus('current')
imaGroupIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8), )
if mibBuilder.loadTexts: imaGroupIntervalTable.setStatus('current')
imaGroupIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"), (0, "IMA-MIB", "imaGroupIntervalNumber"))
if mibBuilder.loadTexts: imaGroupIntervalEntry.setStatus('current')
imaGroupIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: imaGroupIntervalNumber.setStatus('current')
imaGroupIntervalUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIntervalUnavailSecs.setStatus('current')
imaGroupIntervalNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIntervalNeNumFailures.setStatus('current')
imaGroupIntervalFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIntervalFeNumFailures.setStatus('current')
imaGroupTotalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9), )
if mibBuilder.loadTexts: imaGroupTotalTable.setStatus('current')
imaGroupTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupTotalEntry.setStatus('current')
imaGroupTotalUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTotalUnavailSecs.setStatus('current')
imaGroupTotalNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTotalNeNumFailures.setStatus('current')
imaGroupTotalFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTotalFeNumFailures.setStatus('current')
imaLinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10), )
if mibBuilder.loadTexts: imaLinkCurrentTable.setStatus('current')
imaLinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: imaLinkCurrentEntry.setStatus('current')
imaLinkCurrentImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentImaViolations.setStatus('current')
imaLinkCurrentOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentOifAnomalies.setStatus('current')
imaLinkCurrentNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeSevErroredSecs.setStatus('current')
imaLinkCurrentFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeSevErroredSecs.setStatus('current')
imaLinkCurrentNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeUnavailSecs.setStatus('current')
imaLinkCurrentFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeUnavailSecs.setStatus('current')
imaLinkCurrentNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeTxUnusableSecs.setStatus('current')
imaLinkCurrentNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeRxUnusableSecs.setStatus('current')
imaLinkCurrentFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeTxUnusableSecs.setStatus('current')
imaLinkCurrentFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeRxUnusableSecs.setStatus('current')
imaLinkCurrentNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeTxNumFailures.setStatus('current')
imaLinkCurrentNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeRxNumFailures.setStatus('current')
imaLinkCurrentFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeTxNumFailures.setStatus('current')
imaLinkCurrentFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeRxNumFailures.setStatus('current')
imaLinkCurrentTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentTxStuffs.setStatus('current')
imaLinkCurrentRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentRxStuffs.setStatus('current')
imaLinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11), )
if mibBuilder.loadTexts: imaLinkIntervalTable.setStatus('current')
imaLinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IMA-MIB", "imaLinkIntervalNumber"))
if mibBuilder.loadTexts: imaLinkIntervalEntry.setStatus('current')
imaLinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: imaLinkIntervalNumber.setStatus('current')
imaLinkIntervalImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalImaViolations.setStatus('current')
imaLinkIntervalOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalOifAnomalies.setStatus('current')
imaLinkIntervalNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeSevErroredSecs.setStatus('current')
imaLinkIntervalFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeSevErroredSecs.setStatus('current')
imaLinkIntervalNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeUnavailSecs.setStatus('current')
imaLinkIntervalFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeUnavailSecs.setStatus('current')
imaLinkIntervalNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeTxUnusableSecs.setStatus('current')
imaLinkIntervalNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeRxUnusableSecs.setStatus('current')
imaLinkIntervalFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeTxUnusableSecs.setStatus('current')
imaLinkIntervalFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeRxUnusableSecs.setStatus('current')
imaLinkIntervalNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeTxNumFailures.setStatus('current')
imaLinkIntervalNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeRxNumFailures.setStatus('current')
imaLinkIntervalFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeTxNumFailures.setStatus('current')
imaLinkIntervalFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeRxNumFailures.setStatus('current')
imaLinkIntervalTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalTxStuffs.setStatus('current')
imaLinkIntervalRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalRxStuffs.setStatus('current')
imaLinkTotalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12), )
if mibBuilder.loadTexts: imaLinkTotalTable.setStatus('current')
imaLinkTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: imaLinkTotalEntry.setStatus('current')
imaLinkTotalImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalImaViolations.setStatus('current')
imaLinkTotalOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalOifAnomalies.setStatus('current')
imaLinkTotalNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeSevErroredSecs.setStatus('current')
imaLinkTotalFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeSevErroredSecs.setStatus('current')
imaLinkTotalNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeUnavailSecs.setStatus('current')
imaLinkTotalFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeUnavailSecs.setStatus('current')
imaLinkTotalNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeTxUnusableSecs.setStatus('current')
imaLinkTotalNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeRxUnusableSecs.setStatus('current')
imaLinkTotalFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeTxUnusableSecs.setStatus('current')
imaLinkTotalFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeRxUnusableSecs.setStatus('current')
imaLinkTotalNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeTxNumFailures.setStatus('current')
imaLinkTotalNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeRxNumFailures.setStatus('current')
imaLinkTotalFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeTxNumFailures.setStatus('current')
imaLinkTotalFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeRxNumFailures.setStatus('current')
imaLinkTotalTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalTxStuffs.setStatus('current')
imaLinkTotalRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalRxStuffs.setStatus('current')
atmfImaMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1))
atmfImaMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 2))
atmfImaMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 2, 1)).setObjects(("IMA-MIB", "imaGroupGroup"), ("IMA-MIB", "imaLinkGroup"), ("IMA-MIB", "imaGroupMappingTableGroup"), ("IMA-MIB", "imaAlarmGroup"), ("IMA-MIB", "imaTestPatternGroup"), ("IMA-MIB", "imaGroupIntervalGroup"), ("IMA-MIB", "imaLinkIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfImaMibCompliance = atmfImaMibCompliance.setStatus('current')
imaGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 1)).setObjects(("IMA-MIB", "imaGroupNumber"), ("IMA-MIB", "imaGroupRowStatus"), ("IMA-MIB", "imaGroupIfIndex"), ("IMA-MIB", "imaGroupNeState"), ("IMA-MIB", "imaGroupFeState"), ("IMA-MIB", "imaGroupFailureStatus"), ("IMA-MIB", "imaGroupSymmetry"), ("IMA-MIB", "imaGroupMinNumTxLinks"), ("IMA-MIB", "imaGroupMinNumRxLinks"), ("IMA-MIB", "imaGroupNeTxClkMode"), ("IMA-MIB", "imaGroupFeTxClkMode"), ("IMA-MIB", "imaGroupTxTimingRefLink"), ("IMA-MIB", "imaGroupRxTimingRefLink"), ("IMA-MIB", "imaGroupLastChange"), ("IMA-MIB", "imaGroupTxImaId"), ("IMA-MIB", "imaGroupRxImaId"), ("IMA-MIB", "imaGroupTxFrameLength"), ("IMA-MIB", "imaGroupRxFrameLength"), ("IMA-MIB", "imaGroupDiffDelayMax"), ("IMA-MIB", "imaGroupLeastDelayLink"), ("IMA-MIB", "imaGroupDiffDelayMaxObs"), ("IMA-MIB", "imaGroupAlphaValue"), ("IMA-MIB", "imaGroupBetaValue"), ("IMA-MIB", "imaGroupGammaValue"), ("IMA-MIB", "imaGroupRunningSecs"), ("IMA-MIB", "imaGroupUnavailSecs"), ("IMA-MIB", "imaGroupNeNumFailures"), ("IMA-MIB", "imaGroupFeNumFailures"), ("IMA-MIB", "imaGroupTxAvailCellRate"), ("IMA-MIB", "imaGroupRxAvailCellRate"), ("IMA-MIB", "imaGroupNumTxCfgLinks"), ("IMA-MIB", "imaGroupNumRxCfgLinks"), ("IMA-MIB", "imaGroupNumTxActLinks"), ("IMA-MIB", "imaGroupNumRxActLinks"), ("IMA-MIB", "imaGroupTxOamLabelValue"), ("IMA-MIB", "imaGroupRxOamLabelValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaGroupGroup = imaGroupGroup.setStatus('current')
imaLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 2)).setObjects(("IMA-MIB", "imaLinkRowStatus"), ("IMA-MIB", "imaLinkGroupIndex"), ("IMA-MIB", "imaLinkNeTxState"), ("IMA-MIB", "imaLinkNeRxState"), ("IMA-MIB", "imaLinkFeTxState"), ("IMA-MIB", "imaLinkFeRxState"), ("IMA-MIB", "imaLinkNeRxFailureStatus"), ("IMA-MIB", "imaLinkFeRxFailureStatus"), ("IMA-MIB", "imaLinkTxLid"), ("IMA-MIB", "imaLinkRxLid"), ("IMA-MIB", "imaLinkRelDelay"), ("IMA-MIB", "imaLinkImaViolations"), ("IMA-MIB", "imaLinkOifAnomalies"), ("IMA-MIB", "imaLinkNeSevErroredSecs"), ("IMA-MIB", "imaLinkFeSevErroredSecs"), ("IMA-MIB", "imaLinkNeUnavailSecs"), ("IMA-MIB", "imaLinkFeUnavailSecs"), ("IMA-MIB", "imaLinkNeTxUnusableSecs"), ("IMA-MIB", "imaLinkNeRxUnusableSecs"), ("IMA-MIB", "imaLinkFeTxUnusableSecs"), ("IMA-MIB", "imaLinkFeRxUnusableSecs"), ("IMA-MIB", "imaLinkNeTxNumFailures"), ("IMA-MIB", "imaLinkNeRxNumFailures"), ("IMA-MIB", "imaLinkFeTxNumFailures"), ("IMA-MIB", "imaLinkFeRxNumFailures"), ("IMA-MIB", "imaLinkTxStuffs"), ("IMA-MIB", "imaLinkRxStuffs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaLinkGroup = imaLinkGroup.setStatus('current')
imaGroupMappingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 3)).setObjects(("IMA-MIB", "imaGroupMappingIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaGroupMappingTableGroup = imaGroupMappingTableGroup.setStatus('current')
imaTestPatternGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 4)).setObjects(("IMA-MIB", "imaGroupTestLinkIfIndex"), ("IMA-MIB", "imaGroupTestPattern"), ("IMA-MIB", "imaGroupTestProcStatus"), ("IMA-MIB", "imaLinkRxTestPattern"), ("IMA-MIB", "imaLinkTestProcStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaTestPatternGroup = imaTestPatternGroup.setStatus('current')
imaAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 5)).setObjects(("IMA-MIB", "imaAlarmStatus"), ("IMA-MIB", "imaAlarmType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaAlarmGroup = imaAlarmGroup.setStatus('current')
imaGroupIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 6)).setObjects(("IMA-MIB", "imaGroupValidIntervals"), ("IMA-MIB", "imaGroupInvalidIntervals"), ("IMA-MIB", "imaGroupTimeElapsed"), ("IMA-MIB", "imaGroupCurrentUnavailSecs"), ("IMA-MIB", "imaGroupCurrentNeNumFailures"), ("IMA-MIB", "imaGroupCurrentFeNumFailures"), ("IMA-MIB", "imaGroupIntervalUnavailSecs"), ("IMA-MIB", "imaGroupIntervalNeNumFailures"), ("IMA-MIB", "imaGroupIntervalFeNumFailures"), ("IMA-MIB", "imaGroupTotalUnavailSecs"), ("IMA-MIB", "imaGroupTotalNeNumFailures"), ("IMA-MIB", "imaGroupTotalFeNumFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaGroupIntervalGroup = imaGroupIntervalGroup.setStatus('current')
imaLinkIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 7)).setObjects(("IMA-MIB", "imaLinkValidIntervals"), ("IMA-MIB", "imaLinkInvalidIntervals"), ("IMA-MIB", "imaLinkTimeElapsed"), ("IMA-MIB", "imaLinkCurrentImaViolations"), ("IMA-MIB", "imaLinkCurrentOifAnomalies"), ("IMA-MIB", "imaLinkCurrentNeSevErroredSecs"), ("IMA-MIB", "imaLinkCurrentFeSevErroredSecs"), ("IMA-MIB", "imaLinkCurrentNeUnavailSecs"), ("IMA-MIB", "imaLinkCurrentFeUnavailSecs"), ("IMA-MIB", "imaLinkCurrentNeTxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentNeRxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentFeTxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentFeRxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentNeTxNumFailures"), ("IMA-MIB", "imaLinkCurrentNeRxNumFailures"), ("IMA-MIB", "imaLinkCurrentFeTxNumFailures"), ("IMA-MIB", "imaLinkCurrentFeRxNumFailures"), ("IMA-MIB", "imaLinkCurrentTxStuffs"), ("IMA-MIB", "imaLinkCurrentRxStuffs"), ("IMA-MIB", "imaLinkIntervalImaViolations"), ("IMA-MIB", "imaLinkIntervalOifAnomalies"), ("IMA-MIB", "imaLinkIntervalNeSevErroredSecs"), ("IMA-MIB", "imaLinkIntervalFeSevErroredSecs"), ("IMA-MIB", "imaLinkIntervalNeUnavailSecs"), ("IMA-MIB", "imaLinkIntervalFeUnavailSecs"), ("IMA-MIB", "imaLinkIntervalNeTxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalNeRxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalFeTxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalFeRxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalNeTxNumFailures"), ("IMA-MIB", "imaLinkIntervalNeRxNumFailures"), ("IMA-MIB", "imaLinkIntervalFeTxNumFailures"), ("IMA-MIB", "imaLinkIntervalFeRxNumFailures"), ("IMA-MIB", "imaLinkIntervalTxStuffs"), ("IMA-MIB", "imaLinkIntervalRxStuffs"), ("IMA-MIB", "imaLinkTotalImaViolations"), ("IMA-MIB", "imaLinkTotalOifAnomalies"), ("IMA-MIB", "imaLinkTotalNeSevErroredSecs"), ("IMA-MIB", "imaLinkTotalFeSevErroredSecs"), ("IMA-MIB", "imaLinkTotalNeUnavailSecs"), ("IMA-MIB", "imaLinkTotalFeUnavailSecs"), ("IMA-MIB", "imaLinkTotalNeTxUnusableSecs"), ("IMA-MIB", "imaLinkTotalNeRxUnusableSecs"), ("IMA-MIB", "imaLinkTotalFeTxUnusableSecs"), ("IMA-MIB", "imaLinkTotalFeRxUnusableSecs"), ("IMA-MIB", "imaLinkTotalNeTxNumFailures"), ("IMA-MIB", "imaLinkTotalNeRxNumFailures"), ("IMA-MIB", "imaLinkTotalFeTxNumFailures"), ("IMA-MIB", "imaLinkTotalFeRxNumFailures"), ("IMA-MIB", "imaLinkTotalTxStuffs"), ("IMA-MIB", "imaLinkTotalRxStuffs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaLinkIntervalGroup = imaLinkIntervalGroup.setStatus('current')
imaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 8)).setObjects(("IMA-MIB", "imaFailureAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaNotificationsGroup = imaNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("IMA-MIB", ImaTestProcStatus=ImaTestProcStatus, atmfIma=atmfIma, imaLinkEntry=imaLinkEntry, imaLinkGroupIndex=imaLinkGroupIndex, ImaGroupTxClkMode=ImaGroupTxClkMode, imaLinkIntervalTable=imaLinkIntervalTable, imaGroupNumTxCfgLinks=imaGroupNumTxCfgLinks, imaLinkTotalTxStuffs=imaLinkTotalTxStuffs, imaGroupMappingTable=imaGroupMappingTable, imaGroupMinNumTxLinks=imaGroupMinNumTxLinks, imaGroupIntervalNumber=imaGroupIntervalNumber, imaLinkFeSevErroredSecs=imaLinkFeSevErroredSecs, imaLinkTotalNeTxUnusableSecs=imaLinkTotalNeTxUnusableSecs, imaLinkNeRxUnusableSecs=imaLinkNeRxUnusableSecs, imaGroupUnavailSecs=imaGroupUnavailSecs, imaTestPatternGroup=imaTestPatternGroup, imaLinkRelDelay=imaLinkRelDelay, ImaAlarmType=ImaAlarmType, imaLinkIntervalOifAnomalies=imaLinkIntervalOifAnomalies, imaLinkTotalFeRxUnusableSecs=imaLinkTotalFeRxUnusableSecs, imaGroupTestProcStatus=imaGroupTestProcStatus, imaLinkCurrentNeRxNumFailures=imaLinkCurrentNeRxNumFailures, imaLinkCurrentFeSevErroredSecs=imaLinkCurrentFeSevErroredSecs, imaLinkRxTestPattern=imaLinkRxTestPattern, imaLinkIntervalNeTxUnusableSecs=imaLinkIntervalNeTxUnusableSecs, imaLinkCurrentOifAnomalies=imaLinkCurrentOifAnomalies, imaLinkTotalNeRxUnusableSecs=imaLinkTotalNeRxUnusableSecs, ImaLinkFailureStatus=ImaLinkFailureStatus, imaLinkFeTxNumFailures=imaLinkFeTxNumFailures, atmfImaMibCompliance=atmfImaMibCompliance, atmfImaMibObjects=atmfImaMibObjects, imaLinkIntervalNumber=imaLinkIntervalNumber, imaLinkCurrentTxStuffs=imaLinkCurrentTxStuffs, imaGroupTestLinkIfIndex=imaGroupTestLinkIfIndex, imaGroupNumRxCfgLinks=imaGroupNumRxCfgLinks, imaGroupRxFrameLength=imaGroupRxFrameLength, imaLinkIntervalNeRxNumFailures=imaLinkIntervalNeRxNumFailures, imaGroupGroup=imaGroupGroup, imaGroupBetaValue=imaGroupBetaValue, imaLinkNeTxNumFailures=imaLinkNeTxNumFailures, imaLinkTxStuffs=imaLinkTxStuffs, PYSNMP_MODULE_ID=atmfImaMib, imaGroupInvalidIntervals=imaGroupInvalidIntervals, imaGroupTxTimingRefLink=imaGroupTxTimingRefLink, imaLinkTable=imaLinkTable, imaGroupEntry=imaGroupEntry, imaLinkNeTxUnusableSecs=imaLinkNeTxUnusableSecs, imaLinkNeUnavailSecs=imaLinkNeUnavailSecs, imaLinkFeTxUnusableSecs=imaLinkFeTxUnusableSecs, imaLinkIntervalFeRxNumFailures=imaLinkIntervalFeRxNumFailures, imaGroupFeState=imaGroupFeState, imaLinkNeSevErroredSecs=imaLinkNeSevErroredSecs, imaLinkOifAnomalies=imaLinkOifAnomalies, ImaAlarmStatus=ImaAlarmStatus, imaLinkCurrentFeRxUnusableSecs=imaLinkCurrentFeRxUnusableSecs, imaGroupTestPattern=imaGroupTestPattern, imaGroupGammaValue=imaGroupGammaValue, imaLinkImaViolations=imaLinkImaViolations, imaLinkIntervalFeSevErroredSecs=imaLinkIntervalFeSevErroredSecs, imaLinkTotalOifAnomalies=imaLinkTotalOifAnomalies, imaLinkCurrentNeTxUnusableSecs=imaLinkCurrentNeTxUnusableSecs, imaGroupValidIntervals=imaGroupValidIntervals, ImaFrameLength=ImaFrameLength, imaGroupIntervalUnavailSecs=imaGroupIntervalUnavailSecs, imaGroupDiffDelayMaxObs=imaGroupDiffDelayMaxObs, imaGroupIntervalEntry=imaGroupIntervalEntry, imaLinkTotalEntry=imaLinkTotalEntry, imaGroupNeTxClkMode=imaGroupNeTxClkMode, imaLinkRxStuffs=imaLinkRxStuffs, imaLinkCurrentEntry=imaLinkCurrentEntry, imaLinkIntervalFeTxUnusableSecs=imaLinkIntervalFeTxUnusableSecs, imaGroupMappingIndex=imaGroupMappingIndex, imaLinkTotalFeTxNumFailures=imaLinkTotalFeTxNumFailures, imaGroupTotalUnavailSecs=imaGroupTotalUnavailSecs, imaLinkTotalNeRxNumFailures=imaLinkTotalNeRxNumFailures, imaGroupNeNumFailures=imaGroupNeNumFailures, imaLinkIntervalGroup=imaLinkIntervalGroup, imaLinkNeRxNumFailures=imaLinkNeRxNumFailures, imaGroupIntervalGroup=imaGroupIntervalGroup, imaGroupNeState=imaGroupNeState, imaLinkTotalFeRxNumFailures=imaLinkTotalFeRxNumFailures, imaGroupRxAvailCellRate=imaGroupRxAvailCellRate, imaGroupRxOamLabelValue=imaGroupRxOamLabelValue, imaGroupCurrentEntry=imaGroupCurrentEntry, imaLinkFeRxFailureStatus=imaLinkFeRxFailureStatus, imaGroupTotalNeNumFailures=imaGroupTotalNeNumFailures, ImaGroupSymmetry=ImaGroupSymmetry, imaLinkCurrentFeUnavailSecs=imaLinkCurrentFeUnavailSecs, imaFailureAlarm=imaFailureAlarm, imaGroupIndex=imaGroupIndex, imaLinkFeUnavailSecs=imaLinkFeUnavailSecs, imaGroupIfIndex=imaGroupIfIndex, imaGroupRowStatus=imaGroupRowStatus, imaGroupIntervalNeNumFailures=imaGroupIntervalNeNumFailures, ImaGroupFailureStatus=ImaGroupFailureStatus, imaLinkFeTxState=imaLinkFeTxState, atmfImaMibConformance=atmfImaMibConformance, imaGroupFeTxClkMode=imaGroupFeTxClkMode, imaLinkIntervalNeUnavailSecs=imaLinkIntervalNeUnavailSecs, imaGroupCurrentUnavailSecs=imaGroupCurrentUnavailSecs, imaLinkCurrentFeRxNumFailures=imaLinkCurrentFeRxNumFailures, imaAlarmGroup=imaAlarmGroup, ImaGroupState=ImaGroupState, imaGroupTable=imaGroupTable, imaGroupCurrentNeNumFailures=imaGroupCurrentNeNumFailures, imaLinkIntervalImaViolations=imaLinkIntervalImaViolations, imaLinkCurrentNeSevErroredSecs=imaLinkCurrentNeSevErroredSecs, imaGroupRxImaId=imaGroupRxImaId, imaAlarmType=imaAlarmType, imaGroupCurrentTable=imaGroupCurrentTable, imaLinkIntervalNeTxNumFailures=imaLinkIntervalNeTxNumFailures, atmfImaMibGroups=atmfImaMibGroups, imaLinkRxLid=imaLinkRxLid, imaLinkFeRxNumFailures=imaLinkFeRxNumFailures, imaLinkFeRxUnusableSecs=imaLinkFeRxUnusableSecs, imaLinkIntervalNeRxUnusableSecs=imaLinkIntervalNeRxUnusableSecs, imaLinkTotalRxStuffs=imaLinkTotalRxStuffs, imaLinkNeRxFailureStatus=imaLinkNeRxFailureStatus, atmfImaMibCompliances=atmfImaMibCompliances, imaGroupRunningSecs=imaGroupRunningSecs, imaGroupIntervalTable=imaGroupIntervalTable, imaGroupFailureStatus=imaGroupFailureStatus, imaLinkIntervalNeSevErroredSecs=imaLinkIntervalNeSevErroredSecs, imaLinkTotalNeUnavailSecs=imaLinkTotalNeUnavailSecs, imaGroupMappingEntry=imaGroupMappingEntry, atmfImaMibTraps=atmfImaMibTraps, imaLinkIntervalFeUnavailSecs=imaLinkIntervalFeUnavailSecs, imaLinkTimeElapsed=imaLinkTimeElapsed, imaGroupMinNumRxLinks=imaGroupMinNumRxLinks, imaGroupDiffDelayMax=imaGroupDiffDelayMax, imaGroupNumber=imaGroupNumber, imaGroupLeastDelayLink=imaGroupLeastDelayLink, imaGroupCurrentFeNumFailures=imaGroupCurrentFeNumFailures, imaLinkGroup=imaLinkGroup, imaLinkRowStatus=imaLinkRowStatus, imaLinkTotalNeTxNumFailures=imaLinkTotalNeTxNumFailures, imaGroupNumTxActLinks=imaGroupNumTxActLinks, atmForum=atmForum, imaGroupTotalEntry=imaGroupTotalEntry, imaGroupLastChange=imaGroupLastChange, imaLinkNeRxState=imaLinkNeRxState, imaLinkTxLid=imaLinkTxLid, imaGroupTotalTable=imaGroupTotalTable, imaGroupTxFrameLength=imaGroupTxFrameLength, imaGroupIntervalFeNumFailures=imaGroupIntervalFeNumFailures, MilliSeconds=MilliSeconds, imaLinkValidIntervals=imaLinkValidIntervals, imaGroupSymmetry=imaGroupSymmetry, atmForumNetworkManagement=atmForumNetworkManagement, imaLinkIfIndex=imaLinkIfIndex, imaGroupTimeElapsed=imaGroupTimeElapsed, imaLinkTestProcStatus=imaLinkTestProcStatus, imaLinkIntervalFeTxNumFailures=imaLinkIntervalFeTxNumFailures, imaLinkCurrentTable=imaLinkCurrentTable, imaLinkIntervalRxStuffs=imaLinkIntervalRxStuffs, imaLinkCurrentNeTxNumFailures=imaLinkCurrentNeTxNumFailures, imaGroupNumRxActLinks=imaGroupNumRxActLinks, imaLinkInvalidIntervals=imaLinkInvalidIntervals, imaLinkCurrentRxStuffs=imaLinkCurrentRxStuffs, imaGroupTxImaId=imaGroupTxImaId, imaGroupAlphaValue=imaGroupAlphaValue, imaLinkCurrentFeTxNumFailures=imaLinkCurrentFeTxNumFailures, atmfImaMib=atmfImaMib, imaGroupTotalFeNumFailures=imaGroupTotalFeNumFailures, imaGroupTxAvailCellRate=imaGroupTxAvailCellRate, imaNotificationsGroup=imaNotificationsGroup, imaLinkFeRxState=imaLinkFeRxState, imaLinkCurrentNeUnavailSecs=imaLinkCurrentNeUnavailSecs, imaLinkTotalNeSevErroredSecs=imaLinkTotalNeSevErroredSecs, imaLinkTotalImaViolations=imaLinkTotalImaViolations, imaLinkTotalFeSevErroredSecs=imaLinkTotalFeSevErroredSecs, imaLinkTotalFeTxUnusableSecs=imaLinkTotalFeTxUnusableSecs, ImaLinkState=ImaLinkState, atmfImaMibTrapPrefix=atmfImaMibTrapPrefix, imaLinkIntervalTxStuffs=imaLinkIntervalTxStuffs, imaGroupMappingTableGroup=imaGroupMappingTableGroup, imaLinkCurrentNeRxUnusableSecs=imaLinkCurrentNeRxUnusableSecs, imaGroupFeNumFailures=imaGroupFeNumFailures, imaLinkCurrentFeTxUnusableSecs=imaLinkCurrentFeTxUnusableSecs, imaLinkTotalFeUnavailSecs=imaLinkTotalFeUnavailSecs, imaLinkIntervalFeRxUnusableSecs=imaLinkIntervalFeRxUnusableSecs, imaLinkNeTxState=imaLinkNeTxState, imaLinkCurrentImaViolations=imaLinkCurrentImaViolations, imaAlarmStatus=imaAlarmStatus, imaLinkTotalTable=imaLinkTotalTable, imaGroupTxOamLabelValue=imaGroupTxOamLabelValue, imaGroupRxTimingRefLink=imaGroupRxTimingRefLink, imaLinkIntervalEntry=imaLinkIntervalEntry)
