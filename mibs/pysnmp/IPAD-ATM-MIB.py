#
# PySNMP MIB module IPAD-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPAD-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ipad, = mibBuilder.importSymbols("IPADv2-MIB", "ipad")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Counter32, ModuleIdentity, Bits, iso, NotificationType, IpAddress, Integer32, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "Bits", "iso", "NotificationType", "IpAddress", "Integer32", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipadAtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 321, 100, 1, 25))
if mibBuilder.loadTexts: ipadAtm.setLastUpdated('0003270001Z')
if mibBuilder.loadTexts: ipadAtm.setOrganization('Verilink Corporation')
ipadAtmParms = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1))
ipadAtmStatsParms = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2))
ipadAtmVccParms = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3))
ipadAtmVccStatsParms = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4))
ipadAtmCesParms = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 5))
ipadAtmFrParms = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6))
ipadAtmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1), )
if mibBuilder.loadTexts: ipadAtmTable.setStatus('current')
ipadAtmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmIfIndex"))
if mibBuilder.loadTexts: ipadAtmTableEntry.setStatus('current')
ipadAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmIfIndex.setStatus('current')
ipadAtmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("upNoCellSync", 3), ("upCellSync", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmOperStatus.setStatus('current')
ipadAtmVccsOpenedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccsOpenedOK.setStatus('current')
ipadAtmVccsNotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccsNotOpened.setStatus('current')
ipadAtmAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearAlarms", 2), ("clearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmAlarmReset.setStatus('current')
ipadAtmOverSubscriptionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmOverSubscriptionFactor.setStatus('current')
ipadAtmLineBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmLineBandwidth.setStatus('current')
ipadAtmAAL5Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmAAL5Bandwidth.setStatus('current')
ipadAtmOverSubBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmOverSubBandwidth.setStatus('current')
ipadAtmCbrUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmCbrUsedBandwidth.setStatus('current')
ipadAtmVbrUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVbrUsedBandwidth.setStatus('current')
ipadAtmUbrUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmUbrUsedBandwidth.setStatus('current')
ipadAtmQos0Pcr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmQos0Pcr.setStatus('current')
ipadAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1), )
if mibBuilder.loadTexts: ipadAtmStatsTable.setStatus('current')
ipadAtmStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmStatsIndex"), (0, "IPAD-ATM-MIB", "ipadAtmStatsPeriodIndex"))
if mibBuilder.loadTexts: ipadAtmStatsTableEntry.setStatus('current')
ipadAtmStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsIndex.setStatus('current')
ipadAtmStatsPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsPeriodIndex.setStatus('current')
ipadAtmStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsTimeStamp.setStatus('current')
ipadAtmStatsRxFramesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsRxFramesOK.setStatus('current')
ipadAtmStatsTxFramesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsTxFramesOK.setStatus('current')
ipadAtmStatsRxFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsRxFramesError.setStatus('current')
ipadAtmStatsTxFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsTxFramesError.setStatus('current')
ipadAtmStatsRxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsRxBytesOK.setStatus('current')
ipadAtmStatsTxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsTxBytesOK.setStatus('current')
ipadAtmStatsLostSync = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsLostSync.setStatus('current')
ipadAtmStatsOamCellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsOamCellsRx.setStatus('current')
ipadAtmStatsOamCellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmStatsOamCellsTx.setStatus('current')
ipadAtmVccTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1), )
if mibBuilder.loadTexts: ipadAtmVccTable.setStatus('current')
ipadAtmVccTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmVccIndex"), (0, "IPAD-ATM-MIB", "ipadAtmVccVpiIndex"), (0, "IPAD-ATM-MIB", "ipadAtmVccVciIndex"))
if mibBuilder.loadTexts: ipadAtmVccTableEntry.setStatus('current')
ipadAtmVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccIndex.setStatus('current')
ipadAtmVccVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccVpiIndex.setStatus('current')
ipadAtmVccVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccVciIndex.setStatus('current')
ipadAtmVccEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("serialPPPoA", 2), ("vcMux", 3), ("llcMux", 4), ("serialHDLCoA", 5), ("frf5", 6), ("frf8", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccEncapsulationType.setStatus('current')
ipadAtmVccTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("rtVbr", 3), ("nrtVbr", 4), ("abr", 5), ("ubr", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccTrafficType.setStatus('current')
ipadAtmVccChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccChannelRate.setStatus('current')
ipadAtmVccAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearAlarms", 2), ("clearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccAlarmReset.setStatus('current')
ipadAtmVccSLATimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccSLATimer.setStatus('current')
ipadAtmVccRemoteFramesOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteFramesOffered.setStatus('current')
ipadAtmVccFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccFramesReceived.setStatus('current')
ipadAtmVccRemoteDataOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteDataOffered.setStatus('current')
ipadAtmVccDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccDataReceived.setStatus('current')
ipadAtmVccRemoteActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteActive.setStatus('current')
ipadAtmVccRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteVpi.setStatus('current')
ipadAtmVccRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteVci.setStatus('current')
ipadAtmVccRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteIPAddress.setStatus('current')
ipadAtmVccRemoteUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccRemoteUnitId.setStatus('current')
ipadAtmVccEtoeLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackCommand.setStatus('current')
ipadAtmVccEtoeLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackState.setStatus('current')
ipadAtmVccEtoeLoopbackCellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackCellsTx.setStatus('current')
ipadAtmVccEtoeLoopbackCellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackCellsRx.setStatus('current')
ipadAtmVccEtoeLoopbackRttMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackRttMin.setStatus('current')
ipadAtmVccEtoeLoopbackRttMax = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackRttMax.setStatus('current')
ipadAtmVccEtoeLoopbackRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeLoopbackRttAvg.setStatus('current')
ipadAtmVccSegLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackCommand.setStatus('current')
ipadAtmVccSegLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackState.setStatus('current')
ipadAtmVccSegLoopbackCellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackCellsTx.setStatus('current')
ipadAtmVccSegLoopbackCellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackCellsRx.setStatus('current')
ipadAtmVccSegLoopbackRttMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackRttMin.setStatus('current')
ipadAtmVccSegLoopbackRttMax = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackRttMax.setStatus('current')
ipadAtmVccSegLoopbackRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccSegLoopbackRttAvg.setStatus('current')
ipadAtmVccEtoeContCheckCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("activate", 2), ("deactivate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckCommand.setStatus('current')
ipadAtmVccEtoeContCheckAutoActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckAutoActivate.setStatus('current')
ipadAtmVccEtoeContCheckType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("sink", 2), ("source", 3), ("sinkAndSource", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckType.setStatus('current')
ipadAtmVccEtoeContCheckTypeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("sink", 2), ("source", 3), ("sinkAndSource", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckTypeInUse.setStatus('current')
ipadAtmVccEtoeContCheckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ready", 1), ("active", 2), ("activationFailed", 3), ("activating", 4), ("deactivating", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckStatus.setStatus('current')
ipadAtmVccEtoeContCheckCellsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckCellsTx.setStatus('current')
ipadAtmVccEtoeContCheckCellsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeContCheckCellsRx.setStatus('current')
ipadAtmVccEtoeAisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAis", 1), ("ais", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeAisStatus.setStatus('current')
ipadAtmVccEtoeRdiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRdi", 1), ("rdi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccEtoeRdiStatus.setStatus('current')
ipadAtmVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1), )
if mibBuilder.loadTexts: ipadAtmVccStatsTable.setStatus('current')
ipadAtmVccStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmVccStatsIndex"), (0, "IPAD-ATM-MIB", "ipadAtmVccStatsVpiIndex"), (0, "IPAD-ATM-MIB", "ipadAtmVccStatsVciIndex"), (0, "IPAD-ATM-MIB", "ipadAtmVccStatsPeriodIndex"))
if mibBuilder.loadTexts: ipadAtmVccStatsTableEntry.setStatus('current')
ipadAtmVccStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsIndex.setStatus('current')
ipadAtmVccStatsVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsVpiIndex.setStatus('current')
ipadAtmVccStatsVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsVciIndex.setStatus('current')
ipadAtmVccStatsPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsPeriodIndex.setStatus('current')
ipadAtmVccStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsTimeStamp.setStatus('current')
ipadAtmVccStatsRxFramesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesOK.setStatus('current')
ipadAtmVccStatsTxFramesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsTxFramesOK.setStatus('current')
ipadAtmVccStatsRxFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesError.setStatus('current')
ipadAtmVccStatsTxFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsTxFramesError.setStatus('current')
ipadAtmVccStatsRxFramesCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesCLP.setStatus('current')
ipadAtmVccStatsRxFramesCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesCI.setStatus('current')
ipadAtmVccStatsRxFramesAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesAbort.setStatus('current')
ipadAtmVccStatsRxFramesLenViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesLenViolation.setStatus('current')
ipadAtmVccStatsRxFramesCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesCRCError.setStatus('current')
ipadAtmVccStatsRxFramesTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesTimeout.setStatus('current')
ipadAtmVccStatsRxFramesHCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesHCSError.setStatus('current')
ipadAtmVccStatsRxFramesNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxFramesNoBuffer.setStatus('current')
ipadAtmVccStatsRxCellsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxCellsOK.setStatus('current')
ipadAtmVccStatsTxCellsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsTxCellsOK.setStatus('current')
ipadAtmVccStatsRxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRxBytesOK.setStatus('current')
ipadAtmVccStatsTxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsTxBytesOK.setStatus('current')
ipadAtmVccStatsDelayPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsDelayPeak.setStatus('current')
ipadAtmVccStatsDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsDelayAverage.setStatus('current')
ipadAtmVccStatsRoundTripTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRoundTripTimeouts.setStatus('current')
ipadAtmVccStatsRemoteFramesOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRemoteFramesOffered.setStatus('current')
ipadAtmVccStatsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsFramesReceived.setStatus('current')
ipadAtmVccStatsFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsFDR.setStatus('current')
ipadAtmVccStatsRemoteDataOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsRemoteDataOffered.setStatus('current')
ipadAtmVccStatsDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsDataReceived.setStatus('current')
ipadAtmVccStatsDDR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsDDR.setStatus('current')
ipadAtmVccStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmVccStatsUAS.setStatus('current')
ipadAtmCesTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 5, 1), )
if mibBuilder.loadTexts: ipadAtmCesTable.setStatus('current')
ipadAtmCesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 5, 1, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmCesIndex"))
if mibBuilder.loadTexts: ipadAtmCesTableEntry.setStatus('current')
ipadAtmCesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmCesIndex.setStatus('current')
ipadAtmCesPayloadScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmCesPayloadScrambling.setStatus('current')
ipadAtmCesAutoChannelConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmCesAutoChannelConfiguration.setStatus('current')
ipadAtmFrf5SvcTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1), )
if mibBuilder.loadTexts: ipadAtmFrf5SvcTable.setStatus('current')
ipadAtmFrf5SvcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmFrf5SvcIfIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf5SvcVpiIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf5SvcVciIndex"))
if mibBuilder.loadTexts: ipadAtmFrf5SvcTableEntry.setStatus('current')
ipadAtmFrf5SvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5SvcIfIndex.setStatus('current')
ipadAtmFrf5SvcVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5SvcVpiIndex.setStatus('current')
ipadAtmFrf5SvcVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5SvcVciIndex.setStatus('current')
ipadAtmFrf5SvcDeToClpMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2Const0", 2), ("mode2Const1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcDeToClpMappingMode.setStatus('current')
ipadAtmFrf5SvcClpToDeMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcClpToDeMappingMode.setStatus('current')
ipadAtmFrf5SvcN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcN1.setStatus('current')
ipadAtmFrf5SvcN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcN2.setStatus('current')
ipadAtmFrf5SvcN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcN3.setStatus('current')
ipadAtmFrf5SvcT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcT1.setStatus('current')
ipadAtmFrf5SvcT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 245))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcT2.setStatus('current')
ipadAtmFrf5SvcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5SvcActive.setStatus('current')
ipadAtmFrf5SvcAddDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcAddDLCI.setStatus('current')
ipadAtmFrf5SvcDeleteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5SvcDeleteDLCI.setStatus('current')
ipadAtmFrf5DlciTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2), )
if mibBuilder.loadTexts: ipadAtmFrf5DlciTable.setStatus('current')
ipadAtmFrf5DlciTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmFrf5DlciIfIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf5DlciVpiIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf5DlciVciIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf5DlciIndex"))
if mibBuilder.loadTexts: ipadAtmFrf5DlciTableEntry.setStatus('current')
ipadAtmFrf5DlciIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5DlciIfIndex.setStatus('current')
ipadAtmFrf5DlciVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5DlciVpiIndex.setStatus('current')
ipadAtmFrf5DlciVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5DlciVciIndex.setStatus('current')
ipadAtmFrf5DlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5DlciIndex.setStatus('current')
ipadAtmFrf5DlciEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf5DlciEndpointName.setStatus('current')
ipadAtmFrf5DlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("inactiveLearned", 2), ("active", 3), ("activeLearned", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5DlciStatus.setStatus('current')
ipadAtmFrf5DlciCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf5DlciCongestion.setStatus('current')
ipadAtmFrf8SvcTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3), )
if mibBuilder.loadTexts: ipadAtmFrf8SvcTable.setStatus('current')
ipadAtmFrf8SvcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1), ).setIndexNames((0, "IPAD-ATM-MIB", "ipadAtmFrf8SvcIfIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf8SvcVpiIndex"), (0, "IPAD-ATM-MIB", "ipadAtmFrf8SvcVciIndex"))
if mibBuilder.loadTexts: ipadAtmFrf8SvcTableEntry.setStatus('current')
ipadAtmFrf8SvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf8SvcIfIndex.setStatus('current')
ipadAtmFrf8SvcVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf8SvcVpiIndex.setStatus('current')
ipadAtmFrf8SvcVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAtmFrf8SvcVciIndex.setStatus('current')
ipadAtmFrf8SvcDeToClpMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2Const0", 2), ("mode2Const1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf8SvcDeToClpMappingMode.setStatus('current')
ipadAtmFrf8SvcClpToDeMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2Const0", 2), ("mode2Const1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf8SvcClpToDeMappingMode.setStatus('current')
ipadAtmFrf8SvcCongestionMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf8SvcCongestionMappingMode.setStatus('current')
ipadAtmFrf8SvcEncapsulationMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparentMode", 1), ("translationMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf8SvcEncapsulationMappingMode.setStatus('current')
ipadAtmFrf8SvcEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 25, 6, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAtmFrf8SvcEndpointName.setStatus('current')
mibBuilder.exportSymbols("IPAD-ATM-MIB", ipadAtmStatsTable=ipadAtmStatsTable, ipadAtmStatsRxFramesOK=ipadAtmStatsRxFramesOK, ipadAtmVccSLATimer=ipadAtmVccSLATimer, ipadAtmCesIndex=ipadAtmCesIndex, ipadAtm=ipadAtm, ipadAtmVccSegLoopbackRttMax=ipadAtmVccSegLoopbackRttMax, ipadAtmFrf5SvcT1=ipadAtmFrf5SvcT1, ipadAtmVccParms=ipadAtmVccParms, ipadAtmVccStatsVciIndex=ipadAtmVccStatsVciIndex, ipadAtmStatsTxBytesOK=ipadAtmStatsTxBytesOK, ipadAtmVccStatsFDR=ipadAtmVccStatsFDR, ipadAtmVccStatsTable=ipadAtmVccStatsTable, ipadAtmVccIndex=ipadAtmVccIndex, ipadAtmVccStatsRxFramesCI=ipadAtmVccStatsRxFramesCI, ipadAtmVccEtoeLoopbackCellsTx=ipadAtmVccEtoeLoopbackCellsTx, ipadAtmVccEtoeLoopbackCellsRx=ipadAtmVccEtoeLoopbackCellsRx, ipadAtmVccStatsRxCellsOK=ipadAtmVccStatsRxCellsOK, ipadAtmVccStatsRxBytesOK=ipadAtmVccStatsRxBytesOK, ipadAtmVccEncapsulationType=ipadAtmVccEncapsulationType, ipadAtmVccAlarmReset=ipadAtmVccAlarmReset, ipadAtmFrf5SvcIfIndex=ipadAtmFrf5SvcIfIndex, ipadAtmQos0Pcr=ipadAtmQos0Pcr, ipadAtmStatsIndex=ipadAtmStatsIndex, ipadAtmVccVciIndex=ipadAtmVccVciIndex, ipadAtmVccStatsTimeStamp=ipadAtmVccStatsTimeStamp, ipadAtmVccEtoeLoopbackRttMin=ipadAtmVccEtoeLoopbackRttMin, ipadAtmFrf8SvcCongestionMappingMode=ipadAtmFrf8SvcCongestionMappingMode, ipadAtmVccStatsTxFramesError=ipadAtmVccStatsTxFramesError, ipadAtmVccEtoeRdiStatus=ipadAtmVccEtoeRdiStatus, ipadAtmFrf5DlciIfIndex=ipadAtmFrf5DlciIfIndex, ipadAtmStatsTxFramesError=ipadAtmStatsTxFramesError, ipadAtmFrf5SvcTable=ipadAtmFrf5SvcTable, ipadAtmFrf8SvcVciIndex=ipadAtmFrf8SvcVciIndex, ipadAtmVccEtoeContCheckCellsTx=ipadAtmVccEtoeContCheckCellsTx, ipadAtmStatsTimeStamp=ipadAtmStatsTimeStamp, ipadAtmVccStatsRxFramesOK=ipadAtmVccStatsRxFramesOK, ipadAtmVccVpiIndex=ipadAtmVccVpiIndex, ipadAtmVccStatsRxFramesTimeout=ipadAtmVccStatsRxFramesTimeout, ipadAtmCesTableEntry=ipadAtmCesTableEntry, ipadAtmVccStatsTxBytesOK=ipadAtmVccStatsTxBytesOK, ipadAtmVccStatsTableEntry=ipadAtmVccStatsTableEntry, ipadAtmVccDataReceived=ipadAtmVccDataReceived, ipadAtmFrf5SvcVpiIndex=ipadAtmFrf5SvcVpiIndex, ipadAtmVccEtoeLoopbackState=ipadAtmVccEtoeLoopbackState, ipadAtmStatsOamCellsRx=ipadAtmStatsOamCellsRx, ipadAtmVccStatsPeriodIndex=ipadAtmVccStatsPeriodIndex, ipadAtmVccSegLoopbackRttMin=ipadAtmVccSegLoopbackRttMin, ipadAtmFrf5SvcT2=ipadAtmFrf5SvcT2, ipadAtmVccRemoteIPAddress=ipadAtmVccRemoteIPAddress, ipadAtmVccEtoeContCheckStatus=ipadAtmVccEtoeContCheckStatus, ipadAtmStatsLostSync=ipadAtmStatsLostSync, ipadAtmFrf8SvcTableEntry=ipadAtmFrf8SvcTableEntry, ipadAtmVbrUsedBandwidth=ipadAtmVbrUsedBandwidth, ipadAtmVccSegLoopbackCommand=ipadAtmVccSegLoopbackCommand, ipadAtmVccStatsRemoteFramesOffered=ipadAtmVccStatsRemoteFramesOffered, ipadAtmOverSubBandwidth=ipadAtmOverSubBandwidth, ipadAtmStatsTableEntry=ipadAtmStatsTableEntry, ipadAtmVccRemoteActive=ipadAtmVccRemoteActive, ipadAtmVccStatsDataReceived=ipadAtmVccStatsDataReceived, ipadAtmFrf5SvcN3=ipadAtmFrf5SvcN3, ipadAtmVccTableEntry=ipadAtmVccTableEntry, ipadAtmAlarmReset=ipadAtmAlarmReset, ipadAtmCesAutoChannelConfiguration=ipadAtmCesAutoChannelConfiguration, ipadAtmVccStatsDelayAverage=ipadAtmVccStatsDelayAverage, ipadAtmVccRemoteVci=ipadAtmVccRemoteVci, ipadAtmTable=ipadAtmTable, PYSNMP_MODULE_ID=ipadAtm, ipadAtmFrf5DlciTableEntry=ipadAtmFrf5DlciTableEntry, ipadAtmVccEtoeLoopbackRttMax=ipadAtmVccEtoeLoopbackRttMax, ipadAtmVccStatsIndex=ipadAtmVccStatsIndex, ipadAtmVccStatsRxFramesError=ipadAtmVccStatsRxFramesError, ipadAtmFrf8SvcIfIndex=ipadAtmFrf8SvcIfIndex, ipadAtmVccRemoteFramesOffered=ipadAtmVccRemoteFramesOffered, ipadAtmUbrUsedBandwidth=ipadAtmUbrUsedBandwidth, ipadAtmOverSubscriptionFactor=ipadAtmOverSubscriptionFactor, ipadAtmFrf8SvcVpiIndex=ipadAtmFrf8SvcVpiIndex, ipadAtmVccStatsTxFramesOK=ipadAtmVccStatsTxFramesOK, ipadAtmCesPayloadScrambling=ipadAtmCesPayloadScrambling, ipadAtmVccSegLoopbackState=ipadAtmVccSegLoopbackState, ipadAtmFrf5SvcN1=ipadAtmFrf5SvcN1, ipadAtmIfIndex=ipadAtmIfIndex, ipadAtmFrf5DlciIndex=ipadAtmFrf5DlciIndex, ipadAtmFrf5DlciEndpointName=ipadAtmFrf5DlciEndpointName, ipadAtmVccStatsVpiIndex=ipadAtmVccStatsVpiIndex, ipadAtmFrf5DlciCongestion=ipadAtmFrf5DlciCongestion, ipadAtmVccStatsParms=ipadAtmVccStatsParms, ipadAtmVccStatsDDR=ipadAtmVccStatsDDR, ipadAtmFrf5DlciStatus=ipadAtmFrf5DlciStatus, ipadAtmVccEtoeContCheckTypeInUse=ipadAtmVccEtoeContCheckTypeInUse, ipadAtmVccStatsRxFramesAbort=ipadAtmVccStatsRxFramesAbort, ipadAtmFrf8SvcClpToDeMappingMode=ipadAtmFrf8SvcClpToDeMappingMode, ipadAtmVccEtoeContCheckAutoActivate=ipadAtmVccEtoeContCheckAutoActivate, ipadAtmStatsRxFramesError=ipadAtmStatsRxFramesError, ipadAtmFrf5SvcTableEntry=ipadAtmFrf5SvcTableEntry, ipadAtmVccEtoeLoopbackRttAvg=ipadAtmVccEtoeLoopbackRttAvg, ipadAtmCesParms=ipadAtmCesParms, ipadAtmCesTable=ipadAtmCesTable, ipadAtmFrf5SvcClpToDeMappingMode=ipadAtmFrf5SvcClpToDeMappingMode, ipadAtmVccStatsRoundTripTimeouts=ipadAtmVccStatsRoundTripTimeouts, ipadAtmFrf5DlciTable=ipadAtmFrf5DlciTable, ipadAtmVccSegLoopbackRttAvg=ipadAtmVccSegLoopbackRttAvg, ipadAtmFrf5SvcVciIndex=ipadAtmFrf5SvcVciIndex, ipadAtmVccTable=ipadAtmVccTable, ipadAtmFrf5DlciVpiIndex=ipadAtmFrf5DlciVpiIndex, ipadAtmVccSegLoopbackCellsTx=ipadAtmVccSegLoopbackCellsTx, ipadAtmVccFramesReceived=ipadAtmVccFramesReceived, ipadAtmStatsRxBytesOK=ipadAtmStatsRxBytesOK, ipadAtmFrf8SvcEndpointName=ipadAtmFrf8SvcEndpointName, ipadAtmTableEntry=ipadAtmTableEntry, ipadAtmVccStatsUAS=ipadAtmVccStatsUAS, ipadAtmVccStatsDelayPeak=ipadAtmVccStatsDelayPeak, ipadAtmVccStatsRemoteDataOffered=ipadAtmVccStatsRemoteDataOffered, ipadAtmStatsTxFramesOK=ipadAtmStatsTxFramesOK, ipadAtmStatsParms=ipadAtmStatsParms, ipadAtmVccRemoteUnitId=ipadAtmVccRemoteUnitId, ipadAtmVccEtoeContCheckType=ipadAtmVccEtoeContCheckType, ipadAtmVccChannelRate=ipadAtmVccChannelRate, ipadAtmAAL5Bandwidth=ipadAtmAAL5Bandwidth, ipadAtmFrf8SvcDeToClpMappingMode=ipadAtmFrf8SvcDeToClpMappingMode, ipadAtmStatsOamCellsTx=ipadAtmStatsOamCellsTx, ipadAtmFrParms=ipadAtmFrParms, ipadAtmVccEtoeLoopbackCommand=ipadAtmVccEtoeLoopbackCommand, ipadAtmVccStatsRxFramesLenViolation=ipadAtmVccStatsRxFramesLenViolation, ipadAtmParms=ipadAtmParms, ipadAtmVccRemoteDataOffered=ipadAtmVccRemoteDataOffered, ipadAtmVccsNotOpened=ipadAtmVccsNotOpened, ipadAtmFrf5SvcN2=ipadAtmFrf5SvcN2, ipadAtmVccEtoeContCheckCommand=ipadAtmVccEtoeContCheckCommand, ipadAtmOperStatus=ipadAtmOperStatus, ipadAtmVccStatsTxCellsOK=ipadAtmVccStatsTxCellsOK, ipadAtmFrf5DlciVciIndex=ipadAtmFrf5DlciVciIndex, ipadAtmVccStatsRxFramesHCSError=ipadAtmVccStatsRxFramesHCSError, ipadAtmCbrUsedBandwidth=ipadAtmCbrUsedBandwidth, ipadAtmVccStatsRxFramesCRCError=ipadAtmVccStatsRxFramesCRCError, ipadAtmVccTrafficType=ipadAtmVccTrafficType, ipadAtmLineBandwidth=ipadAtmLineBandwidth, ipadAtmVccsOpenedOK=ipadAtmVccsOpenedOK, ipadAtmFrf5SvcDeToClpMappingMode=ipadAtmFrf5SvcDeToClpMappingMode, ipadAtmFrf5SvcActive=ipadAtmFrf5SvcActive, ipadAtmVccEtoeAisStatus=ipadAtmVccEtoeAisStatus, ipadAtmFrf8SvcTable=ipadAtmFrf8SvcTable, ipadAtmVccStatsRxFramesCLP=ipadAtmVccStatsRxFramesCLP, ipadAtmVccStatsFramesReceived=ipadAtmVccStatsFramesReceived, ipadAtmStatsPeriodIndex=ipadAtmStatsPeriodIndex, ipadAtmFrf5SvcAddDLCI=ipadAtmFrf5SvcAddDLCI, ipadAtmVccSegLoopbackCellsRx=ipadAtmVccSegLoopbackCellsRx, ipadAtmFrf5SvcDeleteDLCI=ipadAtmFrf5SvcDeleteDLCI, ipadAtmVccRemoteVpi=ipadAtmVccRemoteVpi, ipadAtmVccEtoeContCheckCellsRx=ipadAtmVccEtoeContCheckCellsRx, ipadAtmFrf8SvcEncapsulationMappingMode=ipadAtmFrf8SvcEncapsulationMappingMode, ipadAtmVccStatsRxFramesNoBuffer=ipadAtmVccStatsRxFramesNoBuffer)
