#
# PySNMP MIB module DLM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ctronDLM, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctronDLM")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, Gauge32, Integer32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Gauge32", "Integer32", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snmpPollTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1), )
if mibBuilder.loadTexts: snmpPollTable.setStatus('mandatory')
snmpPollEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1), ).setIndexNames((0, "DLM-MIB", "snmpPollDestination"), (0, "DLM-MIB", "snmpPollOwner"))
if mibBuilder.loadTexts: snmpPollEntry.setStatus('mandatory')
snmpPollDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPollDestination.setStatus('mandatory')
snmpPollOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPollOwner.setStatus('mandatory')
snmpPollCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 3), OctetString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollCommunity.setStatus('mandatory')
snmpPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollInterval.setStatus('mandatory')
snmpPollRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 5), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollRetry.setStatus('mandatory')
snmpPollAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("send-trap", 2))).clone('send-trap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollAction.setStatus('mandatory')
snmpPollTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollTrapAddress.setStatus('mandatory')
snmpPollType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("activate", 3), ("suspend", 4))).clone('activate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollType.setStatus('mandatory')
snmpPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("lost-contact", 3), ("alarm-condition", 4), ("general-failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPollStatus.setStatus('mandatory')
snmpPollRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPollRequests.setStatus('mandatory')
snmpPollLastContact = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPollLastContact.setStatus('mandatory')
snmpPollLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPollLastAlarm.setStatus('mandatory')
snmpPollAlarmWait = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 13), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollAlarmWait.setStatus('mandatory')
snmpPollTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 14), OctetString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollTrapCommunity.setStatus('mandatory')
snmpPollProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internet-ping", 1), ("snmp", 2))).clone('internet-ping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPollProtocol.setStatus('mandatory')
snmpOIDTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2), )
if mibBuilder.loadTexts: snmpOIDTable.setStatus('mandatory')
snmpOIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1), ).setIndexNames((0, "DLM-MIB", "snmpOIDDestination"), (0, "DLM-MIB", "snmpOIDOwner"), (0, "DLM-MIB", "snmpOIDSequence"))
if mibBuilder.loadTexts: snmpOIDEntry.setStatus('mandatory')
snmpOIDDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDDestination.setStatus('mandatory')
snmpOIDOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDOwner.setStatus('mandatory')
snmpOIDSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDSequence.setStatus('mandatory')
snmpOIDObject = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDObject.setStatus('mandatory')
snmpOIDComparator = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("equal", 1), ("greater", 2), ("less", 3), ("greater-or-equal", 4), ("less-or-equal", 5), ("trap-always", 6), ("dont-compare", 7), ("not-equal", 8))).clone('dont-compare')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDComparator.setStatus('mandatory')
snmpOIDEnumType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("integer", 1), ("counter", 2), ("gauge", 3), ("ticks", 4))).clone('ticks')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDEnumType.setStatus('mandatory')
snmpOIDThresholdInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDThresholdInteger.setStatus('mandatory')
snmpOIDThresholdCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDThresholdCounter.setStatus('mandatory')
snmpOIDThresholdGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 9), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDThresholdGauge.setStatus('mandatory')
snmpOIDThresholdTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDThresholdTicks.setStatus('mandatory')
snmpOIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("activate", 3), ("suspend", 4))).clone('activate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpOIDType.setStatus('mandatory')
snmpOIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("alarm-condition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOIDStatus.setStatus('mandatory')
snmpOIDLastValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOIDLastValue.setStatus('mandatory')
mibBuilder.exportSymbols("DLM-MIB", snmpPollLastContact=snmpPollLastContact, snmpOIDLastValue=snmpOIDLastValue, snmpPollOwner=snmpPollOwner, snmpOIDObject=snmpOIDObject, snmpPollAlarmWait=snmpPollAlarmWait, snmpPollCommunity=snmpPollCommunity, snmpOIDEntry=snmpOIDEntry, snmpPollStatus=snmpPollStatus, snmpPollTrapCommunity=snmpPollTrapCommunity, snmpPollLastAlarm=snmpPollLastAlarm, snmpPollTable=snmpPollTable, snmpPollTrapAddress=snmpPollTrapAddress, snmpPollDestination=snmpPollDestination, snmpOIDDestination=snmpOIDDestination, snmpPollRequests=snmpPollRequests, snmpPollAction=snmpPollAction, snmpOIDSequence=snmpOIDSequence, snmpPollProtocol=snmpPollProtocol, snmpOIDOwner=snmpOIDOwner, snmpOIDStatus=snmpOIDStatus, snmpOIDType=snmpOIDType, snmpOIDThresholdTicks=snmpOIDThresholdTicks, snmpOIDEnumType=snmpOIDEnumType, snmpPollRetry=snmpPollRetry, snmpOIDComparator=snmpOIDComparator, snmpPollType=snmpPollType, snmpOIDThresholdGauge=snmpOIDThresholdGauge, snmpPollEntry=snmpPollEntry, snmpOIDTable=snmpOIDTable, snmpOIDThresholdCounter=snmpOIDThresholdCounter, snmpOIDThresholdInteger=snmpOIDThresholdInteger, snmpPollInterval=snmpPollInterval)
