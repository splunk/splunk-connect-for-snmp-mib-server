#
# PySNMP MIB module CISCO-SWITCH-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:57:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
QosLayer2Cos, Percent = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "QosLayer2Cos", "Percent")
QosMutationMapNameOrEmpty, QosQueueNumber, QosIpPrecedence, QosMplsExpValue, QosPolicerType, QosMutationMapName, QosThresholdNumber = mibBuilder.importSymbols("CISCO-QOS-TC-MIB", "QosMutationMapNameOrEmpty", "QosQueueNumber", "QosIpPrecedence", "QosMplsExpValue", "QosPolicerType", "QosMutationMapName", "QosThresholdNumber")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
IfDirection, = mibBuilder.importSymbols("DIFFSERV-MIB", "IfDirection")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, MibIdentifier, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Unsigned32, Gauge32, NotificationType, Counter64, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "MibIdentifier", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Unsigned32", "Gauge32", "NotificationType", "Counter64", "IpAddress", "Counter32")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
ciscoSwitchQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 580))
ciscoSwitchQosMIB.setRevisions(('2016-06-30 00:00', '2014-09-19 00:00', '2013-09-26 00:00', '2013-04-22 00:00', '2010-11-17 00:00', '2009-07-20 00:00', '2009-02-23 00:00', '2006-11-20 00:00', '2006-09-18 00:00',))
if mibBuilder.loadTexts: ciscoSwitchQosMIB.setLastUpdated('201606300000Z')
if mibBuilder.loadTexts: ciscoSwitchQosMIB.setOrganization('Cisco Systems, Inc.')
ciscoSwitchQosMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 0))
ciscoSwitchQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1))
ciscoSwitchQosMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 2))
csqGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1))
csqMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2))
csqMutations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3))
csqInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4))
csqStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5))
csqPolicerUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6))
csqModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7))
class QosStatsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("ucastSentPkts", 1), ("ucastSentBytes", 2), ("mcastSentPkts", 3), ("mcastSentBytes", 4), ("ucastDroppedPkts", 5), ("ucastDroppedBytes", 6), ("mcastDroppedPkts", 7), ("mcastDroppedBytes", 8), ("sentPkts", 9), ("receivedPkts", 10), ("droppedIngressPkts", 11), ("ucastSentXbarPkts", 12), ("ucastRecvXbarPkts", 13), ("mcastSentXbarPkts", 14), ("mcastRecvXbarPkts", 15), ("ucastSentOobfcPkts", 16), ("ucastSentOobfcBytes", 17), ("ucastDroppedOobfcPkts", 18), ("ucastDroppedOobfcBytes", 19), ("ucastWatchdogDroppedPkts", 20))

csqDscpRewriteEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpRewriteEnable.setStatus('current')
csqPoliceRedirectedTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqPoliceRedirectedTrafficEnable.setStatus('current')
csqPortQueueingModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqPortQueueingModeEnable.setStatus('current')
csqMarkingStatisticsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqMarkingStatisticsEnable.setStatus('current')
csqTenGOnlyMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqTenGOnlyMode.setStatus('current')
csqServicePoolCellSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqServicePoolCellSize.setStatus('current')
csqCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1), )
if mibBuilder.loadTexts: csqCosToDscpTable.setStatus('current')
csqCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqCosToDscpCos"))
if mibBuilder.loadTexts: csqCosToDscpEntry.setStatus('current')
csqCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: csqCosToDscpCos.setStatus('current')
csqCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 1, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqCosToDscpDscp.setStatus('current')
csqIpPrecToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2), )
if mibBuilder.loadTexts: csqIpPrecToDscpTable.setStatus('current')
csqIpPrecToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqIpPrecToDscpIpPrec"))
if mibBuilder.loadTexts: csqIpPrecToDscpEntry.setStatus('current')
csqIpPrecToDscpIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2, 1, 1), QosIpPrecedence())
if mibBuilder.loadTexts: csqIpPrecToDscpIpPrec.setStatus('current')
csqIpPrecToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 2, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIpPrecToDscpDscp.setStatus('current')
csqExpToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3), )
if mibBuilder.loadTexts: csqExpToDscpTable.setStatus('current')
csqExpToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqExpToDscpExp"))
if mibBuilder.loadTexts: csqExpToDscpEntry.setStatus('current')
csqExpToDscpExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3, 1, 1), QosMplsExpValue())
if mibBuilder.loadTexts: csqExpToDscpExp.setStatus('current')
csqExpToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 3, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqExpToDscpDscp.setStatus('current')
csqDscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4), )
if mibBuilder.loadTexts: csqDscpMappingTable.setStatus('current')
csqDscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqDscpMappingDscp"))
if mibBuilder.loadTexts: csqDscpMappingEntry.setStatus('current')
csqDscpMappingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 1), Dscp())
if mibBuilder.loadTexts: csqDscpMappingDscp.setStatus('current')
csqDscpMappingCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 2), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingCos.setStatus('current')
csqDscpMappingExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 3), QosMplsExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingExp.setStatus('current')
csqDscpMappingNormalBurstDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 4), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingNormalBurstDscp.setStatus('current')
csqDscpMappingMaxBurstDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 2, 4, 1, 5), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMappingMaxBurstDscp.setStatus('current')
csqMaxCosMutationMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqMaxCosMutationMap.setStatus('current')
csqCosMutationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2), )
if mibBuilder.loadTexts: csqCosMutationTable.setStatus('current')
csqCosMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2, 1), ).setIndexNames((1, "CISCO-SWITCH-QOS-MIB", "csqCosMutationMapName"))
if mibBuilder.loadTexts: csqCosMutationEntry.setStatus('current')
csqCosMutationMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2, 1, 1), QosMutationMapName())
if mibBuilder.loadTexts: csqCosMutationMapName.setStatus('current')
csqCosMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqCosMutationRowStatus.setStatus('current')
csqCosMutationMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3), )
if mibBuilder.loadTexts: csqCosMutationMappingTable.setStatus('current')
csqCosMutationMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqCosMutationMapName"), (0, "CISCO-SWITCH-QOS-MIB", "csqCosMutationFromCos"))
if mibBuilder.loadTexts: csqCosMutationMappingEntry.setStatus('current')
csqCosMutationFromCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: csqCosMutationFromCos.setStatus('current')
csqCosMutationToCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 3, 1, 2), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqCosMutationToCos.setStatus('current')
csqMaxDscpMutationMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqMaxDscpMutationMap.setStatus('current')
csqDscpMutationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5), )
if mibBuilder.loadTexts: csqDscpMutationTable.setStatus('current')
csqDscpMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5, 1), ).setIndexNames((1, "CISCO-SWITCH-QOS-MIB", "csqDscpMutationMapName"))
if mibBuilder.loadTexts: csqDscpMutationEntry.setStatus('current')
csqDscpMutationMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5, 1, 1), QosMutationMapName())
if mibBuilder.loadTexts: csqDscpMutationMapName.setStatus('current')
csqDscpMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqDscpMutationRowStatus.setStatus('current')
csqDscpMutationMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6), )
if mibBuilder.loadTexts: csqDscpMutationMappingTable.setStatus('current')
csqDscpMutationMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqDscpMutationMapName"), (0, "CISCO-SWITCH-QOS-MIB", "csqDscpMutationFromDscp"))
if mibBuilder.loadTexts: csqDscpMutationMappingEntry.setStatus('current')
csqDscpMutationFromDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6, 1, 1), Dscp())
if mibBuilder.loadTexts: csqDscpMutationFromDscp.setStatus('current')
csqDscpMutationToDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 6, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqDscpMutationToDscp.setStatus('current')
csqMaxExpMutationMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqMaxExpMutationMap.setStatus('current')
csqExpMutationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8), )
if mibBuilder.loadTexts: csqExpMutationTable.setStatus('current')
csqExpMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8, 1), ).setIndexNames((1, "CISCO-SWITCH-QOS-MIB", "csqExpMutationMapName"))
if mibBuilder.loadTexts: csqExpMutationEntry.setStatus('current')
csqExpMutationMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8, 1, 1), QosMutationMapName())
if mibBuilder.loadTexts: csqExpMutationMapName.setStatus('current')
csqExpMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqExpMutationRowStatus.setStatus('current')
csqExpMutationMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9), )
if mibBuilder.loadTexts: csqExpMutationMappingTable.setStatus('current')
csqExpMutationMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9, 1), ).setIndexNames((0, "CISCO-SWITCH-QOS-MIB", "csqExpMutationMapName"), (0, "CISCO-SWITCH-QOS-MIB", "csqExpMutationFromExp"))
if mibBuilder.loadTexts: csqExpMutationMappingEntry.setStatus('current')
csqExpMutationFromExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9, 1, 1), QosMplsExpValue())
if mibBuilder.loadTexts: csqExpMutationFromExp.setStatus('current')
csqExpMutationToExp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 9, 1, 2), QosMplsExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqExpMutationToExp.setStatus('current')
csqIfMutationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10), )
if mibBuilder.loadTexts: csqIfMutationConfigTable.setStatus('current')
csqIfMutationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfMutationConfigEntry.setStatus('current')
csqIfCosMutationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 1), QosMutationMapNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfCosMutationMap.setStatus('current')
csqIfDscpMutationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 2), QosMutationMapNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfDscpMutationMap.setStatus('current')
csqIfExpMutationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 3), QosMutationMapNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfExpMutationMap.setStatus('current')
csqIfMutationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 3, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csqIfMutationRowStatus.setStatus('current')
csqIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1), )
if mibBuilder.loadTexts: csqIfConfigTable.setStatus('current')
csqIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfConfigEntry.setStatus('current')
csqIfDefaultCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 1), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDefaultCos.setStatus('current')
csqIfTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCoS", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfTrustState.setStatus('current')
csqIfQueueModeCpb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("cos", 0), ("dscp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQueueModeCpb.setStatus('current')
csqIfConfigQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cos", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfConfigQueueMode.setStatus('current')
csqIfIngressPolicyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfIngressPolicyMap.setStatus('current')
csqIfEgressPolicyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfEgressPolicyMap.setStatus('current')
csqIfIngressQueueingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfIngressQueueingEnable.setStatus('current')
csqIfEgressQueueingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfEgressQueueingEnable.setStatus('current')
csqIfQueueingTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCoS", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQueueingTrustState.setStatus('current')
csqIfCosToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2), )
if mibBuilder.loadTexts: csqIfCosToQueueTable.setStatus('current')
csqIfCosToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueCos"))
if mibBuilder.loadTexts: csqIfCosToQueueEntry.setStatus('current')
csqIfCosToQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfCosToQueueDirection.setStatus('current')
csqIfCosToQueueCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 2), QosLayer2Cos())
if mibBuilder.loadTexts: csqIfCosToQueueCos.setStatus('current')
csqIfCosToQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 3), QosQueueNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfCosToQueueQueueNumber.setStatus('current')
csqIfCosToQueueThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 2, 1, 4), QosThresholdNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfCosToQueueThresholdNumber.setStatus('current')
csqIfDscpToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3), )
if mibBuilder.loadTexts: csqIfDscpToQueueTable.setStatus('current')
csqIfDscpToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueDscp"))
if mibBuilder.loadTexts: csqIfDscpToQueueEntry.setStatus('current')
csqIfDscpToQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfDscpToQueueDirection.setStatus('current')
csqIfDscpToQueueDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 2), Dscp())
if mibBuilder.loadTexts: csqIfDscpToQueueDscp.setStatus('current')
csqIfDscpToQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 3), QosQueueNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDscpToQueueQueueNumber.setStatus('current')
csqIfDscpToQueueThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 3, 1, 4), QosThresholdNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDscpToQueueThresholdNumber.setStatus('current')
csqIfDropConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4), )
if mibBuilder.loadTexts: csqIfDropConfigTable.setStatus('current')
csqIfDropConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDropConfigDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDropConfigQueueIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfDropConfigThresholdIndex"))
if mibBuilder.loadTexts: csqIfDropConfigEntry.setStatus('current')
csqIfDropConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfDropConfigDirection.setStatus('current')
csqIfDropConfigQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 2), QosQueueNumber())
if mibBuilder.loadTexts: csqIfDropConfigQueueIndex.setStatus('current')
csqIfDropConfigThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 3), QosThresholdNumber())
if mibBuilder.loadTexts: csqIfDropConfigThresholdIndex.setStatus('current')
csqIfDropConfigDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tailDrop", 1), ("wred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigDropAlgorithm.setStatus('current')
csqIfDropConfigDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 5), Percent().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigDropThreshold.setStatus('current')
csqIfDropConfigMinWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 6), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigMinWredThreshold.setStatus('current')
csqIfDropConfigMaxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 7), Percent().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigMaxWredThreshold.setStatus('current')
csqIfDropConfigQueueBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shared", 1), ("dedicated", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfDropConfigQueueBuffer.setStatus('current')
csqIfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5), )
if mibBuilder.loadTexts: csqIfQueueTable.setStatus('current')
csqIfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQueueDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQueueNumber"))
if mibBuilder.loadTexts: csqIfQueueEntry.setStatus('current')
csqIfQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfQueueDirection.setStatus('current')
csqIfQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 2), QosQueueNumber())
if mibBuilder.loadTexts: csqIfQueueNumber.setStatus('current')
csqIfQueueWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueWrrWeight.setStatus('current')
csqIfQueueSizeWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueSizeWeight.setStatus('current')
csqIfQueueStatsGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perQueue", 1), ("perQueueThresh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQueueStatsGranularity.setStatus('current')
csqIfQueueClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueClassMapName.setStatus('current')
csqIfQueueScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrr", 1), ("srr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueScheduling.setStatus('current')
csqIfQueueSrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfQueueSrrWeight.setStatus('current')
csqIfModeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 6), )
if mibBuilder.loadTexts: csqIfModeConfigTable.setStatus('current')
csqIfModeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfModeConfigEntry.setStatus('current')
csqIfVlanBasedQosModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfVlanBasedQosModeEnable.setStatus('current')
csqIfConsistencyCheckTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 7), )
if mibBuilder.loadTexts: csqIfConsistencyCheckTable.setStatus('current')
csqIfConsistencyCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csqIfConsistencyCheckEntry.setStatus('current')
csqIfConsistencyCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqIfConsistencyCheckEnable.setStatus('current')
csqIfQosGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8), )
if mibBuilder.loadTexts: csqIfQosGroupInfoTable.setStatus('current')
csqIfQosGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoGroupNumber"))
if mibBuilder.loadTexts: csqIfQosGroupInfoEntry.setStatus('current')
csqIfQosGroupInfoDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfQosGroupInfoDirection.setStatus('current')
csqIfQosGroupInfoGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqIfQosGroupInfoGroupNumber.setStatus('current')
csqIfQosGroupInfoQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoQueueSize.setStatus('current')
csqIfQosGroupInfoHwMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoHwMTU.setStatus('current')
csqIfQosGroupInfoMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoMTU.setStatus('current')
csqIfQosGroupInfoDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("noDrop", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoDropType.setStatus('current')
csqIfQosGroupInfoResumeThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoResumeThresh.setStatus('current')
csqIfQosGroupInfoPauseThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoPauseThresh.setStatus('current')
csqIfQosGroupInfoScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wrr", 1), ("priority", 2), ("dwrr", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoScheduling.setStatus('current')
csqIfQosGroupInfoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoBandwidth.setStatus('current')
csqIfQosGroupInfoBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoBandwidthUnits.setStatus('current')
csqIfQosGroupInfoShapeMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeMinThresh.setStatus('current')
csqIfQosGroupInfoShapeMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeMaxThresh.setStatus('current')
csqIfQosGroupInfoShapeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 4, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupInfoShapeUnits.setStatus('current')
csqIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1), )
if mibBuilder.loadTexts: csqIfStatsTable.setStatus('current')
csqIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsQueueNumber"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsThresholdNumber"))
if mibBuilder.loadTexts: csqIfStatsEntry.setStatus('current')
csqIfStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfStatsDirection.setStatus('current')
csqIfStatsQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 2), QosQueueNumber())
if mibBuilder.loadTexts: csqIfStatsQueueNumber.setStatus('current')
csqIfStatsThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 3), QosThresholdNumber())
if mibBuilder.loadTexts: csqIfStatsThresholdNumber.setStatus('current')
csqIfStatsDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfStatsDropPkts.setStatus('current')
csqModuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2), )
if mibBuilder.loadTexts: csqModuleStatsTable.setStatus('current')
csqModuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csqModuleStatsEntry.setStatus('current')
csqModuleDropByPolicingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByPolicingPackets.setStatus('current')
csqModuleTosChangedIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTosChangedIpPackets.setStatus('current')
csqModuleCosChangedIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleCosChangedIpPackets.setStatus('current')
csqModuleCosChangedNonIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleCosChangedNonIpPackets.setStatus('current')
csqModuleExpChangedMplsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleExpChangedMplsPackets.setStatus('current')
csqModuleStatsExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3), )
if mibBuilder.loadTexts: csqModuleStatsExtTable.setStatus('current')
csqModuleStatsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csqModuleStatsExtEntry.setStatus('current')
csqModuleTunnelEncapPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTunnelEncapPackets.setStatus('current')
csqModuleTunnelDecapPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTunnelDecapPackets.setStatus('current')
csqModuleDropByPolicingInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByPolicingInOctets.setStatus('current')
csqModuleDropByPolicingOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByPolicingOutOctets.setStatus('current')
csqModuleFwdByPolicingInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingInPackets.setStatus('current')
csqModuleFwdByPolicingInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingInOctets.setStatus('current')
csqModuleFwdByPolicingOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingOutPackets.setStatus('current')
csqModuleFwdByPolicingOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByPolicingOutOctets.setStatus('current')
csqModuleHighExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedInPackets.setStatus('current')
csqModuleHighExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedInOctets.setStatus('current')
csqModuleHighExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedOutPackets.setStatus('current')
csqModuleHighExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleHighExceedOutOctets.setStatus('current')
csqModuleLowExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedInPackets.setStatus('current')
csqModuleLowExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedInOctets.setStatus('current')
csqModuleLowExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedOutPackets.setStatus('current')
csqModuleLowExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleLowExceedOutOctets.setStatus('current')
csqModuleDropByAggPolicerInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerInPackets.setStatus('current')
csqModuleDropByAggPolicerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerInOctets.setStatus('current')
csqModuleDropByAggPolicerOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerOutPackets.setStatus('current')
csqModuleDropByAggPolicerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByAggPolicerOutOctets.setStatus('current')
csqModuleFwdByAggPolicerInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerInPackets.setStatus('current')
csqModuleFwdByAggPolicerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerInOctets.setStatus('current')
csqModuleFwdByAggPolicerOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerOutPackets.setStatus('current')
csqModuleFwdByAggPolicerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByAggPolicerOutOctets.setStatus('current')
csqModuleAggHighExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedInPackets.setStatus('current')
csqModuleAggHighExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedInOctets.setStatus('current')
csqModuleAggHighExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedOutPackets.setStatus('current')
csqModuleAggHighExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggHighExceedOutOctets.setStatus('current')
csqModuleAggLowExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedInPackets.setStatus('current')
csqModuleAggLowExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedInOctets.setStatus('current')
csqModuleAggLowExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedOutPackets.setStatus('current')
csqModuleAggLowExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleAggLowExceedOutOctets.setStatus('current')
csqModuleDropByNetflowInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowInPackets.setStatus('current')
csqModuleDropByNetflowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowInOctets.setStatus('current')
csqModuleDropByNetflowOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowOutPackets.setStatus('current')
csqModuleDropByNetflowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleDropByNetflowOutOctets.setStatus('current')
csqModuleFwdByNetflowInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowInPackets.setStatus('current')
csqModuleFwdByNetflowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowInOctets.setStatus('current')
csqModuleFwdByNetflowOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowOutPackets.setStatus('current')
csqModuleFwdByNetflowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleFwdByNetflowOutOctets.setStatus('current')
csqModuleNetflowExceedInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedInPackets.setStatus('current')
csqModuleNetflowExceedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedInOctets.setStatus('current')
csqModuleNetflowExceedOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedOutPackets.setStatus('current')
csqModuleNetflowExceedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleNetflowExceedOutOctets.setStatus('current')
csqModuleCosChangedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleCosChangedPackets.setStatus('current')
csqModuleTrafficClassChangedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqModuleTrafficClassChangedPackets.setStatus('current')
csqIfStatsExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 4), )
if mibBuilder.loadTexts: csqIfStatsExtTable.setStatus('current')
csqIfStatsExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfStatsDirection"))
if mibBuilder.loadTexts: csqIfStatsExtEntry.setStatus('current')
csqIfBpduDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfBpduDropPkts.setStatus('current')
csqIfQosGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5), )
if mibBuilder.loadTexts: csqIfQosGroupStatsTable.setStatus('current')
csqIfQosGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsGroupNumber"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsType"))
if mibBuilder.loadTexts: csqIfQosGroupStatsEntry.setStatus('current')
csqIfQosGroupStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 1), IfDirection())
if mibBuilder.loadTexts: csqIfQosGroupStatsDirection.setStatus('current')
csqIfQosGroupStatsGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqIfQosGroupStatsGroupNumber.setStatus('current')
csqIfQosGroupStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 3), QosStatsType())
if mibBuilder.loadTexts: csqIfQosGroupStatsType.setStatus('current')
csqIfQosGroupStatsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfQosGroupStatsValue.setStatus('current')
csqIfPriGrpInBufUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6), )
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageTable.setStatus('current')
csqIfPriGrpInBufUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageGrpNo"))
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageEntry.setStatus('current')
csqIfPriGrpInBufUsageGrpNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageGrpNo.setStatus('current')
csqIfPriGrpInBufUsageMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageMinCount.setStatus('current')
csqIfPriGrpInBufUsageSharedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageSharedCount.setStatus('current')
csqIfPriGrpInBufUsageHeadroomCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageHeadroomCount.setStatus('current')
csqIfPriGrpInBufUsageGlobalHeadroomCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageGlobalHeadroomCount.setStatus('current')
csqIfPriGrpInBufUsageSharedPeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageSharedPeekCount.setStatus('current')
csqIfPriGrpInBufUsageHeadroomPeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqIfPriGrpInBufUsageHeadroomPeekCount.setStatus('current')
csqSharedPoolUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7), )
if mibBuilder.loadTexts: csqSharedPoolUsageTable.setStatus('current')
csqSharedPoolUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageInstNo"), (0, "CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsagePoolNo"))
if mibBuilder.loadTexts: csqSharedPoolUsageEntry.setStatus('current')
csqSharedPoolUsageInstNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csqSharedPoolUsageInstNo.setStatus('current')
csqSharedPoolUsagePoolNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqSharedPoolUsagePoolNo.setStatus('current')
csqSharedPoolUsageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageUsed.setStatus('current')
csqSharedPoolUsageRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageRemain.setStatus('current')
csqSharedPoolUsagePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsagePeak.setStatus('current')
csqSharedPoolUsageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageTotal.setStatus('current')
csqSharedPoolUsageUsedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageUsedTx.setStatus('current')
csqSharedPoolUsageRemainTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageRemainTx.setStatus('current')
csqSharedPoolUsagePeakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsagePeakTx.setStatus('current')
csqSharedPoolUsageTotalTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageTotalTx.setStatus('current')
csqSharedPoolUsageNameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 7, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqSharedPoolUsageNameTx.setStatus('current')
csqHwSharedPoolUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8), )
if mibBuilder.loadTexts: csqHwSharedPoolUsageTable.setStatus('current')
csqHwSharedPoolUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolDeviceId"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageInstNo"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolStatsDirection"), (0, "CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolStatsType"))
if mibBuilder.loadTexts: csqHwSharedPoolUsageEntry.setStatus('current')
csqHwSharedPoolDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("northStar", 1))))
if mibBuilder.loadTexts: csqHwSharedPoolDeviceId.setStatus('current')
csqHwSharedPoolUsageInstNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csqHwSharedPoolUsageInstNo.setStatus('current')
csqHwSharedPoolStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inputStats_ingressStraight", 1), ("inputStats_ingressHairpin", 2), ("inputStats_egress", 3), ("outputStats_ingressStraight", 4), ("outputStats_ingressHairpin", 5), ("outputStats_egress", 6))))
if mibBuilder.loadTexts: csqHwSharedPoolStatsDirection.setStatus('current')
csqHwSharedPoolStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("nodrop", 2), ("span", 3), ("sup", 4))))
if mibBuilder.loadTexts: csqHwSharedPoolStatsType.setStatus('current')
csqHwSharedPoolUsageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageUsed.setStatus('current')
csqHwSharedPoolUsageRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageRemain.setStatus('current')
csqHwSharedPoolUsageShared = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageShared.setStatus('current')
csqHwSharedPoolUsageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 5, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqHwSharedPoolUsageTotal.setStatus('current')
csqPolicerUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1), )
if mibBuilder.loadTexts: csqPolicerUsageTable.setStatus('current')
csqPolicerUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-QOS-MIB", "csqPolicerType"))
if mibBuilder.loadTexts: csqPolicerUsageEntry.setStatus('current')
csqPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1, 1), QosPolicerType())
if mibBuilder.loadTexts: csqPolicerType.setStatus('current')
csqPolicerUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqPolicerUsed.setStatus('current')
csqPolicerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csqPolicerTotal.setStatus('current')
csqModuleDscpRewriteEnableTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7, 1), )
if mibBuilder.loadTexts: csqModuleDscpRewriteEnableTable.setStatus('current')
csqModuleDscpRewriteEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csqModuleDscpRewriteEnableEntry.setStatus('current')
csqModuleDscpRewriteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 580, 1, 7, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csqModuleDscpRewriteEnable.setStatus('current')
ciscoSwitchQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1))
ciscoSwitchQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2))
ciscoSwitchQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 1)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBCompliance = ciscoSwitchQosMIBCompliance.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 2)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev2 = ciscoSwitchQosMIBComplianceRev2.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 3)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev3 = ciscoSwitchQosMIBComplianceRev3.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 4)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev4 = ciscoSwitchQosMIBComplianceRev4.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 5)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev5 = ciscoSwitchQosMIBComplianceRev5.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 6)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev6 = ciscoSwitchQosMIBComplianceRev6.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 7)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfPriGrpInBufUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolCellSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev7 = ciscoSwitchQosMIBComplianceRev7.setStatus('deprecated')
ciscoSwitchQosMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 1, 8)).setObjects(("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPortQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosRedirectPolicingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMappingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMutationGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCosToQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDscpAssignGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfDropConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosMarkingStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfModeConfigGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfCCGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosPolicerUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfStatsExtGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleDscpRewriteGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosModuleClassChangedGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosTenGOnlyModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueModeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfLanQueuingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueBufferGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueSchedulingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQueueingGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupStatsGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfPriGrpInBufUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolUsageGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosServicePoolCellSizeGroup"), ("CISCO-SWITCH-QOS-MIB", "ciscoSwitchQosIfQosGroupInfoShapeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMIBComplianceRev8 = ciscoSwitchQosMIBComplianceRev8.setStatus('current')
ciscoSwitchQosMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 1)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqCosToDscpDscp"), ("CISCO-SWITCH-QOS-MIB", "csqIpPrecToDscpDscp"), ("CISCO-SWITCH-QOS-MIB", "csqExpToDscpDscp"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingCos"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingExp"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingNormalBurstDscp"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMappingMaxBurstDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMappingGroup = ciscoSwitchQosMappingGroup.setStatus('current')
ciscoSwitchQosMutationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 2)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqMaxCosMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqMaxDscpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqMaxExpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqCosMutationRowStatus"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMutationRowStatus"), ("CISCO-SWITCH-QOS-MIB", "csqExpMutationRowStatus"), ("CISCO-SWITCH-QOS-MIB", "csqCosMutationToCos"), ("CISCO-SWITCH-QOS-MIB", "csqDscpMutationToDscp"), ("CISCO-SWITCH-QOS-MIB", "csqExpMutationToExp"), ("CISCO-SWITCH-QOS-MIB", "csqIfCosMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfDscpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfExpMutationMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfMutationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMutationGroup = ciscoSwitchQosMutationGroup.setStatus('current')
ciscoSwitchQosIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 3)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDefaultCos"), ("CISCO-SWITCH-QOS-MIB", "csqIfTrustState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfConfigGroup = ciscoSwitchQosIfConfigGroup.setStatus('current')
ciscoSwitchQosIfCosToQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 4)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueQueueNumber"), ("CISCO-SWITCH-QOS-MIB", "csqIfCosToQueueThresholdNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfCosToQueueGroup = ciscoSwitchQosIfCosToQueueGroup.setStatus('current')
ciscoSwitchQosIfDropConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 5)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigDropAlgorithm"), ("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigDropThreshold"), ("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigMinWredThreshold"), ("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigMaxWredThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfDropConfigGroup = ciscoSwitchQosIfDropConfigGroup.setStatus('current')
ciscoSwitchQosIfQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 6)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueWrrWeight"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueSizeWeight"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueStatsGranularity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueGroup = ciscoSwitchQosIfQueueGroup.setStatus('current')
ciscoSwitchQosIfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 7)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfStatsDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfStatsGroup = ciscoSwitchQosIfStatsGroup.setStatus('current')
ciscoSwitchQosModuleStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 8)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleDropByPolicingPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleTosChangedIpPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleCosChangedIpPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleCosChangedNonIpPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleExpChangedMplsPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleStatsGroup = ciscoSwitchQosModuleStatsGroup.setStatus('current')
ciscoSwitchQosIfDscpAssignGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 9)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueQueueNumber"), ("CISCO-SWITCH-QOS-MIB", "csqIfDscpToQueueThresholdNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfDscpAssignGroup = ciscoSwitchQosIfDscpAssignGroup.setStatus('current')
ciscoSwitchQosDscpRewriteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 10)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqDscpRewriteEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosDscpRewriteGroup = ciscoSwitchQosDscpRewriteGroup.setStatus('current')
ciscoSwitchQosRedirectPolicingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 11)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqPoliceRedirectedTrafficEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosRedirectPolicingGroup = ciscoSwitchQosRedirectPolicingGroup.setStatus('current')
ciscoSwitchQosPortQueueingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 12)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqPortQueueingModeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosPortQueueingGroup = ciscoSwitchQosPortQueueingGroup.setStatus('current')
ciscoSwitchQosMarkingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 13)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqMarkingStatisticsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosMarkingStatsGroup = ciscoSwitchQosMarkingStatsGroup.setStatus('current')
ciscoSwitchQosIfCCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 14)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfConsistencyCheckEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfCCGroup = ciscoSwitchQosIfCCGroup.setStatus('current')
ciscoSwitchQosIfModeConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 15)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfVlanBasedQosModeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfModeConfigGroup = ciscoSwitchQosIfModeConfigGroup.setStatus('current')
ciscoSwitchQosPolicerUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 16)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqPolicerUsed"), ("CISCO-SWITCH-QOS-MIB", "csqPolicerTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosPolicerUsageGroup = ciscoSwitchQosPolicerUsageGroup.setStatus('current')
ciscoSwitchQosModuleStatsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 17)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleTunnelEncapPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleTunnelDecapPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByPolicingInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByPolicingOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByPolicingOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleHighExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleLowExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByAggPolicerOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByAggPolicerOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggHighExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleAggLowExceedOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleDropByNetflowOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleFwdByNetflowOutOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedInPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedOutPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedInOctets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleNetflowExceedOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleStatsExtGroup = ciscoSwitchQosModuleStatsExtGroup.setStatus('current')
ciscoSwitchQosIfStatsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 18)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfBpduDropPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfStatsExtGroup = ciscoSwitchQosIfStatsExtGroup.setStatus('current')
ciscoSwitchQosModuleDscpRewriteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 19)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleDscpRewriteEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleDscpRewriteGroup = ciscoSwitchQosModuleDscpRewriteGroup.setStatus('current')
ciscoSwitchQosModuleClassChangedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 20)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqModuleCosChangedPackets"), ("CISCO-SWITCH-QOS-MIB", "csqModuleTrafficClassChangedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosModuleClassChangedGroup = ciscoSwitchQosModuleClassChangedGroup.setStatus('current')
ciscoSwitchQosTenGOnlyModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 21)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqTenGOnlyMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosTenGOnlyModeGroup = ciscoSwitchQosTenGOnlyModeGroup.setStatus('current')
ciscoSwitchQosIfQueueModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 22)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueModeCpb"), ("CISCO-SWITCH-QOS-MIB", "csqIfConfigQueueMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueModeGroup = ciscoSwitchQosIfQueueModeGroup.setStatus('current')
ciscoSwitchQosIfLanQueuingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 23)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueClassMapName"), ("CISCO-SWITCH-QOS-MIB", "csqIfIngressPolicyMap"), ("CISCO-SWITCH-QOS-MIB", "csqIfEgressPolicyMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfLanQueuingGroup = ciscoSwitchQosIfLanQueuingGroup.setStatus('current')
ciscoSwitchQosIfQueueBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 24)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfDropConfigQueueBuffer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueBufferGroup = ciscoSwitchQosIfQueueBufferGroup.setStatus('current')
ciscoSwitchQosIfQueueSchedulingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 25)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQueueScheduling"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueSrrWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueSchedulingGroup = ciscoSwitchQosIfQueueSchedulingGroup.setStatus('current')
ciscoSwitchQosIfQueueingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 26)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfIngressQueueingEnable"), ("CISCO-SWITCH-QOS-MIB", "csqIfEgressQueueingEnable"), ("CISCO-SWITCH-QOS-MIB", "csqIfQueueingTrustState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQueueingGroup = ciscoSwitchQosIfQueueingGroup.setStatus('current')
ciscoSwitchQosIfQosGroupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 27)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoQueueSize"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoHwMTU"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoMTU"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoDropType"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoResumeThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoPauseThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoScheduling"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoBandwidth"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoBandwidthUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQosGroupInfoGroup = ciscoSwitchQosIfQosGroupInfoGroup.setStatus('current')
ciscoSwitchQosIfQosGroupStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 28)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupStatsValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQosGroupStatsGroup = ciscoSwitchQosIfQosGroupStatsGroup.setStatus('current')
ciscoSwitchQosIfPriGrpInBufUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 29)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageMinCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageSharedCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageHeadroomCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageGlobalHeadroomCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageSharedPeekCount"), ("CISCO-SWITCH-QOS-MIB", "csqIfPriGrpInBufUsageHeadroomPeekCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfPriGrpInBufUsageGroup = ciscoSwitchQosIfPriGrpInBufUsageGroup.setStatus('current')
ciscoSwitchQosServicePoolUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 30)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageUsed"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageRemain"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsagePeak"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosServicePoolUsageGroup = ciscoSwitchQosServicePoolUsageGroup.setStatus('current')
ciscoSwitchQosServicePoolCellSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 31)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqServicePoolCellSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosServicePoolCellSizeGroup = ciscoSwitchQosServicePoolCellSizeGroup.setStatus('current')
ciscoSwitchQosIfQosGroupInfoShapeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 32)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoShapeMinThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoShapeMaxThresh"), ("CISCO-SWITCH-QOS-MIB", "csqIfQosGroupInfoShapeUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosIfQosGroupInfoShapeGroup = ciscoSwitchQosIfQosGroupInfoShapeGroup.setStatus('current')
ciscoSwitchQosHwServicePoolUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 33)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageUsed"), ("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageRemain"), ("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageShared"), ("CISCO-SWITCH-QOS-MIB", "csqHwSharedPoolUsageTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosHwServicePoolUsageGroup = ciscoSwitchQosHwServicePoolUsageGroup.setStatus('current')
ciscoSwitchQosServicePoolUsageTxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 580, 2, 2, 34)).setObjects(("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageUsedTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageRemainTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsagePeakTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageTotalTx"), ("CISCO-SWITCH-QOS-MIB", "csqSharedPoolUsageNameTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchQosServicePoolUsageTxGroup = ciscoSwitchQosServicePoolUsageTxGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-SWITCH-QOS-MIB", csqIfDscpToQueueDirection=csqIfDscpToQueueDirection, csqIfTrustState=csqIfTrustState, csqIfDscpMutationMap=csqIfDscpMutationMap, csqIfDropConfigQueueBuffer=csqIfDropConfigQueueBuffer, csqIfStatsQueueNumber=csqIfStatsQueueNumber, csqSharedPoolUsageTotal=csqSharedPoolUsageTotal, ciscoSwitchQosModuleDscpRewriteGroup=ciscoSwitchQosModuleDscpRewriteGroup, csqIfQosGroupInfoBandwidthUnits=csqIfQosGroupInfoBandwidthUnits, csqModuleDscpRewriteEnableTable=csqModuleDscpRewriteEnableTable, csqModuleFwdByAggPolicerInPackets=csqModuleFwdByAggPolicerInPackets, csqIfQosGroupInfoPauseThresh=csqIfQosGroupInfoPauseThresh, csqCosMutationMappingTable=csqCosMutationMappingTable, csqSharedPoolUsagePoolNo=csqSharedPoolUsagePoolNo, csqModule=csqModule, ciscoSwitchQosIfQueueBufferGroup=ciscoSwitchQosIfQueueBufferGroup, csqModuleTunnelEncapPackets=csqModuleTunnelEncapPackets, csqIfQosGroupStatsType=csqIfQosGroupStatsType, csqIfQosGroupInfoEntry=csqIfQosGroupInfoEntry, csqIfQosGroupInfoShapeMaxThresh=csqIfQosGroupInfoShapeMaxThresh, ciscoSwitchQosServicePoolUsageGroup=ciscoSwitchQosServicePoolUsageGroup, csqIfConfigTable=csqIfConfigTable, csqModuleFwdByAggPolicerOutOctets=csqModuleFwdByAggPolicerOutOctets, ciscoSwitchQosMappingGroup=ciscoSwitchQosMappingGroup, ciscoSwitchQosIfQosGroupInfoShapeGroup=ciscoSwitchQosIfQosGroupInfoShapeGroup, csqSharedPoolUsageUsedTx=csqSharedPoolUsageUsedTx, csqModuleNetflowExceedOutOctets=csqModuleNetflowExceedOutOctets, csqIfStatsDropPkts=csqIfStatsDropPkts, csqModuleHighExceedInPackets=csqModuleHighExceedInPackets, csqPolicerUsed=csqPolicerUsed, csqIfQosGroupInfoHwMTU=csqIfQosGroupInfoHwMTU, csqModuleLowExceedOutOctets=csqModuleLowExceedOutOctets, csqSharedPoolUsageTable=csqSharedPoolUsageTable, ciscoSwitchQosMIBGroups=ciscoSwitchQosMIBGroups, ciscoSwitchQosIfQueueingGroup=ciscoSwitchQosIfQueueingGroup, csqCosMutationToCos=csqCosMutationToCos, csqIfDscpToQueueTable=csqIfDscpToQueueTable, ciscoSwitchQosIfModeConfigGroup=ciscoSwitchQosIfModeConfigGroup, csqDscpMappingDscp=csqDscpMappingDscp, PYSNMP_MODULE_ID=ciscoSwitchQosMIB, csqIfConsistencyCheckTable=csqIfConsistencyCheckTable, csqIfStatsTable=csqIfStatsTable, csqModuleStatsEntry=csqModuleStatsEntry, csqModuleNetflowExceedInOctets=csqModuleNetflowExceedInOctets, csqIfBpduDropPkts=csqIfBpduDropPkts, csqSharedPoolUsagePeakTx=csqSharedPoolUsagePeakTx, csqModuleDropByPolicingInOctets=csqModuleDropByPolicingInOctets, ciscoSwitchQosMIBComplianceRev6=ciscoSwitchQosMIBComplianceRev6, csqModuleAggLowExceedInOctets=csqModuleAggLowExceedInOctets, csqSharedPoolUsageTotalTx=csqSharedPoolUsageTotalTx, csqIfPriGrpInBufUsageTable=csqIfPriGrpInBufUsageTable, csqIfDropConfigThresholdIndex=csqIfDropConfigThresholdIndex, ciscoSwitchQosModuleClassChangedGroup=ciscoSwitchQosModuleClassChangedGroup, csqModuleLowExceedInPackets=csqModuleLowExceedInPackets, csqIfPriGrpInBufUsageSharedCount=csqIfPriGrpInBufUsageSharedCount, csqModuleTunnelDecapPackets=csqModuleTunnelDecapPackets, ciscoSwitchQosMIBComplianceRev8=ciscoSwitchQosMIBComplianceRev8, ciscoSwitchQosMIBCompliances=ciscoSwitchQosMIBCompliances, csqExpToDscpEntry=csqExpToDscpEntry, csqIfDropConfigMaxWredThreshold=csqIfDropConfigMaxWredThreshold, csqModuleDropByNetflowInPackets=csqModuleDropByNetflowInPackets, csqModuleAggHighExceedInPackets=csqModuleAggHighExceedInPackets, csqIfQosGroupStatsValue=csqIfQosGroupStatsValue, csqModuleFwdByNetflowInPackets=csqModuleFwdByNetflowInPackets, csqSharedPoolUsageNameTx=csqSharedPoolUsageNameTx, csqIfConfigEntry=csqIfConfigEntry, csqCosToDscpDscp=csqCosToDscpDscp, csqIfConsistencyCheckEnable=csqIfConsistencyCheckEnable, ciscoSwitchQosIfQosGroupStatsGroup=ciscoSwitchQosIfQosGroupStatsGroup, csqModuleFwdByPolicingInPackets=csqModuleFwdByPolicingInPackets, csqCosToDscpCos=csqCosToDscpCos, csqIpPrecToDscpTable=csqIpPrecToDscpTable, csqExpMutationMapName=csqExpMutationMapName, csqModuleDropByAggPolicerInPackets=csqModuleDropByAggPolicerInPackets, csqExpToDscpExp=csqExpToDscpExp, csqModuleFwdByAggPolicerInOctets=csqModuleFwdByAggPolicerInOctets, csqModuleStatsExtEntry=csqModuleStatsExtEntry, csqIfQosGroupInfoScheduling=csqIfQosGroupInfoScheduling, csqModuleAggHighExceedOutPackets=csqModuleAggHighExceedOutPackets, csqCosMutationRowStatus=csqCosMutationRowStatus, ciscoSwitchQosIfQueueSchedulingGroup=ciscoSwitchQosIfQueueSchedulingGroup, csqHwSharedPoolUsageInstNo=csqHwSharedPoolUsageInstNo, csqIfQosGroupInfoQueueSize=csqIfQosGroupInfoQueueSize, csqServicePoolCellSize=csqServicePoolCellSize, ciscoSwitchQosMIBObjects=ciscoSwitchQosMIBObjects, ciscoSwitchQosMIBComplianceRev3=ciscoSwitchQosMIBComplianceRev3, csqCosMutationFromCos=csqCosMutationFromCos, csqIfCosToQueueDirection=csqIfCosToQueueDirection, csqIfVlanBasedQosModeEnable=csqIfVlanBasedQosModeEnable, csqIfDropConfigMinWredThreshold=csqIfDropConfigMinWredThreshold, csqIfQueueTable=csqIfQueueTable, csqModuleDropByAggPolicerOutOctets=csqModuleDropByAggPolicerOutOctets, csqIfMutationRowStatus=csqIfMutationRowStatus, csqModuleStatsTable=csqModuleStatsTable, csqModuleHighExceedOutOctets=csqModuleHighExceedOutOctets, ciscoSwitchQosIfPriGrpInBufUsageGroup=ciscoSwitchQosIfPriGrpInBufUsageGroup, ciscoSwitchQosMIBComplianceRev7=ciscoSwitchQosMIBComplianceRev7, csqIfPriGrpInBufUsageGlobalHeadroomCount=csqIfPriGrpInBufUsageGlobalHeadroomCount, csqDscpMappingEntry=csqDscpMappingEntry, csqDscpMappingNormalBurstDscp=csqDscpMappingNormalBurstDscp, csqTenGOnlyMode=csqTenGOnlyMode, csqExpMutationFromExp=csqExpMutationFromExp, csqIfQosGroupStatsTable=csqIfQosGroupStatsTable, csqSharedPoolUsagePeak=csqSharedPoolUsagePeak, csqExpMutationEntry=csqExpMutationEntry, csqIfQueueSrrWeight=csqIfQueueSrrWeight, csqIfIngressQueueingEnable=csqIfIngressQueueingEnable, csqHwSharedPoolUsageShared=csqHwSharedPoolUsageShared, ciscoSwitchQosIfStatsExtGroup=ciscoSwitchQosIfStatsExtGroup, csqModuleHighExceedOutPackets=csqModuleHighExceedOutPackets, csqIfDefaultCos=csqIfDefaultCos, ciscoSwitchQosModuleStatsExtGroup=ciscoSwitchQosModuleStatsExtGroup, ciscoSwitchQosModuleStatsGroup=ciscoSwitchQosModuleStatsGroup, csqIfPriGrpInBufUsageSharedPeekCount=csqIfPriGrpInBufUsageSharedPeekCount, csqDscpMutationFromDscp=csqDscpMutationFromDscp, csqIfDropConfigEntry=csqIfDropConfigEntry, csqIfStatsExtTable=csqIfStatsExtTable, csqCosMutationEntry=csqCosMutationEntry, csqDscpMappingCos=csqDscpMappingCos, csqIfQosGroupInfoBandwidth=csqIfQosGroupInfoBandwidth, csqModuleNetflowExceedInPackets=csqModuleNetflowExceedInPackets, csqIfDropConfigDirection=csqIfDropConfigDirection, csqIfQueueNumber=csqIfQueueNumber, csqIfQosGroupInfoDropType=csqIfQosGroupInfoDropType, csqModuleFwdByNetflowOutPackets=csqModuleFwdByNetflowOutPackets, csqSharedPoolUsageRemain=csqSharedPoolUsageRemain, csqIfStatsDirection=csqIfStatsDirection, ciscoSwitchQosMIB=ciscoSwitchQosMIB, csqPolicerType=csqPolicerType, csqIfPriGrpInBufUsageEntry=csqIfPriGrpInBufUsageEntry, csqIfQosGroupInfoGroupNumber=csqIfQosGroupInfoGroupNumber, csqIfQueueClassMapName=csqIfQueueClassMapName, csqIfPriGrpInBufUsageGrpNo=csqIfPriGrpInBufUsageGrpNo, csqIfQosGroupInfoResumeThresh=csqIfQosGroupInfoResumeThresh, csqStatistics=csqStatistics, csqCosToDscpTable=csqCosToDscpTable, ciscoSwitchQosIfConfigGroup=ciscoSwitchQosIfConfigGroup, ciscoSwitchQosDscpRewriteGroup=ciscoSwitchQosDscpRewriteGroup, csqModuleDropByNetflowInOctets=csqModuleDropByNetflowInOctets, csqIfMutationConfigTable=csqIfMutationConfigTable, ciscoSwitchQosMIBCompliance=ciscoSwitchQosMIBCompliance, csqIfQueueingTrustState=csqIfQueueingTrustState, csqIfDropConfigQueueIndex=csqIfDropConfigQueueIndex, ciscoSwitchQosMIBComplianceRev4=ciscoSwitchQosMIBComplianceRev4, ciscoSwitchQosIfQosGroupInfoGroup=ciscoSwitchQosIfQosGroupInfoGroup, csqIfQosGroupInfoMTU=csqIfQosGroupInfoMTU, csqExpToDscpDscp=csqExpToDscpDscp, csqModuleFwdByPolicingOutOctets=csqModuleFwdByPolicingOutOctets, ciscoSwitchQosIfDropConfigGroup=ciscoSwitchQosIfDropConfigGroup, csqModuleAggLowExceedInPackets=csqModuleAggLowExceedInPackets, csqIfExpMutationMap=csqIfExpMutationMap, ciscoSwitchQosIfDscpAssignGroup=ciscoSwitchQosIfDscpAssignGroup, csqCosMutationMappingEntry=csqCosMutationMappingEntry, csqDscpMutationMappingEntry=csqDscpMutationMappingEntry, ciscoSwitchQosIfQueueModeGroup=ciscoSwitchQosIfQueueModeGroup, csqIfDropConfigDropThreshold=csqIfDropConfigDropThreshold, csqPortQueueingModeEnable=csqPortQueueingModeEnable, csqIfQosGroupInfoDirection=csqIfQosGroupInfoDirection, ciscoSwitchQosIfCosToQueueGroup=ciscoSwitchQosIfCosToQueueGroup, csqModuleDscpRewriteEnableEntry=csqModuleDscpRewriteEnableEntry, csqIfDscpToQueueDscp=csqIfDscpToQueueDscp, csqIfStatsThresholdNumber=csqIfStatsThresholdNumber, csqHwSharedPoolUsageEntry=csqHwSharedPoolUsageEntry, csqIfEgressPolicyMap=csqIfEgressPolicyMap, csqModuleCosChangedPackets=csqModuleCosChangedPackets, csqModuleAggHighExceedInOctets=csqModuleAggHighExceedInOctets, ciscoSwitchQosServicePoolCellSizeGroup=ciscoSwitchQosServicePoolCellSizeGroup, csqIfModeConfigEntry=csqIfModeConfigEntry, csqExpMutationMappingTable=csqExpMutationMappingTable, csqModuleCosChangedIpPackets=csqModuleCosChangedIpPackets, csqExpMutationToExp=csqExpMutationToExp, ciscoSwitchQosMIBComplianceRev5=ciscoSwitchQosMIBComplianceRev5, csqModuleFwdByPolicingOutPackets=csqModuleFwdByPolicingOutPackets, csqIfPriGrpInBufUsageHeadroomPeekCount=csqIfPriGrpInBufUsageHeadroomPeekCount, csqModuleFwdByNetflowOutOctets=csqModuleFwdByNetflowOutOctets, csqCosMutationMapName=csqCosMutationMapName, csqIfQueueEntry=csqIfQueueEntry, csqIfModeConfigTable=csqIfModeConfigTable, csqIfQueueSizeWeight=csqIfQueueSizeWeight, csqDscpMappingMaxBurstDscp=csqDscpMappingMaxBurstDscp, csqIfQueueWrrWeight=csqIfQueueWrrWeight, csqDscpMappingExp=csqDscpMappingExp, csqPolicerUsage=csqPolicerUsage, csqDscpMutationToDscp=csqDscpMutationToDscp, csqIfDscpToQueueEntry=csqIfDscpToQueueEntry, csqIfCosToQueueQueueNumber=csqIfCosToQueueQueueNumber, csqCosMutationTable=csqCosMutationTable, csqIfDropConfigTable=csqIfDropConfigTable, csqModuleCosChangedNonIpPackets=csqModuleCosChangedNonIpPackets, csqIfQosGroupStatsDirection=csqIfQosGroupStatsDirection, csqIfCosToQueueEntry=csqIfCosToQueueEntry, csqModuleAggLowExceedOutPackets=csqModuleAggLowExceedOutPackets, csqExpMutationRowStatus=csqExpMutationRowStatus, csqModuleAggLowExceedOutOctets=csqModuleAggLowExceedOutOctets, csqModuleFwdByPolicingInOctets=csqModuleFwdByPolicingInOctets, csqCosToDscpEntry=csqCosToDscpEntry, csqExpMutationTable=csqExpMutationTable, csqIfQueueScheduling=csqIfQueueScheduling, csqMaxExpMutationMap=csqMaxExpMutationMap, csqIfQosGroupInfoTable=csqIfQosGroupInfoTable, csqDscpMappingTable=csqDscpMappingTable, QosStatsType=QosStatsType, csqIpPrecToDscpIpPrec=csqIpPrecToDscpIpPrec, csqIfDscpToQueueThresholdNumber=csqIfDscpToQueueThresholdNumber, csqDscpMutationRowStatus=csqDscpMutationRowStatus, csqIfConfigQueueMode=csqIfConfigQueueMode, ciscoSwitchQosIfStatsGroup=ciscoSwitchQosIfStatsGroup, ciscoSwitchQosHwServicePoolUsageGroup=ciscoSwitchQosHwServicePoolUsageGroup, csqMaxCosMutationMap=csqMaxCosMutationMap, csqModuleNetflowExceedOutPackets=csqModuleNetflowExceedOutPackets, csqIfQosGroupStatsGroupNumber=csqIfQosGroupStatsGroupNumber, csqModuleDropByNetflowOutPackets=csqModuleDropByNetflowOutPackets, csqIfIngressPolicyMap=csqIfIngressPolicyMap, csqMarkingStatisticsEnable=csqMarkingStatisticsEnable, ciscoSwitchQosPolicerUsageGroup=ciscoSwitchQosPolicerUsageGroup, csqModuleLowExceedOutPackets=csqModuleLowExceedOutPackets, csqModuleDropByPolicingPackets=csqModuleDropByPolicingPackets, csqIfDscpToQueueQueueNumber=csqIfDscpToQueueQueueNumber, csqIfQosGroupInfoShapeMinThresh=csqIfQosGroupInfoShapeMinThresh, csqModuleTosChangedIpPackets=csqModuleTosChangedIpPackets, csqModuleDscpRewriteEnable=csqModuleDscpRewriteEnable, csqDscpMutationEntry=csqDscpMutationEntry, ciscoSwitchQosRedirectPolicingGroup=ciscoSwitchQosRedirectPolicingGroup, csqMutations=csqMutations, csqHwSharedPoolUsageTable=csqHwSharedPoolUsageTable, csqIfMutationConfigEntry=csqIfMutationConfigEntry, csqModuleDropByAggPolicerOutPackets=csqModuleDropByAggPolicerOutPackets, csqSharedPoolUsageRemainTx=csqSharedPoolUsageRemainTx, csqExpMutationMappingEntry=csqExpMutationMappingEntry, csqModuleDropByPolicingOutOctets=csqModuleDropByPolicingOutOctets, csqModuleHighExceedInOctets=csqModuleHighExceedInOctets, csqHwSharedPoolDeviceId=csqHwSharedPoolDeviceId, csqIfPriGrpInBufUsageMinCount=csqIfPriGrpInBufUsageMinCount, csqHwSharedPoolUsageUsed=csqHwSharedPoolUsageUsed, csqPoliceRedirectedTrafficEnable=csqPoliceRedirectedTrafficEnable, csqDscpMutationMapName=csqDscpMutationMapName, csqDscpMutationTable=csqDscpMutationTable, csqIfQueueStatsGranularity=csqIfQueueStatsGranularity, csqIfQosGroupStatsEntry=csqIfQosGroupStatsEntry, csqPolicerUsageEntry=csqPolicerUsageEntry, ciscoSwitchQosMIBComplianceRev2=ciscoSwitchQosMIBComplianceRev2, csqPolicerUsageTable=csqPolicerUsageTable, csqModuleLowExceedInOctets=csqModuleLowExceedInOctets, csqIfQueueDirection=csqIfQueueDirection, csqModuleDropByAggPolicerInOctets=csqModuleDropByAggPolicerInOctets, csqInterface=csqInterface, csqDscpMutationMappingTable=csqDscpMutationMappingTable, csqIfStatsEntry=csqIfStatsEntry, ciscoSwitchQosMarkingStatsGroup=ciscoSwitchQosMarkingStatsGroup, csqIfCosToQueueCos=csqIfCosToQueueCos, csqMaxDscpMutationMap=csqMaxDscpMutationMap, csqModuleDropByNetflowOutOctets=csqModuleDropByNetflowOutOctets, ciscoSwitchQosIfCCGroup=ciscoSwitchQosIfCCGroup, csqHwSharedPoolUsageRemain=csqHwSharedPoolUsageRemain, csqSharedPoolUsageInstNo=csqSharedPoolUsageInstNo)
mibBuilder.exportSymbols("CISCO-SWITCH-QOS-MIB", csqIfCosToQueueThresholdNumber=csqIfCosToQueueThresholdNumber, ciscoSwitchQosPortQueueingGroup=ciscoSwitchQosPortQueueingGroup, ciscoSwitchQosMIBConformance=ciscoSwitchQosMIBConformance, csqIfCosToQueueTable=csqIfCosToQueueTable, csqIfCosMutationMap=csqIfCosMutationMap, csqModuleAggHighExceedOutOctets=csqModuleAggHighExceedOutOctets, ciscoSwitchQosIfLanQueuingGroup=ciscoSwitchQosIfLanQueuingGroup, csqIfEgressQueueingEnable=csqIfEgressQueueingEnable, csqIfPriGrpInBufUsageHeadroomCount=csqIfPriGrpInBufUsageHeadroomCount, csqPolicerTotal=csqPolicerTotal, csqHwSharedPoolStatsType=csqHwSharedPoolStatsType, ciscoSwitchQosIfQueueGroup=ciscoSwitchQosIfQueueGroup, ciscoSwitchQosServicePoolUsageTxGroup=ciscoSwitchQosServicePoolUsageTxGroup, csqModuleExpChangedMplsPackets=csqModuleExpChangedMplsPackets, csqModuleTrafficClassChangedPackets=csqModuleTrafficClassChangedPackets, csqGlobals=csqGlobals, csqIfConsistencyCheckEntry=csqIfConsistencyCheckEntry, csqSharedPoolUsageUsed=csqSharedPoolUsageUsed, csqIpPrecToDscpDscp=csqIpPrecToDscpDscp, csqMappings=csqMappings, csqModuleFwdByAggPolicerOutPackets=csqModuleFwdByAggPolicerOutPackets, csqHwSharedPoolStatsDirection=csqHwSharedPoolStatsDirection, csqIfQosGroupInfoShapeUnits=csqIfQosGroupInfoShapeUnits, csqModuleFwdByNetflowInOctets=csqModuleFwdByNetflowInOctets, ciscoSwitchQosTenGOnlyModeGroup=ciscoSwitchQosTenGOnlyModeGroup, csqIpPrecToDscpEntry=csqIpPrecToDscpEntry, csqModuleStatsExtTable=csqModuleStatsExtTable, csqExpToDscpTable=csqExpToDscpTable, csqDscpRewriteEnable=csqDscpRewriteEnable, csqHwSharedPoolUsageTotal=csqHwSharedPoolUsageTotal, csqSharedPoolUsageEntry=csqSharedPoolUsageEntry, ciscoSwitchQosMutationGroup=ciscoSwitchQosMutationGroup, csqIfQueueModeCpb=csqIfQueueModeCpb, csqIfDropConfigDropAlgorithm=csqIfDropConfigDropAlgorithm, ciscoSwitchQosMIBNotifs=ciscoSwitchQosMIBNotifs, csqIfStatsExtEntry=csqIfStatsExtEntry)
