#
# PySNMP MIB module TDMTGCLK-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TDMTGCLK-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter64, Unsigned32, TimeTicks, ObjectIdentity, Integer32, Counter32, iso, Gauge32, IpAddress, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter64", "Unsigned32", "TimeTicks", "ObjectIdentity", "Integer32", "Counter32", "iso", "Gauge32", "IpAddress", "MibIdentifier", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
cdx6500STTdmtgClkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17))
class DisplayString(OctetString):
    pass

cdx6500TdmtgClkTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29), )
if mibBuilder.loadTexts: cdx6500TdmtgClkTable.setStatus('mandatory')
cdx6500TdmtgClkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1), ).setIndexNames((0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgClkEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmtgClkCfgEntry.setStatus('mandatory')
cdx6500TdmtgClkEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgClkEntryNumber.setStatus('mandatory')
cdx6500TdmtgCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgCardNumber.setStatus('mandatory')
cdx6500TdmtgCardClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("system-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgCardClkParticipation.setStatus('mandatory')
cdx6500TdmtgGroup1ClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group-clock", 1), ("card-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgGroup1ClkParticipation.setStatus('mandatory')
cdx6500TdmtgGroup2ClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group-clock", 1), ("card-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgGroup2ClkParticipation.setStatus('mandatory')
cdx6500TdmtgGroup3ClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group-clock", 1), ("card-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgGroup3ClkParticipation.setStatus('mandatory')
cdx6500TdmtgStatSystemClkStatus = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatSystemClkStatus.setStatus('optional')
cdx6500TdmtgStatCardClkRegisteredTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2), )
if mibBuilder.loadTexts: cdx6500TdmtgStatCardClkRegisteredTable.setStatus('mandatory')
cdx6500TdmtgStatClkRegisteredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2, 1), ).setIndexNames((0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgStatClkRegisteredEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmtgStatClkRegisteredEntry.setStatus('mandatory')
cdx6500TdmtgStatClkRegisteredEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatClkRegisteredEntryNumber.setStatus('mandatory')
cdx6500TdmtgStatCardClkRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatCardClkRegistered.setStatus('optional')
cdx6500TdmtgStatGroupCardClkRegisteredTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3), )
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupCardClkRegisteredTable.setStatus('mandatory')
cdx6500TdmtgStatGroupClkRegisteredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1), ).setIndexNames((0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgStatClkEntryNumber"), (0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgStatGroupClkRegisteredEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupClkRegisteredEntry.setStatus('mandatory')
cdx6500TdmtgStatClkEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatClkEntryNumber.setStatus('mandatory')
cdx6500TdmtgStatGroupClkRegisteredEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupClkRegisteredEntryNumber.setStatus('mandatory')
cdx6500TdmtgStatGroupCardClkRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupCardClkRegistered.setStatus('optional')
mibBuilder.exportSymbols("TDMTGCLK-OPT-MIB", cdx6500TdmtgStatClkRegisteredEntryNumber=cdx6500TdmtgStatClkRegisteredEntryNumber, cdx6500TdmtgStatCardClkRegistered=cdx6500TdmtgStatCardClkRegistered, cdx6500TdmtgStatClkEntryNumber=cdx6500TdmtgStatClkEntryNumber, cdx6500TdmtgCardClkParticipation=cdx6500TdmtgCardClkParticipation, cdx6500TdmtgGroup3ClkParticipation=cdx6500TdmtgGroup3ClkParticipation, cdx6500TdmtgClkEntryNumber=cdx6500TdmtgClkEntryNumber, DisplayString=DisplayString, cdx6500TdmtgClkTable=cdx6500TdmtgClkTable, cdx6500Configuration=cdx6500Configuration, cdx6500=cdx6500, cdx6500STTdmtgClkGroup=cdx6500STTdmtgClkGroup, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500TdmtgStatClkRegisteredEntry=cdx6500TdmtgStatClkRegisteredEntry, cdx6500TdmtgStatGroupClkRegisteredEntry=cdx6500TdmtgStatGroupClkRegisteredEntry, cdx6500TdmtgStatGroupCardClkRegistered=cdx6500TdmtgStatGroupCardClkRegistered, cdx6500TdmtgCardNumber=cdx6500TdmtgCardNumber, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdxProductSpecific=cdxProductSpecific, cdx6500TdmtgGroup2ClkParticipation=cdx6500TdmtgGroup2ClkParticipation, codex=codex, cdx6500TdmtgStatGroupClkRegisteredEntryNumber=cdx6500TdmtgStatGroupClkRegisteredEntryNumber, cdx6500TdmtgClkCfgEntry=cdx6500TdmtgClkCfgEntry, cdx6500TdmtgGroup1ClkParticipation=cdx6500TdmtgGroup1ClkParticipation, cdx6500TdmtgStatSystemClkStatus=cdx6500TdmtgStatSystemClkStatus, cdx6500TdmtgStatCardClkRegisteredTable=cdx6500TdmtgStatCardClkRegisteredTable, cdx6500TdmtgStatGroupCardClkRegisteredTable=cdx6500TdmtgStatGroupCardClkRegisteredTable, cdx6500Statistics=cdx6500Statistics)
