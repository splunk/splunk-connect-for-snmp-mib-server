#
# PySNMP MIB module SMC-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SMC-AGENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:59:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, Bits, iso, Integer32, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Unsigned32, NotificationType, ObjectIdentity, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Bits", "iso", "Integer32", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Unsigned32", "NotificationType", "ObjectIdentity", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

smc = MibIdentifier((1, 3, 6, 1, 4, 1, 202))
smcDosWs = MibIdentifier((1, 3, 6, 1, 4, 1, 202, 2))
smcDosWsPcTyp = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcTyp.setStatus('mandatory')
smcDosWsPcProc = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcProc.setStatus('mandatory')
smcDosWsPcBios = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcBios.setStatus('mandatory')
smcDosWsPcRam = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcRam.setStatus('mandatory')
smcDosWsPcDisk = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcDisk.setStatus('mandatory')
smcDosWsPcVideo = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcVideo.setStatus('mandatory')
smcDosWsPcIo = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcIo.setStatus('mandatory')
smcDosWsDosVer = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDosVer.setStatus('mandatory')
smcDosWsDrvId = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvId.setStatus('mandatory')
smcDosWsNicBasIo = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNicBasIo.setStatus('mandatory')
smcDosWsNicIrq = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNicIrq.setStatus('mandatory')
smcDosWsNicRam = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNicRam.setStatus('mandatory')
smcDosWsNodId = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNodId.setStatus('mandatory')
smcDosWsIpAdr = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsIpAdr.setStatus('mandatory')
smcDosWsComment = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsComment.setStatus('mandatory')
smcDosWsPcDate = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcDate.setStatus('mandatory')
smcDosWsPcTime = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcTime.setStatus('mandatory')
smcDosWsRst = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsRst.setStatus('mandatory')
smcDosWsProtoMix = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsProtoMix.setStatus('mandatory')
smcDosWsRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsRcvPkts.setStatus('mandatory')
smcDosWsXmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsXmtPkts.setStatus('mandatory')
smcDosWsDrvSpcTable = MibTable((1, 3, 6, 1, 4, 1, 202, 2, 22), )
if mibBuilder.loadTexts: smcDosWsDrvSpcTable.setStatus('mandatory')
smcDosWsDrvSpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 202, 2, 22, 1), ).setIndexNames((0, "SMC-AGENT-MIB", "smcDosWsDrvSpcId"))
if mibBuilder.loadTexts: smcDosWsDrvSpcEntry.setStatus('mandatory')
smcDosWsDrvSpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvSpcId.setStatus('mandatory')
smcDosWsDrvSpcTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 22, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvSpcTxt.setStatus('mandatory')
smcDosWsDrvSpcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvSpcCnt.setStatus('mandatory')
smcDosWsTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 202, 2, 23), )
if mibBuilder.loadTexts: smcDosWsTrapDestTable.setStatus('mandatory')
smcDosWsTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 202, 2, 23, 1), ).setIndexNames((0, "SMC-AGENT-MIB", "smcDosWsTrapId"))
if mibBuilder.loadTexts: smcDosWsTrapDestEntry.setStatus('mandatory')
smcDosWsTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsTrapId.setStatus('mandatory')
smcDosWsTrapDstAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsTrapDstAdr.setStatus('mandatory')
smcDosWsTrapDstPro = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 23, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsTrapDstPro.setStatus('mandatory')
smcDosWsApiTrap = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsApiTrap.setStatus('mandatory')
mibBuilder.exportSymbols("SMC-AGENT-MIB", smc=smc, smcDosWsDrvSpcCnt=smcDosWsDrvSpcCnt, smcDosWsRst=smcDosWsRst, smcDosWsComment=smcDosWsComment, smcDosWsPcDate=smcDosWsPcDate, smcDosWsDrvId=smcDosWsDrvId, smcDosWsDrvSpcId=smcDosWsDrvSpcId, smcDosWsPcBios=smcDosWsPcBios, MacAddress=MacAddress, smcDosWsPcIo=smcDosWsPcIo, smcDosWsNodId=smcDosWsNodId, smcDosWsRcvPkts=smcDosWsRcvPkts, smcDosWsNicIrq=smcDosWsNicIrq, smcDosWsProtoMix=smcDosWsProtoMix, smcDosWsIpAdr=smcDosWsIpAdr, smcDosWsPcDisk=smcDosWsPcDisk, smcDosWsXmtPkts=smcDosWsXmtPkts, smcDosWsPcTime=smcDosWsPcTime, smcDosWs=smcDosWs, smcDosWsDosVer=smcDosWsDosVer, smcDosWsTrapDestTable=smcDosWsTrapDestTable, smcDosWsPcVideo=smcDosWsPcVideo, smcDosWsApiTrap=smcDosWsApiTrap, smcDosWsTrapId=smcDosWsTrapId, smcDosWsTrapDstAdr=smcDosWsTrapDstAdr, smcDosWsNicBasIo=smcDosWsNicBasIo, smcDosWsDrvSpcTable=smcDosWsDrvSpcTable, smcDosWsPcProc=smcDosWsPcProc, smcDosWsTrapDstPro=smcDosWsTrapDstPro, smcDosWsDrvSpcTxt=smcDosWsDrvSpcTxt, smcDosWsPcRam=smcDosWsPcRam, smcDosWsNicRam=smcDosWsNicRam, smcDosWsPcTyp=smcDosWsPcTyp, smcDosWsDrvSpcEntry=smcDosWsDrvSpcEntry, smcDosWsTrapDestEntry=smcDosWsTrapDestEntry)
