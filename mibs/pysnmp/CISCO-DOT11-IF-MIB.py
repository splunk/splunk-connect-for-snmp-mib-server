#
# PySNMP MIB module CISCO-DOT11-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:38:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
dot11SupportedDataRatesRxIndex, dot11AuthenticationAlgorithmsIndex = mibBuilder.importSymbols("IEEE802dot11-MIB", "dot11SupportedDataRatesRxIndex", "dot11AuthenticationAlgorithmsIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Gauge32, ObjectIdentity, Unsigned32, Counter32, IpAddress, Integer32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32", "IpAddress", "Integer32", "Counter64", "iso")
MacAddress, TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
ciscoDot11IfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 272))
ciscoDot11IfMIB.setRevisions(('2006-12-20 00:00', '2005-03-10 00:00', '2004-06-06 00:00', '2004-05-06 00:00', '2004-04-17 00:00', '2004-02-27 00:00', '2003-11-17 00:00', '2003-07-13 00:00', '2002-12-29 00:00', '2002-08-01 00:00', '2002-07-04 00:00', '2002-05-10 00:00', '2002-04-11 00:00',))
if mibBuilder.loadTexts: ciscoDot11IfMIB.setLastUpdated('200612200000Z')
if mibBuilder.loadTexts: ciscoDot11IfMIB.setOrganization('Cisco System Inc.')
ciscoDot11IfMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 0))
ciscoDot11IfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1))
cd11IfConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1))
cd11IfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2))
cd11IfManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1))
cd11IfPhyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2))
cd11IfMacStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1))
class CDot11IfVlanIdOrZero(TextualConvention, Unsigned32):
    reference = 'RFC-2674, Bridge MIB Extensions, August 1999, Q-BRIDGE-MIB, E. Bell.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4095)

class WepKeyType128(TextualConvention, OctetString):
    reference = 'IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, Section 8.3.2.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 13)

class CDot11IfMicAlgorithm(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("micNone", 1), ("micMXX", 2), ("micMichael", 3))

class CDot11IfWepKeyPermuteAlgorithm(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("wepPermuteNone", 1), ("wepPermuteIV", 2))

class CDot11IfCipherType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("ckip", 0), ("cmic", 1), ("tkip", 2), ("wep40", 3), ("wep128", 4), ("aesccm", 5))

class CDot11RadioFrequencyBandType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("ism24G", 0), ("unii1", 1), ("unii2", 2), ("unii3", 3), ("cept", 4), ("japan49G", 5), ("japan50G", 6))

class CDot11RadioModulationClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dsss", 1), ("ofdm", 2))

class Cd11IfDot11UpgradeStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("upgradeNotApplicable", 2), ("upgradeNotDone", 3), ("upgradeNotNeeded", 4), ("upgradeDone", 5))

cd11IfStationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cd11IfStationConfigTable.setStatus('current')
cd11IfStationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfStationConfigEntry.setStatus('current')
cd11IfStationRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("roleWgb", 1), ("roleBridge", 2), ("roleClient", 3), ("roleRoot", 4), ("roleRepeater", 5), ("roleApBridge", 6), ("roleApRepeater", 7), ("roleIBSS", 8), ("roleNrBridge", 9), ("roleApNrBridge", 10), ("roleScanner", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfStationRole.setStatus('current')
cd11IfCiscoExtensionsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfCiscoExtensionsEnable.setStatus('current')
cd11IfAllowBroadcastSsidAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAllowBroadcastSsidAssoc.setStatus('current')
cd11IfPrivacyOptionMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfPrivacyOptionMaxRate.setStatus('current')
cd11IfEthernetEncapsulDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encap802dot1H", 1), ("encapRfc1042", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfEthernetEncapsulDefault.setStatus('current')
cd11IfBridgeSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 38640))).setUnits('Kilometers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfBridgeSpacing.setStatus('current')
cd11IfDesiredSsidMaxAssocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredSsidMaxAssocSta.setStatus('current')
cd11IfAuxiliarySsidLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfAuxiliarySsidLength.setStatus('current')
cd11IfVoipExtensionsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfVoipExtensionsEnable.setStatus('current')
cd11IfDesiredSsidMicAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 10), CDot11IfMicAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredSsidMicAlgorithm.setStatus('current')
cd11IfDesiredSsidWepPermuteAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 11), CDot11IfWepKeyPermuteAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredSsidWepPermuteAlg.setStatus('current')
cd11IfWorldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("legacy", 2), ("dot11d", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWorldMode.setStatus('current')
cd11IfWorldModeCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWorldModeCountry.setStatus('current')
cd11IfMobileStationScanParent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMobileStationScanParent.setStatus('current')
cd11IfPsPacketForwardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPsPacketForwardEnable.setStatus('current')
cd11IfMultipleBssidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMultipleBssidEnable.setStatus('current')
cd11IfMobileStationListIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMobileStationListIgnore.setStatus('current')
cd11IfMobileStationScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfMobileStationScanChannel.setStatus('current')
cd11IfAuthAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cd11IfAuthAlgorithmTable.setStatus('current')
cd11IfAuthAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: cd11IfAuthAlgorithmEntry.setStatus('current')
cd11IfAuthAlgRequireEap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgRequireEap.setStatus('current')
cd11IfAuthAlgRequireMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgRequireMacAddr.setStatus('current')
cd11IfAuthAlgDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 3), CDot11IfVlanIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgDefaultVlan.setStatus('current')
cd11IfAuthAlgEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgEapMethod.setStatus('current')
cd11IfAuthAlgMacAddrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuthAlgMacAddrMethod.setStatus('current')
cd11IfWepDefaultKeysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3), )
if mibBuilder.loadTexts: cd11IfWepDefaultKeysTable.setStatus('current')
cd11IfWepDefaultKeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyIndex"))
if mibBuilder.loadTexts: cd11IfWepDefaultKeysEntry.setStatus('current')
cd11IfWepDefaultKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cd11IfWepDefaultKeyIndex.setStatus('current')
cd11IfWepDefaultKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWepDefaultKeyLen.setStatus('current')
cd11IfWepDefaultKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 3, 1, 3), WepKeyType128()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfWepDefaultKeyValue.setStatus('current')
cd11IfDesiredBssTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5), )
if mibBuilder.loadTexts: cd11IfDesiredBssTable.setStatus('current')
cd11IfDesiredBssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfDesiredBssIndex"))
if mibBuilder.loadTexts: cd11IfDesiredBssEntry.setStatus('current')
cd11IfDesiredBssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cd11IfDesiredBssIndex.setStatus('current')
cd11IfDesiredBssAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 5, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDesiredBssAddr.setStatus('current')
cd11IfAuxSsidTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6), )
if mibBuilder.loadTexts: cd11IfAuxSsidTable.setStatus('current')
cd11IfAuxSsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAuxSsidIndex"))
if mibBuilder.loadTexts: cd11IfAuxSsidEntry.setStatus('current')
cd11IfAuxSsidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: cd11IfAuxSsidIndex.setStatus('current')
cd11IfAuxSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsid.setStatus('current')
cd11IfAuxSsidBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidBroadcastSsid.setStatus('current')
cd11IfAuxSsidMaxAssocSta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidMaxAssocSta.setStatus('current')
cd11IfAuxSsidMicAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 5), CDot11IfMicAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidMicAlgorithm.setStatus('current')
cd11IfAuxSsidWepPermuteAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 6, 1, 6), CDot11IfWepKeyPermuteAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidWepPermuteAlg.setStatus('current')
cd11IfAuxSsidAuthAlgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7), )
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgTable.setStatus('current')
cd11IfAuxSsidAuthAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAuxSsidIndex"), (0, "IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEntry.setStatus('current')
cd11IfAuxSsidAuthAlgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEnable.setStatus('current')
cd11IfAuxSsidAuthAlgRequireEap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireEap.setStatus('current')
cd11IfAuxSsidAuthAlgRequireMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgRequireMac.setStatus('current')
cd11IfAuxSsidAuthAlgDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 4), CDot11IfVlanIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgDefaultVlan.setStatus('current')
cd11IfAuxSsidAuthAlgEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgEapMethod.setStatus('current')
cd11IfAuxSsidAuthAlgMacMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 7, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAuxSsidAuthAlgMacMethod.setStatus('current')
cd11IfAssignedAidTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8), )
if mibBuilder.loadTexts: cd11IfAssignedAidTable.setStatus('current')
cd11IfAssignedAidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAssignedAid"))
if mibBuilder.loadTexts: cd11IfAssignedAidEntry.setStatus('current')
cd11IfAssignedAid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 2007)))
if mibBuilder.loadTexts: cd11IfAssignedAid.setStatus('current')
cd11IfAssignedSta = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 8, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfAssignedSta.setStatus('current')
cd11IfVlanEncryptKeyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9), )
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTable.setStatus('current')
cd11IfVlanEncryptKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfVlanId"), (0, "CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyIndex"))
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyEntry.setStatus('current')
cd11IfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 1), CDot11IfVlanIdOrZero())
if mibBuilder.loadTexts: cd11IfVlanId.setStatus('current')
cd11IfVlanEncryptKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyIndex.setStatus('current')
cd11IfVlanEncryptKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyLen.setStatus('current')
cd11IfVlanEncryptKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 4), WepKeyType128()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyValue.setStatus('current')
cd11IfVlanEncryptKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyStatus.setStatus('current')
cd11IfVlanEncryptKeyTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 9, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptKeyTransmit.setStatus('current')
cd11IfVlanSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10), )
if mibBuilder.loadTexts: cd11IfVlanSecurityTable.setStatus('current')
cd11IfVlanSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityVlanId"))
if mibBuilder.loadTexts: cd11IfVlanSecurityEntry.setStatus('current')
cd11IfVlanSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 1), CDot11IfVlanIdOrZero())
if mibBuilder.loadTexts: cd11IfVlanSecurityVlanId.setStatus('current')
cd11IfVlanSecurityVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanSecurityVlanEnabled.setStatus('current')
cd11IfVlanBcastKeyChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanBcastKeyChangeInterval.setStatus('current')
cd11IfVlanBcastKeyCapabilChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanBcastKeyCapabilChange.setStatus('current')
cd11IfVlanBcastKeyClientLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanBcastKeyClientLeave.setStatus('current')
cd11IfVlanSecurityCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 6), CDot11IfCipherType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanSecurityCiphers.setStatus('current')
cd11IfVlanSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanSecurityRowStatus.setStatus('current')
cd11IfVlanEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cipher", 1), ("wep", 2))).clone('cipher')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanEncryptionMode.setStatus('current')
cd11IfVlanWepEncryptOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mandatory", 1), ("optional", 2))).clone('mandatory')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanWepEncryptOptions.setStatus('current')
cd11IfVlanWepEncryptMic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanWepEncryptMic.setStatus('current')
cd11IfVlanWepEncryptKeyHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanWepEncryptKeyHashing.setStatus('current')
cd11IfVlanPsPacketForwardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 10, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfVlanPsPacketForwardEnable.setStatus('current')
cd11IfRadioMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11), )
if mibBuilder.loadTexts: cd11IfRadioMonitoringTable.setStatus('current')
cd11IfRadioMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRemoteRadioMacAddr"))
if mibBuilder.loadTexts: cd11IfRadioMonitoringEntry.setStatus('current')
cd11IfRemoteRadioMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: cd11IfRemoteRadioMacAddr.setStatus('current')
cd11IfRadioMonitorPollingFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfRadioMonitorPollingFreq.setStatus('current')
cd11IfRadioMonitorPollingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfRadioMonitorPollingTimeOut.setStatus('current')
cd11IfLocalRadioMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("monitor", 2), ("inactive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfLocalRadioMonitorStatus.setStatus('current')
cd11IfRadioMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cd11IfRadioMonitorRowStatus.setStatus('current')
cd11IfDot11UpgradeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 12), )
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatusTable.setStatus('current')
cd11IfDot11UpgradeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatusEntry.setStatus('current')
cd11IfDot11UpgradeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 1, 12, 1, 1), Cd11IfDot11UpgradeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfDot11UpgradeStatus.setStatus('current')
cd11IfPhyOperationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cd11IfPhyOperationTable.setStatus('current')
cd11IfPhyOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfPhyOperationEntry.setStatus('current')
cd11IfCurrentCarrierSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("usa", 0), ("europe", 1), ("japan", 2), ("spain", 3), ("france", 4), ("belgium", 5), ("israel", 6), ("canada", 7), ("australia", 8), ("japanWide", 9), ("world", 10), ("usa5GHz", 11), ("europe5GHz", 12), ("japan5GHz", 13), ("singapore5GHz", 14), ("taiwan5GHz", 15), ("china", 16), ("northAmer5GHzUNI3", 17), ("chnIreAus5GHzUNI3", 18), ("hkNZ5GHzUNI3", 19), ("korea5GHzUNI3", 20), ("mexAusNZ5GHz", 21), ("china5GHz", 22), ("korea5GHzUNI123E", 23), ("japan5GHzUNI12", 24), ("taiwan5GHzUNI23E", 25), ("israel5GhzUNI12", 26), ("usaFCC49PS", 27), ("japan5GHzUNI1", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCurrentCarrierSet.setStatus('current')
cd11IfModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("mok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfModulationType.setStatus('current')
cd11IfPreambleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPreambleType.setStatus('current')
cd11IfDomainCapabilitySet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfDomainCapabilitySet.setStatus('current')
cd11IfPhyBasicRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyBasicRateSet.setStatus('current')
cd11IfPhyMacSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee802dot11a", 1), ("ieee802dot11b", 2), ("ieee802dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfPhyMacSpecification.setStatus('current')
cd11IfPhyConcatenation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyConcatenation.setStatus('current')
cd11IfPhyNativePowerUseStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyNativePowerUseStandard.setStatus('current')
cd11IfPhyFhssTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cd11IfPhyFhssTable.setStatus('current')
cd11IfPhyFhssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfPhyFhssEntry.setStatus('current')
cd11IfPhyFhssMaxCompatibleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyFhssMaxCompatibleRate.setStatus('current')
cd11IfPhyDsssTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cd11IfPhyDsssTable.setStatus('current')
cd11IfPhyDsssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfPhyDsssEntry.setStatus('current')
cd11IfPhyDsssMaxCompatibleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyDsssMaxCompatibleRate.setStatus('current')
cd11IfPhyDsssChannelAutoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfPhyDsssChannelAutoEnable.setStatus('current')
cd11IfPhyDsssCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(34, 34), ValueRangeConstraint(36, 36), ValueRangeConstraint(38, 38), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ValueRangeConstraint(46, 46), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(149, 149), ValueRangeConstraint(153, 153), ValueRangeConstraint(157, 157), ValueRangeConstraint(161, 161), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfPhyDsssCurrentChannel.setStatus('current')
cd11IfSuppDataRatesPrivacyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11), )
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyTable.setStatus('current')
cd11IfSuppDataRatesPrivacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyIndex"))
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyEntry.setStatus('current')
cd11IfSuppDataRatesPrivacyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyIndex.setStatus('current')
cd11IfSuppDataRatesPrivacyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setUnits('500 Kb per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyValue.setStatus('current')
cd11IfSuppDataRatesPrivacyEnabl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfSuppDataRatesPrivacyEnabl.setStatus('current')
cd11IfChanSelectTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12), )
if mibBuilder.loadTexts: cd11IfChanSelectTable.setStatus('current')
cd11IfChanSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfChanSelectChannel"))
if mibBuilder.loadTexts: cd11IfChanSelectEntry.setStatus('current')
cd11IfChanSelectChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 14), ValueRangeConstraint(34, 34), ValueRangeConstraint(36, 36), ValueRangeConstraint(38, 38), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ValueRangeConstraint(46, 46), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(149, 149), ValueRangeConstraint(153, 153), ValueRangeConstraint(157, 157), ValueRangeConstraint(161, 161), )))
if mibBuilder.loadTexts: cd11IfChanSelectChannel.setStatus('current')
cd11IfChanSelectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 12, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfChanSelectEnable.setStatus('current')
cd11IfClientTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13), )
if mibBuilder.loadTexts: cd11IfClientTxPowerTable.setStatus('current')
cd11IfClientTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfClientTxPowerEntry.setStatus('current')
cd11IfClientNumberTxPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientNumberTxPowerLevels.setStatus('current')
cd11IfClientTxPowerLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel1.setStatus('current')
cd11IfClientTxPowerLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel2.setStatus('current')
cd11IfClientTxPowerLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel3.setStatus('current')
cd11IfClientTxPowerLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel4.setStatus('current')
cd11IfClientTxPowerLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel5.setStatus('current')
cd11IfClientTxPowerLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel6.setStatus('current')
cd11IfClientTxPowerLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel7.setStatus('current')
cd11IfClientTxPowerLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfClientTxPowerLevel8.setStatus('current')
cd11IfClientCurrentTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfClientCurrentTxPowerLevel.setStatus('current')
cd11IfErpOfdmTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14), )
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerTable.setStatus('current')
cd11IfErpOfdmTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerEntry.setStatus('current')
cd11IfErpOfdmNumberTxPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmNumberTxPowerLevels.setStatus('current')
cd11IfErpOfdmTxPowerLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel1.setStatus('current')
cd11IfErpOfdmTxPowerLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel2.setStatus('current')
cd11IfErpOfdmTxPowerLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel3.setStatus('current')
cd11IfErpOfdmTxPowerLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel4.setStatus('current')
cd11IfErpOfdmTxPowerLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel5.setStatus('current')
cd11IfErpOfdmTxPowerLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel6.setStatus('current')
cd11IfErpOfdmTxPowerLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel7.setStatus('current')
cd11IfErpOfdmTxPowerLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfErpOfdmTxPowerLevel8.setStatus('current')
cd11IfErpOfdmCurrentTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfErpOfdmCurrentTxPowerLevel.setStatus('current')
cd11IfFrequencyBandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15), )
if mibBuilder.loadTexts: cd11IfFrequencyBandTable.setStatus('current')
cd11IfFrequencyBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBand"))
if mibBuilder.loadTexts: cd11IfFrequencyBandEntry.setStatus('current')
cd11IfRfFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cd11IfRfFrequencyBand.setStatus('current')
cd11IfRfFrequencyUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mHz", 1))).clone('mHz')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfFrequencyUnits.setStatus('current')
cd11IfRfStartChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfStartChannelNumber.setStatus('current')
cd11IfRfEndChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfEndChannelNumber.setStatus('current')
cd11IfRfChannelSpacingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfChannelSpacingNumber.setStatus('current')
cd11IfRfStartChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfStartChannelFrequency.setStatus('current')
cd11IfRfFrequencySpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfFrequencySpacing.setStatus('current')
cd11IfRfFrequencyBandType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 8), CDot11RadioFrequencyBandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRfFrequencyBandType.setStatus('current')
cd11IfMaxChannelSwitchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 15, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfMaxChannelSwitchTime.setStatus('current')
cd11IfNativeTxPowerSupportTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16), )
if mibBuilder.loadTexts: cd11IfNativeTxPowerSupportTable.setStatus('current')
cd11IfNativeTxPowerSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBand"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRadioModulationClass"), (0, "CISCO-DOT11-IF-MIB", "cd11IfNativeTxPowerLevel"))
if mibBuilder.loadTexts: cd11IfNativeTxPowerSupportEntry.setStatus('current')
cd11IfRadioModulationClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1, 1), CDot11RadioModulationClass())
if mibBuilder.loadTexts: cd11IfRadioModulationClass.setStatus('current')
cd11IfNativeTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cd11IfNativeTxPowerLevel.setStatus('current')
cd11IfNativeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfNativeTxPower.setStatus('current')
cd11IfRfNativePowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17), )
if mibBuilder.loadTexts: cd11IfRfNativePowerTable.setStatus('current')
cd11IfRfNativePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBand"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRadioModulationClass"))
if mibBuilder.loadTexts: cd11IfRfNativePowerEntry.setStatus('current')
cd11IfNativeNumberPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfNativeNumberPowerLevels.setStatus('current')
cd11IfNativeCurrentPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cd11IfNativeCurrentPowerLevel.setStatus('current')
cd11IfNativePowerUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mW", 1), ("dBm", 2))).clone('mW')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfNativePowerUnits.setStatus('current')
cd11IfDataRatesSensitivityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18), )
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityTable.setStatus('current')
cd11IfDataRatesSensitivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRadioModulationClass"), (0, "IEEE802dot11-MIB", "dot11SupportedDataRatesRxIndex"))
if mibBuilder.loadTexts: cd11IfDataRatesSensitivityEntry.setStatus('current')
cd11IfRatesSensRequiredSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18, 1, 1), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRatesSensRequiredSnr.setStatus('current')
cd11IfRatesSensContention = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 1, 2, 18, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRatesSensContention.setStatus('current')
cd11IfMacLayerCountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cd11IfMacLayerCountersTable.setStatus('current')
cd11IfMacLayerCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfMacLayerCountersEntry.setStatus('current')
cd11IfTransDeferEnerDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfTransDeferEnerDetects.setStatus('current')
cd11IfRecFrameMacCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRecFrameMacCrcErrors.setStatus('current')
cd11IfSsidMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfSsidMismatches.setStatus('current')
cd11IfRogueApDetectedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2), )
if mibBuilder.loadTexts: cd11IfRogueApDetectedTable.setStatus('current')
cd11IfRogueApDetectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfRogueApMacAddr"))
if mibBuilder.loadTexts: cd11IfRogueApDetectedEntry.setStatus('current')
cd11IfRogueApMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: cd11IfRogueApMacAddr.setStatus('current')
cd11IfRogueApName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 272, 1, 2, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfRogueApName.setStatus('current')
cd11IfStationSwitchOverNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 272, 0, 1)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfLocalRadioMonitorStatus"))
if mibBuilder.loadTexts: cd11IfStationSwitchOverNotif.setStatus('current')
cd11IfRogueApDetectedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 272, 0, 2)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRogueApName"))
if mibBuilder.loadTexts: cd11IfRogueApDetectedNotif.setStatus('current')
ciscoDot11IfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 3))
ciscoDot11IfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1))
ciscoDot11IfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2))
ciscoDot11IfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 1)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfManagementGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDomainCapabilityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfCompliance = ciscoDot11IfCompliance.setStatus('deprecated')
ciscoDot11IfComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 2)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev1 = ciscoDot11IfComplianceRev1.setStatus('deprecated')
ciscoDot11IfComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 3)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDataRatesSensitivityGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMonitorNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev2 = ciscoDot11IfComplianceRev2.setStatus('deprecated')
ciscoDot11IfComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 4)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDataRatesSensitivityGroup"), ("CISCO-DOT11-IF-MIB", "cd11Ifdot11UpgradeStatusGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMonitorNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev3 = ciscoDot11IfComplianceRev3.setStatus('deprecated')
ciscoDot11IfComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 1, 5)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfAssociationManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConfigGroupRev1"), ("CISCO-DOT11-IF-MIB", "cd11IfMacStatisticsGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeRadioManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfDataRatesSensitivityGroup"), ("CISCO-DOT11-IF-MIB", "cd11Ifdot11UpgradeStatusGroup"), ("CISCO-DOT11-IF-MIB", "cd11Ifdot11MobileStationScanGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidAssociationGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepManageGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRemoteMonitoringGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyErpConfigGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedGroup"), ("CISCO-DOT11-IF-MIB", "cd11IfMonitorNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfComplianceRev4 = ciscoDot11IfComplianceRev4.setStatus('current')
cd11IfManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 1)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationRole"), ("CISCO-DOT11-IF-MIB", "cd11IfCiscoExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAllowBroadcastSsidAssoc"), ("CISCO-DOT11-IF-MIB", "cd11IfPrivacyOptionMaxRate"), ("CISCO-DOT11-IF-MIB", "cd11IfEthernetEncapsulDefault"), ("CISCO-DOT11-IF-MIB", "cd11IfBridgeSpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxiliarySsidLength"), ("CISCO-DOT11-IF-MIB", "cd11IfVoipExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireMacAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredBssAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidBroadcastSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireMac"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfAssignedSta"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfManagementGroup = cd11IfManagementGroup.setStatus('deprecated')
cd11IfPhyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 2)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfCurrentCarrierSet"), ("CISCO-DOT11-IF-MIB", "cd11IfModulationType"), ("CISCO-DOT11-IF-MIB", "cd11IfPreambleType"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyFhssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssChannelAutoEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssCurrentChannel"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyEnabl"), ("CISCO-DOT11-IF-MIB", "cd11IfChanSelectEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyConfigGroup = cd11IfPhyConfigGroup.setStatus('deprecated')
cd11IfMacStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 3)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfTransDeferEnerDetects"), ("CISCO-DOT11-IF-MIB", "cd11IfRecFrameMacCrcErrors"), ("CISCO-DOT11-IF-MIB", "cd11IfSsidMismatches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfMacStatisticsGroup = cd11IfMacStatisticsGroup.setStatus('current')
cd11IfVlanEncryptKeyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 4)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfVlanEncryptKeyConfigGroup = cd11IfVlanEncryptKeyConfigGroup.setStatus('deprecated')
cd11IfDomainCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 5)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfDomainCapabilitySet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfDomainCapabilityGroup = cd11IfDomainCapabilityGroup.setStatus('deprecated')
cd11IfPhyMacCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 6)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfPhyBasicRateSet"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyMacSpecification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyMacCapabilityGroup = cd11IfPhyMacCapabilityGroup.setStatus('deprecated')
cd11IfAuthAlgMethodListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 7)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgMacAddrMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgMacMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfAuthAlgMethodListGroup = cd11IfAuthAlgMethodListGroup.setStatus('deprecated')
cd11IfRadioManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 8)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationRole"), ("CISCO-DOT11-IF-MIB", "cd11IfCiscoExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPrivacyOptionMaxRate"), ("CISCO-DOT11-IF-MIB", "cd11IfEthernetEncapsulDefault"), ("CISCO-DOT11-IF-MIB", "cd11IfBridgeSpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfVoipExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxiliarySsidLength"), ("CISCO-DOT11-IF-MIB", "cd11IfAllowBroadcastSsidAssoc"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredBssAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAssignedSta"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldMode"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldModeCountry"), ("CISCO-DOT11-IF-MIB", "cd11IfMobileStationScanParent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfRadioManageGroup = cd11IfRadioManageGroup.setStatus('deprecated')
cd11IfAssociationManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 9)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgRequireMacAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuthAlgMacAddrMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfWepDefaultKeyValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfAssociationManageGroup = cd11IfAssociationManageGroup.setStatus('current')
cd11IfSsidAssociationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 10)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfAuxSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidBroadcastSsid"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMaxAssocSta"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidMicAlgorithm"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidWepPermuteAlg"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireEap"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgRequireMac"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgDefaultVlan"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgEapMethod"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxSsidAuthAlgMacMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfSsidAssociationGroup = cd11IfSsidAssociationGroup.setStatus('current')
cd11IfVlanManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 11)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyLen"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyStatus"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptKeyTransmit"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityVlanEnabled"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanBcastKeyChangeInterval"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanBcastKeyCapabilChange"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanBcastKeyClientLeave"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityCiphers"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanSecurityRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfVlanManageGroup = cd11IfVlanManageGroup.setStatus('current')
cd11IfRemoteMonitoringGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 12)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRadioMonitorPollingFreq"), ("CISCO-DOT11-IF-MIB", "cd11IfRadioMonitorPollingTimeOut"), ("CISCO-DOT11-IF-MIB", "cd11IfLocalRadioMonitorStatus"), ("CISCO-DOT11-IF-MIB", "cd11IfRadioMonitorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfRemoteMonitoringGroup = cd11IfRemoteMonitoringGroup.setStatus('current')
cd11IfPhyConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 13)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfCurrentCarrierSet"), ("CISCO-DOT11-IF-MIB", "cd11IfModulationType"), ("CISCO-DOT11-IF-MIB", "cd11IfPreambleType"), ("CISCO-DOT11-IF-MIB", "cd11IfDomainCapabilitySet"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyBasicRateSet"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyMacSpecification"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyConcatenation"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssChannelAutoEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyDsssCurrentChannel"), ("CISCO-DOT11-IF-MIB", "cd11IfPhyFhssMaxCompatibleRate"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyValue"), ("CISCO-DOT11-IF-MIB", "cd11IfSuppDataRatesPrivacyEnabl"), ("CISCO-DOT11-IF-MIB", "cd11IfChanSelectEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfClientNumberTxPowerLevels"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel1"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel2"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel3"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel4"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel5"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel6"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel7"), ("CISCO-DOT11-IF-MIB", "cd11IfClientTxPowerLevel8"), ("CISCO-DOT11-IF-MIB", "cd11IfClientCurrentTxPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyConfigGroupRev1 = cd11IfPhyConfigGroupRev1.setStatus('current')
cd11IfPhyErpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 14)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmNumberTxPowerLevels"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel1"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel2"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel3"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel4"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel5"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel6"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel7"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmTxPowerLevel8"), ("CISCO-DOT11-IF-MIB", "cd11IfErpOfdmCurrentTxPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfPhyErpConfigGroup = cd11IfPhyErpConfigGroup.setStatus('current')
cd11IfVlanWepManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 15)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfVlanEncryptionMode"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepEncryptOptions"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepEncryptMic"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanWepEncryptKeyHashing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfVlanWepManageGroup = cd11IfVlanWepManageGroup.setStatus('current')
cd11IfRogueApDetectedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 16)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRogueApName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfRogueApDetectedGroup = cd11IfRogueApDetectedGroup.setStatus('current')
cd11IfStationManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 17)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationRole"), ("CISCO-DOT11-IF-MIB", "cd11IfCiscoExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfPrivacyOptionMaxRate"), ("CISCO-DOT11-IF-MIB", "cd11IfEthernetEncapsulDefault"), ("CISCO-DOT11-IF-MIB", "cd11IfBridgeSpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfVoipExtensionsEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfAuxiliarySsidLength"), ("CISCO-DOT11-IF-MIB", "cd11IfAllowBroadcastSsidAssoc"), ("CISCO-DOT11-IF-MIB", "cd11IfDesiredBssAddr"), ("CISCO-DOT11-IF-MIB", "cd11IfAssignedSta"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldMode"), ("CISCO-DOT11-IF-MIB", "cd11IfWorldModeCountry"), ("CISCO-DOT11-IF-MIB", "cd11IfMobileStationScanParent"), ("CISCO-DOT11-IF-MIB", "cd11IfPsPacketForwardEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfMultipleBssidEnable"), ("CISCO-DOT11-IF-MIB", "cd11IfVlanPsPacketForwardEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfStationManageGroup = cd11IfStationManageGroup.setStatus('current')
cd11IfNativeRadioManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 18)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfPhyNativePowerUseStandard"), ("CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyUnits"), ("CISCO-DOT11-IF-MIB", "cd11IfRfStartChannelNumber"), ("CISCO-DOT11-IF-MIB", "cd11IfRfEndChannelNumber"), ("CISCO-DOT11-IF-MIB", "cd11IfRfChannelSpacingNumber"), ("CISCO-DOT11-IF-MIB", "cd11IfRfStartChannelFrequency"), ("CISCO-DOT11-IF-MIB", "cd11IfRfFrequencySpacing"), ("CISCO-DOT11-IF-MIB", "cd11IfRfFrequencyBandType"), ("CISCO-DOT11-IF-MIB", "cd11IfMaxChannelSwitchTime"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeNumberPowerLevels"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeCurrentPowerLevel"), ("CISCO-DOT11-IF-MIB", "cd11IfNativePowerUnits"), ("CISCO-DOT11-IF-MIB", "cd11IfNativeTxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfNativeRadioManageGroup = cd11IfNativeRadioManageGroup.setStatus('current')
cd11IfDataRatesSensitivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 19)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfRatesSensRequiredSnr"), ("CISCO-DOT11-IF-MIB", "cd11IfRatesSensContention"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfDataRatesSensitivityGroup = cd11IfDataRatesSensitivityGroup.setStatus('current')
cd11IfMonitorNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 20)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfStationSwitchOverNotif"), ("CISCO-DOT11-IF-MIB", "cd11IfRogueApDetectedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11IfMonitorNotificationGroup = cd11IfMonitorNotificationGroup.setStatus('current')
cd11Ifdot11UpgradeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 21)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfDot11UpgradeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11Ifdot11UpgradeStatusGroup = cd11Ifdot11UpgradeStatusGroup.setStatus('current')
cd11Ifdot11MobileStationScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 272, 3, 2, 22)).setObjects(("CISCO-DOT11-IF-MIB", "cd11IfMobileStationListIgnore"), ("CISCO-DOT11-IF-MIB", "cd11IfMobileStationScanChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cd11Ifdot11MobileStationScanGroup = cd11Ifdot11MobileStationScanGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-DOT11-IF-MIB", cd11IfClientTxPowerLevel4=cd11IfClientTxPowerLevel4, cd11IfVlanBcastKeyClientLeave=cd11IfVlanBcastKeyClientLeave, cd11IfAssignedSta=cd11IfAssignedSta, cd11IfVlanSecurityVlanId=cd11IfVlanSecurityVlanId, cd11IfWepDefaultKeyIndex=cd11IfWepDefaultKeyIndex, cd11IfRadioModulationClass=cd11IfRadioModulationClass, cd11IfPhyDsssTable=cd11IfPhyDsssTable, cd11IfVlanPsPacketForwardEnable=cd11IfVlanPsPacketForwardEnable, cd11IfRadioMonitorRowStatus=cd11IfRadioMonitorRowStatus, ciscoDot11IfComplianceRev2=ciscoDot11IfComplianceRev2, cd11IfConfigurations=cd11IfConfigurations, cd11IfAuxSsidTable=cd11IfAuxSsidTable, cd11IfClientTxPowerLevel2=cd11IfClientTxPowerLevel2, cd11IfPhyDsssCurrentChannel=cd11IfPhyDsssCurrentChannel, cd11IfChanSelectEntry=cd11IfChanSelectEntry, cd11IfAuthAlgorithmTable=cd11IfAuthAlgorithmTable, cd11IfDesiredBssEntry=cd11IfDesiredBssEntry, cd11IfManagementGroup=cd11IfManagementGroup, cd11IfVlanEncryptionMode=cd11IfVlanEncryptionMode, cd11IfVlanManageGroup=cd11IfVlanManageGroup, cd11IfPhyOperationEntry=cd11IfPhyOperationEntry, cd11IfMultipleBssidEnable=cd11IfMultipleBssidEnable, cd11IfStationSwitchOverNotif=cd11IfStationSwitchOverNotif, cd11IfAuxSsidWepPermuteAlg=cd11IfAuxSsidWepPermuteAlg, ciscoDot11IfMIBGroups=ciscoDot11IfMIBGroups, cd11IfAuthAlgMacAddrMethod=cd11IfAuthAlgMacAddrMethod, cd11IfVlanSecurityEntry=cd11IfVlanSecurityEntry, cd11IfRogueApDetectedEntry=cd11IfRogueApDetectedEntry, cd11IfVlanSecurityRowStatus=cd11IfVlanSecurityRowStatus, cd11IfTransDeferEnerDetects=cd11IfTransDeferEnerDetects, CDot11RadioModulationClass=CDot11RadioModulationClass, cd11IfAuxSsidIndex=cd11IfAuxSsidIndex, CDot11IfWepKeyPermuteAlgorithm=CDot11IfWepKeyPermuteAlgorithm, cd11IfPhyDsssChannelAutoEnable=cd11IfPhyDsssChannelAutoEnable, cd11IfAuxSsidEntry=cd11IfAuxSsidEntry, cd11IfPhyFhssEntry=cd11IfPhyFhssEntry, cd11IfVlanEncryptKeyLen=cd11IfVlanEncryptKeyLen, cd11IfChanSelectTable=cd11IfChanSelectTable, cd11IfVlanWepEncryptMic=cd11IfVlanWepEncryptMic, cd11IfRfStartChannelFrequency=cd11IfRfStartChannelFrequency, cd11IfVlanBcastKeyChangeInterval=cd11IfVlanBcastKeyChangeInterval, cd11IfAuthAlgDefaultVlan=cd11IfAuthAlgDefaultVlan, cd11IfWepDefaultKeyValue=cd11IfWepDefaultKeyValue, cd11IfEthernetEncapsulDefault=cd11IfEthernetEncapsulDefault, cd11IfStatistics=cd11IfStatistics, cd11IfAllowBroadcastSsidAssoc=cd11IfAllowBroadcastSsidAssoc, cd11IfNativeRadioManageGroup=cd11IfNativeRadioManageGroup, cd11IfPhyBasicRateSet=cd11IfPhyBasicRateSet, cd11IfDataRatesSensitivityEntry=cd11IfDataRatesSensitivityEntry, cd11IfAssignedAid=cd11IfAssignedAid, cd11IfLocalRadioMonitorStatus=cd11IfLocalRadioMonitorStatus, cd11IfPhyOperationTable=cd11IfPhyOperationTable, cd11IfRfNativePowerTable=cd11IfRfNativePowerTable, cd11IfMacLayerCountersTable=cd11IfMacLayerCountersTable, cd11IfFrequencyBandEntry=cd11IfFrequencyBandEntry, cd11IfVlanEncryptKeyEntry=cd11IfVlanEncryptKeyEntry, cd11IfPrivacyOptionMaxRate=cd11IfPrivacyOptionMaxRate, cd11IfRadioMonitoringEntry=cd11IfRadioMonitoringEntry, cd11IfPhyDsssMaxCompatibleRate=cd11IfPhyDsssMaxCompatibleRate, cd11IfAuthAlgorithmEntry=cd11IfAuthAlgorithmEntry, cd11IfErpOfdmTxPowerLevel7=cd11IfErpOfdmTxPowerLevel7, ciscoDot11IfComplianceRev3=ciscoDot11IfComplianceRev3, cd11IfRogueApDetectedGroup=cd11IfRogueApDetectedGroup, cd11IfAuxSsid=cd11IfAuxSsid, cd11IfRfEndChannelNumber=cd11IfRfEndChannelNumber, cd11IfVlanBcastKeyCapabilChange=cd11IfVlanBcastKeyCapabilChange, cd11IfAuxSsidBroadcastSsid=cd11IfAuxSsidBroadcastSsid, cd11IfAssociationManageGroup=cd11IfAssociationManageGroup, cd11IfAuxiliarySsidLength=cd11IfAuxiliarySsidLength, ciscoDot11IfMIBNotifications=ciscoDot11IfMIBNotifications, cd11IfPhyConcatenation=cd11IfPhyConcatenation, cd11IfDataRatesSensitivityTable=cd11IfDataRatesSensitivityTable, cd11IfRogueApDetectedTable=cd11IfRogueApDetectedTable, cd11IfDesiredBssAddr=cd11IfDesiredBssAddr, cd11IfRadioManageGroup=cd11IfRadioManageGroup, cd11IfErpOfdmTxPowerTable=cd11IfErpOfdmTxPowerTable, cd11IfNativeTxPower=cd11IfNativeTxPower, cd11IfDot11UpgradeStatus=cd11IfDot11UpgradeStatus, cd11IfSuppDataRatesPrivacyTable=cd11IfSuppDataRatesPrivacyTable, cd11IfClientTxPowerLevel8=cd11IfClientTxPowerLevel8, cd11IfAuxSsidAuthAlgEapMethod=cd11IfAuxSsidAuthAlgEapMethod, cd11IfAuxSsidAuthAlgEnable=cd11IfAuxSsidAuthAlgEnable, cd11IfNativePowerUnits=cd11IfNativePowerUnits, cd11IfAuxSsidAuthAlgRequireMac=cd11IfAuxSsidAuthAlgRequireMac, cd11IfRfFrequencyUnits=cd11IfRfFrequencyUnits, cd11IfRfFrequencySpacing=cd11IfRfFrequencySpacing, cd11IfNativeTxPowerSupportTable=cd11IfNativeTxPowerSupportTable, cd11IfClientNumberTxPowerLevels=cd11IfClientNumberTxPowerLevels, cd11IfMacStatistics=cd11IfMacStatistics, cd11IfVlanWepEncryptOptions=cd11IfVlanWepEncryptOptions, cd11IfRfFrequencyBandType=cd11IfRfFrequencyBandType, cd11IfPhyConfigGroup=cd11IfPhyConfigGroup, cd11IfRadioMonitorPollingFreq=cd11IfRadioMonitorPollingFreq, cd11IfRfFrequencyBand=cd11IfRfFrequencyBand, cd11IfRogueApDetectedNotif=cd11IfRogueApDetectedNotif, cd11IfDesiredBssIndex=cd11IfDesiredBssIndex, cd11IfMobileStationScanChannel=cd11IfMobileStationScanChannel, cd11IfAssignedAidEntry=cd11IfAssignedAidEntry, cd11IfAssignedAidTable=cd11IfAssignedAidTable, PYSNMP_MODULE_ID=ciscoDot11IfMIB, ciscoDot11IfMIBObjects=ciscoDot11IfMIBObjects, cd11IfMonitorNotificationGroup=cd11IfMonitorNotificationGroup, cd11IfRadioMonitorPollingTimeOut=cd11IfRadioMonitorPollingTimeOut, ciscoDot11IfMIB=ciscoDot11IfMIB, cd11IfRfStartChannelNumber=cd11IfRfStartChannelNumber, cd11IfVlanSecurityTable=cd11IfVlanSecurityTable, cd11IfPhyNativePowerUseStandard=cd11IfPhyNativePowerUseStandard, cd11IfMobileStationScanParent=cd11IfMobileStationScanParent, CDot11IfMicAlgorithm=CDot11IfMicAlgorithm, cd11IfAuxSsidMicAlgorithm=cd11IfAuxSsidMicAlgorithm, cd11IfWepDefaultKeyLen=cd11IfWepDefaultKeyLen, cd11IfSuppDataRatesPrivacyEntry=cd11IfSuppDataRatesPrivacyEntry, cd11IfClientTxPowerLevel5=cd11IfClientTxPowerLevel5, cd11IfChanSelectChannel=cd11IfChanSelectChannel, cd11IfVlanId=cd11IfVlanId, cd11IfStationManageGroup=cd11IfStationManageGroup, cd11IfVlanEncryptKeyTransmit=cd11IfVlanEncryptKeyTransmit, cd11IfErpOfdmTxPowerLevel2=cd11IfErpOfdmTxPowerLevel2, cd11IfNativeTxPowerSupportEntry=cd11IfNativeTxPowerSupportEntry, cd11IfRogueApName=cd11IfRogueApName, cd11IfPhyFhssMaxCompatibleRate=cd11IfPhyFhssMaxCompatibleRate, cd11IfPsPacketForwardEnable=cd11IfPsPacketForwardEnable, cd11IfPhyConfigGroupRev1=cd11IfPhyConfigGroupRev1, Cd11IfDot11UpgradeStatus=Cd11IfDot11UpgradeStatus, cd11IfVlanSecurityVlanEnabled=cd11IfVlanSecurityVlanEnabled, cd11IfErpOfdmTxPowerLevel8=cd11IfErpOfdmTxPowerLevel8, cd11IfVlanSecurityCiphers=cd11IfVlanSecurityCiphers, cd11IfPhyDsssEntry=cd11IfPhyDsssEntry, cd11IfAuxSsidAuthAlgTable=cd11IfAuxSsidAuthAlgTable, cd11IfClientCurrentTxPowerLevel=cd11IfClientCurrentTxPowerLevel, cd11IfErpOfdmTxPowerEntry=cd11IfErpOfdmTxPowerEntry, cd11IfStationRole=cd11IfStationRole, cd11IfDomainCapabilitySet=cd11IfDomainCapabilitySet, cd11IfCiscoExtensionsEnable=cd11IfCiscoExtensionsEnable, cd11IfMobileStationListIgnore=cd11IfMobileStationListIgnore, cd11IfAuxSsidAuthAlgEntry=cd11IfAuxSsidAuthAlgEntry, cd11IfPreambleType=cd11IfPreambleType, cd11IfClientTxPowerTable=cd11IfClientTxPowerTable, cd11IfChanSelectEnable=cd11IfChanSelectEnable, cd11IfErpOfdmCurrentTxPowerLevel=cd11IfErpOfdmCurrentTxPowerLevel, cd11IfAuthAlgRequireEap=cd11IfAuthAlgRequireEap, cd11IfVlanEncryptKeyIndex=cd11IfVlanEncryptKeyIndex, cd11IfSuppDataRatesPrivacyEnabl=cd11IfSuppDataRatesPrivacyEnabl, cd11IfClientTxPowerLevel7=cd11IfClientTxPowerLevel7, cd11IfErpOfdmNumberTxPowerLevels=cd11IfErpOfdmNumberTxPowerLevels, cd11IfAuthAlgEapMethod=cd11IfAuthAlgEapMethod, cd11IfAuxSsidMaxAssocSta=cd11IfAuxSsidMaxAssocSta, cd11IfVlanEncryptKeyStatus=cd11IfVlanEncryptKeyStatus, cd11IfNativeTxPowerLevel=cd11IfNativeTxPowerLevel, cd11IfPhyMacSpecification=cd11IfPhyMacSpecification, ciscoDot11IfMIBCompliances=ciscoDot11IfMIBCompliances, ciscoDot11IfCompliance=ciscoDot11IfCompliance, ciscoDot11IfComplianceRev1=ciscoDot11IfComplianceRev1, cd11IfDot11UpgradeStatusEntry=cd11IfDot11UpgradeStatusEntry, cd11IfCurrentCarrierSet=cd11IfCurrentCarrierSet, cd11IfRemoteMonitoringGroup=cd11IfRemoteMonitoringGroup, cd11IfVlanEncryptKeyValue=cd11IfVlanEncryptKeyValue, cd11IfSuppDataRatesPrivacyValue=cd11IfSuppDataRatesPrivacyValue, cd11IfClientTxPowerLevel1=cd11IfClientTxPowerLevel1, cd11IfClientTxPowerLevel3=cd11IfClientTxPowerLevel3, cd11IfVlanWepEncryptKeyHashing=cd11IfVlanWepEncryptKeyHashing, cd11IfRfChannelSpacingNumber=cd11IfRfChannelSpacingNumber, cd11IfMacLayerCountersEntry=cd11IfMacLayerCountersEntry, cd11IfSsidAssociationGroup=cd11IfSsidAssociationGroup, ciscoDot11IfComplianceRev4=ciscoDot11IfComplianceRev4, cd11IfNativeNumberPowerLevels=cd11IfNativeNumberPowerLevels, cd11IfVlanEncryptKeyConfigGroup=cd11IfVlanEncryptKeyConfigGroup, cd11IfVoipExtensionsEnable=cd11IfVoipExtensionsEnable, cd11IfPhyConfig=cd11IfPhyConfig, CDot11IfVlanIdOrZero=CDot11IfVlanIdOrZero, cd11IfManagement=cd11IfManagement, cd11IfClientTxPowerLevel6=cd11IfClientTxPowerLevel6, ciscoDot11IfMIBConformance=ciscoDot11IfMIBConformance, cd11IfWepDefaultKeysTable=cd11IfWepDefaultKeysTable, cd11IfRadioMonitoringTable=cd11IfRadioMonitoringTable, cd11IfRatesSensContention=cd11IfRatesSensContention, cd11IfPhyMacCapabilityGroup=cd11IfPhyMacCapabilityGroup, cd11IfErpOfdmTxPowerLevel4=cd11IfErpOfdmTxPowerLevel4, cd11IfDesiredSsidMaxAssocSta=cd11IfDesiredSsidMaxAssocSta, cd11IfRemoteRadioMacAddr=cd11IfRemoteRadioMacAddr, cd11IfAuxSsidAuthAlgDefaultVlan=cd11IfAuxSsidAuthAlgDefaultVlan, cd11IfAuthAlgMethodListGroup=cd11IfAuthAlgMethodListGroup, cd11IfPhyErpConfigGroup=cd11IfPhyErpConfigGroup, cd11Ifdot11MobileStationScanGroup=cd11Ifdot11MobileStationScanGroup, cd11IfModulationType=cd11IfModulationType, cd11IfWorldMode=cd11IfWorldMode, cd11IfAuxSsidAuthAlgMacMethod=cd11IfAuxSsidAuthAlgMacMethod, cd11IfErpOfdmTxPowerLevel5=cd11IfErpOfdmTxPowerLevel5, cd11IfMaxChannelSwitchTime=cd11IfMaxChannelSwitchTime, cd11IfAuxSsidAuthAlgRequireEap=cd11IfAuxSsidAuthAlgRequireEap, cd11IfWorldModeCountry=cd11IfWorldModeCountry, cd11IfVlanEncryptKeyTable=cd11IfVlanEncryptKeyTable, cd11IfErpOfdmTxPowerLevel3=cd11IfErpOfdmTxPowerLevel3, cd11IfSsidMismatches=cd11IfSsidMismatches, cd11IfDesiredSsidWepPermuteAlg=cd11IfDesiredSsidWepPermuteAlg, WepKeyType128=WepKeyType128, cd11IfStationConfigTable=cd11IfStationConfigTable, cd11IfAuthAlgRequireMacAddr=cd11IfAuthAlgRequireMacAddr, cd11IfErpOfdmTxPowerLevel6=cd11IfErpOfdmTxPowerLevel6, cd11IfRatesSensRequiredSnr=cd11IfRatesSensRequiredSnr, cd11IfDataRatesSensitivityGroup=cd11IfDataRatesSensitivityGroup, cd11IfVlanWepManageGroup=cd11IfVlanWepManageGroup, cd11Ifdot11UpgradeStatusGroup=cd11Ifdot11UpgradeStatusGroup, cd11IfRfNativePowerEntry=cd11IfRfNativePowerEntry, cd11IfDot11UpgradeStatusTable=cd11IfDot11UpgradeStatusTable, cd11IfRogueApMacAddr=cd11IfRogueApMacAddr, cd11IfStationConfigEntry=cd11IfStationConfigEntry, cd11IfDomainCapabilityGroup=cd11IfDomainCapabilityGroup, cd11IfClientTxPowerEntry=cd11IfClientTxPowerEntry, cd11IfWepDefaultKeysEntry=cd11IfWepDefaultKeysEntry, cd11IfFrequencyBandTable=cd11IfFrequencyBandTable, cd11IfNativeCurrentPowerLevel=cd11IfNativeCurrentPowerLevel, cd11IfPhyFhssTable=cd11IfPhyFhssTable, cd11IfRecFrameMacCrcErrors=cd11IfRecFrameMacCrcErrors, cd11IfMacStatisticsGroup=cd11IfMacStatisticsGroup, cd11IfDesiredBssTable=cd11IfDesiredBssTable, CDot11IfCipherType=CDot11IfCipherType, CDot11RadioFrequencyBandType=CDot11RadioFrequencyBandType, cd11IfDesiredSsidMicAlgorithm=cd11IfDesiredSsidMicAlgorithm, cd11IfSuppDataRatesPrivacyIndex=cd11IfSuppDataRatesPrivacyIndex, cd11IfBridgeSpacing=cd11IfBridgeSpacing, cd11IfErpOfdmTxPowerLevel1=cd11IfErpOfdmTxPowerLevel1)
