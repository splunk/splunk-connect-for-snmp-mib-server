#
# PySNMP MIB module INNOVX-DTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INNOVX-DTE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
dteGroup, = mibBuilder.importSymbols("INNOVX-CORE-MIB", "dteGroup")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, ObjectIdentity, TimeTicks, ModuleIdentity, Gauge32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Counter32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Gauge32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Counter32", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dteAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 1))
dteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2))
dteAlarmCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 3))
dteDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4))
dteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5))
dtesMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtesMIBversion.setStatus('mandatory')
dteInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("v28", 1), ("v35", 2), ("rs449", 3), ("eia530", 4), ("eia530a", 5), ("x21", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteInterfaceType.setStatus('mandatory')
dteTxInvertingTiming = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slaveNormal", 1), ("slaveInvert", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteTxInvertingTiming.setStatus('mandatory')
dteRxCarrier = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedOn", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteRxCarrier.setStatus('mandatory')
dteDsrControl = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedOn", 1), ("followsDTR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteDsrControl.setStatus('mandatory')
dteDtrLossTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteDtrLossTrapSeverity.setStatus('mandatory')
dteLoopback = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTest", 1), ("toChan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteLoopback.setStatus('mandatory')
dteDiagTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testTime1Min", 1), ("testTime5Mins", 2), ("testTime10Mins", 3), ("testTime20Mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteDiagTestDuration.setStatus('mandatory')
dteDiagTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statDteLoop", 1), ("statNoTestinProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteDiagTestStatus.setStatus('mandatory')
dteLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteLedStatus.setStatus('mandatory')
dtePortStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtePortStatus.setStatus('mandatory')
dtePortFrameCounts = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtePortFrameCounts.setStatus('mandatory')
mibBuilder.exportSymbols("INNOVX-DTE-MIB", dteAlarmCfg=dteAlarmCfg, dteCfg=dteCfg, dteLoopback=dteLoopback, dteDiagTestStatus=dteDiagTestStatus, dteInterfaceType=dteInterfaceType, dteAdmin=dteAdmin, dteLedStatus=dteLedStatus, dtePortFrameCounts=dtePortFrameCounts, dteTxInvertingTiming=dteTxInvertingTiming, dteDiagTestDuration=dteDiagTestDuration, dteDtrLossTrapSeverity=dteDtrLossTrapSeverity, dteDsrControl=dteDsrControl, dteStatus=dteStatus, dtesMIBversion=dtesMIBversion, dteRxCarrier=dteRxCarrier, dteDiagnostics=dteDiagnostics, dtePortStatus=dtePortStatus)
