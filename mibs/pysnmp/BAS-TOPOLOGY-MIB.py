#
# PySNMP MIB module BAS-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
BasLogicalPortId, BasChassisType, BasChassisId, BasInterfaceId, basTopology, BasCardClass, BasSlotId, BasIfClass = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "BasChassisType", "BasChassisId", "BasInterfaceId", "basTopology", "BasCardClass", "BasSlotId", "BasIfClass")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifEntry, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifEntry", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, ModuleIdentity, Counter32, ObjectIdentity, NotificationType, IpAddress, Counter64, Integer32, iso, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "ModuleIdentity", "Counter32", "ObjectIdentity", "NotificationType", "IpAddress", "Counter64", "Integer32", "iso", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
basTopologyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1))
if mibBuilder.loadTexts: basTopologyMIB.setLastUpdated('9812010000Z')
if mibBuilder.loadTexts: basTopologyMIB.setOrganization('Broadband Access Systems')
basChassisTopTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1), )
if mibBuilder.loadTexts: basChassisTopTable.setStatus('current')
basChassisTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1), ).setIndexNames((0, "BAS-TOPOLOGY-MIB", "basChassisTopChassis"), (0, "BAS-TOPOLOGY-MIB", "basChassisTopSlot"), (0, "BAS-TOPOLOGY-MIB", "basChassisTopIf"), (0, "BAS-TOPOLOGY-MIB", "basChassisTopLPort"))
if mibBuilder.loadTexts: basChassisTopEntry.setStatus('current')
basChassisTopChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basChassisTopChassis.setStatus('current')
basChassisTopSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basChassisTopSlot.setStatus('current')
basChassisTopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basChassisTopIf.setStatus('current')
basChassisTopLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basChassisTopLPort.setStatus('current')
basChassisTopChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopChassisNumber.setStatus('current')
basChassisTopChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 6), BasChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopChassisType.setStatus('current')
basChassisTopSlotInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopSlotInfo.setStatus('current')
basChassisTopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopStatus.setStatus('current')
basSlotTopTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2), )
if mibBuilder.loadTexts: basSlotTopTable.setStatus('current')
basSlotTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1), ).setIndexNames((0, "BAS-TOPOLOGY-MIB", "basSlotTopChassis"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopSlot"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopIf"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopLPort"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACChassis"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACSlot"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACIf"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACLPort"))
if mibBuilder.loadTexts: basSlotTopEntry.setStatus('current')
basSlotTopChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basSlotTopChassis.setStatus('current')
basSlotTopSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basSlotTopSlot.setStatus('current')
basSlotTopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basSlotTopIf.setStatus('current')
basSlotTopLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basSlotTopLPort.setStatus('current')
basSlotTopACChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basSlotTopACChassis.setStatus('current')
basSlotTopACSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basSlotTopACSlot.setStatus('current')
basSlotTopACIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basSlotTopACIf.setStatus('current')
basSlotTopACLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basSlotTopACLPort.setStatus('current')
basSlotTopNumberOfIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopNumberOfIfs.setStatus('current')
basSlotTopIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopIfInfo.setStatus('current')
basSlotTopCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 11), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopCardType.setStatus('current')
basSlotTopInterChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopInterChassisIP.setStatus('current')
basSlotTopIntraChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopIntraChassisIP.setStatus('current')
basSlotTopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopStatus.setStatus('current')
basIfTopTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3), )
if mibBuilder.loadTexts: basIfTopTable.setStatus('current')
basIfTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1), )
ifEntry.registerAugmentions(("BAS-TOPOLOGY-MIB", "basIfTopEntry"))
basIfTopEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: basIfTopEntry.setStatus('current')
basIfTopIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 1), BasIfClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopIfClass.setStatus('current')
basIfTopIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopIfType.setStatus('current')
basIfTopICLNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopICLNeighbor.setStatus('current')
basIfTopICLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("redundant", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopICLMode.setStatus('current')
basIfTopIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopIfStatus.setStatus('current')
basRSTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4), )
if mibBuilder.loadTexts: basRSTable.setStatus('current')
basRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1), ).setIndexNames((0, "BAS-TOPOLOGY-MIB", "basRSMgrChassis"), (0, "BAS-TOPOLOGY-MIB", "basRSMgrSlot"), (0, "BAS-TOPOLOGY-MIB", "basRSMgrIf"), (0, "BAS-TOPOLOGY-MIB", "basRSMgrLPort"), (0, "BAS-TOPOLOGY-MIB", "basRSChassis"), (0, "BAS-TOPOLOGY-MIB", "basRSSlot"), (0, "BAS-TOPOLOGY-MIB", "basRSIf"), (0, "BAS-TOPOLOGY-MIB", "basRSLPort"))
if mibBuilder.loadTexts: basRSEntry.setStatus('current')
basRSMgrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basRSMgrChassis.setStatus('current')
basRSMgrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basRSMgrSlot.setStatus('current')
basRSMgrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basRSMgrIf.setStatus('current')
basRSMgrLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basRSMgrLPort.setStatus('current')
basRSChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 5), BasChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSChassis.setStatus('current')
basRSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 6), BasSlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSSlot.setStatus('current')
basRSIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 7), BasInterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSIf.setStatus('current')
basRSLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 8), BasLogicalPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSLPort.setStatus('current')
basRSRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSRole.setStatus('current')
mibBuilder.exportSymbols("BAS-TOPOLOGY-MIB", basIfTopICLNeighbor=basIfTopICLNeighbor, basChassisTopSlotInfo=basChassisTopSlotInfo, basTopologyMIB=basTopologyMIB, basChassisTopChassis=basChassisTopChassis, basSlotTopEntry=basSlotTopEntry, basChassisTopIf=basChassisTopIf, basRSSlot=basRSSlot, basRSLPort=basRSLPort, basChassisTopLPort=basChassisTopLPort, basIfTopEntry=basIfTopEntry, basIfTopICLMode=basIfTopICLMode, basIfTopIfStatus=basIfTopIfStatus, basSlotTopACSlot=basSlotTopACSlot, basChassisTopChassisType=basChassisTopChassisType, basRSRole=basRSRole, basSlotTopIfInfo=basSlotTopIfInfo, basSlotTopIf=basSlotTopIf, basRSMgrChassis=basRSMgrChassis, basChassisTopSlot=basChassisTopSlot, basRSMgrLPort=basRSMgrLPort, basChassisTopTable=basChassisTopTable, basSlotTopChassis=basSlotTopChassis, basRSMgrIf=basRSMgrIf, basSlotTopInterChassisIP=basSlotTopInterChassisIP, basRSEntry=basRSEntry, basRSIf=basRSIf, basSlotTopACLPort=basSlotTopACLPort, basSlotTopStatus=basSlotTopStatus, basIfTopTable=basIfTopTable, basRSTable=basRSTable, basChassisTopChassisNumber=basChassisTopChassisNumber, PYSNMP_MODULE_ID=basTopologyMIB, basSlotTopIntraChassisIP=basSlotTopIntraChassisIP, basRSMgrSlot=basRSMgrSlot, basRSChassis=basRSChassis, basSlotTopCardType=basSlotTopCardType, basSlotTopACIf=basSlotTopACIf, basSlotTopTable=basSlotTopTable, basSlotTopLPort=basSlotTopLPort, basSlotTopACChassis=basSlotTopACChassis, basSlotTopNumberOfIfs=basSlotTopNumberOfIfs, basChassisTopStatus=basChassisTopStatus, basIfTopIfClass=basIfTopIfClass, basSlotTopSlot=basSlotTopSlot, basIfTopIfType=basIfTopIfType, basChassisTopEntry=basChassisTopEntry)
