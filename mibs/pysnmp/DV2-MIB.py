#
# PySNMP MIB module DV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DV2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter64, enterprises, ObjectIdentity, MibIdentifier, Integer32, iso, Counter32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter64", "enterprises", "ObjectIdentity", "MibIdentifier", "Integer32", "iso", "Counter32", "NotificationType", "ModuleIdentity")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
netcomm = MibIdentifier((1, 3, 6, 1, 4, 1, 251))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1))
dv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1))
dv2System = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 1))
dv2Slot0 = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 2))
dv2Trace = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 3))
dv2SlipLine = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 4))
dv2StaticRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 5))
dv2Clocks = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 6))
dv2VcDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 8))
dv2FrRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 9))
dv2VcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 10))
dv2PLPP = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 11))
dv2LocalFibre = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 12))
dv2DS = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 13))
dv2Billing = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 14))
dv2QeDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 15))
dv2SDH = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 16))
dv2Pvc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 17))
dv2Svc = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 18))
dv2CE = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 19))
dv2VE = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 20))
dv2SystemClocks = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 21))
mjlimSlipLine = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 22))
mjlimSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 23))
vidInCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 24))
vidOutCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 25))
vidInSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 26))
vidOutSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 27))
audInCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 28))
audOutCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 29))
audInSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 30))
audOutSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 31))
dataCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 32))
dataSta = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 33))
mjlimControl = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 34))
dv2PDH = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 35))
dv2Oam = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 36))
dv2Lmi = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 37))
dv2AlarmHandler = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 38))
dv2Cac = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 39))
dv2MS2FRAC = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 40))
dv2aal5 = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 41))
vhsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 42))
vhcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 43))
vhmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 44))
class VirtualCircuitIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class VirtualPathIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class E164(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 10)

class E164SUB(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 22)

class Q93bCauseDiag(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class Hex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DateTimeString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class DateAndTime(DateTimeString):
    pass

sysMemEnd = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 1), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemEnd.setStatus('mandatory')
sysInitialMemB = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialMemB.setStatus('mandatory')
sysCurrentMemB = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentMemB.setStatus('mandatory')
sysInitialSema = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialSema.setStatus('mandatory')
sysCurrentSema = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentSema.setStatus('mandatory')
sysInitialQItems = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialQItems.setStatus('mandatory')
sysCurrentQItems = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentQItems.setStatus('mandatory')
sysInitialQs = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialQs.setStatus('mandatory')
sysCurrentQs = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentQs.setStatus('mandatory')
sysInitialPorts = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInitialPorts.setStatus('mandatory')
sysCurrentPorts = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentPorts.setStatus('mandatory')
sysDefaultCellMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDefaultCellMode.setStatus('mandatory')
sysLinkTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15), )
if mibBuilder.loadTexts: sysLinkTable.setStatus('mandatory')
sysLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1), ).setIndexNames((0, "DV2-MIB", "sysLkLinkNo"))
if mibBuilder.loadTexts: sysLinkEntry.setStatus('mandatory')
sysLkLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkLinkNo.setStatus('mandatory')
sysLkKillLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkKillLink.setStatus('mandatory')
sysLkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkState.setStatus('mandatory')
sysLkTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkTxCells.setStatus('mandatory')
sysLkRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkRxCells.setStatus('mandatory')
sysLkTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkTxRate.setStatus('mandatory')
sysLkRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkRxRate.setStatus('mandatory')
sysLkTxMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkTxMaxRate.setStatus('mandatory')
sysLkRxMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLkRxMaxRate.setStatus('mandatory')
sysLkResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkResetStats.setStatus('mandatory')
sysLkClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("low-quality", 2), ("high-quality", 3), ("loop-timed", 4), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkClockSrc.setStatus('mandatory')
sysLkResetResrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLkResetResrc.setStatus('mandatory')
sysLKEgCLPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKEgCLPThreshold.setStatus('mandatory')
sysLKIgCLPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKIgCLPThreshold.setStatus('mandatory')
sysLKEgEFCIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKEgEFCIThreshold.setStatus('mandatory')
sysLKIgEFCIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKIgEFCIThreshold.setStatus('mandatory')
sysLKEgLogBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKEgLogBuffer.setStatus('mandatory')
sysLKIgLogBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLKIgLogBuffer.setStatus('mandatory')
sysLKEgFIFODepth = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKEgFIFODepth.setStatus('mandatory')
sysLKIgFIFODepth = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKIgFIFODepth.setStatus('mandatory')
sysLKEgMemBlockId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16, 63))).clone(namedValues=NamedValues(("mem-4k", 4), ("mem-16k", 16), ("mem-64k", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKEgMemBlockId.setStatus('mandatory')
sysLKIgMemBlockId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16, 63))).clone(namedValues=NamedValues(("mem-4k", 4), ("mem-16k", 16), ("mem-64k", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLKIgMemBlockId.setStatus('mandatory')
sysDbTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16), )
if mibBuilder.loadTexts: sysDbTable.setStatus('mandatory')
sysDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1), ).setIndexNames((0, "DV2-MIB", "sysDbIndex"))
if mibBuilder.loadTexts: sysDbEntry.setStatus('mandatory')
sysDbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbIndex.setStatus('mandatory')
sysDbSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 128, 368, 1600, 48, 1, 2))).clone(namedValues=NamedValues(("buff16", 16), ("buff128", 128), ("buff368", 368), ("buff1600", 1600), ("cells", 48), ("signal-quota", 1), ("ip-quota", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbSize.setStatus('mandatory')
sysDbInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbInitial.setStatus('mandatory')
sysDbCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbCurrent.setStatus('mandatory')
sysAuthenticateTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17), )
if mibBuilder.loadTexts: sysAuthenticateTable.setStatus('mandatory')
sysAuthenticateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1), ).setIndexNames((0, "DV2-MIB", "sysAuIndex"))
if mibBuilder.loadTexts: sysAuthenticateEntry.setStatus('mandatory')
sysAuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuIndex.setStatus('mandatory')
sysAuIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuIpaddress.setStatus('mandatory')
sysAuCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuCommunity.setStatus('mandatory')
sysAuAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuAccess.setStatus('mandatory')
sysAuSendTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send-all", 1), ("send-none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuSendTraps.setStatus('mandatory')
sysAuValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuValidity.setStatus('mandatory')
sysLastTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastTrapMessage.setStatus('mandatory')
sysConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigChanged.setStatus('mandatory')
sysConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("read", 2), ("write", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigFile.setStatus('mandatory')
sysCompileTime = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCompileTime.setStatus('mandatory')
slotNumber = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('mandatory')
sysLastResetTimeM2 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastResetTimeM2.setStatus('mandatory')
sysCurrentTimeM2 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 24), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTimeM2.setStatus('mandatory')
limTypeStatus = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("compatible", 2), ("not-compatible", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limTypeStatus.setStatus('mandatory')
slot0IntIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0IntIp.setStatus('mandatory')
slot0XpInUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("unknown", 3), ("main-in-service", 1), ("standby-in-service", 2))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0XpInUse.setStatus('mandatory')
slot0XpToUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4))).clone(namedValues=NamedValues(("auto", 3), ("main", 1), ("standby", 2), ("not-applicable", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0XpToUse.setStatus('mandatory')
slot0StandbyXp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0StandbyXp.setStatus('mandatory')
slot0PsuTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5), )
if mibBuilder.loadTexts: slot0PsuTable.setStatus('mandatory')
slot0PsuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1), ).setIndexNames((0, "DV2-MIB", "slot0PsuIndex"))
if mibBuilder.loadTexts: slot0PsuEntry.setStatus('mandatory')
slot0PsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuIndex.setStatus('mandatory')
slot0PsuFault = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("absent", 3), ("ok", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFault.setStatus('mandatory')
slot0PsuTestFault = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuTestFault.setStatus('mandatory')
slot0PsuVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuVoltage.setStatus('mandatory')
slot0PsuTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuTemp.setStatus('mandatory')
slot0PsuFanASpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanASpeed.setStatus('mandatory')
slot0PsuFanBSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanBSpeed.setStatus('mandatory')
slot0PsuFanCSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanCSpeed.setStatus('mandatory')
slot0PsuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PsuReset.setStatus('mandatory')
slot0PsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1-ATM-SWITCH", 1), ("v2-ATM-SWITCH", 2), ("v3-ATM-SWITCH", 3), ("v4-ATM-SWITCH", 4), ("v5-ATM-SWITCH", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuType.setStatus('mandatory')
slot0PsuFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFanFail.setStatus('mandatory')
slot0PsuTooHot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuTooHot.setStatus('mandatory')
slot0PsuFrontTooHot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PsuFrontTooHot.setStatus('mandatory')
slot0PhyTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6), )
if mibBuilder.loadTexts: slot0PhyTable.setStatus('mandatory')
slot0PhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1), ).setIndexNames((0, "DV2-MIB", "slot0PhySlotNo"))
if mibBuilder.loadTexts: slot0PhyEntry.setStatus('mandatory')
slot0PhySlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySlotNo.setStatus('mandatory')
slot0PhyName = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyName.setStatus('mandatory')
slot0PhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150))).clone(namedValues=NamedValues(("unknown", 1), ("dxdoc", 128), ("qedoc", 129), ("vcdoc", 130), ("cp", 133), ("cl", 134), ("cs", 135), ("hp", 136), ("hl", 137), ("hs", 138), ("ce", 139), ("ve", 140), ("chfrc", 141), ("eth", 142), ("frac", 143), ("trdoc", 144), ("sce", 145), ("dv2ap", 146), ("dv2as", 147), ("vsm", 148), ("ipas", 149), ("ipap", 150)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyType.setStatus('mandatory')
slot0PhyDlim = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("unknown", 1), ("dx21", 2), ("dx27", 3), ("d2G703", 4), ("d8G703", 5), ("d34G703", 6), ("dAUI", 7), ("dlfLIM", 8), ("dds1", 9), ("dds3", 10), ("dhssi", 11), ("dsolim", 12), ("ds3-2c", 13), ("e3-2c", 14), ("e1-dual", 15), ("e1-quad", 16), ("ds1-dual", 17), ("ds1-quad", 18), ("jpeg", 19), ("j2-dual", 20), ("j2-quad", 21), ("vh320", 22), ("si-dual", 23), ("si-quad", 24), ("delim", 25), ("mpg2v", 26), ("qtlim", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyDlim.setStatus('mandatory')
slot0PhySwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySwVer.setStatus('mandatory')
slot0PhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("absent", 1), ("bootmode", 2), ("active", 3), ("shutdown", 4), ("shadow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyState.setStatus('mandatory')
slot0PhyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyReset.setStatus('mandatory')
slot0PhyReqState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("shutdown", 2), ("main", 3), ("shadow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyReqState.setStatus('mandatory')
slot0PhyStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyStateChange.setStatus('mandatory')
slot0PhyLinkedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyLinkedSlot.setStatus('mandatory')
slot0PhyLink0State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink0State.setStatus('mandatory')
slot0PhyLink1State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink1State.setStatus('mandatory')
slot0PhyLink2State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink2State.setStatus('mandatory')
slot0PhyLink3State = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3, 5))).clone(namedValues=NamedValues(("stop", 4), ("up", 1), ("down", 2), ("off", 3), ("reset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLink3State.setStatus('mandatory')
slot0PhySlotSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySlotSerNo.setStatus('mandatory')
slot0PhySlotHwVerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhySlotHwVerNo.setStatus('mandatory')
slot0PhyDocSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyDocSerNo.setStatus('mandatory')
slot0PhyDocHwVerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyDocHwVerNo.setStatus('mandatory')
slot0PhyMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 20), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0PhyMacAddress.setStatus('mandatory')
slot0PhyChangeTimeM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyChangeTimeM2.setStatus('mandatory')
slot0PhyLstChngLnkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("link-0", 1), ("link-1", 2), ("link-2", 3), ("link-3", 4), ("none", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLstChngLnkNum.setStatus('mandatory')
slot0PhyLstChngPrevLnkStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("off", 3), ("stop", 4), ("reset", 5), ("none", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0PhyLstChngPrevLnkStat.setStatus('mandatory')
slot0MaxUpSlots = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0MaxUpSlots.setStatus('mandatory')
slot0CurrentUpSlots = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0CurrentUpSlots.setStatus('mandatory')
slot0IsStandbySlot0 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 1, 2, 6))).clone(namedValues=NamedValues(("unknown", 5), ("not-applicable", 4), ("no", 1), ("yes", 2), ("not-ready", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0IsStandbySlot0.setStatus('mandatory')
slot0TftpToStandby = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0TftpToStandby.setStatus('mandatory')
slot0MibBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("snmp-Authentication", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0MibBroadcast.setStatus('mandatory')
slot0Address = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 14), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0Address.setStatus('mandatory')
slot0InUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("unknown", 5), ("main-in-service", 1), ("standby-in-service", 2), ("main-out-of-service", 3), ("standby-out-of-service", 4), ("main-disabled", 6), ("standby-disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0InUse.setStatus('mandatory')
slot0ToUse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5))).clone(namedValues=NamedValues(("auto", 3), ("main", 1), ("standby", 2), ("not-applicable", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0ToUse.setStatus('mandatory')
slot0redmode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 4), ("non-redundant", 1), ("basic-redundancy", 2), ("enhanced-redundancy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slot0redmode.setStatus('mandatory')
slot0IntIPMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0IntIPMask.setStatus('mandatory')
slot0SwitchId = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0SwitchId.setStatus('mandatory')
ntms0doc = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntms0doc.setStatus('mandatory')
slot0LecsPrefix = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 21), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0LecsPrefix.setStatus('mandatory')
slot0LecsESI = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 22), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slot0LecsESI.setStatus('mandatory')
clksTxTimingRef = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("system-timing-reference", 1), ("local-link0", 2), ("local-link1", 3), ("local-oscillator", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clksTxTimingRef.setStatus('mandatory')
clksSysRefSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clksSysRefSlotNum.setStatus('mandatory')
clksSysRefLinkNum = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clksSysRefLinkNum.setStatus('mandatory')
clksSysRefError = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("slot0", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("none", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clksSysRefError.setStatus('mandatory')
autoRevert = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRevert.setStatus('mandatory')
revertTimer = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: revertTimer.setStatus('mandatory')
forceRevert = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceRevert.setStatus('mandatory')
forceSecondary = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceSecondary.setStatus('mandatory')
alarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3))).clone('clear')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatus.setStatus('mandatory')
inService = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("pri-line", 2), ("pri-internal", 3), ("pri-stratum3", 4), ("pri-external", 5), ("sec-line", 6), ("sec-internal", 7), ("sec-stratum3", 8), ("sec-external", 9), ("pri-plcp", 10), ("sec-plcp", 11))).clone('pri-internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: inService.setStatus('mandatory')
primaryClockTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7), )
if mibBuilder.loadTexts: primaryClockTable.setStatus('mandatory')
primaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1), ).setIndexNames((0, "DV2-MIB", "pIndex"))
if mibBuilder.loadTexts: primaryEntry.setStatus('mandatory')
pIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIndex.setStatus('mandatory')
pValidSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pValidSource.setStatus('mandatory')
pOnOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOnOffLine.setStatus('mandatory')
pSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSlotNumber.setStatus('mandatory')
pSysRefSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("local-oscillator", 5))).clone('local-oscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSysRefSelect.setStatus('mandatory')
pActiveTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("line", 1), ("internal", 2), ("plcp", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pActiveTimingSource.setStatus('mandatory')
pInputLineOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInputLineOk.setStatus('mandatory')
pSysRefTimingOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRefTimingOk.setStatus('mandatory')
secondaryClockTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8), )
if mibBuilder.loadTexts: secondaryClockTable.setStatus('mandatory')
secondaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1), ).setIndexNames((0, "DV2-MIB", "sIndex"))
if mibBuilder.loadTexts: secondaryEntry.setStatus('mandatory')
sIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIndex.setStatus('mandatory')
sValidSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sValidSource.setStatus('mandatory')
sOnOffLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOnOffLine.setStatus('mandatory')
sSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sSlotNumber.setStatus('mandatory')
sSysRefSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("local-oscillator", 5))).clone('local-oscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sSysRefSelect.setStatus('mandatory')
sActiveTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("line", 1), ("internal", 2), ("plcp", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sActiveTimingSource.setStatus('mandatory')
sInputLineOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sInputLineOk.setStatus('mandatory')
sSysRefTimingOk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSysRefTimingOk.setStatus('mandatory')
str3Configured = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: str3Configured.setStatus('mandatory')
pCATcontrolTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10), )
if mibBuilder.loadTexts: pCATcontrolTable.setStatus('mandatory')
pCATcontrolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1), ).setIndexNames((0, "DV2-MIB", "pccIndex"))
if mibBuilder.loadTexts: pCATcontrolEntry.setStatus('mandatory')
pccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccIndex.setStatus('mandatory')
pccatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('t1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatlimtype.setStatus('mandatory')
pccatsendcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatsendcode.setStatus('mandatory')
pccatactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatactivate.setStatus('mandatory')
pccatsendconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccatsendconfig.setStatus('mandatory')
pccatbytestransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccatbytestransferred.setStatus('mandatory')
pccatfilexferstat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccatfilexferstat.setStatus('mandatory')
pcatforcesecext = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatforcesecext.setStatus('mandatory')
pcatforcesecstr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatforcesecstr3.setStatus('mandatory')
pcatcommand = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("revert", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatcommand.setStatus('mandatory')
pcatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatplaceholder1.setStatus('mandatory')
pcatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatplaceholder2.setStatus('mandatory')
pcconoffline = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2))).clone('offline')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcconoffline.setStatus('mandatory')
sCATcontrolTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11), )
if mibBuilder.loadTexts: sCATcontrolTable.setStatus('mandatory')
sCATcontrolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1), ).setIndexNames((0, "DV2-MIB", "sccIndex"))
if mibBuilder.loadTexts: sCATcontrolEntry.setStatus('mandatory')
sccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccIndex.setStatus('mandatory')
sccatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('t1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatlimtype.setStatus('mandatory')
sccatsendcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatsendcode.setStatus('mandatory')
sccatactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatactivate.setStatus('mandatory')
sccatsendconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccatsendconfig.setStatus('mandatory')
sccatbytestransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccatbytestransferred.setStatus('mandatory')
sccatfilexferstat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccatfilexferstat.setStatus('mandatory')
scatcommand = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("revert", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatcommand.setStatus('mandatory')
scatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatplaceholder1.setStatus('mandatory')
scatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatplaceholder2.setStatus('mandatory')
scconoffline = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2))).clone('offline')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scconoffline.setStatus('mandatory')
pCATstatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12), )
if mibBuilder.loadTexts: pCATstatusTable.setStatus('mandatory')
pCATstatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1), ).setIndexNames((0, "DV2-MIB", "pscIndex"))
if mibBuilder.loadTexts: pCATstatusEntry.setStatus('mandatory')
pscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscIndex.setStatus('mandatory')
pscatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatlimtype.setStatus('mandatory')
psCATFFrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATFFrevision.setStatus('mandatory')
psCATBootrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATBootrevision.setStatus('mandatory')
pscatfilestatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("not-present", 2), ("present", 3))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatfilestatus.setStatus('mandatory')
psCATfilerevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATfilerevision.setStatus('mandatory')
psCATHWrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCATHWrevision.setStatus('mandatory')
pscatmode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-card", 3), ("boot", 1), ("full-feature-offline", 2), ("unknown", 4), ("full-feature-in-dnld", 5), ("boot-in-dnld", 6), ("full-feature-online", 7))).clone('no-card')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatmode.setStatus('mandatory')
pscaterrorcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("bad-config", 3), ("no-code", 4), ("no-config", 5), ("download-ok", 6), ("download-fail", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscaterrorcode.setStatus('mandatory')
pscatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatplaceholder1.setStatus('mandatory')
pscatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscatplaceholder2.setStatus('mandatory')
sCATstatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13), )
if mibBuilder.loadTexts: sCATstatusTable.setStatus('mandatory')
sCATstatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1), ).setIndexNames((0, "DV2-MIB", "sscIndex"))
if mibBuilder.loadTexts: sCATstatusEntry.setStatus('mandatory')
sscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscIndex.setStatus('mandatory')
sscatlimtype = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatlimtype.setStatus('mandatory')
ssCATFFrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATFFrevision.setStatus('mandatory')
ssCATBootrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATBootrevision.setStatus('mandatory')
sscatfilestatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("not-present", 2), ("present", 3))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatfilestatus.setStatus('mandatory')
ssCATfilerevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATfilerevision.setStatus('mandatory')
ssCATHWrevision = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCATHWrevision.setStatus('mandatory')
sscatmode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-card", 3), ("boot", 1), ("full-feature-offline", 2), ("unknown", 4), ("full-feature-in-dnld", 5), ("boot-in-dnld", 6), ("full-feature-online", 7))).clone('no-card')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatmode.setStatus('mandatory')
sscaterrorcode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("no-cat", 2), ("bad-config", 3), ("no-code", 4), ("no-config", 5), ("download-ok", 6), ("download-fail", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscaterrorcode.setStatus('mandatory')
sscatplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatplaceholder1.setStatus('mandatory')
sscatplaceholder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscatplaceholder2.setStatus('mandatory')
pCATStratum3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14), )
if mibBuilder.loadTexts: pCATStratum3ConfigTable.setStatus('mandatory')
pCATStratum3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1), ).setIndexNames((0, "DV2-MIB", "ps3cIndex"))
if mibBuilder.loadTexts: pCATStratum3ConfigEntry.setStatus('mandatory')
ps3cIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps3cIndex.setStatus('mandatory')
pcatstr3listener = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("line", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3listener.setStatus('mandatory')
pcatstr3oscillator = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external-or-line", 1), ("internal", 2))).clone('external-or-line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3oscillator.setStatus('mandatory')
pcatstr3forcesecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3forcesecondary.setStatus('mandatory')
pcatstr3reconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcatstr3reconfigure.setStatus('mandatory')
sCATStratum3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15), )
if mibBuilder.loadTexts: sCATStratum3ConfigTable.setStatus('mandatory')
sCATStratum3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1), ).setIndexNames((0, "DV2-MIB", "ss3cIndex"))
if mibBuilder.loadTexts: sCATStratum3ConfigEntry.setStatus('mandatory')
ss3cIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss3cIndex.setStatus('mandatory')
scatstr3listener = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("line", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scatstr3listener.setStatus('mandatory')
scatstr3oscillator = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external-or-line", 1), ("internal", 2))).clone('external-or-line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scatstr3oscillator.setStatus('mandatory')
scatstr3reconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scatstr3reconfigure.setStatus('mandatory')
pCATStratum3StatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16), )
if mibBuilder.loadTexts: pCATStratum3StatusTable.setStatus('mandatory')
pCATStratum3StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1), ).setIndexNames((0, "DV2-MIB", "ps3sIndex"))
if mibBuilder.loadTexts: pCATStratum3StatusEntry.setStatus('mandatory')
ps3sIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps3sIndex.setStatus('mandatory')
pcatstr3listenerstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("listening-to-Primary", 1), ("listening-to-Secondary", 2), ("no-input", 3))).clone('no-input')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatstr3listenerstatus.setStatus('mandatory')
pcatstr3driverstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled-online", 1), ("disabled-offline", 2), ("fault", 3))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatstr3driverstatus.setStatus('mandatory')
pcatstr3oscstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("acquisition-wide-band", 2), ("locked-in-range", 3), ("acquisition-narrow-band", 4), ("holdover", 5), ("internal", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcatstr3oscstatus.setStatus('mandatory')
sCATStratum3StatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17), )
if mibBuilder.loadTexts: sCATStratum3StatusTable.setStatus('mandatory')
sCATStratum3StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1), ).setIndexNames((0, "DV2-MIB", "ss3sIndex"))
if mibBuilder.loadTexts: sCATStratum3StatusEntry.setStatus('mandatory')
ss3sIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss3sIndex.setStatus('mandatory')
scatstr3listenerstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("listening-to-Primary", 1), ("listening-to-secondary", 2), ("no-input", 3))).clone('no-input')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatstr3listenerstatus.setStatus('mandatory')
scatstr3driverstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled-online", 1), ("disabled-offline", 2), ("fault", 3))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatstr3driverstatus.setStatus('mandatory')
scatstr3oscstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("acquisition-wide-band", 2), ("locked-in-range", 3), ("acquisition-narrow-band", 4), ("holdover", 5), ("internal", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scatstr3oscstatus.setStatus('mandatory')
pCATBitsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18), )
if mibBuilder.loadTexts: pCATBitsConfigTable.setStatus('mandatory')
pCATBitsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1), ).setIndexNames((0, "DV2-MIB", "pbcIndex"))
if mibBuilder.loadTexts: pCATBitsConfigEntry.setStatus('mandatory')
pbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcIndex.setStatus('mandatory')
pbcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcds1V2TxLineLn.setStatus('mandatory')
pbcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcplaceholder1.setStatus('mandatory')
pbcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcV2FRMRMode.setStatus('mandatory')
pbcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs-t1", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcds1V2Coding.setStatus('mandatory')
pbcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-loopback", 2), ("local-loopback", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcV2Lb.setStatus('mandatory')
pbcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcclrperf.setStatus('mandatory')
pbcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcreconfigure.setStatus('mandatory')
sCATBitsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19), )
if mibBuilder.loadTexts: sCATBitsConfigTable.setStatus('mandatory')
sCATBitsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1), ).setIndexNames((0, "DV2-MIB", "sbcIndex"))
if mibBuilder.loadTexts: sCATBitsConfigEntry.setStatus('mandatory')
sbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIndex.setStatus('mandatory')
sbcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcds1V2TxLineLn.setStatus('mandatory')
sbcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcplaceholder1.setStatus('mandatory')
sbcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcV2FRMRMode.setStatus('mandatory')
sbcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcds1V2Coding.setStatus('mandatory')
sbcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-loopback", 2), ("local-loopback", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcV2Lb.setStatus('mandatory')
sbcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcclrperf.setStatus('mandatory')
sbcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcreconfigure.setStatus('mandatory')
pCATBitsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20), )
if mibBuilder.loadTexts: pCATBitsStatusTable.setStatus('mandatory')
pCATBitsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1), ).setIndexNames((0, "DV2-MIB", "pbsIndex"))
if mibBuilder.loadTexts: pCATBitsStatusEntry.setStatus('mandatory')
pbsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsIndex.setStatus('mandatory')
pbslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbslineok.setStatus('mandatory')
pbsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxAIS.setStatus('mandatory')
pbsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxLOS.setStatus('mandatory')
pbsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxOOF.setStatus('mandatory')
pbsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxBER.setStatus('mandatory')
pbsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxOOFCnt.setStatus('mandatory')
pbsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxBERCnt.setStatus('mandatory')
pbsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2RxLOSCnt.setStatus('mandatory')
pbsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbsV2LCVCnt.setStatus('mandatory')
sCATBitsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21), )
if mibBuilder.loadTexts: sCATBitsStatusTable.setStatus('mandatory')
sCATBitsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1), ).setIndexNames((0, "DV2-MIB", "sbsIndex"))
if mibBuilder.loadTexts: sCATBitsStatusEntry.setStatus('mandatory')
sbsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsIndex.setStatus('mandatory')
sbslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbslineok.setStatus('mandatory')
sbsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxAIS.setStatus('mandatory')
sbsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxLOS.setStatus('mandatory')
sbsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxOOF.setStatus('mandatory')
sbsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxBER.setStatus('mandatory')
sbsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxOOFCnt.setStatus('mandatory')
sbsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxBERCnt.setStatus('mandatory')
sbsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2RxLOSCnt.setStatus('mandatory')
sbsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbsV2LCVCnt.setStatus('mandatory')
pCATDerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22), )
if mibBuilder.loadTexts: pCATDerConfigTable.setStatus('mandatory')
pCATDerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1), ).setIndexNames((0, "DV2-MIB", "pdcIndex"))
if mibBuilder.loadTexts: pCATDerConfigEntry.setStatus('mandatory')
pdcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdcIndex.setStatus('mandatory')
pdcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcds1V2TxLineLn.setStatus('mandatory')
pdcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcplaceholder1.setStatus('mandatory')
pdcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcV2FRMRMode.setStatus('mandatory')
pdcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcds1V2Coding.setStatus('mandatory')
pdcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-lpbk", 2), ("local-loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcV2Lb.setStatus('mandatory')
pdcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcclrperf.setStatus('mandatory')
pdcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdcreconfigure.setStatus('mandatory')
sCATDerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23), )
if mibBuilder.loadTexts: sCATDerConfigTable.setStatus('mandatory')
sCATDerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1), ).setIndexNames((0, "DV2-MIB", "sdcIndex"))
if mibBuilder.loadTexts: sCATDerConfigEntry.setStatus('mandatory')
sdcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdcIndex.setStatus('mandatory')
sdcds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-ft", 7), ("na", 8))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcds1V2TxLineLn.setStatus('mandatory')
sdcplaceholder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("na", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcplaceholder1.setStatus('mandatory')
sdcV2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("esf", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcV2FRMRMode.setStatus('mandatory')
sdcds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("na", 3), ("ami", 2), ("b8zs", 1))).clone('na')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcds1V2Coding.setStatus('mandatory')
sdcV2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line-lpbk", 2), ("local-loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcV2Lb.setStatus('mandatory')
sdcclrperf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcclrperf.setStatus('mandatory')
sdcreconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdcreconfigure.setStatus('mandatory')
pCATDerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24), )
if mibBuilder.loadTexts: pCATDerStatusTable.setStatus('mandatory')
pCATDerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1), ).setIndexNames((0, "DV2-MIB", "pdsIndex"))
if mibBuilder.loadTexts: pCATDerStatusEntry.setStatus('mandatory')
pdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsIndex.setStatus('mandatory')
pdslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdslineok.setStatus('mandatory')
pdsV2TxReference = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-input", 1), ("primary-valid", 2), ("secondary-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2TxReference.setStatus('mandatory')
pdsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxAIS.setStatus('mandatory')
pdsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxLOS.setStatus('mandatory')
pdsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxOOF.setStatus('mandatory')
pdsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxBER.setStatus('mandatory')
pdsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxOOFCnt.setStatus('mandatory')
pdsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxBERCnt.setStatus('mandatory')
pdsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2RxLOSCnt.setStatus('mandatory')
pdsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdsV2LCVCnt.setStatus('mandatory')
sCATDerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25), )
if mibBuilder.loadTexts: sCATDerStatusTable.setStatus('mandatory')
sCATDerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1), ).setIndexNames((0, "DV2-MIB", "sdsIndex"))
if mibBuilder.loadTexts: sCATDerStatusEntry.setStatus('mandatory')
sdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsIndex.setStatus('mandatory')
sdslineok = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslineok.setStatus('mandatory')
sdsV2TxReference = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-input", 1), ("primary-valid", 2), ("secondary-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2TxReference.setStatus('mandatory')
sdsV2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxAIS.setStatus('mandatory')
sdsV2RxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxLOS.setStatus('mandatory')
sdsV2RxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxOOF.setStatus('mandatory')
sdsV2RxBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxBER.setStatus('mandatory')
sdsV2RxOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxOOFCnt.setStatus('mandatory')
sdsV2RxBERCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxBERCnt.setStatus('mandatory')
sdsV2RxLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2RxLOSCnt.setStatus('mandatory')
sdsV2LCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsV2LCVCnt.setStatus('mandatory')
sysClkAlarmErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 1), ("sEClinePRI-ok", 2), ("pRIlineSEC-ok", 3), ("pRIlineSECoffline", 4), ("pRIoscSECoffline", 5), ("sEClinePRIoffline", 6), ("sECoscPRIoffline", 7), ("pRIlineSECline", 8), ("pRIosc", 9), ("sECosc", 10), ("pRIoscSECosc", 11), ("pRIoscSECline", 12), ("pRIlineSECosc", 13), ("no-valid-error", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClkAlarmErr.setStatus('mandatory')
traceIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceIp.setStatus('mandatory')
traceUdp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceUdp.setStatus('mandatory')
traceTcp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceTcp.setStatus('mandatory')
traceSnmp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceSnmp.setStatus('mandatory')
traceCat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceCat.setStatus('mandatory')
slipIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipIp.setStatus('mandatory')
slipMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
slipRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteIp.setStatus('mandatory')
slipSpeed = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6), ("baud115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipSpeed.setStatus('mandatory')
vcDocTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1), )
if mibBuilder.loadTexts: vcDocTable.setStatus('mandatory')
vcDocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1), ).setIndexNames((0, "DV2-MIB", "vcDocLinkNo"))
if mibBuilder.loadTexts: vcDocEntry.setStatus('mandatory')
vcDocLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocLinkNo.setStatus('mandatory')
vcDocEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocEnable.setStatus('mandatory')
vcDocVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 3), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocVpi.setStatus('mandatory')
vcDocVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 4), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocVci.setStatus('mandatory')
vcDocLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 192, 224, 240, 248, 252))).clone(namedValues=NamedValues(("s32kbps", 64), ("s64kbps", 128), ("s128kbps", 192), ("s256kbps", 224), ("s512kbps", 240), ("s1024kbps", 248), ("s2048kbps", 252)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocLinkSpeed.setStatus('mandatory')
vcDocCLines = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("process", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocCLines.setStatus('mandatory')
vcDocFifoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocFifoSize.setStatus('mandatory')
vcDocLowWater = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocLowWater.setStatus('mandatory')
vcDocHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocHighWater.setStatus('mandatory')
vcDocTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("local-loop", 2), ("cable-loop", 3), ("remote-loop", 4), ("pattern-send", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocTestMode.setStatus('mandatory')
vcDocTestVal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 11), Hex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocTestVal.setStatus('mandatory')
vcDocPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocPriority.setStatus('mandatory')
vcDocSuba = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocSuba.setStatus('mandatory')
vcDocSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDocSaddr.setStatus('mandatory')
vcDocClockFix = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDocClockFix.setStatus('mandatory')
vcStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2), )
if mibBuilder.loadTexts: vcStatTable.setStatus('mandatory')
vcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1), ).setIndexNames((0, "DV2-MIB", "vcStatPortNo"))
if mibBuilder.loadTexts: vcStatEntry.setStatus('mandatory')
vcStatPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatPortNo.setStatus('mandatory')
vcStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatRxState.setStatus('mandatory')
vcStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTxState.setStatus('mandatory')
vcStatFifoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatFifoCount.setStatus('mandatory')
vcStatOFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatOFlow.setStatus('mandatory')
vcStatUFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatUFlow.setStatus('mandatory')
vcStatReSync = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatReSync.setStatus('mandatory')
vcStatInvented = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatInvented.setStatus('mandatory')
vcStatRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatRxCells.setStatus('mandatory')
vcStatTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTxCells.setStatus('mandatory')
vcStatRxSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatRxSeqNo.setStatus('mandatory')
vcStatTxSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTxSeqNo.setStatus('mandatory')
vcStatLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatLastError.setStatus('mandatory')
vcStatLastCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatLastCompare.setStatus('mandatory')
vcStatTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcStatTestErrors.setStatus('mandatory')
fRelayStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1), )
if mibBuilder.loadTexts: fRelayStatTable.setStatus('mandatory')
fRelayStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1), ).setIndexNames((0, "DV2-MIB", "fRelStatLinkNo"))
if mibBuilder.loadTexts: fRelayStatEntry.setStatus('mandatory')
fRelStatLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLinkNo.setStatus('mandatory')
fRelStatLocSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocSeq.setStatus('mandatory')
fRelStatLocAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocAck.setStatus('mandatory')
fRelStatLocState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocState.setStatus('mandatory')
fRelStatLocStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocStartT.setStatus('mandatory')
fRelStatLocErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocErrThr.setStatus('mandatory')
fRelStatLocMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocMec.setStatus('mandatory')
fRelStatLocPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatLocPoll.setStatus('mandatory')
fRelStatRemSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemSeq.setStatus('mandatory')
fRelStatRemAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemAck.setStatus('mandatory')
fRelStatRemState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemState.setStatus('mandatory')
fRelStatRemStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemStartT.setStatus('mandatory')
fRelStatRemErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemErrThr.setStatus('mandatory')
fRelStatRemMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemMec.setStatus('mandatory')
fRelStatRemPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelStatRemPoll.setStatus('mandatory')
fRelayConfTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2), )
if mibBuilder.loadTexts: fRelayConfTable.setStatus('mandatory')
fRelayConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1), ).setIndexNames((0, "DV2-MIB", "fRelConfLinkNo"))
if mibBuilder.loadTexts: fRelayConfEntry.setStatus('mandatory')
fRelConfLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRelConfLinkNo.setStatus('mandatory')
fRelConfLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkEnab.setStatus('mandatory')
fRelConfLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ansi", 1), ("lmi", 2), ("transport", 3), ("dxi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkMode.setStatus('mandatory')
fRelConfLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 77, 100, 117, 177, 191, 217, 223, 240, 244, 246, 251, 253, 254, 255))).clone(namedValues=NamedValues(("s48kbps", 48), ("s56kbps", 77), ("s64kbps", 100), ("s72kbps", 117), ("s128kbps", 177), ("s153k6bps", 191), ("s256kbps", 217), ("s307k2bps", 223), ("s614k4bps", 240), ("s819k2bps", 244), ("s1Mbps", 246), ("s2Mbps", 251), ("s3Mbps", 253), ("s5Mbps", 254), ("s10Mbps", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkSpeed.setStatus('mandatory')
fRelConfLinkCline = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkCline.setStatus('mandatory')
fRelConfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("network", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfLinkType.setStatus('mandatory')
fRelConfN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfN391.setStatus('mandatory')
fRelConfN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfN392.setStatus('mandatory')
fRelConfN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfN393.setStatus('mandatory')
fRelConfT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfT391.setStatus('mandatory')
fRelConfT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fRelConfT392.setStatus('mandatory')
fraPStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3), )
if mibBuilder.loadTexts: fraPStatTable.setStatus('mandatory')
fraPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1), ).setIndexNames((0, "DV2-MIB", "fraPStatDlci"))
if mibBuilder.loadTexts: fraPStatEntry.setStatus('mandatory')
fraPStatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatDlci.setStatus('mandatory')
fraPStatRxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxBCnt.setStatus('mandatory')
fraPStatTxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxBCnt.setStatus('mandatory')
fraPStatRxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxFCnt.setStatus('mandatory')
fraPStatTxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxFCnt.setStatus('mandatory')
fraPStatRxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxBRate.setStatus('mandatory')
fraPStatTxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxBRate.setStatus('mandatory')
fraPStatRxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRxFRate.setStatus('mandatory')
fraPStatTxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatTxFRate.setStatus('mandatory')
fraPStatDERxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatDERxF.setStatus('mandatory')
fraPStatDisRxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatDisRxF.setStatus('mandatory')
fraPStatPvcStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatPvcStat.setStatus('mandatory')
fraPStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 13), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLinkState.setStatus('mandatory')
fraPStatLocSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocSeq.setStatus('mandatory')
fraPStatLocAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocAck.setStatus('mandatory')
fraPStatLocStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocStat.setStatus('mandatory')
fraPStatLocStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocStartT.setStatus('mandatory')
fraPStatLocErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocErrThr.setStatus('mandatory')
fraPStatLocMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocMec.setStatus('mandatory')
fraPStatLocPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLocPoll.setStatus('mandatory')
fraPStatRemSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemSeq.setStatus('mandatory')
fraPStatRemAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemAck.setStatus('mandatory')
fraPStatRemStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemStat.setStatus('mandatory')
fraPStatRemStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemStartT.setStatus('mandatory')
fraPStatRemErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemErrThr.setStatus('mandatory')
fraPStatRemMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemMec.setStatus('mandatory')
fraPStatRemPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatRemPoll.setStatus('mandatory')
fraPStatLastChangeM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPStatLastChangeM2.setStatus('mandatory')
fraPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4), )
if mibBuilder.loadTexts: fraPConfigTable.setStatus('mandatory')
fraPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1), ).setIndexNames((0, "DV2-MIB", "fraPConfigDlci"))
if mibBuilder.loadTexts: fraPConfigEntry.setStatus('mandatory')
fraPConfigDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDlci.setStatus('mandatory')
fraPConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigCir.setStatus('mandatory')
fraPConfigCommitB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigCommitB.setStatus('mandatory')
fraPConfigExcessB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigExcessB.setStatus('mandatory')
fraVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 5), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraVpi.setStatus('mandatory')
fraVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 6), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraVci.setStatus('mandatory')
fraPConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPConfigPriority.setStatus('mandatory')
fraPConfigSuba = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPConfigSuba.setStatus('mandatory')
fraPConfigSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fraPConfigSaddr.setStatus('mandatory')
fraPConfigValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigValidity.setStatus('mandatory')
fraPConfigDxivpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDxivpi.setStatus('mandatory')
fraPConfigDxivci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDxivci.setStatus('mandatory')
fraPConfigDximode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraPConfigDximode.setStatus('mandatory')
frbPStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5), )
if mibBuilder.loadTexts: frbPStatTable.setStatus('mandatory')
frbPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1), ).setIndexNames((0, "DV2-MIB", "frbPStatDlci"))
if mibBuilder.loadTexts: frbPStatEntry.setStatus('mandatory')
frbPStatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatDlci.setStatus('mandatory')
frbPStatRxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxBCnt.setStatus('mandatory')
frbPStatTxBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxBCnt.setStatus('mandatory')
frbPStatRxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxFCnt.setStatus('mandatory')
frbPStatTxFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxFCnt.setStatus('mandatory')
frbPStatRxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxBRate.setStatus('mandatory')
frbPStatTxBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxBRate.setStatus('mandatory')
frbPStatRxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRxFRate.setStatus('mandatory')
frbPStatTxFRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatTxFRate.setStatus('mandatory')
frbPStatDERxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatDERxF.setStatus('mandatory')
frbPStatDisRxF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatDisRxF.setStatus('mandatory')
frbPStatPvcStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatPvcStat.setStatus('mandatory')
frbPStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 13), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLinkState.setStatus('mandatory')
frbPStatLocSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocSeq.setStatus('mandatory')
frbPStatLocAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocAck.setStatus('mandatory')
frbPStatLocStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocStat.setStatus('mandatory')
frbPStatLocStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocStartT.setStatus('mandatory')
frbPStatLocErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocErrThr.setStatus('mandatory')
frbPStatLocMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocMec.setStatus('mandatory')
frbPStatLocPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLocPoll.setStatus('mandatory')
frbPStatRemSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemSeq.setStatus('mandatory')
frbPStatRemAck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemAck.setStatus('mandatory')
frbPStatRemStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemStat.setStatus('mandatory')
frbPStatRemStartT = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemStartT.setStatus('mandatory')
frbPStatRemErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemErrThr.setStatus('mandatory')
frbPStatRemMec = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemMec.setStatus('mandatory')
frbPStatRemPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatRemPoll.setStatus('mandatory')
frbPStatLastChangeM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPStatLastChangeM2.setStatus('mandatory')
frbPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6), )
if mibBuilder.loadTexts: frbPConfigTable.setStatus('mandatory')
frbPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1), ).setIndexNames((0, "DV2-MIB", "frbPConfigDlci"))
if mibBuilder.loadTexts: frbPConfigEntry.setStatus('mandatory')
frbPConfigDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDlci.setStatus('mandatory')
frbPConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigCir.setStatus('mandatory')
frbPConfigCommitB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigCommitB.setStatus('mandatory')
frbPConfigExcessB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigExcessB.setStatus('mandatory')
frbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 5), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbVpi.setStatus('mandatory')
frbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 6), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbVci.setStatus('mandatory')
frbPConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPConfigPriority.setStatus('mandatory')
frbPConfigSuba = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPConfigSuba.setStatus('mandatory')
frbPConfigSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frbPConfigSaddr.setStatus('mandatory')
frbPConfigValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigValidity.setStatus('mandatory')
frbPConfigDxivpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDxivpi.setStatus('mandatory')
frbPConfigDxivci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDxivci.setStatus('mandatory')
frbPConfigDximode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frbPConfigDximode.setStatus('mandatory')
vcaTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3), )
if mibBuilder.loadTexts: vcaTable.setStatus('mandatory')
vcaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1), ).setIndexNames((0, "DV2-MIB", "vcaVpi"), (0, "DV2-MIB", "vcaVci"))
if mibBuilder.loadTexts: vcaEntry.setStatus('mandatory')
vcaVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaVpi.setStatus('mandatory')
vcaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaVci.setStatus('mandatory')
vcaTxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaTxGCells.setStatus('mandatory')
vcaTxGCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaTxGCellsClp1.setStatus('mandatory')
vcaRxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaRxGCells.setStatus('mandatory')
vcaExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaExcessCells.setStatus('mandatory')
vcaPeakExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaPeakExceeds.setStatus('mandatory')
vcaCellHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 8), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaCellHead.setStatus('mandatory')
vcaCellMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 9), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaCellMask.setStatus('mandatory')
vcaCellSwitchHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 10), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaCellSwitchHead.setStatus('mandatory')
vcaStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaStartTime.setStatus('mandatory')
vcaBucketControl = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucketControl.setStatus('mandatory')
vcaBucket0CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket0CV.setStatus('mandatory')
vcaBucket0Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket0Max.setStatus('mandatory')
vcaBucket0Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket0Inc.setStatus('mandatory')
vcaBucket1CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket1CV.setStatus('mandatory')
vcaBucket1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket1Max.setStatus('mandatory')
vcaBucket1Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket1Inc.setStatus('mandatory')
vcaBucket2CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket2CV.setStatus('mandatory')
vcaBucket2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket2Max.setStatus('mandatory')
vcaBucket2Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket2Inc.setStatus('mandatory')
vcaBucket3CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket3CV.setStatus('mandatory')
vcaBucket3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket3Max.setStatus('mandatory')
vcaBucket3Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaBucket3Inc.setStatus('mandatory')
vcaType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 6, 10, 14, 26, 30, 1, 5, 9, 13, 25, 29, 34, 38, 42, 46, 58, 62, 33, 37, 41, 45, 57, 61))).clone(namedValues=NamedValues(("mgmt-vc", 3), ("sr-pp-pvc", 2), ("sr-pp-pvp", 6), ("sr-mp-bi-pvc", 10), ("sr-mp-bi-pvp", 14), ("sr-mp-uni-pvc", 26), ("sr-mp-uni-pvp", 30), ("sr-pp-svc", 1), ("sr-pp-svp", 5), ("sr-mp-bi-svc", 9), ("sr-mp-bi-svp", 13), ("sr-mp-uni-svc", 25), ("sr-mp-uni-svp", 29), ("ds-pp-pvc", 34), ("ds-pp-pvp", 38), ("ds-mp-bi-pvc", 42), ("ds-mp-bi-pvp", 46), ("ds-mp-uni-pvc", 58), ("ds-mp-uni-pvp", 62), ("ds-pp-svc", 33), ("ds-pp-svp", 37), ("ds-mp-bi-svc", 41), ("ds-mp-bi-svp", 45), ("ds-mp-uni-svc", 57), ("ds-mp-uni-svp", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaType.setStatus('mandatory')
vcaDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstSlot.setStatus('mandatory')
vcaDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstLink.setStatus('mandatory')
vcaDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstVpi.setStatus('mandatory')
vcaDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaDstVci.setStatus('mandatory')
vcaInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaInternalVpi.setStatus('mandatory')
vcaInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcaInternalVci.setStatus('mandatory')
vcbTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4), )
if mibBuilder.loadTexts: vcbTable.setStatus('mandatory')
vcbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1), ).setIndexNames((0, "DV2-MIB", "vcbVpi"), (0, "DV2-MIB", "vcbVci"))
if mibBuilder.loadTexts: vcbEntry.setStatus('mandatory')
vcbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbVpi.setStatus('mandatory')
vcbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbVci.setStatus('mandatory')
vcbTxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbTxGCells.setStatus('mandatory')
vcbTxGCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbTxGCellsClp1.setStatus('mandatory')
vcbRxGCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbRxGCells.setStatus('mandatory')
vcbExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbExcessCells.setStatus('mandatory')
vcbPeakExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbPeakExceeds.setStatus('mandatory')
vcbCellHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 8), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbCellHead.setStatus('mandatory')
vcbCellMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 9), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbCellMask.setStatus('mandatory')
vcbCellSwitchHead = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 10), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbCellSwitchHead.setStatus('mandatory')
vcbStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbStartTime.setStatus('mandatory')
vcbBucketControl = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 12), Hex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucketControl.setStatus('mandatory')
vcbBucket0CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket0CV.setStatus('mandatory')
vcbBucket0Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket0Max.setStatus('mandatory')
vcbBucket0Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket0Inc.setStatus('mandatory')
vcbBucket1CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket1CV.setStatus('mandatory')
vcbBucket1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket1Max.setStatus('mandatory')
vcbBucket1Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket1Inc.setStatus('mandatory')
vcbBucket2CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket2CV.setStatus('mandatory')
vcbBucket2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket2Max.setStatus('mandatory')
vcbBucket2Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket2Inc.setStatus('mandatory')
vcbBucket3CV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket3CV.setStatus('mandatory')
vcbBucket3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket3Max.setStatus('mandatory')
vcbBucket3Inc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbBucket3Inc.setStatus('mandatory')
vcbType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 6, 10, 14, 26, 30, 1, 5, 9, 13, 25, 29, 34, 38, 42, 46, 58, 62, 33, 37, 41, 45, 57, 61))).clone(namedValues=NamedValues(("mgmt-vc", 3), ("sr-pp-pvc", 2), ("sr-pp-pvp", 6), ("sr-mp-bi-pvc", 10), ("sr-mp-bi-pvp", 14), ("sr-mp-uni-pvc", 26), ("sr-mp-uni-pvp", 30), ("sr-pp-svc", 1), ("sr-pp-svp", 5), ("sr-mp-bi-svc", 9), ("sr-mp-bi-svp", 13), ("sr-mp-uni-svc", 25), ("sr-mp-uni-svp", 29), ("ds-pp-pvc", 34), ("ds-pp-pvp", 38), ("ds-mp-bi-pvc", 42), ("ds-mp-bi-pvp", 46), ("ds-mp-uni-pvc", 58), ("ds-mp-uni-pvp", 62), ("ds-pp-svc", 33), ("ds-pp-svp", 37), ("ds-mp-bi-svc", 41), ("ds-mp-bi-svp", 45), ("ds-mp-uni-svc", 57), ("ds-mp-uni-svp", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbType.setStatus('mandatory')
vcbDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstSlot.setStatus('mandatory')
vcbDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstLink.setStatus('mandatory')
vcbDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstVpi.setStatus('mandatory')
vcbDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbDstVci.setStatus('mandatory')
vcbInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbInternalVpi.setStatus('mandatory')
vcbInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcbInternalVci.setStatus('mandatory')
xpStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5), )
if mibBuilder.loadTexts: xpStatTable.setStatus('mandatory')
xpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1), ).setIndexNames((0, "DV2-MIB", "xpIFace"))
if mibBuilder.loadTexts: xpStatEntry.setStatus('mandatory')
xpIFace = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpIFace.setStatus('mandatory')
xpRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpRXCells.setStatus('mandatory')
xpTXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpTXCells.setStatus('mandatory')
xpBadVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpBadVpiVci.setStatus('mandatory')
xpRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpRxOverflow.setStatus('mandatory')
xpTxHighPrOver = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpTxHighPrOver.setStatus('mandatory')
xpTxLowPrOver = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpTxLowPrOver.setStatus('mandatory')
xpInputOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpInputOverflow.setStatus('mandatory')
xpDocErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpDocErrors.setStatus('mandatory')
xpLowPriorityFifo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpLowPriorityFifo.setStatus('mandatory')
xpEgDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpEgDiscCells.setStatus('mandatory')
xpIgDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpIgDiscCells.setStatus('mandatory')
pdhPLCPTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1), )
if mibBuilder.loadTexts: pdhPLCPTable.setStatus('mandatory')
pdhPLCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1), ).setIndexNames((0, "DV2-MIB", "pdhPLCPLinkNo"))
if mibBuilder.loadTexts: pdhPLCPEntry.setStatus('mandatory')
pdhPLCPLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLinkNo.setStatus('mandatory')
pdhPLCPLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLinkEnable.setStatus('mandatory')
pdhPLCPLinkStatusAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("ignored", 2), ("processed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLinkStatusAffect.setStatus('mandatory')
pdhPLCPLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLinkState.setStatus('mandatory')
pdhPLCPPhyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ds3", 2), ("e3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPPhyMode.setStatus('mandatory')
pdhPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hec-based-delineation", 1), ("ds1-PLCP", 2), ("ds3-PLCP", 3), ("e1-PLCP", 4), ("e3-g751-PLCP", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPMode.setStatus('mandatory')
pdhPLCPScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPScrambler.setStatus('mandatory')
pdhPLCP0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCP0x55.setStatus('mandatory')
pdhPLCPSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPSmdsMode.setStatus('mandatory')
pdhPLCPIdleCell = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPIdleCell.setStatus('mandatory')
pdhPLCPLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("diagnostic-lpbk", 2), ("line-lpbk", 3), ("payload-lpbk", 4), ("cell-lpbk", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLoopback.setStatus('mandatory')
pdhPLCPClear = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPClear.setStatus('mandatory')
pdhPLCPReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPReconfig.setStatus('mandatory')
pdhPLCPLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPLCPLpbkTimeout.setStatus('mandatory')
pdhPLCPChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("plpp", 1), ("suni-pdh", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPChipType.setStatus('mandatory')
pdhPLCPTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPTXclock.setStatus('mandatory')
pdhPLCPRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPRXclock.setStatus('mandatory')
pdhPLCPTXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPTXCells.setStatus('mandatory')
pdhPLCPRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPRXCells.setStatus('mandatory')
pdhPLCPHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPHCSErrs.setStatus('mandatory')
pdhPLCPLOCDDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOCDDefect.setStatus('mandatory')
pdhPLCPYellowDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPYellowDefect.setStatus('mandatory')
pdhPLCPLOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOFDefect.setStatus('mandatory')
pdhPLCPLOCDAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOCDAlarm.setStatus('mandatory')
pdhPLCPYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPYellowAlarm.setStatus('mandatory')
pdhPLCPLOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPLOFAlarm.setStatus('mandatory')
pdhPLCPFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFrameErrs.setStatus('mandatory')
pdhPLCPBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPBIP8Errs.setStatus('mandatory')
pdhPLCPFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFEBEErrs.setStatus('mandatory')
pdhPLCPES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPES.setStatus('mandatory')
pdhPLCPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPSES.setStatus('mandatory')
pdhPLCPUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPUAS.setStatus('mandatory')
pdhPLCPFEES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFEES.setStatus('mandatory')
pdhPLCPFESES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFESES.setStatus('mandatory')
pdhPLCPFEUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPLCPFEUAS.setStatus('mandatory')
pdhDS3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2), )
if mibBuilder.loadTexts: pdhDS3Table.setStatus('mandatory')
pdhDS3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1), ).setIndexNames((0, "DV2-MIB", "pdhDS3LinkNo"))
if mibBuilder.loadTexts: pdhDS3Entry.setStatus('mandatory')
pdhDS3TableValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3TableValid.setStatus('mandatory')
pdhDS3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LinkNo.setStatus('mandatory')
pdhDS3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("m23", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3Framer.setStatus('mandatory')
pdhDS3TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3TxAIS.setStatus('mandatory')
pdhDS3Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3Clear.setStatus('mandatory')
pdhDS3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhDS3Reconfig.setStatus('mandatory')
pdhDS3RxFrmFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("clear-channel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3RxFrmFmt.setStatus('mandatory')
pdhDS3RxIDL = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3RxIDL.setStatus('mandatory')
pdhDS3FEACTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 6, 5, 4, 3, 2, 1))).clone(namedValues=NamedValues(("none", 7), ("line-loopback-active", 6), ("line-loopback-deactive", 5), ("ds3-idl", 4), ("ds3-ais", 3), ("ds3-oof", 2), ("ds3-los", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FEACTxmt.setStatus('mandatory')
pdhDS3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3Lcvs.setStatus('mandatory')
pdhDS3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FrameErrs.setStatus('mandatory')
pdhDS3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ParityErrs.setStatus('mandatory')
pdhDS3CbitPrtyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3CbitPrtyErrs.setStatus('mandatory')
pdhDS3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FEBEErrs.setStatus('mandatory')
pdhDS3LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LOSDefect.setStatus('mandatory')
pdhDS3OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3OOFDefect.setStatus('mandatory')
pdhDS3AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3AISDefect.setStatus('mandatory')
pdhDS3YellowDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3YellowDefect.setStatus('mandatory')
pdhDS3ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ExBERDefect.setStatus('mandatory')
pdhDS3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LOSAlarm.setStatus('mandatory')
pdhDS3LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LOFAlarm.setStatus('mandatory')
pdhDS3AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3AISAlarm.setStatus('mandatory')
pdhDS3YellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3YellowAlarm.setStatus('mandatory')
pdhDS3ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ExBERAlarm.setStatus('mandatory')
pdhDS3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LES.setStatus('mandatory')
pdhDS3LSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3LSES.setStatus('mandatory')
pdhDS3ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ES.setStatus('mandatory')
pdhDS3ES2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3ES2.setStatus('mandatory')
pdhDS3SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3SES.setStatus('mandatory')
pdhDS3SES2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3SES2.setStatus('mandatory')
pdhDS3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3AISS.setStatus('mandatory')
pdhDS3UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3UAS.setStatus('mandatory')
pdhDS3FarEndES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FarEndES.setStatus('mandatory')
pdhDS3FarEndSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FarEndSES.setStatus('mandatory')
pdhDS3FarEndUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhDS3FarEndUAS.setStatus('mandatory')
pdhE3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3), )
if mibBuilder.loadTexts: pdhE3Table.setStatus('mandatory')
pdhE3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1), ).setIndexNames((0, "DV2-MIB", "pdhE3LinkNo"))
if mibBuilder.loadTexts: pdhE3Entry.setStatus('mandatory')
pdhE3TableValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3TableValid.setStatus('mandatory')
pdhE3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LinkNo.setStatus('mandatory')
pdhE3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("g832", 2), ("g751", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3Framer.setStatus('mandatory')
pdhE3Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3Clear.setStatus('mandatory')
pdhE3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3Reconfig.setStatus('mandatory')
pdhE3TxmtTimMk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxmtTimMk.setStatus('mandatory')
pdhE3PloadTypeLab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3PloadTypeLab.setStatus('mandatory')
pdhE3TxTrlTrcIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16))).clone(namedValues=NamedValues(("length-16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxTrlTrcIdLen.setStatus('mandatory')
pdhE3TxTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 9), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxTrcIdUH.setStatus('mandatory')
pdhE3TxTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3TxTrcIdLH.setStatus('mandatory')
pdhE3RxExTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 11), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3RxExTrcIdUH.setStatus('mandatory')
pdhE3RxExTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 12), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhE3RxExTrcIdLH.setStatus('mandatory')
pdhE3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FrameErrs.setStatus('mandatory')
pdhE3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3Lcvs.setStatus('mandatory')
pdhE3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ParityErrs.setStatus('mandatory')
pdhE3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FEBEErrs.setStatus('mandatory')
pdhE3LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LOSDefect.setStatus('mandatory')
pdhE3OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3OOFDefect.setStatus('mandatory')
pdhE3AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3AISDefect.setStatus('mandatory')
pdhE3FERFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FERFDefect.setStatus('mandatory')
pdhE3ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ExBERDefect.setStatus('mandatory')
pdhE3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LOSAlarm.setStatus('mandatory')
pdhE3LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LOFAlarm.setStatus('mandatory')
pdhE3AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3AISAlarm.setStatus('mandatory')
pdhE3FERFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3FERFAlarm.setStatus('mandatory')
pdhE3ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ExBERAlarm.setStatus('mandatory')
pdhE3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LES.setStatus('mandatory')
pdhE3LSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3LSES.setStatus('mandatory')
pdhE3ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3ES.setStatus('mandatory')
pdhE3SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3SES.setStatus('mandatory')
pdhE3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3AISS.setStatus('mandatory')
pdhE3UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3UAS.setStatus('mandatory')
pdhE3RxTrlTrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 76), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxTrlTrc.setStatus('mandatory')
pdhE3RxTrIdMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxTrIdMis.setStatus('mandatory')
pdhE3RxTrIdUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxTrIdUnst.setStatus('mandatory')
pdhE3RxPloadTypeLabMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxPloadTypeLabMis.setStatus('mandatory')
pdhE3RxPloadTypeLabUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhE3RxPloadTypeLabUnst.setStatus('mandatory')
plppCTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1), )
if mibBuilder.loadTexts: plppCTable.setStatus('mandatory')
plppCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1), ).setIndexNames((0, "DV2-MIB", "plppCLinkNo"))
if mibBuilder.loadTexts: plppCEntry.setStatus('mandatory')
plppCLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppCLinkNo.setStatus('mandatory')
plppCLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCLinkEnab.setStatus('mandatory')
plppCCPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("e1", 2), ("g751-e3", 3), ("ds1", 4), ("ds3", 5), ("g832-e3", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCCPLCPMode.setStatus('mandatory')
plppCDS3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCDS3Framer.setStatus('mandatory')
plppCScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCScrambler.setStatus('mandatory')
plppC0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppC0x55.setStatus('mandatory')
plppCCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processed", 1), ("ignored", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCCLine.setStatus('mandatory')
plppCLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCLoopback.setStatus('mandatory')
plppCSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCSmdsMode.setStatus('mandatory')
plppCPloadTypeLab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCPloadTypeLab.setStatus('mandatory')
plppCTxTrlTrcIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 64))).clone(namedValues=NamedValues(("l16", 16), ("l64", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCTxTrlTrcIdLen.setStatus('mandatory')
plppCTxTrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 15), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCTxTrcId.setStatus('mandatory')
plppCRxExTrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 16), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppCRxExTrcId.setStatus('mandatory')
plppSTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2), )
if mibBuilder.loadTexts: plppSTable.setStatus('mandatory')
plppSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1), ).setIndexNames((0, "DV2-MIB", "plppSLinkNo"))
if mibBuilder.loadTexts: plppSEntry.setStatus('mandatory')
plppSLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSLinkNo.setStatus('mandatory')
plppSCLines = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSCLines.setStatus('mandatory')
plppSTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSTXclock.setStatus('mandatory')
plppSRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSRXclock.setStatus('mandatory')
plppSTXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSTXCells.setStatus('mandatory')
plppSRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSRXCells.setStatus('mandatory')
plppSHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSHCSErrs.setStatus('mandatory')
plppSFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSFrameErrs.setStatus('mandatory')
plppSBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSBIP8Errs.setStatus('mandatory')
plppSFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSFEBEErrs.setStatus('mandatory')
plppSSPLRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSSPLRStatus.setStatus('mandatory')
plppSDs3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3Lcvs.setStatus('mandatory')
plppSDs3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3FrameErrs.setStatus('mandatory')
plppSDs3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3ParityErrs.setStatus('mandatory')
plppSDs3CbitPrtyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3CbitPrtyErrs.setStatus('mandatory')
plppSDs3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3FEBEErrs.setStatus('mandatory')
plppSDs3RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3RxAIS.setStatus('mandatory')
plppSDs3RxRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3RxRedAlarm.setStatus('mandatory')
plppSDs3RxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSDs3RxYellowAlarm.setStatus('mandatory')
plppSPLCPRxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppSPLCPRxYellowAlarm.setStatus('mandatory')
plppsRxTrIdMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxTrIdMis.setStatus('mandatory')
plppsRxTrIdUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxTrIdUnst.setStatus('mandatory')
plppsRxPloadTypeLabMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxPloadTypeLabMis.setStatus('mandatory')
plppsRxPloadTypeLabUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxPloadTypeLabUnst.setStatus('mandatory')
plppsRxTrlTrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 28), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppsRxTrlTrc.setStatus('mandatory')
plppV2CTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3), )
if mibBuilder.loadTexts: plppV2CTable.setStatus('mandatory')
plppV2CEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1), ).setIndexNames((0, "DV2-MIB", "plppV2CLinkNo"))
if mibBuilder.loadTexts: plppV2CEntry.setStatus('mandatory')
plppV2CLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2CLinkNo.setStatus('mandatory')
plppV2CLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CLinkEnab.setStatus('mandatory')
plppV2CCPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CCPLCPMode.setStatus('mandatory')
plppV2CDS3Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CDS3Framer.setStatus('mandatory')
plppV2CScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CScrambler.setStatus('mandatory')
plppV2C0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2C0x55.setStatus('mandatory')
plppV2CLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CLoopback.setStatus('mandatory')
plppV2CSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CSmdsMode.setStatus('mandatory')
plppV2CFrmFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("clear-channel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CFrmFmt.setStatus('mandatory')
plppV2CTxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppV2CTxAIS.setStatus('mandatory')
plppV2STable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4), )
if mibBuilder.loadTexts: plppV2STable.setStatus('mandatory')
plppV2SEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1), ).setIndexNames((0, "DV2-MIB", "plppV2SLinkNo"))
if mibBuilder.loadTexts: plppV2SEntry.setStatus('mandatory')
plppV2SLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SLinkNo.setStatus('mandatory')
plppV2STXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2STXclock.setStatus('mandatory')
plppV2SRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SRXclock.setStatus('mandatory')
plppV2STXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2STXCells.setStatus('mandatory')
plppV2SRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SRXCells.setStatus('mandatory')
plppV2SHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SHCSErrs.setStatus('mandatory')
plppV2SFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SFrameErrs.setStatus('mandatory')
plppV2SBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SBIP8Errs.setStatus('mandatory')
plppV2SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SFEBEErrs.setStatus('mandatory')
plppV2SSPLRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SSPLRStatus.setStatus('mandatory')
plppV2SDs3FrmFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-bit", 1), ("clear-channel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FrmFmt.setStatus('mandatory')
plppV2SDs3Lcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3Lcvs.setStatus('mandatory')
plppV2SDs3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FrameErrs.setStatus('mandatory')
plppV2SDs3ParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3ParityErrs.setStatus('mandatory')
plppV2SDs3CbitPrtyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3CbitPrtyErrs.setStatus('mandatory')
plppV2SDs3FEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FEBEErrs.setStatus('mandatory')
plppV2SDs3RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3RxAIS.setStatus('mandatory')
plppV2SDs3RxRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3RxRedAlarm.setStatus('mandatory')
plppV2SDs3RxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3RxYellowAlarm.setStatus('mandatory')
plppV2SPLCPRxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SPLCPRxYellowAlarm.setStatus('mandatory')
plppV2SDs3FEACTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 6, 5, 4, 3, 2, 1))).clone(namedValues=NamedValues(("none", 7), ("line-loopback-active", 6), ("line-loopback-deactive", 5), ("ds3-idl", 4), ("ds3-ais", 3), ("ds3-oof", 2), ("ds3-los", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3FEACTxmt.setStatus('mandatory')
plppV2SRxIDL = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SRxIDL.setStatus('mandatory')
plppV2SLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SLOC.setStatus('mandatory')
plppV2SDs3LPBK = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppV2SDs3LPBK.setStatus('mandatory')
plppE1CTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5), )
if mibBuilder.loadTexts: plppE1CTable.setStatus('mandatory')
plppE1CEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1), ).setIndexNames((0, "DV2-MIB", "plppE1CLinkNo"))
if mibBuilder.loadTexts: plppE1CEntry.setStatus('mandatory')
plppE1CLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1CLinkNo.setStatus('mandatory')
plppE1CLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CLinkEnab.setStatus('mandatory')
plppE1CScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CScrambler.setStatus('mandatory')
plppE1C0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1C0x55.setStatus('mandatory')
plppE1CSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CSmdsMode.setStatus('mandatory')
plppE1CLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE1CLpbk.setStatus('mandatory')
plppE1STable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6), )
if mibBuilder.loadTexts: plppE1STable.setStatus('mandatory')
plppE1SEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1), ).setIndexNames((0, "DV2-MIB", "plppE1SLinkNo"))
if mibBuilder.loadTexts: plppE1SEntry.setStatus('mandatory')
plppE1SLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SLinkNo.setStatus('mandatory')
plppE1STXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1STXclock.setStatus('mandatory')
plppE1SRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRXclock.setStatus('mandatory')
plppE1STXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1STXCells.setStatus('mandatory')
plppE1SRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRXCells.setStatus('mandatory')
plppE1SHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SHCSErrs.setStatus('mandatory')
plppE1SCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SCRCErrs.setStatus('mandatory')
plppE1SFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SFrameErrs.setStatus('mandatory')
plppE1SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SFEBEErrs.setStatus('mandatory')
plppE1SLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SLcvs.setStatus('mandatory')
plppE1SRxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxAIS.setStatus('mandatory')
plppE1SRxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxOOF.setStatus('mandatory')
plppE1SRxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxLOS.setStatus('mandatory')
plppE1SRxLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SRxLOF.setStatus('mandatory')
plppE1SFerf = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE1SFerf.setStatus('mandatory')
plppE3CTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7), )
if mibBuilder.loadTexts: plppE3CTable.setStatus('mandatory')
plppE3CEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1), ).setIndexNames((0, "DV2-MIB", "plppE3CLinkNo"))
if mibBuilder.loadTexts: plppE3CEntry.setStatus('mandatory')
plppE3CLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3CLinkNo.setStatus('mandatory')
plppE3CLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CLinkEnab.setStatus('mandatory')
plppE3CFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("g832", 3), ("g751", 2), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CFramer.setStatus('mandatory')
plppE3CPLCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("none", 1), ("g751", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CPLCPMode.setStatus('mandatory')
plppE3CScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CScrambler.setStatus('mandatory')
plppE3C0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3C0x55.setStatus('mandatory')
plppE3CLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CLoopback.setStatus('mandatory')
plppE3CSmdsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CSmdsMode.setStatus('mandatory')
plppE3CTxmtTimMk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxmtTimMk.setStatus('mandatory')
plppE3CPloadTypeLab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CPloadTypeLab.setStatus('mandatory')
plppE3CTxTrlTrcIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16))).clone(namedValues=NamedValues(("length-16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxTrlTrcIdLen.setStatus('mandatory')
plppE3CTxTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 12), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxTrcIdUH.setStatus('mandatory')
plppE3CTxTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 13), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CTxTrcIdLH.setStatus('mandatory')
plppE3CRxExTrcIdUH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 14), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CRxExTrcIdUH.setStatus('mandatory')
plppE3CRxExTrcIdLH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 15), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plppE3CRxExTrcIdLH.setStatus('mandatory')
plppE3STable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8), )
if mibBuilder.loadTexts: plppE3STable.setStatus('mandatory')
plppE3SEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1), ).setIndexNames((0, "DV2-MIB", "plppE3SLinkNo"))
if mibBuilder.loadTexts: plppE3SEntry.setStatus('mandatory')
plppE3SLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SLinkNo.setStatus('mandatory')
plppE3STXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("down", 2), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3STXclock.setStatus('mandatory')
plppE3SRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("down", 2), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRXclock.setStatus('mandatory')
plppE3STXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3STXCells.setStatus('mandatory')
plppE3SRXCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRXCells.setStatus('mandatory')
plppE3SHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SHCSErrs.setStatus('mandatory')
plppE3SE3FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SE3FrameErrs.setStatus('mandatory')
plppE3SPLCPFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SPLCPFrameErrs.setStatus('mandatory')
plppE3SBIP8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SBIP8Errs.setStatus('mandatory')
plppE3SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SFEBEErrs.setStatus('mandatory')
plppE3SLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SLcvs.setStatus('mandatory')
plppE3SLcd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SLcd.setStatus('mandatory')
plppE3SRxTrlTrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 13), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxTrlTrc.setStatus('mandatory')
plppE3SRxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxAIS.setStatus('mandatory')
plppE3SRxOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxOOF.setStatus('mandatory')
plppE3SRxLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxLOS.setStatus('mandatory')
plppE3SRxLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxLOF.setStatus('mandatory')
plppE3SRxFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxFERF.setStatus('mandatory')
plppE3SPLCPRxLof = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SPLCPRxLof.setStatus('mandatory')
plppE3SPLCPRxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SPLCPRxYellowAlarm.setStatus('mandatory')
plppE3SRxTrIdMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxTrIdMis.setStatus('mandatory')
plppE3SRxTrIdUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxTrIdUnst.setStatus('mandatory')
plppE3SRxPloadTypeLabMis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxPloadTypeLabMis.setStatus('mandatory')
plppE3SRxPloadTypeLabUnst = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plppE3SRxPloadTypeLabUnst.setStatus('mandatory')
lFibreConfTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1), )
if mibBuilder.loadTexts: lFibreConfTable.setStatus('mandatory')
lFibreConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1), ).setIndexNames((0, "DV2-MIB", "lFibreConfLinkNo"))
if mibBuilder.loadTexts: lFibreConfEntry.setStatus('mandatory')
lFibreConfLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreConfLinkNo.setStatus('mandatory')
lFibreConfLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lFibreConfLinkEnab.setStatus('mandatory')
lFibreConfCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processed", 1), ("ignored", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lFibreConfCLine.setStatus('mandatory')
lFibreConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lFibreConfLoopback.setStatus('mandatory')
lFibreStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2), )
if mibBuilder.loadTexts: lFibreStatTable.setStatus('mandatory')
lFibreStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1), ).setIndexNames((0, "DV2-MIB", "lFibreStatLinkNo"))
if mibBuilder.loadTexts: lFibreStatEntry.setStatus('mandatory')
lFibreStatLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreStatLinkNo.setStatus('mandatory')
lFibreStatCLines = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreStatCLines.setStatus('mandatory')
lFibreStatHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFibreStatHCSErrs.setStatus('mandatory')
ds1Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1), )
if mibBuilder.loadTexts: ds1Table.setStatus('mandatory')
ds1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1), ).setIndexNames((0, "DV2-MIB", "ds1LinkNo"))
if mibBuilder.loadTexts: ds1Entry.setStatus('mandatory')
ds1LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LinkNo.setStatus('mandatory')
ds1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-feet", 7), ("square", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LineLength.setStatus('mandatory')
ds1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("t1dm", 3), ("slc96", 4), ("esf4k", 5), ("esf2k-3", 6), ("esf2k-1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Framing.setStatus('mandatory')
ds1Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Coding.setStatus('mandatory')
ds1Tr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Tr.setStatus('mandatory')
ds1Rt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Rt.setStatus('mandatory')
ds1LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LOSDefect.setStatus('mandatory')
ds1AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1AISDefect.setStatus('mandatory')
ds1OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1OOFDefect.setStatus('mandatory')
ds1YellowDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1YellowDefect.setStatus('mandatory')
ds1LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LOSAlarm.setStatus('mandatory')
ds1AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1AISAlarm.setStatus('mandatory')
ds1LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LOFAlarm.setStatus('mandatory')
ds1YellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1YellowAlarm.setStatus('mandatory')
ds1PdvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PdvCount.setStatus('mandatory')
ds1Z16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1Z16Count.setStatus('mandatory')
ds1LcvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LcvCount.setStatus('mandatory')
ds1BeeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1BeeCount.setStatus('mandatory')
ds1FerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1FerCount.setStatus('mandatory')
ds1OofCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1OofCount.setStatus('mandatory')
ds1ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ClrStats.setStatus('mandatory')
ds1Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Reconfig.setStatus('mandatory')
ds1LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LineES.setStatus('mandatory')
ds1LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LineSES.setStatus('mandatory')
ds1ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ES.setStatus('mandatory')
ds1SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1SES.setStatus('mandatory')
ds1AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1AISS.setStatus('mandatory')
ds1UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1UAS.setStatus('mandatory')
ds1TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 13))).clone(namedValues=NamedValues(("local-oscillator", 12), ("local-link", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1TxClkSel.setStatus('mandatory')
ds1ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ExBERDefect.setStatus('mandatory')
ds1ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ExBERAlarm.setStatus('mandatory')
ds3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2), )
if mibBuilder.loadTexts: ds3Table.setStatus('mandatory')
ds3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1), ).setIndexNames((0, "DV2-MIB", "ds3LinkNo"))
if mibBuilder.loadTexts: ds3Entry.setStatus('mandatory')
ds3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LinkNo.setStatus('mandatory')
ds3Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3Lb.setStatus('mandatory')
ds3Err = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3Err.setStatus('mandatory')
ds3RXLos = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3RXLos.setStatus('mandatory')
ds3TXLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TXLoc.setStatus('mandatory')
ds3RXErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3RXErr.setStatus('mandatory')
ds3RXAis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3RXAis.setStatus('mandatory')
ds3TXAis = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TXAis.setStatus('mandatory')
ds3TXLev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TXLev.setStatus('mandatory')
ds3Tr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Tr.setStatus('mandatory')
ds3Rt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Rt.setStatus('mandatory')
ds3Equal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Equal.setStatus('mandatory')
ds3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LOSAlarm.setStatus('mandatory')
ds3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3Reconfig.setStatus('mandatory')
e1Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5), )
if mibBuilder.loadTexts: e1Table.setStatus('mandatory')
e1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1), ).setIndexNames((0, "DV2-MIB", "e1LinkNo"))
if mibBuilder.loadTexts: e1Entry.setStatus('mandatory')
e1LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LinkNo.setStatus('mandatory')
e1LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dual", 1), ("quad", 2), ("dual-sig", 3), ("quad-sig", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LimType.setStatus('mandatory')
e1Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("payload", 3), ("digital", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1Lb.setStatus('mandatory')
e1FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crc-mfrm", 1), ("basic", 2), ("unframed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1FRMRMode.setStatus('mandatory')
e1TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("system", 11), ("loc-oscil", 12), ("loc-link0", 13), ("loc-link1", 14), ("loc-link2", 15), ("loc-link3", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TxClkSel.setStatus('mandatory')
e1TS16PayLd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TS16PayLd.setStatus('mandatory')
e1TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TxAIS.setStatus('mandatory')
e1GappedClk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1GappedClk.setStatus('mandatory')
e1IntrfType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("balanc-120", 1), ("unbalan-75", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1IntrfType.setStatus('mandatory')
e1ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ClrStats.setStatus('mandatory')
e1Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1Reconfig.setStatus('mandatory')
se1SA4 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA4.setStatus('mandatory')
se1SA5 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA5.setStatus('mandatory')
se1SA6 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA6.setStatus('mandatory')
se1SA7 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA7.setStatus('mandatory')
se1SA8 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SA8.setStatus('mandatory')
se1SI0 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SI0.setStatus('mandatory')
se1SI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: se1SI1.setStatus('mandatory')
e1LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LOSDefect.setStatus('mandatory')
e1OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1OOFDefect.setStatus('mandatory')
e1AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AISDefect.setStatus('mandatory')
e1FerfDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FerfDefect.setStatus('mandatory')
e1ExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ExBERDefect.setStatus('mandatory')
e1LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LOSAlarm.setStatus('mandatory')
e1LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LOFAlarm.setStatus('mandatory')
e1AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AISAlarm.setStatus('mandatory')
e1FerfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FerfAlarm.setStatus('mandatory')
e1ExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ExBERAlarm.setStatus('mandatory')
e1SCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SCRCErrs.setStatus('mandatory')
e1SFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SFrameErrs.setStatus('mandatory')
e1SFEBEErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SFEBEErrs.setStatus('mandatory')
e1SLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SLcvs.setStatus('mandatory')
e1LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineES.setStatus('mandatory')
e1LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineSES.setStatus('mandatory')
e1ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ES.setStatus('mandatory')
e1SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SES.setStatus('mandatory')
e1AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AISS.setStatus('mandatory')
e1UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1UAS.setStatus('mandatory')
soTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7), )
if mibBuilder.loadTexts: soTable.setStatus('mandatory')
soEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1), ).setIndexNames((0, "DV2-MIB", "soLinkNo"))
if mibBuilder.loadTexts: soEntry.setStatus('mandatory')
soLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: soLinkNo.setStatus('mandatory')
soLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("solim-v0", 1), ("solim-v1", 2), ("solim-v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: soLimType.setStatus('mandatory')
soTimingRef = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("local-link0", 13), ("local-link1", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soTimingRef.setStatus('mandatory')
soTxEn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soTxEn0.setStatus('mandatory')
soTxEn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soTxEn1.setStatus('mandatory')
soLimDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pre-system-timing", 1), ("dual-intermediate-reach", 2), ("single-intermediate-reach", 3), ("dual-short-reach", 4), ("single-short-reach", 5), ("dual-long-reach", 6), ("single-long-reach", 7), ("dual-hybrid-intermediate", 8), ("dual-hybrid-long", 9), ("dual-electrical", 10))).clone('dual-intermediate-reach')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soLimDesc.setStatus('mandatory')
soReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soReconfig.setStatus('mandatory')
ds1V2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9), )
if mibBuilder.loadTexts: ds1V2Table.setStatus('mandatory')
ds1V2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1), ).setIndexNames((0, "DV2-MIB", "ds1V2LinkNo"))
if mibBuilder.loadTexts: ds1V2Entry.setStatus('mandatory')
ds1V2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LinkNo.setStatus('mandatory')
ds1V2LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds1-dual", 1), ("ds1-quad", 2), ("ds1-dual-signaling", 3), ("ds1-quad-signaling", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LimType.setStatus('mandatory')
ds1V2TxLineLn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("feet-0-110", 1), ("feet-110-220", 2), ("feet-220-330", 3), ("feet-330-440", 4), ("feet-440-550", 5), ("feet-550-660", 6), ("more-than-655-feet", 7), ("square", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2TxLineLn.setStatus('mandatory')
ds1V2FRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("sf", 2), ("t1dm", 3), ("slc96", 4), ("esf4k", 5), ("esf2K-3", 6), ("esf2k-1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2FRMRMode.setStatus('mandatory')
ds1V2Coding = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("b8zs", 2), ("ami", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2Coding.setStatus('mandatory')
ds1V2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line-lpbk", 2), ("payload-lpbk", 3), ("digital-lpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2Lb.setStatus('mandatory')
ds1V2TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2TxAIS.setStatus('mandatory')
ds1V2GappedClk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2GappedClk.setStatus('mandatory')
ds1V2TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("local-link0", 13), ("local-link1", 14), ("local-link2", 15), ("local-link3", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2TxClkSel.setStatus('mandatory')
ds1V2ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2ClrStats.setStatus('mandatory')
ds1V2Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1V2Reconfig.setStatus('mandatory')
ds1V2LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LOSDefect.setStatus('mandatory')
ds1V2OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2OOFDefect.setStatus('mandatory')
ds1V2AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2AISDefect.setStatus('mandatory')
ds1V2FerfDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2FerfDefect.setStatus('mandatory')
ds1V2BERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2BERDefect.setStatus('mandatory')
ds1V2LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LOSAlarm.setStatus('mandatory')
ds1V2LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LOFAlarm.setStatus('mandatory')
ds1V2AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2AISAlarm.setStatus('mandatory')
ds1V2FerfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2FerfAlarm.setStatus('mandatory')
ds1V2BERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2BERAlarm.setStatus('mandatory')
ds1V2FerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2FerCount.setStatus('mandatory')
ds1V2BeeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2BeeCount.setStatus('mandatory')
ds1V2OCfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2OCfCount.setStatus('mandatory')
ds1V2LcvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LcvCount.setStatus('mandatory')
ds1V2LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LineES.setStatus('mandatory')
ds1V2LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2LineSES.setStatus('mandatory')
ds1V2ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2ES.setStatus('mandatory')
ds1V2SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2SES.setStatus('mandatory')
ds1V2AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2AISS.setStatus('mandatory')
ds1V2UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2UAS.setStatus('mandatory')
ds1V2ExBER = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1V2ExBER.setStatus('mandatory')
dlimLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlimLpbkTimeout.setStatus('mandatory')
ds3V2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11), )
if mibBuilder.loadTexts: ds3V2Table.setStatus('mandatory')
ds3V2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1), ).setIndexNames((0, "DV2-MIB", "ds3V2LinkNo"))
if mibBuilder.loadTexts: ds3V2Entry.setStatus('mandatory')
ds3V2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LinkNo.setStatus('mandatory')
ds3V2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("none", 2), ("line-lpbk", 1), ("local-lpbk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2Lb.setStatus('mandatory')
ds3V2LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ds3-2c", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LimType.setStatus('mandatory')
ds3V2LimOK = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LimOK.setStatus('mandatory')
ds3V2TxLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2TxLBO.setStatus('mandatory')
ds3V2TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 17, 18))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("link0-plcp", 17), ("link1-plcp", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2TxClkSel.setStatus('mandatory')
ds3V2LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LOSDefect.setStatus('mandatory')
ds3V2LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3V2LOSAlarm.setStatus('mandatory')
ds3V2Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3V2Reconfig.setStatus('mandatory')
e3Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12), )
if mibBuilder.loadTexts: e3Table.setStatus('mandatory')
e3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1), ).setIndexNames((0, "DV2-MIB", "e3LinkNo"))
if mibBuilder.loadTexts: e3Entry.setStatus('mandatory')
e3LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LinkNo.setStatus('mandatory')
e3LimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("e3-2c", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LimType.setStatus('mandatory')
e3LimOK = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LimOK.setStatus('mandatory')
e3EQSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("set-0-to-3p5-dB", 2), ("set-2p6-to-8-dB", 3), ("set-6-to-9p9-dB", 4), ("set-8p6-to-13p2-dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3EQSelect.setStatus('mandatory')
e3Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("none", 3), ("line-lpbk", 1), ("local-lpbk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3Loopback.setStatus('mandatory')
e3TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TxAIS.setStatus('mandatory')
e3TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14))).clone(namedValues=NamedValues(("system", 11), ("local-oscillator", 12), ("local-link0", 13), ("local-link1", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TxClkSel.setStatus('mandatory')
e3LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LOSDefect.setStatus('mandatory')
e3LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LOSAlarm.setStatus('mandatory')
e3Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3Reconfig.setStatus('mandatory')
hssiTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13), )
if mibBuilder.loadTexts: hssiTable.setStatus('mandatory')
hssiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1), ).setIndexNames((0, "DV2-MIB", "hssiLinkNo"))
if mibBuilder.loadTexts: hssiEntry.setStatus('mandatory')
hssiLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLinkNo.setStatus('mandatory')
hssiLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("internal", 3), ("bilateral", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiLocalLoopback.setStatus('mandatory')
hssiRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("digital", 3), ("remote-line", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiRemoteLoopback.setStatus('mandatory')
hssiReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiReconfig.setStatus('mandatory')
hssiType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiType.setStatus('mandatory')
hssiLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hssi-v1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLimType.setStatus('mandatory')
hssiClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("from-dce", 2), ("local-45Mbps", 3), ("local-34Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hssiClockSrc.setStatus('mandatory')
hssiCtrTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiCtrTestMode.setStatus('mandatory')
hssiLinkReady = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLinkReady.setStatus('mandatory')
hssiRemoteReady = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiRemoteReady.setStatus('mandatory')
hssiLOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLOSDefect.setStatus('mandatory')
hssiLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hssiLOSAlarm.setStatus('mandatory')
j2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14), )
if mibBuilder.loadTexts: j2Table.setStatus('mandatory')
j2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1), ).setIndexNames((0, "DV2-MIB", "j2LinkNo"))
if mibBuilder.loadTexts: j2Entry.setStatus('mandatory')
j2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LinkNo.setStatus('mandatory')
j2FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2FirmwareRev.setStatus('mandatory')
j2TxEq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low-dB", 1), ("high-dB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxEq.setStatus('mandatory')
j2Lb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("liu-line", 2), ("j2-Framer-Payload", 3), ("j2-Framer-Digital", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2Lb.setStatus('mandatory')
j2TxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxAIS.setStatus('mandatory')
j2TxClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14))).clone(namedValues=NamedValues(("system-bus", 11), ("int-oscillator", 12), ("link-0", 13), ("link-1", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxClkSel.setStatus('mandatory')
j2ClrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2ClrStats.setStatus('mandatory')
j2Reconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2Reconfig.setStatus('mandatory')
j2TS97TS98 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 12), Hex().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TS97TS98.setStatus('mandatory')
j2QualClock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low-Primary", 1), ("low-Secondary", 2), ("high-Primary", 3), ("high-Secondary", 4), ("local-Oscillator", 5))).clone('low-Primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2QualClock.setStatus('mandatory')
j2LOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LOSDefect.setStatus('mandatory')
j2OOFDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2OOFDefect.setStatus('mandatory')
j2AISDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AISDefect.setStatus('mandatory')
j2RAlmDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RAlmDefect.setStatus('mandatory')
j2LOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LOSAlarm.setStatus('mandatory')
j2LOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LOFAlarm.setStatus('mandatory')
j2AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AISAlarm.setStatus('mandatory')
j2RAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RAlmAlarm.setStatus('mandatory')
j2FerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2FerCount.setStatus('mandatory')
j2RAlmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RAlmCount.setStatus('mandatory')
j2LcvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LcvCount.setStatus('mandatory')
j2CrcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2CrcCount.setStatus('mandatory')
j2LineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LineES.setStatus('mandatory')
j2LineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LineSES.setStatus('mandatory')
j2ES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ES.setStatus('mandatory')
j2SES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2SES.setStatus('mandatory')
j2AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AISS.setStatus('mandatory')
j2UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2UAS.setStatus('mandatory')
scfTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15), )
if mibBuilder.loadTexts: scfTable.setStatus('mandatory')
scfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1), ).setIndexNames((0, "DV2-MIB", "scfLinkNo"))
if mibBuilder.loadTexts: scfEntry.setStatus('mandatory')
scfLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkNo.setStatus('mandatory')
scfLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("si-dual", 1), ("si-quad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLimType.setStatus('mandatory')
scfFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfFirmwareRev.setStatus('mandatory')
scfQualClock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("low-Primary", 1), ("low-Secondary", 2), ("high-Primary", 3), ("high-Secondary", 4), ("local-Oscillator", 5))).clone('low-Primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfQualClock.setStatus('mandatory')
scfContr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ce-hpg-hc2", 1), ("ms-ms2", 2))).clone('ce-hpg-hc2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfContr.setStatus('mandatory')
scfDCEDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfDCEDTE.setStatus('mandatory')
scfLb = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("link", 3), ("digital", 4))).clone('line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfLb.setStatus('mandatory')
scfLineTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfLineTiming.setStatus('mandatory')
scfDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("rate-2x4", 1), ("rate-4x8", 2), ("rate-7x2", 3), ("rate-9x6", 4), ("rate-14x4", 5), ("rate-16x0", 6), ("rate-16x6", 7), ("rate-19x2", 8), ("rate-28x8", 9), ("rate-32x0", 10), ("rate-38x4", 11), ("rate-48x0", 12), ("rate-50x0", 13), ("rate-56x0", 14), ("rate-57x6", 15), ("rate-64x0", 16), ("rate-76x8", 17), ("rate-96x0", 18), ("rate-112x0", 19), ("rate-115x2", 20), ("rate-128x0", 21), ("rate-144x0", 22), ("rate-153x6", 23), ("rate-192x0", 24), ("rate-224x0", 25), ("rate-230x0", 26), ("rate-256x0", 27), ("rate-288x0", 28), ("rate-307x2", 29), ("rate-320x0", 30), ("rate-384x0", 31), ("rate-448x0", 32), ("rate-512x0", 33), ("rate-768x0", 34), ("rate-1024x0", 35), ("rate-1536x0", 36), ("rate-1920x0", 37), ("rate-2048x0", 38), ("rate-3072x0", 39), ("rate-4096x0", 40), ("rate-6144x0", 41), ("rate-8192x0", 42))).clone('rate-2x4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfDataRate.setStatus('mandatory')
scfClkSel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("localOscillator", 2))).clone('system')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfClkSel.setStatus('mandatory')
scfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x21", 1), ("rs449", 2), ("eia530-A", 3), ("v35", 4))).clone('x21')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfInterfaceType.setStatus('mandatory')
scfReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scfReconfig.setStatus('mandatory')
scfLOSDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLOSDefect.setStatus('mandatory')
scfLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLOSAlarm.setStatus('mandatory')
billAvailable = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billAvailable.setStatus('mandatory')
billingTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3), )
if mibBuilder.loadTexts: billingTable.setStatus('mandatory')
billingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1), ).setIndexNames((0, "DV2-MIB", "billSeq"))
if mibBuilder.loadTexts: billingEntry.setStatus('mandatory')
billSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSeq.setStatus('mandatory')
billSvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 2), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSvpi.setStatus('mandatory')
billSvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 3), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSvci.setStatus('mandatory')
billDvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 4), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDvpi.setStatus('mandatory')
billDvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 5), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDvci.setStatus('mandatory')
billSslot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSslot.setStatus('mandatory')
billSlink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billSlink.setStatus('mandatory')
billDslot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDslot.setStatus('mandatory')
billDlink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billDlink.setStatus('mandatory')
billCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 10), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCalled.setStatus('mandatory')
billCalledSub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 11), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCalledSub.setStatus('mandatory')
billCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 12), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCalling.setStatus('mandatory')
billCallingSub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 13), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCallingSub.setStatus('mandatory')
billCellInC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellInC.setStatus('mandatory')
billCellIn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellIn.setStatus('mandatory')
billFrameIn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFrameIn.setStatus('mandatory')
billByteInC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteInC.setStatus('mandatory')
billByteIn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteIn.setStatus('mandatory')
billCellOutC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellOutC.setStatus('mandatory')
billCellOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCellOut.setStatus('mandatory')
billFrameOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFrameOut.setStatus('mandatory')
billByteOutC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteOutC.setStatus('mandatory')
billByteOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billByteOut.setStatus('mandatory')
billCause = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCause.setStatus('mandatory')
billValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("block-invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billValid.setStatus('mandatory')
billCLP1OutC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCLP1OutC.setStatus('mandatory')
billCLP1Out = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billCLP1Out.setStatus('mandatory')
billTag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billTag.setStatus('mandatory')
billStartM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billStartM2.setStatus('mandatory')
billEndM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billEndM2.setStatus('mandatory')
billFwdPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdPCR.setStatus('mandatory')
billBwdPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdPCR.setStatus('mandatory')
billFwdSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdSCR.setStatus('mandatory')
billBwdSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdSCR.setStatus('mandatory')
billFwdMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdMBS.setStatus('mandatory')
billBwdMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdMBS.setStatus('mandatory')
billFwdQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qos1", 1), ("qos2", 2), ("qos3", 3), ("qos4", 4), ("abr", 6), ("cbr", 7), ("vbrRt", 8), ("vbrNrt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFwdQOS.setStatus('mandatory')
billBwdQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qos1", 1), ("qos2", 2), ("qos3", 3), ("qos4", 4), ("abr", 6), ("cbr", 7), ("vbrRt", 8), ("vbrNrt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: billBwdQOS.setStatus('mandatory')
billingControl = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop-billing-process", 1), ("start-SPVC-billing-process", 2), ("start-PVC-billing-process", 3), ("start-SPVC-and-PVC-billing", 4), ("delete-all-billing-records", 5), ("start-SVC-billing-process", 6), ("start-SVC-and-PVC-billing", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billingControl.setStatus('mandatory')
billLost = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billLost.setStatus('mandatory')
billLinks = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("all", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billLinks.setStatus('mandatory')
billTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billTrapControl.setStatus('mandatory')
billDirControl = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni-direction", 1), ("bi-direction", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billDirControl.setStatus('mandatory')
billingInterval = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("period15min", 1), ("period30min", 2), ("period60min", 3), ("period120min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billingInterval.setStatus('mandatory')
qeDocMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocMacAddress.setStatus('mandatory')
qeDocTunRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRetryPeriod.setStatus('mandatory')
qeDocTunIdlePeriod = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunIdlePeriod.setStatus('mandatory')
qeDocBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4), )
if mibBuilder.loadTexts: qeDocBridgeTable.setStatus('mandatory')
qeDocBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1), ).setIndexNames((0, "DV2-MIB", "qeDocBridgeLinkNo"))
if mibBuilder.loadTexts: qeDocBridgeEntry.setStatus('mandatory')
qeDocBridgeLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocBridgeLinkNo.setStatus('mandatory')
qeDocBridgeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeEnable.setStatus('mandatory')
qeDocBridgeLink0Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink0Eligible.setStatus('mandatory')
qeDocBridgeLink1Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink1Eligible.setStatus('mandatory')
qeDocBridgeLink2Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink2Eligible.setStatus('mandatory')
qeDocBridgeLink3Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocBridgeLink3Eligible.setStatus('mandatory')
qeDocTunTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6), )
if mibBuilder.loadTexts: qeDocTunTable.setStatus('mandatory')
qeDocTunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1), ).setIndexNames((0, "DV2-MIB", "qeDocTunIndex"))
if mibBuilder.loadTexts: qeDocTunEntry.setStatus('mandatory')
qeDocTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunIndex.setStatus('mandatory')
qeDocTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunName.setStatus('mandatory')
qeDocTunType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("ip", 2), ("mac-bridge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunType.setStatus('mandatory')
qeDocTunState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("use-pvc", 2), ("use-svc", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunState.setStatus('mandatory')
qeDocTunCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("allocated", 2), ("waccept", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunCallState.setStatus('mandatory')
qeDocTunInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunInFrames.setStatus('mandatory')
qeDocTunOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunOutFrames.setStatus('mandatory')
qeDocTunVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 8), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunVPI.setStatus('mandatory')
qeDocTunVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 9), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunVCI.setStatus('mandatory')
qeDocTunPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunPriority.setStatus('mandatory')
qeDocTunSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunSlot.setStatus('mandatory')
qeDocTunLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunLink.setStatus('mandatory')
qeDocTunRemNet = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemNet.setStatus('mandatory')
qeDocTunRemMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemMask.setStatus('mandatory')
qeDocTunLocNet = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocNet.setStatus('mandatory')
qeDocTunLocMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocMask.setStatus('mandatory')
qeDocTunRemStartSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemStartSkt.setStatus('mandatory')
qeDocTunRemEndSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRemEndSkt.setStatus('mandatory')
qeDocTunLocStartSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocStartSkt.setStatus('mandatory')
qeDocTunLocEndSkt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLocEndSkt.setStatus('mandatory')
qeDocTunSktType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("tcpInc-udpInc", 4), ("tcpInc-udpExc", 3), ("tcpExc-udpInc", 2), ("tcpExc-udpExc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunSktType.setStatus('mandatory')
qeDocTunDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 22), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunDestAddress.setStatus('mandatory')
qeDocTunDestSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 23), E164SUB()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunDestSubAddress.setStatus('mandatory')
qeDocTunLink0Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink0Eligible.setStatus('mandatory')
qeDocTunLink1Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink1Eligible.setStatus('mandatory')
qeDocTunLink2Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink2Eligible.setStatus('mandatory')
qeDocTunLink3Eligible = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunLink3Eligible.setStatus('mandatory')
qeDocTunValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunValidity.setStatus('mandatory')
qeDocTunRfc1483Encap = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocTunRfc1483Encap.setStatus('mandatory')
qeDocTunClp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeDocTunClp.setStatus('mandatory')
qeDocIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocIpAddress.setStatus('mandatory')
qeDocIpMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocIpMask.setStatus('mandatory')
qeDocIpBCast = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeDocIpBCast.setStatus('mandatory')
sdhCTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1), )
if mibBuilder.loadTexts: sdhCTable.setStatus('mandatory')
sdhCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1), ).setIndexNames((0, "DV2-MIB", "sdhCLinkNo"))
if mibBuilder.loadTexts: sdhCEntry.setStatus('mandatory')
sdhCLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhCLinkNo.setStatus('mandatory')
sdhCLinkEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLinkEnab.setStatus('mandatory')
sdhCLoopTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLoopTimer.setStatus('mandatory')
sdhCLoopDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLoopDiag.setStatus('mandatory')
sdhCLoopLine = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLoopLine.setStatus('mandatory')
sdhCScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCScrambler.setStatus('mandatory')
sdhC0x55 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhC0x55.setStatus('mandatory')
sdhSonetSdh = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhSonetSdh.setStatus('mandatory')
sdhClearCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhClearCounts.setStatus('mandatory')
sdhReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhReconfig.setStatus('mandatory')
sdhCLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCLpbkTimeout.setStatus('mandatory')
sdhStmSts = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oc-3", 1), ("oc-1", 2))).clone('oc-3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhStmSts.setStatus('mandatory')
sdhAPSOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhAPSOnOff.setStatus('mandatory')
sdhCIdleCell = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdhCIdleCell.setStatus('mandatory')
sdhSTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3), )
if mibBuilder.loadTexts: sdhSTable.setStatus('mandatory')
sdhSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1), ).setIndexNames((0, "DV2-MIB", "sdhSLinkNo"))
if mibBuilder.loadTexts: sdhSEntry.setStatus('mandatory')
sdhSLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLinkNo.setStatus('mandatory')
sdhSTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSTXclock.setStatus('mandatory')
sdhSRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSRXclock.setStatus('mandatory')
sdhSSectLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectLOS.setStatus('mandatory')
sdhSSectOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectOOF.setStatus('mandatory')
sdhSSectLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectLOF.setStatus('mandatory')
sdhSLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineAIS.setStatus('mandatory')
sdhSLineFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFERF.setStatus('mandatory')
sdhSPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathAIS.setStatus('mandatory')
sdhSPathYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathYellow.setStatus('mandatory')
sdhSPathFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFERF.setStatus('mandatory')
sdhSPathLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathLOP.setStatus('mandatory')
sdhSPathLabelMM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathLabelMM.setStatus('mandatory')
sdhSExBERDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSExBERDefect.setStatus('mandatory')
sdhSPathLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atm", 1), ("non-atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathLabel.setStatus('mandatory')
sdhSCellDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hunt-or-presync", 1), ("sync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSCellDelState.setStatus('mandatory')
sdhSAlarmLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLOS.setStatus('mandatory')
sdhSAlarmLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLOF.setStatus('mandatory')
sdhSAlarmLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLineAIS.setStatus('mandatory')
sdhSAlarmLineRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLineRFI.setStatus('mandatory')
sdhSAlarmPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmPathAIS.setStatus('mandatory')
sdhSAlarmPathRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmPathRFI.setStatus('mandatory')
sdhSAlarmLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmLOP.setStatus('mandatory')
sdhSAlarmPLM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSAlarmPLM.setStatus('mandatory')
sdhSExBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSExBERAlarm.setStatus('mandatory')
sdhSCorrHCS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSCorrHCS.setStatus('mandatory')
sdhSUnCorrHCS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSUnCorrHCS.setStatus('mandatory')
sdhS2Table = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4), )
if mibBuilder.loadTexts: sdhS2Table.setStatus('mandatory')
sdhS2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1), ).setIndexNames((0, "DV2-MIB", "sdhS2LinkNo"))
if mibBuilder.loadTexts: sdhS2Entry.setStatus('mandatory')
sdhS2LinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhS2LinkNo.setStatus('mandatory')
sdhSSectBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectBIP8.setStatus('mandatory')
sdhSSectES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectES.setStatus('mandatory')
sdhSSectSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSSectSES.setStatus('mandatory')
sdhSLineBIP24 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineBIP24.setStatus('mandatory')
sdhSLineES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineES.setStatus('mandatory')
sdhSLineSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineSES.setStatus('mandatory')
sdhSLineUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineUAS.setStatus('mandatory')
sdhSLineFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFC.setStatus('mandatory')
sdhSPathBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathBIP8.setStatus('mandatory')
sdhSPathES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathES.setStatus('mandatory')
sdhSPathSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathSES.setStatus('mandatory')
sdhSPathUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathUAS.setStatus('mandatory')
sdhSPathFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFC.setStatus('mandatory')
sdhSLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFEBE.setStatus('mandatory')
sdhSLineFarEndES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndES.setStatus('mandatory')
sdhSLineFarEndSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndSES.setStatus('mandatory')
sdhSLineFarEndUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndUAS.setStatus('mandatory')
sdhSLineFarEndFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSLineFarEndFC.setStatus('mandatory')
sdhSPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFEBE.setStatus('mandatory')
sdhSPathFarEndES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndES.setStatus('mandatory')
sdhSPathFarEndSES = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndSES.setStatus('mandatory')
sdhSPathFarEndUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndUAS.setStatus('mandatory')
sdhSPathFarEndFC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhSPathFarEndFC.setStatus('mandatory')
pvcResourceTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1), )
if mibBuilder.loadTexts: pvcResourceTable.setStatus('mandatory')
pvcResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1), ).setIndexNames((0, "DV2-MIB", "pvcSlot"), (0, "DV2-MIB", "pvcLink"))
if mibBuilder.loadTexts: pvcResourceEntry.setStatus('mandatory')
pvcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSlot.setStatus('mandatory')
pvcLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcLink.setStatus('mandatory')
pvcVciStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 3), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVciStart.setStatus('mandatory')
pvcVciEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 4), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVciEnd.setStatus('mandatory')
pvcVpiStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 5), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpiStart.setStatus('mandatory')
pvcVpiEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 6), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpiEnd.setStatus('mandatory')
pvcVpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 7), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpStart.setStatus('mandatory')
pvcVpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 8), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcVpEnd.setStatus('mandatory')
pvcBackwardCellRateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardCellRateTotal.setStatus('mandatory')
pvcLinkQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2), ("b-ici", 3), ("non-atm-link", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLinkQoS.setStatus('mandatory')
pvcMolnVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMolnVpi.setStatus('mandatory')
pvcMolnVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMolnVci.setStatus('mandatory')
pvcLowPriOverbookFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLowPriOverbookFactor.setStatus('mandatory')
pvcTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2), )
if mibBuilder.loadTexts: pvcTable.setStatus('mandatory')
pvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1), ).setIndexNames((0, "DV2-MIB", "pvcDSlot"), (0, "DV2-MIB", "pvcDLink"), (0, "DV2-MIB", "pvcDvci"), (0, "DV2-MIB", "pvcDvpi"), (0, "DV2-MIB", "pvcSSlot"), (0, "DV2-MIB", "pvcSLink"), (0, "DV2-MIB", "pvcSvci"), (0, "DV2-MIB", "pvcSvpi"))
if mibBuilder.loadTexts: pvcEntry.setStatus('mandatory')
pvcDSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDSlot.setStatus('mandatory')
pvcDLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDLink.setStatus('mandatory')
pvcDvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 3), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDvci.setStatus('mandatory')
pvcDvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 4), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDvpi.setStatus('mandatory')
pvcSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSSlot.setStatus('mandatory')
pvcSLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSLink.setStatus('mandatory')
pvcSvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 7), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSvci.setStatus('mandatory')
pvcSvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 8), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSvpi.setStatus('mandatory')
pvcForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardPeakCellRate.setStatus('mandatory')
pvcForwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardPeakSize.setStatus('mandatory')
pvcForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardPeakMode.setStatus('mandatory')
pvcBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardPeakCellRate.setStatus('mandatory')
pvcBackwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardPeakSize.setStatus('mandatory')
pvcBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardPeakMode.setStatus('mandatory')
pvcForwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardSustainedCellRate.setStatus('mandatory')
pvcForwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardSustainedSize.setStatus('mandatory')
pvcForwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcForwardSustainedMode.setStatus('mandatory')
pvcBackwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardSustainedCellRate.setStatus('mandatory')
pvcBackwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardSustainedSize.setStatus('mandatory')
pvcBackwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBackwardSustainedMode.setStatus('mandatory')
pvcAuxForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardPeakCellRate.setStatus('mandatory')
pvcAuxForwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardPeakSize.setStatus('mandatory')
pvcAuxForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardPeakMode.setStatus('mandatory')
pvcAuxBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardPeakCellRate.setStatus('mandatory')
pvcAuxBackwardPeakSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardPeakSize.setStatus('mandatory')
pvcAuxBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardPeakMode.setStatus('mandatory')
pvcAuxForwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardSustainedCellRate.setStatus('mandatory')
pvcAuxForwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardSustainedSize.setStatus('mandatory')
pvcAuxForwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxForwardSustainedMode.setStatus('mandatory')
pvcAuxBackwardSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardSustainedCellRate.setStatus('mandatory')
pvcAuxBackwardSustainedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardSustainedSize.setStatus('mandatory')
pvcAuxBackwardSustainedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-disc", 2), ("clp1-disc", 3), ("clp01-disc", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAuxBackwardSustainedMode.setStatus('mandatory')
pvcQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr", 1), ("vbr-high", 2), ("vbr-med", 3), ("vbr-low", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcQoSClass.setStatus('mandatory')
pvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("start-PVC", 3), ("notified", 4), ("running", 5), ("waiting", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcStatus.setStatus('mandatory')
pvcMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcMulticast.setStatus('mandatory')
pvcInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcInternalVpi.setStatus('mandatory')
pvcInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcInternalVci.setStatus('mandatory')
pvcNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcNumLeaves.setStatus('mandatory')
pvcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirect", 1), ("unidirect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDirection.setStatus('mandatory')
svcMaxPtPtConnections = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 750)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxPtPtConnections.setStatus('mandatory')
svcMaxPtMptConnections = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxPtMptConnections.setStatus('mandatory')
svcMaxPtMptParties = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxPtMptParties.setStatus('mandatory')
svcResourceTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6), )
if mibBuilder.loadTexts: svcResourceTable.setStatus('mandatory')
svcResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1), ).setIndexNames((0, "DV2-MIB", "svcSAP"))
if mibBuilder.loadTexts: svcResourceEntry.setStatus('mandatory')
svcSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSAP.setStatus('mandatory')
svcHiLo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("low", 2), ("high", 1))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcHiLo.setStatus('mandatory')
svcVciStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVciStart.setStatus('mandatory')
svcVciEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVciEnd.setStatus('mandatory')
svcVpiStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpiStart.setStatus('mandatory')
svcVpiEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpiEnd.setStatus('mandatory')
svcVpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpStart.setStatus('mandatory')
svcVpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpEnd.setStatus('mandatory')
svcBackwardCellRateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcBackwardCellRateTotal.setStatus('mandatory')
svcBackwardCellRateAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardCellRateAvailable.setStatus('mandatory')
svcSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSigVci.setStatus('mandatory')
svcSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSigVpi.setStatus('mandatory')
svcSAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("reconfigure", 2), ("reset", 3), ("on", 4), ("idle", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSAPStatus.setStatus('mandatory')
svcCDVTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 16), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcCDVTSize.setStatus('mandatory')
svcIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcIntType.setStatus('mandatory')
svcPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPolicing.setStatus('mandatory')
svcLowPriOverbookFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLowPriOverbookFactor.setStatus('mandatory')
svcMaxSapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 750)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMaxSapConn.setStatus('mandatory')
svcCurSapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCurSapConn.setStatus('mandatory')
svcLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLinkNo.setStatus('mandatory')
svcVpiMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVpiMapping.setStatus('mandatory')
svcQosRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQosRoute.setStatus('mandatory')
svcSwtch = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni30", 1), ("uni31", 2), ("iisp30", 3), ("iisp31", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSwtch.setStatus('mandatory')
svcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRestart.setStatus('mandatory')
svcE164Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 27), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcE164Addr.setStatus('mandatory')
svcAutoSapOff = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAutoSapOff.setStatus('mandatory')
svcTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7), )
if mibBuilder.loadTexts: svcTable.setStatus('mandatory')
svcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1), ).setIndexNames((0, "DV2-MIB", "svcId"))
if mibBuilder.loadTexts: svcEntry.setStatus('mandatory')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('mandatory')
svcDSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDSlot.setStatus('mandatory')
svcDLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDLink.setStatus('mandatory')
svcDvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 4), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDvci.setStatus('mandatory')
svcDvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 5), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDvpi.setStatus('mandatory')
svcDE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 6), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDE164.setStatus('mandatory')
svcDE164Sub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 7), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDE164Sub.setStatus('mandatory')
svcSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSSlot.setStatus('mandatory')
svcSLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSLink.setStatus('mandatory')
svcSvci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 10), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSvci.setStatus('mandatory')
svcSvpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 11), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSvpi.setStatus('mandatory')
svcSE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 12), E164()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSE164.setStatus('mandatory')
svcSE164Sub = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 13), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSE164Sub.setStatus('mandatory')
svcForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardPeakCellRate.setStatus('mandatory')
svcForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardPeakMode.setStatus('mandatory')
svcBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardPeakCellRate.setStatus('mandatory')
svcBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardPeakMode.setStatus('mandatory')
svcForwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardSustainableCellRate.setStatus('mandatory')
svcForwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardMaxBurstSize.setStatus('mandatory')
svcForwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcForwardSustainableMode.setStatus('mandatory')
svcBackwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardSustainableCellRate.setStatus('mandatory')
svcBackwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardMaxBurstSize.setStatus('mandatory')
svcBackwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6), ("clp01-tag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBackwardSustainableMode.setStatus('mandatory')
svcQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qos1", 1), ("qos2", 2), ("qos3", 3), ("qos4", 4), ("ubrBe", 5), ("abr", 6), ("cbr", 7), ("vbrRt", 8), ("vbrNrt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQoSClass.setStatus('mandatory')
svcBillTag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcBillTag.setStatus('mandatory')
svcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDuration.setStatus('mandatory')
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-to-point", 1), ("point-to-multipoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcType.setStatus('mandatory')
svcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("idle", 1), ("invalid", 2), ("reset", 3), ("active", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcStatus.setStatus('mandatory')
svcNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumLeaves.setStatus('mandatory')
svcInternalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInternalVpi.setStatus('mandatory')
svcInternalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInternalVci.setStatus('mandatory')
sPvcTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8), )
if mibBuilder.loadTexts: sPvcTable.setStatus('mandatory')
sPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1), ).setIndexNames((0, "DV2-MIB", "sPvcId"))
if mibBuilder.loadTexts: sPvcEntry.setStatus('mandatory')
sPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 750))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcId.setStatus('mandatory')
sPvcCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 2), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcCallId.setStatus('mandatory')
sPvcLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcLink.setStatus('mandatory')
sPvcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 4), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcAddress.setStatus('mandatory')
sPvcForwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardPeakCellRate.setStatus('mandatory')
sPvcForwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("off", 1), ("clp01-discard", 4))).clone('clp01-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardPeakMode.setStatus('mandatory')
sPvcBackwardPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardPeakCellRate.setStatus('mandatory')
sPvcBackwardPeakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("off", 1), ("clp01-discard", 4))).clone('clp01-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardPeakMode.setStatus('mandatory')
sPvcForwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardSustainableCellRate.setStatus('mandatory')
sPvcForwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardMaxBurstSize.setStatus('mandatory')
sPvcForwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6))).clone('clp0-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcForwardSustainableMode.setStatus('mandatory')
sPvcBackwardSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardSustainableCellRate.setStatus('mandatory')
sPvcBackwardMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardMaxBurstSize.setStatus('mandatory')
sPvcBackwardSustainableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("off", 1), ("clp0-discard", 2), ("clp01-discard", 4), ("clp0-tag", 6))).clone('clp0-discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcBackwardSustainableMode.setStatus('mandatory')
sPvcQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr-high", 2), ("vbr-med", 3), ("vbr-low", 4), ("best-effort", 5))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcQoSClass.setStatus('mandatory')
sPvcSourceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 16), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcSourceVci.setStatus('mandatory')
sPvcSourceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 17), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcSourceVpi.setStatus('mandatory')
sPvcTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 18), VirtualCircuitIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcTargetVci.setStatus('mandatory')
sPvcTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 19), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcTargetVpi.setStatus('mandatory')
sPvcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcRetry.setStatus('mandatory')
sPvcConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcConnectTime.setStatus('mandatory')
sPvcNumberRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcNumberRetries.setStatus('mandatory')
sPvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcFailures.setStatus('mandatory')
sPvcAlertFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-trap", 1), ("fail", 2), ("fail-or-clear", 3), ("fail-all-attempts", 4), ("call-success", 5), ("trap-all", 6), ("trap-state-change", 7))).clone('no-trap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcAlertFailures.setStatus('mandatory')
sPvcCauseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 25), Q93bCauseDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcCauseDiag.setStatus('mandatory')
sPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcType.setStatus('mandatory')
sPvcCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("call-setup", 2), ("reset", 3), ("invalid", 4))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcCallState.setStatus('mandatory')
sPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("sPVC-wait", 2), ("l4-wait", 3), ("active", 4))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcStatus.setStatus('mandatory')
sPvcCauseDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPvcCauseDiagCode.setStatus('mandatory')
sPvcMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pt-pt", 1), ("pt-mpt-root", 2), ("pt-mpt-leaf", 3), ("bidirect-root", 4))).clone('pt-pt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPvcMulticast.setStatus('mandatory')
svcQ93bStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9), )
if mibBuilder.loadTexts: svcQ93bStatTable.setStatus('mandatory')
svcQ93bStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1), ).setIndexNames((0, "DV2-MIB", "svcQ93bStatSAP"))
if mibBuilder.loadTexts: svcQ93bStatEntry.setStatus('mandatory')
svcQ93bStatSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatSAP.setStatus('mandatory')
svcQ93bStatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatActive.setStatus('mandatory')
svcQ93bStatAccumalative = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAccumalative.setStatus('mandatory')
svcQ93bStatCallProcTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatCallProcTx.setStatus('mandatory')
svcQ93bStatConnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnTx.setStatus('mandatory')
svcQ93bStatConnAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnAckTx.setStatus('mandatory')
svcQ93bStatSetupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatSetupTx.setStatus('mandatory')
svcQ93bStatRelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelTx.setStatus('mandatory')
svcQ93bStatRelCmpltTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelCmpltTx.setStatus('mandatory')
svcQ93bStatRstTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstTx.setStatus('mandatory')
svcQ93bStatRstAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstAckTx.setStatus('mandatory')
svcQ93bStatStatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatTx.setStatus('mandatory')
svcQ93bStatStatEnqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatEnqTx.setStatus('mandatory')
svcQ93bStatAddPtyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyTx.setStatus('mandatory')
svcQ93bStatAddPtyAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyAckTx.setStatus('mandatory')
svcQ93bStatAddPtyRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyRejTx.setStatus('mandatory')
svcQ93bStatDropPtyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyTx.setStatus('mandatory')
svcQ93bStatDropPtyAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyAckTx.setStatus('mandatory')
svcQ93bStatLstCauseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstCauseTx.setStatus('mandatory')
svcQ93bStatLstDiagTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstDiagTx.setStatus('mandatory')
svcQ93bStatCallProcRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatCallProcRx.setStatus('mandatory')
svcQ93bStatConnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnRx.setStatus('mandatory')
svcQ93bStatConnAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatConnAckRx.setStatus('mandatory')
svcQ93bStatSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatSetupRx.setStatus('mandatory')
svcQ93bStatRelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelRx.setStatus('mandatory')
svcQ93bStatRelCmpltRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRelCmpltRx.setStatus('mandatory')
svcQ93bStatRstRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstRx.setStatus('mandatory')
svcQ93bStatRstAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatRstAckRx.setStatus('mandatory')
svcQ93bStatStatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatRx.setStatus('mandatory')
svcQ93bStatStatEnqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatStatEnqRx.setStatus('mandatory')
svcQ93bStatAddPtyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyRx.setStatus('mandatory')
svcQ93bStatAddPtyAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyAckRx.setStatus('mandatory')
svcQ93bStatAddPtyRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatAddPtyRejRx.setStatus('mandatory')
svcQ93bStatDropPtyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyRx.setStatus('mandatory')
svcQ93bStatDropPtyAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDropPtyAckRx.setStatus('mandatory')
svcQ93bStatLstCauseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstCauseRx.setStatus('mandatory')
svcQ93bStatLstDiagRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatLstDiagRx.setStatus('mandatory')
svcQ93bStatClr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bStatClr.setStatus('mandatory')
svcQ93bStatDiagTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 39), Q93bCauseDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDiagTx.setStatus('mandatory')
svcQ93bStatDiagRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 40), Q93bCauseDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQ93bStatDiagRx.setStatus('mandatory')
svcQsaalStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10), )
if mibBuilder.loadTexts: svcQsaalStatTable.setStatus('mandatory')
svcQsaalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1), ).setIndexNames((0, "DV2-MIB", "svcQsaalStatSAP"))
if mibBuilder.loadTexts: svcQsaalStatEntry.setStatus('mandatory')
svcQsaalStatSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSAP.setStatus('mandatory')
svcQsaalStatOutSduDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatOutSduDisc.setStatus('mandatory')
svcQsaalStatInPduErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatInPduErr.setStatus('mandatory')
svcQsaalStatInPduDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatInPduDisc.setStatus('mandatory')
svcQsaalStatOutPduErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatOutPduErr.setStatus('mandatory')
svcQsaalStatOutPduDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatOutPduDisc.setStatus('mandatory')
svcQsaalStatBgnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgnTx.setStatus('mandatory')
svcQsaalStatBgakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgakTx.setStatus('mandatory')
svcQsaalStatBgrejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgrejTx.setStatus('mandatory')
svcQsaalStatEndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatEndTx.setStatus('mandatory')
svcQsaalStatRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsTx.setStatus('mandatory')
svcQsaalStatRsakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsakTx.setStatus('mandatory')
svcQsaalStatSdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdTx.setStatus('mandatory')
svcQsaalStatSdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdpTx.setStatus('mandatory')
svcQsaalStatPollTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatPollTx.setStatus('mandatory')
svcQsaalStatStatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatStatTx.setStatus('mandatory')
svcQsaalStatUstatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUstatTx.setStatus('mandatory')
svcQsaalStatUdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUdTx.setStatus('mandatory')
svcQsaalStatMdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatMdTx.setStatus('mandatory')
svcQsaalStatBgnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgnRx.setStatus('mandatory')
svcQsaalStatBgakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgakRx.setStatus('mandatory')
svcQsaalStatBgrejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatBgrejRx.setStatus('mandatory')
svcQsaalStatEndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatEndRx.setStatus('mandatory')
svcQsaalStatRsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsRx.setStatus('mandatory')
svcQsaalStatRsakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatRsakRx.setStatus('mandatory')
svcQsaalStatSdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdRx.setStatus('mandatory')
svcQsaalStatSdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatSdpRx.setStatus('mandatory')
svcQsaalStatPollRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatPollRx.setStatus('mandatory')
svcQsaalStatStatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatStatRx.setStatus('mandatory')
svcQsaalStatUstatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUstatRx.setStatus('mandatory')
svcQsaalStatUdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatUdRx.setStatus('mandatory')
svcQsaalStatMdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcQsaalStatMdRx.setStatus('mandatory')
svcQsaalStatClr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalStatClr.setStatus('mandatory')
svcQsaalTmrPoll = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 11), Integer32().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrPoll.setStatus('mandatory')
svcQsaalTmrKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 12), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrKeepAlive.setStatus('mandatory')
svcQsaalTmrNoResponse = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 13), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrNoResponse.setStatus('mandatory')
svcQsaalTmrCC = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 14), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalTmrCC.setStatus('mandatory')
svcQsaalMaxPD = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 15), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQsaalMaxPD.setStatus('mandatory')
svcQ93bTmrT303 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 16), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT303.setStatus('mandatory')
svcQ93bTmrT310 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 17), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT310.setStatus('mandatory')
svcQ93bTmrT308 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 18), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT308.setStatus('mandatory')
svcQ93bTmrT309 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 19), Integer32().clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT309.setStatus('mandatory')
maxOutstanding = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxOutstanding.setStatus('mandatory')
svcLoadRoute = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("none", 2), ("rte-table", 3), ("dtl-bin", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLoadRoute.setStatus('mandatory')
svcHalfConTimer = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcHalfConTimer.setStatus('mandatory')
svcHalfConCnt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcHalfConCnt.setStatus('mandatory')
svcQ93bTmrT398 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 24), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT398.setStatus('mandatory')
svcQ93bTmrT399 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 25), Integer32().clone(140)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcQ93bTmrT399.setStatus('mandatory')
svcRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 180)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRetryPeriod.setStatus('mandatory')
svcCellRateTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27), )
if mibBuilder.loadTexts: svcCellRateTable.setStatus('mandatory')
svcCellRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1), ).setIndexNames((0, "DV2-MIB", "svcCRLinkNo"))
if mibBuilder.loadTexts: svcCellRateEntry.setStatus('mandatory')
svcCRLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCRLinkNo.setStatus('mandatory')
svcPCRCLP01Max = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPCRCLP01Max.setStatus('mandatory')
svcSCRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSCRMax.setStatus('mandatory')
svcMBSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcMBSMax.setStatus('mandatory')
svcTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28), )
if mibBuilder.loadTexts: svcTrafficTable.setStatus('mandatory')
svcTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1), ).setIndexNames((0, "DV2-MIB", "svcTLinkNo"))
if mibBuilder.loadTexts: svcTrafficEntry.setStatus('mandatory')
svcTLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTLinkNo.setStatus('mandatory')
svcCBRallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcCBRallowed.setStatus('mandatory')
svcVBRHallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRHallowed.setStatus('mandatory')
svcVBRMallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRMallowed.setStatus('mandatory')
svcVBRLUBRallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRLUBRallowed.setStatus('mandatory')
svcVBRLUBRsubtractpercent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVBRLUBRsubtractpercent.setStatus('mandatory')
ceTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1), )
if mibBuilder.loadTexts: ceTable.setStatus('mandatory')
ceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1), ).setIndexNames((0, "DV2-MIB", "ceLinkNo"))
if mibBuilder.loadTexts: ceEntry.setStatus('mandatory')
ceLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceLinkNo.setStatus('mandatory')
ceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("restart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceEnable.setStatus('mandatory')
ceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adaptive", 2), ("srts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceMode.setStatus('mandatory')
cePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePriority.setStatus('mandatory')
cePvcValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePvcValid.setStatus('mandatory')
ceDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstSlot.setStatus('mandatory')
ceDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("multicast", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstLink.setStatus('mandatory')
ceDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 8), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstVpi.setStatus('mandatory')
ceDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 9), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDstVci.setStatus('mandatory')
ceCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceCDV.setStatus('mandatory')
ceCDVMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceCDVMax.setStatus('mandatory')
ceMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceMulticast.setStatus('mandatory')
ceXhInt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inactive", 1), ("point-to-point", 2), ("uni-root", 3), ("bi-root", 4), ("uni-rt-and-leaf", 5), ("uni-leaf", 6), ("bi-leaf", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceXhInt.setStatus('mandatory')
ceStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2), )
if mibBuilder.loadTexts: ceStatTable.setStatus('mandatory')
ceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1), ).setIndexNames((0, "DV2-MIB", "ceStatPortNo"))
if mibBuilder.loadTexts: ceStatEntry.setStatus('mandatory')
ceStatPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStatPortNo.setStatus('mandatory')
ceStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceStatReset.setStatus('mandatory')
ceStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("fifostart", 3), ("wideband", 4), ("fifokick", 5), ("narrowband", 6), ("operating", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStatTxState.setStatus('mandatory')
ceStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("ais", 2), ("operating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStatRxState.setStatus('mandatory')
ceTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTxCnt.setStatus('mandatory')
ceRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRxCnt.setStatus('mandatory')
ceOflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceOflCnt.setStatus('mandatory')
ceUflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceUflCnt.setStatus('mandatory')
ceDisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceDisCnt.setStatus('mandatory')
ceInvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceInvCnt.setStatus('mandatory')
ceResCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceResCnt.setStatus('mandatory')
ceFifoLvlCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceFifoLvlCnt.setStatus('mandatory')
cePriVal = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePriVal.setStatus('mandatory')
ceSecVal = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSecVal.setStatus('mandatory')
ceClkSel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceClkSel.setStatus('mandatory')
ceClkInp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceClkInp.setStatus('mandatory')
ceStr3 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceStr3.setStatus('mandatory')
veTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1), )
if mibBuilder.loadTexts: veTable.setStatus('mandatory')
veEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1), ).setIndexNames((0, "DV2-MIB", "veLinkNo"))
if mibBuilder.loadTexts: veEntry.setStatus('mandatory')
veLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veLinkNo.setStatus('mandatory')
veEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("restart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veEnable.setStatus('mandatory')
veMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("video", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veMode.setStatus('mandatory')
vePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vePriority.setStatus('mandatory')
vePvcValid = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vePvcValid.setStatus('mandatory')
veDstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstSlot.setStatus('mandatory')
veDstLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("link0", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("multicast", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstLink.setStatus('mandatory')
veDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 8), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstVpi.setStatus('mandatory')
veDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 9), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDstVci.setStatus('mandatory')
veCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veCDV.setStatus('mandatory')
veCDVMax = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62)).clone(62)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veCDVMax.setStatus('mandatory')
veMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veMulticast.setStatus('mandatory')
veXhInt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inactive", 1), ("point-to-point", 2), ("uni-root", 3), ("bi-root", 4), ("uni-rt-and-leaf", 5), ("uni-leaf", 6), ("bi-leaf", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veXhInt.setStatus('mandatory')
veStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2), )
if mibBuilder.loadTexts: veStatTable.setStatus('mandatory')
veStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1), ).setIndexNames((0, "DV2-MIB", "veStatPortNo"))
if mibBuilder.loadTexts: veStatEntry.setStatus('mandatory')
veStatPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veStatPortNo.setStatus('mandatory')
veStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: veStatReset.setStatus('mandatory')
veStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("fifostart", 3), ("wideband", 4), ("fifokick", 5), ("narrowband", 6), ("operating", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veStatTxState.setStatus('mandatory')
veStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("ais", 2), ("operating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: veStatRxState.setStatus('mandatory')
veTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veTxCnt.setStatus('mandatory')
veRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veRxCnt.setStatus('mandatory')
veOflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veOflCnt.setStatus('mandatory')
veUflCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veUflCnt.setStatus('mandatory')
veDisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veDisCnt.setStatus('mandatory')
veInvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veInvCnt.setStatus('mandatory')
veResCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veResCnt.setStatus('mandatory')
veFifoLvlCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: veFifoLvlCnt.setStatus('mandatory')
jpegSlipIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipIp.setStatus('mandatory')
jpegSlipMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipMask.setStatus('mandatory')
jpegSlipRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipRemoteIp.setStatus('mandatory')
jpegSlipSpeed = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5))).clone('baud38400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSlipSpeed.setStatus('mandatory')
limSysState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("start", 3), ("working", 4), ("terminate", 5), ("fault", 6))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysState.setStatus('mandatory')
limSysFault = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysFault.setStatus('mandatory')
limSysCompErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysCompErr.setStatus('mandatory')
limSysDecompErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysDecompErr.setStatus('mandatory')
limSysVideoIn = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysVideoIn.setStatus('mandatory')
limSysVideoOut = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSysVideoOut.setStatus('mandatory')
limSysStartMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("force-init", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limSysStartMode.setStatus('mandatory')
sendFileSel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vjlim-cod", 2), ("vjlca-cod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendFileSel.setStatus('mandatory')
jpegCurrentFile = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vjlim-cod", 2), ("vjlca-cod", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jpegCurrentFile.setStatus('mandatory')
sendFileStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sendFileStat.setStatus('mandatory')
sendFileBytes = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sendFileBytes.setStatus('mandatory')
jpegReset = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegReset.setStatus('mandatory')
jpegSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegSaveCfg.setStatus('mandatory')
jpegLoadCfg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jpegLoadCfg.setStatus('mandatory')
jpegSWRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jpegSWRev.setStatus('mandatory')
vidInJpeg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2))).clone('start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInJpeg.setStatus('mandatory')
vidInRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mbps25", 1), ("mbps20", 2), ("mbps15", 3), ("mbps10", 4), ("mbps5", 5))).clone('mbps20')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInRate.setStatus('mandatory')
vidInProvMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInProvMode.setStatus('mandatory')
vidInFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("full", 1))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInFrameRate.setStatus('mandatory')
vidInWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-screen", 1), ("constrained", 2))).clone('full-screen')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInWindowSize.setStatus('mandatory')
vidInQuanFactor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInQuanFactor.setStatus('mandatory')
vidInTransMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("capped-vbr", 2))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInTransMode.setStatus('mandatory')
vidInStand = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2))).clone('ntsc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInStand.setStatus('mandatory')
vidInVcrMode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInVcrMode.setStatus('mandatory')
vidInAnLpbk = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInAnLpbk.setStatus('mandatory')
vidInTest = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidInTest.setStatus('mandatory')
vidInState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("start", 3), ("working", 4), ("terminate", 5), ("fault", 6))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInState.setStatus('mandatory')
vidInPres = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInPres.setStatus('mandatory')
vidInCurQFactor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCurQFactor.setStatus('mandatory')
vidInCurFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCurFrameRate.setStatus('mandatory')
vidInAvgBitRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInAvgBitRate.setStatus('mandatory')
vidInPeakBitRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInPeakBitRate.setStatus('mandatory')
vidInSubSample = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInSubSample.setStatus('mandatory')
vidInCompCnt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCompCnt.setStatus('mandatory')
vidInSkipCnt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInSkipCnt.setStatus('mandatory')
vidInBuffOvf = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInBuffOvf.setStatus('mandatory')
vidInImageErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInImageErr.setStatus('mandatory')
vidInFldSynErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInFldSynErr.setStatus('mandatory')
vidInCompErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInCompErr.setStatus('mandatory')
vidInBufLevel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInBufLevel.setStatus('mandatory')
vidInFailReason = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ccube", 2), ("timeout", 3), ("channel", 4), ("xilinx", 5), ("badparms", 6), ("algorithm", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInFailReason.setStatus('mandatory')
vidOutJpeg = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2))).clone('start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutJpeg.setStatus('mandatory')
vidOutStand = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2), ("auto-sel", 3))).clone('ntsc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutStand.setStatus('mandatory')
vidOutSource = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("genlock", 1), ("through", 2), ("free", 3))).clone('through')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutSource.setStatus('mandatory')
vidOutUnLpb = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutUnLpb.setStatus('mandatory')
vidOutIdleSrc = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("black", 1), ("color", 2))).clone('black')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutIdleSrc.setStatus('mandatory')
vidOutChnlLpbk = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidOutChnlLpbk.setStatus('mandatory')
vidOutState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("start", 3), ("working", 4), ("terminate", 5), ("fault", 6))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutState.setStatus('mandatory')
vidOutRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutRate.setStatus('mandatory')
vidOutFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutFrameRate.setStatus('mandatory')
vidOutWindowWidth = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutWindowWidth.setStatus('mandatory')
vidOutWindowHeight = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutWindowHeight.setStatus('mandatory')
vidOutChnlLock = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutChnlLock.setStatus('mandatory')
vidOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutPackets.setStatus('mandatory')
vidOutPlayed = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutPlayed.setStatus('mandatory')
vidOutSkipped = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutSkipped.setStatus('mandatory')
vidOutChnlErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutChnlErr.setStatus('mandatory')
vidOutBuffOvf = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutBuffOvf.setStatus('mandatory')
vidOutImageErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutImageErr.setStatus('mandatory')
vidOutSeqnoErr = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutSeqnoErr.setStatus('mandatory')
vidOutCurrQFactor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutCurrQFactor.setStatus('mandatory')
vidOutStdStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutStdStat.setStatus('mandatory')
vidOutBuffLevel = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutBuffLevel.setStatus('mandatory')
vidOutPktsInBuff = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutPktsInBuff.setStatus('mandatory')
vidOutFailReason = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ccube", 2), ("timeout", 3), ("channel", 4), ("xilinx", 5), ("badparms", 6), ("algorithm", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutFailReason.setStatus('mandatory')
vidOutSrcSts = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("genlock", 1), ("through", 2), ("free", 3))).clone('genlock')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidOutSrcSts.setStatus('mandatory')
audInLoopBack = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audInLoopBack.setStatus('mandatory')
audOutMute = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutMute.setStatus('mandatory')
audOutDigLpbk = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutDigLpbk.setStatus('mandatory')
audOutLock = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: audOutLock.setStatus('mandatory')
audOutMuteStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audOutMuteStat.setStatus('mandatory')
dataIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataIp.setStatus('mandatory')
dataMask = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataMask.setStatus('mandatory')
dataRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataRemoteIp.setStatus('mandatory')
limHostRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limHostRev.setStatus('mandatory')
limBootRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limBootRev.setStatus('mandatory')
limHwRev = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limHwRev.setStatus('mandatory')
limAction = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("reset", 2), ("test", 3), ("mtce", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limAction.setStatus('mandatory')
limState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("init", 1), ("testing", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7), ("mtce", 8), ("loading", 9), ("await-framing", 10))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limState.setStatus('mandatory')
limFault = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limFault.setStatus('mandatory')
limFaultReason = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("bad-rev", 2), ("hw-fault", 3), ("memory", 4), ("fileio", 5), ("codec-section", 6), ("sw-error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limFaultReason.setStatus('mandatory')
limCodec0 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limCodec0.setStatus('mandatory')
limCodec1 = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limCodec1.setStatus('mandatory')
limSCmgmt = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCmgmt.setStatus('mandatory')
limSCmgmtData = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCmgmtData.setStatus('mandatory')
limSCfileXferReq = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vh320-cod", 2), ("vhdev-cod", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limSCfileXferReq.setStatus('mandatory')
limSCfileXferStat = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("continue", 3), ("end", 4), ("ack", 5), ("aborted", 6), ("error", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCfileXferStat.setStatus('mandatory')
limSCbytes = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limSCbytes.setStatus('mandatory')
ctrlTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1), )
if mibBuilder.loadTexts: ctrlTable.setStatus('mandatory')
ctrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1), ).setIndexNames((0, "DV2-MIB", "ctrlIndex"))
if mibBuilder.loadTexts: ctrlEntry.setStatus('mandatory')
ctrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlIndex.setStatus('mandatory')
ctrlCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("h320", 1))).clone('h320')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlCodecType.setStatus('mandatory')
ctrlCodecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("reset", 2), ("test", 3), ("mtce", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlCodecAction.setStatus('mandatory')
ctrlCodecReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connect", 1), ("disconnect", 2))).clone('connect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlCodecReq.setStatus('mandatory')
ctrlCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("h0", 1))).clone('h0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlCallType.setStatus('mandatory')
ctrlCodecSta = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("init", 1), ("testing", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7), ("mtce", 8), ("loading", 9), ("await-framing", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlCodecSta.setStatus('mandatory')
ctrlChnlLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("to-other", 2), ("to-self", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlChnlLpbk.setStatus('mandatory')
ctrlFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlFraming.setStatus('mandatory')
ctrlChnlStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("idle", 2), ("up", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlChnlStat.setStatus('mandatory')
ctrlFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("host", 2), ("video", 3), ("audio", 4), ("data", 5), ("fileio", 6), ("mem", 7), ("h221", 8), ("h242", 9), ("tdm", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlFaultReason.setStatus('mandatory')
vidTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2), )
if mibBuilder.loadTexts: vidTable.setStatus('mandatory')
vidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1), ).setIndexNames((0, "DV2-MIB", "vidIndex"))
if mibBuilder.loadTexts: vidEntry.setStatus('mandatory')
vidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidIndex.setStatus('mandatory')
vidStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2))).clone('ntsc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidStandard.setStatus('mandatory')
vidTxVidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("freeze", 2), ("mute", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidTxVidReq.setStatus('mandatory')
vidRxVidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("freeze", 2), ("mute", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidRxVidReq.setStatus('mandatory')
vidViewPip = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidViewPip.setStatus('mandatory')
vidCompQual = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("best-picture", 1), ("best-motion", 2))).clone('best-picture')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidCompQual.setStatus('mandatory')
vidDigLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vidDigLpbk.setStatus('mandatory')
vidEncFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidEncFrameCount.setStatus('mandatory')
vidDecFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidDecFrameCount.setStatus('mandatory')
vidState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("diag", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidState.setStatus('mandatory')
vidInPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidInPresent.setStatus('mandatory')
vidEncBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vidEncBitRate.setStatus('mandatory')
audTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3), )
if mibBuilder.loadTexts: audTable.setStatus('mandatory')
audEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1), ).setIndexNames((0, "DV2-MIB", "audIndex"))
if mibBuilder.loadTexts: audEntry.setStatus('mandatory')
audIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audIndex.setStatus('mandatory')
audState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("init", 1), ("testing", 2), ("idle", 3), ("start", 4), ("working", 5), ("terminate", 6), ("fault", 7), ("mtce", 8), ("loading", 9), ("await-framing", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audState.setStatus('mandatory')
audPrefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("u-law", 1), ("a-law", 2), ("g722", 3), ("g728", 4))).clone('g722')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audPrefMode.setStatus('mandatory')
audCommMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("u-law", 1), ("a-law", 2), ("g722", 3), ("g728", 4))).clone('g722')).setMaxAccess("readonly")
if mibBuilder.loadTexts: audCommMode.setStatus('mandatory')
audBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audBitRate.setStatus('mandatory')
audMuteInReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audMuteInReq.setStatus('mandatory')
audMuteOutReq = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audMuteOutReq.setStatus('mandatory')
audMuteOutStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: audMuteOutStat.setStatus('mandatory')
audLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("analog-in", 2), ("digital-in", 3), ("compress-in", 4), ("analog-out", 5), ("digital-out", 6), ("compress-out", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audLpbk.setStatus('mandatory')
audInVol = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audInVol.setStatus('mandatory')
audOutVol = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutVol.setStatus('mandatory')
audInDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audInDelay.setStatus('mandatory')
audOutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: audOutDelay.setStatus('mandatory')
audFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("mem", 2), ("self-test", 3), ("download", 4), ("loopback", 5), ("dsp", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: audFaultReason.setStatus('mandatory')
dataTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4), )
if mibBuilder.loadTexts: dataTable.setStatus('mandatory')
dataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1), ).setIndexNames((0, "DV2-MIB", "dataIndex"))
if mibBuilder.loadTexts: dataEntry.setStatus('mandatory')
dataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIndex.setStatus('mandatory')
dataChnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lsd", 1), ("hsd", 2), ("mlp", 3), ("hmlp", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataChnlType.setStatus('mandatory')
dataPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud-2400", 1), ("baud-9600", 2), ("baud-19200", 3), ("baud-38400", 4))).clone('baud-38400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortSpeed.setStatus('mandatory')
dataPortProt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("async", 1), ("hdlc", 2))).clone('async')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortProt.setStatus('mandatory')
dataHDLCcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataHDLCcheck.setStatus('mandatory')
dataChnlStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataChnlStat.setStatus('mandatory')
dataBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBytesRcvd.setStatus('mandatory')
dataBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataBytesSent.setStatus('mandatory')
dataResetStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataResetStat.setStatus('mandatory')
mgmtTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1), )
if mibBuilder.loadTexts: mgmtTable.setStatus('mandatory')
mgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1), ).setIndexNames((0, "DV2-MIB", "mgmtIndex"))
if mibBuilder.loadTexts: mgmtEntry.setStatus('mandatory')
mgmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtIndex.setStatus('mandatory')
mgmtDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtDescr.setStatus('mandatory')
mgmtPortProt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("async", 1), ("slip", 2))).clone('async')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortProt.setStatus('mandatory')
mgmtPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial-200", 1), ("baud-2400", 2), ("baud-9600", 3), ("baud-19200", 4), ("baud-38400", 5))).clone('baud-38400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortSpeed.setStatus('mandatory')
mgmtPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortAddress.setStatus('mandatory')
mgmtAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtAddressMask.setStatus('mandatory')
mgmtRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtRemoteAddress.setStatus('mandatory')
mgmtPortStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortStat.setStatus('mandatory')
mgmtBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtBytesRcvd.setStatus('mandatory')
mgmtBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtBytesSent.setStatus('mandatory')
mgmtResetStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtResetStat.setStatus('mandatory')
oamTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1), )
if mibBuilder.loadTexts: oamTable.setStatus('mandatory')
oamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1), ).setIndexNames((0, "DV2-MIB", "oamLinkNo"))
if mibBuilder.loadTexts: oamEntry.setStatus('mandatory')
oamLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLinkNo.setStatus('mandatory')
oamSegEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamSegEndPoint.setStatus('mandatory')
oamVcEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcEndPoint.setStatus('mandatory')
oamAisRdiGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamAisRdiGeneration.setStatus('mandatory')
oamLastRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10))).clone(namedValues=NamedValues(("ais", 1), ("rdi", 2), ("loopback", 3), ("continuity-check", 4), ("performance-monitoring", 5), ("unsupported", 6), ("none", 10))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastRxType.setStatus('mandatory')
oamLastRxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 6), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastRxVpi.setStatus('mandatory')
oamLastRxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 7), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastRxVci.setStatus('mandatory')
oamRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamRxCount.setStatus('mandatory')
oamLastTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10))).clone(namedValues=NamedValues(("ais", 1), ("rdi", 2), ("loopback", 3), ("continuity-check", 4), ("performance-monitoring", 5), ("unsupported", 6), ("none", 10))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastTxType.setStatus('mandatory')
oamLastTxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 10), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastTxVpi.setStatus('mandatory')
oamLastTxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 11), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLastTxVci.setStatus('mandatory')
oamTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTxCount.setStatus('mandatory')
oamClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamClearStats.setStatus('mandatory')
oamLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2), )
if mibBuilder.loadTexts: oamLoopbackTable.setStatus('mandatory')
oamLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1), ).setIndexNames((0, "DV2-MIB", "oamLoopbackLinkNo"))
if mibBuilder.loadTexts: oamLoopbackEntry.setStatus('mandatory')
oamLoopbackLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackLinkNo.setStatus('mandatory')
oamLoopbackVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 2), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackVpi.setStatus('mandatory')
oamLoopbackVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 3), VirtualCircuitIdentifier().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackVci.setStatus('mandatory')
oamLoopbackSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("segment", 4), ("end-to-end", 5), ("location-id", 6))).clone('segment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackSpan.setStatus('mandatory')
oamLoopbackMaxNumCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackMaxNumCells.setStatus('mandatory')
oamLoopbackNumCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackNumCellsSent.setStatus('mandatory')
oamLoopbackTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackTimeOut.setStatus('mandatory')
oamLoopbackActive = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start-test", 1), ("complete", 2), ("idle", 3), ("under-test", 4))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackActive.setStatus('mandatory')
oamLoopbackResult = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("physical-loopback-detected", 3), ("unknown", 4), ("vpi-range-error", 5), ("vp-is-invalid", 6), ("vci-range-error", 7), ("vci-and-span-mismatch", 8), ("vpc-not-established", 9), ("vcc-not-established", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackResult.setStatus('mandatory')
oamLoopbackLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackLocId.setStatus('mandatory')
oamDisable = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamDisable.setStatus('mandatory')
oamVcaTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4), )
if mibBuilder.loadTexts: oamVcaTable.setStatus('mandatory')
oamVcaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1), ).setIndexNames((0, "DV2-MIB", "oamVcaVpi"), (0, "DV2-MIB", "oamVcaVci"))
if mibBuilder.loadTexts: oamVcaEntry.setStatus('mandatory')
oamVcaVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 1), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaVpi.setStatus('mandatory')
oamVcaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 2), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaVci.setStatus('mandatory')
oamVcaConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connection-point", 1), ("segment-endpoint", 2), ("end-to-end-endpoint", 3), ("pass-thru", 4))).clone('connection-point')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaConnectionType.setStatus('mandatory')
oamVcaVpcEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaVpcEndPoint.setStatus('mandatory')
oamVcaAisRdiGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaAisRdiGeneration.setStatus('mandatory')
oamVcaAisRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ais", 2), ("rdi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaAisRdiState.setStatus('mandatory')
oamVcaDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("link-down", 2), ("loss-of-continuity", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectType.setStatus('mandatory')
oamVcaDefectNode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectNode.setStatus('mandatory')
oamVcaDefectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectSlot.setStatus('mandatory')
oamVcaDefectLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaDefectLink.setStatus('mandatory')
oamVcaTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaTrapEnable.setStatus('mandatory')
oamVcaCC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-bidir-seg-cell", 6), ("act-bidir-ee-cell", 7), ("act-source-seg-manual", 8), ("act-source-ee-manual", 9), ("act-sink-seg-manual", 10), ("act-sink-ee-manual", 11), ("act-bidir-seg-manual", 12), ("act-bidir-ee-manual", 13))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaCC.setStatus('mandatory')
oamVcaCCState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaCCState.setStatus('mandatory')
oamVcaPM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-source-seg-manual", 6), ("act-source-ee-manual", 7), ("act-sink-seg-manual", 8), ("act-sink-ee-manual", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaPM.setStatus('mandatory')
oamVcaPMBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size128", 1), ("size256", 2), ("size512", 3), ("size1024", 4))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcaPMBlockSize.setStatus('mandatory')
oamVcaPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaPMState.setStatus('mandatory')
oamVcaBkwRptLosCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptLosCells.setStatus('mandatory')
oamVcaBkwRptMisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptMisCells.setStatus('mandatory')
oamVcaBkwRptBip16 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptBip16.setStatus('mandatory')
oamVcaBkwRptSevErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcaBkwRptSevErr.setStatus('mandatory')
oamVcbTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5), )
if mibBuilder.loadTexts: oamVcbTable.setStatus('mandatory')
oamVcbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1), ).setIndexNames((0, "DV2-MIB", "oamVcbVpi"), (0, "DV2-MIB", "oamVcbVci"))
if mibBuilder.loadTexts: oamVcbEntry.setStatus('mandatory')
oamVcbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 1), VirtualPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbVpi.setStatus('mandatory')
oamVcbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 2), VirtualCircuitIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbVci.setStatus('mandatory')
oamVcbConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connection-point", 1), ("segment-endpoint", 2), ("end-to-end-endpoint", 3), ("pass-thru", 4))).clone('connection-point')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbConnectionType.setStatus('mandatory')
oamVcbVpcEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbVpcEndPoint.setStatus('mandatory')
oamVcbAisRdiGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbAisRdiGeneration.setStatus('mandatory')
oamVcbAisRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ais", 2), ("rdi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbAisRdiState.setStatus('mandatory')
oamVcbDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("link-down", 2), ("loss-of-continuity", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectType.setStatus('mandatory')
oamVcbDefectNode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectNode.setStatus('mandatory')
oamVcbDefectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectSlot.setStatus('mandatory')
oamVcbDefectLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbDefectLink.setStatus('mandatory')
oamVcbTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbTrapEnable.setStatus('mandatory')
oamVcbCC = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-bidir-seg-cell", 6), ("act-bidir-ee-cell", 7), ("act-source-seg-manual", 8), ("act-source-ee-manual", 9), ("act-sink-seg-manual", 10), ("act-sink-ee-manual", 11), ("act-bidir-seg-manual", 12), ("act-bidir-ee-manual", 13))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbCC.setStatus('mandatory')
oamVcbCCState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbCCState.setStatus('mandatory')
oamVcbPM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("act-source-seg-cell", 2), ("act-source-ee-cell", 3), ("act-sink-seg-cell", 4), ("act-sink-ee-cell", 5), ("act-source-seg-manual", 6), ("act-source-ee-manual", 7), ("act-sink-seg-manual", 8), ("act-sink-ee-manual", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbPM.setStatus('mandatory')
oamVcbPMBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size128", 1), ("size256", 2), ("size512", 3), ("size1024", 4))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamVcbPMBlockSize.setStatus('mandatory')
oamVcbPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-supported", 1), ("ready", 2), ("wait-act-con", 3), ("wait-act-res", 4), ("wait-deact-con", 5), ("active-cell", 6), ("active-manual", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbPMState.setStatus('mandatory')
oamVcbBkwRptLosCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptLosCells.setStatus('mandatory')
oamVcbBkwRptMisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptMisCells.setStatus('mandatory')
oamVcbBkwRptBip16 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptBip16.setStatus('mandatory')
oamVcbBkwRptSevErr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamVcbBkwRptSevErr.setStatus('mandatory')
lmiTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1), )
if mibBuilder.loadTexts: lmiTable.setStatus('mandatory')
lmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1), ).setIndexNames((0, "DV2-MIB", "lmiLinkNo"))
if mibBuilder.loadTexts: lmiEntry.setStatus('mandatory')
lmiLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiLinkNo.setStatus('mandatory')
lmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 2), VirtualPathIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiVpi.setStatus('mandatory')
lmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 3), VirtualCircuitIdentifier().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiVci.setStatus('mandatory')
lmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network-side", 1), ("user-side", 2))).clone('network-side')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiType.setStatus('mandatory')
lmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialized", 1), ("connecting", 2), ("registered", 3), ("registering", 4), ("deregistering", 5), ("polling", 6), ("disconnecting", 7))).clone('initialized')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiState.setStatus('mandatory')
lmiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nsap-e-164", 1), ("nsap-dcc", 2), ("nsap-icd", 3), ("non-nsap-e-164", 4))).clone('nsap-icd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiFormat.setStatus('mandatory')
lmiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 7), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiPrefix.setStatus('mandatory')
lmiOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("re-register", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiOnOff.setStatus('mandatory')
lmiPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiPollPeriod.setStatus('mandatory')
lmiNoRspDown = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiNoRspDown.setStatus('mandatory')
lmiLinkMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiLinkMgmt.setStatus('mandatory')
lmiConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiConnectivity.setStatus('mandatory')
lmiPrefixMod = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 13), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiPrefixMod.setStatus('mandatory')
lmiEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 14), E164()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiEsi.setStatus('mandatory')
lmiNetSideTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2), )
if mibBuilder.loadTexts: lmiNetSideTable.setStatus('mandatory')
lmiNetSideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1), ).setIndexNames((0, "DV2-MIB", "lmiNetSideLinkNo"), (0, "DV2-MIB", "lmiNetSidePrefixId"))
if mibBuilder.loadTexts: lmiNetSideEntry.setStatus('mandatory')
lmiNetSideLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSideLinkNo.setStatus('mandatory')
lmiNetSidePrefixId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSidePrefixId.setStatus('mandatory')
lmiNetSidePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 3), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSidePrefix.setStatus('mandatory')
lmiNetSidePrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("start-registration", 1), ("start-deregistration", 2), ("valid", 3), ("invalid", 4), ("registered", 5), ("deregistered", 6), ("time-out-failure", 7), ("unknown", 8), ("not-allowed", 9), ("rejected", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiNetSidePrefixStatus.setStatus('mandatory')
lmiUserSideTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3), )
if mibBuilder.loadTexts: lmiUserSideTable.setStatus('mandatory')
lmiUserSideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1), ).setIndexNames((0, "DV2-MIB", "lmiUserSideLinkNo"), (0, "DV2-MIB", "lmiUserSideAddressId"))
if mibBuilder.loadTexts: lmiUserSideEntry.setStatus('mandatory')
lmiUserSideLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideLinkNo.setStatus('mandatory')
lmiUserSideAddressId = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideAddressId.setStatus('mandatory')
lmiUserSideAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 3), E164SUB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideAddress.setStatus('mandatory')
lmiUserSideAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("start-registration", 1), ("start-deregistration", 2), ("valid", 3), ("invalid", 4), ("registered", 5), ("deregistered", 6), ("time-out-failure", 7), ("unknown", 8), ("not-allowed", 9), ("rejected", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiUserSideAddressStatus.setStatus('mandatory')
alarmNodeCrit = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNodeCrit.setStatus('mandatory')
alarmNodeMajor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNodeMajor.setStatus('mandatory')
alarmNodeMinor = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNodeMinor.setStatus('mandatory')
alarmStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4), )
if mibBuilder.loadTexts: alarmStatTable.setStatus('mandatory')
alarmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1), ).setIndexNames((0, "DV2-MIB", "alrStatSlotNo"))
if mibBuilder.loadTexts: alarmStatEntry.setStatus('mandatory')
alrStatSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrStatSlotNo.setStatus('mandatory')
slotCritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCritStatus.setStatus('mandatory')
slotMajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMajorStatus.setStatus('mandatory')
slotMinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMinorStatus.setStatus('mandatory')
link0CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link0CritStatus.setStatus('mandatory')
link0MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link0MajorStatus.setStatus('mandatory')
link0MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link0MinorStatus.setStatus('mandatory')
link1CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link1CritStatus.setStatus('mandatory')
link1MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link1MajorStatus.setStatus('mandatory')
link1MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link1MinorStatus.setStatus('mandatory')
link2CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2CritStatus.setStatus('mandatory')
link2MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2MajorStatus.setStatus('mandatory')
link2MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2MinorStatus.setStatus('mandatory')
link3CritStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("crit", 2), ("crit-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3CritStatus.setStatus('mandatory')
link3MajorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("maj", 2), ("maj-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3MajorStatus.setStatus('mandatory')
link3MinorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clr", 1), ("min", 2), ("min-aco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3MinorStatus.setStatus('mandatory')
alarmNodeACO = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmNodeACO.setStatus('mandatory')
alarmACOTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6), )
if mibBuilder.loadTexts: alarmACOTable.setStatus('mandatory')
alarmACOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1), ).setIndexNames((0, "DV2-MIB", "alrACOslotNo"))
if mibBuilder.loadTexts: alarmACOEntry.setStatus('mandatory')
alrACOslotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrACOslotNo.setStatus('mandatory')
alrACOslotACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOslotACO.setStatus('mandatory')
alrACOlink0ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink0ACO.setStatus('mandatory')
alrACOlink1ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink1ACO.setStatus('mandatory')
alrACOlink2ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink2ACO.setStatus('mandatory')
alrACOlink3ACO = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrACOlink3ACO.setStatus('mandatory')
userStatusTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7), )
if mibBuilder.loadTexts: userStatusTable.setStatus('mandatory')
userStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1), ).setIndexNames((0, "DV2-MIB", "userInputNo"))
if mibBuilder.loadTexts: userStatusEntry.setStatus('mandatory')
userInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInputNo.setStatus('mandatory')
userInputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3))).clone('not-applicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputEnable.setStatus('mandatory')
userInputTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputTrapEnable.setStatus('mandatory')
userInputTrapDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputTrapDesc.setStatus('mandatory')
userInputActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-closed", 1), ("active-open", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInputActiveState.setStatus('mandatory')
userInputAlrClass = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("informational", 4))).clone('informational')).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInputAlrClass.setStatus('mandatory')
userInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInputStatus.setStatus('mandatory')
alarmScanFile = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmScanFile.setStatus('mandatory')
cacCurrentEbtId = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacCurrentEbtId.setStatus('mandatory')
cacEbtCommand = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("load-EBT", 2), ("dump-EBT", 3), ("delete-EBT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacEbtCommand.setStatus('mandatory')
cacCommandEbtId = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacCommandEbtId.setStatus('mandatory')
cacEbtState = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uninitialized", 1), ("initializing", 2), ("loading", 3), ("ready", 4), ("unusable", 5))).clone('uninitialized')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacEbtState.setStatus('mandatory')
cacErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("no-error", 1), ("nonexistent-file", 2), ("bad-file-length", 3), ("copy-corrupted", 4), ("nunused-cbtdwoebtid", 5), ("nunused-cinvalid", 6), ("nebtid-uninit-cstays", 7), ("ninvalid-cstays", 8), ("ninvalid-cebtid-uninit", 9), ("ninvalid-cinvalid", 10), ("ninvalid-cnoerror", 11), ("link-not-ready", 12), ("link-not-configuring", 13), ("ebt-not-loaded", 14), ("class-not-found", 15), ("dump-fs-error", 16), ("bad-ebt-command", 17), ("delete-fs-error", 18), ("ebt-id-invalid", 19))).clone('no-error')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacErrorCode.setStatus('mandatory')
cacPerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6), )
if mibBuilder.loadTexts: cacPerLinkTable.setStatus('mandatory')
cacPerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1), ).setIndexNames((0, "DV2-MIB", "cacLinkNo"))
if mibBuilder.loadTexts: cacPerLinkEntry.setStatus('mandatory')
cacLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkNo.setStatus('mandatory')
cacLinkSumE10 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE10.setStatus('mandatory')
cacLinkSumE1T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE1T.setStatus('mandatory')
cacLinkObfPvc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 4), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfPvc1.setStatus('mandatory')
cacLinkObfSvc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 5), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfSvc1.setStatus('mandatory')
cacLinkSumE20 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE20.setStatus('mandatory')
cacLinkSumE2T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSumE2T.setStatus('mandatory')
cacLinkObfPvc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 8), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfPvc2.setStatus('mandatory')
cacLinkObfSvc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 9), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkObfSvc2.setStatus('mandatory')
cacLinkTotalBwScrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkTotalBwScrPcr.setStatus('mandatory')
cacCurrentLinkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacCurrentLinkUsage.setStatus('mandatory')
cacMaxLinkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMaxLinkUsage.setStatus('mandatory')
cacLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkReset.setStatus('mandatory')
cacLinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebt", 1), ("scr-pcr", 2))).clone('ebt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkVersion.setStatus('mandatory')
cacLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacLinkEnable.setStatus('mandatory')
cacLinkSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single-channel", 1), ("multi-channel", 2))).clone('single-channel')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkSignalMode.setStatus('mandatory')
cacLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninitialized", 1), ("configuring", 2), ("recalculating", 3), ("ready", 4))).clone('uninitialized')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacLinkState.setStatus('mandatory')
cacPerSapTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7), )
if mibBuilder.loadTexts: cacPerSapTable.setStatus('mandatory')
cacPerSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1), ).setIndexNames((0, "DV2-MIB", "cacSapNo"))
if mibBuilder.loadTexts: cacPerSapEntry.setStatus('mandatory')
cacSapNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapNo.setStatus('mandatory')
cacSapSumE1T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapSumE1T.setStatus('mandatory')
cacSapSumE2T = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapSumE2T.setStatus('mandatory')
cacSapTotalBwScrPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacSapTotalBwScrPcr.setStatus('mandatory')
cacCurrentSapUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacCurrentSapUsage.setStatus('mandatory')
cacMaxSapUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMaxSapUsage.setStatus('mandatory')
cacSapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cacSapReset.setStatus('mandatory')
dv2Message = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,1)).setObjects(("DV2-MIB", "sysLastTrapMessage"))
slotChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,2)).setObjects(("DV2-MIB", "slot0PhySlotNo"), ("DV2-MIB", "slot0PhyState"))
linkChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,3)).setObjects(("DV2-MIB", "slot0PhySlotNo"), ("DV2-MIB", "slot0PhyLink0State"), ("DV2-MIB", "slot0PhyLink1State"), ("DV2-MIB", "slot0PhyLink2State"), ("DV2-MIB", "slot0PhyLink3State"), ("DV2-MIB", "slot0PhyLstChngLnkNum"), ("DV2-MIB", "slot0PhyLstChngPrevLnkStat"))
psuChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,4)).setObjects(("DV2-MIB", "slot0PsuIndex"), ("DV2-MIB", "slot0PsuFault"))
configChanged = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,5)).setObjects(("DV2-MIB", "sysConfigChanged"), ("DV2-MIB", "slotNumber"))
reset040 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,22)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
badPassword = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,23)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
billingRecFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,26)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
clockAlarm = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,27)).setObjects(("DV2-MIB", "alarmStatus"), ("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sysClkAlarmErr"), ("DV2-MIB", "pSlotNumber"), ("DV2-MIB", "pSysRefSelect"), ("DV2-MIB", "sSlotNumber"), ("DV2-MIB", "sSysRefSelect"), ("DV2-MIB", "inService"))
spvcInit = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,28)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
spvcFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,29)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sPvcCauseDiagCode"))
spvcCallClr = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,30)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
spvcCallReset = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,31)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
spvcRetryExceeded = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,33)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sPvcId"), ("DV2-MIB", "slotNumber"))
mainInServ = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,76)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0InUse"))
standbyInServ = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,77)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0InUse"))
bill25pstfull = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,78)).setObjects(("DV2-MIB", "billAvailable"))
bill75pstfull = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,79)).setObjects(("DV2-MIB", "billAvailable"))
restart040 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,80)).setObjects(("DV2-MIB", "slotNumber"))
alcTxError = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,81)).setObjects(("DV2-MIB", "slotNumber"))
lim_fault = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,91)).setLabel("lim-fault").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "limTypeStatus"))
lim_oper = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,92)).setLabel("lim-oper").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "limTypeStatus"))
psuAbsent = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,93)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0PsuIndex"))
psuPresent = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,94)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0PsuIndex"))
switchFabricSwap = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,95)).setObjects(("DV2-MIB", "sysLastTrapMessage"))
internalReset = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,106)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"))
aal1Fault = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,107)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
aal1Clear = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,108)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
ds1LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,109)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1LOSAlarm"))
ds1LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,110)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1LOFAlarm"))
ds1AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,111)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1AISAlarm"))
ds1Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,112)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1YellowAlarm"))
ds1ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,113)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1ExBERAlarm"))
ds1v2LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,114)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2LOSAlarm"))
ds1v2LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,115)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2LOFAlarm"))
ds1v2AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,116)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2AISAlarm"))
ds1v2Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,117)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2FerfAlarm"))
ds1v2ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,118)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds1V2BERAlarm"))
ds3LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,119)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds3LOSAlarm"))
ds3V2LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,120)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "ds3V2LOSAlarm"))
ds3LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,121)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3LOFAlarm"))
ds3AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,122)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3AISAlarm"))
ds3Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,123)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3YellowAlarm"))
ds3ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,124)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3ExBERAlarm"))
ds3FEFrmrDif = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,125)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhDS3RxFrmFmt"))
e1LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,126)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1LOSAlarm"))
e1LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,127)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1LOFAlarm"))
e1AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,128)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1AISAlarm"))
e1Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,129)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1FerfAlarm"))
e1ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,130)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e1ExBERAlarm"))
e3LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,131)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "e3LOSAlarm"))
e3LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,132)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3LOFAlarm"))
e3AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,133)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3AISAlarm"))
e3Yellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,134)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3FERFAlarm"))
e3ExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,135)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhE3ExBERAlarm"))
locd = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,136)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhPLCPLOCDAlarm"))
plcpYellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,137)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhPLCPYellowAlarm"))
plcpLOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,138)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "pdhPLCPLOFAlarm"))
sdhLOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,139)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLOS"))
sdhLOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,140)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLOF"))
sdhLineAIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,141)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLineAIS"))
sdhPathAIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,142)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmPathAIS"))
sdhLOP = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,143)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLOP"))
sdhPLM = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,144)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmPLM"))
sdhLineYellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,145)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmLineRFI"))
sdhPathYellow = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,146)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSAlarmPathRFI"))
sdhExBER = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,147)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "sdhSExBERAlarm"))
clockActiveRef = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,148)).setObjects(("DV2-MIB", "inService"))
outOfResource = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,149)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
hssiLOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,150)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "hssiLOSAlarm"))
hssiDTEReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,151)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
hssiDCEReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,152)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
hssiDTENotReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,153)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
hssiDCENotReady = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,154)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"))
userstatus1 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,155)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "userInputStatus"))
userstatus2 = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,156)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "userInputStatus"))
pntmoper = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,157)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "pscatmode"))
sntmoper = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,158)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sscatmode"))
pntmoscstatus = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,159)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "pcatstr3oscstatus"))
sntmoscstatus = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,160)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "scatstr3oscstatus"))
pbitslineok = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,161)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "pbslineok"))
sbitslineok = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,162)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "sbslineok"))
svcHalfConnect = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,163)).setObjects(("DV2-MIB", "slotNumber"), ("DV2-MIB", "svcHalfConCnt"))
duplicateIpAddr = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,164)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "qeDocMacAddress"))
svcQsaalReset = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,165)).setObjects(("DV2-MIB", "slotNumber"))
svcQsaalUpDown = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,166)).setObjects(("DV2-MIB", "slotNumber"))
svcT309Expiry = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,167)).setObjects(("DV2-MIB", "slotNumber"))
j2LOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,168)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2LOSAlarm"))
j2LOF = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,169)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2LOFAlarm"))
j2AIS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,170)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2AISAlarm"))
j2RAI = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,171)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "j2RAlmAlarm"))
scfLOS = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,172)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slotNumber"), ("DV2-MIB", "sysLkLinkNo"), ("DV2-MIB", "scfLOSAlarm"))
routeLoadFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,173)).setObjects(("DV2-MIB", "slotNumber"))
dTLLoadFail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,174)).setObjects(("DV2-MIB", "slotNumber"))
redunNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,175)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0IsStandbySlot0"))
redunAvail = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,176)).setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "slot0IsStandbySlot0"))
dQ7_error = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,177)).setLabel("dQ7-error").setObjects(("DV2-MIB", "slotNumber"))
oamVcaRcvAIS_RDI = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,178)).setLabel("oamVcaRcvAIS-RDI").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "oamVcaVpi"), ("DV2-MIB", "oamVcaVci"), ("DV2-MIB", "oamVcaAisRdiState"))
oamVcbRcvAIS_RDI = NotificationType((1, 3, 6, 1, 4, 1, 251, 1, 1) + (0,179)).setLabel("oamVcbRcvAIS-RDI").setObjects(("DV2-MIB", "sysLastTrapMessage"), ("DV2-MIB", "oamVcbVpi"), ("DV2-MIB", "oamVcbVci"), ("DV2-MIB", "oamVcbAisRdiState"))
mibBuilder.exportSymbols("DV2-MIB", primaryClockTable=primaryClockTable, qeDocBridgeLink1Eligible=qeDocBridgeLink1Eligible, ds1V2GappedClk=ds1V2GappedClk, svcQ93bStatDiagRx=svcQ93bStatDiagRx, pscatlimtype=pscatlimtype, pcatstr3oscillator=pcatstr3oscillator, oamVcbTrapEnable=oamVcbTrapEnable, plppE1SRXclock=plppE1SRXclock, sdhSSectOOF=sdhSSectOOF, e1LineSES=e1LineSES, pvcAuxBackwardPeakCellRate=pvcAuxBackwardPeakCellRate, oamVcaDefectLink=oamVcaDefectLink, standbyInServ=standbyInServ, sdhSPathFarEndUAS=sdhSPathFarEndUAS, slot0PhyReset=slot0PhyReset, sInputLineOk=sInputLineOk, pvcAuxForwardPeakSize=pvcAuxForwardPeakSize, pvcForwardSustainedSize=pvcForwardSustainedSize, ds1V2AISDefect=ds1V2AISDefect, sPvcCallId=sPvcCallId, aal1Clear=aal1Clear, dataPortSpeed=dataPortSpeed, sCATBitsStatusTable=sCATBitsStatusTable, ds1ExBER=ds1ExBER, slot0PsuTemp=slot0PsuTemp, svcMBSMax=svcMBSMax, fraPStatRemPoll=fraPStatRemPoll, pdhDS3Framer=pdhDS3Framer, xpStatTable=xpStatTable, vcaBucket3CV=vcaBucket3CV, frbPStatTxFCnt=frbPStatTxFCnt, vcStatOFlow=vcStatOFlow, slot0MibBroadcast=slot0MibBroadcast, slot0PsuFanFail=slot0PsuFanFail, vcDocSuba=vcDocSuba, sdhSPathFC=sdhSPathFC, pvcSlot=pvcSlot, svcDE164Sub=svcDE164Sub, frbPStatLocStat=frbPStatLocStat, e3LinkNo=e3LinkNo, dv2SlipLine=dv2SlipLine, ceResCnt=ceResCnt, pdhE3FrameErrs=pdhE3FrameErrs, pbcplaceholder1=pbcplaceholder1, cacLinkSumE20=cacLinkSumE20, oamVcaEntry=oamVcaEntry, cePriority=cePriority, svcQsaalStatSdpRx=svcQsaalStatSdpRx, vcaBucket2Inc=vcaBucket2Inc, e1AISDefect=e1AISDefect, sysLkLinkNo=sysLkLinkNo, svcQsaalStatSdRx=svcQsaalStatSdRx, fRelayConfTable=fRelayConfTable, dataRemoteIp=dataRemoteIp, pdhE3TableValid=pdhE3TableValid, plppSPLCPRxYellowAlarm=plppSPLCPRxYellowAlarm, cacMaxSapUsage=cacMaxSapUsage, vcbVpi=vcbVpi, vcaEntry=vcaEntry, billCLP1Out=billCLP1Out, sCATDerStatusTable=sCATDerStatusTable, slot0PhySlotHwVerNo=slot0PhySlotHwVerNo, vidInTransMode=vidInTransMode, plppV2SPLCPRxYellowAlarm=plppV2SPLCPRxYellowAlarm, sysAuSendTraps=sysAuSendTraps, qeDocTunEntry=qeDocTunEntry, slot0PhyLstChngLnkNum=slot0PhyLstChngLnkNum, veDstSlot=veDstSlot, plppE3CTxTrcIdUH=plppE3CTxTrcIdUH, svcQsaalStatRsakRx=svcQsaalStatRsakRx, vcaTable=vcaTable, pdhE3ParityErrs=pdhE3ParityErrs, vidInBuffOvf=vidInBuffOvf, dv2aal5=dv2aal5, ceSecVal=ceSecVal, alarmNodeMinor=alarmNodeMinor, slot0PhyTable=slot0PhyTable, pdhE3LinkNo=pdhE3LinkNo, svcQ93bStatRelCmpltTx=svcQ93bStatRelCmpltTx, vcDocTestVal=vcDocTestVal, aal1Fault=aal1Fault, plppE1CScrambler=plppE1CScrambler, e1ExBERAlarm=e1ExBERAlarm, dlimLpbkTimeout=dlimLpbkTimeout, cacMaxLinkUsage=cacMaxLinkUsage, ctrlCodecSta=ctrlCodecSta, veOflCnt=veOflCnt, e1AISAlarm=e1AISAlarm, pdhPLCPRXCells=pdhPLCPRXCells, lim_fault=lim_fault, pbcclrperf=pbcclrperf, svcCellRateEntry=svcCellRateEntry, vcbBucketControl=vcbBucketControl, frbPStatEntry=frbPStatEntry, link1MajorStatus=link1MajorStatus, fraPStatRemMec=fraPStatRemMec, plppE1STXclock=plppE1STXclock, slot0MaxUpSlots=slot0MaxUpSlots, pdhDS3ParityErrs=pdhDS3ParityErrs, vcaBucket1CV=vcaBucket1CV, vcStatTxState=vcStatTxState, svcQ93bStatConnAckRx=svcQ93bStatConnAckRx, limState=limState, fraPStatLocPoll=fraPStatLocPoll, vcDocCLines=vcDocCLines, vidInStand=vidInStand, sysConfigFile=sysConfigFile, e1SES=e1SES, plppSCLines=plppSCLines, frbVci=frbVci, sdhCIdleCell=sdhCIdleCell, ds1V2AISAlarm=ds1V2AISAlarm, ds3RXAis=ds3RXAis, plppSTXclock=plppSTXclock, dv2MS2FRAC=dv2MS2FRAC, pdcds1V2TxLineLn=pdcds1V2TxLineLn, oamSegEndPoint=oamSegEndPoint, frbPConfigCir=frbPConfigCir, lFibreStatTable=lFibreStatTable, vcaBucket2CV=vcaBucket2CV, oamLoopbackVpi=oamLoopbackVpi, slot0XpInUse=slot0XpInUse, pcatstr3driverstatus=pcatstr3driverstatus, plppV2SDs3RxYellowAlarm=plppV2SDs3RxYellowAlarm, e3LimType=e3LimType, svcQsaalStatMdTx=svcQsaalStatMdTx, plppV2SSPLRStatus=plppV2SSPLRStatus, fRelConfLinkCline=fRelConfLinkCline, vidInTest=vidInTest, oamVcaBkwRptLosCells=oamVcaBkwRptLosCells, svcQsaalStatInPduErr=svcQsaalStatInPduErr, frbPStatDisRxF=frbPStatDisRxF, plppV2SRXclock=plppV2SRXclock, DateTimeString=DateTimeString, sscIndex=sscIndex, plppSLinkNo=plppSLinkNo, pdhDS3FarEndUAS=pdhDS3FarEndUAS, svcBackwardPeakCellRate=svcBackwardPeakCellRate, redunAvail=redunAvail, plppSRXclock=plppSRXclock, fraPConfigPriority=fraPConfigPriority, sdhCLoopLine=sdhCLoopLine, svcE164Addr=svcE164Addr, pdhE3AISDefect=pdhE3AISDefect, pdsV2RxAIS=pdsV2RxAIS, vcDocTestMode=vcDocTestMode, pdhE3Entry=pdhE3Entry, plppV2SDs3RxRedAlarm=plppV2SDs3RxRedAlarm, e3LOSAlarm=e3LOSAlarm, vidOutSeqnoErr=vidOutSeqnoErr, plppE1SFEBEErrs=plppE1SFEBEErrs, svcQ93bTmrT308=svcQ93bTmrT308, spvcRetryExceeded=spvcRetryExceeded, pdhPLCPBIP8Errs=pdhPLCPBIP8Errs, pdhPLCPLoopback=pdhPLCPLoopback, mgmtIndex=mgmtIndex, frbPStatLinkState=frbPStatLinkState, plppCTxTrlTrcIdLen=plppCTxTrlTrcIdLen, ds1LOF=ds1LOF, vidInQuanFactor=vidInQuanFactor, alrACOlink2ACO=alrACOlink2ACO, vidEntry=vidEntry, veMode=veMode, billBwdPCR=billBwdPCR, qeDocTunLocStartSkt=qeDocTunLocStartSkt, pdsV2RxOOFCnt=pdsV2RxOOFCnt, sysAuIndex=sysAuIndex, scfDCEDTE=scfDCEDTE, svcQsaalStatEndRx=svcQsaalStatEndRx, svcQ93bStatSetupRx=svcQ93bStatSetupRx, sPvcAlertFailures=sPvcAlertFailures, vcaDstSlot=vcaDstSlot, scatstr3reconfigure=scatstr3reconfigure, plppV2CTable=plppV2CTable, frbPStatRxFCnt=frbPStatRxFCnt, sdhCEntry=sdhCEntry, pcconoffline=pcconoffline, vidOutCurrQFactor=vidOutCurrQFactor, sdhSAlarmLineAIS=sdhSAlarmLineAIS, jpegSaveCfg=jpegSaveCfg, oamLastTxVpi=oamLastTxVpi, svcPCRCLP01Max=svcPCRCLP01Max, svcQ93bStatAddPtyRejTx=svcQ93bStatAddPtyRejTx, sdhCLinkEnab=sdhCLinkEnab, oamVcaPM=oamVcaPM, slot0PsuTooHot=slot0PsuTooHot, svcInternalVci=svcInternalVci, sysDbCurrent=sysDbCurrent, fRelStatRemPoll=fRelStatRemPoll, plppE3CPLCPMode=plppE3CPLCPMode, svcQ93bStatAddPtyRx=svcQ93bStatAddPtyRx, mgmtPortStat=mgmtPortStat, link0MajorStatus=link0MajorStatus, pCATDerConfigTable=pCATDerConfigTable, vcaVci=vcaVci, sysLKEgMemBlockId=sysLKEgMemBlockId, pdhPLCPReconfig=pdhPLCPReconfig, svcT309Expiry=svcT309Expiry, j2CrcCount=j2CrcCount, svcTLinkNo=svcTLinkNo, sPvcFailures=sPvcFailures, lmiPrefix=lmiPrefix, vcbTable=vcbTable, billingEntry=billingEntry, sysCurrentSema=sysCurrentSema, ceTable=ceTable, qeDocTunLink2Eligible=qeDocTunLink2Eligible, jpegCurrentFile=jpegCurrentFile, sdhSLineFarEndES=sdhSLineFarEndES, svcQ93bStatAddPtyAckTx=svcQ93bStatAddPtyAckTx, frbPConfigDxivci=frbPConfigDxivci, plppV2CFrmFmt=plppV2CFrmFmt, str3Configured=str3Configured, ds1V2FRMRMode=ds1V2FRMRMode, scatstr3driverstatus=scatstr3driverstatus, spvcInit=spvcInit, qeDocMacAddress=qeDocMacAddress, sscatplaceholder1=sscatplaceholder1, userInputTrapEnable=userInputTrapEnable, svcQosRoute=svcQosRoute, vcStatPortNo=vcStatPortNo, clksSysRefError=clksSysRefError, frbPStatLocAck=frbPStatLocAck, se1SA5=se1SA5, sbslineok=sbslineok, pdcV2FRMRMode=pdcV2FRMRMode, pvcInternalVci=pvcInternalVci, autoRevert=autoRevert, j2LineES=j2LineES, configChanged=configChanged, userstatus1=userstatus1, billSeq=billSeq, plppV2C0x55=plppV2C0x55, plppSRXCells=plppSRXCells, ss3sIndex=ss3sIndex, plppE1SRxAIS=plppE1SRxAIS, userStatusTable=userStatusTable, link0MinorStatus=link0MinorStatus, sbcV2Lb=sbcV2Lb, slotMinorStatus=slotMinorStatus, e1Reconfig=e1Reconfig, E164=E164, vcbBucket0CV=vcbBucket0CV, oamVcbDefectSlot=oamVcbDefectSlot, frbPConfigSuba=frbPConfigSuba, pbcV2Lb=pbcV2Lb, lmiOnOff=lmiOnOff, alarmACOTable=alarmACOTable, svcCRLinkNo=svcCRLinkNo, lmiNetSideEntry=lmiNetSideEntry, slot0XpToUse=slot0XpToUse, ds1LineES=ds1LineES, mgmtPortProt=mgmtPortProt, pvcSvci=pvcSvci)
mibBuilder.exportSymbols("DV2-MIB", pcatstr3listener=pcatstr3listener, slot0TftpToStandby=slot0TftpToStandby, veStatPortNo=veStatPortNo, svcQ93bTmrT399=svcQ93bTmrT399, billByteIn=billByteIn, ctrlTable=ctrlTable, ds1Coding=ds1Coding, pvcLinkQoS=pvcLinkQoS, svcQ93bStatRelCmpltRx=svcQ93bStatRelCmpltRx, plppV2STable=plppV2STable, fraPStatRemSeq=fraPStatRemSeq, svcQ93bTmrT309=svcQ93bTmrT309, pdhPLCPES=pdhPLCPES, sdsV2RxAIS=sdsV2RxAIS, pCATDerStatusTable=pCATDerStatusTable, j2AISS=j2AISS, pvcVciStart=pvcVciStart, plppE3SPLCPRxYellowAlarm=plppE3SPLCPRxYellowAlarm, ctrlCallType=ctrlCallType, plppV2SDs3FrameErrs=plppV2SDs3FrameErrs, fraPConfigCir=fraPConfigCir, svcVciStart=svcVciStart, svcBackwardMaxBurstSize=svcBackwardMaxBurstSize, veStatTable=veStatTable, vidOutPlayed=vidOutPlayed, dataIp=dataIp, mgmtBytesRcvd=mgmtBytesRcvd, oamDisable=oamDisable, fraPConfigSuba=fraPConfigSuba, pdhDS3SES2=pdhDS3SES2, plppE3SRxTrIdMis=plppE3SRxTrIdMis, vePriority=vePriority, alarmStatEntry=alarmStatEntry, plppE3SBIP8Errs=plppE3SBIP8Errs, oamVcaVpi=oamVcaVpi, dv2Clocks=dv2Clocks, cacEbtState=cacEbtState, limSCfileXferReq=limSCfileXferReq, scfLimType=scfLimType, sbsV2RxBER=sbsV2RxBER, vcbInternalVpi=vcbInternalVpi, svcVpStart=svcVpStart, e1Entry=e1Entry, veEnable=veEnable, svcNumLeaves=svcNumLeaves, vidInFrameRate=vidInFrameRate, lmiEntry=lmiEntry, xpTXCells=xpTXCells, billCellIn=billCellIn, ds1V2ES=ds1V2ES, plppE3SRxLOS=plppE3SRxLOS, j2LOF=j2LOF, vidInSkipCnt=vidInSkipCnt, j2LOSDefect=j2LOSDefect, audLpbk=audLpbk, sccatbytestransferred=sccatbytestransferred, billSslot=billSslot, sCATStratum3ConfigTable=sCATStratum3ConfigTable, pdhDS3Entry=pdhDS3Entry, pdhDS3TxAIS=pdhDS3TxAIS, xpIFace=xpIFace, frbPStatRemStat=frbPStatRemStat, sbitslineok=sbitslineok, lmiState=lmiState, vcDocTable=vcDocTable, pscIndex=pscIndex, svcVpiEnd=svcVpiEnd, oamVcbCC=oamVcbCC, sdhCLoopTimer=sdhCLoopTimer, qeDocTunInFrames=qeDocTunInFrames, sPvcBackwardPeakCellRate=sPvcBackwardPeakCellRate, svcSCRMax=svcSCRMax, scfLOSDefect=scfLOSDefect, limFaultReason=limFaultReason, pdhPLCPIdleCell=pdhPLCPIdleCell, oamVcaTable=oamVcaTable, ceUflCnt=ceUflCnt, E164SUB=E164SUB, lFibreConfLinkEnab=lFibreConfLinkEnab, sPvcTargetVpi=sPvcTargetVpi, oamRxCount=oamRxCount, vidOutStdStat=vidOutStdStat, e1LimType=e1LimType, clksSysRefSlotNum=clksSysRefSlotNum, sdhPathYellow=sdhPathYellow, qeDocTunDestSubAddress=qeDocTunDestSubAddress, svcForwardMaxBurstSize=svcForwardMaxBurstSize, vidOutSta=vidOutSta, limCodec0=limCodec0, dataPortProt=dataPortProt, oamLoopbackTimeOut=oamLoopbackTimeOut, lmiNetSidePrefixId=lmiNetSidePrefixId, e3AIS=e3AIS, pvcInternalVpi=pvcInternalVpi, plppE1SFrameErrs=plppE1SFrameErrs, svcResourceEntry=svcResourceEntry, ceStr3=ceStr3, pbcIndex=pbcIndex, sbcreconfigure=sbcreconfigure, products=products, qeDocBridgeEntry=qeDocBridgeEntry, sPvcMulticast=sPvcMulticast, svcQ93bStatStatEnqRx=svcQ93bStatStatEnqRx, sPvcBackwardMaxBurstSize=sPvcBackwardMaxBurstSize, hssiDCEReady=hssiDCEReady, vidInState=vidInState, sysAuthenticateTable=sysAuthenticateTable, plppV2SRxIDL=plppV2SRxIDL, pdhPLCPLOFDefect=pdhPLCPLOFDefect, limTypeStatus=limTypeStatus, dataChnlType=dataChnlType, lFibreStatHCSErrs=lFibreStatHCSErrs, sPvcBackwardSustainableMode=sPvcBackwardSustainableMode, oamVcaDefectNode=oamVcaDefectNode, svcQ93bStatAddPtyRejRx=svcQ93bStatAddPtyRejRx, vidInCurQFactor=vidInCurQFactor, svcEntry=svcEntry, plppCTable=plppCTable, sysLKIgMemBlockId=sysLKIgMemBlockId, sdcreconfigure=sdcreconfigure, oamLoopbackSpan=oamLoopbackSpan, plppE1CLinkNo=plppE1CLinkNo, pccatsendconfig=pccatsendconfig, svcQsaalStatUdRx=svcQsaalStatUdRx, oamVcaVci=oamVcaVci, svcDSlot=svcDSlot, ceClkInp=ceClkInp, fraPStatRemStartT=fraPStatRemStartT, lmiLinkNo=lmiLinkNo, pdhPLCPTXCells=pdhPLCPTXCells, plppE3SRXclock=plppE3SRXclock, lmiType=lmiType, veStatEntry=veStatEntry, vcbCellSwitchHead=vcbCellSwitchHead, pdhDS3TableValid=pdhDS3TableValid, fRelayStatTable=fRelayStatTable, ds1YellowAlarm=ds1YellowAlarm, frbPStatRemMec=frbPStatRemMec, sPvcBackwardPeakMode=sPvcBackwardPeakMode, jpegSWRev=jpegSWRev, plppE1SFerf=plppE1SFerf, lFibreConfEntry=lFibreConfEntry, sdhSSectES=sdhSSectES, svcQ93bStatClr=svcQ93bStatClr, sysLkTxCells=sysLkTxCells, billBwdQOS=billBwdQOS, ceDstSlot=ceDstSlot, sysCurrentQItems=sysCurrentQItems, sysLkTxMaxRate=sysLkTxMaxRate, j2Table=j2Table, outOfResource=outOfResource, psuChanged=psuChanged, billByteOutC=billByteOutC, vidOutSkipped=vidOutSkipped, audInVol=audInVol, pdhPLCPRXclock=pdhPLCPRXclock, dv2StaticRoute=dv2StaticRoute, plppCRxExTrcId=plppCRxExTrcId, audIndex=audIndex, lmiNetSidePrefix=lmiNetSidePrefix, plppCCPLCPMode=plppCCPLCPMode, sbsV2RxOOF=sbsV2RxOOF, audOutSta=audOutSta, sdcV2Lb=sdcV2Lb, pdhE3RxPloadTypeLabUnst=pdhE3RxPloadTypeLabUnst, svcVciEnd=svcVciEnd, dv2Pvc=dv2Pvc, svcTable=svcTable, limSCbytes=limSCbytes, sccatactivate=sccatactivate, sdhSUnCorrHCS=sdhSUnCorrHCS, plppV2SDs3FrmFmt=plppV2SDs3FrmFmt, sdhExBER=sdhExBER, plppE3SEntry=plppE3SEntry, oamTable=oamTable, pcatstr3listenerstatus=pcatstr3listenerstatus, svcVpiStart=svcVpiStart, fraPStatTxFRate=fraPStatTxFRate, pdhDS3LES=pdhDS3LES, pdhE3UAS=pdhE3UAS, qeDocTunRemEndSkt=qeDocTunRemEndSkt, audInCfg=audInCfg, plppE1SRxOOF=plppE1SRxOOF, qeDocBridgeTable=qeDocBridgeTable, sPvcType=sPvcType, vidRxVidReq=vidRxVidReq, traceTcp=traceTcp, j2RAI=j2RAI, sdhSLineES=sdhSLineES, alrACOlink3ACO=alrACOlink3ACO, svcQ93bStatDropPtyRx=svcQ93bStatDropPtyRx, vcStatLastCompare=vcStatLastCompare, vcStatLastError=vcStatLastError, alarmScanFile=alarmScanFile, sdhLOP=sdhLOP, fRelConfLinkType=fRelConfLinkType, veDstVpi=veDstVpi, sccIndex=sccIndex, vcbDstLink=vcbDstLink, svcQ93bStatDropPtyAckRx=svcQ93bStatDropPtyAckRx, hssiDCENotReady=hssiDCENotReady, ds1ES=ds1ES, pdhDS3LOSDefect=pdhDS3LOSDefect, fRelConfN391=fRelConfN391, ds1Reconfig=ds1Reconfig, plppE3CEntry=plppE3CEntry, sCATstatusEntry=sCATstatusEntry, sysLKIgFIFODepth=sysLKIgFIFODepth, qeDocTunType=qeDocTunType, slot0PsuFanBSpeed=slot0PsuFanBSpeed, sysLKIgLogBuffer=sysLKIgLogBuffer, sdhS2Entry=sdhS2Entry, pdsV2RxBERCnt=pdsV2RxBERCnt, sdsV2RxBERCnt=sdsV2RxBERCnt, pvcSSlot=pvcSSlot, sccatsendconfig=sccatsendconfig, alrACOslotNo=alrACOslotNo, plppE1SRxLOF=plppE1SRxLOF, ssCATfilerevision=ssCATfilerevision, ds1Framing=ds1Framing, svcQ93bStatSetupTx=svcQ93bStatSetupTx, slot0PsuTable=slot0PsuTable, vidOutImageErr=vidOutImageErr, ps3sIndex=ps3sIndex, alarmNodeCrit=alarmNodeCrit, ceEnable=ceEnable, plppSDs3RxAIS=plppSDs3RxAIS, ds1OofCount=ds1OofCount, qeDocTunRetryPeriod=qeDocTunRetryPeriod, oamLinkNo=oamLinkNo, oamVcbVpcEndPoint=oamVcbVpcEndPoint, plppV2CTxAIS=plppV2CTxAIS, pvcLink=pvcLink, jpegSlipRemoteIp=jpegSlipRemoteIp, scfClkSel=scfClkSel, svcQsaalStatSAP=svcQsaalStatSAP, pvcVpStart=pvcVpStart, sPvcStatus=sPvcStatus, pdhE3Clear=pdhE3Clear, sdhSLineAIS=sdhSLineAIS, oamVcaConnectionType=oamVcaConnectionType, pdhDS3OOFDefect=pdhDS3OOFDefect, pCATStratum3StatusTable=pCATStratum3StatusTable, plppV2SEntry=plppV2SEntry, lmiUserSideAddressStatus=lmiUserSideAddressStatus, dv2DS=dv2DS, sscatfilestatus=sscatfilestatus, mgmtPortAddress=mgmtPortAddress, vcStatTxCells=vcStatTxCells, vcbBucket1CV=vcbBucket1CV, sCATStratum3StatusEntry=sCATStratum3StatusEntry, pCATcontrolTable=pCATcontrolTable, pdhPLCPLOCDAlarm=pdhPLCPLOCDAlarm, sdhClearCounts=sdhClearCounts)
mibBuilder.exportSymbols("DV2-MIB", sSysRefSelect=sSysRefSelect, scconoffline=scconoffline, fRelStatLocAck=fRelStatLocAck, e1LOFAlarm=e1LOFAlarm, se1SI1=se1SI1, sysDefaultCellMode=sysDefaultCellMode, vcDocEnable=vcDocEnable, plppSDs3Lcvs=plppSDs3Lcvs, pbsV2RxBERCnt=pbsV2RxBERCnt, slot0LecsPrefix=slot0LecsPrefix, svcForwardSustainableMode=svcForwardSustainableMode, plppE3SHCSErrs=plppE3SHCSErrs, svcQoSClass=svcQoSClass, veUflCnt=veUflCnt, scatstr3oscstatus=scatstr3oscstatus, oamVcbAisRdiState=oamVcbAisRdiState, pvcResourceEntry=pvcResourceEntry, audOutVol=audOutVol, slipMask=slipMask, sPvcForwardSustainableCellRate=sPvcForwardSustainableCellRate, hssiEntry=hssiEntry, ds1BeeCount=ds1BeeCount, sccatlimtype=sccatlimtype, sysLkResetResrc=sysLkResetResrc, pcatstr3oscstatus=pcatstr3oscstatus, sdhSPathLabel=sdhSPathLabel, vidInBufLevel=vidInBufLevel, scfInterfaceType=scfInterfaceType, plppV2CSmdsMode=plppV2CSmdsMode, billFwdSCR=billFwdSCR, vcaCellMask=vcaCellMask, pdcreconfigure=pdcreconfigure, pvcQoSClass=pvcQoSClass, slot0SwitchId=slot0SwitchId, fraPStatRemStat=fraPStatRemStat, svcSLink=svcSLink, ds3AIS=ds3AIS, pdhE3FEBEErrs=pdhE3FEBEErrs, soLimType=soLimType, link0CritStatus=link0CritStatus, ds1LineSES=ds1LineSES, ds3V2LOSDefect=ds3V2LOSDefect, pdhPLCPLpbkTimeout=pdhPLCPLpbkTimeout, billSvpi=billSvpi, sdcV2FRMRMode=sdcV2FRMRMode, vidOutFrameRate=vidOutFrameRate, svcHalfConTimer=svcHalfConTimer, qeDocTunIdlePeriod=qeDocTunIdlePeriod, vcaExcessCells=vcaExcessCells, pscatmode=pscatmode, vcaBucket0Max=vcaBucket0Max, plppE3SPLCPFrameErrs=plppE3SPLCPFrameErrs, ceInvCnt=ceInvCnt, slot0PsuType=slot0PsuType, ds1LcvCount=ds1LcvCount, svcQsaalStatInPduDisc=svcQsaalStatInPduDisc, vhsystem=vhsystem, ds1Z16Count=ds1Z16Count, scatstr3listenerstatus=scatstr3listenerstatus, vcaCellSwitchHead=vcaCellSwitchHead, oamVcbVci=oamVcbVci, pdhPLCPFEBEErrs=pdhPLCPFEBEErrs, svcId=svcId, pdhE3TxTrlTrcIdLen=pdhE3TxTrlTrcIdLen, svcQ93bTmrT310=svcQ93bTmrT310, cacEbtCommand=cacEbtCommand, veTable=veTable, pdcIndex=pdcIndex, oamVcaVpcEndPoint=oamVcaVpcEndPoint, limSCfileXferStat=limSCfileXferStat, scfReconfig=scfReconfig, sCATDerConfigTable=sCATDerConfigTable, audOutMute=audOutMute, fraPStatTxFCnt=fraPStatTxFCnt, dQ7_error=dQ7_error, ds1V2LinkNo=ds1V2LinkNo, sdsV2TxReference=sdsV2TxReference, vcbPeakExceeds=vcbPeakExceeds, ds1V2LimType=ds1V2LimType, svcQsaalStatEndTx=svcQsaalStatEndTx, pcatstr3reconfigure=pcatstr3reconfigure, fraVpi=fraVpi, psCATFFrevision=psCATFFrevision, billCause=billCause, qeDocTunState=qeDocTunState, pvcDSlot=pvcDSlot, qeDocTunVCI=qeDocTunVCI, pdhE3SES=pdhE3SES, vidInPres=vidInPres, slot0PsuReset=slot0PsuReset, ctrlIndex=ctrlIndex, pdhDS3ES2=pdhDS3ES2, cacPerLinkEntry=cacPerLinkEntry, plppE3CRxExTrcIdUH=plppE3CRxExTrcIdUH, pvcVpiStart=pvcVpiStart, svcQ93bStatRstTx=svcQ93bStatRstTx, limHostRev=limHostRev, forceRevert=forceRevert, plppE1SCRCErrs=plppE1SCRCErrs, fraPStatRxFRate=fraPStatRxFRate, billAvailable=billAvailable, sCATBitsConfigEntry=sCATBitsConfigEntry, cacCurrentLinkUsage=cacCurrentLinkUsage, sPvcSourceVci=sPvcSourceVci, sdcIndex=sdcIndex, fRelConfLinkMode=fRelConfLinkMode, qeDocTunSktType=qeDocTunSktType, ceCDVMax=ceCDVMax, veEntry=veEntry, pSysRefSelect=pSysRefSelect, sPvcForwardPeakMode=sPvcForwardPeakMode, billFwdPCR=billFwdPCR, scatplaceholder1=scatplaceholder1, pdhE3TxmtTimMk=pdhE3TxmtTimMk, qeDocTunLink=qeDocTunLink, pdcV2Lb=pdcV2Lb, sbcIndex=sbcIndex, mgmtTable=mgmtTable, ds3V2Table=ds3V2Table, pvcBackwardCellRateTotal=pvcBackwardCellRateTotal, e3TxClkSel=e3TxClkSel, pdhE3PloadTypeLab=pdhE3PloadTypeLab, limBootRev=limBootRev, e1SCRCErrs=e1SCRCErrs, pdsV2TxReference=pdsV2TxReference, fRelayStatEntry=fRelayStatEntry, pCATDerConfigEntry=pCATDerConfigEntry, pdcplaceholder1=pdcplaceholder1, pdhE3RxExTrcIdUH=pdhE3RxExTrcIdUH, ds3Yellow=ds3Yellow, limSysStartMode=limSysStartMode, lFibreStatEntry=lFibreStatEntry, plppE1CEntry=plppE1CEntry, ds3LOF=ds3LOF, plppV2SDs3CbitPrtyErrs=plppV2SDs3CbitPrtyErrs, j2ES=j2ES, fraPStatEntry=fraPStatEntry, j2OOFDefect=j2OOFDefect, vcbExcessCells=vcbExcessCells, plppV2CLinkNo=plppV2CLinkNo, cacLinkState=cacLinkState, pvcAuxForwardSustainedCellRate=pvcAuxForwardSustainedCellRate, cacSapSumE2T=cacSapSumE2T, xpInputOverflow=xpInputOverflow, e1FerfDefect=e1FerfDefect, ctrlCodecAction=ctrlCodecAction, plppE3SFEBEErrs=plppE3SFEBEErrs, svcQ93bStatSAP=svcQ93bStatSAP, scfDataRate=scfDataRate, audTable=audTable, sCATBitsStatusEntry=sCATBitsStatusEntry, ds1V2ExBER=ds1V2ExBER, sdhSLineUAS=sdhSLineUAS, userInputTrapDesc=userInputTrapDesc, svcTrafficTable=svcTrafficTable, svcQsaalStatOutPduDisc=svcQsaalStatOutPduDisc, billCLP1OutC=billCLP1OutC, xpBadVpiVci=xpBadVpiVci, vidOutChnlLpbk=vidOutChnlLpbk, revertTimer=revertTimer, vePvcValid=vePvcValid, ctrlChnlStat=ctrlChnlStat, sdhSLinkNo=sdhSLinkNo, e1FerfAlarm=e1FerfAlarm, e1UAS=e1UAS, fraPConfigDlci=fraPConfigDlci, sdhSAlarmLineRFI=sdhSAlarmLineRFI, pbsV2RxLOSCnt=pbsV2RxLOSCnt, soLimDesc=soLimDesc, sysDbTable=sysDbTable, pbsV2RxAIS=pbsV2RxAIS, vcbDstSlot=vcbDstSlot, jpegLoadCfg=jpegLoadCfg, vcaCellHead=vcaCellHead, slot0IntIp=slot0IntIp, ds3LinkNo=ds3LinkNo, plppSSPLRStatus=plppSSPLRStatus, slot0CurrentUpSlots=slot0CurrentUpSlots, veRxCnt=veRxCnt, pbsV2RxOOFCnt=pbsV2RxOOFCnt, sdhSPathAIS=sdhSPathAIS, sscatplaceholder2=sscatplaceholder2, limCodec1=limCodec1, slipSpeed=slipSpeed, vcaBucket3Inc=vcaBucket3Inc, cacSapNo=cacSapNo, fRelConfT391=fRelConfT391, sdhC0x55=sdhC0x55, e1LinkNo=e1LinkNo, plppV2CScrambler=plppV2CScrambler, ds1LinkNo=ds1LinkNo, userInputEnable=userInputEnable, qeDocTunRfc1483Encap=qeDocTunRfc1483Encap, e3LOF=e3LOF, sdhSAlarmPLM=sdhSAlarmPLM, clockAlarm=clockAlarm, alarmStatus=alarmStatus, sdhSPathFarEndFC=sdhSPathFarEndFC, vcbType=vcbType, pdhE3RxPloadTypeLabMis=pdhE3RxPloadTypeLabMis, plppSDs3CbitPrtyErrs=plppSDs3CbitPrtyErrs, sendFileStat=sendFileStat, slipRemoteIp=slipRemoteIp, pdhDS3ES=pdhDS3ES, psCATBootrevision=psCATBootrevision, oamVcbEntry=oamVcbEntry, plppE3SRxPloadTypeLabUnst=plppE3SRxPloadTypeLabUnst, hssiRemoteLoopback=hssiRemoteLoopback, svcSvpi=svcSvpi, slot0PsuFault=slot0PsuFault, qeDocBridgeLink2Eligible=qeDocBridgeLink2Eligible, psCATfilerevision=psCATfilerevision, sysAuIpaddress=sysAuIpaddress, vidState=vidState, ds3TXAis=ds3TXAis, vidDecFrameCount=vidDecFrameCount, pdhDS3AISS=pdhDS3AISS, pdhE3ES=pdhE3ES, vidOutJpeg=vidOutJpeg, vidOutRate=vidOutRate, fRelConfN392=fRelConfN392, svcForwardSustainableCellRate=svcForwardSustainableCellRate, pdhDS3LinkNo=pdhDS3LinkNo, billingControl=billingControl, cacLinkObfPvc1=cacLinkObfPvc1, sdhSAlarmLOF=sdhSAlarmLOF, sendFileSel=sendFileSel, pdsV2RxBER=pdsV2RxBER, mgmtResetStat=mgmtResetStat, plcpLOF=plcpLOF, slot0PhyState=slot0PhyState, sysAuValidity=sysAuValidity, svcQ93bStatConnAckTx=svcQ93bStatConnAckTx, frbPConfigDlci=frbPConfigDlci, billCalled=billCalled, sdhSonetSdh=sdhSonetSdh, sdcplaceholder1=sdcplaceholder1, sdhSLineFC=sdhSLineFC, ds1FerCount=ds1FerCount, clockActiveRef=clockActiveRef, vcStatRxCells=vcStatRxCells, pccIndex=pccIndex, slot0PsuVoltage=slot0PsuVoltage, slot0PhyLstChngPrevLnkStat=slot0PhyLstChngPrevLnkStat, svcQsaalStatStatTx=svcQsaalStatStatTx, e1Lb=e1Lb, locd=locd, svcBackwardCellRateTotal=svcBackwardCellRateTotal, j2AISAlarm=j2AISAlarm, pvcEntry=pvcEntry, ds1Rt=ds1Rt, inService=inService, vcStatTestErrors=vcStatTestErrors, ds1V2AISS=ds1V2AISS)
mibBuilder.exportSymbols("DV2-MIB", svcVBRHallowed=svcVBRHallowed, frbVpi=frbVpi, vcbInternalVci=vcbInternalVci, billCalledSub=billCalledSub, oamTxCount=oamTxCount, hssiClockSrc=hssiClockSrc, xpTxLowPrOver=xpTxLowPrOver, fRelStatLocSeq=fRelStatLocSeq, hssiTable=hssiTable, pvcAuxForwardPeakMode=pvcAuxForwardPeakMode, pdhPLCPUAS=pdhPLCPUAS, oamVcbAisRdiGeneration=oamVcbAisRdiGeneration, qeDocBridgeLink0Eligible=qeDocBridgeLink0Eligible, vcbBucket0Max=vcbBucket0Max, pdhE3OOFDefect=pdhE3OOFDefect, sysAuthenticateEntry=sysAuthenticateEntry, e1Table=e1Table, plppE3CLinkEnab=plppE3CLinkEnab, pvcVciEnd=pvcVciEnd, ceDstVci=ceDstVci, sbsIndex=sbsIndex, veLinkNo=veLinkNo, vidEncFrameCount=vidEncFrameCount, lmiFormat=lmiFormat, fRelStatRemMec=fRelStatRemMec, pvcDLink=pvcDLink, veStatReset=veStatReset, sValidSource=sValidSource, j2FerCount=j2FerCount, cacLinkSumE1T=cacLinkSumE1T, plppE3CTxTrcIdLH=plppE3CTxTrcIdLH, fraPStatRemAck=fraPStatRemAck, oamVcbRcvAIS_RDI=oamVcbRcvAIS_RDI, svcQ93bStatDiagTx=svcQ93bStatDiagTx, svcQsaalStatUdTx=svcQsaalStatUdTx, vidOutBuffOvf=vidOutBuffOvf, jpegReset=jpegReset, sActiveTimingSource=sActiveTimingSource, sdhSSectLOS=sdhSSectLOS, sdhSPathFERF=sdhSPathFERF, fraPConfigDxivpi=fraPConfigDxivpi, vidDigLpbk=vidDigLpbk, dataBytesSent=dataBytesSent, ds3Table=ds3Table, plppE3CLoopback=plppE3CLoopback, xpEgDiscCells=xpEgDiscCells, lmiNetSideTable=lmiNetSideTable, se1SA6=se1SA6, pvcBackwardPeakSize=pvcBackwardPeakSize, pdhDS3FEBEErrs=pdhDS3FEBEErrs, j2TxEq=j2TxEq, e1ExBER=e1ExBER, svcQsaalStatPollRx=svcQsaalStatPollRx, cacLinkReset=cacLinkReset, ds3LOSAlarm=ds3LOSAlarm, pdhE3RxTrIdUnst=pdhE3RxTrIdUnst, vcbStartTime=vcbStartTime, pdhDS3SES=pdhDS3SES, cacSapReset=cacSapReset, limSysDecompErr=limSysDecompErr, cacLinkObfSvc1=cacLinkObfSvc1, svcQ93bStatRelRx=svcQ93bStatRelRx, j2Lb=j2Lb, ds1V2UAS=ds1V2UAS, cacLinkTotalBwScrPcr=cacLinkTotalBwScrPcr, veXhInt=veXhInt, slot0PhyName=slot0PhyName, vcaBucket0Inc=vcaBucket0Inc, pcatplaceholder2=pcatplaceholder2, sdsV2RxLOS=sdsV2RxLOS, frbPStatRemPoll=frbPStatRemPoll, ds1V2TxClkSel=ds1V2TxClkSel, audFaultReason=audFaultReason, ctrlCodecType=ctrlCodecType, svcSvci=svcSvci, Hex=Hex, ds1V2LOSDefect=ds1V2LOSDefect, cacErrorCode=cacErrorCode, oamLoopbackActive=oamLoopbackActive, duplicateIpAddr=duplicateIpAddr, se1SA4=se1SA4, vidInPresent=vidInPresent, vcaDstLink=vcaDstLink, oamVcaBkwRptBip16=oamVcaBkwRptBip16, alarmStatTable=alarmStatTable, cacPerSapEntry=cacPerSapEntry, sCATBitsConfigTable=sCATBitsConfigTable, svcIntType=svcIntType, plppE3SLinkNo=plppE3SLinkNo, plppE1CTable=plppE1CTable, lFibreConfCLine=lFibreConfCLine, ds1V2Lb=ds1V2Lb, lFibreStatLinkNo=lFibreStatLinkNo, sCATcontrolTable=sCATcontrolTable, oamVcaDefectSlot=oamVcaDefectSlot, frbPStatTable=frbPStatTable, dv2AlarmHandler=dv2AlarmHandler, vcaBucket2Max=vcaBucket2Max, vidEncBitRate=vidEncBitRate, pdhDS3FarEndES=pdhDS3FarEndES, sdhSRXclock=sdhSRXclock, pCATstatusEntry=pCATstatusEntry, pdhDS3LSES=pdhDS3LSES, billingInterval=billingInterval, pdhE3ExBERDefect=pdhE3ExBERDefect, svcQ93bStatAddPtyTx=svcQ93bStatAddPtyTx, svcBackwardSustainableMode=svcBackwardSustainableMode, fraPStatRxBCnt=fraPStatRxBCnt, cePriVal=cePriVal, vidOutStand=vidOutStand, ds1PdvCount=ds1PdvCount, qeDocIpMask=qeDocIpMask, cacLinkSumE10=cacLinkSumE10, e1GappedClk=e1GappedClk, pccatbytestransferred=pccatbytestransferred, sdhSPathLOP=sdhSPathLOP, pdcclrperf=pdcclrperf, pdsV2LCVCnt=pdsV2LCVCnt, oamVcbBkwRptMisCells=oamVcbBkwRptMisCells, frbPConfigExcessB=frbPConfigExcessB, pdhDS3YellowDefect=pdhDS3YellowDefect, svcQsaalMaxPD=svcQsaalMaxPD, svcDE164=svcDE164, lFibreConfLoopback=lFibreConfLoopback, pdhPLCPEntry=pdhPLCPEntry, bill25pstfull=bill25pstfull, e3Loopback=e3Loopback, svcDuration=svcDuration, oamVcbPMBlockSize=oamVcbPMBlockSize, fraPStatRxBRate=fraPStatRxBRate, oamVcEndPoint=oamVcEndPoint, vidInFldSynErr=vidInFldSynErr, frbPConfigTable=frbPConfigTable, pccatactivate=pccatactivate, cacCommandEbtId=cacCommandEbtId, pvcMolnVci=pvcMolnVci, sysLkRxCells=sysLkRxCells, limSysFault=limSysFault, dataSta=dataSta, svcQ93bStatCallProcRx=svcQ93bStatCallProcRx, fraPStatRxFCnt=fraPStatRxFCnt, plppE3CPloadTypeLab=plppE3CPloadTypeLab, ds3Lb=ds3Lb, ds1AISAlarm=ds1AISAlarm, pdhE3Framer=pdhE3Framer, vidInWindowSize=vidInWindowSize, plppCEntry=plppCEntry, svcVBRLUBRallowed=svcVBRLUBRallowed, svcQ93bStatActive=svcQ93bStatActive, svcQsaalTmrPoll=svcQsaalTmrPoll, alarmACOEntry=alarmACOEntry, veDisCnt=veDisCnt, pvcBackwardPeakMode=pvcBackwardPeakMode, pvcAuxForwardPeakCellRate=pvcAuxForwardPeakCellRate, vcaPeakExceeds=vcaPeakExceeds, cacLinkObfPvc2=cacLinkObfPvc2, dv2Billing=dv2Billing, pdhE3Reconfig=pdhE3Reconfig, plppSTXCells=plppSTXCells, sPvcSourceVpi=sPvcSourceVpi, vcaBucketControl=vcaBucketControl, sbcds1V2TxLineLn=sbcds1V2TxLineLn, svcQsaalStatMdRx=svcQsaalStatMdRx, qeDocTunRemNet=qeDocTunRemNet, sPvcEntry=sPvcEntry, sPvcTargetVci=sPvcTargetVci, qeDocTunLocNet=qeDocTunLocNet, pntmoscstatus=pntmoscstatus, pdhPLCPLOFAlarm=pdhPLCPLOFAlarm, svcQ93bStatLstCauseTx=svcQ93bStatLstCauseTx, plppV2SRXCells=plppV2SRXCells, fraPStatTxBRate=fraPStatTxBRate, svcQ93bStatConnTx=svcQ93bStatConnTx, ds3ExBER=ds3ExBER, qeDocBridgeLinkNo=qeDocBridgeLinkNo, sdcds1V2Coding=sdcds1V2Coding, sPvcId=sPvcId, pvcForwardPeakMode=pvcForwardPeakMode, pdhPLCPLinkState=pdhPLCPLinkState, ds1V2SES=ds1V2SES, e3Entry=e3Entry, ds1TxClkSel=ds1TxClkSel, svcDvpi=svcDvpi, dv2SDH=dv2SDH, slot0PhyLink3State=slot0PhyLink3State, alarmNodeMajor=alarmNodeMajor, dv2Trace=dv2Trace, ceEntry=ceEntry, pvcDvci=pvcDvci, plppE3SE3FrameErrs=plppE3SE3FrameErrs, billFwdQOS=billFwdQOS, pbslineok=pbslineok, hssiLOSDefect=hssiLOSDefect, svcCurSapConn=svcCurSapConn, audMuteInReq=audMuteInReq, se1SA8=se1SA8, e1LOF=e1LOF, audOutMuteStat=audOutMuteStat, sysInitialPorts=sysInitialPorts, sPvcBackwardSustainableCellRate=sPvcBackwardSustainableCellRate, fraPStatPvcStat=fraPStatPvcStat, soTxEn0=soTxEn0, fraPStatLocStat=fraPStatLocStat, xpTxHighPrOver=xpTxHighPrOver, plppV2STXclock=plppV2STXclock, scatplaceholder2=scatplaceholder2, ssCATBootrevision=ssCATBootrevision, fRelConfLinkEnab=fRelConfLinkEnab, sdhSCellDelState=sdhSCellDelState, svcQ93bTmrT398=svcQ93bTmrT398, e3LOS=e3LOS, billEndM2=billEndM2, sdhCTable=sdhCTable, sdhSExBERDefect=sdhSExBERDefect, pdhE3LSES=pdhE3LSES, pdhDS3CbitPrtyErrs=pdhDS3CbitPrtyErrs, fRelConfLinkSpeed=fRelConfLinkSpeed, svcQsaalStatClr=svcQsaalStatClr, audState=audState, ctrlFraming=ctrlFraming, vcaTxGCells=vcaTxGCells, oamVcaPMState=oamVcaPMState, frbPStatRemSeq=frbPStatRemSeq, ceMode=ceMode, sPvcForwardMaxBurstSize=sPvcForwardMaxBurstSize, slot0PhyReqState=slot0PhyReqState, xpIgDiscCells=xpIgDiscCells, pdsV2RxLOS=pdsV2RxLOS, sPvcNumberRetries=sPvcNumberRetries, pdhDS3UAS=pdhDS3UAS, pCATDerStatusEntry=pCATDerStatusEntry, veResCnt=veResCnt, pvcVpEnd=pvcVpEnd, pdcds1V2Coding=pdcds1V2Coding, pvcVpiEnd=pvcVpiEnd, slot0PhyLink1State=slot0PhyLink1State, j2TxAIS=j2TxAIS, forceSecondary=forceSecondary, sysLkState=sysLkState, limHwRev=limHwRev, plppV2SDs3ParityErrs=plppV2SDs3ParityErrs, slot0PhyDocSerNo=slot0PhyDocSerNo, vcbBucket2CV=vcbBucket2CV, frbPStatRemAck=frbPStatRemAck, plppE3CScrambler=plppE3CScrambler, pdhPLCPSES=pdhPLCPSES, plppSDs3RxRedAlarm=plppSDs3RxRedAlarm, plppE3SPLCPRxLof=plppE3SPLCPRxLof, limFault=limFault, pvcNumLeaves=pvcNumLeaves, sbcV2FRMRMode=sbcV2FRMRMode, pbcV2FRMRMode=pbcV2FRMRMode, qeDocTunIndex=qeDocTunIndex, pbsV2LCVCnt=pbsV2LCVCnt)
mibBuilder.exportSymbols("DV2-MIB", sdhSAlarmLOS=sdhSAlarmLOS, slotMajorStatus=slotMajorStatus, xpStatEntry=xpStatEntry, userInputNo=userInputNo, pdhPLCPSmdsMode=pdhPLCPSmdsMode, fRelConfT392=fRelConfT392, pdsV2RxLOSCnt=pdsV2RxLOSCnt, j2Entry=j2Entry, billCallingSub=billCallingSub, pSlotNumber=pSlotNumber, ds1YellowDefect=ds1YellowDefect, sCATcontrolEntry=sCATcontrolEntry, lmiPollPeriod=lmiPollPeriod, veTxCnt=veTxCnt, hssiCtrTestMode=hssiCtrTestMode, svcSigVpi=svcSigVpi, e3ExBER=e3ExBER, vcStatTxSeqNo=vcStatTxSeqNo, psuAbsent=psuAbsent, link2MajorStatus=link2MajorStatus, oamVcaAisRdiState=oamVcaAisRdiState, svcCDVTSize=svcCDVTSize, plppCCLine=plppCCLine, dv2Slot0=dv2Slot0, sysLkClockSrc=sysLkClockSrc, dv2Svc=dv2Svc, ds1AISS=ds1AISS, e3LimOK=e3LimOK, sPvcAddress=sPvcAddress, svcQ93bStatDropPtyTx=svcQ93bStatDropPtyTx, ceTxCnt=ceTxCnt, scfEntry=scfEntry, plppSTable=plppSTable, billCalling=billCalling, qeDocTunLocMask=qeDocTunLocMask, vcDocSaddr=vcDocSaddr, sscatlimtype=sscatlimtype, sysLKEgEFCIThreshold=sysLKEgEFCIThreshold, ds3RXLos=ds3RXLos, sysLinkEntry=sysLinkEntry, slot0PsuFanASpeed=slot0PsuFanASpeed, sCATStratum3ConfigEntry=sCATStratum3ConfigEntry, ds1V2BERAlarm=ds1V2BERAlarm, ctrlChnlLpbk=ctrlChnlLpbk, lmiVpi=lmiVpi, userStatusEntry=userStatusEntry, vcbCellMask=vcbCellMask, ssCATFFrevision=ssCATFFrevision, e1LOSDefect=e1LOSDefect, oamClearStats=oamClearStats, hssiLOS=hssiLOS, frbPStatRxBCnt=frbPStatRxBCnt, dataCfg=dataCfg, plppE1SLinkNo=plppE1SLinkNo, sysInitialQItems=sysInitialQItems, pdhE3Lcvs=pdhE3Lcvs, vidOutFailReason=vidOutFailReason, pvcAuxBackwardPeakSize=pvcAuxBackwardPeakSize, sdhSSectLOF=sdhSSectLOF, e1LOSAlarm=e1LOSAlarm, sdhSPathFarEndES=sdhSPathFarEndES, limAction=limAction, plppE3SLcd=plppE3SLcd, ds1V2OOFDefect=ds1V2OOFDefect, vcDocPriority=vcDocPriority, svcQ93bStatStatTx=svcQ93bStatStatTx, oamVcbBkwRptSevErr=oamVcbBkwRptSevErr, pdhDS3FEACTxmt=pdhDS3FEACTxmt, pdhDS3FarEndSES=pdhDS3FarEndSES, dv2CE=dv2CE, plppSDs3FEBEErrs=plppSDs3FEBEErrs, e3Table=e3Table, plppV2CEntry=plppV2CEntry, traceIp=traceIp, pActiveTimingSource=pActiveTimingSource, xpRxOverflow=xpRxOverflow, sysCompileTime=sysCompileTime, qeDocTunTable=qeDocTunTable, sbcplaceholder1=sbcplaceholder1, vhcontrol=vhcontrol, clksTxTimingRef=clksTxTimingRef, pdhE3ExBERAlarm=pdhE3ExBERAlarm, e1AIS=e1AIS, plppE3STXclock=plppE3STXclock, vidTable=vidTable, pCATstatusTable=pCATstatusTable, veCDVMax=veCDVMax, e1TS16PayLd=e1TS16PayLd, j2AIS=j2AIS, fraPConfigEntry=fraPConfigEntry, lmiUserSideLinkNo=lmiUserSideLinkNo, scatstr3oscillator=scatstr3oscillator, svcSE164Sub=svcSE164Sub, limSCmgmt=limSCmgmt, svcVpiMapping=svcVpiMapping, svcLoadRoute=svcLoadRoute, ds1OOFDefect=ds1OOFDefect, slot0PhyLinkedSlot=slot0PhyLinkedSlot, pbitslineok=pbitslineok, svcQ93bStatAccumalative=svcQ93bStatAccumalative, lmiPrefixMod=lmiPrefixMod, lmiNetSideLinkNo=lmiNetSideLinkNo, sdcds1V2TxLineLn=sdcds1V2TxLineLn, vcbBucket0Inc=vcbBucket0Inc, svcSAP=svcSAP, pdhDS3ExBERDefect=pdhDS3ExBERDefect, qeDocTunCallState=qeDocTunCallState, fRelStatRemStartT=fRelStatRemStartT, sdhSPathFarEndSES=sdhSPathFarEndSES, oamLoopbackVci=oamLoopbackVci, ceStatTable=ceStatTable, sdhPathAIS=sdhPathAIS, vidCompQual=vidCompQual, mgmtRemoteAddress=mgmtRemoteAddress, pdhPLCPFrameErrs=pdhPLCPFrameErrs, pvcAuxBackwardSustainedMode=pvcAuxBackwardSustainedMode, link2CritStatus=link2CritStatus, fraPConfigTable=fraPConfigTable, pdhE3TxTrcIdLH=pdhE3TxTrcIdLH, pvcLowPriOverbookFactor=pvcLowPriOverbookFactor, VirtualCircuitIdentifier=VirtualCircuitIdentifier, vcbDstVpi=vcbDstVpi, ds1Tr=ds1Tr, oamVcaCC=oamVcaCC, lmiUserSideTable=lmiUserSideTable, svcMaxPtMptConnections=svcMaxPtMptConnections, scfContr=scfContr, pdhDS3ExBERAlarm=pdhDS3ExBERAlarm, vcbRxGCells=vcbRxGCells, plppE3CTxTrlTrcIdLen=plppE3CTxTrlTrcIdLen, vidOutPktsInBuff=vidOutPktsInBuff, billingRecFail=billingRecFail, limSysState=limSysState, pdhPLCPTable=pdhPLCPTable, svcVBRLUBRsubtractpercent=svcVBRLUBRsubtractpercent, pdhPLCP0x55=pdhPLCP0x55, sbsV2RxBERCnt=sbsV2RxBERCnt, dv2=dv2, pvcBackwardSustainedSize=pvcBackwardSustainedSize, qeDocTunRemMask=qeDocTunRemMask, svcPolicing=svcPolicing, pdhPLCPYellowDefect=pdhPLCPYellowDefect, pSysRefTimingOk=pSysRefTimingOk, ceStatPortNo=ceStatPortNo, plppV2SLinkNo=plppV2SLinkNo, ds3Reconfig=ds3Reconfig, svcQ93bStatAddPtyAckRx=svcQ93bStatAddPtyAckRx, svcSigVci=svcSigVci, sPvcCauseDiag=sPvcCauseDiag, vidOutChnlLock=vidOutChnlLock, oamVcbDefectType=oamVcbDefectType, slot0PhySlotNo=slot0PhySlotNo, svcQ93bStatLstDiagTx=svcQ93bStatLstDiagTx, fraPStatTable=fraPStatTable, pdhDS3YellowAlarm=pdhDS3YellowAlarm, vidInJpeg=vidInJpeg, pCATBitsStatusEntry=pCATBitsStatusEntry, alrACOlink1ACO=alrACOlink1ACO, oamVcaTrapEnable=oamVcaTrapEnable, ds3V2LimType=ds3V2LimType, secondaryClockTable=secondaryClockTable, soLinkNo=soLinkNo, dv2Cac=dv2Cac, dataHDLCcheck=dataHDLCcheck, oamLoopbackEntry=oamLoopbackEntry, fraPStatLastChangeM2=fraPStatLastChangeM2, e1TxClkSel=e1TxClkSel, oamEntry=oamEntry, frbPStatTxFRate=frbPStatTxFRate, ceLinkNo=ceLinkNo, svcResourceTable=svcResourceTable, plppV2SDs3RxAIS=plppV2SDs3RxAIS, pdhDS3Reconfig=pdhDS3Reconfig, pdhDS3AISDefect=pdhDS3AISDefect, pdslineok=pdslineok, reset040=reset040, ds1Table=ds1Table, svcBackwardPeakMode=svcBackwardPeakMode, lmiConnectivity=lmiConnectivity, svcQ93bStatEntry=svcQ93bStatEntry, qeDocBridgeEnable=qeDocBridgeEnable, vidInImageErr=vidInImageErr, ds1V2Entry=ds1V2Entry, svcQsaalStatUstatTx=svcQsaalStatUstatTx, hssiLinkNo=hssiLinkNo, frbPStatPvcStat=frbPStatPvcStat, scfTable=scfTable, plppV2SFEBEErrs=plppV2SFEBEErrs, oamVcbPM=oamVcbPM, sdsV2RxLOSCnt=sdsV2RxLOSCnt, qeDocTunLink0Eligible=qeDocTunLink0Eligible, pvcAuxBackwardSustainedCellRate=pvcAuxBackwardSustainedCellRate, fRelayConfEntry=fRelayConfEntry, e1SLcvs=e1SLcvs, ds3V2TxClkSel=ds3V2TxClkSel, cacSapTotalBwScrPcr=cacSapTotalBwScrPcr, ds1V2ClrStats=ds1V2ClrStats, plppCLoopback=plppCLoopback, lFibreStatCLines=lFibreStatCLines, plppSDs3ParityErrs=plppSDs3ParityErrs, slot0InUse=slot0InUse, plppE1CSmdsMode=plppE1CSmdsMode, lmiUserSideEntry=lmiUserSideEntry, cacLinkSumE2T=cacLinkSumE2T, ds3V2Reconfig=ds3V2Reconfig, frbPStatDlci=frbPStatDlci, fraPStatLocErrThr=fraPStatLocErrThr, pvcDirection=pvcDirection, vidOutCfg=vidOutCfg, pvcSLink=pvcSLink, oamLoopbackTable=oamLoopbackTable, pdhPLCPLinkEnable=pdhPLCPLinkEnable, oamVcaCCState=oamVcaCCState, plppsRxPloadTypeLabMis=plppsRxPloadTypeLabMis, slot0PhyDlim=slot0PhyDlim, vidOutUnLpb=vidOutUnLpb, slot0PsuTestFault=slot0PsuTestFault, vidInRate=vidInRate, frbPStatLocSeq=frbPStatLocSeq, sdhPLM=sdhPLM, svcVBRMallowed=svcVBRMallowed, psCATHWrevision=psCATHWrevision, fRelStatLocMec=fRelStatLocMec, svcQsaalStatBgrejTx=svcQsaalStatBgrejTx, pdhE3LES=pdhE3LES, fRelStatLinkNo=fRelStatLinkNo, pdhPLCPLinkStatusAffect=pdhPLCPLinkStatusAffect, sdhSPathFEBE=sdhSPathFEBE, e1SFEBEErrs=e1SFEBEErrs, spvcFail=spvcFail, sPvcForwardPeakCellRate=sPvcForwardPeakCellRate, dv2Lmi=dv2Lmi, ds1V2Reconfig=ds1V2Reconfig, billDirControl=billDirControl, linkChanged=linkChanged, ds1ExBERAlarm=ds1ExBERAlarm, veFifoLvlCnt=veFifoLvlCnt, slot0IsStandbySlot0=slot0IsStandbySlot0, oamVcaDefectType=oamVcaDefectType, sdhSLineFarEndSES=sdhSLineFarEndSES, vidInSta=vidInSta, oamLoopbackNumCellsSent=oamLoopbackNumCellsSent, sdhSLineSES=sdhSLineSES, veMulticast=veMulticast, limSCmgmtData=limSCmgmtData, ds1V2FerfAlarm=ds1V2FerfAlarm, ceOflCnt=ceOflCnt, hssiDTENotReady=hssiDTENotReady, svcForwardPeakCellRate=svcForwardPeakCellRate, svcBackwardSustainableCellRate=svcBackwardSustainableCellRate, fRelStatLocPoll=fRelStatLocPoll, vcaTxGCellsClp1=vcaTxGCellsClp1, qeDocTunPriority=qeDocTunPriority, plppE3SRxLOF=plppE3SRxLOF)
mibBuilder.exportSymbols("DV2-MIB", sdslineok=sdslineok, pdhDS3Lcvs=pdhDS3Lcvs, svcQ93bStatLstCauseRx=svcQ93bStatLstCauseRx, sPvcTable=sPvcTable, sysDbIndex=sysDbIndex, sysConfigChanged=sysConfigChanged, pdhPLCPYellowAlarm=pdhPLCPYellowAlarm, pvcForwardSustainedCellRate=pvcForwardSustainedCellRate, switchFabricSwap=switchFabricSwap, ds1v2AIS=ds1v2AIS, sysLKEgFIFODepth=sysLKEgFIFODepth, fraPConfigExcessB=fraPConfigExcessB, ds1V2FerCount=ds1V2FerCount, qeDocTunClp=qeDocTunClp, svcQ93bStatStatEnqTx=svcQ93bStatStatEnqTx, sysCurrentQs=sysCurrentQs, pdhE3RxTrlTrc=pdhE3RxTrlTrc, ds1V2OCfCount=ds1V2OCfCount, pdhE3LOSAlarm=pdhE3LOSAlarm, ceStatEntry=ceStatEntry, traceUdp=traceUdp, sPvcForwardSustainableMode=sPvcForwardSustainableMode, svcQsaalStatSdTx=svcQsaalStatSdTx, pdhE3FERFAlarm=pdhE3FERFAlarm, traceSnmp=traceSnmp, sbsV2RxOOFCnt=sbsV2RxOOFCnt, oamLoopbackResult=oamLoopbackResult, plppsRxTrIdMis=plppsRxTrIdMis, slot0IntIPMask=slot0IntIPMask, audInLoopBack=audInLoopBack, sdhSPathLabelMM=sdhSPathLabelMM, fRelStatRemErrThr=fRelStatRemErrThr, fraPConfigDximode=fraPConfigDximode, fraVci=fraVci, svcQsaalStatRsTx=svcQsaalStatRsTx, sdhLineAIS=sdhLineAIS, sdhLineYellow=sdhLineYellow, pvcAuxBackwardPeakMode=pvcAuxBackwardPeakMode, soTimingRef=soTimingRef, billStartM2=billStartM2, sdhReconfig=sdhReconfig, alrACOslotACO=alrACOslotACO, ds1SES=ds1SES, ds3V2LimOK=ds3V2LimOK, fRelStatRemState=fRelStatRemState, sysLkRxRate=sysLkRxRate, dataResetStat=dataResetStat, svcSAPStatus=svcSAPStatus, vidInPeakBitRate=vidInPeakBitRate, svcQ93bStatRstAckTx=svcQ93bStatRstAckTx, plppV2SDs3FEBEErrs=plppV2SDs3FEBEErrs, frbPStatLocMec=frbPStatLocMec, qeDocTunName=qeDocTunName, ds1V2TxAIS=ds1V2TxAIS, billSvci=billSvci, sCATDerStatusEntry=sCATDerStatusEntry, sCATDerConfigEntry=sCATDerConfigEntry, j2TS97TS98=j2TS97TS98, fRelStatLocStartT=fRelStatLocStartT, alrStatSlotNo=alrStatSlotNo, ds1V2TxLineLn=ds1V2TxLineLn, ceDstVpi=ceDstVpi, plppSDs3RxYellowAlarm=plppSDs3RxYellowAlarm, e3LOSDefect=e3LOSDefect, cacLinkNo=cacLinkNo, sdhLOS=sdhLOS, e1ClrStats=e1ClrStats, ds3V2LinkNo=ds3V2LinkNo, oamVcbDefectNode=oamVcbDefectNode, mgmtBytesSent=mgmtBytesSent, sbcds1V2Coding=sbcds1V2Coding, plppE1STable=plppE1STable, sSysRefTimingOk=sSysRefTimingOk, userInputAlrClass=userInputAlrClass, audMuteOutStat=audMuteOutStat, pcatplaceholder1=pcatplaceholder1, svcBackwardCellRateAvailable=svcBackwardCellRateAvailable, svcQsaalStatOutPduErr=svcQsaalStatOutPduErr, dv2QeDoc=dv2QeDoc, pCATStratum3StatusEntry=pCATStratum3StatusEntry, frbPConfigCommitB=frbPConfigCommitB, sysCurrentMemB=sysCurrentMemB, pdhDS3Table=pdhDS3Table, svcType=svcType, dataChnlStat=dataChnlStat, vcaBucket1Max=vcaBucket1Max, vidOutIdleSrc=vidOutIdleSrc, svcQ93bStatDropPtyAckTx=svcQ93bStatDropPtyAckTx, pccatlimtype=pccatlimtype, DateAndTime=DateAndTime, primaryEntry=primaryEntry, ceStatRxState=ceStatRxState, svcInternalVpi=svcInternalVpi, oamVcbVpi=oamVcbVpi, vcStatRxSeqNo=vcStatRxSeqNo, sdhSAlarmLOP=sdhSAlarmLOP, frbPConfigValidity=frbPConfigValidity, plppV2CDS3Framer=plppV2CDS3Framer, link3CritStatus=link3CritStatus, lmiLinkMgmt=lmiLinkMgmt, scfLOS=scfLOS, ds1LOSDefect=ds1LOSDefect, clksSysRefLinkNum=clksSysRefLinkNum, sysAuCommunity=sysAuCommunity, sysLKEgLogBuffer=sysLKEgLogBuffer, pdhPLCPHCSErrs=pdhPLCPHCSErrs, qeDocTunLink3Eligible=qeDocTunLink3Eligible, sdhSLineFarEndFC=sdhSLineFarEndFC, j2RAlmDefect=j2RAlmDefect, svcQ93bTmrT303=svcQ93bTmrT303, ds1V2Table=ds1V2Table, plppE3SRxAIS=plppE3SRxAIS, plppV2SDs3FEACTxmt=plppV2SDs3FEACTxmt, svcQ93bStatConnRx=svcQ93bStatConnRx, ds1AISDefect=ds1AISDefect, secondaryEntry=secondaryEntry, hssiLocalLoopback=hssiLocalLoopback, dTLLoadFail=dTLLoadFail, audInSta=audInSta, sysClkAlarmErr=sysClkAlarmErr, sdsIndex=sdsIndex, mgmtPortSpeed=mgmtPortSpeed, j2AISDefect=j2AISDefect, pdhPLCPMode=pdhPLCPMode, se1SA7=se1SA7, svcLinkNo=svcLinkNo, cacCurrentSapUsage=cacCurrentSapUsage, pvcBackwardSustainedCellRate=pvcBackwardSustainedCellRate, sdhSLineBIP24=sdhSLineBIP24, svcForwardPeakMode=svcForwardPeakMode, pvcAuxForwardSustainedSize=pvcAuxForwardSustainedSize, plppE1STXCells=plppE1STXCells, billBwdMBS=billBwdMBS, traceCat=traceCat, plppSBIP8Errs=plppSBIP8Errs, pvcResourceTable=pvcResourceTable, vcaVpi=vcaVpi, e3TxAIS=e3TxAIS, vidInCfg=vidInCfg, j2LcvCount=j2LcvCount, audCommMode=audCommMode, ds1LOS=ds1LOS, svcDvci=svcDvci, svcQ93bStatRstRx=svcQ93bStatRstRx, billByteOut=billByteOut, ds3Entry=ds3Entry, vcStatFifoCount=vcStatFifoCount, frbPStatLocPoll=frbPStatLocPoll, ds1LOFAlarm=ds1LOFAlarm, vidInAnLpbk=vidInAnLpbk, plppE3STXCells=plppE3STXCells, qeDocTunRemStartSkt=qeDocTunRemStartSkt, pvcBackwardSustainedMode=pvcBackwardSustainedMode, sPvcRetry=sPvcRetry, svcAutoSapOff=svcAutoSapOff, slot0PhyStateChange=slot0PhyStateChange, sysCurrentPorts=sysCurrentPorts, sysAuAccess=sysAuAccess, scfFirmwareRev=scfFirmwareRev, pdhPLCPClear=pdhPLCPClear, svcQsaalUpDown=svcQsaalUpDown, pcatstr3forcesecondary=pcatstr3forcesecondary, sdhSLineFarEndUAS=sdhSLineFarEndUAS, qeDocTunSlot=qeDocTunSlot, cacLinkVersion=cacLinkVersion, j2RAlmAlarm=j2RAlmAlarm, pvcForwardPeakSize=pvcForwardPeakSize, ds3FEFrmrDif=ds3FEFrmrDif, frbPStatRxBRate=frbPStatRxBRate, scfQualClock=scfQualClock, vcStatInvented=vcStatInvented, dataMask=dataMask, pvcMulticast=pvcMulticast, billFrameOut=billFrameOut, e3Reconfig=e3Reconfig, plppE3C0x55=plppE3C0x55, ceXhInt=ceXhInt, vidInCompCnt=vidInCompCnt, sysLastTrapMessage=sysLastTrapMessage, svcQ93bStatLstDiagRx=svcQ93bStatLstDiagRx, svcQsaalStatBgrejRx=svcQsaalStatBgrejRx, svcQ93bStatRstAckRx=svcQ93bStatRstAckRx, svcQ93bStatTable=svcQ93bStatTable, ds3V2Lb=ds3V2Lb, billDslot=billDslot, ds1ClrStats=ds1ClrStats, svcQsaalStatRsRx=svcQsaalStatRsRx, svcHalfConnect=svcHalfConnect, pdhPLCPLOCDDefect=pdhPLCPLOCDDefect, pdhPLCPFEUAS=pdhPLCPFEUAS, oamVcbDefectLink=oamVcbDefectLink, vcaInternalVci=vcaInternalVci, lmiVci=lmiVci, link1CritStatus=link1CritStatus, plppE1SRxLOS=plppE1SRxLOS, audEntry=audEntry, slot0ToUse=slot0ToUse, dv2PDH=dv2PDH, oamLoopbackLocId=oamLoopbackLocId, slot0PhyType=slot0PhyType, scatcommand=scatcommand, fraPStatDlci=fraPStatDlci, ceClkSel=ceClkSel, lmiUserSideAddress=lmiUserSideAddress, limSysVideoIn=limSysVideoIn, svcQsaalTmrCC=svcQsaalTmrCC, sSlotNumber=sSlotNumber, plppV2SDs3Lcvs=plppV2SDs3Lcvs, plppE3CTxmtTimMk=plppE3CTxmtTimMk, sdhSExBERAlarm=sdhSExBERAlarm, svcQ93bStatCallProcTx=svcQ93bStatCallProcTx, fRelStatRemAck=fRelStatRemAck, sdhSPathSES=sdhSPathSES, svcQsaalStatStatRx=svcQsaalStatStatRx, hssiLOSAlarm=hssiLOSAlarm, slot0LecsESI=slot0LecsESI, dv2System=dv2System, restart040=restart040, vidInAvgBitRate=vidInAvgBitRate, alcTxError=alcTxError, vcDocLinkSpeed=vcDocLinkSpeed, ceDisCnt=ceDisCnt, vcDocLowWater=vcDocLowWater, sysLastResetTimeM2=sysLastResetTimeM2, scatstr3listener=scatstr3listener, slot0redmode=slot0redmode, dv2FrRelay=dv2FrRelay, billFwdMBS=billFwdMBS, sdhAPSOnOff=sdhAPSOnOff, ceCDV=ceCDV, ds1LineLength=ds1LineLength, fRelConfN393=fRelConfN393, svcStatus=svcStatus, frbPStatDERxF=frbPStatDERxF, ds1Yellow=ds1Yellow, sdsV2RxOOFCnt=sdsV2RxOOFCnt, svcSSlot=svcSSlot, sdhSAlarmPathAIS=sdhSAlarmPathAIS, plppV2CCPLCPMode=plppV2CCPLCPMode, vidOutChnlErr=vidOutChnlErr, cacLinkSignalMode=cacLinkSignalMode, sysLkRxMaxRate=sysLkRxMaxRate, fraPStatDERxF=fraPStatDERxF, qeDocTunOutFrames=qeDocTunOutFrames, pdhE3AISS=pdhE3AISS, hssiDTEReady=hssiDTEReady, xpDocErrors=xpDocErrors, pcatforcesecstr3=pcatforcesecstr3, billBwdSCR=billBwdSCR, audOutLock=audOutLock, ctrlCodecReq=ctrlCodecReq, sdhSAlarmPathRFI=sdhSAlarmPathRFI, pdhPLCPPhyMode=pdhPLCPPhyMode, audOutCfg=audOutCfg)
mibBuilder.exportSymbols("DV2-MIB", plppE3CSmdsMode=plppE3CSmdsMode, ds1UAS=ds1UAS, vcStatEntry=vcStatEntry, limSysVideoOut=limSysVideoOut, dataTable=dataTable, svcQsaalStatUstatRx=svcQsaalStatUstatRx, sscaterrorcode=sscaterrorcode, billDvci=billDvci, audInDelay=audInDelay, vidInFailReason=vidInFailReason, qeDocBridgeLink3Eligible=qeDocBridgeLink3Eligible, plppE3SRxTrlTrc=plppE3SRxTrlTrc, vidViewPip=vidViewPip, plppCLinkNo=plppCLinkNo, billDvpi=billDvpi, vidOutSrcSts=vidOutSrcSts, vhmgmt=vhmgmt, ctrlFaultReason=ctrlFaultReason, lmiEsi=lmiEsi, plppSDs3FrameErrs=plppSDs3FrameErrs, dataBytesRcvd=dataBytesRcvd, vcbTxGCells=vcbTxGCells, sdhSSectSES=sdhSSectSES, e1FRMRMode=e1FRMRMode, oamVcbTable=oamVcbTable, cacLinkObfSvc2=cacLinkObfSvc2, pCATBitsConfigEntry=pCATBitsConfigEntry, svcQsaalStatBgnTx=svcQsaalStatBgnTx, pdhDS3AISAlarm=pdhDS3AISAlarm, j2SES=j2SES, frbPConfigPriority=frbPConfigPriority, sdsV2RxOOF=sdsV2RxOOF, pdhDS3RxIDL=pdhDS3RxIDL, plppE1SRXCells=plppE1SRXCells, e3Yellow=e3Yellow, ceRxCnt=ceRxCnt, mjlimSystem=mjlimSystem, j2LinkNo=j2LinkNo, Q93bCauseDiag=Q93bCauseDiag, svcSwtch=svcSwtch, vidInSubSample=vidInSubSample, billCellInC=billCellInC, slot0PhySwVer=slot0PhySwVer, oamVcbCCState=oamVcbCCState, fraPStatDisRxF=fraPStatDisRxF, qeDocTunLocEndSkt=qeDocTunLocEndSkt, fraPConfigCommitB=fraPConfigCommitB, vcaRxGCells=vcaRxGCells, plppE1SHCSErrs=plppE1SHCSErrs, fraPStatLocSeq=fraPStatLocSeq, pscatplaceholder1=pscatplaceholder1, vcaType=vcaType, frbPStatTxBCnt=frbPStatTxBCnt, dataEntry=dataEntry, oamLastTxType=oamLastTxType, ds3V2LOSAlarm=ds3V2LOSAlarm, pscatfilestatus=pscatfilestatus, sbcclrperf=sbcclrperf, j2Reconfig=j2Reconfig, sCATstatusTable=sCATstatusTable, pdhPLCPScrambler=pdhPLCPScrambler, oamLastTxVci=oamLastTxVci, vcStatReSync=vcStatReSync, pvcAuxBackwardSustainedSize=pvcAuxBackwardSustainedSize, e3EQSelect=e3EQSelect, plppE3CFramer=plppE3CFramer, soTxEn1=soTxEn1, vidTxVidReq=vidTxVidReq, sbsV2RxLOSCnt=sbsV2RxLOSCnt, pvcAuxForwardSustainedMode=pvcAuxForwardSustainedMode, plppE3CLinkNo=plppE3CLinkNo, pdsV2RxOOF=pdsV2RxOOF, sbsV2RxAIS=sbsV2RxAIS, userstatus2=userstatus2, spvcCallClr=spvcCallClr, slotCritStatus=slotCritStatus, e1TxAIS=e1TxAIS, pbcreconfigure=pbcreconfigure, ds1AIS=ds1AIS, e1ES=e1ES, ds1ExBERDefect=ds1ExBERDefect, alrACOlink0ACO=alrACOlink0ACO, plppV2SHCSErrs=plppV2SHCSErrs, pbsIndex=pbsIndex, ds1v2LOS=ds1v2LOS, fraPConfigDxivci=fraPConfigDxivci, ceMulticast=ceMulticast, vcbBucket3Inc=vcbBucket3Inc, plppC0x55=plppC0x55, pvcBackwardPeakCellRate=pvcBackwardPeakCellRate, lim_oper=lim_oper, vidOutPackets=vidOutPackets, j2QualClock=j2QualClock, pdhE3Table=pdhE3Table, pOnOffLine=pOnOffLine, ds1V2FerfDefect=ds1V2FerfDefect, pscaterrorcode=pscaterrorcode, fRelStatRemSeq=fRelStatRemSeq, fraPStatLocStartT=fraPStatLocStartT, oamVcaRcvAIS_RDI=oamVcaRcvAIS_RDI, pdhE3LOSDefect=pdhE3LOSDefect, pdhDS3LOSAlarm=pdhDS3LOSAlarm, sdhSTXclock=sdhSTXclock, ds1v2Yellow=ds1v2Yellow, dv2PLPP=dv2PLPP, ds1V2LOFAlarm=ds1V2LOFAlarm, svcQsaalTmrKeepAlive=svcQsaalTmrKeepAlive, vcStatUFlow=vcStatUFlow, slot0PsuEntry=slot0PsuEntry, oamVcaBkwRptSevErr=oamVcaBkwRptSevErr, xpLowPriorityFifo=xpLowPriorityFifo, sysDbInitial=sysDbInitial, pccatsendcode=pccatsendcode, slot0StandbyXp=slot0StandbyXp, pbsV2RxLOS=pbsV2RxLOS, qeDocTunLink1Eligible=qeDocTunLink1Eligible, oamAisRdiGeneration=oamAisRdiGeneration, slot0PhyLink2State=slot0PhyLink2State, plppE1C0x55=plppE1C0x55, vcDocLinkNo=vcDocLinkNo, svcMaxPtMptParties=svcMaxPtMptParties, svcRetryPeriod=svcRetryPeriod, fRelStatLocErrThr=fRelStatLocErrThr, svcMaxSapConn=svcMaxSapConn, frbPStatRemErrThr=frbPStatRemErrThr, j2LOS=j2LOS, plppE3CTable=plppE3CTable, vidInCurFrameRate=vidInCurFrameRate, frbPStatLocErrThr=frbPStatLocErrThr, sdcclrperf=sdcclrperf, audOutDelay=audOutDelay, hssiLinkReady=hssiLinkReady, slot0PhyMacAddress=slot0PhyMacAddress, sccatfilexferstat=sccatfilexferstat, pCATcontrolEntry=pCATcontrolEntry, fRelConfLinkNo=fRelConfLinkNo, slot0PsuIndex=slot0PsuIndex, pdhPLCPFEES=pdhPLCPFEES, pdhE3LOFAlarm=pdhE3LOFAlarm, oamLoopbackMaxNumCells=oamLoopbackMaxNumCells, plppSFrameErrs=plppSFrameErrs, sdsV2RxBER=sdsV2RxBER, mjlimControl=mjlimControl, sOnOffLine=sOnOffLine, plppE3SRxFERF=plppE3SRxFERF, pvcMolnVpi=pvcMolnVpi, sdhSCorrHCS=sdhSCorrHCS, svcQsaalStatOutSduDisc=svcQsaalStatOutSduDisc, pscatplaceholder2=pscatplaceholder2, ds1Entry=ds1Entry, ds3Equal=ds3Equal, vcDocFifoSize=vcDocFifoSize, ceFifoLvlCnt=ceFifoLvlCnt, fraPConfigSaddr=fraPConfigSaddr, pccatfilexferstat=pccatfilexferstat, ds3V2TxLBO=ds3V2TxLBO, plppSHCSErrs=plppSHCSErrs, pdhDS3LOFAlarm=pdhDS3LOFAlarm, fraPStatLocMec=fraPStatLocMec, pValidSource=pValidSource, internalReset=internalReset, qeDocTunVPI=qeDocTunVPI, pdhPLCPChipType=pdhPLCPChipType, sbsV2LCVCnt=sbsV2LCVCnt, j2LineSES=j2LineSES, sdhStmSts=sdhStmSts, svcQ93bStatRelTx=svcQ93bStatRelTx, ds1v2LOF=ds1v2LOF, vidOutSource=vidOutSource, sysLKIgEFCIThreshold=sysLKIgEFCIThreshold, slipIp=slipIp, vidStandard=vidStandard, lmiUserSideAddressId=lmiUserSideAddressId, svcSE164=svcSE164, audBitRate=audBitRate, plppE3SRxPloadTypeLabMis=plppE3SRxPloadTypeLabMis, j2FirmwareRev=j2FirmwareRev, maxOutstanding=maxOutstanding, plppE1CLpbk=plppE1CLpbk, sPvcCallState=sPvcCallState, sdhS2LinkNo=sdhS2LinkNo, pcatcommand=pcatcommand, frbPConfigEntry=frbPConfigEntry, oamLastRxType=oamLastRxType, vcbDstVci=vcbDstVci, svcQsaalStatBgnRx=svcQsaalStatBgnRx, pvcForwardSustainedMode=pvcForwardSustainedMode, soTable=soTable, pCATStratum3ConfigEntry=pCATStratum3ConfigEntry, ds3TXLev=ds3TXLev, sdhSLineFERF=sdhSLineFERF, svcQ93bStatStatRx=svcQ93bStatStatRx, scfLOSAlarm=scfLOSAlarm, ctrlEntry=ctrlEntry, sCATStratum3StatusTable=sCATStratum3StatusTable, cacCurrentEbtId=cacCurrentEbtId, veCDV=veCDV, plppE3SRxTrIdUnst=plppE3SRxTrIdUnst, jpegSlipMask=jpegSlipMask, pdhE3RxTrIdMis=pdhE3RxTrIdMis, plppE3SRXCells=plppE3SRXCells, dv2VcStatus=dv2VcStatus, vidOutState=vidOutState, billTrapControl=billTrapControl, oamLoopbackLinkNo=oamLoopbackLinkNo, netcomm=netcomm, ds1V2BeeCount=ds1V2BeeCount, pdhE3FERFDefect=pdhE3FERFDefect, dv2VcDoc=dv2VcDoc, billCellOutC=billCellOutC, sysInitialQs=sysInitialQs, fraPStatLocAck=fraPStatLocAck, vcbBucket2Inc=vcbBucket2Inc, frbPStatLastChangeM2=frbPStatLastChangeM2, plppV2SDs3LPBK=plppV2SDs3LPBK, vcbBucket1Inc=vcbBucket1Inc, vidOutBuffLevel=vidOutBuffLevel, lmiNetSidePrefixStatus=lmiNetSidePrefixStatus, link3MajorStatus=link3MajorStatus, qeDocTunValidity=qeDocTunValidity, veStatRxState=veStatRxState, mgmtDescr=mgmtDescr, pdsIndex=pdsIndex, billValid=billValid, svcLowPriOverbookFactor=svcLowPriOverbookFactor, pCATStratum3ConfigTable=pCATStratum3ConfigTable, vcaDstVci=vcaDstVci, j2RAlmCount=j2RAlmCount, dataIndex=dataIndex, soEntry=soEntry, plppCDS3Framer=plppCDS3Framer, oamVcbPMState=oamVcbPMState, cePvcValid=cePvcValid, lmiNoRspDown=lmiNoRspDown, vcbBucket2Max=vcbBucket2Max, fRelStatLocState=fRelStatLocState, oamVcbBkwRptLosCells=oamVcbBkwRptLosCells, userInputActiveState=userInputActiveState, vcDocVci=vcDocVci, sdhCLoopDiag=sdhCLoopDiag, frbPStatLocStartT=frbPStatLocStartT, plppV2CLoopback=plppV2CLoopback, sdhCLpbkTimeout=sdhCLpbkTimeout, ds1V2LineSES=ds1V2LineSES, ds1v2ExBER=ds1v2ExBER, sysDbEntry=sysDbEntry, svcCBRallowed=svcCBRallowed, fraPStatRemErrThr=fraPStatRemErrThr, billLost=billLost, frbPStatRxFRate=frbPStatRxFRate, ds3RXErr=ds3RXErr, sdhSPathES=sdhSPathES, svcQsaalStatRsakTx=svcQsaalStatRsakTx, spvcCallReset=spvcCallReset)
mibBuilder.exportSymbols("DV2-MIB", oamVcaBkwRptMisCells=oamVcaBkwRptMisCells, sdhSEntry=sdhSEntry, pvcTable=pvcTable, sdhSPathUAS=sdhSPathUAS, sendFileBytes=sendFileBytes, audOutDigLpbk=audOutDigLpbk, e1SFrameErrs=e1SFrameErrs, ss3cIndex=ss3cIndex, vidInCompErr=vidInCompErr, plppV2CLinkEnab=plppV2CLinkEnab, frbPStatRemStartT=frbPStatRemStartT, mjlimSlipLine=mjlimSlipLine, ds1V2BERDefect=ds1V2BERDefect, veInvCnt=veInvCnt, svcQsaalStatEntry=svcQsaalStatEntry, alarmNodeACO=alarmNodeACO, veDstVci=veDstVci, sPvcQoSClass=sPvcQoSClass, pCATBitsStatusTable=pCATBitsStatusTable, plppV2SFrameErrs=plppV2SFrameErrs, link1MinorStatus=link1MinorStatus, billDlink=billDlink, pbcds1V2TxLineLn=pbcds1V2TxLineLn, vcbBucket3CV=vcbBucket3CV, vcaInternalVpi=vcaInternalVpi, svcVpEnd=svcVpEnd, jpegSlipSpeed=jpegSlipSpeed, dv2Oam=dv2Oam, fraPStatLinkState=fraPStatLinkState, pdhE3AISAlarm=pdhE3AISAlarm, plcpYellow=plcpYellow, scfLinkNo=scfLinkNo, sysLKIgCLPThreshold=sysLKIgCLPThreshold, xpRXCells=xpRXCells, vcDocHighWater=vcDocHighWater, pdhPLCPTXclock=pdhPLCPTXclock, slot0PsuFrontTooHot=slot0PsuFrontTooHot, sdhCLinkNo=sdhCLinkNo, sysLkKillLink=sysLkKillLink, fraPStatTxBCnt=fraPStatTxBCnt, vcaBucket0CV=vcaBucket0CV, dv2Message=dv2Message, ds3Err=ds3Err, dv2SystemClocks=dv2SystemClocks, frbPStatTxBRate=frbPStatTxBRate, scfLb=scfLb, plppE3CRxExTrcIdLH=plppE3CRxExTrcIdLH, plppsRxPloadTypeLabUnst=plppsRxPloadTypeLabUnst, sdhSSectBIP8=sdhSSectBIP8, j2TxClkSel=j2TxClkSel, plppE3STable=plppE3STable, svcMaxPtPtConnections=svcMaxPtPtConnections, soReconfig=soReconfig, vcaBucket3Max=vcaBucket3Max, oamLastRxVpi=oamLastRxVpi, vcStatRxState=vcStatRxState, pdhPLCPFESES=pdhPLCPFESES, routeLoadFail=routeLoadFail, svcRestart=svcRestart, cacPerSapTable=cacPerSapTable, svcQsaalStatSdpTx=svcQsaalStatSdpTx, ds3TXLoc=ds3TXLoc, sysCurrentTimeM2=sysCurrentTimeM2, e1OOFDefect=e1OOFDefect, svcQsaalStatBgakRx=svcQsaalStatBgakRx, billingTable=billingTable, pIndex=pIndex, vcbEntry=vcbEntry, plppCTxTrcId=plppCTxTrcId, pbsV2RxBER=pbsV2RxBER, lFibreConfTable=lFibreConfTable, pdhPLCPLinkNo=pdhPLCPLinkNo, sscatmode=sscatmode, slot0PsuFanCSpeed=slot0PsuFanCSpeed, pvcStatus=pvcStatus, plppE1CLinkEnab=plppE1CLinkEnab, sdhSLineFEBE=sdhSLineFEBE, vidIndex=vidIndex, oamVcbConnectionType=oamVcbConnectionType, slot0PhySlotSerNo=slot0PhySlotSerNo, vcbCellHead=vcbCellHead, slot0Address=slot0Address, svcDLink=svcDLink, plppSFEBEErrs=plppSFEBEErrs, audMuteOutReq=audMuteOutReq, link2MinorStatus=link2MinorStatus, slotNumber=slotNumber, lFibreConfLinkNo=lFibreConfLinkNo, fraPConfigValidity=fraPConfigValidity, pbsV2RxOOF=pbsV2RxOOF, hssiType=hssiType, vidOutWindowHeight=vidOutWindowHeight, plppCPloadTypeLab=plppCPloadTypeLab, plppCSmdsMode=plppCSmdsMode, plppE3SRxOOF=plppE3SRxOOF, ds1V2LcvCount=ds1V2LcvCount, pdhDS3Clear=pdhDS3Clear, ds1V2LOSAlarm=ds1V2LOSAlarm, ceDstLink=ceDstLink, sysLkTxRate=sysLkTxRate, billLinks=billLinks, sysLinkTable=sysLinkTable, j2LOSAlarm=j2LOSAlarm, plppsRxTrIdUnst=plppsRxTrIdUnst, slot0PhyLink0State=slot0PhyLink0State, oamVcaAisRdiGeneration=oamVcaAisRdiGeneration, hssiRemoteReady=hssiRemoteReady, slotChanged=slotChanged, vcaStartTime=vcaStartTime, cacLinkEnable=cacLinkEnable, qeDocTunDestAddress=qeDocTunDestAddress, slot0PhyDocHwVerNo=slot0PhyDocHwVerNo, hssiReconfig=hssiReconfig, mgmtAddressMask=mgmtAddressMask, svcQsaalStatPollTx=svcQsaalStatPollTx, plppSEntry=plppSEntry, e1ExBERDefect=e1ExBERDefect, sdhSTable=sdhSTable, vcaDstVpi=vcaDstVpi, svcQsaalStatBgakTx=svcQsaalStatBgakTx, sdhSPathBIP8=sdhSPathBIP8, frbPConfigDxivpi=frbPConfigDxivpi, billSlink=billSlink, slot0PhyEntry=slot0PhyEntry, sPvcLink=sPvcLink, lmiTable=lmiTable, pdhDS3FrameErrs=pdhDS3FrameErrs, ps3cIndex=ps3cIndex, sysInitialSema=sysInitialSema, vcbBucket1Max=vcbBucket1Max, oamLastRxVci=oamLastRxVci, sdhSPathYellow=sdhSPathYellow, pdhE3TxTrcIdUH=pdhE3TxTrcIdUH, hssiLimType=hssiLimType, e1LOS=e1LOS, badPassword=badPassword, sdsV2LCVCnt=sdsV2LCVCnt, vidInProvMode=vidInProvMode, audPrefMode=audPrefMode, redunNotAvail=redunNotAvail, ds1V2Coding=ds1V2Coding, plppCLinkEnab=plppCLinkEnab, sdhS2Table=sdhS2Table, bill75pstfull=bill75pstfull, j2ClrStats=j2ClrStats, svcHiLo=svcHiLo, ssCATHWrevision=ssCATHWrevision, svcHalfConCnt=svcHalfConCnt, qeDocIpBCast=qeDocIpBCast, cacSapSumE1T=cacSapSumE1T, e1IntrfType=e1IntrfType, vcDocClockFix=vcDocClockFix, j2UAS=j2UAS, scfLineTiming=scfLineTiming, jpegSlipIp=jpegSlipIp, ntms0doc=ntms0doc, j2LOFAlarm=j2LOFAlarm, oamVcaPMBlockSize=oamVcaPMBlockSize, limSysCompErr=limSysCompErr, dv2VE=dv2VE, vidInVcrMode=vidInVcrMode, vidOutWindowWidth=vidOutWindowWidth, qeDocIpAddress=qeDocIpAddress, ds3Tr=ds3Tr, plppV2STXCells=plppV2STXCells, sntmoper=sntmoper, e1AISS=e1AISS, ds3LOS=ds3LOS, billCellOut=billCellOut, svcQsaalTmrNoResponse=svcQsaalTmrNoResponse, pInputLineOk=pInputLineOk, pcatforcesecext=pcatforcesecext, vcDocEntry=vcDocEntry, ceStatReset=ceStatReset, veStatTxState=veStatTxState, VirtualPathIdentifier=VirtualPathIdentifier, sysMemEnd=sysMemEnd, ds1LOSAlarm=ds1LOSAlarm, pvcSvpi=pvcSvpi, psuPresent=psuPresent, vcDocVpi=vcDocVpi, e1Yellow=e1Yellow, plppCScrambler=plppCScrambler, pCATBitsConfigTable=pCATBitsConfigTable, userInputStatus=userInputStatus, sbsV2RxLOS=sbsV2RxLOS, plppV2SBIP8Errs=plppV2SBIP8Errs, billByteInC=billByteInC, svcQsaalReset=svcQsaalReset, oamVcbBkwRptBip16=oamVcbBkwRptBip16, svcQsaalStatTable=svcQsaalStatTable, sdhLOF=sdhLOF, vcbTxGCellsClp1=vcbTxGCellsClp1, ds3Rt=ds3Rt, vcStatTable=vcStatTable, plppV2SLOC=plppV2SLOC, sPvcCauseDiagCode=sPvcCauseDiagCode, mainInServ=mainInServ, sPvcConnectTime=sPvcConnectTime, billTag=billTag, mgmtEntry=mgmtEntry, ds3V2LOS=ds3V2LOS, plppsRxTrlTrc=plppsRxTrlTrc, sysDbSize=sysDbSize, pdhDS3RxFrmFmt=pdhDS3RxFrmFmt, e1LineES=e1LineES, sysInitialMemB=sysInitialMemB, slot0PhyChangeTimeM2=slot0PhyChangeTimeM2, link3MinorStatus=link3MinorStatus, vcaBucket1Inc=vcaBucket1Inc, sntmoscstatus=sntmoscstatus, ds3V2Entry=ds3V2Entry, pdhE3RxExTrcIdLH=pdhE3RxExTrcIdLH, vcbVci=vcbVci, svcTrafficEntry=svcTrafficEntry, pvcDvpi=pvcDvpi, veDstLink=veDstLink, frbPConfigSaddr=frbPConfigSaddr, svcBillTag=svcBillTag, dv2LocalFibre=dv2LocalFibre, plppE3SLcvs=plppE3SLcvs, ceStatTxState=ceStatTxState, plppE1SEntry=plppE1SEntry, billFrameIn=billFrameIn, pntmoper=pntmoper, sysLkResetStats=sysLkResetStats, svcCellRateTable=svcCellRateTable, sccatsendcode=sccatsendcode, sysLKEgCLPThreshold=sysLKEgCLPThreshold, cacPerLinkTable=cacPerLinkTable, pbcds1V2Coding=pbcds1V2Coding, vcbBucket3Max=vcbBucket3Max, pvcForwardPeakCellRate=pvcForwardPeakCellRate, se1SI0=se1SI0, frbPConfigDximode=frbPConfigDximode, ds1V2LineES=ds1V2LineES, sIndex=sIndex, plppE1SLcvs=plppE1SLcvs, sdhCScrambler=sdhCScrambler)
