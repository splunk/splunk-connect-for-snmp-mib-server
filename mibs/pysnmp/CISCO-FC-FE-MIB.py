#
# PySNMP MIB module CISCO-FC-FE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-FE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:37:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
cieIfOperStatusCause, = mibBuilder.importSymbols("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcAddressId, FcIfServiceStateType, FcNameId, FcPortTypes, FcIfSpeed, FcPortTxTypes, FcClassOfServices, FcPortModuleTypes = mibBuilder.importSymbols("CISCO-ST-TC", "FcAddressId", "FcIfServiceStateType", "FcNameId", "FcPortTypes", "FcIfSpeed", "FcPortTxTypes", "FcClassOfServices", "FcPortModuleTypes")
MicroSeconds, = mibBuilder.importSymbols("CISCO-TC", "MicroSeconds")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
FcList, = mibBuilder.importSymbols("CISCO-ZS-MIB", "FcList")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Counter64, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, IpAddress, Counter32, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "IpAddress", "Counter32", "MibIdentifier", "iso", "Bits")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoFcFeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 289))
ciscoFcFeMIB.setRevisions(('2014-02-06 00:00', '2013-04-09 00:00', '2012-11-19 00:00', '2011-06-15 00:00', '2010-08-18 09:00', '2010-03-04 09:00', '2009-05-13 09:00', '2009-02-05 09:00', '2008-12-03 09:00', '2007-08-02 00:00', '2007-01-18 00:00', '2007-01-09 00:00', '2006-11-26 00:00', '2006-05-10 00:00', '2006-04-13 00:00', '2006-02-20 00:00', '2005-02-15 00:00', '2004-10-19 00:00', '2004-03-30 00:00', '2003-11-14 00:00', '2003-11-06 00:00', '2003-10-17 00:00', '2003-09-22 00:00', '2003-08-18 00:00', '2003-06-12 00:00', '2003-05-14 00:00', '2003-04-18 00:00', '2003-03-25 00:00', '2002-11-11 00:00', '2002-11-01 00:00', '2002-10-02 00:00',))
if mibBuilder.loadTexts: ciscoFcFeMIB.setLastUpdated('201402060000Z')
if mibBuilder.loadTexts: ciscoFcFeMIB.setOrganization('Cisco Systems Inc.')
ciscoFcFeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1))
cffFcFeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 2))
cffFcFeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1))
cffFcFeStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2))
cffFcFeNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3))
cffFcFeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0))
class FcphVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FcBbCredit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32767)

class FcRxDataFieldSize(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(128, 2112)

class FcBbCreditModel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("alternate", 2))

class FcIfOperStatusReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286))
    namedValues = NamedValues(("other", 1), ("none", 2), ("hwFailure", 3), ("loopbackDiagFailure", 4), ("errorDisabled", 5), ("swFailure", 6), ("linkFailure", 7), ("offline", 8), ("nonParticipating", 9), ("initializing", 10), ("vsanInactive", 11), ("adminDown", 12), ("channelAdminDown", 13), ("channelOperSuspended", 14), ("channelConfigurationInProgress", 15), ("rcfInProgress", 16), ("elpFailureIsolation", 17), ("escFailureIsolation", 18), ("domainOverlapIsolation", 19), ("domainAddrAssignFailureIsolation", 20), ("domainOtherSideEportIsolation", 21), ("domainInvalidRCFReceived", 22), ("domainManagerDisabled", 23), ("zoneMergeFailureIsolation", 24), ("vsanMismatchIsolation", 25), ("parentDown", 26), ("srcPortNotBound", 27), ("interfaceRemoved", 28), ("fcotNotPresent", 29), ("fcotVendorNotSupported", 30), ("incompatibleAdminMode", 31), ("incompatibleAdminSpeed", 32), ("suspendedByMode", 33), ("suspendedBySpeed", 34), ("suspendedByWWN", 35), ("domainMaxReTxFailure", 36), ("eppFailure", 37), ("portVsanMismatchIsolation", 38), ("loopbackIsolation", 39), ("upgradeInProgress", 40), ("incompatibleAdminRxBBCredit", 41), ("incompatibleAdminRxBufferSize", 42), ("portChannelMembersDown", 43), ("zoneRemoteNoRespIsolation", 44), ("firstPortUpAsEport", 45), ("firstPortNotUp", 46), ("peerFCIPPortClosedConnection", 47), ("peerFCIPPortResetConnection", 48), ("fcipPortMaxReTx", 49), ("fcipPortKeepAliveTimerExpire", 50), ("fcipPortPersistTimerExpire", 51), ("fcipPortSrcLinkDown", 52), ("fcipPortSrcAdminDown", 53), ("fcipPortAdminCfgChange", 54), ("fcipSrcPortRemoved", 55), ("fcipSrcModuleNotOnline", 56), ("invalidConfig", 57), ("portBindFailure", 58), ("portFabricBindFailure", 59), ("noCommonVsanIsolation", 60), ("ficonVsanDown", 61), ("invalidAttachment", 62), ("portBlocked", 63), ("incomAdminRxBBCreditPerBuf", 64), ("tooManyInvalidFLOGIs", 65), ("deniedDueToPortBinding", 66), ("elpFailureRevMismatch", 67), ("elpFailureClassFParamErr", 68), ("elpFailureClassNParamErr", 69), ("elpFailureUnknownFlowCTLCode", 70), ("elpFailureInvalidFlowCTLParam", 71), ("elpFailureInvalidPortName", 72), ("elpFailureInvalidSwitchName", 73), ("elpFailureRatovEdtovMismatch", 74), ("elpFailureLoopbackDetected", 75), ("elpFailureInvalidTxBBCredit", 76), ("elpFailureInvalidPayloadSize", 77), ("bundleMisCfg", 78), ("bitErrRTThresExceeded", 79), ("linkFailLinkReset", 80), ("linkFailPortInitFail", 81), ("linkFailPortUnusable", 82), ("linkFailLossOfSignal", 83), ("linkFailLossOfSync", 84), ("linkFailNOSRcvd", 85), ("linkFailOLSRcvd", 86), ("linkFailDebounceTimeout", 87), ("linkFailLRRcvdB2B", 88), ("linkFailCreditLoss", 89), ("linkFailRxQOverFlow", 90), ("linkFailTooManyINTR", 91), ("linkFailLIPRcvdB2B", 92), ("linkFailCreditLossB2B", 93), ("linkFailOPNYTMOB2B", 94), ("linkFailOPNYRETB2B", 95), ("linkFailLIPF8Rcvd", 96), ("linkFailLineCardPortShutdown", 97), ("fcspAuthenfailure", 98), ("fcotChksumErr", 99), ("ohmsExtLBTest", 100), ("invalidFabricBindExh", 101), ("tovMismatch", 102), ("ficonNotEnabled", 103), ("ficonNoPortnumber", 104), ("ficonBeingEnabled", 105), ("ePortProhibited", 106), ("portGracefulShutdown", 107), ("trunkNotFullyActive", 108), ("fabricBindingSWWNNotFound", 109), ("fabricBindingDomainInvalid", 110), ("fabricBindingDBMismatch", 111), ("fabricBindingNoRspFromPeer", 112), ("vsanSuspended", 113), ("vsanNotFound", 114), ("trackedPortDown", 115), ("ecSuspendedLoop", 116), ("isolatedBundle", 117), ("peerNotSupportBundle", 118), ("portBringupIsolation", 119), ("domainNotAllowedIsolated", 120), ("virtualIvrDomainOverlapIsolation", 121), ("outOfService", 122), ("portAuthFailed", 123), ("bundleStandby", 124), ("portConnectorTypeErr", 125), ("errorDisabledReInitLimitReached", 126), ("ficonDupPortNum", 127), ("localRcf", 128), ("twoSwitchesWithSameWWN", 129), ("invalidOtherSidePrincEFPReqRecd", 130), ("domainOther", 131), ("elpFailureAllZeroPeerWWNRcvd", 132), ("preferredPathIsolation", 133), ("fcRedirectIsolation", 134), ("portActLicenseNotAvailable", 135), ("sdmIsolation", 136), ("fcidAllocationFailed", 137), ("externallyDisabled", 138), ("unavailableNPVUpstreamPort", 139), ("unavailableNPVPrefUpstreamPort", 140), ("sfpReadError", 141), ("stickyDownOnLinkFailure", 142), ("tooManyLinkFlapsErr", 143), ("unidirectionalUDLD", 144), ("txRxLoopUDLD", 145), ("neighborMismatchUDLD", 146), ("authzPending", 147), ("hotStdbyInBundle", 148), ("incompleteConfig", 149), ("incompleteTunnelCfg", 150), ("hwProgrammingFailed", 151), ("tunnelDstUnreachable", 152), ("suspendByMtu", 153), ("sfpInvalid", 154), ("sfpAbsent", 155), ("portCapabilitiesUnknown", 156), ("channelErrDisabled", 157), ("vrfMismatch", 158), ("vrfForwardReferencing", 159), ("dupTunnelConfigDetected", 160), ("primaryVLANDown", 161), ("vrfUnusable", 162), ("errDisableHandShkFailure", 163), ("errDisabledBPDUGuard", 164), ("dot1xSecViolationErrDisabled", 165), ("emptyEchoUDLD", 166), ("vfTaggingCapErr", 167), ("portDisabled", 168), ("tunnelModeNotConfigured", 169), ("tunnelSrcNotConfigured", 170), ("tunnelDstNotConfigured", 171), ("tunnelUnableToResolveSrcIP", 172), ("tunnelUnableToResolveDstIP", 173), ("tunnelVrfDown", 174), ("sifAdminDown", 175), ("phyIntfDown", 176), ("ifSifLimitExceeded", 177), ("sifHoldDown", 178), ("noFcoe", 179), ("dcxCompatMismatch", 180), ("isolateBundleLimitExceeded", 181), ("sifNotBound", 182), ("errDisabledLacpMiscfg", 183), ("satFabricIfDown", 184), ("invalidSatFabricIf", 185), ("noRemoteChassis", 186), ("vicEnableNotReceived", 187), ("vicDisableReceived", 188), ("vlanVsanMappingNotEnabled", 189), ("stpNotFwdingInFcoeMappedVlan", 190), ("moduleOffline", 191), ("udldAggModeLinkFailure", 192), ("stpInconsVpcPeerDisabled", 193), ("setPortStateFailed", 194), ("suspendedByVpc", 195), ("vpcCfgInProgress", 196), ("vpcPeerLinkDown", 197), ("vpcNoRspFromPeer", 198), ("protoPortSuspend", 199), ("tunnelSrcDown", 200), ("cdpInfoUnavailable", 201), ("fexSfpInvalid", 202), ("errDisabledIpConflict", 203), ("fcotClkRateMismatch", 204), ("portGuardTrustSecViolation", 205), ("sdpTimeout", 206), ("satIncompatTopo", 207), ("waitForFlogi", 208), ("satNotConfigured", 209), ("npivNotEnabledInUpstream", 210), ("vsanMismatchWithUpstreamSwPort", 211), ("portGuardBitErrRate", 212), ("portGuardSigLoss", 213), ("portGuardSyncLoss", 214), ("portGuardLinkReset", 215), ("portGuardCreditLoss", 216), ("ipQosMgrPolicyAppFailure", 217), ("pauseRateLimitErrDisabled", 218), ("lstGrpUplinkDown", 219), ("stickyDnLinkFailure", 220), ("routerMacFailure", 221), ("dcxMultipleMsapIds", 222), ("dcxHundredPdusRcvdNoAck", 223), ("enmSatIncompatibleUplink", 224), ("enmLoopDetected", 225), ("nonStickyExternallyDisabled", 226), ("subGroupIdNotAssigned", 227), ("vemUnlicensed", 228), ("profileNotFound", 229), ("nonExistentVlan", 230), ("vlanInvalidType", 231), ("vlanDown", 232), ("vpcPeerUpgrade", 233), ("ipQosDcbxpCompatFailure", 234), ("nonCiscoHbaVfTag", 235), ("domainIdConfigMismatch", 236), ("sfpSpeedMismatch", 237), ("xcvrInitializing", 238), ("xcvrAbsent", 239), ("xcvrInvalid", 240), ("vfcBindingInvalid", 241), ("vlanNotFcoeEnabled", 242), ("pvlanNativeVlanErr", 243), ("ethL2VlanDown", 244), ("ethIntfInvalidBinding", 245), ("pmonFailure", 246), ("l3NotReady", 247), ("speedMismatch", 248), ("flowControlMismatch", 249), ("vdcMode", 250), ("suspendedDueToMinLinks", 251), ("enmPinFailLinkDown", 252), ("inactiveM1PortFpathActiveVlan", 253), ("parentPortDown", 254), ("moduleRemoved", 255)) + NamedValues(("corePortMct", 256), ("nonCorePortMct", 257), ("ficonInorderNotActive", 258), ("invalidEncapsulation", 259), ("modemLineDeasserted", 260), ("ipSecHndshkInProgress", 261), ("sfpEthCompliantErr", 262), ("cellularModemUnattached", 263), ("outOfGlblRxBuffers", 264), ("sfpFcCompliantErr", 265), ("ethIntfNotLicensed", 266), ("domainIdsInvalid", 267), ("fabricNameInvalid", 268), ("ficonNoPortSwapLogicalPort", 269), ("ficonInvalidPortNum", 270), ("remotePortInL2vpnDown", 271), ("suspendedDueToNoLacpPdus", 272), ("fcotValidationFailedAtDriver", 273), ("unsupportedTransceiverMd5DigestNotSame", 274), ("unsupportedTransceiver", 275), ("adminStateConfigChange", 276), ("vlanAllowedList", 277), ("vlanAllowedListOverride", 278), ("vlanAllowedListAdd", 279), ("vlanAllowedRemove", 280), ("vlanCfgStateChange", 281), ("vlanCfgDelete", 282), ("pppPeerNotResponding", 283), ("pppAuthFailed", 284), ("xcvrAuthFailed", 285), ("badFramesRcvdFromLink", 286))

class FcPerfBuffer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 145)

cffFcFeElementName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 1), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cffFcFeElementName.setStatus('current')
fcIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2), )
if mibBuilder.loadTexts: fcIfTable.setStatus('current')
fcIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfEntry.setStatus('current')
fcIfWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 1), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfWwn.setStatus('current')
fcIfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 2), FcPortTypes().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminMode.setStatus('current')
fcIfOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 3), FcPortTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperMode.setStatus('current')
fcIfAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 4), FcIfSpeed().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminSpeed.setStatus('current')
fcIfBeaconMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfBeaconMode.setStatus('current')
fcIfPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPortChannelIfIndex.setStatus('current')
fcIfOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 7), FcIfOperStatusReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperStatusCause.setStatus('current')
fcIfOperStatusCauseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperStatusCauseDescr.setStatus('current')
fcIfAdminTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonTrunk", 1), ("trunk", 2), ("auto", 3))).clone('nonTrunk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminTrunkMode.setStatus('current')
fcIfOperTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonTrunk", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperTrunkMode.setStatus('current')
fcIfAllowedVsanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 11), FcList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAllowedVsanList2k.setStatus('current')
fcIfAllowedVsanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 12), FcList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAllowedVsanList4k.setStatus('current')
fcIfActiveVsanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 13), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanList2k.setStatus('current')
fcIfActiveVsanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 14), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanList4k.setStatus('current')
fcIfBbCreditModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 15), FcBbCreditModel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBbCreditModel.setStatus('current')
fcIfHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 16), MicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfHoldTime.setStatus('current')
fcIfTransmitterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 17), FcPortTxTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTransmitterType.setStatus('current')
fcIfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 18), FcPortModuleTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfConnectorType.setStatus('current')
fcIfSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSerialNo.setStatus('current')
fcIfRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRevision.setStatus('current')
fcIfVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfVendor.setStatus('current')
fcIfSFPSerialIDData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSFPSerialIDData.setStatus('current')
fcIfPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPartNumber.setStatus('current')
fcIfAdminRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 24), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCredit.setStatus('current')
fcIfAdminRxBbCreditModeISL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 25), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeISL.setStatus('current')
fcIfAdminRxBbCreditModeFx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 26), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeFx.setStatus('current')
fcIfOperRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 27), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperRxBbCredit.setStatus('current')
fcIfRxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 28), FcRxDataFieldSize()).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfRxDataFieldSize.setStatus('current')
fcIfActiveVsanUpList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 29), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanUpList2k.setStatus('current')
fcIfActiveVsanUpList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 30), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanUpList4k.setStatus('current')
fcIfPortRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("shared", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfPortRateMode.setStatus('current')
fcIfAdminRxPerfBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 32), FcPerfBuffer()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxPerfBuffer.setStatus('current')
fcIfOperRxPerfBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 33), FcPerfBuffer()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperRxPerfBuffer.setStatus('current')
fcIfBbScn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBbScn.setStatus('current')
fcIfPortInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPortInitStatus.setStatus('current')
fcIfAdminRxBbCreditExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 36), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCreditExtended.setStatus('current')
fcIfFcTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 37), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFcTunnelIfIndex.setStatus('current')
fcIfServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 38), FcIfServiceStateType().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfServiceState.setStatus('current')
fcIfAdminBbScnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 39), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminBbScnMode.setStatus('current')
fcIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPortType.setStatus('current')
fcIfAdminFECState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminFECState.setStatus('current')
fcIfOperFECState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperFECState.setStatus('current')
fcTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3), )
if mibBuilder.loadTexts: fcTrunkIfTable.setStatus('current')
fcTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fcTrunkIfEntry.setStatus('current')
fcTrunkIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrunkIfOperStatus.setStatus('current')
fcTrunkIfOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1, 2), FcIfOperStatusReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrunkIfOperStatusCause.setStatus('current')
fcTrunkIfOperStatusCauseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrunkIfOperStatusCauseDescr.setStatus('current')
fcIfLoginEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLoginEntryCount.setStatus('current')
fcIfFLoginTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5), )
if mibBuilder.loadTexts: fcIfFLoginTable.setStatus('current')
fcIfFLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FC-FE-MIB", "fcIfNxLoginIndex"))
if mibBuilder.loadTexts: fcIfFLoginEntry.setStatus('current')
fcIfNxLoginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fcIfNxLoginIndex.setStatus('current')
fcIfNxPortNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxPortNodeName.setStatus('current')
fcIfNxPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 3), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxPortName.setStatus('current')
fcIfNxPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 4), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxPortAddress.setStatus('current')
fcIfNxFcphVersionAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 5), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxFcphVersionAgreed.setStatus('current')
fcIfNxRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxRxBbCredit.setStatus('current')
fcIfNxTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 7), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxTxBbCredit.setStatus('current')
fcIfNxClass2RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 8), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass2RxDataFieldSize.setStatus('current')
fcIfNxClass3RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 9), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass3RxDataFieldSize.setStatus('current')
fcIfNxCosSuppAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 10), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxCosSuppAgreed.setStatus('current')
fcIfNxClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass2SeqDelivAgreed.setStatus('current')
fcIfNxClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass3SeqDelivAgreed.setStatus('current')
fcIfElpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6), )
if mibBuilder.loadTexts: fcIfElpTable.setStatus('current')
fcIfElpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfElpEntry.setStatus('current')
fcIfElpNbrNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 1), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpNbrNodeName.setStatus('current')
fcIfElpNbrPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpNbrPortName.setStatus('current')
fcIfElpRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 3), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpRxBbCredit.setStatus('current')
fcIfElpTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 4), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpTxBbCredit.setStatus('current')
fcIfElpCosSuppAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 5), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpCosSuppAgreed.setStatus('current')
fcIfElpClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass2SeqDelivAgreed.setStatus('current')
fcIfElpClass2RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 7), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass2RxDataFieldSize.setStatus('current')
fcIfElpClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass3SeqDelivAgreed.setStatus('current')
fcIfElpClass3RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 9), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass3RxDataFieldSize.setStatus('current')
fcIfElpClassFXII = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFXII.setStatus('current')
fcIfElpClassFRxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 11), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFRxDataFieldSize.setStatus('current')
fcIfElpClassFConcurrentSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFConcurrentSeq.setStatus('current')
fcIfElpClassFEndToEndCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFEndToEndCredit.setStatus('current')
fcIfElpClassFOpenSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFOpenSeq.setStatus('current')
fcIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7), )
if mibBuilder.loadTexts: fcIfCapTable.setStatus('current')
fcIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCapEntry.setStatus('current')
fcIfCapFcphVersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 1), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFcphVersionHigh.setStatus('current')
fcIfCapFcphVersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 2), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFcphVersionLow.setStatus('current')
fcIfCapRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 3), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditMax.setStatus('deprecated')
fcIfCapRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 4), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditMin.setStatus('deprecated')
fcIfCapRxDataFieldSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 5), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxDataFieldSizeMax.setStatus('current')
fcIfCapRxDataFieldSizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 6), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxDataFieldSizeMin.setStatus('current')
fcIfCapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 7), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapCos.setStatus('current')
fcIfCapClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapClass2SeqDeliv.setStatus('current')
fcIfCapClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapClass3SeqDeliv.setStatus('current')
fcIfCapHoldTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 10), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapHoldTimeMax.setStatus('current')
fcIfCapHoldTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 11), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapHoldTimeMin.setStatus('current')
fcIfCapISLRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 12), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditMax.setStatus('deprecated')
fcIfCapISLRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 13), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditMin.setStatus('deprecated')
fcIfCapRxBbCreditWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditWriteable.setStatus('deprecated')
fcIfCapRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 15), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditDefault.setStatus('deprecated')
fcIfCapISLRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 16), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditDefault.setStatus('deprecated')
fcIfCapBbScnCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapBbScnCapable.setStatus('current')
fcIfCapBbScnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapBbScnMax.setStatus('current')
fcIfCapOsmFrmCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmFrmCapable.setStatus('current')
fcIfIsServiceStateCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfIsServiceStateCapable.setStatus('current')
fcIfIsPortRateModeCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfIsPortRateModeCapable.setStatus('current')
fcIfIsAdminRxBbCreditExtendedCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfIsAdminRxBbCreditExtendedCapable.setStatus('current')
adminTrunkProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTrunkProtocol.setStatus('current')
fcIfElpRejectReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcIfElpRejectReasonCode.setStatus('current')
fcIfElpRejectReasonCodeExpl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcIfElpRejectReasonCodeExpl.setStatus('current')
fcIfCapOsmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11), )
if mibBuilder.loadTexts: fcIfCapOsmTable.setStatus('current')
fcIfCapOsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCapOsmEntry.setStatus('current')
fcIfCapOsmRxBbCreditWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditWriteable.setStatus('current')
fcIfCapOsmRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 2), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditMax.setStatus('current')
fcIfCapOsmRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 3), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditMin.setStatus('current')
fcIfCapOsmRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 4), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditDefault.setStatus('current')
fcIfCapOsmISLRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditMax.setStatus('current')
fcIfCapOsmISLRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditMin.setStatus('current')
fcIfCapOsmISLRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 7), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditDefault.setStatus('current')
fcIfCapOsmRxPerfBufWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufWriteable.setStatus('current')
fcIfCapOsmRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 9), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufMax.setStatus('current')
fcIfCapOsmRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 10), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufMin.setStatus('current')
fcIfCapOsmRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 11), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufDefault.setStatus('current')
fcIfCapOsmISLRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 12), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufMax.setStatus('current')
fcIfCapOsmISLRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 13), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufMin.setStatus('current')
fcIfCapOsmISLRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 14), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufDefault.setStatus('current')
fcIfCapFrmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12), )
if mibBuilder.loadTexts: fcIfCapFrmTable.setStatus('current')
fcIfCapFrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCapFrmEntry.setStatus('current')
fcIfCapFrmRxBbCreditWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditWriteable.setStatus('current')
fcIfCapFrmRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 2), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditMax.setStatus('current')
fcIfCapFrmRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 3), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditMin.setStatus('current')
fcIfCapFrmRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 4), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditDefault.setStatus('current')
fcIfCapFrmISLRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditMax.setStatus('current')
fcIfCapFrmISLRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditMin.setStatus('current')
fcIfCapFrmISLRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 7), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditDefault.setStatus('current')
fcIfCapFrmRxPerfBufWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufWriteable.setStatus('current')
fcIfCapFrmRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 9), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufMax.setStatus('current')
fcIfCapFrmRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 10), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufMin.setStatus('current')
fcIfCapFrmRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 11), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufDefault.setStatus('current')
fcIfCapFrmISLRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 12), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufMax.setStatus('current')
fcIfCapFrmISLRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 13), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufMin.setStatus('current')
fcIfCapFrmISLRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 14), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufDefault.setStatus('current')
fcIfRNIDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13), )
if mibBuilder.loadTexts: fcIfRNIDInfoTable.setStatus('current')
fcIfRNIDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fcIfRNIDInfoEntry.setStatus('current')
fcIfRNIDInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("old", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfRNIDInfoStatus.setStatus('current')
fcIfRNIDInfoTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoTypeNumber.setStatus('current')
fcIfRNIDInfoModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoModelNumber.setStatus('current')
fcIfRNIDInfoManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoManufacturer.setStatus('current')
fcIfRNIDInfoPlantOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoPlantOfMfg.setStatus('current')
fcIfRNIDInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoSerialNumber.setStatus('current')
fcIfRNIDInfoUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel", 1), ("controlUnit", 2), ("fabric", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoUnitType.setStatus('current')
fcIfRNIDInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoPortId.setStatus('current')
fcIfGigETable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14), )
if mibBuilder.loadTexts: fcIfGigETable.setStatus('current')
fcIfGigEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfGigEEntry.setStatus('current')
fcIfGigEPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfGigEPortChannelIfIndex.setStatus('current')
fcIfGigEAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfGigEAutoNegotiate.setStatus('current')
fcIfGigEBeaconMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfGigEBeaconMode.setStatus('current')
fcIfGigConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 4), FcPortModuleTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfGigConnectorType.setStatus('current')
fcIfModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15), )
if mibBuilder.loadTexts: fcIfModuleTable.setStatus('current')
fcIfModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: fcIfModuleEntry.setStatus('current')
fcIfModuleOverSubscriptionRatioConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfModuleOverSubscriptionRatioConfig.setStatus('current')
fcIfModuleBandwidthFairnessConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfModuleBandwidthFairnessConfig.setStatus('current')
fcIfModuleBandwidthFairnessOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfModuleBandwidthFairnessOper.setStatus('current')
fcIfModuleXcvrFrequencyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("xcvrFreqX2FC", 2), ("xcvrFreqX2Eth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfModuleXcvrFrequencyConfig.setStatus('current')
fcIfToggleCtrlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16), )
if mibBuilder.loadTexts: fcIfToggleCtrlConfigTable.setStatus('deprecated')
fcIfToggleCtrlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfToggleCtrlConfigEntry.setStatus('deprecated')
fcIfToggleCtrlConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigEnable.setStatus('deprecated')
fcIfToggleCtrlConfigReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notApplicable", 1), ("linkFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigReason.setStatus('deprecated')
fcIfToggleCtrlConfigDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigDuration.setStatus('deprecated')
fcIfToggleCtrlConfigNumFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigNumFlaps.setStatus('deprecated')
fcIfFlapCtrlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17), )
if mibBuilder.loadTexts: fcIfFlapCtrlConfigTable.setStatus('current')
fcIfFlapCtrlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1), ).setIndexNames((0, "CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigReason"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfFlapCtrlConfigEntry.setStatus('current')
fcIfFlapCtrlConfigReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("linkFailure", 1), ("trustSecViolation", 2), ("bitErrorRate", 3), ("signalLoss", 4), ("syncLoss", 5), ("linkReset", 6), ("creditLoss", 7))))
if mibBuilder.loadTexts: fcIfFlapCtrlConfigReason.setStatus('current')
fcIfFlapCtrlConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFlapCtrlConfigEnable.setStatus('current')
fcIfFlapCtrlConfigDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFlapCtrlConfigDuration.setStatus('current')
fcIfFlapCtrlConfigNumFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFlapCtrlConfigNumFlaps.setStatus('current')
fcIfErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1), )
if mibBuilder.loadTexts: fcIfErrorTable.setStatus('current')
fcIfErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfErrorEntry.setStatus('current')
fcIfLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLinkFailures.setStatus('current')
fcIfSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSyncLosses.setStatus('current')
fcIfSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSigLosses.setStatus('current')
fcIfPrimSeqProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPrimSeqProtoErrors.setStatus('current')
fcIfInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfInvalidTxWords.setStatus('current')
fcIfInvalidCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfInvalidCrcs.setStatus('current')
fcIfDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfDelimiterErrors.setStatus('current')
fcIfAddressIdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfAddressIdErrors.setStatus('current')
fcIfLinkResetIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLinkResetIns.setStatus('current')
fcIfLinkResetOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLinkResetOuts.setStatus('current')
fcIfOlsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOlsIns.setStatus('current')
fcIfOlsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOlsOuts.setStatus('current')
fcIfRuntFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRuntFramesIn.setStatus('current')
fcIfJabberFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfJabberFramesIn.setStatus('current')
fcIfTxWaitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTxWaitCount.setStatus('current')
fcIfFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramesTooLong.setStatus('current')
fcIfFramesTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramesTooShort.setStatus('current')
fcIfLRRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLRRIn.setStatus('current')
fcIfLRROut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLRROut.setStatus('current')
fcIfNOSIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNOSIn.setStatus('current')
fcIfNOSOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNOSOut.setStatus('current')
fcIfFragFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFragFrames.setStatus('current')
fcIfEOFaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfEOFaFrames.setStatus('current')
fcIfUnknownClassFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfUnknownClassFrames.setStatus('current')
fcIf8b10bDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIf8b10bDisparityErrors.setStatus('current')
fcIfFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramesDiscard.setStatus('current')
fcIfELPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfELPFailures.setStatus('current')
fcIfBBCreditTransistionFromZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBBCreditTransistionFromZero.setStatus('current')
fcIfEISLFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfEISLFramesDiscard.setStatus('current')
fcIfFramingErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramingErrorFrames.setStatus('current')
fcIfLipF8In = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLipF8In.setStatus('current')
fcIfLipF8Out = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLipF8Out.setStatus('current')
fcIfNonLipF8In = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNonLipF8In.setStatus('current')
fcIfNonLipF8Out = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNonLipF8Out.setStatus('current')
fcIfTimeOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTimeOutDiscards.setStatus('current')
fcIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOutDiscards.setStatus('current')
fcIfCreditLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCreditLoss.setStatus('current')
fcIfTxWtAvgBBCreditTransitionToZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTxWtAvgBBCreditTransitionToZero.setStatus('current')
fcIfBBCreditTransistionToZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBBCreditTransistionToZero.setStatus('current')
fcHCIfBBCreditTransistionFromZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHCIfBBCreditTransistionFromZero.setStatus('current')
fcHCIfBBCreditTransistionToZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHCIfBBCreditTransistionToZero.setStatus('current')
fcIfFECCorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFECCorrectedBlks.setStatus('current')
fcIfFECUncorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFECUncorrectedBlks.setStatus('current')
fcIfC2AccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2), )
if mibBuilder.loadTexts: fcIfC2AccountingTable.setStatus('current')
fcIfC2AccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfC2AccountingEntry.setStatus('current')
fcIfC2InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2InFrames.setStatus('current')
fcIfC2OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2OutFrames.setStatus('current')
fcIfC2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2InOctets.setStatus('current')
fcIfC2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2OutOctets.setStatus('current')
fcIfC2Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2Discards.setStatus('current')
fcIfC2FbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2FbsyFrames.setStatus('current')
fcIfC2FrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2FrjtFrames.setStatus('current')
fcIfC2PBSYFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2PBSYFrames.setStatus('current')
fcIfC2PRJTFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2PRJTFrames.setStatus('current')
fcIfC3AccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3), )
if mibBuilder.loadTexts: fcIfC3AccountingTable.setStatus('current')
fcIfC3AccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfC3AccountingEntry.setStatus('current')
fcIfC3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3InFrames.setStatus('current')
fcIfC3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3OutFrames.setStatus('current')
fcIfC3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3InOctets.setStatus('current')
fcIfC3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3OutOctets.setStatus('current')
fcIfC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3Discards.setStatus('current')
fcIfCfAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4), )
if mibBuilder.loadTexts: fcIfCfAccountingTable.setStatus('current')
fcIfCfAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCfAccountingEntry.setStatus('current')
fcIfCfInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfInFrames.setStatus('current')
fcIfCfOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfOutFrames.setStatus('current')
fcIfCfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfInOctets.setStatus('current')
fcIfCfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfOutOctets.setStatus('current')
fcIfCfDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfDiscards.setStatus('current')
fcIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5), )
if mibBuilder.loadTexts: fcIfStatTable.setStatus('current')
fcIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfStatEntry.setStatus('current')
fcIfCurrRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5, 1, 1), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCurrRxBbCredit.setStatus('current')
fcIfCurrTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5, 1, 2), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCurrTxBbCredit.setStatus('current')
fcTrunkIfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 1)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfOperStatus"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCauseDescr"))
if mibBuilder.loadTexts: fcTrunkIfDownNotify.setStatus('current')
fcTrunkIfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 2)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfOperStatus"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCauseDescr"))
if mibBuilder.loadTexts: fcTrunkIfUpNotify.setStatus('current')
fcIfElpReject = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 3)).setObjects(("CISCO-FC-FE-MIB", "fcIfElpNbrNodeName"), ("CISCO-FC-FE-MIB", "fcIfElpNbrPortName"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCode"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCodeExpl"))
if mibBuilder.loadTexts: fcIfElpReject.setStatus('current')
fcotInserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 4)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"))
if mibBuilder.loadTexts: fcotInserted.setStatus('current')
fcotRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 5)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"))
if mibBuilder.loadTexts: fcotRemoved.setStatus('current')
cffFcFeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1))
cffFcFeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2))
cffFcFeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 1)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfCapGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance = cffFcFeMIBCompliance.setStatus('deprecated')
cffFcFeMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 2)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfCapGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance1 = cffFcFeMIBCompliance1.setStatus('deprecated')
cffFcFeMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 3)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance2 = cffFcFeMIBCompliance2.setStatus('deprecated')
cffFcFeMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 4)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance3 = cffFcFeMIBCompliance3.setStatus('deprecated')
cffFcFeMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 5)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance4 = cffFcFeMIBCompliance4.setStatus('deprecated')
cffFcFeMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 6)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance5 = cffFcFeMIBCompliance5.setStatus('deprecated')
cffFcFeMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 7)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev6 = cffFcFeMIBComplianceRev6.setStatus('deprecated')
cffFcFeMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 8)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev7 = cffFcFeMIBComplianceRev7.setStatus('deprecated')
cffFcFeMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 9)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev8 = cffFcFeMIBComplianceRev8.setStatus('deprecated')
cffFcFeMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 10)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev9 = cffFcFeMIBComplianceRev9.setStatus('deprecated')
cffFcFeMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 11)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev10 = cffFcFeMIBComplianceRev10.setStatus('deprecated')
cffFcFeMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 12)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev11 = cffFcFeMIBComplianceRev11.setStatus('deprecated')
cffFcFeMIBComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 13)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev12 = cffFcFeMIBComplianceRev12.setStatus('deprecated')
cffFcFeMIBComplianceRev13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 14)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev13 = cffFcFeMIBComplianceRev13.setStatus('deprecated')
cffFcFeMIBComplianceRev14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 15)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev4"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev14 = cffFcFeMIBComplianceRev14.setStatus('current')
fcFeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 1)).setObjects(("CISCO-FC-FE-MIB", "cffFcFeElementName"), ("CISCO-FC-FE-MIB", "adminTrunkProtocol"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCode"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCodeExpl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeGroup = fcFeGroup.setStatus('current')
fcIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 2)).setObjects(("CISCO-FC-FE-MIB", "fcIfWwn"), ("CISCO-FC-FE-MIB", "fcIfAdminMode"), ("CISCO-FC-FE-MIB", "fcIfOperMode"), ("CISCO-FC-FE-MIB", "fcIfAdminSpeed"), ("CISCO-FC-FE-MIB", "fcIfBeaconMode"), ("CISCO-FC-FE-MIB", "fcIfPortChannelIfIndex"), ("CISCO-FC-FE-MIB", "fcIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcIfOperStatusCauseDescr"), ("CISCO-FC-FE-MIB", "fcIfAdminTrunkMode"), ("CISCO-FC-FE-MIB", "fcIfOperTrunkMode"), ("CISCO-FC-FE-MIB", "fcIfAllowedVsanList2k"), ("CISCO-FC-FE-MIB", "fcIfAllowedVsanList4k"), ("CISCO-FC-FE-MIB", "fcIfActiveVsanList2k"), ("CISCO-FC-FE-MIB", "fcIfActiveVsanList4k"), ("CISCO-FC-FE-MIB", "fcIfBbCreditModel"), ("CISCO-FC-FE-MIB", "fcIfHoldTime"), ("CISCO-FC-FE-MIB", "fcIfTransmitterType"), ("CISCO-FC-FE-MIB", "fcIfConnectorType"), ("CISCO-FC-FE-MIB", "fcIfSerialNo"), ("CISCO-FC-FE-MIB", "fcIfRevision"), ("CISCO-FC-FE-MIB", "fcIfVendor"), ("CISCO-FC-FE-MIB", "fcIfSFPSerialIDData"), ("CISCO-FC-FE-MIB", "fcIfPartNumber"), ("CISCO-FC-FE-MIB", "fcIfAdminRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfAdminRxBbCreditModeISL"), ("CISCO-FC-FE-MIB", "fcIfAdminRxBbCreditModeFx"), ("CISCO-FC-FE-MIB", "fcIfOperRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfRxDataFieldSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroup = fcIfGroup.setStatus('current')
fcTrunkIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 3)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfOperStatus"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCauseDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcTrunkIfGroup = fcTrunkIfGroup.setStatus('current')
fcIfLoginGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 4)).setObjects(("CISCO-FC-FE-MIB", "fcIfLoginEntryCount"), ("CISCO-FC-FE-MIB", "fcIfNxPortNodeName"), ("CISCO-FC-FE-MIB", "fcIfNxPortName"), ("CISCO-FC-FE-MIB", "fcIfNxPortAddress"), ("CISCO-FC-FE-MIB", "fcIfNxFcphVersionAgreed"), ("CISCO-FC-FE-MIB", "fcIfNxRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfNxTxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfNxClass2RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfNxClass3RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfNxCosSuppAgreed"), ("CISCO-FC-FE-MIB", "fcIfNxClass2SeqDelivAgreed"), ("CISCO-FC-FE-MIB", "fcIfNxClass3SeqDelivAgreed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfLoginGroup = fcIfLoginGroup.setStatus('current')
fcIfElpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 5)).setObjects(("CISCO-FC-FE-MIB", "fcIfElpNbrNodeName"), ("CISCO-FC-FE-MIB", "fcIfElpNbrPortName"), ("CISCO-FC-FE-MIB", "fcIfElpRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfElpTxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfElpCosSuppAgreed"), ("CISCO-FC-FE-MIB", "fcIfElpClass2SeqDelivAgreed"), ("CISCO-FC-FE-MIB", "fcIfElpClass2RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfElpClass3SeqDelivAgreed"), ("CISCO-FC-FE-MIB", "fcIfElpClass3RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfElpClassFXII"), ("CISCO-FC-FE-MIB", "fcIfElpClassFRxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfElpClassFConcurrentSeq"), ("CISCO-FC-FE-MIB", "fcIfElpClassFEndToEndCredit"), ("CISCO-FC-FE-MIB", "fcIfElpClassFOpenSeq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfElpGroup = fcIfElpGroup.setStatus('current')
fcIfCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 6)).setObjects(("CISCO-FC-FE-MIB", "fcIfCapFcphVersionHigh"), ("CISCO-FC-FE-MIB", "fcIfCapFcphVersionLow"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMax"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMin"), ("CISCO-FC-FE-MIB", "fcIfCapCos"), ("CISCO-FC-FE-MIB", "fcIfCapClass2SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapClass3SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMax"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMin"), ("CISCO-FC-FE-MIB", "fcIfCapISLRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapISLRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapISLRxBbCreditDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCapGroup = fcIfCapGroup.setStatus('deprecated')
fcIfErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 7)).setObjects(("CISCO-FC-FE-MIB", "fcIfLinkFailures"), ("CISCO-FC-FE-MIB", "fcIfSyncLosses"), ("CISCO-FC-FE-MIB", "fcIfSigLosses"), ("CISCO-FC-FE-MIB", "fcIfPrimSeqProtoErrors"), ("CISCO-FC-FE-MIB", "fcIfInvalidTxWords"), ("CISCO-FC-FE-MIB", "fcIfInvalidCrcs"), ("CISCO-FC-FE-MIB", "fcIfDelimiterErrors"), ("CISCO-FC-FE-MIB", "fcIfAddressIdErrors"), ("CISCO-FC-FE-MIB", "fcIfLinkResetIns"), ("CISCO-FC-FE-MIB", "fcIfLinkResetOuts"), ("CISCO-FC-FE-MIB", "fcIfOlsIns"), ("CISCO-FC-FE-MIB", "fcIfOlsOuts"), ("CISCO-FC-FE-MIB", "fcIfRuntFramesIn"), ("CISCO-FC-FE-MIB", "fcIfJabberFramesIn"), ("CISCO-FC-FE-MIB", "fcIfTxWaitCount"), ("CISCO-FC-FE-MIB", "fcIfFramesTooLong"), ("CISCO-FC-FE-MIB", "fcIfFramesTooShort"), ("CISCO-FC-FE-MIB", "fcIfLRRIn"), ("CISCO-FC-FE-MIB", "fcIfLRROut"), ("CISCO-FC-FE-MIB", "fcIfNOSIn"), ("CISCO-FC-FE-MIB", "fcIfNOSOut"), ("CISCO-FC-FE-MIB", "fcIfFragFrames"), ("CISCO-FC-FE-MIB", "fcIfEOFaFrames"), ("CISCO-FC-FE-MIB", "fcIfUnknownClassFrames"), ("CISCO-FC-FE-MIB", "fcIf8b10bDisparityErrors"), ("CISCO-FC-FE-MIB", "fcIfFramesDiscard"), ("CISCO-FC-FE-MIB", "fcIfELPFailures"), ("CISCO-FC-FE-MIB", "fcIfBBCreditTransistionFromZero"), ("CISCO-FC-FE-MIB", "fcIfEISLFramesDiscard"), ("CISCO-FC-FE-MIB", "fcIfFramingErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroup = fcIfErrorGroup.setStatus('current')
fcIfC2AccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 8)).setObjects(("CISCO-FC-FE-MIB", "fcIfC2InFrames"), ("CISCO-FC-FE-MIB", "fcIfC2OutFrames"), ("CISCO-FC-FE-MIB", "fcIfC2InOctets"), ("CISCO-FC-FE-MIB", "fcIfC2OutOctets"), ("CISCO-FC-FE-MIB", "fcIfC2Discards"), ("CISCO-FC-FE-MIB", "fcIfC2FbsyFrames"), ("CISCO-FC-FE-MIB", "fcIfC2FrjtFrames"), ("CISCO-FC-FE-MIB", "fcIfC2PBSYFrames"), ("CISCO-FC-FE-MIB", "fcIfC2PRJTFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfC2AccountingGroup = fcIfC2AccountingGroup.setStatus('current')
fcIfC3AccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 9)).setObjects(("CISCO-FC-FE-MIB", "fcIfC3InFrames"), ("CISCO-FC-FE-MIB", "fcIfC3OutFrames"), ("CISCO-FC-FE-MIB", "fcIfC3InOctets"), ("CISCO-FC-FE-MIB", "fcIfC3OutOctets"), ("CISCO-FC-FE-MIB", "fcIfC3Discards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfC3AccountingGroup = fcIfC3AccountingGroup.setStatus('current')
fcIfCfAccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 10)).setObjects(("CISCO-FC-FE-MIB", "fcIfCfInFrames"), ("CISCO-FC-FE-MIB", "fcIfCfOutFrames"), ("CISCO-FC-FE-MIB", "fcIfCfInOctets"), ("CISCO-FC-FE-MIB", "fcIfCfOutOctets"), ("CISCO-FC-FE-MIB", "fcIfCfDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCfAccountingGroup = fcIfCfAccountingGroup.setStatus('current')
fcIfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 11)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfDownNotify"), ("CISCO-FC-FE-MIB", "fcTrunkIfUpNotify"), ("CISCO-FC-FE-MIB", "fcIfElpReject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfNotificationGroup = fcIfNotificationGroup.setStatus('current')
fcIfGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 12)).setObjects(("CISCO-FC-FE-MIB", "fcIfActiveVsanUpList2k"), ("CISCO-FC-FE-MIB", "fcIfActiveVsanUpList4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev1 = fcIfGroupRev1.setStatus('current')
fcIfCapGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 13)).setObjects(("CISCO-FC-FE-MIB", "fcIfCapFcphVersionHigh"), ("CISCO-FC-FE-MIB", "fcIfCapFcphVersionLow"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMax"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMin"), ("CISCO-FC-FE-MIB", "fcIfCapCos"), ("CISCO-FC-FE-MIB", "fcIfCapClass2SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapClass3SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMax"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMin"), ("CISCO-FC-FE-MIB", "fcIfCapBbScnCapable"), ("CISCO-FC-FE-MIB", "fcIfCapBbScnMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmFrmCapable"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufDefault"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxPerfBufDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxPerfBufDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCapGroupRev1 = fcIfCapGroupRev1.setStatus('current')
fcIfGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 14)).setObjects(("CISCO-FC-FE-MIB", "fcIfPortRateMode"), ("CISCO-FC-FE-MIB", "fcIfAdminRxPerfBuffer"), ("CISCO-FC-FE-MIB", "fcIfOperRxPerfBuffer"), ("CISCO-FC-FE-MIB", "fcIfBbScn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev2 = fcIfGroupRev2.setStatus('current')
fcIfStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 15)).setObjects(("CISCO-FC-FE-MIB", "fcIfCurrRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfCurrTxBbCredit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfStatGroup = fcIfStatGroup.setStatus('current')
fcIfErrorGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 16)).setObjects(("CISCO-FC-FE-MIB", "fcIfLipF8In"), ("CISCO-FC-FE-MIB", "fcIfLipF8Out"), ("CISCO-FC-FE-MIB", "fcIfNonLipF8In"), ("CISCO-FC-FE-MIB", "fcIfNonLipF8Out"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev1 = fcIfErrorGroupRev1.setStatus('current')
fcIfGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 17)).setObjects(("CISCO-FC-FE-MIB", "fcIfPortInitStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev3 = fcIfGroupRev3.setStatus('current')
fcIfRNIDInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 18)).setObjects(("CISCO-FC-FE-MIB", "fcIfRNIDInfoStatus"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoTypeNumber"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoModelNumber"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoManufacturer"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoPlantOfMfg"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoSerialNumber"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoUnitType"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfRNIDInfoGroup = fcIfRNIDInfoGroup.setStatus('current')
fcIfGigEInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 19)).setObjects(("CISCO-FC-FE-MIB", "fcIfGigEPortChannelIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGigEInfoGroup = fcIfGigEInfoGroup.setStatus('current')
fcotInfoNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 20)).setObjects(("CISCO-FC-FE-MIB", "fcotInserted"), ("CISCO-FC-FE-MIB", "fcotRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcotInfoNotificationGroup = fcotInfoNotificationGroup.setStatus('current')
fcIfInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 21)).setObjects(("CISCO-FC-FE-MIB", "fcIfAdminRxBbCreditExtended"), ("CISCO-FC-FE-MIB", "fcIfFcTunnelIfIndex"), ("CISCO-FC-FE-MIB", "fcIfServiceState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfInfoGroup = fcIfInfoGroup.setStatus('current')
fcIfGigEinfoExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 22)).setObjects(("CISCO-FC-FE-MIB", "fcIfGigEAutoNegotiate"), ("CISCO-FC-FE-MIB", "fcIfGigEBeaconMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGigEinfoExtGroup = fcIfGigEinfoExtGroup.setStatus('current')
fcIfBbScnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 23)).setObjects(("CISCO-FC-FE-MIB", "fcIfAdminBbScnMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfBbScnGroup = fcIfBbScnGroup.setStatus('current')
fcIfCapableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 24)).setObjects(("CISCO-FC-FE-MIB", "fcIfIsServiceStateCapable"), ("CISCO-FC-FE-MIB", "fcIfIsPortRateModeCapable"), ("CISCO-FC-FE-MIB", "fcIfIsAdminRxBbCreditExtendedCapable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCapableGroup = fcIfCapableGroup.setStatus('current')
fcIfInfoPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 25)).setObjects(("CISCO-FC-FE-MIB", "fcIfPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfInfoPortGroup = fcIfInfoPortGroup.setStatus('current')
fcIfModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 26)).setObjects(("CISCO-FC-FE-MIB", "fcIfModuleOverSubscriptionRatioConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfModuleGroup = fcIfModuleGroup.setStatus('deprecated')
fcIfToggleCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 27)).setObjects(("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigEnable"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigReason"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigDuration"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigNumFlaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfToggleCtrlConfigGroup = fcIfToggleCtrlConfigGroup.setStatus('deprecated')
fcIfFlapCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 28)).setObjects(("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigEnable"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigDuration"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigNumFlaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfFlapCtrlConfigGroup = fcIfFlapCtrlConfigGroup.setStatus('current')
fcIfModuleGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 29)).setObjects(("CISCO-FC-FE-MIB", "fcIfModuleOverSubscriptionRatioConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessOper"), ("CISCO-FC-FE-MIB", "fcIfModuleXcvrFrequencyConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfModuleGroupRev1 = fcIfModuleGroupRev1.setStatus('current')
fcIfGigEinfoExtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 30)).setObjects(("CISCO-FC-FE-MIB", "fcIfGigConnectorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGigEinfoExtGroupRev1 = fcIfGigEinfoExtGroupRev1.setStatus('current')
fcIfErrorGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 31)).setObjects(("CISCO-FC-FE-MIB", "fcIfTimeOutDiscards"), ("CISCO-FC-FE-MIB", "fcIfOutDiscards"), ("CISCO-FC-FE-MIB", "fcIfCreditLoss"), ("CISCO-FC-FE-MIB", "fcIfTxWtAvgBBCreditTransitionToZero"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev2 = fcIfErrorGroupRev2.setStatus('current')
fcIfErrorGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 32)).setObjects(("CISCO-FC-FE-MIB", "fcIfBBCreditTransistionToZero"), ("CISCO-FC-FE-MIB", "fcHCIfBBCreditTransistionFromZero"), ("CISCO-FC-FE-MIB", "fcHCIfBBCreditTransistionToZero"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev3 = fcIfErrorGroupRev3.setStatus('current')
fcIfGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 33)).setObjects(("CISCO-FC-FE-MIB", "fcIfAdminFECState"), ("CISCO-FC-FE-MIB", "fcIfOperFECState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev4 = fcIfGroupRev4.setStatus('current')
fcIfErrorGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 34)).setObjects(("CISCO-FC-FE-MIB", "fcIfFECCorrectedBlks"), ("CISCO-FC-FE-MIB", "fcIfFECUncorrectedBlks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev4 = fcIfErrorGroupRev4.setStatus('current')
mibBuilder.exportSymbols("CISCO-FC-FE-MIB", fcIfCapFrmISLRxBbCreditMax=fcIfCapFrmISLRxBbCreditMax, fcTrunkIfDownNotify=fcTrunkIfDownNotify, fcIfGroupRev4=fcIfGroupRev4, fcIfCapRxBbCreditMin=fcIfCapRxBbCreditMin, fcIfBbCreditModel=fcIfBbCreditModel, fcIfNxClass2RxDataFieldSize=fcIfNxClass2RxDataFieldSize, fcIfDelimiterErrors=fcIfDelimiterErrors, fcIfCapHoldTimeMax=fcIfCapHoldTimeMax, cffFcFeMIBCompliance=cffFcFeMIBCompliance, fcIfCapableGroup=fcIfCapableGroup, fcIfPartNumber=fcIfPartNumber, FcRxDataFieldSize=FcRxDataFieldSize, fcIfNxClass3RxDataFieldSize=fcIfNxClass3RxDataFieldSize, fcIfAllowedVsanList2k=fcIfAllowedVsanList2k, fcIfCapOsmRxPerfBufWriteable=fcIfCapOsmRxPerfBufWriteable, fcIfElpEntry=fcIfElpEntry, fcIfElpClass3SeqDelivAgreed=fcIfElpClass3SeqDelivAgreed, fcIfNotificationGroup=fcIfNotificationGroup, fcIfElpReject=fcIfElpReject, fcIfSyncLosses=fcIfSyncLosses, fcIfCapOsmTable=fcIfCapOsmTable, cffFcFeMIBComplianceRev7=cffFcFeMIBComplianceRev7, fcHCIfBBCreditTransistionToZero=fcHCIfBBCreditTransistionToZero, fcTrunkIfUpNotify=fcTrunkIfUpNotify, fcIfRNIDInfoSerialNumber=fcIfRNIDInfoSerialNumber, fcIfIsAdminRxBbCreditExtendedCapable=fcIfIsAdminRxBbCreditExtendedCapable, fcIfNxPortNodeName=fcIfNxPortNodeName, fcIfJabberFramesIn=fcIfJabberFramesIn, cffFcFeMIBComplianceRev10=cffFcFeMIBComplianceRev10, cffFcFeMIBCompliance3=cffFcFeMIBCompliance3, fcIfActiveVsanUpList2k=fcIfActiveVsanUpList2k, fcIfC2FbsyFrames=fcIfC2FbsyFrames, fcIfLinkFailures=fcIfLinkFailures, cffFcFeMIBGroups=cffFcFeMIBGroups, cffFcFeNotification=cffFcFeNotification, fcIfCapOsmRxBbCreditDefault=fcIfCapOsmRxBbCreditDefault, fcIfNxFcphVersionAgreed=fcIfNxFcphVersionAgreed, fcIfC2AccountingGroup=fcIfC2AccountingGroup, fcIfFlapCtrlConfigTable=fcIfFlapCtrlConfigTable, fcIfFramingErrorFrames=fcIfFramingErrorFrames, fcIfInfoGroup=fcIfInfoGroup, ciscoFcFeObjects=ciscoFcFeObjects, fcIfGroupRev3=fcIfGroupRev3, fcIfElpClassFXII=fcIfElpClassFXII, fcIfActiveVsanList2k=fcIfActiveVsanList2k, fcIfOperTrunkMode=fcIfOperTrunkMode, fcIfRxDataFieldSize=fcIfRxDataFieldSize, fcIfElpClassFConcurrentSeq=fcIfElpClassFConcurrentSeq, fcIfElpRejectReasonCodeExpl=fcIfElpRejectReasonCodeExpl, fcIfGigETable=fcIfGigETable, fcIfNxRxBbCredit=fcIfNxRxBbCredit, fcIfCapOsmFrmCapable=fcIfCapOsmFrmCapable, fcIfCapFrmRxPerfBufMin=fcIfCapFrmRxPerfBufMin, fcIfAdminMode=fcIfAdminMode, fcIfEISLFramesDiscard=fcIfEISLFramesDiscard, fcIfCapOsmISLRxPerfBufMin=fcIfCapOsmISLRxPerfBufMin, fcIfOlsOuts=fcIfOlsOuts, fcIfFramesTooShort=fcIfFramesTooShort, cffFcFeMIBComplianceRev14=cffFcFeMIBComplianceRev14, cffFcFeMIBComplianceRev12=cffFcFeMIBComplianceRev12, fcIfInvalidTxWords=fcIfInvalidTxWords, fcIfBbScn=fcIfBbScn, fcIfCapRxDataFieldSizeMin=fcIfCapRxDataFieldSizeMin, fcIfC2OutFrames=fcIfC2OutFrames, fcHCIfBBCreditTransistionFromZero=fcHCIfBBCreditTransistionFromZero, fcIfFECUncorrectedBlks=fcIfFECUncorrectedBlks, fcIfErrorGroupRev1=fcIfErrorGroupRev1, fcIfCapISLRxBbCreditDefault=fcIfCapISLRxBbCreditDefault, fcIfAdminFECState=fcIfAdminFECState, fcIfAdminSpeed=fcIfAdminSpeed, fcIfEntry=fcIfEntry, fcIfInfoPortGroup=fcIfInfoPortGroup, fcIfCapRxBbCreditMax=fcIfCapRxBbCreditMax, fcIfErrorGroupRev3=fcIfErrorGroupRev3, fcIfFragFrames=fcIfFragFrames, fcIfOperStatusCauseDescr=fcIfOperStatusCauseDescr, fcIfModuleGroupRev1=fcIfModuleGroupRev1, fcTrunkIfOperStatusCauseDescr=fcTrunkIfOperStatusCauseDescr, fcIfCapOsmISLRxBbCreditMax=fcIfCapOsmISLRxBbCreditMax, fcIfCapFrmEntry=fcIfCapFrmEntry, fcIfCapOsmRxBbCreditMin=fcIfCapOsmRxBbCreditMin, fcIfOlsIns=fcIfOlsIns, fcIfCapOsmEntry=fcIfCapOsmEntry, fcIfFcTunnelIfIndex=fcIfFcTunnelIfIndex, fcIfCfOutOctets=fcIfCfOutOctets, cffFcFeMIBComplianceRev6=cffFcFeMIBComplianceRev6, fcIfIsServiceStateCapable=fcIfIsServiceStateCapable, fcIfCapOsmRxPerfBufDefault=fcIfCapOsmRxPerfBufDefault, fcIfElpClass2RxDataFieldSize=fcIfElpClass2RxDataFieldSize, cffFcFeMIBComplianceRev9=cffFcFeMIBComplianceRev9, fcIfModuleXcvrFrequencyConfig=fcIfModuleXcvrFrequencyConfig, fcIfHoldTime=fcIfHoldTime, fcIfNOSIn=fcIfNOSIn, fcIfC3InFrames=fcIfC3InFrames, fcIfCapOsmISLRxBbCreditDefault=fcIfCapOsmISLRxBbCreditDefault, fcIfElpClassFOpenSeq=fcIfElpClassFOpenSeq, cffFcFeMIBComplianceRev8=cffFcFeMIBComplianceRev8, fcIfElpRejectReasonCode=fcIfElpRejectReasonCode, fcIfFlapCtrlConfigNumFlaps=fcIfFlapCtrlConfigNumFlaps, FcphVersion=FcphVersion, fcIfGroup=fcIfGroup, fcIfCfInOctets=fcIfCfInOctets, fcIfLRRIn=fcIfLRRIn, fcIfGigEinfoExtGroupRev1=fcIfGigEinfoExtGroupRev1, fcIfElpCosSuppAgreed=fcIfElpCosSuppAgreed, fcIfCapFrmRxPerfBufDefault=fcIfCapFrmRxPerfBufDefault, fcIfBBCreditTransistionToZero=fcIfBBCreditTransistionToZero, fcIfC2Discards=fcIfC2Discards, fcIfPortRateMode=fcIfPortRateMode, fcIfFlapCtrlConfigDuration=fcIfFlapCtrlConfigDuration, fcIfCapOsmISLRxPerfBufDefault=fcIfCapOsmISLRxPerfBufDefault, fcIfModuleBandwidthFairnessOper=fcIfModuleBandwidthFairnessOper, fcIfToggleCtrlConfigDuration=fcIfToggleCtrlConfigDuration, fcIfElpClassFRxDataFieldSize=fcIfElpClassFRxDataFieldSize, fcIfErrorGroupRev2=fcIfErrorGroupRev2, fcIfWwn=fcIfWwn, fcIfOperRxPerfBuffer=fcIfOperRxPerfBuffer, fcIfCapISLRxBbCreditMin=fcIfCapISLRxBbCreditMin, fcIfRNIDInfoTypeNumber=fcIfRNIDInfoTypeNumber, fcIfNonLipF8Out=fcIfNonLipF8Out, fcotInserted=fcotInserted, cffFcFeMIBCompliance2=cffFcFeMIBCompliance2, fcIfCapBbScnMax=fcIfCapBbScnMax, fcIfRNIDInfoManufacturer=fcIfRNIDInfoManufacturer, fcIfOutDiscards=fcIfOutDiscards, cffFcFeMIBComplianceRev13=cffFcFeMIBComplianceRev13, fcIfCapFcphVersionHigh=fcIfCapFcphVersionHigh, fcIfStatEntry=fcIfStatEntry, cffFcFeNotifications=cffFcFeNotifications, fcIfC3AccountingGroup=fcIfC3AccountingGroup, fcIfSigLosses=fcIfSigLosses, fcTrunkIfOperStatusCause=fcTrunkIfOperStatusCause, fcIfCapFrmISLRxPerfBufDefault=fcIfCapFrmISLRxPerfBufDefault, fcIfVendor=fcIfVendor, fcIfTxWtAvgBBCreditTransitionToZero=fcIfTxWtAvgBBCreditTransitionToZero, fcIfEOFaFrames=fcIfEOFaFrames, fcIfRNIDInfoEntry=fcIfRNIDInfoEntry, fcIfLoginGroup=fcIfLoginGroup, fcIfCfInFrames=fcIfCfInFrames, fcIfSFPSerialIDData=fcIfSFPSerialIDData, fcIfTransmitterType=fcIfTransmitterType, fcTrunkIfTable=fcTrunkIfTable, fcIfConnectorType=fcIfConnectorType, fcIfNxClass3SeqDelivAgreed=fcIfNxClass3SeqDelivAgreed, fcIfFlapCtrlConfigGroup=fcIfFlapCtrlConfigGroup, fcIfNOSOut=fcIfNOSOut, fcTrunkIfGroup=fcTrunkIfGroup, fcIfAdminRxBbCreditModeISL=fcIfAdminRxBbCreditModeISL, fcIfFLoginTable=fcIfFLoginTable, fcIfCapFrmRxBbCreditDefault=fcIfCapFrmRxBbCreditDefault, fcIfErrorTable=fcIfErrorTable, fcIfC2InFrames=fcIfC2InFrames, fcIfRNIDInfoPlantOfMfg=fcIfRNIDInfoPlantOfMfg, fcIfLinkResetOuts=fcIfLinkResetOuts, fcIfCapFrmISLRxBbCreditMin=fcIfCapFrmISLRxBbCreditMin, fcIfCapOsmRxBbCreditMax=fcIfCapOsmRxBbCreditMax, fcIfPortInitStatus=fcIfPortInitStatus, fcIfElpClass2SeqDelivAgreed=fcIfElpClass2SeqDelivAgreed, fcIfLRROut=fcIfLRROut, fcIfCapEntry=fcIfCapEntry, fcIfCapTable=fcIfCapTable, fcIfCapClass2SeqDeliv=fcIfCapClass2SeqDeliv, fcIfIsPortRateModeCapable=fcIfIsPortRateModeCapable, fcIfC2FrjtFrames=fcIfC2FrjtFrames, fcIfCurrRxBbCredit=fcIfCurrRxBbCredit, adminTrunkProtocol=adminTrunkProtocol, fcIfCapOsmRxBbCreditWriteable=fcIfCapOsmRxBbCreditWriteable, fcIfErrorGroup=fcIfErrorGroup, fcIfGigEInfoGroup=fcIfGigEInfoGroup, fcIfGigEEntry=fcIfGigEEntry, fcIfNonLipF8In=fcIfNonLipF8In, cffFcFeConfig=cffFcFeConfig, fcIfFECCorrectedBlks=fcIfFECCorrectedBlks, fcIfModuleGroup=fcIfModuleGroup, fcIfGigEinfoExtGroup=fcIfGigEinfoExtGroup, fcIfRevision=fcIfRevision, fcIfCapClass3SeqDeliv=fcIfCapClass3SeqDeliv, fcIfServiceState=fcIfServiceState, fcIfLipF8Out=fcIfLipF8Out, fcIfFlapCtrlConfigEntry=fcIfFlapCtrlConfigEntry, fcIfModuleEntry=fcIfModuleEntry, fcIfC2OutOctets=fcIfC2OutOctets, fcIfFlapCtrlConfigEnable=fcIfFlapCtrlConfigEnable, fcIfToggleCtrlConfigGroup=fcIfToggleCtrlConfigGroup, cffFcFeStatistics=cffFcFeStatistics, fcIfCfAccountingEntry=fcIfCfAccountingEntry, FcBbCreditModel=FcBbCreditModel, fcIfCapFrmTable=fcIfCapFrmTable, fcIfCapOsmRxPerfBufMax=fcIfCapOsmRxPerfBufMax, fcIfPortChannelIfIndex=fcIfPortChannelIfIndex, fcIfCapFrmRxBbCreditMax=fcIfCapFrmRxBbCreditMax, fcIfFramesDiscard=fcIfFramesDiscard, fcIfC3AccountingEntry=fcIfC3AccountingEntry, fcTrunkIfEntry=fcTrunkIfEntry, fcIfAdminBbScnMode=fcIfAdminBbScnMode, fcIfCfDiscards=fcIfCfDiscards, fcIfStatGroup=fcIfStatGroup, fcIfCapRxDataFieldSizeMax=fcIfCapRxDataFieldSizeMax, fcIfModuleBandwidthFairnessConfig=fcIfModuleBandwidthFairnessConfig, fcIfCapFcphVersionLow=fcIfCapFcphVersionLow, fcIfNxClass2SeqDelivAgreed=fcIfNxClass2SeqDelivAgreed, fcIfToggleCtrlConfigReason=fcIfToggleCtrlConfigReason, FcPerfBuffer=FcPerfBuffer, fcIfGroupRev1=fcIfGroupRev1, fcIfCapFrmISLRxBbCreditDefault=fcIfCapFrmISLRxBbCreditDefault, fcIfCapFrmISLRxPerfBufMin=fcIfCapFrmISLRxPerfBufMin, fcIfFLoginEntry=fcIfFLoginEntry, fcIfOperRxBbCredit=fcIfOperRxBbCredit, fcIfCapFrmRxPerfBufMax=fcIfCapFrmRxPerfBufMax, fcIfActiveVsanUpList4k=fcIfActiveVsanUpList4k, fcIfCurrTxBbCredit=fcIfCurrTxBbCredit, fcIfElpNbrNodeName=fcIfElpNbrNodeName, fcIfCapGroup=fcIfCapGroup, fcIfTable=fcIfTable, fcIfC2AccountingEntry=fcIfC2AccountingEntry, fcIfFlapCtrlConfigReason=fcIfFlapCtrlConfigReason, fcIfRNIDInfoTable=fcIfRNIDInfoTable, fcIfCapFrmISLRxPerfBufMax=fcIfCapFrmISLRxPerfBufMax, fcIfRNIDInfoPortId=fcIfRNIDInfoPortId, fcIfCapBbScnCapable=fcIfCapBbScnCapable, fcIfC3OutOctets=fcIfC3OutOctets, fcIfC2AccountingTable=fcIfC2AccountingTable, fcIfRNIDInfoStatus=fcIfRNIDInfoStatus, fcTrunkIfOperStatus=fcTrunkIfOperStatus, fcIfAdminRxPerfBuffer=fcIfAdminRxPerfBuffer, fcIfElpTxBbCredit=fcIfElpTxBbCredit, fcIfLoginEntryCount=fcIfLoginEntryCount, fcIfRNIDInfoUnitType=fcIfRNIDInfoUnitType, fcIfBBCreditTransistionFromZero=fcIfBBCreditTransistionFromZero, fcIfELPFailures=fcIfELPFailures, cffFcFeMIBCompliance4=cffFcFeMIBCompliance4, fcIfCapOsmRxPerfBufMin=fcIfCapOsmRxPerfBufMin, fcIfC2PBSYFrames=fcIfC2PBSYFrames, fcIfElpGroup=fcIfElpGroup, fcIfToggleCtrlConfigEnable=fcIfToggleCtrlConfigEnable, fcIfC2InOctets=fcIfC2InOctets, fcIfGigEPortChannelIfIndex=fcIfGigEPortChannelIfIndex, fcIfBeaconMode=fcIfBeaconMode, fcIfCapOsmISLRxBbCreditMin=fcIfCapOsmISLRxBbCreditMin, cffFcFeMIBCompliance1=cffFcFeMIBCompliance1, cffFcFeMIBCompliance5=cffFcFeMIBCompliance5, fcIfToggleCtrlConfigNumFlaps=fcIfToggleCtrlConfigNumFlaps, fcIfUnknownClassFrames=fcIfUnknownClassFrames, fcIfOperStatusCause=fcIfOperStatusCause, fcIfC3Discards=fcIfC3Discards, fcIfTimeOutDiscards=fcIfTimeOutDiscards, fcIfC2PRJTFrames=fcIfC2PRJTFrames, fcIfModuleOverSubscriptionRatioConfig=fcIfModuleOverSubscriptionRatioConfig, fcIfAddressIdErrors=fcIfAddressIdErrors, fcIfPrimSeqProtoErrors=fcIfPrimSeqProtoErrors, fcIfElpClass3RxDataFieldSize=fcIfElpClass3RxDataFieldSize, fcIfRNIDInfoGroup=fcIfRNIDInfoGroup, fcIfNxPortName=fcIfNxPortName, fcIf8b10bDisparityErrors=fcIf8b10bDisparityErrors)
mibBuilder.exportSymbols("CISCO-FC-FE-MIB", fcIfCapRxBbCreditDefault=fcIfCapRxBbCreditDefault, fcIfCapGroupRev1=fcIfCapGroupRev1, fcIfElpTable=fcIfElpTable, fcIfActiveVsanList4k=fcIfActiveVsanList4k, fcIfAllowedVsanList4k=fcIfAllowedVsanList4k, fcIfErrorEntry=fcIfErrorEntry, PYSNMP_MODULE_ID=ciscoFcFeMIB, fcIfRNIDInfoModelNumber=fcIfRNIDInfoModelNumber, cffFcFeMIBCompliances=cffFcFeMIBCompliances, fcIfCfOutFrames=fcIfCfOutFrames, fcIfRuntFramesIn=fcIfRuntFramesIn, fcIfCapFrmRxPerfBufWriteable=fcIfCapFrmRxPerfBufWriteable, fcIfAdminRxBbCreditExtended=fcIfAdminRxBbCreditExtended, fcIfOperFECState=fcIfOperFECState, fcIfNxLoginIndex=fcIfNxLoginIndex, fcIfCapCos=fcIfCapCos, fcFeGroup=fcFeGroup, fcotInfoNotificationGroup=fcotInfoNotificationGroup, fcIfCapFrmRxBbCreditWriteable=fcIfCapFrmRxBbCreditWriteable, fcIfAdminRxBbCreditModeFx=fcIfAdminRxBbCreditModeFx, fcIfAdminTrunkMode=fcIfAdminTrunkMode, fcIfCapRxBbCreditWriteable=fcIfCapRxBbCreditWriteable, fcIfCfAccountingGroup=fcIfCfAccountingGroup, cffFcFeMIBComplianceRev11=cffFcFeMIBComplianceRev11, fcIfCfAccountingTable=fcIfCfAccountingTable, fcIfInvalidCrcs=fcIfInvalidCrcs, fcIfFramesTooLong=fcIfFramesTooLong, fcIfNxPortAddress=fcIfNxPortAddress, fcIfCapISLRxBbCreditMax=fcIfCapISLRxBbCreditMax, fcIfToggleCtrlConfigEntry=fcIfToggleCtrlConfigEntry, fcIfC3OutFrames=fcIfC3OutFrames, fcIfToggleCtrlConfigTable=fcIfToggleCtrlConfigTable, fcIfC3AccountingTable=fcIfC3AccountingTable, fcIfElpNbrPortName=fcIfElpNbrPortName, fcIfCapOsmISLRxPerfBufMax=fcIfCapOsmISLRxPerfBufMax, fcIfCapHoldTimeMin=fcIfCapHoldTimeMin, fcIfOperMode=fcIfOperMode, fcIfCapFrmRxBbCreditMin=fcIfCapFrmRxBbCreditMin, fcIfStatTable=fcIfStatTable, fcIfBbScnGroup=fcIfBbScnGroup, fcIfC3InOctets=fcIfC3InOctets, fcIfGroupRev2=fcIfGroupRev2, fcIfSerialNo=fcIfSerialNo, fcIfNxCosSuppAgreed=fcIfNxCosSuppAgreed, fcIfPortType=fcIfPortType, fcIfModuleTable=fcIfModuleTable, fcIfNxTxBbCredit=fcIfNxTxBbCredit, FcBbCredit=FcBbCredit, fcotRemoved=fcotRemoved, fcIfTxWaitCount=fcIfTxWaitCount, fcIfLinkResetIns=fcIfLinkResetIns, cffFcFeMIBConformance=cffFcFeMIBConformance, fcIfElpRxBbCredit=fcIfElpRxBbCredit, fcIfElpClassFEndToEndCredit=fcIfElpClassFEndToEndCredit, fcIfAdminRxBbCredit=fcIfAdminRxBbCredit, fcIfLipF8In=fcIfLipF8In, fcIfErrorGroupRev4=fcIfErrorGroupRev4, fcIfGigEAutoNegotiate=fcIfGigEAutoNegotiate, cffFcFeElementName=cffFcFeElementName, fcIfGigConnectorType=fcIfGigConnectorType, fcIfGigEBeaconMode=fcIfGigEBeaconMode, fcIfCreditLoss=fcIfCreditLoss, ciscoFcFeMIB=ciscoFcFeMIB, FcIfOperStatusReason=FcIfOperStatusReason)
