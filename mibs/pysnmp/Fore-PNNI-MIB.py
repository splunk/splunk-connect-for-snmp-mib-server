#
# PySNMP MIB module Fore-PNNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-PNNI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
software, NsapAddr, NsapPrefix = mibBuilder.importSymbols("Fore-Common-MIB", "software", "NsapAddr", "NsapPrefix")
portNumber, = mibBuilder.importSymbols("Fore-Switch-MIB", "portNumber")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ServiceCategory, TnsPlan, PnniPortId, pnniMapAddrAdvertisedPortId, pnniNodeIndex, AtmAddrPrefix, TnsType, pnniMapOriginatingPortId, pnniMapAddrIndex, PnniPrefixLength, PnniNodeId, PnniMetricsTag, pnniMapOriginatingNodeId, pnniMapIndex, pnniDTLIndex, pnniMapAddrAdvertisingNodeId, PnniNodeIndex = mibBuilder.importSymbols("PNNI-MIB", "ServiceCategory", "TnsPlan", "PnniPortId", "pnniMapAddrAdvertisedPortId", "pnniNodeIndex", "AtmAddrPrefix", "TnsType", "pnniMapOriginatingPortId", "pnniMapAddrIndex", "PnniPrefixLength", "PnniNodeId", "PnniMetricsTag", "pnniMapOriginatingNodeId", "pnniMapIndex", "pnniDTLIndex", "pnniMapAddrAdvertisingNodeId", "PnniNodeIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, ObjectIdentity, MibIdentifier, Counter32, Unsigned32, Counter64, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter32", "Unsigned32", "Counter64", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "NotificationType", "Bits")
TimeStamp, TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
forePnniGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4))
if mibBuilder.loadTexts: forePnniGroup.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: forePnniGroup.setOrganization('FORE')
pnniGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1))
atmRoutingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2))
pnniIfMapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3))
pnniCrankbackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 9))
pnniParametersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 12))
class PnniPcProfileIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

pnniPcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: pnniPcProfileTable.setStatus('current')
pnniPcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"))
if mibBuilder.loadTexts: pnniPcProfileEntry.setStatus('current')
pnniPcProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 1), PnniPcProfileIndex())
if mibBuilder.loadTexts: pnniPcProfileIndex.setStatus('current')
pnniPcProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgmtEntry", 1), ("cacheEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileType.setStatus('current')
pnniPcProfileServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 3), ServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileServiceCategory.setStatus('current')
pnniPcProfileMinFwdCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileMinFwdCR.setStatus('current')
pnniPcProfileMinRevCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileMinRevCR.setStatus('current')
pnniPcProfileFwdClpType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpEqual0", 1), ("clpEqual0Or1", 2))).clone('clpEqual0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileFwdClpType.setStatus('current')
pnniPcProfileRevClpType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpEqual0", 1), ("clpEqual0Or1", 2))).clone('clpEqual0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRevClpType.setStatus('current')
pnniPcProfileFwdCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileFwdCLR.setStatus('current')
pnniPcProfileRevCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRevCLR.setStatus('current')
pnniPcProfileOptCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileOptCTD.setStatus('current')
pnniPcProfileOptCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileOptCDV.setStatus('current')
pnniPcProfileOptAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aw", 2), ("caw", 3))).clone('aw')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileOptAdminWeight.setStatus('current')
pnniPcProfileRstrVPOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRstrVPOnly.setStatus('current')
pnniPcProfileRstrLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRstrLoadBalance.setStatus('current')
pnniPcProfileNumberOfAvoidLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileNumberOfAvoidLinks.setStatus('current')
pnniPcProfileNumberOfPreferLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileNumberOfPreferLinks.setStatus('current')
pnniPcProfileNumberOfHits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileNumberOfHits.setStatus('current')
pnniPcProfileTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileTimeStamp.setStatus('current')
pnniPcProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("computed", 2), ("computing", 3), ("touched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileState.setStatus('current')
pnniPcProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRowStatus.setStatus('current')
pnniPcProfileCongestionBased = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileCongestionBased.setStatus('current')
pnniExportPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2), )
if mibBuilder.loadTexts: pnniExportPolicyTable.setStatus('current')
pnniExportPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniExportPolicyAddress"), (0, "Fore-PNNI-MIB", "pnniExportPolicyPrefixLength"))
if mibBuilder.loadTexts: pnniExportPolicyEntry.setStatus('current')
pnniExportPolicyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 1), AtmAddrPrefix())
if mibBuilder.loadTexts: pnniExportPolicyAddress.setStatus('current')
pnniExportPolicyPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 2), PnniPrefixLength())
if mibBuilder.loadTexts: pnniExportPolicyPrefixLength.setStatus('current')
pnniExportPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("exterior", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyType.setStatus('current')
pnniExportPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("summary", 1), ("suppress", 2), ("advertise", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyAction.setStatus('current')
pnniExportPolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("summarizing", 1), ("suppressing", 2), ("advertising", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniExportPolicyState.setStatus('current')
pnniExportPolicyTnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 6), TnsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyTnsType.setStatus('current')
pnniExportPolicyTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 7), TnsPlan()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyTnsPlan.setStatus('current')
pnniExportPolicyTnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyTnsId.setStatus('current')
pnniExportPolicyMetricsTag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 9), PnniMetricsTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyMetricsTag.setStatus('current')
pnniExportPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyRowStatus.setStatus('current')
pnniNodeExtnTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3), )
if mibBuilder.loadTexts: pnniNodeExtnTable.setStatus('current')
pnniNodeExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"))
if mibBuilder.loadTexts: pnniNodeExtnEntry.setStatus('current')
pnniNodeExtnDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnDomainID.setStatus('current')
pnniNodeExtnForeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnForeLevel.setStatus('current')
pnniNodeExtnForeArea = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnForeArea.setStatus('current')
pnniNodeExtnShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeExtnShutdown.setStatus('current')
pnniNodeExtnLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnLoadBalancing.setStatus('current')
pnniNodeExtnAdvertisedPglPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeExtnAdvertisedPglPriority.setStatus('current')
pnniNodeExtnPcCongestionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnPcCongestionRange.setStatus('current')
pnniMapRaigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4), )
if mibBuilder.loadTexts: pnniMapRaigTable.setStatus('current')
pnniMapRaigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniMapOriginatingNodeId"), (0, "PNNI-MIB", "pnniMapOriginatingPortId"), (0, "PNNI-MIB", "pnniMapIndex"), (0, "Fore-PNNI-MIB", "pnniMapRaigIndex"))
if mibBuilder.loadTexts: pnniMapRaigEntry.setStatus('current')
pnniMapRaigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: pnniMapRaigIndex.setStatus('current')
pnniMapRaigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigDirection.setStatus('current')
pnniMapRaigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigFlags.setStatus('current')
pnniMapRaigAdminWt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigAdminWt.setStatus('current')
pnniMapRaigMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigMaximumCellRate.setStatus('current')
pnniMapRaigAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigAvailableCellRate.setStatus('current')
pnniMapRaigCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellTransferDelay.setStatus('current')
pnniMapRaigCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellDelayVariation.setStatus('current')
pnniMapRaigCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellLossRatio.setStatus('current')
pnniMapRaigCellLossRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellLossRatio1.setStatus('current')
pnniMapRaigCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellRateMargin.setStatus('current')
pnniMapRaigVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigVarianceFactor.setStatus('current')
pnniMapAddrRaigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5), )
if mibBuilder.loadTexts: pnniMapAddrRaigTable.setStatus('current')
pnniMapAddrRaigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniMapAddrAdvertisingNodeId"), (0, "PNNI-MIB", "pnniMapAddrAdvertisedPortId"), (0, "PNNI-MIB", "pnniMapAddrIndex"), (0, "Fore-PNNI-MIB", "pnniMapAddrRaigIndex"))
if mibBuilder.loadTexts: pnniMapAddrRaigEntry.setStatus('current')
pnniMapAddrRaigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: pnniMapAddrRaigIndex.setStatus('current')
pnniMapAddrRaigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigDirection.setStatus('current')
pnniMapAddrRaigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigFlags.setStatus('current')
pnniMapAddrRaigAdminWt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigAdminWt.setStatus('current')
pnniMapAddrRaigMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigMaximumCellRate.setStatus('current')
pnniMapAddrRaigAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigAvailableCellRate.setStatus('current')
pnniMapAddrRaigCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellTransferDelay.setStatus('current')
pnniMapAddrRaigCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellDelayVariation.setStatus('current')
pnniMapAddrRaigCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellLossRatio.setStatus('current')
pnniMapAddrRaigCellLossRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellLossRatio1.setStatus('current')
pnniMapAddrRaigCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellRateMargin.setStatus('current')
pnniMapAddrRaigVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigVarianceFactor.setStatus('current')
pnniPcProfileMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6), )
if mibBuilder.loadTexts: pnniPcProfileMapTable.setStatus('current')
pnniPcProfileMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileMapOptIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileMapNodeId"))
if mibBuilder.loadTexts: pnniPcProfileMapEntry.setStatus('current')
pnniPcProfileMapOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPcProfileMapOptIndex.setStatus('current')
pnniPcProfileMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 2), PnniNodeId())
if mibBuilder.loadTexts: pnniPcProfileMapNodeId.setStatus('current')
pnniPcProfileMapLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapLocalPort.setStatus('current')
pnniPcProfileMapParentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 4), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapParentNode.setStatus('current')
pnniPcProfileMapAdminWt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapAdminWt.setStatus('current')
pnniPcProfileMapMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapMaximumCellRate.setStatus('current')
pnniPcProfileMapAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapAvailableCellRate.setStatus('current')
pnniPcProfileMapCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellTransferDelay.setStatus('current')
pnniPcProfileMapCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellDelayVariation.setStatus('current')
pnniPcProfileMapCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellLossRatio.setStatus('current')
pnniPcProfileMapCellLossRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellLossRatio1.setStatus('current')
pnniPcProfileMapCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellRateMargin.setStatus('current')
pnniPcProfileMapVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapVarianceFactor.setStatus('current')
pnniSpanningTreeMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7), )
if mibBuilder.loadTexts: pnniSpanningTreeMapTable.setStatus('current')
pnniSpanningTreeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniSpanningTreeMapNodeId"))
if mibBuilder.loadTexts: pnniSpanningTreeMapEntry.setStatus('current')
pnniSpanningTreeMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 1), PnniNodeId())
if mibBuilder.loadTexts: pnniSpanningTreeMapNodeId.setStatus('current')
pnniSpanningTreeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uptodate", 1), ("linkadded", 2), ("linkdeleted", 3), ("treeclean", 4), ("pglchanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapStatus.setStatus('current')
pnniSpanningTreeMapParentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 3), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapParentNode.setStatus('current')
pnniSpanningTreeMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 4), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapPort.setStatus('current')
pnniSpanningTreeMapLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hlink", 1), ("uplink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapLinkType.setStatus('current')
pnniConnTreeMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18), )
if mibBuilder.loadTexts: pnniConnTreeMapTable.setStatus('current')
pnniConnTreeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniConnTreeMapNodeId"))
if mibBuilder.loadTexts: pnniConnTreeMapEntry.setStatus('current')
pnniConnTreeMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 1), PnniNodeId())
if mibBuilder.loadTexts: pnniConnTreeMapNodeId.setStatus('current')
pnniConnTreeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uptodate", 1), ("linkadded", 2), ("linkdeleted", 3), ("treeclean", 4), ("pglchanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapStatus.setStatus('current')
pnniConnTreeMapParentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 3), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapParentNode.setStatus('current')
pnniConnTreeMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 4), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapPort.setStatus('current')
pnniConnTreeMapLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hlink", 1), ("uplink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapLinkType.setStatus('current')
pnniNodeScStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8), )
if mibBuilder.loadTexts: pnniNodeScStatsTable.setStatus('current')
pnniNodeScStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"))
if mibBuilder.loadTexts: pnniNodeScStatsEntry.setStatus('current')
pnniNodeScStatsNrOfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfEvents.setStatus('current')
pnniNodeScStatsNrOfPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfPurges.setStatus('current')
pnniNodeScStatsNrOfTimeoutPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfTimeoutPurges.setStatus('current')
pnniNodeScStatsNrOfPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfPacketsDropped.setStatus('current')
pnniNodeScStatsNrOfHiPriPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfHiPriPktsDropped.setStatus('current')
pnniNodeScStatsNrOfLowPriPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfLowPriPktsDropped.setStatus('current')
pnniNodeScStatsNrOfNodalInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfNodalInfoEvents.setStatus('current')
pnniNodeScStatsNrOfHorizLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfHorizLinkEvents.setStatus('current')
pnniNodeScStatsNrOfUpLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfUpLinkEvents.setStatus('current')
pnniNodeScStatsNrOfNodalStateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfNodalStateEvents.setStatus('current')
pnniPcProfileAvoidLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10), )
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkTable.setStatus('current')
pnniPcProfileAvoidLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileAvoidLinkIndex"))
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkEntry.setStatus('current')
pnniPcProfileAvoidLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkIndex.setStatus('current')
pnniPcProfileAvoidLinkNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkNodeId.setStatus('current')
pnniPcProfileAvoidLinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkPortId.setStatus('current')
pnniPcProfileAvoidLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalLink", 1), ("reverseLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkType.setStatus('current')
pnniPcProfileAvoidLinkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 5), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkRemoteNodeId.setStatus('current')
pnniPcProfilePreferLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11), )
if mibBuilder.loadTexts: pnniPcProfilePreferLinkTable.setStatus('current')
pnniPcProfilePreferLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfilePreferLinkIndex"))
if mibBuilder.loadTexts: pnniPcProfilePreferLinkEntry.setStatus('current')
pnniPcProfilePreferLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPcProfilePreferLinkIndex.setStatus('current')
pnniPcProfilePreferLinkNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkNodeId.setStatus('current')
pnniPcProfilePreferLinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkPortId.setStatus('current')
pnniPcProfilePreferLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalLink", 1), ("reverseLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkType.setStatus('current')
pnniPcProfilePreferLinkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 5), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkRemoteNodeId.setStatus('current')
pnniDtlListTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15), )
if mibBuilder.loadTexts: pnniDtlListTable.setStatus('current')
pnniDtlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniDtlListTag"), (0, "Fore-PNNI-MIB", "pnniDtlListNodeIndex"), (0, "Fore-PNNI-MIB", "pnniDtlListDtlIndex"))
if mibBuilder.loadTexts: pnniDtlListEntry.setStatus('current')
pnniDtlListTag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pnniDtlListTag.setStatus('current')
pnniDtlListNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pnniDtlListNodeIndex.setStatus('current')
pnniDtlListDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pnniDtlListDtlIndex.setStatus('current')
pnniDtlListWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniDtlListWeight.setStatus('current')
pnniDtlListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniDtlListStatus.setStatus('current')
forePnniDTLTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13), )
if mibBuilder.loadTexts: forePnniDTLTable.setStatus('current')
forePnniDTLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniDTLIndex"))
if mibBuilder.loadTexts: forePnniDTLEntry.setStatus('current')
forePnniDTLName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forePnniDTLName.setStatus('current')
forePnniDTLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forePnniDTLValidity.setStatus('current')
pnniDtlComputationTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14), )
if mibBuilder.loadTexts: pnniDtlComputationTable.setStatus('current')
pnniDtlComputationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniDtlComputationNodeIndex"), (0, "Fore-PNNI-MIB", "pnniDtlComputationDtlIndex"))
if mibBuilder.loadTexts: pnniDtlComputationEntry.setStatus('current')
pnniDtlComputationNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 1), PnniNodeIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationNodeIndex.setStatus('current')
pnniDtlComputationDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationDtlIndex.setStatus('current')
pnniDtlComputationDestNsapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 3), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationDestNsapAddress.setStatus('current')
pnniDtlComputationCompute = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationCompute.setStatus('current')
pnniMaxCrankbackTries = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMaxCrankbackTries.setStatus('current')
pnniMaxDtlSize = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMaxDtlSize.setStatus('current')
pnniLoadBalancedUbrEnable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniLoadBalancedUbrEnable.setStatus('current')
rtDomainTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1), )
if mibBuilder.loadTexts: rtDomainTable.setStatus('current')
rtDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"))
if mibBuilder.loadTexts: rtDomainEntry.setStatus('current')
rtDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainID.setStatus('current')
rtDomainDefaultProto = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ftpnni", 1), ("pnni", 2), ("gateway", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainDefaultProto.setStatus('current')
rtDomainPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 3), NsapPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainPrefix.setStatus('current')
rtDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainName.setStatus('current')
rtDomainDefSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainDefSumState.setStatus('current')
rtDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainStatus.setStatus('current')
rtDomainDefaultPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 7), NsapPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDomainDefaultPrefix.setStatus('current')
atmrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2), )
if mibBuilder.loadTexts: atmrPrefixTable.setStatus('current')
atmrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"), (0, "Fore-PNNI-MIB", "atmrPrefixAddr"), (0, "Fore-PNNI-MIB", "atmrPrefixLength"))
if mibBuilder.loadTexts: atmrPrefixEntry.setStatus('current')
atmrPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 1), AtmAddrPrefix())
if mibBuilder.loadTexts: atmrPrefixAddr.setStatus('current')
atmrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 2), PnniPrefixLength())
if mibBuilder.loadTexts: atmrPrefixLength.setStatus('current')
atmrPrefixFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixFlags.setStatus('current')
atmrPrefixOwnerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixOwnerLevel.setStatus('current')
atmrPrefixOwnerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bogus", 1), ("admin", 2), ("ftpnni", 3), ("pnni", 4), ("ilmi", 5), ("static", 6), ("atmfint", 7), ("atmfext", 8), ("interdom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixOwnerProtocol.setStatus('current')
atmrPrefixOwnerPathFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixOwnerPathFlags.setStatus('current')
atmrPrefixTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixTimeStamp.setStatus('current')
atmrPteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3), )
if mibBuilder.loadTexts: atmrPteTable.setStatus('current')
atmrPteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"), (0, "Fore-PNNI-MIB", "atmrPrefixAddr"), (0, "Fore-PNNI-MIB", "atmrPrefixLength"), (0, "Fore-PNNI-MIB", "atmrPteIndex"))
if mibBuilder.loadTexts: atmrPteEntry.setStatus('current')
atmrPteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: atmrPteIndex.setStatus('current')
atmrPteProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteProtocolId.setStatus('current')
atmrPteProtocolHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteProtocolHandle.setStatus('current')
atmrPteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bogus", 1), ("admin", 2), ("ftpnni", 3), ("pnni", 4), ("ilmi", 5), ("static", 6), ("atmfint", 7), ("atmfext", 8), ("interdom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteProtocol.setStatus('current')
atmrPtePathFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPtePathFlags.setStatus('current')
atmrPteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteLevel.setStatus('current')
atmrPteArea = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteArea.setStatus('current')
atmrPteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteScope.setStatus('current')
atmrPteSourceArea = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteSourceArea.setStatus('current')
atmrPteType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteType.setStatus('current')
atmrPteTnsLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsLen.setStatus('current')
atmrPteTnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 12), TnsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsType.setStatus('current')
atmrPteTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 13), TnsPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsPlan.setStatus('current')
atmrPteTnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsId.setStatus('current')
atmrInterDomainRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4), )
if mibBuilder.loadTexts: atmrInterDomainRouteTable.setStatus('current')
atmrInterDomainRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "atmrIDRDomainID"), (0, "Fore-PNNI-MIB", "atmrIDRAddr"), (0, "Fore-PNNI-MIB", "atmrIDRAddrLen"), (0, "Fore-PNNI-MIB", "atmrIDRDestDomainID"))
if mibBuilder.loadTexts: atmrInterDomainRouteEntry.setStatus('current')
atmrIDRDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRDomainID.setStatus('current')
atmrIDRAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 2), AtmAddrPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRAddr.setStatus('current')
atmrIDRAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 3), PnniPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRAddrLen.setStatus('current')
atmrIDRDestDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRDestDomainID.setStatus('current')
atmrIDRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRRowStatus.setStatus('current')
atmrDestNsapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 5), )
if mibBuilder.loadTexts: atmrDestNsapTable.setStatus('current')
atmrDestNsapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 5, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"), (0, "Fore-Switch-MIB", "portNumber"))
if mibBuilder.loadTexts: atmrDestNsapEntry.setStatus('current')
atmrDestNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 5, 1, 1), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrDestNsapAddr.setStatus('current')
pnniPortVpiMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1), )
if mibBuilder.loadTexts: pnniPortVpiMapTable.setStatus('current')
pnniPortVpiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniPortVpiMapPort"), (0, "Fore-PNNI-MIB", "pnniPortVpiMapVpi"))
if mibBuilder.loadTexts: pnniPortVpiMapEntry.setStatus('current')
pnniPortVpiMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPortVpiMapPort.setStatus('current')
pnniPortVpiMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: pnniPortVpiMapVpi.setStatus('current')
pnniPortVpiMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortVpiMapIfIndex.setStatus('current')
pnniPortVpiMapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 4), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortVpiMapPortId.setStatus('current')
pnniPortIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2), )
if mibBuilder.loadTexts: pnniPortIdMapTable.setStatus('current')
pnniPortIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniPortIdMapPortId"))
if mibBuilder.loadTexts: pnniPortIdMapEntry.setStatus('current')
pnniPortIdMapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 1), PnniPortId())
if mibBuilder.loadTexts: pnniPortIdMapPortId.setStatus('current')
pnniPortIdMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortIdMapPort.setStatus('current')
pnniPortIdMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortIdMapVpi.setStatus('current')
pnniPortIdMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortIdMapIfIndex.setStatus('current')
pnniMapNodeExtTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16), )
if mibBuilder.loadTexts: pnniMapNodeExtTable.setStatus('current')
pnniMapNodeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniMapNodeExtRemoteNodeId"))
if mibBuilder.loadTexts: pnniMapNodeExtEntry.setStatus('current')
pnniMapNodeExtRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 1), PnniNodeId())
if mibBuilder.loadTexts: pnniMapNodeExtRemoteNodeId.setStatus('current')
pnniMapNodeExtSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtSoftwareVersion.setStatus('current')
pnniMapNodeExtHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtHardwareVersion.setStatus('current')
pnniMapNodeExtHardwareId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtHardwareId.setStatus('current')
pnniMapNodeExtSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtSwitchName.setStatus('current')
pnniMapNodeExtRemoteNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtRemoteNodeIndex.setStatus('current')
pnniMapNodeExtForeNodalFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtForeNodalFlags.setStatus('current')
class InterfaceLabel(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

pnniMapNodeIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17), )
if mibBuilder.loadTexts: pnniMapNodeIpAddrTable.setStatus('current')
pnniMapNodeIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniMapNodeExtRemoteNodeId"), (0, "Fore-PNNI-MIB", "pnniMapNodeIpAddr"))
if mibBuilder.loadTexts: pnniMapNodeIpAddrEntry.setStatus('current')
pnniMapNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeIpAddr.setStatus('current')
pnniMapNodeIpAddrIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17, 1, 2), InterfaceLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeIpAddrIfName.setStatus('current')
mibBuilder.exportSymbols("Fore-PNNI-MIB", atmrPrefixOwnerPathFlags=atmrPrefixOwnerPathFlags, pnniConnTreeMapTable=pnniConnTreeMapTable, pnniPcProfileMapMaximumCellRate=pnniPcProfileMapMaximumCellRate, pnniExportPolicyTnsPlan=pnniExportPolicyTnsPlan, pnniPcProfilePreferLinkPortId=pnniPcProfilePreferLinkPortId, pnniExportPolicyTable=pnniExportPolicyTable, pnniPcProfileMapVarianceFactor=pnniPcProfileMapVarianceFactor, pnniConnTreeMapEntry=pnniConnTreeMapEntry, pnniLoadBalancedUbrEnable=pnniLoadBalancedUbrEnable, atmrDestNsapEntry=atmrDestNsapEntry, pnniMapNodeIpAddrEntry=pnniMapNodeIpAddrEntry, pnniNodeScStatsNrOfEvents=pnniNodeScStatsNrOfEvents, pnniPcProfileAvoidLinkRemoteNodeId=pnniPcProfileAvoidLinkRemoteNodeId, pnniExportPolicyType=pnniExportPolicyType, rtDomainDefaultProto=rtDomainDefaultProto, pnniPcProfileAvoidLinkEntry=pnniPcProfileAvoidLinkEntry, atmrPteArea=atmrPteArea, pnniNodeExtnLoadBalancing=pnniNodeExtnLoadBalancing, pnniPcProfileMapTable=pnniPcProfileMapTable, pnniDtlComputationDestNsapAddress=pnniDtlComputationDestNsapAddress, atmrIDRDestDomainID=atmrIDRDestDomainID, pnniMapRaigMaximumCellRate=pnniMapRaigMaximumCellRate, pnniNodeExtnEntry=pnniNodeExtnEntry, atmrPteLevel=atmrPteLevel, atmrPrefixTable=atmrPrefixTable, pnniExportPolicyTnsType=pnniExportPolicyTnsType, pnniDtlListEntry=pnniDtlListEntry, pnniNodeScStatsTable=pnniNodeScStatsTable, atmrPteTnsLen=atmrPteTnsLen, pnniMapAddrRaigAdminWt=pnniMapAddrRaigAdminWt, pnniPcProfileOptCDV=pnniPcProfileOptCDV, pnniIfMapGroup=pnniIfMapGroup, pnniPcProfileMapEntry=pnniPcProfileMapEntry, pnniPortIdMapPort=pnniPortIdMapPort, pnniNodeScStatsNrOfPacketsDropped=pnniNodeScStatsNrOfPacketsDropped, pnniMapAddrRaigEntry=pnniMapAddrRaigEntry, pnniPcProfileEntry=pnniPcProfileEntry, pnniPortVpiMapIfIndex=pnniPortVpiMapIfIndex, rtDomainID=rtDomainID, pnniNodeScStatsNrOfUpLinkEvents=pnniNodeScStatsNrOfUpLinkEvents, pnniPcProfileMinFwdCR=pnniPcProfileMinFwdCR, pnniExportPolicyEntry=pnniExportPolicyEntry, rtDomainName=rtDomainName, atmrPrefixAddr=atmrPrefixAddr, atmrInterDomainRouteTable=atmrInterDomainRouteTable, atmrPteScope=atmrPteScope, pnniMapAddrRaigIndex=pnniMapAddrRaigIndex, pnniMapNodeExtSoftwareVersion=pnniMapNodeExtSoftwareVersion, forePnniDTLTable=forePnniDTLTable, pnniNodeExtnPcCongestionRange=pnniNodeExtnPcCongestionRange, pnniMapAddrRaigAvailableCellRate=pnniMapAddrRaigAvailableCellRate, pnniPcProfilePreferLinkTable=pnniPcProfilePreferLinkTable, pnniMapRaigCellRateMargin=pnniMapRaigCellRateMargin, pnniPortIdMapVpi=pnniPortIdMapVpi, pnniPcProfileMapLocalPort=pnniPcProfileMapLocalPort, pnniPcProfileTable=pnniPcProfileTable, pnniMapRaigAdminWt=pnniMapRaigAdminWt, pnniNodeScStatsNrOfLowPriPktsDropped=pnniNodeScStatsNrOfLowPriPktsDropped, pnniPcProfileTimeStamp=pnniPcProfileTimeStamp, pnniMapRaigEntry=pnniMapRaigEntry, atmrPrefixFlags=atmrPrefixFlags, pnniMapAddrRaigMaximumCellRate=pnniMapAddrRaigMaximumCellRate, atmrDestNsapAddr=atmrDestNsapAddr, pnniPcProfileRowStatus=pnniPcProfileRowStatus, pnniNodeScStatsNrOfTimeoutPurges=pnniNodeScStatsNrOfTimeoutPurges, pnniMapRaigCellLossRatio=pnniMapRaigCellLossRatio, pnniMaxCrankbackTries=pnniMaxCrankbackTries, pnniPortVpiMapEntry=pnniPortVpiMapEntry, pnniNodeScStatsEntry=pnniNodeScStatsEntry, pnniPcProfileMapAdminWt=pnniPcProfileMapAdminWt, pnniPortIdMapPortId=pnniPortIdMapPortId, pnniMapAddrRaigCellDelayVariation=pnniMapAddrRaigCellDelayVariation, pnniPcProfileFwdCLR=pnniPcProfileFwdCLR, pnniPcProfileRevClpType=pnniPcProfileRevClpType, pnniPcProfileMapCellLossRatio1=pnniPcProfileMapCellLossRatio1, pnniConnTreeMapLinkType=pnniConnTreeMapLinkType, pnniPcProfilePreferLinkIndex=pnniPcProfilePreferLinkIndex, forePnniDTLName=forePnniDTLName, atmrPrefixTimeStamp=atmrPrefixTimeStamp, rtDomainDefaultPrefix=rtDomainDefaultPrefix, atmrPrefixOwnerLevel=atmrPrefixOwnerLevel, pnniPcProfileMapParentNode=pnniPcProfileMapParentNode, pnniPcProfileMapNodeId=pnniPcProfileMapNodeId, atmrPteProtocol=atmrPteProtocol, atmrPrefixOwnerProtocol=atmrPrefixOwnerProtocol, pnniMapNodeExtHardwareId=pnniMapNodeExtHardwareId, pnniDtlListNodeIndex=pnniDtlListNodeIndex, pnniMaxDtlSize=pnniMaxDtlSize, pnniDtlListStatus=pnniDtlListStatus, pnniPortVpiMapPortId=pnniPortVpiMapPortId, pnniConnTreeMapStatus=pnniConnTreeMapStatus, rtDomainDefSumState=rtDomainDefSumState, pnniMapRaigTable=pnniMapRaigTable, pnniPcProfilePreferLinkEntry=pnniPcProfilePreferLinkEntry, pnniMapRaigVarianceFactor=pnniMapRaigVarianceFactor, pnniNodeScStatsNrOfHiPriPktsDropped=pnniNodeScStatsNrOfHiPriPktsDropped, pnniMapNodeExtSwitchName=pnniMapNodeExtSwitchName, pnniPcProfileRevCLR=pnniPcProfileRevCLR, pnniMapAddrRaigCellLossRatio1=pnniMapAddrRaigCellLossRatio1, pnniPcProfilePreferLinkType=pnniPcProfilePreferLinkType, pnniExportPolicyAddress=pnniExportPolicyAddress, atmrPteIndex=atmrPteIndex, pnniSpanningTreeMapTable=pnniSpanningTreeMapTable, pnniPcProfileMapCellLossRatio=pnniPcProfileMapCellLossRatio, pnniPcProfileRstrVPOnly=pnniPcProfileRstrVPOnly, pnniMapAddrRaigCellLossRatio=pnniMapAddrRaigCellLossRatio, pnniMapRaigIndex=pnniMapRaigIndex, pnniMapRaigDirection=pnniMapRaigDirection, atmrIDRDomainID=atmrIDRDomainID, atmrPteSourceArea=atmrPteSourceArea, pnniMapRaigFlags=pnniMapRaigFlags, atmrPtePathFlags=atmrPtePathFlags, pnniExportPolicyState=pnniExportPolicyState, pnniPcProfileAvoidLinkIndex=pnniPcProfileAvoidLinkIndex, pnniSpanningTreeMapStatus=pnniSpanningTreeMapStatus, rtDomainEntry=rtDomainEntry, pnniNodeExtnForeLevel=pnniNodeExtnForeLevel, pnniMapRaigCellTransferDelay=pnniMapRaigCellTransferDelay, atmrPteProtocolHandle=atmrPteProtocolHandle, pnniPcProfileMapCellDelayVariation=pnniPcProfileMapCellDelayVariation, pnniPcProfileServiceCategory=pnniPcProfileServiceCategory, atmRoutingGroup=atmRoutingGroup, pnniPcProfileCongestionBased=pnniPcProfileCongestionBased, pnniPcProfileRstrLoadBalance=pnniPcProfileRstrLoadBalance, pnniExportPolicyRowStatus=pnniExportPolicyRowStatus, pnniNodeExtnAdvertisedPglPriority=pnniNodeExtnAdvertisedPglPriority, pnniMapRaigCellLossRatio1=pnniMapRaigCellLossRatio1, pnniPcProfileAvoidLinkType=pnniPcProfileAvoidLinkType, rtDomainStatus=rtDomainStatus, atmrPteTnsType=atmrPteTnsType, atmrPteTnsId=atmrPteTnsId, atmrInterDomainRouteEntry=atmrInterDomainRouteEntry, pnniMapNodeIpAddrTable=pnniMapNodeIpAddrTable, rtDomainTable=rtDomainTable, pnniPcProfileMapCellRateMargin=pnniPcProfileMapCellRateMargin, pnniMapRaigCellDelayVariation=pnniMapRaigCellDelayVariation, InterfaceLabel=InterfaceLabel, pnniSpanningTreeMapEntry=pnniSpanningTreeMapEntry, pnniPortVpiMapTable=pnniPortVpiMapTable, pnniPcProfileMapAvailableCellRate=pnniPcProfileMapAvailableCellRate, pnniPcProfileAvoidLinkPortId=pnniPcProfileAvoidLinkPortId, pnniMapNodeExtHardwareVersion=pnniMapNodeExtHardwareVersion, pnniMapNodeExtForeNodalFlags=pnniMapNodeExtForeNodalFlags, pnniGroup=pnniGroup, pnniNodeScStatsNrOfHorizLinkEvents=pnniNodeScStatsNrOfHorizLinkEvents, atmrPteEntry=atmrPteEntry, pnniDtlComputationNodeIndex=pnniDtlComputationNodeIndex, pnniConnTreeMapNodeId=pnniConnTreeMapNodeId, atmrPteType=atmrPteType, pnniNodeScStatsNrOfNodalInfoEvents=pnniNodeScStatsNrOfNodalInfoEvents, pnniDtlListDtlIndex=pnniDtlListDtlIndex, pnniPcProfileNumberOfPreferLinks=pnniPcProfileNumberOfPreferLinks, pnniPcProfileAvoidLinkTable=pnniPcProfileAvoidLinkTable, PnniPcProfileIndex=PnniPcProfileIndex, pnniMapRaigAvailableCellRate=pnniMapRaigAvailableCellRate, atmrIDRAddrLen=atmrIDRAddrLen, pnniNodeScStatsNrOfNodalStateEvents=pnniNodeScStatsNrOfNodalStateEvents, pnniMapNodeExtTable=pnniMapNodeExtTable, pnniConnTreeMapPort=pnniConnTreeMapPort, pnniPcProfileFwdClpType=pnniPcProfileFwdClpType, pnniMapAddrRaigDirection=pnniMapAddrRaigDirection, pnniMapAddrRaigCellTransferDelay=pnniMapAddrRaigCellTransferDelay, pnniPcProfileMinRevCR=pnniPcProfileMinRevCR, pnniExportPolicyTnsId=pnniExportPolicyTnsId, pnniMapAddrRaigFlags=pnniMapAddrRaigFlags, pnniMapNodeIpAddrIfName=pnniMapNodeIpAddrIfName, pnniPcProfileOptCTD=pnniPcProfileOptCTD, pnniSpanningTreeMapNodeId=pnniSpanningTreeMapNodeId, pnniPortIdMapTable=pnniPortIdMapTable, pnniDtlComputationEntry=pnniDtlComputationEntry, pnniMapAddrRaigVarianceFactor=pnniMapAddrRaigVarianceFactor, atmrPteTable=atmrPteTable, atmrIDRAddr=atmrIDRAddr, pnniPcProfileIndex=pnniPcProfileIndex, pnniNodeExtnDomainID=pnniNodeExtnDomainID, pnniPcProfileNumberOfAvoidLinks=pnniPcProfileNumberOfAvoidLinks, atmrPteProtocolId=atmrPteProtocolId, pnniPcProfilePreferLinkRemoteNodeId=pnniPcProfilePreferLinkRemoteNodeId, atmrPrefixEntry=atmrPrefixEntry, pnniDtlListTable=pnniDtlListTable, forePnniDTLValidity=forePnniDTLValidity, pnniConnTreeMapParentNode=pnniConnTreeMapParentNode, pnniPcProfileMapOptIndex=pnniPcProfileMapOptIndex, atmrPrefixLength=atmrPrefixLength, atmrDestNsapTable=atmrDestNsapTable, pnniPortIdMapIfIndex=pnniPortIdMapIfIndex, pnniExportPolicyPrefixLength=pnniExportPolicyPrefixLength, pnniPcProfileState=pnniPcProfileState, pnniExportPolicyMetricsTag=pnniExportPolicyMetricsTag, pnniSpanningTreeMapPort=pnniSpanningTreeMapPort, pnniPcProfileAvoidLinkNodeId=pnniPcProfileAvoidLinkNodeId, pnniPortIdMapEntry=pnniPortIdMapEntry, pnniMapNodeIpAddr=pnniMapNodeIpAddr, pnniPcProfileOptAdminWeight=pnniPcProfileOptAdminWeight, PYSNMP_MODULE_ID=forePnniGroup, pnniDtlListTag=pnniDtlListTag, atmrPteTnsPlan=atmrPteTnsPlan, pnniParametersGroup=pnniParametersGroup, forePnniGroup=forePnniGroup, pnniSpanningTreeMapParentNode=pnniSpanningTreeMapParentNode, pnniPortVpiMapPort=pnniPortVpiMapPort, pnniMapAddrRaigTable=pnniMapAddrRaigTable, pnniMapNodeExtRemoteNodeIndex=pnniMapNodeExtRemoteNodeIndex, pnniNodeExtnForeArea=pnniNodeExtnForeArea, pnniMapNodeExtRemoteNodeId=pnniMapNodeExtRemoteNodeId, rtDomainPrefix=rtDomainPrefix, pnniDtlComputationTable=pnniDtlComputationTable, pnniExportPolicyAction=pnniExportPolicyAction, pnniNodeExtnTable=pnniNodeExtnTable, pnniNodeExtnShutdown=pnniNodeExtnShutdown, pnniPortVpiMapVpi=pnniPortVpiMapVpi, pnniPcProfileType=pnniPcProfileType, pnniSpanningTreeMapLinkType=pnniSpanningTreeMapLinkType, pnniPcProfileNumberOfHits=pnniPcProfileNumberOfHits, pnniDtlComputationCompute=pnniDtlComputationCompute, pnniPcProfileMapCellTransferDelay=pnniPcProfileMapCellTransferDelay, forePnniDTLEntry=forePnniDTLEntry, pnniCrankbackGroup=pnniCrankbackGroup, pnniPcProfilePreferLinkNodeId=pnniPcProfilePreferLinkNodeId, pnniDtlComputationDtlIndex=pnniDtlComputationDtlIndex, pnniMapNodeExtEntry=pnniMapNodeExtEntry, atmrIDRRowStatus=atmrIDRRowStatus, pnniMapAddrRaigCellRateMargin=pnniMapAddrRaigCellRateMargin, pnniDtlListWeight=pnniDtlListWeight, pnniNodeScStatsNrOfPurges=pnniNodeScStatsNrOfPurges)
