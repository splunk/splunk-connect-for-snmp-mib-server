#
# PySNMP MIB module DFL860-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DFL860-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, TimeTicks, Unsigned32, Bits, IpAddress, MibIdentifier, Counter64, Counter32, Gauge32, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "TimeTicks", "Unsigned32", "Bits", "IpAddress", "MibIdentifier", "Counter64", "Counter32", "Gauge32", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dfl860_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 1, 2)).setLabel("dfl860-MIB")
dfl860_MIB.setRevisions(('2010-09-02 11:39', '2010-03-30 09:00', '2009-11-10 09:16', '2008-11-18 16:05', '2008-10-14 12:27', '2007-10-31 00:00',))
if mibBuilder.loadTexts: dfl860_MIB.setLastUpdated('201009021139Z')
if mibBuilder.loadTexts: dfl860_MIB.setOrganization('D-Link Corporation')
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
netdefendMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20))
utmFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2))
dfl860 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2))
dfl860OS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1))
dfl860OSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2))
dfl860reg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2))
dfl860MibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 1))
dfl860MibConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 2))
dfl860MibObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3))
dfl860System = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1))
dfl860SysCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysCpuLoad.setStatus('current')
dfl860SysForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysForwardedBits.setStatus('current')
dfl860SysForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysForwardedPackets.setStatus('current')
dfl860SysBuffUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysBuffUse.setStatus('current')
dfl860SysConns = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysConns.setStatus('current')
dfl860SysPerStateCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6))
dfl860SysPscTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysPscTcpSyn.setStatus('current')
dfl860SysPscTcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysPscTcpOpen.setStatus('current')
dfl860SysPscTcpFin = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysPscTcpFin.setStatus('current')
dfl860SysPscUdp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysPscUdp.setStatus('current')
dfl860SysPscIcmp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysPscIcmp.setStatus('current')
dfl860SysPscOther = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysPscOther.setStatus('current')
dfl860IfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7), )
if mibBuilder.loadTexts: dfl860IfStatsTable.setStatus('current')
dfl860IfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860IfStatsIndex"))
if mibBuilder.loadTexts: dfl860IfStatsEntry.setStatus('current')
dfl860IfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860IfStatsIndex.setStatus('current')
dfl860IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfName.setStatus('current')
dfl860IfFragsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfFragsIn.setStatus('current')
dfl860IfFragReassOk = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfFragReassOk.setStatus('current')
dfl860IfFragReassFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfFragReassFail.setStatus('current')
dfl860IfPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfPktsInCnt.setStatus('current')
dfl860IfPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfPktsOutCnt.setStatus('current')
dfl860IfBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfBitsInCnt.setStatus('current')
dfl860IfBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfBitsOutCnt.setStatus('current')
dfl860IfPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfPktsTotCnt.setStatus('current')
dfl860IfBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfBitsTotCnt.setStatus('current')
dfl860IfHCPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfHCPktsInCnt.setStatus('current')
dfl860IfHCPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfHCPktsOutCnt.setStatus('current')
dfl860IfHCBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfHCBitsInCnt.setStatus('current')
dfl860IfHCBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfHCBitsOutCnt.setStatus('current')
dfl860IfHCPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfHCPktsTotCnt.setStatus('current')
dfl860IfHCBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfHCBitsTotCnt.setStatus('current')
dfl860IfRxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8), )
if mibBuilder.loadTexts: dfl860IfRxRingTable.setStatus('current')
dfl860IfRxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860IfRxRingIndex"))
if mibBuilder.loadTexts: dfl860IfRxRingEntry.setStatus('current')
dfl860IfRxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860IfRxRingIndex.setStatus('current')
dfl860IfRxRingFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfRxRingFifoErrors.setStatus('current')
dfl860IfRxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfRxDespools.setStatus('current')
dfl860IfRxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfRxAvgUse.setStatus('current')
dfl860IfRxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfRxRingSaturation.setStatus('current')
dfl860RxRingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860RxRingFlooded.setStatus('current')
dfl860IfTxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9), )
if mibBuilder.loadTexts: dfl860IfTxRingTable.setStatus('current')
dfl860IfTxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860IfTxRingIndex"))
if mibBuilder.loadTexts: dfl860IfTxRingEntry.setStatus('current')
dfl860IfTxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860IfTxRingIndex.setStatus('current')
dfl860IfTxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfTxDespools.setStatus('current')
dfl860IfTxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfTxAvgUse.setStatus('current')
dfl860IfTxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfTxRingSaturation.setStatus('current')
dfl860RxTingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860RxTingFlooded.setStatus('current')
dfl860IfVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10), )
if mibBuilder.loadTexts: dfl860IfVlanStatsTable.setStatus('current')
dfl860IfVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860IfVlanIndex"))
if mibBuilder.loadTexts: dfl860IfVlanStatsEntry.setStatus('current')
dfl860IfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860IfVlanIndex.setStatus('current')
dfl860IfVlanUntaggedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfVlanUntaggedInPkts.setStatus('current')
dfl860IfVlanUntaggedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfVlanUntaggedOutPkts.setStatus('current')
dfl860IfVlanUntaggedTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfVlanUntaggedTotPkts.setStatus('current')
dfl860IfVlanUntaggedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfVlanUntaggedInOctets.setStatus('current')
dfl860IfVlanUntaggedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfVlanUntaggedOutOctets.setStatus('current')
dfl860IfVlanUntaggedTotOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IfVlanUntaggedTotOctets.setStatus('current')
dfl860HWSensorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 11), )
if mibBuilder.loadTexts: dfl860HWSensorTable.setStatus('current')
dfl860HWSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 11, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860HWSensorIndex"))
if mibBuilder.loadTexts: dfl860HWSensorEntry.setStatus('current')
dfl860HWSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860HWSensorIndex.setStatus('current')
dfl860HWSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HWSensorName.setStatus('current')
dfl860HWSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HWSensorValue.setStatus('current')
dfl860HWSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HWSensorUnit.setStatus('current')
dfl860SysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysMemUsage.setStatus('current')
dfl860SysTCPUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 13))
dfl860SysTCPRecvSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysTCPRecvSmall.setStatus('current')
dfl860SysTCPRecvLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysTCPRecvLarge.setStatus('current')
dfl860SysTCPSendSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysTCPSendSmall.setStatus('current')
dfl860SysTCPSendLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysTCPSendLarge.setStatus('current')
dfl860SysTimerUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysTimerUsage.setStatus('current')
dfl860SysConnOPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysConnOPS.setStatus('current')
dfl860SysConnCPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysConnCPS.setStatus('current')
dfl860SysHCForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SysHCForwardedBits.setStatus('current')
dfl860VPN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2))
dfl860IPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1))
dfl860IPsecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1))
dfl860IPsecPhaseOneActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecPhaseOneActive.setStatus('current')
dfl860IPsecPhaseOneAggrModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecPhaseOneAggrModeDone.setStatus('current')
dfl860IPsecQuickModeActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecQuickModeActive.setStatus('current')
dfl860IPsecPhaseOneDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecPhaseOneDone.setStatus('current')
dfl860IPsecPhaseOneFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecPhaseOneFailed.setStatus('current')
dfl860IPsecPhaseOneRekeyed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecPhaseOneRekeyed.setStatus('current')
dfl860IPsecQuickModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecQuickModeDone.setStatus('current')
dfl860IPsecQuickModeFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecQuickModeFailed.setStatus('current')
dfl860IPsecInfoDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecInfoDone.setStatus('current')
dfl860IPsecInfoFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecInfoFailed.setStatus('current')
dfl860IPsecInOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecInOctetsComp.setStatus('current')
dfl860IPsecInOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecInOctetsUncomp.setStatus('current')
dfl860IPsecOutOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecOutOctetsComp.setStatus('current')
dfl860IPsecOutOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecOutOctetsUncomp.setStatus('current')
dfl860IPsecForwardedOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecForwardedOctetsComp.setStatus('current')
dfl860IPsecForwardedOctetsUcomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecForwardedOctetsUcomp.setStatus('current')
dfl860IPsecInPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecInPackets.setStatus('current')
dfl860IPsecOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecOutPackets.setStatus('current')
dfl860IPsecForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecForwardedPackets.setStatus('current')
dfl860IPsecActiveTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecActiveTransforms.setStatus('current')
dfl860IPsecTotalTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecTotalTransforms.setStatus('current')
dfl860IPsecOutOfTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecOutOfTransforms.setStatus('current')
dfl860IPsecTotalRekeys = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPsecTotalRekeys.setStatus('current')
dfl860Rules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 3))
dfl860RuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dfl860RuleUseTable.setStatus('current')
dfl860RuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860RuleIndex"))
if mibBuilder.loadTexts: dfl860RuleUseEntry.setStatus('current')
dfl860RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860RuleIndex.setStatus('current')
dfl860RuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860RuleName.setStatus('current')
dfl860RuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860RuleUse.setStatus('current')
dfl860IPPools = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4))
dfl860IPPoolsNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolsNumber.setStatus('current')
dfl860IPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2), )
if mibBuilder.loadTexts: dfl860IPPoolTable.setStatus('current')
dfl860IPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860IPPoolIndex"))
if mibBuilder.loadTexts: dfl860IPPoolEntry.setStatus('current')
dfl860IPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860IPPoolIndex.setStatus('current')
dfl860IPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolName.setStatus('current')
dfl860IPPoolPrepare = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolPrepare.setStatus('current')
dfl860IPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolFree.setStatus('current')
dfl860IPPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolMisses.setStatus('current')
dfl860IPPoolClientFails = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolClientFails.setStatus('current')
dfl860IPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860IPPoolUsed.setStatus('current')
dfl860DHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5))
dfl860DHCPTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPTotalRejected.setStatus('current')
dfl860DHCPRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: dfl860DHCPRuleTable.setStatus('current')
dfl860DHCPRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860DHCPRuleIndex"))
if mibBuilder.loadTexts: dfl860DHCPRuleEntry.setStatus('current')
dfl860DHCPRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860DHCPRuleIndex.setStatus('current')
dfl860DHCPRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRuleName.setStatus('current')
dfl860DHCPRuleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRuleUsage.setStatus('current')
dfl860DHCPRuleUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRuleUsagePercent.setStatus('current')
dfl860DHCPActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPActiveClients.setStatus('current')
dfl860DHCPActiveClientsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPActiveClientsPercent.setStatus('current')
dfl860DHCPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRejectedRequests.setStatus('current')
dfl860DHCPTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPTotalLeases.setStatus('current')
dfl860UserAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6))
dfl860UserAuthHTTPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthHTTPUsers.setStatus('current')
dfl860UserAuthXAUTHUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthXAUTHUsers.setStatus('current')
dfl860UserAuthHTTPSUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthHTTPSUsers.setStatus('current')
dfl860UserAuthPPPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthPPPUsers.setStatus('current')
dfl860UserAuthEAPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthEAPUsers.setStatus('current')
dfl860UserAuthRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 6), )
if mibBuilder.loadTexts: dfl860UserAuthRuleUseTable.setStatus('current')
dfl860UserAuthRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 6, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860UserAuthRuleIndex"))
if mibBuilder.loadTexts: dfl860UserAuthRuleUseEntry.setStatus('current')
dfl860UserAuthRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860UserAuthRuleIndex.setStatus('current')
dfl860UserAuthRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthRuleName.setStatus('current')
dfl860UserAuthRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 6, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860UserAuthRuleUse.setStatus('current')
dfl860LinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7))
dfl860LinkMonGrp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860LinkMonGrp.setStatus('current')
dfl860LinkMonGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 2), )
if mibBuilder.loadTexts: dfl860LinkMonGrpTable.setStatus('current')
dfl860LinkMonGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860LinkMonGrpIndex"))
if mibBuilder.loadTexts: dfl860LinkMonGrpEntry.setStatus('current')
dfl860LinkMonGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860LinkMonGrpIndex.setStatus('current')
dfl860LinkMonGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860LinkMonGrpName.setStatus('current')
dfl860LinkMonGrpHostsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860LinkMonGrpHostsUp.setStatus('current')
dfl860LinkMonHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 3), )
if mibBuilder.loadTexts: dfl860LinkMonHostTable.setStatus('current')
dfl860LinkMonHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 3, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860LinkMonGrpIndex"), (0, "DFL860-MIB", "dfl860LinkMonHostIndex"))
if mibBuilder.loadTexts: dfl860LinkMonHostEntry.setStatus('current')
dfl860LinkMonHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860LinkMonHostIndex.setStatus('current')
dfl860LinkMonHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860LinkMonHostId.setStatus('current')
dfl860LinkMonHostShortTermLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860LinkMonHostShortTermLoss.setStatus('current')
dfl860LinkMonHostPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860LinkMonHostPacketsLost.setStatus('current')
dfl860Pipes = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8))
dfl860PipeUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeUsers.setStatus('current')
dfl860PipeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dfl860PipeTable.setStatus('current')
dfl860PipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860PipeIndex"))
if mibBuilder.loadTexts: dfl860PipeEntry.setStatus('current')
dfl860PipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860PipeIndex.setStatus('current')
dfl860PipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeName.setStatus('current')
dfl860PipeMinPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeMinPrec.setStatus('current')
dfl860PipeMaxPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeMaxPrec.setStatus('current')
dfl860PipeDefPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeDefPrec.setStatus('current')
dfl860PipeNumPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeNumPrec.setStatus('current')
dfl860PipeNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeNumUsers.setStatus('current')
dfl860PipeCurrentBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeCurrentBps.setStatus('current')
dfl860PipeCurrentPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeCurrentPps.setStatus('current')
dfl860PipeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeDelayedPackets.setStatus('current')
dfl860PipeDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipeDropedPackets.setStatus('current')
dfl860PipePrecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3), )
if mibBuilder.loadTexts: dfl860PipePrecTable.setStatus('current')
dfl860PipePrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860PipeIndex"), (0, "DFL860-MIB", "dfl860PipePrecIndex"))
if mibBuilder.loadTexts: dfl860PipePrecEntry.setStatus('current')
dfl860PipePrecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860PipePrecIndex.setStatus('current')
dfl860PipePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrec.setStatus('current')
dfl860PipePrecBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecBps.setStatus('current')
dfl860PipePrecTotalPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecTotalPps.setStatus('current')
dfl860PipePrecReservedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecReservedBps.setStatus('current')
dfl860PipePrecDynLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecDynLimBps.setStatus('current')
dfl860PipePrecDynUsrLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecDynUsrLimBps.setStatus('current')
dfl860PipePrecDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecDelayedPackets.setStatus('current')
dfl860PipePrecDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860PipePrecDropedPackets.setStatus('current')
dfl860ALG = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9))
dfl860AlgSessions = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860AlgSessions.setStatus('current')
dfl860AlgConnections = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860AlgConnections.setStatus('current')
dfl860AlgTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860AlgTCPStreams.setStatus('current')
dfl860HttpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4))
dfl860HttpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1), )
if mibBuilder.loadTexts: dfl860HttpAlgTable.setStatus('current')
dfl860HttpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860HttpAlgIndex"))
if mibBuilder.loadTexts: dfl860HttpAlgEntry.setStatus('current')
dfl860HttpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860HttpAlgIndex.setStatus('current')
dfl860HttpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgName.setStatus('current')
dfl860HttpAlgTotalRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgTotalRequested.setStatus('current')
dfl860HttpAlgTotalAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgTotalAllowed.setStatus('current')
dfl860HttpAlgTotalBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgTotalBlocked.setStatus('current')
dfl860HttpAlgCntFltTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2), )
if mibBuilder.loadTexts: dfl860HttpAlgCntFltTable.setStatus('current')
dfl860HttpAlgCntFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860HttpAlgIndex"), (0, "DFL860-MIB", "dfl860HttpAlgCntFltIndex"))
if mibBuilder.loadTexts: dfl860HttpAlgCntFltEntry.setStatus('current')
dfl860HttpAlgCntFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860HttpAlgCntFltIndex.setStatus('current')
dfl860HttpAlgCntFltName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgCntFltName.setStatus('current')
dfl860HttpAlgCntFltRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgCntFltRequests.setStatus('current')
dfl860HttpAlgCntFltAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgCntFltAllowed.setStatus('current')
dfl860HttpAlgCntFltBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HttpAlgCntFltBlocked.setStatus('current')
dfl860SmtpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5))
dfl860SmtpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1), )
if mibBuilder.loadTexts: dfl860SmtpAlgTable.setStatus('current')
dfl860SmtpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860SmtpAlgIndex"))
if mibBuilder.loadTexts: dfl860SmtpAlgEntry.setStatus('current')
dfl860SmtpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860SmtpAlgIndex.setStatus('current')
dfl860SmtpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgName.setStatus('current')
dfl860SmtpAlgTotCheckedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgTotCheckedSes.setStatus('current')
dfl860SmtpAlgTotSpamSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgTotSpamSes.setStatus('current')
dfl860SmtpAlgTotDroppedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgTotDroppedSes.setStatus('current')
dfl860SmtpAlgDnsBlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2), )
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlTable.setStatus('current')
dfl860SmtpAlgDnsBlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860SmtpAlgIndex"), (0, "DFL860-MIB", "dfl860SmtpAlgDnsBlIndex"))
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlEntry.setStatus('current')
dfl860SmtpAlgDnsBlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlIndex.setStatus('current')
dfl860SmtpAlgDnsBlName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlName.setStatus('current')
dfl860SmtpAlgDnsBlChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlChecked.setStatus('current')
dfl860SmtpAlgDnsBlMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlMatched.setStatus('current')
dfl860SmtpAlgDnsBlFailChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860SmtpAlgDnsBlFailChecks.setStatus('current')
dfl860DHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11))
dfl860DHCPRelayCurClients = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayCurClients.setStatus('current')
dfl860DHCPRelayCurTrans = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayCurTrans.setStatus('current')
dfl860DHCPRelayRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayRejected.setStatus('current')
dfl860DHCPRelayRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4), )
if mibBuilder.loadTexts: dfl860DHCPRelayRuleTable.setStatus('current')
dfl860DHCPRelayRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1), ).setIndexNames((0, "DFL860-MIB", "dfl860DHCPRelayRuleIndex"))
if mibBuilder.loadTexts: dfl860DHCPRelayRuleEntry.setStatus('current')
dfl860DHCPRelayRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860DHCPRelayRuleIndex.setStatus('current')
dfl860DHCPRelayRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayRuleName.setStatus('current')
dfl860DHCPRelayRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayRuleHits.setStatus('current')
dfl860DHCPRelayRuleCurClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayRuleCurClients.setStatus('current')
dfl860DHCPRelayRuleRejCliPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayRuleRejCliPkts.setStatus('current')
dfl860DHCPRelayRuleRejSrvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 11, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860DHCPRelayRuleRejSrvPkts.setStatus('current')
dfl860HA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 12))
dfl860HASyncSendQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HASyncSendQueueLength.setStatus('current')
dfl860HASyncSendQueueUsagePkt = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HASyncSendQueueUsagePkt.setStatus('current')
dfl860HASyncSendQueueUsageOct = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HASyncSendQueueUsageOct.setStatus('current')
dfl860HASyncSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HASyncSentPackets.setStatus('current')
dfl860HASyncSendResentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 1, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860HASyncSendResentPackets.setStatus('current')
dfl860StatsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 2, 1))
dfl860StatsRegGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1))
dfl860SystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 1)).setObjects(("DFL860-MIB", "dfl860SysCpuLoad"), ("DFL860-MIB", "dfl860SysForwardedBits"), ("DFL860-MIB", "dfl860SysForwardedPackets"), ("DFL860-MIB", "dfl860SysBuffUse"), ("DFL860-MIB", "dfl860SysConns"), ("DFL860-MIB", "dfl860HWSensorName"), ("DFL860-MIB", "dfl860HWSensorValue"), ("DFL860-MIB", "dfl860HWSensorUnit"), ("DFL860-MIB", "dfl860SysMemUsage"), ("DFL860-MIB", "dfl860SysTimerUsage"), ("DFL860-MIB", "dfl860SysConnOPS"), ("DFL860-MIB", "dfl860SysConnCPS"), ("DFL860-MIB", "dfl860SysHCForwardedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860SystemObjectGroup = dfl860SystemObjectGroup.setStatus('current')
dfl860IPsecObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 2)).setObjects(("DFL860-MIB", "dfl860IPsecPhaseOneActive"), ("DFL860-MIB", "dfl860IPsecPhaseOneAggrModeDone"), ("DFL860-MIB", "dfl860IPsecQuickModeActive"), ("DFL860-MIB", "dfl860IPsecPhaseOneDone"), ("DFL860-MIB", "dfl860IPsecPhaseOneFailed"), ("DFL860-MIB", "dfl860IPsecPhaseOneRekeyed"), ("DFL860-MIB", "dfl860IPsecQuickModeDone"), ("DFL860-MIB", "dfl860IPsecQuickModeFailed"), ("DFL860-MIB", "dfl860IPsecInfoDone"), ("DFL860-MIB", "dfl860IPsecInfoFailed"), ("DFL860-MIB", "dfl860IPsecInOctetsComp"), ("DFL860-MIB", "dfl860IPsecInOctetsUncomp"), ("DFL860-MIB", "dfl860IPsecOutOctetsComp"), ("DFL860-MIB", "dfl860IPsecOutOctetsUncomp"), ("DFL860-MIB", "dfl860IPsecForwardedOctetsComp"), ("DFL860-MIB", "dfl860IPsecForwardedOctetsUcomp"), ("DFL860-MIB", "dfl860IPsecInPackets"), ("DFL860-MIB", "dfl860IPsecOutPackets"), ("DFL860-MIB", "dfl860IPsecForwardedPackets"), ("DFL860-MIB", "dfl860IPsecActiveTransforms"), ("DFL860-MIB", "dfl860IPsecTotalTransforms"), ("DFL860-MIB", "dfl860IPsecOutOfTransforms"), ("DFL860-MIB", "dfl860IPsecTotalRekeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860IPsecObjectGroup = dfl860IPsecObjectGroup.setStatus('current')
dfl860StateCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 3)).setObjects(("DFL860-MIB", "dfl860SysPscTcpSyn"), ("DFL860-MIB", "dfl860SysPscTcpOpen"), ("DFL860-MIB", "dfl860SysPscTcpFin"), ("DFL860-MIB", "dfl860SysPscUdp"), ("DFL860-MIB", "dfl860SysPscIcmp"), ("DFL860-MIB", "dfl860SysPscOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860StateCountersGroup = dfl860StateCountersGroup.setStatus('current')
dfl860IPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 4)).setObjects(("DFL860-MIB", "dfl860IPPoolsNumber"), ("DFL860-MIB", "dfl860IPPoolName"), ("DFL860-MIB", "dfl860IPPoolPrepare"), ("DFL860-MIB", "dfl860IPPoolFree"), ("DFL860-MIB", "dfl860IPPoolMisses"), ("DFL860-MIB", "dfl860IPPoolClientFails"), ("DFL860-MIB", "dfl860IPPoolUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860IPPoolGroup = dfl860IPPoolGroup.setStatus('current')
dfl860DHCPServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 5)).setObjects(("DFL860-MIB", "dfl860DHCPTotalRejected"), ("DFL860-MIB", "dfl860DHCPRuleName"), ("DFL860-MIB", "dfl860DHCPRuleUsage"), ("DFL860-MIB", "dfl860DHCPRuleUsagePercent"), ("DFL860-MIB", "dfl860DHCPActiveClients"), ("DFL860-MIB", "dfl860DHCPActiveClientsPercent"), ("DFL860-MIB", "dfl860DHCPRejectedRequests"), ("DFL860-MIB", "dfl860DHCPTotalLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860DHCPServerGroup = dfl860DHCPServerGroup.setStatus('current')
dfl860RuleUseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 6)).setObjects(("DFL860-MIB", "dfl860RuleName"), ("DFL860-MIB", "dfl860RuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860RuleUseGroup = dfl860RuleUseGroup.setStatus('current')
dfl860UserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 7)).setObjects(("DFL860-MIB", "dfl860UserAuthHTTPUsers"), ("DFL860-MIB", "dfl860UserAuthXAUTHUsers"), ("DFL860-MIB", "dfl860UserAuthHTTPSUsers"), ("DFL860-MIB", "dfl860UserAuthPPPUsers"), ("DFL860-MIB", "dfl860UserAuthEAPUsers"), ("DFL860-MIB", "dfl860UserAuthRuleName"), ("DFL860-MIB", "dfl860UserAuthRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860UserAuthGroup = dfl860UserAuthGroup.setStatus('current')
dfl860IfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 8)).setObjects(("DFL860-MIB", "dfl860IfName"), ("DFL860-MIB", "dfl860IfFragsIn"), ("DFL860-MIB", "dfl860IfFragReassOk"), ("DFL860-MIB", "dfl860IfFragReassFail"), ("DFL860-MIB", "dfl860IfPktsInCnt"), ("DFL860-MIB", "dfl860IfPktsOutCnt"), ("DFL860-MIB", "dfl860IfBitsInCnt"), ("DFL860-MIB", "dfl860IfBitsOutCnt"), ("DFL860-MIB", "dfl860IfPktsTotCnt"), ("DFL860-MIB", "dfl860IfBitsTotCnt"), ("DFL860-MIB", "dfl860IfHCPktsInCnt"), ("DFL860-MIB", "dfl860IfHCPktsOutCnt"), ("DFL860-MIB", "dfl860IfHCBitsInCnt"), ("DFL860-MIB", "dfl860IfHCBitsOutCnt"), ("DFL860-MIB", "dfl860IfHCPktsTotCnt"), ("DFL860-MIB", "dfl860IfHCBitsTotCnt"), ("DFL860-MIB", "dfl860IfRxRingFifoErrors"), ("DFL860-MIB", "dfl860IfRxDespools"), ("DFL860-MIB", "dfl860IfRxAvgUse"), ("DFL860-MIB", "dfl860IfRxRingSaturation"), ("DFL860-MIB", "dfl860RxRingFlooded"), ("DFL860-MIB", "dfl860IfTxDespools"), ("DFL860-MIB", "dfl860IfTxAvgUse"), ("DFL860-MIB", "dfl860IfTxRingSaturation"), ("DFL860-MIB", "dfl860RxTingFlooded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860IfStatsGroup = dfl860IfStatsGroup.setStatus('current')
dfl860LinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 9)).setObjects(("DFL860-MIB", "dfl860LinkMonGrp"), ("DFL860-MIB", "dfl860LinkMonGrpName"), ("DFL860-MIB", "dfl860LinkMonGrpHostsUp"), ("DFL860-MIB", "dfl860LinkMonHostId"), ("DFL860-MIB", "dfl860LinkMonHostShortTermLoss"), ("DFL860-MIB", "dfl860LinkMonHostPacketsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860LinkMonitorGroup = dfl860LinkMonitorGroup.setStatus('current')
dfl860PipesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 10)).setObjects(("DFL860-MIB", "dfl860PipeUsers"), ("DFL860-MIB", "dfl860PipeName"), ("DFL860-MIB", "dfl860PipeMinPrec"), ("DFL860-MIB", "dfl860PipeMaxPrec"), ("DFL860-MIB", "dfl860PipeDefPrec"), ("DFL860-MIB", "dfl860PipeNumPrec"), ("DFL860-MIB", "dfl860PipeNumUsers"), ("DFL860-MIB", "dfl860PipeCurrentBps"), ("DFL860-MIB", "dfl860PipeCurrentPps"), ("DFL860-MIB", "dfl860PipeDelayedPackets"), ("DFL860-MIB", "dfl860PipeDropedPackets"), ("DFL860-MIB", "dfl860PipePrec"), ("DFL860-MIB", "dfl860PipePrecBps"), ("DFL860-MIB", "dfl860PipePrecTotalPps"), ("DFL860-MIB", "dfl860PipePrecReservedBps"), ("DFL860-MIB", "dfl860PipePrecDynLimBps"), ("DFL860-MIB", "dfl860PipePrecDynUsrLimBps"), ("DFL860-MIB", "dfl860PipePrecDelayedPackets"), ("DFL860-MIB", "dfl860PipePrecDropedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860PipesObjectGroup = dfl860PipesObjectGroup.setStatus('current')
dfl860DHCPRelayObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 12)).setObjects(("DFL860-MIB", "dfl860DHCPRelayCurClients"), ("DFL860-MIB", "dfl860DHCPRelayCurTrans"), ("DFL860-MIB", "dfl860DHCPRelayRejected"), ("DFL860-MIB", "dfl860DHCPRelayRuleName"), ("DFL860-MIB", "dfl860DHCPRelayRuleHits"), ("DFL860-MIB", "dfl860DHCPRelayRuleCurClients"), ("DFL860-MIB", "dfl860DHCPRelayRuleRejCliPkts"), ("DFL860-MIB", "dfl860DHCPRelayRuleRejSrvPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860DHCPRelayObjectGroup = dfl860DHCPRelayObjectGroup.setStatus('current')
dfl860AlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 13)).setObjects(("DFL860-MIB", "dfl860AlgSessions"), ("DFL860-MIB", "dfl860AlgConnections"), ("DFL860-MIB", "dfl860AlgTCPStreams"), ("DFL860-MIB", "dfl860HttpAlgName"), ("DFL860-MIB", "dfl860HttpAlgTotalRequested"), ("DFL860-MIB", "dfl860HttpAlgTotalAllowed"), ("DFL860-MIB", "dfl860HttpAlgTotalBlocked"), ("DFL860-MIB", "dfl860HttpAlgCntFltName"), ("DFL860-MIB", "dfl860HttpAlgCntFltRequests"), ("DFL860-MIB", "dfl860HttpAlgCntFltAllowed"), ("DFL860-MIB", "dfl860HttpAlgCntFltBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860AlgGroup = dfl860AlgGroup.setStatus('current')
dfl860HAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 14)).setObjects(("DFL860-MIB", "dfl860HASyncSendQueueLength"), ("DFL860-MIB", "dfl860HASyncSendQueueUsagePkt"), ("DFL860-MIB", "dfl860HASyncSendQueueUsageOct"), ("DFL860-MIB", "dfl860HASyncSentPackets"), ("DFL860-MIB", "dfl860HASyncSendResentPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860HAGroup = dfl860HAGroup.setStatus('current')
dfl860IfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 15)).setObjects(("DFL860-MIB", "dfl860IfVlanUntaggedInPkts"), ("DFL860-MIB", "dfl860IfVlanUntaggedOutPkts"), ("DFL860-MIB", "dfl860IfVlanUntaggedTotPkts"), ("DFL860-MIB", "dfl860IfVlanUntaggedInOctets"), ("DFL860-MIB", "dfl860IfVlanUntaggedOutOctets"), ("DFL860-MIB", "dfl860IfVlanUntaggedTotOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860IfVlanGroup = dfl860IfVlanGroup.setStatus('current')
dfl860SmtpAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 16)).setObjects(("DFL860-MIB", "dfl860SmtpAlgName"), ("DFL860-MIB", "dfl860SmtpAlgTotCheckedSes"), ("DFL860-MIB", "dfl860SmtpAlgTotSpamSes"), ("DFL860-MIB", "dfl860SmtpAlgTotDroppedSes"), ("DFL860-MIB", "dfl860SmtpAlgDnsBlName"), ("DFL860-MIB", "dfl860SmtpAlgDnsBlChecked"), ("DFL860-MIB", "dfl860SmtpAlgDnsBlMatched"), ("DFL860-MIB", "dfl860SmtpAlgDnsBlFailChecks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860SmtpAlgGroup = dfl860SmtpAlgGroup.setStatus('current')
dfl860SysTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 3, 1, 17)).setObjects(("DFL860-MIB", "dfl860SysTCPRecvSmall"), ("DFL860-MIB", "dfl860SysTCPRecvLarge"), ("DFL860-MIB", "dfl860SysTCPSendSmall"), ("DFL860-MIB", "dfl860SysTCPSendLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860SysTCPGroup = dfl860SysTCPGroup.setStatus('current')
dfl860StatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 20, 2, 2, 2, 2, 1, 1)).setObjects(("DFL860-MIB", "dfl860SystemObjectGroup"), ("DFL860-MIB", "dfl860IPsecObjectGroup"), ("DFL860-MIB", "dfl860StateCountersGroup"), ("DFL860-MIB", "dfl860IPPoolGroup"), ("DFL860-MIB", "dfl860DHCPServerGroup"), ("DFL860-MIB", "dfl860RuleUseGroup"), ("DFL860-MIB", "dfl860UserAuthGroup"), ("DFL860-MIB", "dfl860IfStatsGroup"), ("DFL860-MIB", "dfl860LinkMonitorGroup"), ("DFL860-MIB", "dfl860PipesObjectGroup"), ("DFL860-MIB", "dfl860DHCPRelayObjectGroup"), ("DFL860-MIB", "dfl860AlgGroup"), ("DFL860-MIB", "dfl860HAGroup"), ("DFL860-MIB", "dfl860IfVlanGroup"), ("DFL860-MIB", "dfl860SmtpAlgGroup"), ("DFL860-MIB", "dfl860SysTCPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860StatsCompliance = dfl860StatsCompliance.setStatus('current')
mibBuilder.exportSymbols("DFL860-MIB", dfl860SysPscTcpFin=dfl860SysPscTcpFin, dfl860System=dfl860System, dfl860HttpAlgCntFltRequests=dfl860HttpAlgCntFltRequests, dfl860MibConfs=dfl860MibConfs, dfl860PipePrecDynLimBps=dfl860PipePrecDynLimBps, dfl860RuleIndex=dfl860RuleIndex, dfl860IfVlanUntaggedOutOctets=dfl860IfVlanUntaggedOutOctets, dfl860UserAuthRuleUseEntry=dfl860UserAuthRuleUseEntry, dfl860PipeName=dfl860PipeName, dfl860DHCPRelayRuleName=dfl860DHCPRelayRuleName, dfl860LinkMonHostTable=dfl860LinkMonHostTable, dfl860OS=dfl860OS, dfl860SmtpAlgDnsBlMatched=dfl860SmtpAlgDnsBlMatched, dfl860PipeNumUsers=dfl860PipeNumUsers, dfl860HASyncSentPackets=dfl860HASyncSentPackets, dfl860StateCountersGroup=dfl860StateCountersGroup, dfl860SysPscIcmp=dfl860SysPscIcmp, dfl860LinkMonGrp=dfl860LinkMonGrp, dfl860IPPoolUsed=dfl860IPPoolUsed, dfl860UserAuthHTTPSUsers=dfl860UserAuthHTTPSUsers, dfl860SmtpAlgDnsBlChecked=dfl860SmtpAlgDnsBlChecked, dfl860DHCPRelay=dfl860DHCPRelay, dfl860MibModules=dfl860MibModules, dfl860HASyncSendQueueLength=dfl860HASyncSendQueueLength, dfl860RxRingFlooded=dfl860RxRingFlooded, dfl860HttpAlgCntFltName=dfl860HttpAlgCntFltName, dfl860IPPoolGroup=dfl860IPPoolGroup, dfl860PipeCurrentBps=dfl860PipeCurrentBps, utmFirewall=utmFirewall, dfl860PipePrecDropedPackets=dfl860PipePrecDropedPackets, dfl860PipeMaxPrec=dfl860PipeMaxPrec, dfl860IfHCPktsTotCnt=dfl860IfHCPktsTotCnt, dfl860SysConnCPS=dfl860SysConnCPS, dfl860UserAuthEAPUsers=dfl860UserAuthEAPUsers, dfl860IfBitsOutCnt=dfl860IfBitsOutCnt, dfl860IfStatsIndex=dfl860IfStatsIndex, dfl860IfVlanStatsTable=dfl860IfVlanStatsTable, dfl860IPsecOutOctetsComp=dfl860IPsecOutOctetsComp, dfl860PipeMinPrec=dfl860PipeMinPrec, dfl860IPsecTotalRekeys=dfl860IPsecTotalRekeys, dfl860UserAuthHTTPUsers=dfl860UserAuthHTTPUsers, dfl860IPsecInPackets=dfl860IPsecInPackets, dfl860DHCPRelayRuleHits=dfl860DHCPRelayRuleHits, dfl860HttpAlgIndex=dfl860HttpAlgIndex, dfl860DHCPRuleTable=dfl860DHCPRuleTable, dfl860DHCPRuleIndex=dfl860DHCPRuleIndex, dfl860IPPoolPrepare=dfl860IPPoolPrepare, dfl860SmtpAlgTotSpamSes=dfl860SmtpAlgTotSpamSes, dfl860IfFragReassFail=dfl860IfFragReassFail, dfl860SysTCPGroup=dfl860SysTCPGroup, dfl860IPsecForwardedOctetsComp=dfl860IPsecForwardedOctetsComp, dfl860IPPoolTable=dfl860IPPoolTable, dfl860PipeUsers=dfl860PipeUsers, dfl860IPsecOutOfTransforms=dfl860IPsecOutOfTransforms, dfl860PipePrecEntry=dfl860PipePrecEntry, dfl860IPsecGlobal=dfl860IPsecGlobal, dfl860LinkMonHostEntry=dfl860LinkMonHostEntry, dfl860SmtpAlgGroup=dfl860SmtpAlgGroup, dfl860SysPscTcpOpen=dfl860SysPscTcpOpen, dfl860AlgConnections=dfl860AlgConnections, dfl860HAGroup=dfl860HAGroup, dfl860IfPktsOutCnt=dfl860IfPktsOutCnt, dfl860IfFragReassOk=dfl860IfFragReassOk, dfl860UserAuthRuleUseTable=dfl860UserAuthRuleUseTable, dfl860PipeEntry=dfl860PipeEntry, dfl860LinkMonHostShortTermLoss=dfl860LinkMonHostShortTermLoss, dfl860DHCPServer=dfl860DHCPServer, dfl860HWSensorTable=dfl860HWSensorTable, dfl860PipePrecDelayedPackets=dfl860PipePrecDelayedPackets, dfl860SysPscUdp=dfl860SysPscUdp, dfl860IfRxRingEntry=dfl860IfRxRingEntry, dfl860IPsecOutPackets=dfl860IPsecOutPackets, dfl860OSStats=dfl860OSStats, dfl860LinkMonHostPacketsLost=dfl860LinkMonHostPacketsLost, dfl860PipePrecIndex=dfl860PipePrecIndex, dfl860IfStatsGroup=dfl860IfStatsGroup, dfl860SysForwardedPackets=dfl860SysForwardedPackets, dfl860RxTingFlooded=dfl860RxTingFlooded, dfl860IPPoolClientFails=dfl860IPPoolClientFails, dfl860IPsecInfoFailed=dfl860IPsecInfoFailed, dfl860IPPoolsNumber=dfl860IPPoolsNumber, dfl860UserAuth=dfl860UserAuth, dfl860SysTCPRecvLarge=dfl860SysTCPRecvLarge, dfl860HWSensorIndex=dfl860HWSensorIndex, dfl860SysTCPSendSmall=dfl860SysTCPSendSmall, dfl860DHCPRelayRuleCurClients=dfl860DHCPRelayRuleCurClients, dfl860SysHCForwardedBits=dfl860SysHCForwardedBits, dfl860IPPoolFree=dfl860IPPoolFree, dfl860DHCPTotalRejected=dfl860DHCPTotalRejected, dfl860SmtpAlgDnsBlFailChecks=dfl860SmtpAlgDnsBlFailChecks, dfl860PipeDefPrec=dfl860PipeDefPrec, dfl860IfHCPktsOutCnt=dfl860IfHCPktsOutCnt, dfl860HWSensorUnit=dfl860HWSensorUnit, dfl860PipeIndex=dfl860PipeIndex, dfl860StatsConformance=dfl860StatsConformance, dfl860IPsecQuickModeDone=dfl860IPsecQuickModeDone, dfl860IPPools=dfl860IPPools, dfl860IfRxAvgUse=dfl860IfRxAvgUse, dfl860HWSensorEntry=dfl860HWSensorEntry, dfl860HttpAlgTotalRequested=dfl860HttpAlgTotalRequested, dfl860SystemObjectGroup=dfl860SystemObjectGroup, dfl860SysTCPUsage=dfl860SysTCPUsage, dfl860DHCPRelayCurTrans=dfl860DHCPRelayCurTrans, dfl860RuleUseEntry=dfl860RuleUseEntry, dfl860IfRxDespools=dfl860IfRxDespools, dfl860SysForwardedBits=dfl860SysForwardedBits, dfl860IPPoolName=dfl860IPPoolName, dfl860PipePrecDynUsrLimBps=dfl860PipePrecDynUsrLimBps, dfl860PipesObjectGroup=dfl860PipesObjectGroup, dfl860IPPoolEntry=dfl860IPPoolEntry, dfl860LinkMonGrpIndex=dfl860LinkMonGrpIndex, dfl860ALG=dfl860ALG, dfl860SysCpuLoad=dfl860SysCpuLoad, dfl860LinkMonGrpTable=dfl860LinkMonGrpTable, dfl860DHCPRelayRuleEntry=dfl860DHCPRelayRuleEntry, dfl860HttpAlgName=dfl860HttpAlgName, dfl860DHCPTotalLeases=dfl860DHCPTotalLeases, dfl860HttpAlgCntFltEntry=dfl860HttpAlgCntFltEntry, dfl860DHCPRuleUsage=dfl860DHCPRuleUsage, dfl860SysConnOPS=dfl860SysConnOPS, dfl860IPsecObjectGroup=dfl860IPsecObjectGroup, dfl860LinkMonHostIndex=dfl860LinkMonHostIndex, dfl860IPPoolIndex=dfl860IPPoolIndex, dfl860SysTCPRecvSmall=dfl860SysTCPRecvSmall, dfl860RuleUse=dfl860RuleUse, dfl860IPsecPhaseOneDone=dfl860IPsecPhaseOneDone, dfl860IfName=dfl860IfName, dfl860IPsecQuickModeFailed=dfl860IPsecQuickModeFailed, dfl860DHCPRuleUsagePercent=dfl860DHCPRuleUsagePercent, dfl860IPsecPhaseOneActive=dfl860IPsecPhaseOneActive, dfl860PipePrecReservedBps=dfl860PipePrecReservedBps, dfl860HttpAlgTotalBlocked=dfl860HttpAlgTotalBlocked, dfl860_MIB=dfl860_MIB, dfl860IfHCBitsOutCnt=dfl860IfHCBitsOutCnt, dfl860IfPktsTotCnt=dfl860IfPktsTotCnt, dfl860UserAuthRuleIndex=dfl860UserAuthRuleIndex, dfl860RuleUseGroup=dfl860RuleUseGroup, dfl860IPsecQuickModeActive=dfl860IPsecQuickModeActive, dfl860HttpAlgTable=dfl860HttpAlgTable, dfl860PipeCurrentPps=dfl860PipeCurrentPps, dfl860SmtpAlgDnsBlEntry=dfl860SmtpAlgDnsBlEntry, dfl860IPsecPhaseOneAggrModeDone=dfl860IPsecPhaseOneAggrModeDone, dfl860SysTCPSendLarge=dfl860SysTCPSendLarge, dfl860IfVlanIndex=dfl860IfVlanIndex, dfl860IPPoolMisses=dfl860IPPoolMisses, dfl860UserAuthRuleUse=dfl860UserAuthRuleUse, dfl860DHCPRelayRuleIndex=dfl860DHCPRelayRuleIndex, dfl860SysConns=dfl860SysConns, dfl860MibObjectGroups=dfl860MibObjectGroups, dfl860SysPscOther=dfl860SysPscOther, dfl860IPsecInfoDone=dfl860IPsecInfoDone, dlink=dlink, dfl860Pipes=dfl860Pipes, dfl860HttpAlgTotalAllowed=dfl860HttpAlgTotalAllowed, dfl860SysMemUsage=dfl860SysMemUsage, dfl860StatsCompliance=dfl860StatsCompliance, dfl860IfRxRingIndex=dfl860IfRxRingIndex, dfl860IfStatsEntry=dfl860IfStatsEntry, dfl860PipeDropedPackets=dfl860PipeDropedPackets, dfl860IfTxRingTable=dfl860IfTxRingTable, dfl860IfTxDespools=dfl860IfTxDespools, dfl860SmtpAlgTotCheckedSes=dfl860SmtpAlgTotCheckedSes, dfl860AlgGroup=dfl860AlgGroup, dfl860VPN=dfl860VPN, dfl860IPsecForwardedPackets=dfl860IPsecForwardedPackets, dfl860IfVlanStatsEntry=dfl860IfVlanStatsEntry, dfl860SmtpAlgEntry=dfl860SmtpAlgEntry, dfl860SysPscTcpSyn=dfl860SysPscTcpSyn, dfl860SmtpAlgTable=dfl860SmtpAlgTable, dfl860IfRxRingSaturation=dfl860IfRxRingSaturation, dfl860IfTxRingIndex=dfl860IfTxRingIndex, dfl860AlgSessions=dfl860AlgSessions, dfl860LinkMonitorGroup=dfl860LinkMonitorGroup, dfl860DHCPRelayRuleTable=dfl860DHCPRelayRuleTable, dfl860IPsecForwardedOctetsUcomp=dfl860IPsecForwardedOctetsUcomp, dfl860IfVlanUntaggedInPkts=dfl860IfVlanUntaggedInPkts, dfl860IfBitsInCnt=dfl860IfBitsInCnt, dfl860IfRxRingTable=dfl860IfRxRingTable, dfl860DHCPActiveClientsPercent=dfl860DHCPActiveClientsPercent, dfl860LinkMonGrpName=dfl860LinkMonGrpName, dfl860PipeNumPrec=dfl860PipeNumPrec, dfl860DHCPRelayRejected=dfl860DHCPRelayRejected, dfl860HttpAlgCntFltAllowed=dfl860HttpAlgCntFltAllowed, dfl860HWSensorValue=dfl860HWSensorValue, dfl860SmtpAlgDnsBlIndex=dfl860SmtpAlgDnsBlIndex, dfl860PipePrec=dfl860PipePrec, dfl860IfFragsIn=dfl860IfFragsIn, dfl860SmtpAlgTotDroppedSes=dfl860SmtpAlgTotDroppedSes, dfl860RuleName=dfl860RuleName, dfl860SysPerStateCounters=dfl860SysPerStateCounters, dfl860UserAuthPPPUsers=dfl860UserAuthPPPUsers, dfl860DHCPRuleName=dfl860DHCPRuleName, dfl860LinkMonHostId=dfl860LinkMonHostId, dfl860UserAuthXAUTHUsers=dfl860UserAuthXAUTHUsers, dfl860IfTxRingEntry=dfl860IfTxRingEntry, dfl860PipeTable=dfl860PipeTable, dfl860HA=dfl860HA, dfl860LinkMonGrpHostsUp=dfl860LinkMonGrpHostsUp, dfl860PipePrecBps=dfl860PipePrecBps, dfl860IPsecOutOctetsUncomp=dfl860IPsecOutOctetsUncomp, dfl860RuleUseTable=dfl860RuleUseTable, dfl860HttpAlgCntFltIndex=dfl860HttpAlgCntFltIndex, dfl860reg=dfl860reg, dfl860SmtpAlgDnsBlName=dfl860SmtpAlgDnsBlName, dfl860DHCPRelayCurClients=dfl860DHCPRelayCurClients, dfl860UserAuthRuleName=dfl860UserAuthRuleName, dfl860IfVlanUntaggedInOctets=dfl860IfVlanUntaggedInOctets, netdefendMgmt=netdefendMgmt, dfl860HASyncSendQueueUsageOct=dfl860HASyncSendQueueUsageOct, dfl860IPsecInOctetsUncomp=dfl860IPsecInOctetsUncomp, dfl860IPsecActiveTransforms=dfl860IPsecActiveTransforms, dfl860HttpAlgCntFltBlocked=dfl860HttpAlgCntFltBlocked, dfl860IPsecInOctetsComp=dfl860IPsecInOctetsComp, dfl860AlgTCPStreams=dfl860AlgTCPStreams, dfl860HttpAlg=dfl860HttpAlg, dfl860IfRxRingFifoErrors=dfl860IfRxRingFifoErrors, dfl860IfTxRingSaturation=dfl860IfTxRingSaturation, dfl860HWSensorName=dfl860HWSensorName, dfl860SmtpAlg=dfl860SmtpAlg, dfl860IfVlanUntaggedTotOctets=dfl860IfVlanUntaggedTotOctets, dfl860HASyncSendResentPackets=dfl860HASyncSendResentPackets, dfl860DHCPRejectedRequests=dfl860DHCPRejectedRequests, dfl860IPsecPhaseOneRekeyed=dfl860IPsecPhaseOneRekeyed, dfl860IfPktsInCnt=dfl860IfPktsInCnt, dfl860=dfl860, dfl860HttpAlgEntry=dfl860HttpAlgEntry, dfl860SmtpAlgName=dfl860SmtpAlgName, dfl860SysBuffUse=dfl860SysBuffUse, dfl860HttpAlgCntFltTable=dfl860HttpAlgCntFltTable, dfl860IPsecPhaseOneFailed=dfl860IPsecPhaseOneFailed, dfl860LinkMonGrpEntry=dfl860LinkMonGrpEntry, dfl860SmtpAlgIndex=dfl860SmtpAlgIndex, dfl860SmtpAlgDnsBlTable=dfl860SmtpAlgDnsBlTable, dfl860IfHCBitsTotCnt=dfl860IfHCBitsTotCnt, dfl860DHCPServerGroup=dfl860DHCPServerGroup, dfl860LinkMonitor=dfl860LinkMonitor, dfl860DHCPActiveClients=dfl860DHCPActiveClients, PYSNMP_MODULE_ID=dfl860_MIB, dfl860IPsec=dfl860IPsec, dfl860DHCPRelayRuleRejSrvPkts=dfl860DHCPRelayRuleRejSrvPkts, dfl860PipeDelayedPackets=dfl860PipeDelayedPackets, dfl860PipePrecTotalPps=dfl860PipePrecTotalPps, dfl860IfVlanGroup=dfl860IfVlanGroup, dfl860IfVlanUntaggedTotPkts=dfl860IfVlanUntaggedTotPkts, dfl860IfVlanUntaggedOutPkts=dfl860IfVlanUntaggedOutPkts, dfl860DHCPRelayObjectGroup=dfl860DHCPRelayObjectGroup, dfl860DHCPRuleEntry=dfl860DHCPRuleEntry, dfl860HASyncSendQueueUsagePkt=dfl860HASyncSendQueueUsagePkt, dfl860IfHCPktsInCnt=dfl860IfHCPktsInCnt, dfl860DHCPRelayRuleRejCliPkts=dfl860DHCPRelayRuleRejCliPkts, dfl860UserAuthGroup=dfl860UserAuthGroup, dfl860IfHCBitsInCnt=dfl860IfHCBitsInCnt, dfl860IfStatsTable=dfl860IfStatsTable, dfl860StatsRegGroups=dfl860StatsRegGroups)
mibBuilder.exportSymbols("DFL860-MIB", dfl860PipePrecTable=dfl860PipePrecTable, dfl860IPsecTotalTransforms=dfl860IPsecTotalTransforms, dfl860Rules=dfl860Rules, dfl860SysTimerUsage=dfl860SysTimerUsage, dfl860IfTxAvgUse=dfl860IfTxAvgUse, dfl860IfBitsTotCnt=dfl860IfBitsTotCnt)
