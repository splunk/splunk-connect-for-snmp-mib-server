#
# PySNMP MIB module NMS520-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS520-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:12:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
dsu, = mibBuilder.importSymbols("DDS-MIB", "dsu")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, Unsigned32, MibIdentifier, Gauge32, Bits, Counter64, ObjectIdentity, iso, Integer32, NotificationType, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Unsigned32", "MibIdentifier", "Gauge32", "Bits", "Counter64", "ObjectIdentity", "iso", "Integer32", "NotificationType", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nms520 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2))
nms520MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520MIBversion.setStatus('mandatory')
nms520UnitCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 2, 2), )
if mibBuilder.loadTexts: nms520UnitCfgTable.setStatus('mandatory')
nms520UnitCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1), ).setIndexNames((0, "NMS520-MIB", "nms520UnitCfgIndex"))
if mibBuilder.loadTexts: nms520UnitCfgEntry.setStatus('mandatory')
nms520UnitCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520UnitCfgIndex.setStatus('mandatory')
nms520Nms510CompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520Nms510CompatibilityMode.setStatus('mandatory')
nms520PtToPtSentryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520PtToPtSentryTime.setStatus('mandatory')
nms520AlarmHystTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520AlarmHystTime.setStatus('mandatory')
nms520MtpointRmRspIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520MtpointRmRspIntrvl.setStatus('mandatory')
nms520DtePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DtePortType.setStatus('mandatory')
nms520DteCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ctsOn", 1), ("cts0mSec", 2), ("ctsFixed3Char", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DteCtsDelay.setStatus('mandatory')
nms520DteCtsDelayExt = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ext0mSec", 1), ("ext30mSec", 2), ("ext60mSec", 3), ("ext90mSec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DteCtsDelayExt.setStatus('mandatory')
nms520FirmwareLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520FirmwareLevel.setStatus('mandatory')
nms520DaisyChainBps = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bps75", 1), ("bps9600", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DaisyChainBps.setStatus('mandatory')
nms520AlarmCfgCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520AlarmCfgCountWindow.setStatus('mandatory')
nms520SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520SoftReset.setStatus('mandatory')
nms520FrontPanelInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fpInhibited", 1), ("fpEnabled", 2), ("execute", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520FrontPanelInhibit.setStatus('mandatory')
nms520FrontPanelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fpInhibited", 1), ("fpEnabled", 2), ("execute", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520FrontPanelEnable.setStatus('mandatory')
nms520HdlcInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520HdlcInvert.setStatus('mandatory')
nms520PiggyBackDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-installed", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520PiggyBackDetect.setStatus('mandatory')
nms520UnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleHeight", 1), ("withIFP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520UnitType.setStatus('mandatory')
nms520ExtPortCtrlOut1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520ExtPortCtrlOut1.setStatus('mandatory')
nms520ExtPortCtrlOut2 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520ExtPortCtrlOut2.setStatus('mandatory')
nms520AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4))
nms520NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 1))
nms520DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 2))
nms520PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 3))
nms520EEChkSumErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 4))
nms520StcLoopbackAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 5))
nms520NoNtwkLoopCurrentAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 6))
nms520LinePairsReversedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 7))
nms520NoSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 8))
nms520FpTestAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 9))
nms520StreamingAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 10))
nms520DSRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 11))
nms520DTRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 12))
nms520DTPLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 13))
nms520DCDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 14))
nms520RXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 15))
nms520TXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 16))
nms520TmShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 17))
nms520DcdShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 18))
nms520DsrShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 19))
nms520CtsShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 20))
nms520RxdShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 21))
nms520RxcShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 22))
nms520TxcShortedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 23))
nms520DBURequestForScanAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 24))
nms520DBUOnalm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 25))
nms520DBUFailedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 26))
nms520NoDSUResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 27))
nms520NoDTEPollingAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 28))
nms520JitterAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 29))
nms520BpvAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 30))
nms520FrameLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 31))
nms520SignalToNoiseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 32))
nms520RxSignalLowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 33))
nms520ExtInputChangeAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 34))
nms520ExtInputLowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 2, 4, 35))
nms520AlarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 2, 8), )
if mibBuilder.loadTexts: nms520AlarmCfgTable.setStatus('mandatory')
nms520AlarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 2, 8, 1), ).setIndexNames((0, "NMS520-MIB", "nms520AlarmCfgIndex"), (0, "NMS520-MIB", "nms520AlarmCfgIdentifier"))
if mibBuilder.loadTexts: nms520AlarmCfgEntry.setStatus('mandatory')
nms520AlarmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520AlarmCfgIndex.setStatus('mandatory')
nms520AlarmCfgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520AlarmCfgIdentifier.setStatus('mandatory')
nms520AlarmCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520AlarmCfgThreshold.setStatus('mandatory')
nms520LineStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 2, 5), )
if mibBuilder.loadTexts: nms520LineStatsTable.setStatus('mandatory')
nms520LineStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1), ).setIndexNames((0, "NMS520-MIB", "nms520LineStatsIndex"), (0, "NMS520-MIB", "nms520LineStatsInterval"))
if mibBuilder.loadTexts: nms520LineStatsEntry.setStatus('mandatory')
nms520LineStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsIndex.setStatus('mandatory')
nms520LineStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsInterval.setStatus('mandatory')
nms520LineStatsTxInterpretation = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("noSignal", 2), ("notAvailable", 3), ("overRange", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsTxInterpretation.setStatus('mandatory')
nms520LineStatsTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txLevel0dB", 1), ("txLevel6dB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsTxLevel.setStatus('mandatory')
nms520LineStatsRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsRxLevel.setStatus('mandatory')
nms520LineStatsSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsSignalToNoiseRatio.setStatus('mandatory')
nms520LineStatsSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("fair", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsSignalQuality.setStatus('mandatory')
nms520LineStatsJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsJitter.setStatus('mandatory')
nms520LineStatsBpvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsBpvCount.setStatus('mandatory')
nms520LineStatsFrameLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520LineStatsFrameLossCount.setStatus('mandatory')
nms520DiagCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 2, 6), )
if mibBuilder.loadTexts: nms520DiagCfgTable.setStatus('mandatory')
nms520DiagCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1), ).setIndexNames((0, "NMS520-MIB", "nms520DiagCfgIndex"))
if mibBuilder.loadTexts: nms520DiagCfgEntry.setStatus('mandatory')
nms520DiagCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagCfgIndex.setStatus('mandatory')
nms520DiagSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sendOtherPattern", 1), ("send511Pattern", 2), ("send2047Pattern", 3), ("send15BitPattern", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagSendCode.setStatus('mandatory')
nms520DiagTestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noExceptions", 1), ("blocksOutOfRange", 2), ("bitsOutOfRange", 3), ("blocksAndBitsOutOfRange", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagTestExceptions.setStatus('mandatory')
nms520DiagBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagBitErrors.setStatus('mandatory')
nms520DiagBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagBlockErrors.setStatus('mandatory')
nms520DiagTestReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("diagnostic", 2), ("resetTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagTestReset.setStatus('mandatory')
nms520DiagTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagTimeDelay.setStatus('mandatory')
nms520DiagExcTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 2, 7), )
if mibBuilder.loadTexts: nms520DiagExcTable.setStatus('mandatory')
nms520DiagExcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1), ).setIndexNames((0, "NMS520-MIB", "nms520DiagExcIndex"))
if mibBuilder.loadTexts: nms520DiagExcEntry.setStatus('mandatory')
nms520DiagExcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagExcIndex.setStatus('mandatory')
nms520DiagExtLineloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lineloopOff", 1), ("lineloopOn", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagExtLineloop.setStatus('obsolete')
nms520DiagIntLineloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("lineloopOff", 1), ("lineloopOn", 2), ("blocks1", 3), ("blocks10", 4), ("blocks100", 5), ("blocks500", 6), ("blocks1000", 7), ("blocks5000", 8), ("blocks10000", 9), ("blocks50000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagIntLineloop.setStatus('mandatory')
nms520DiagIntDataloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dataloopOff", 1), ("dataloopOn", 2), ("blocks1", 3), ("blocks10", 4), ("blocks100", 5), ("blocks500", 6), ("blocks1000", 7), ("blocks5000", 8), ("blocks10000", 9), ("blocks50000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagIntDataloop.setStatus('mandatory')
nms520DiagEndToEndSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("endToEndOff", 1), ("endToEndOn", 2), ("blocks1", 3), ("blocks10", 4), ("blocks100", 5), ("blocks500", 6), ("blocks1000", 7), ("blocks5000", 8), ("blocks10000", 9), ("blocks50000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagEndToEndSelftest.setStatus('mandatory')
nms520DiagNetworkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delayTestOff", 1), ("delayTestOn", 2), ("runDelayTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagNetworkDelay.setStatus('mandatory')
nms520DiagTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("internalLineloop", 2), ("externalDataloop", 3), ("internalDataloop", 4), ("serviceTestCenterLoop", 5), ("endToend", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms520DiagTestStatus.setStatus('mandatory')
nms520DiagExtDataloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dataloopOff", 1), ("dataloopOn", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms520DiagExtDataloop.setStatus('mandatory')
mibBuilder.exportSymbols("NMS520-MIB", nms520DsrShortedAlm=nms520DsrShortedAlm, nms520AlarmCfgIdentifier=nms520AlarmCfgIdentifier, nms520DiagIntDataloop=nms520DiagIntDataloop, nms520ExtInputLowAlm=nms520ExtInputLowAlm, nms520FirmwareLevel=nms520FirmwareLevel, nms520DiagRxErrAlm=nms520DiagRxErrAlm, nms520DiagExtLineloop=nms520DiagExtLineloop, nms520CtsShortedAlm=nms520CtsShortedAlm, nms520NoDTEPollingAlm=nms520NoDTEPollingAlm, nms520RxdShortedAlm=nms520RxdShortedAlm, nms520DaisyChainBps=nms520DaisyChainBps, nms520NoResponseAlm=nms520NoResponseAlm, nms520UnitCfgEntry=nms520UnitCfgEntry, nms520UnitType=nms520UnitType, nms520MIBversion=nms520MIBversion, nms520PiggyBackDetect=nms520PiggyBackDetect, nms520NoNtwkLoopCurrentAlm=nms520NoNtwkLoopCurrentAlm, nms520FrontPanelEnable=nms520FrontPanelEnable, nms520DiagCfgIndex=nms520DiagCfgIndex, nms520AlarmCfgTable=nms520AlarmCfgTable, nms520DcdShortedAlm=nms520DcdShortedAlm, nms520DiagExcIndex=nms520DiagExcIndex, nms520LineStatsJitter=nms520LineStatsJitter, nms520DiagExcEntry=nms520DiagExcEntry, nms520RxSignalLowAlm=nms520RxSignalLowAlm, nms520AlarmCfgThreshold=nms520AlarmCfgThreshold, nms520DiagExcTable=nms520DiagExcTable, nms520FrontPanelInhibit=nms520FrontPanelInhibit, nms520TXDLossAlm=nms520TXDLossAlm, nms520DiagBitErrors=nms520DiagBitErrors, nms520EEChkSumErrAlm=nms520EEChkSumErrAlm, nms520DteCtsDelay=nms520DteCtsDelay, nms520DiagTimeDelay=nms520DiagTimeDelay, nms520AlarmHystTime=nms520AlarmHystTime, nms520JitterAlm=nms520JitterAlm, nms520Nms510CompatibilityMode=nms520Nms510CompatibilityMode, nms520NoSignalAlm=nms520NoSignalAlm, nms520SignalToNoiseAlm=nms520SignalToNoiseAlm, nms520UnitCfgTable=nms520UnitCfgTable, nms520DiagSendCode=nms520DiagSendCode, nms520DiagExtDataloop=nms520DiagExtDataloop, nms520DiagCfgTable=nms520DiagCfgTable, nms520LinePairsReversedAlm=nms520LinePairsReversedAlm, nms520DiagBlockErrors=nms520DiagBlockErrors, nms520FrameLossAlm=nms520FrameLossAlm, nms520HdlcInvert=nms520HdlcInvert, nms520DiagIntLineloop=nms520DiagIntLineloop, nms520DBUOnalm=nms520DBUOnalm, nms520StreamingAlm=nms520StreamingAlm, nms520StcLoopbackAlm=nms520StcLoopbackAlm, nms520LineStatsInterval=nms520LineStatsInterval, nms520DBUFailedAlm=nms520DBUFailedAlm, nms520ExtInputChangeAlm=nms520ExtInputChangeAlm, nms520LineStatsTxLevel=nms520LineStatsTxLevel, nms520NoDSUResponseAlm=nms520NoDSUResponseAlm, nms520DiagTestReset=nms520DiagTestReset, nms520PtToPtSentryTime=nms520PtToPtSentryTime, nms520LineStatsSignalToNoiseRatio=nms520LineStatsSignalToNoiseRatio, nms520DBURequestForScanAlm=nms520DBURequestForScanAlm, nms520UnitCfgIndex=nms520UnitCfgIndex, nms520DiagNetworkDelay=nms520DiagNetworkDelay, nms520DiagTestStatus=nms520DiagTestStatus, nms520LineStatsFrameLossCount=nms520LineStatsFrameLossCount, nms520AlarmCfgCountWindow=nms520AlarmCfgCountWindow, nms520BpvAlm=nms520BpvAlm, nms520AlarmCfgIndex=nms520AlarmCfgIndex, nms520LineStatsSignalQuality=nms520LineStatsSignalQuality, nms520MtpointRmRspIntrvl=nms520MtpointRmRspIntrvl, nms520RxcShortedAlm=nms520RxcShortedAlm, nms520PowerUpAlm=nms520PowerUpAlm, nms520LineStatsBpvCount=nms520LineStatsBpvCount, nms520ExtPortCtrlOut2=nms520ExtPortCtrlOut2, nms520DTRLossAlm=nms520DTRLossAlm, nms520DiagTestExceptions=nms520DiagTestExceptions, nms520ExtPortCtrlOut1=nms520ExtPortCtrlOut1, nms520DTPLossAlm=nms520DTPLossAlm, nms520SoftReset=nms520SoftReset, nms520LineStatsEntry=nms520LineStatsEntry, nms520DtePortType=nms520DtePortType, nms520DiagEndToEndSelftest=nms520DiagEndToEndSelftest, nms520=nms520, nms520AlarmCfgEntry=nms520AlarmCfgEntry, nms520DteCtsDelayExt=nms520DteCtsDelayExt, nms520AlarmData=nms520AlarmData, nms520FpTestAlm=nms520FpTestAlm, nms520DCDLossAlm=nms520DCDLossAlm, nms520RXDLossAlm=nms520RXDLossAlm, nms520DSRLossAlm=nms520DSRLossAlm, nms520LineStatsRxLevel=nms520LineStatsRxLevel, nms520TmShortedAlm=nms520TmShortedAlm, nms520LineStatsTable=nms520LineStatsTable, nms520DiagCfgEntry=nms520DiagCfgEntry, nms520LineStatsIndex=nms520LineStatsIndex, nms520LineStatsTxInterpretation=nms520LineStatsTxInterpretation, nms520TxcShortedAlm=nms520TxcShortedAlm)
