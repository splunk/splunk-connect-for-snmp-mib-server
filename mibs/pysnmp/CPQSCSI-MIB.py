#
# PySNMP MIB module CPQSCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSCSI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:12:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
cpqHoTrapFlags, compaq = mibBuilder.importSymbols("CPQHOST-MIB", "cpqHoTrapFlags", "compaq")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Counter32, Integer32, Unsigned32, iso, ModuleIdentity, Counter64, ObjectIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, enterprises, NotificationType, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Unsigned32", "iso", "ModuleIdentity", "Counter64", "ObjectIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "enterprises", "NotificationType", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5))
cpqScsiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 1))
cpqScsiComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2))
cpqScsiTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 3))
cpqTapeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4))
cpqScsiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1))
cpqScsiCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 2))
cpqScsiLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 3))
cpqScsiPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 4))
cpqScsiTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 5))
cpqScsiCd = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 6))
cpqScsiOsNetWare = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1))
cpqScsiOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4))
cpqTapePhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 1))
cpqTapeCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 2))
cpqTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 3))
cpqSbScsiBus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7))
cpqSbScsiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7, 1))
cpqSbDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7, 2))
cpqScsiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiMibRevMajor.setStatus('mandatory')
cpqScsiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiMibRevMinor.setStatus('mandatory')
cpqScsiMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiMibCondition.setStatus('mandatory')
cpqScsiNw3xDriverName = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverName.setStatus('deprecated')
cpqScsiNw3xDriverVers = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverVers.setStatus('deprecated')
cpqScsiNw3xDriverPollType = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("polled", 2), ("demand", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverPollType.setStatus('deprecated')
cpqScsiNw3xDriverPollTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xDriverPollTime.setStatus('deprecated')
cpqScsiNw3xCntlrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5), )
if mibBuilder.loadTexts: cpqScsiNw3xCntlrInfoTable.setStatus('deprecated')
cpqScsiNw3xCntlrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xBusIndex"))
if mibBuilder.loadTexts: cpqScsiNw3xCntlrInfoEntry.setStatus('deprecated')
cpqScsiNw3xCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xCntlrIndex.setStatus('deprecated')
cpqScsiNw3xBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xBusIndex.setStatus('deprecated')
cpqScsiNw3xXptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xXptDesc.setStatus('deprecated')
cpqScsiNw3xXptVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xXptVers.setStatus('deprecated')
cpqScsiNw3xSimDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xSimDesc.setStatus('deprecated')
cpqScsiNw3xSimVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xSimVers.setStatus('deprecated')
cpqScsiNw3xHbaDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xHbaDesc.setStatus('deprecated')
cpqScsiLogDrvStatTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6), )
if mibBuilder.loadTexts: cpqScsiLogDrvStatTable.setStatus('deprecated')
cpqScsiLogDrvStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xStatCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xStatBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xStatLogDrvIndex"))
if mibBuilder.loadTexts: cpqScsiLogDrvStatEntry.setStatus('deprecated')
cpqScsiNw3xStatCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xStatCntlrIndex.setStatus('deprecated')
cpqScsiNw3xStatBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xStatBusIndex.setStatus('deprecated')
cpqScsiNw3xStatLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xStatLogDrvIndex.setStatus('deprecated')
cpqScsiNw3xTotalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xTotalReads.setStatus('deprecated')
cpqScsiNw3xTotalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xTotalWrites.setStatus('deprecated')
cpqScsiNw3xCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xCorrReads.setStatus('deprecated')
cpqScsiNw3xCorrWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xCorrWrites.setStatus('deprecated')
cpqScsiNw3xFatalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xFatalReads.setStatus('deprecated')
cpqScsiNw3xFatalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xFatalWrites.setStatus('deprecated')
cpqScsiVolMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7), )
if mibBuilder.loadTexts: cpqScsiVolMapTable.setStatus('deprecated')
cpqScsiVolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xVolCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xVolBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xVolLogDrvIndex"))
if mibBuilder.loadTexts: cpqScsiVolMapEntry.setStatus('deprecated')
cpqScsiNw3xVolCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolCntlrIndex.setStatus('deprecated')
cpqScsiNw3xVolBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolBusIndex.setStatus('deprecated')
cpqScsiNw3xVolLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolLogDrvIndex.setStatus('deprecated')
cpqScsiNw3xVolMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiNw3xVolMap.setStatus('deprecated')
cpqScsiOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqScsiOsCommonPollFreq.setStatus('mandatory')
cpqScsiOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqScsiOsCommonModuleTable.setStatus('deprecated')
cpqScsiOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqScsiOsCommonModuleEntry.setStatus('deprecated')
cpqScsiOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleIndex.setStatus('deprecated')
cpqScsiOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleName.setStatus('deprecated')
cpqScsiOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleVersion.setStatus('deprecated')
cpqScsiOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModuleDate.setStatus('deprecated')
cpqScsiOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiOsCommonModulePurpose.setStatus('deprecated')
cpqScsiCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1), )
if mibBuilder.loadTexts: cpqScsiCntlrTable.setStatus('mandatory')
cpqScsiCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiCntlrBusIndex"))
if mibBuilder.loadTexts: cpqScsiCntlrEntry.setStatus('mandatory')
cpqScsiCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrIndex.setStatus('mandatory')
cpqScsiCntlrBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrBusIndex.setStatus('mandatory')
cpqScsiCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("cpqs710", 2), ("cpqs94", 3), ("cpqs810p", 4), ("cpqs825e", 5), ("cpqs825p", 6), ("cpqs974p", 7), ("cpqs875p", 8), ("extended", 9), ("cpqs895p", 10), ("cpqs896p", 11), ("cpqa789x", 12), ("cpqs876t", 13), ("hpu320", 14), ("hpu320r", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrModel.setStatus('mandatory')
cpqScsiCntlrFWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrFWVers.setStatus('mandatory')
cpqScsiCntlrSWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSWVers.setStatus('deprecated')
cpqScsiCntlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSlot.setStatus('mandatory')
cpqScsiCntlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrStatus.setStatus('mandatory')
cpqScsiCntlrHardResets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrHardResets.setStatus('mandatory')
cpqScsiCntlrSoftResets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSoftResets.setStatus('mandatory')
cpqScsiCntlrTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrTimeouts.setStatus('mandatory')
cpqScsiCntlrBaseIOAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrBaseIOAddr.setStatus('mandatory')
cpqScsiCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrCondition.setStatus('mandatory')
cpqScsiCntlrSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrSerialNum.setStatus('mandatory')
cpqScsiCntlrBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrBusWidth.setStatus('mandatory')
cpqScsiCntlrModelExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrModelExtended.setStatus('mandatory')
cpqScsiCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCntlrHwLocation.setStatus('optional')
cpqScsiLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1), )
if mibBuilder.loadTexts: cpqScsiLogDrvTable.setStatus('mandatory')
cpqScsiLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiLogDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiLogDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiLogDrvIndex"))
if mibBuilder.loadTexts: cpqScsiLogDrvEntry.setStatus('mandatory')
cpqScsiLogDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvCntlrIndex.setStatus('mandatory')
cpqScsiLogDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvBusIndex.setStatus('mandatory')
cpqScsiLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvIndex.setStatus('mandatory')
cpqScsiLogDrvFaultTol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("mirroring", 3), ("dataGuard", 4), ("distribDataGuard", 5), ("enhancedMirroring", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvFaultTol.setStatus('mandatory')
cpqScsiLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("unconfigured", 4), ("recovering", 5), ("readyForRebuild", 6), ("rebuilding", 7), ("wrongDrive", 8), ("badConnect", 9), ("degraded", 10), ("disabled", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvStatus.setStatus('mandatory')
cpqScsiLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvSize.setStatus('mandatory')
cpqScsiLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvPhyDrvIDs.setStatus('mandatory')
cpqScsiLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvCondition.setStatus('mandatory')
cpqScsiLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvStripeSize.setStatus('mandatory')
cpqScsiLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvAvailSpares.setStatus('mandatory')
cpqScsiLogDrvPercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvPercentRebuild.setStatus('mandatory')
cpqScsiLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiLogDrvOsName.setStatus('mandatory')
cpqScsiPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1), )
if mibBuilder.loadTexts: cpqScsiPhyDrvTable.setStatus('mandatory')
cpqScsiPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiPhyDrvIndex"))
if mibBuilder.loadTexts: cpqScsiPhyDrvEntry.setStatus('mandatory')
cpqScsiPhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvCntlrIndex.setStatus('mandatory')
cpqScsiPhyDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvBusIndex.setStatus('mandatory')
cpqScsiPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvIndex.setStatus('mandatory')
cpqScsiPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvModel.setStatus('mandatory')
cpqScsiPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvFWRev.setStatus('mandatory')
cpqScsiPhyDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvVendor.setStatus('mandatory')
cpqScsiPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSize.setStatus('mandatory')
cpqScsiPhyDrvScsiID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvScsiID.setStatus('mandatory')
cpqScsiPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("notConfigured", 4), ("badCable", 5), ("missingWasOk", 6), ("missingWasFailed", 7), ("predictiveFailure", 8), ("missingWasPredictiveFailure", 9), ("offline", 10), ("missingWasOffline", 11), ("hardError", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvStatus.setStatus('mandatory')
cpqScsiPhyDrvServiceHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvServiceHours.setStatus('mandatory')
cpqScsiPhyDrvHighReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHighReadSectors.setStatus('mandatory')
cpqScsiPhyDrvLowReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvLowReadSectors.setStatus('mandatory')
cpqScsiPhyDrvHighWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHighWriteSectors.setStatus('mandatory')
cpqScsiPhyDrvLowWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvLowWriteSectors.setStatus('mandatory')
cpqScsiPhyDrvHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHardReadErrs.setStatus('mandatory')
cpqScsiPhyDrvHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHardWriteErrs.setStatus('mandatory')
cpqScsiPhyDrvEccCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvEccCorrReads.setStatus('mandatory')
cpqScsiPhyDrvRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvRecvReadErrs.setStatus('mandatory')
cpqScsiPhyDrvRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvRecvWriteErrs.setStatus('mandatory')
cpqScsiPhyDrvSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSeekErrs.setStatus('mandatory')
cpqScsiPhyDrvSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSpinupTime.setStatus('mandatory')
cpqScsiPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvUsedReallocs.setStatus('mandatory')
cpqScsiPhyDrvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvTimeouts.setStatus('mandatory')
cpqScsiPhyDrvPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPostErrs.setStatus('mandatory')
cpqScsiPhyDrvPostErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPostErrCode.setStatus('mandatory')
cpqScsiPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvCondition.setStatus('mandatory')
cpqScsiPhyDrvFuncTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvFuncTest1.setStatus('mandatory')
cpqScsiPhyDrvFuncTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvFuncTest2.setStatus('mandatory')
cpqScsiPhyDrvStatsPreserved = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("inNVRAM", 2), ("onDisk", 3), ("noCPUSupport", 4), ("noFreeNVRAM", 5), ("noDrvSupport", 6), ("noSoftwareSupport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvStatsPreserved.setStatus('mandatory')
cpqScsiPhyDrvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSerialNum.setStatus('mandatory')
cpqScsiPhyDrvLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("proliant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvLocation.setStatus('deprecated')
cpqScsiPhyDrvParent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvParent.setStatus('mandatory')
cpqScsiPhyDrvSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvSectorSize.setStatus('mandatory')
cpqScsiPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvHotPlug.setStatus('mandatory')
cpqScsiPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPlacement.setStatus('mandatory')
cpqScsiPhyDrvPreFailMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvPreFailMonitoring.setStatus('mandatory')
cpqScsiPhyDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvOsName.setStatus('mandatory')
cpqScsiPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvRotationalSpeed.setStatus('mandatory')
cpqScsiPhyDrvMemberLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("member", 2), ("spare", 3), ("nonMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiPhyDrvMemberLogDrv.setStatus('mandatory')
cpqScsiTargetTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1), )
if mibBuilder.loadTexts: cpqScsiTargetTable.setStatus('mandatory')
cpqScsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiTargetCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiTargetBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiTargetScsiIdIndex"))
if mibBuilder.loadTexts: cpqScsiTargetEntry.setStatus('mandatory')
cpqScsiTargetCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetCntlrIndex.setStatus('mandatory')
cpqScsiTargetBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetBusIndex.setStatus('mandatory')
cpqScsiTargetScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetScsiIdIndex.setStatus('mandatory')
cpqScsiTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetType.setStatus('mandatory')
cpqScsiTargetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetModel.setStatus('mandatory')
cpqScsiTargetFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetFWRev.setStatus('mandatory')
cpqScsiTargetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetVendor.setStatus('mandatory')
cpqScsiTargetParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetParityErrs.setStatus('mandatory')
cpqScsiTargetPhaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetPhaseErrs.setStatus('mandatory')
cpqScsiTargetSelectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetSelectTimeouts.setStatus('mandatory')
cpqScsiTargetMsgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetMsgRejects.setStatus('mandatory')
cpqScsiTargetNegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetNegPeriod.setStatus('deprecated')
cpqScsiTargetLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("proliant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetLocation.setStatus('mandatory')
cpqScsiTargetNegSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetNegSpeed.setStatus('mandatory')
cpqScsiTargetPhysWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetPhysWidth.setStatus('mandatory')
cpqScsiTargetNegWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetNegWidth.setStatus('mandatory')
cpqScsiTargetTypeExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("pdcd", 2), ("removableDisk", 3), ("dltAutoloader", 4), ("cdJukebox", 5), ("cr3500", 6), ("autoloader", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetTypeExtended.setStatus('mandatory')
cpqScsiTargetCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6), ("scsi1", 7), ("ultra4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTargetCurrentSpeed.setStatus('mandatory')
cpqScsiCdDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1), )
if mibBuilder.loadTexts: cpqScsiCdDrvTable.setStatus('mandatory')
cpqScsiCdDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiCdDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvLunIndex"))
if mibBuilder.loadTexts: cpqScsiCdDrvEntry.setStatus('mandatory')
cpqScsiCdDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvCntlrIndex.setStatus('mandatory')
cpqScsiCdDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvBusIndex.setStatus('mandatory')
cpqScsiCdDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvScsiIdIndex.setStatus('mandatory')
cpqScsiCdDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvLunIndex.setStatus('mandatory')
cpqScsiCdDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvModel.setStatus('mandatory')
cpqScsiCdDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvVendor.setStatus('mandatory')
cpqScsiCdDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiCdDrvFwRev.setStatus('mandatory')
cpqCdLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2), )
if mibBuilder.loadTexts: cpqCdLibraryTable.setStatus('mandatory')
cpqCdLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqCdLibraryCntlrIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryBusIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryLunIndex"))
if mibBuilder.loadTexts: cpqCdLibraryEntry.setStatus('mandatory')
cpqCdLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryCntlrIndex.setStatus('mandatory')
cpqCdLibraryBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryBusIndex.setStatus('mandatory')
cpqCdLibraryScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryScsiIdIndex.setStatus('mandatory')
cpqCdLibraryLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryLunIndex.setStatus('mandatory')
cpqCdLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryCondition.setStatus('mandatory')
cpqCdLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("offline", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryStatus.setStatus('mandatory')
cpqCdLibraryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryModel.setStatus('mandatory')
cpqCdLibraryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryVendor.setStatus('mandatory')
cpqCdLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibrarySerialNumber.setStatus('mandatory')
cpqCdLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryDriveList.setStatus('mandatory')
cpqCdLibraryFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryFwRev.setStatus('mandatory')
cpqCdLibraryFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCdLibraryFwSubtype.setStatus('mandatory')
cpqScsiTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapPkts.setStatus('deprecated')
cpqScsiTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapLogMaxSize.setStatus('deprecated')
cpqScsiTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 3, 3), )
if mibBuilder.loadTexts: cpqScsiTrapLogTable.setStatus('deprecated')
cpqScsiTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiTrapLogIndex"))
if mibBuilder.loadTexts: cpqScsiTrapLogEntry.setStatus('deprecated')
cpqScsiTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapLogIndex.setStatus('deprecated')
cpqScsiTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5001, 5002, 5003))).clone(namedValues=NamedValues(("cpqScsiCntlrStatusChange", 1), ("cpqScsiLogDrvStatusChange", 2), ("cpqScsiPhyDrvStatusChange", 3), ("cpqScsi2CntlrStatusChange", 5001), ("cpqScsi2LogDrvStatusChange", 5002), ("cpqScsi2PhyDrvStatusChange", 5003)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapType.setStatus('deprecated')
cpqScsiTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqScsiTrapTime.setStatus('deprecated')
cpqSbMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbMibRevMajor.setStatus('deprecated')
cpqSbMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbMibRevMinor.setStatus('deprecated')
cpqSbDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 7, 2, 2), )
if mibBuilder.loadTexts: cpqSbDeviceTable.setStatus('deprecated')
cpqSbDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSbDevCntlrIndex"), (0, "CPQSCSI-MIB", "cpqSbDevBusIndex"), (0, "CPQSCSI-MIB", "cpqSbDevScsiIdIndex"))
if mibBuilder.loadTexts: cpqSbDeviceEntry.setStatus('deprecated')
cpqSbDevCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevCntlrIndex.setStatus('deprecated')
cpqSbDevBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevBusIndex.setStatus('deprecated')
cpqSbDevScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevScsiIdIndex.setStatus('deprecated')
cpqSbDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevType.setStatus('deprecated')
cpqSbDevModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevModel.setStatus('deprecated')
cpqSbDevFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevFWRev.setStatus('deprecated')
cpqSbDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevVendor.setStatus('deprecated')
cpqSbDevParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevParityErrs.setStatus('deprecated')
cpqSbDevPhaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevPhaseErrs.setStatus('deprecated')
cpqSbDevSelectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevSelectTimeouts.setStatus('deprecated')
cpqSbDevMsgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevMsgRejects.setStatus('deprecated')
cpqSbDevNegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevNegPeriod.setStatus('deprecated')
cpqSbDevLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("proliant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSbDevLocation.setStatus('deprecated')
cpqTapePhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1), )
if mibBuilder.loadTexts: cpqTapePhyDrvTable.setStatus('mandatory')
cpqTapePhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvLunIndex"))
if mibBuilder.loadTexts: cpqTapePhyDrvEntry.setStatus('mandatory')
cpqTapePhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCntlrIndex.setStatus('mandatory')
cpqTapePhyDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvBusIndex.setStatus('mandatory')
cpqTapePhyDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvScsiIdIndex.setStatus('mandatory')
cpqTapePhyDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLunIndex.setStatus('mandatory')
cpqTapePhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("cpqDat4-16", 2), ("cpqDatAuto", 3), ("cpqDat2-8", 4), ("cpqDlt10-20", 5), ("cpqDlt20-40", 6), ("cpqDlt15-30", 7), ("cpqDlt35-70", 8), ("cpqDat4-8", 9), ("cpqSlr4-8", 10), ("cpqDat12-24", 11), ("cpqDatAuto12-24", 12), ("cpqMlr16-32", 13), ("cpqAit35", 14), ("cpqAit50", 15), ("cpqDat20-40", 16), ("cpqDlt40-80", 17), ("cpqDatAuto20-40", 18), ("cpqSuperDlt1", 19), ("cpqAit35Lvd", 20), ("cpqCompaq", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvType.setStatus('mandatory')
cpqTapePhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCondition.setStatus('mandatory')
cpqTapePhyDrvMagSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvMagSize.setStatus('mandatory')
cpqTapePhyDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvSerialNumber.setStatus('mandatory')
cpqTapePhyDrvCleanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCleanReq.setStatus('mandatory')
cpqTapePhyDrvCleanTapeRepl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCleanTapeRepl.setStatus('mandatory')
cpqTapePhyDrvFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvFwSubtype.setStatus('mandatory')
cpqTapePhyDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvName.setStatus('mandatory')
cpqTapePhyDrvCleanTapeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvCleanTapeCount.setStatus('mandatory')
cpqTapePhyDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvFwRev.setStatus('mandatory')
cpqTapePhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4), ("offline", 5), ("missingWasOk", 6), ("missingWasFailed", 7), ("missingWasOffline", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvStatus.setStatus('mandatory')
cpqTapePhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvHotPlug.setStatus('mandatory')
cpqTapePhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvPlacement.setStatus('mandatory')
cpqTapePhyDrvLibraryDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLibraryDrive.setStatus('mandatory')
cpqTapePhyDrvLoaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLoaderName.setStatus('mandatory')
cpqTapePhyDrvLoaderFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLoaderFwRev.setStatus('mandatory')
cpqTapePhyDrvLoaderSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapePhyDrvLoaderSerialNum.setStatus('mandatory')
cpqTapeCountersTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1), )
if mibBuilder.loadTexts: cpqTapeCountersTable.setStatus('mandatory')
cpqTapeCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapeCountersCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersBusIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersLunIndex"))
if mibBuilder.loadTexts: cpqTapeCountersEntry.setStatus('mandatory')
cpqTapeCountersCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersCntlrIndex.setStatus('mandatory')
cpqTapeCountersBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersBusIndex.setStatus('mandatory')
cpqTapeCountersScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersScsiIdIndex.setStatus('mandatory')
cpqTapeCountersLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersLunIndex.setStatus('mandatory')
cpqTapeCountersReWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersReWrites.setStatus('mandatory')
cpqTapeCountersReReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersReReads.setStatus('mandatory')
cpqTapeCountersTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersTotalErrors.setStatus('mandatory')
cpqTapeCountersTotalUncorrectable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersTotalUncorrectable.setStatus('mandatory')
cpqTapeCountersTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeCountersTotalBytes.setStatus('mandatory')
cpqTapeLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1), )
if mibBuilder.loadTexts: cpqTapeLibraryTable.setStatus('mandatory')
cpqTapeLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapeLibraryCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryBusIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryLunIndex"))
if mibBuilder.loadTexts: cpqTapeLibraryEntry.setStatus('mandatory')
cpqTapeLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryCntlrIndex.setStatus('mandatory')
cpqTapeLibraryBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryBusIndex.setStatus('mandatory')
cpqTapeLibraryScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryScsiIdIndex.setStatus('mandatory')
cpqTapeLibraryLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryLunIndex.setStatus('mandatory')
cpqTapeLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryCondition.setStatus('mandatory')
cpqTapeLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryStatus.setStatus('mandatory')
cpqTapeLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("notSupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryDoorStatus.setStatus('mandatory')
cpqTapeLibraryStatHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryStatHours.setStatus('mandatory')
cpqTapeLibraryStatMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryStatMoves.setStatus('mandatory')
cpqTapeLibraryName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryName.setStatus('mandatory')
cpqTapeLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibrarySerialNumber.setStatus('mandatory')
cpqTapeLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 320))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryDriveList.setStatus('deprecated')
cpqTapeLibraryState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryState.setStatus('mandatory')
cpqTapeLibraryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("ok", 3), ("safeTempExceeded", 4), ("maxTempExceeded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryTemperature.setStatus('mandatory')
cpqTapeLibraryRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryRedundancy.setStatus('mandatory')
cpqTapeLibraryHotSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryHotSwap.setStatus('mandatory')
cpqTapeLibraryFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryFwRev.setStatus('mandatory')
cpqTapeLibraryTapeList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 560))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqTapeLibraryTapeList.setStatus('mandatory')
cpqScsiCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,1)).setObjects(("CPQSCSI-MIB", "cpqScsiCntlrStatus"))
cpqScsiLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,2)).setObjects(("CPQSCSI-MIB", "cpqScsiLogDrvStatus"))
cpqScsiPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,3)).setObjects(("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"))
cpqScsi2CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5001)).setObjects(("CPQSCSI-MIB", "cpqScsiCntlrStatus"))
cpqScsi2LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5002)).setObjects(("CPQSCSI-MIB", "cpqScsiLogDrvStatus"))
cpqScsi2PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5003)).setObjects(("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"))
cpqTapePhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5004)).setObjects(("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqScsi3CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiCntlrStatus"))
cpqScsi3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"))
cpqTape3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqTape3PhyDrvCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqTape3PhyDrvCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"))
cpqTape3LibraryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryOkay = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqTape3LibraryDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"))
cpqScsiCdLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqCdLibraryCntlrIndex"), ("CPQSCSI-MIB", "cpqCdLibraryBusIndex"), ("CPQSCSI-MIB", "cpqCdLibraryScsiIdIndex"), ("CPQSCSI-MIB", "cpqCdLibraryStatus"))
cpqTape4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvStatus"))
cpqScsi4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"), ("CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvVendor"), ("CPQSCSI-MIB", "cpqScsiPhyDrvModel"), ("CPQSCSI-MIB", "cpqScsiPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqScsiPhyDrvSerialNum"))
cpqTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibraryCntlrIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryBusIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryLunIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryName"), ("CPQSCSI-MIB", "cpqTapeLibraryFwRev"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"), ("CPQSCSI-MIB", "cpqTapeLibraryState"))
cpqTape5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvLunIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvName"), ("CPQSCSI-MIB", "cpqTapePhyDrvFwRev"), ("CPQSCSI-MIB", "cpqTapePhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqTapePhyDrvStatus"))
cpqScsi5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"), ("CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvVendor"), ("CPQSCSI-MIB", "cpqScsiPhyDrvModel"), ("CPQSCSI-MIB", "cpqScsiPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqScsiPhyDrvSerialNum"), ("CPQSCSI-MIB", "cpqScsiPhyDrvOsName"))
cpqScsi3LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiLogDrvStatus"), ("CPQSCSI-MIB", "cpqScsiLogDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvOsName"))
mibBuilder.exportSymbols("CPQSCSI-MIB", cpqScsiNw3xDriverPollTime=cpqScsiNw3xDriverPollTime, cpqScsiOsCommonModuleTable=cpqScsiOsCommonModuleTable, cpqScsiPhyDrvFuncTest2=cpqScsiPhyDrvFuncTest2, cpqScsiPhyDrvHardWriteErrs=cpqScsiPhyDrvHardWriteErrs, cpqTapePhyDrv=cpqTapePhyDrv, cpqScsiNw3xXptDesc=cpqScsiNw3xXptDesc, cpqScsiPhyDrvMemberLogDrv=cpqScsiPhyDrvMemberLogDrv, cpqScsiCntlrSWVers=cpqScsiCntlrSWVers, cpqTapeCountersLunIndex=cpqTapeCountersLunIndex, cpqTape3PhyDrvStatusChange=cpqTape3PhyDrvStatusChange, cpqTapeCountersReWrites=cpqTapeCountersReWrites, cpqScsiComponent=cpqScsiComponent, cpqTapePhyDrvFwRev=cpqTapePhyDrvFwRev, cpqScsiCntlrTimeouts=cpqScsiCntlrTimeouts, cpqScsiOsNetWare=cpqScsiOsNetWare, cpqTapePhyDrvSerialNumber=cpqTapePhyDrvSerialNumber, cpqSbMibRevMajor=cpqSbMibRevMajor, cpqTapeLibraryStatus=cpqTapeLibraryStatus, cpqScsiNw3xCorrReads=cpqScsiNw3xCorrReads, cpqScsiPhyDrvRecvReadErrs=cpqScsiPhyDrvRecvReadErrs, cpqScsiPhyDrvEntry=cpqScsiPhyDrvEntry, cpqTapePhyDrvName=cpqTapePhyDrvName, cpqTapeLibraryLunIndex=cpqTapeLibraryLunIndex, cpqTape3LibraryDegraded=cpqTape3LibraryDegraded, cpqScsiPhyDrvModel=cpqScsiPhyDrvModel, cpqScsiPhyDrvBusIndex=cpqScsiPhyDrvBusIndex, cpqScsiPhyDrvSectorSize=cpqScsiPhyDrvSectorSize, cpqTapePhyDrvEntry=cpqTapePhyDrvEntry, cpqScsiOsCommonModuleEntry=cpqScsiOsCommonModuleEntry, cpqTapePhyDrvLibraryDrive=cpqTapePhyDrvLibraryDrive, cpqScsiCntlrSoftResets=cpqScsiCntlrSoftResets, cpqTapeLibraryDoorStatus=cpqTapeLibraryDoorStatus, cpqScsiLogDrvIndex=cpqScsiLogDrvIndex, cpqScsiLogDrvPercentRebuild=cpqScsiLogDrvPercentRebuild, cpqTapeLibraryTable=cpqTapeLibraryTable, cpqTapePhyDrvHotPlug=cpqTapePhyDrvHotPlug, cpqScsiCntlrEntry=cpqScsiCntlrEntry, cpqCdLibraryStatus=cpqCdLibraryStatus, cpqScsiNw3xXptVers=cpqScsiNw3xXptVers, cpqScsiPhyDrvLowReadSectors=cpqScsiPhyDrvLowReadSectors, cpqScsi3PhyDrvStatusChange=cpqScsi3PhyDrvStatusChange, cpqScsiTrapLogMaxSize=cpqScsiTrapLogMaxSize, cpqScsiPhyDrvStatus=cpqScsiPhyDrvStatus, cpqSbDevType=cpqSbDevType, cpqScsiPhyDrvPreFailMonitoring=cpqScsiPhyDrvPreFailMonitoring, cpqTapeCountersScsiIdIndex=cpqTapeCountersScsiIdIndex, cpqScsiTrapLogIndex=cpqScsiTrapLogIndex, cpqScsiTargetLocation=cpqScsiTargetLocation, cpqScsiTrapPkts=cpqScsiTrapPkts, cpqSbScsiMibRev=cpqSbScsiMibRev, cpqScsiNw3xVolMap=cpqScsiNw3xVolMap, cpqScsiPhyDrvTable=cpqScsiPhyDrvTable, cpqScsiNw3xVolBusIndex=cpqScsiNw3xVolBusIndex, cpqScsiLogDrv=cpqScsiLogDrv, cpqTape3PhyDrvCleanTapeReplace=cpqTape3PhyDrvCleanTapeReplace, cpqScsiTrapLogTable=cpqScsiTrapLogTable, cpqScsiPhyDrvFWRev=cpqScsiPhyDrvFWRev, cpqScsiPhyDrvIndex=cpqScsiPhyDrvIndex, cpqScsiPhyDrvVendor=cpqScsiPhyDrvVendor, cpqScsiPhyDrvHighWriteSectors=cpqScsiPhyDrvHighWriteSectors, cpqTapePhyDrvFwSubtype=cpqTapePhyDrvFwSubtype, cpqTapePhyDrvLoaderName=cpqTapePhyDrvLoaderName, cpqScsiNw3xDriverName=cpqScsiNw3xDriverName, cpqScsiTargetMsgRejects=cpqScsiTargetMsgRejects, cpqScsiCdDrvScsiIdIndex=cpqScsiCdDrvScsiIdIndex, cpqSbDevLocation=cpqSbDevLocation, cpqScsi3CntlrStatusChange=cpqScsi3CntlrStatusChange, cpqScsiPhyDrvHardReadErrs=cpqScsiPhyDrvHardReadErrs, cpqTape5PhyDrvStatusChange=cpqTape5PhyDrvStatusChange, cpqScsiTrapLogEntry=cpqScsiTrapLogEntry, cpqCdLibraryCntlrIndex=cpqCdLibraryCntlrIndex, cpqScsiCntlrStatus=cpqScsiCntlrStatus, cpqScsiNw3xCntlrInfoEntry=cpqScsiNw3xCntlrInfoEntry, cpqSbDevVendor=cpqSbDevVendor, cpqTapePhyDrvLoaderFwRev=cpqTapePhyDrvLoaderFwRev, cpqTapeCountersTotalUncorrectable=cpqTapeCountersTotalUncorrectable, cpqScsiCdDrvVendor=cpqScsiCdDrvVendor, cpqScsiPhyDrvCondition=cpqScsiPhyDrvCondition, cpqScsi2CntlrStatusChange=cpqScsi2CntlrStatusChange, cpqCdLibraryCondition=cpqCdLibraryCondition, cpqTapeLibraryStatMoves=cpqTapeLibraryStatMoves, cpqScsiPhyDrvPostErrCode=cpqScsiPhyDrvPostErrCode, cpqScsiPhyDrvStatsPreserved=cpqScsiPhyDrvStatsPreserved, cpqCdLibraryBusIndex=cpqCdLibraryBusIndex, cpqScsiCntlrHwLocation=cpqScsiCntlrHwLocation, cpqTapeLibraryCntlrIndex=cpqTapeLibraryCntlrIndex, cpqScsiCntlrTable=cpqScsiCntlrTable, cpqScsiNw3xStatCntlrIndex=cpqScsiNw3xStatCntlrIndex, cpqScsiCntlrSlot=cpqScsiCntlrSlot, cpqScsiNw3xVolCntlrIndex=cpqScsiNw3xVolCntlrIndex, cpqTapeCountersReReads=cpqTapeCountersReReads, cpqScsiPhyDrvStatusChange=cpqScsiPhyDrvStatusChange, cpqSbDeviceEntry=cpqSbDeviceEntry, cpqTapeLibraryBusIndex=cpqTapeLibraryBusIndex, cpqTapeLibraryStatHours=cpqTapeLibraryStatHours, cpqScsiLogDrvAvailSpares=cpqScsiLogDrvAvailSpares, cpqTapePhyDrvCondition=cpqTapePhyDrvCondition, cpqScsiCdDrvEntry=cpqScsiCdDrvEntry, cpqScsiTargetCntlrIndex=cpqScsiTargetCntlrIndex, cpqScsiPhyDrvEccCorrReads=cpqScsiPhyDrvEccCorrReads, cpqScsiPhyDrvSize=cpqScsiPhyDrvSize, cpqScsiPhyDrvPlacement=cpqScsiPhyDrvPlacement, cpqScsiTargetPhaseErrs=cpqScsiTargetPhaseErrs, cpqScsiPhyDrvHighReadSectors=cpqScsiPhyDrvHighReadSectors, cpqSbDeviceTable=cpqSbDeviceTable, cpqScsiCdDrvModel=cpqScsiCdDrvModel, cpqScsiOsCommonPollFreq=cpqScsiOsCommonPollFreq, cpqScsiMibRevMajor=cpqScsiMibRevMajor, cpqTapePhyDrvMagSize=cpqTapePhyDrvMagSize, cpqTapeCountersEntry=cpqTapeCountersEntry, cpqScsi3LogDrvStatusChange=cpqScsi3LogDrvStatusChange, cpqScsiTargetEntry=cpqScsiTargetEntry, cpqScsiOsCommonModuleVersion=cpqScsiOsCommonModuleVersion, cpqScsiLogDrvCntlrIndex=cpqScsiLogDrvCntlrIndex, cpqScsiTargetVendor=cpqScsiTargetVendor, cpqScsiTargetCurrentSpeed=cpqScsiTargetCurrentSpeed, cpqScsiLogDrvStatTable=cpqScsiLogDrvStatTable, cpqScsiNw3xTotalReads=cpqScsiNw3xTotalReads, cpqScsiPhyDrvCntlrIndex=cpqScsiPhyDrvCntlrIndex, cpqScsiTargetPhysWidth=cpqScsiTargetPhysWidth, cpqScsiCdDrvLunIndex=cpqScsiCdDrvLunIndex, cpqScsiCdDrvFwRev=cpqScsiCdDrvFwRev, cpqScsiNw3xFatalReads=cpqScsiNw3xFatalReads, cpqCdLibraryModel=cpqCdLibraryModel, cpqTapePhyDrvBusIndex=cpqTapePhyDrvBusIndex, cpqScsiTrap=cpqScsiTrap, cpqTapeLibraryDriveList=cpqTapeLibraryDriveList, cpqScsiPhyDrvParent=cpqScsiPhyDrvParent, cpqTapePhyDrvCleanReq=cpqTapePhyDrvCleanReq, cpqScsiCntlrBaseIOAddr=cpqScsiCntlrBaseIOAddr, cpqScsiCntlr=cpqScsiCntlr, cpqScsiLogDrvEntry=cpqScsiLogDrvEntry, cpqScsiPhyDrvScsiID=cpqScsiPhyDrvScsiID, cpqScsiPhyDrvFuncTest1=cpqScsiPhyDrvFuncTest1, cpqScsiTargetNegWidth=cpqScsiTargetNegWidth, cpqScsiOsCommonModuleIndex=cpqScsiOsCommonModuleIndex, cpqScsiTargetModel=cpqScsiTargetModel, cpqTapeCountersBusIndex=cpqTapeCountersBusIndex, cpqTapeLibraryTemperature=cpqTapeLibraryTemperature, cpqSbDevBusIndex=cpqSbDevBusIndex, cpqScsiPhyDrvTimeouts=cpqScsiPhyDrvTimeouts, cpqScsiPhyDrvSpinupTime=cpqScsiPhyDrvSpinupTime, cpqScsiPhyDrvRotationalSpeed=cpqScsiPhyDrvRotationalSpeed, cpqScsiTargetFWRev=cpqScsiTargetFWRev, cpqScsiOsCommonModuleName=cpqScsiOsCommonModuleName, cpqScsi4PhyDrvStatusChange=cpqScsi4PhyDrvStatusChange, cpqTapePhyDrvType=cpqTapePhyDrvType, cpqTapeCountersCntlrIndex=cpqTapeCountersCntlrIndex, cpqScsiTargetParityErrs=cpqScsiTargetParityErrs, cpqTapeComponent=cpqTapeComponent, cpqScsiCntlrBusIndex=cpqScsiCntlrBusIndex, cpqScsiNw3xVolLogDrvIndex=cpqScsiNw3xVolLogDrvIndex, cpqScsiCdDrvCntlrIndex=cpqScsiCdDrvCntlrIndex, cpqSbDevMsgRejects=cpqSbDevMsgRejects, cpqCdLibraryTable=cpqCdLibraryTable, cpqScsiNw3xSimVers=cpqScsiNw3xSimVers, cpqScsiCntlrFWVers=cpqScsiCntlrFWVers, cpqScsiCntlrModelExtended=cpqScsiCntlrModelExtended, cpqScsiLogDrvBusIndex=cpqScsiLogDrvBusIndex, cpqCdLibraryScsiIdIndex=cpqCdLibraryScsiIdIndex, cpqScsiCntlrHardResets=cpqScsiCntlrHardResets, cpqScsiNw3xCntlrInfoTable=cpqScsiNw3xCntlrInfoTable, cpqScsiCdDrvTable=cpqScsiCdDrvTable, cpqScsiTargetTypeExtended=cpqScsiTargetTypeExtended, cpqScsiCntlrBusWidth=cpqScsiCntlrBusWidth, cpqScsiLogDrvSize=cpqScsiLogDrvSize, cpqCdLibraryFwRev=cpqCdLibraryFwRev, cpqScsiNw3xDriverVers=cpqScsiNw3xDriverVers, cpqCdLibraryVendor=cpqCdLibraryVendor, cpqScsiCntlrSerialNum=cpqScsiCntlrSerialNum, cpqScsiLogDrvStatus=cpqScsiLogDrvStatus, cpqScsi5PhyDrvStatusChange=cpqScsi5PhyDrvStatusChange, cpqTapeLibrarySerialNumber=cpqTapeLibrarySerialNumber, cpqScsiNw3xSimDesc=cpqScsiNw3xSimDesc, cpqScsiLogDrvCondition=cpqScsiLogDrvCondition, cpqScsi2LogDrvStatusChange=cpqScsi2LogDrvStatusChange, cpqTape4PhyDrvStatusChange=cpqTape4PhyDrvStatusChange, cpqTapeLibraryStatusChange=cpqTapeLibraryStatusChange, cpqTapeLibraryRedundancy=cpqTapeLibraryRedundancy, cpqScsiMibRevMinor=cpqScsiMibRevMinor, cpqScsiNw3xStatBusIndex=cpqScsiNw3xStatBusIndex, cpqTapeLibrary=cpqTapeLibrary, cpqScsiPhyDrvServiceHours=cpqScsiPhyDrvServiceHours, cpqSbMibRevMinor=cpqSbMibRevMinor, cpqTape3LibraryFailed=cpqTape3LibraryFailed, cpqScsiMibCondition=cpqScsiMibCondition, cpqScsiNw3xCorrWrites=cpqScsiNw3xCorrWrites, cpqScsi2PhyDrvStatusChange=cpqScsi2PhyDrvStatusChange, cpqTapeCountersTotalBytes=cpqTapeCountersTotalBytes, cpqTapeLibraryHotSwap=cpqTapeLibraryHotSwap, cpqScsiCntlrIndex=cpqScsiCntlrIndex, cpqSbDevPhaseErrs=cpqSbDevPhaseErrs, cpqCdLibrarySerialNumber=cpqCdLibrarySerialNumber, cpqScsiPhyDrvLocation=cpqScsiPhyDrvLocation, cpqScsiTargetType=cpqScsiTargetType, cpqScsiCd=cpqScsiCd, cpqTape3LibraryDoorOpen=cpqTape3LibraryDoorOpen, cpqTapeCounters=cpqTapeCounters, cpqScsiNw3xBusIndex=cpqScsiNw3xBusIndex, cpqScsiNw3xTotalWrites=cpqScsiNw3xTotalWrites, cpqScsiPhyDrvRecvWriteErrs=cpqScsiPhyDrvRecvWriteErrs, cpqTapePhyDrvLoaderSerialNum=cpqTapePhyDrvLoaderSerialNum, cpqTape3PhyDrvCleaningRequired=cpqTape3PhyDrvCleaningRequired, cpqScsiNw3xStatLogDrvIndex=cpqScsiNw3xStatLogDrvIndex, cpqCdLibraryEntry=cpqCdLibraryEntry, cpqScsiPhyDrvSeekErrs=cpqScsiPhyDrvSeekErrs, cpqScsiVolMapTable=cpqScsiVolMapTable, cpqScsiLogDrvStatEntry=cpqScsiLogDrvStatEntry, cpqScsiLogDrvTable=cpqScsiLogDrvTable, cpqScsiPhyDrvUsedReallocs=cpqScsiPhyDrvUsedReallocs, cpqTapePhyDrvCntlrIndex=cpqTapePhyDrvCntlrIndex, cpqScsiPhyDrvHotPlug=cpqScsiPhyDrvHotPlug, cpqScsiPhyDrvOsName=cpqScsiPhyDrvOsName, cpqScsiVolMapEntry=cpqScsiVolMapEntry, cpqScsiLogDrvPhyDrvIDs=cpqScsiLogDrvPhyDrvIDs, cpqScsiTargetSelectTimeouts=cpqScsiTargetSelectTimeouts, cpqScsiLogDrvStripeSize=cpqScsiLogDrvStripeSize, cpqScsiMibRev=cpqScsiMibRev, cpqTapeCountersTotalErrors=cpqTapeCountersTotalErrors, cpqScsiCdLibraryStatusChange=cpqScsiCdLibraryStatusChange, cpqScsiPhyDrv=cpqScsiPhyDrv, cpqScsiTargetScsiIdIndex=cpqScsiTargetScsiIdIndex, cpqTapePhyDrvPlacement=cpqTapePhyDrvPlacement, cpqScsiCntlrStatusChange=cpqScsiCntlrStatusChange, cpqTapeLibraryTapeList=cpqTapeLibraryTapeList, cpqTapeLibraryState=cpqTapeLibraryState, cpqScsiOsCommonModuleDate=cpqScsiOsCommonModuleDate, cpqTapePhyDrvStatus=cpqTapePhyDrvStatus, cpqTapeLibraryEntry=cpqTapeLibraryEntry, cpqTapeLibraryName=cpqTapeLibraryName, cpqScsiTrapTime=cpqScsiTrapTime, cpqScsiTargetTable=cpqScsiTargetTable, cpqScsiNw3xDriverPollType=cpqScsiNw3xDriverPollType, cpqScsiNw3xCntlrIndex=cpqScsiNw3xCntlrIndex, cpqTapePhyDrvLunIndex=cpqTapePhyDrvLunIndex, cpqScsiLogDrvOsName=cpqScsiLogDrvOsName, cpqTapeLibraryScsiIdIndex=cpqTapeLibraryScsiIdIndex, cpqScsiTargetBusIndex=cpqScsiTargetBusIndex, cpqScsiCntlrModel=cpqScsiCntlrModel, cpqScsiCntlrCondition=cpqScsiCntlrCondition, cpqTape3LibraryDoorClosed=cpqTape3LibraryDoorClosed, cpqScsiNw3xHbaDesc=cpqScsiNw3xHbaDesc, cpqScsiPhyDrvSerialNum=cpqScsiPhyDrvSerialNum, cpqCdLibraryDriveList=cpqCdLibraryDriveList, cpqSbDevModel=cpqSbDevModel, cpqScsiInterface=cpqScsiInterface, cpqTapePhyDrvScsiIdIndex=cpqTapePhyDrvScsiIdIndex, cpqTapeCountersTable=cpqTapeCountersTable, cpqScsiTargetNegPeriod=cpqScsiTargetNegPeriod, cpqScsiNw3xFatalWrites=cpqScsiNw3xFatalWrites, cpqTapePhyDrvCleanTapeRepl=cpqTapePhyDrvCleanTapeRepl, cpqTapePhyDrvCleanTapeCount=cpqTapePhyDrvCleanTapeCount, cpqScsiOsCommon=cpqScsiOsCommon, cpqScsiTarget=cpqScsiTarget)
mibBuilder.exportSymbols("CPQSCSI-MIB", cpqCdLibraryLunIndex=cpqCdLibraryLunIndex, cpqTapePhyDrvStatusChange=cpqTapePhyDrvStatusChange, cpqScsiTrapType=cpqScsiTrapType, cpqScsiPhyDrvLowWriteSectors=cpqScsiPhyDrvLowWriteSectors, cpqScsiTargetNegSpeed=cpqScsiTargetNegSpeed, cpqSbDevScsiIdIndex=cpqSbDevScsiIdIndex, cpqTapeLibraryFwRev=cpqTapeLibraryFwRev, cpqTape3LibraryOkay=cpqTape3LibraryOkay, cpqSbDevSelectTimeouts=cpqSbDevSelectTimeouts, cpqScsiLogDrvFaultTol=cpqScsiLogDrvFaultTol, cpqSbDevFWRev=cpqSbDevFWRev, cpqSbDevice=cpqSbDevice, cpqTapePhyDrvTable=cpqTapePhyDrvTable, cpqScsiLogDrvStatusChange=cpqScsiLogDrvStatusChange, cpqScsiOsCommonModulePurpose=cpqScsiOsCommonModulePurpose, cpqSbDevNegPeriod=cpqSbDevNegPeriod, cpqScsi=cpqScsi, cpqScsiPhyDrvPostErrs=cpqScsiPhyDrvPostErrs, cpqScsiCdDrvBusIndex=cpqScsiCdDrvBusIndex, cpqSbDevParityErrs=cpqSbDevParityErrs, cpqTapeLibraryCondition=cpqTapeLibraryCondition, cpqSbScsiBus=cpqSbScsiBus, cpqSbDevCntlrIndex=cpqSbDevCntlrIndex, cpqCdLibraryFwSubtype=cpqCdLibraryFwSubtype)
