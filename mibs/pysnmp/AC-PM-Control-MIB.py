#
# PySNMP MIB module AC-PM-Control-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-Control-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:54:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
acProducts, acPerformance, acGeneric, acBoardMibs, audioCodes, acRegistrations = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acProducts", "acPerformance", "acGeneric", "acBoardMibs", "audioCodes", "acRegistrations")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, enterprises, IpAddress, Unsigned32, Gauge32, ModuleIdentity, iso, Counter64, ObjectIdentity, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "IpAddress", "Unsigned32", "Gauge32", "ModuleIdentity", "iso", "Counter64", "ObjectIdentity", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "NotificationType")
DateAndTime, TextualConvention, TAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TAddress", "DisplayString")
acPMControl = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 8))
if mibBuilder.loadTexts: acPMControl.setLastUpdated('200908250451Z')
if mibBuilder.loadTexts: acPMControl.setOrganization('AudioCodes Ltd')
acPMControlConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1))
acPMControlConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMControlConfigurationPeriodLength.setStatus('current')
acPMControlConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMControlConfigurationResetTotalCounters.setStatus('current')
acPMCPConnectionAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32))
acPMCPConnectionAttributesLifetimeHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesLifetimeHighThreshold.setStatus('current')
acPMCPConnectionAttributesLifetimeLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesLifetimeLowThreshold.setStatus('current')
acPMCPConnectionAttributesStateHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesStateHighThreshold.setStatus('current')
acPMCPConnectionAttributesStateLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesStateLowThreshold.setStatus('current')
acPMCPConnectionAttributesCommandCounterHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandCounterHighThreshold.setStatus('current')
acPMCPConnectionAttributesCommandCounterLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandCounterLowThreshold.setStatus('current')
acPMCPConnectionAttributesRetransmissionCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesRetransmissionCountHighThreshold.setStatus('current')
acPMCPConnectionAttributesRetransmissionCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesRetransmissionCountLowThreshold.setStatus('current')
acPMCPConnectionAttributesActiveContextCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesActiveContextCountHighThreshold.setStatus('current')
acPMCPConnectionAttributesActiveContextCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesActiveContextCountLowThreshold.setStatus('current')
acPMCPConnectionAttributesCommandSuccessCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandSuccessCountHighThreshold.setStatus('obsolete')
acPMCPConnectionAttributesCommandSuccessCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandSuccessCountLowThreshold.setStatus('obsolete')
acPMCPConnectionAttributesCommandFailureCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandFailureCountHighThreshold.setStatus('obsolete')
acPMCPConnectionAttributesCommandFailureCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandFailureCountLowThreshold.setStatus('obsolete')
acPMCPConnectionAttributesCommandProcessTimeHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandProcessTimeHighThreshold.setStatus('current')
acPMCPConnectionAttributesCommandProcessTimeLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandProcessTimeLowThreshold.setStatus('current')
acPMCPConnectionAttributesTransactionProcessTimerHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesTransactionProcessTimerHighThreshold.setStatus('current')
acPMCPConnectionAttributesTransactionProcessTimerLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesTransactionProcessTimerLowThreshold.setStatus('current')
acPMMegacoAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33))
acPMMegacoAttributesServiceChangeCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesServiceChangeCountHighThreshold.setStatus('current')
acPMMegacoAttributesServiceChangeCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesServiceChangeCountLowThreshold.setStatus('current')
acPMMegacoAttributesCmdSuccessCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdSuccessCountHighThreshold.setStatus('obsolete')
acPMMegacoAttributesCmdSuccessCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdSuccessCountLowThreshold.setStatus('obsolete')
acPMMegacoAttributesCmdFailureCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdFailureCountHighThreshold.setStatus('obsolete')
acPMMegacoAttributesCmdFailureCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdFailureCountLowThreshold.setStatus('obsolete')
acPMSipAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 34))
acPMSipAttributesCallDurationHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 34, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMSipAttributesCallDurationHighThreshold.setStatus('current')
acPMSipAttributesCallDurationLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 34, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMSipAttributesCallDurationLowThreshold.setStatus('current')
acPMControlData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2))
acPMControlDataAcPMControlTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMControlDataAcPMControlTimeFromStartOfInterval.setStatus('current')
acPMCPConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31))
acPMCPConnectionLifetimeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1), )
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTable.setStatus('current')
acPMCPConnectionLifetimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPConnectionLifetimeInterval"))
if mibBuilder.loadTexts: acPMCPConnectionLifetimeEntry.setStatus('current')
acPMCPConnectionLifetimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: acPMCPConnectionLifetimeInterval.setStatus('current')
acPMCPConnectionLifetimeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeVal.setStatus('current')
acPMCPConnectionLifetimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeAverage.setStatus('current')
acPMCPConnectionLifetimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeMax.setStatus('current')
acPMCPConnectionLifetimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeMin.setStatus('current')
acPMCPConnectionLifetimeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeVolume.setStatus('current')
acPMCPConnectionLifetimeTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeBelowLowThreshold.setStatus('current')
acPMCPConnectionLifetimeTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeBetweenThresholds.setStatus('current')
acPMCPConnectionLifetimeTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeAboveHighThreshold.setStatus('current')
acPMCPConnectionLifetimeFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeFullDayAverage.setStatus('current')
acPMCPConnectionLifetimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTotal.setStatus('current')
acPMCPConnectionStateTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2), )
if mibBuilder.loadTexts: acPMCPConnectionStateTable.setStatus('current')
acPMCPConnectionStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPConnectionStateInterval"))
if mibBuilder.loadTexts: acPMCPConnectionStateEntry.setStatus('current')
acPMCPConnectionStateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPConnectionStateInterval.setStatus('current')
acPMCPConnectionStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionStateChanges.setStatus('current')
acPMCPConnectionStateActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionStateActiveTime.setStatus('current')
acPMCPCommandCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3), )
if mibBuilder.loadTexts: acPMCPCommandCounterTable.setStatus('current')
acPMCPCommandCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCommandCounterDirection"), (0, "AC-PM-Control-MIB", "acPMCPCommandCounterInterval"))
if mibBuilder.loadTexts: acPMCPCommandCounterEntry.setStatus('current')
acPMCPCommandCounterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tx", 0), ("rx", 1))))
if mibBuilder.loadTexts: acPMCPCommandCounterDirection.setStatus('current')
acPMCPCommandCounterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCommandCounterInterval.setStatus('current')
acPMCPCommandCounterVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandCounterVal.setStatus('current')
acPMCPCommandCounterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandCounterTotal.setStatus('current')
acPMCPRetransmissionCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4), )
if mibBuilder.loadTexts: acPMCPRetransmissionCountTable.setStatus('current')
acPMCPRetransmissionCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPRetransmissionCountDirection"), (0, "AC-PM-Control-MIB", "acPMCPRetransmissionCountInterval"))
if mibBuilder.loadTexts: acPMCPRetransmissionCountEntry.setStatus('current')
acPMCPRetransmissionCountDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tx", 0), ("rx", 1))))
if mibBuilder.loadTexts: acPMCPRetransmissionCountDirection.setStatus('current')
acPMCPRetransmissionCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPRetransmissionCountInterval.setStatus('current')
acPMCPRetransmissionCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPRetransmissionCountVal.setStatus('current')
acPMCPRetransmissionCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPRetransmissionCountTotal.setStatus('current')
acPMActiveContextCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5), )
if mibBuilder.loadTexts: acPMActiveContextCountTable.setStatus('current')
acPMActiveContextCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMActiveContextCountInterval"))
if mibBuilder.loadTexts: acPMActiveContextCountEntry.setStatus('current')
acPMActiveContextCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMActiveContextCountInterval.setStatus('current')
acPMActiveContextCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountVal.setStatus('current')
acPMActiveContextCountAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountAverage.setStatus('current')
acPMActiveContextCountMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountMax.setStatus('current')
acPMActiveContextCountMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountMin.setStatus('current')
acPMActiveContextCountVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountVolume.setStatus('current')
acPMActiveContextCountTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTimeBelowLowThreshold.setStatus('current')
acPMActiveContextCountTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTimeBetweenThresholds.setStatus('current')
acPMActiveContextCountTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTimeAboveHighThreshold.setStatus('current')
acPMActiveContextCountFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountFullDayAverage.setStatus('current')
acPMActiveContextCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTotal.setStatus('current')
acPMCPCommandSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6), )
if mibBuilder.loadTexts: acPMCPCommandSuccessCountTable.setStatus('obsolete')
acPMCPCommandSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCommandSuccessCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCommandSuccessCountInterval"))
if mibBuilder.loadTexts: acPMCPCommandSuccessCountEntry.setStatus('obsolete')
acPMCPCommandSuccessCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCommandSuccessCountCommandType.setStatus('obsolete')
acPMCPCommandSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCommandSuccessCountInterval.setStatus('obsolete')
acPMCPCommandSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandSuccessCountVal.setStatus('obsolete')
acPMCPCommandSuccessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandSuccessCountTotal.setStatus('obsolete')
acPMCPCommandFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7), )
if mibBuilder.loadTexts: acPMCPCommandFailureCountTable.setStatus('obsolete')
acPMCPCommandFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCommandFailureCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCommandFailureCountInterval"))
if mibBuilder.loadTexts: acPMCPCommandFailureCountEntry.setStatus('obsolete')
acPMCPCommandFailureCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCommandFailureCountCommandType.setStatus('obsolete')
acPMCPCommandFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCommandFailureCountInterval.setStatus('obsolete')
acPMCPCommandFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandFailureCountVal.setStatus('obsolete')
acPMCPCommandFailureCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandFailureCountTotal.setStatus('current')
acPMcpCmdProcessTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8), )
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTable.setStatus('current')
acPMcpCmdProcessTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMcpCmdProcessTimeInterval"))
if mibBuilder.loadTexts: acPMcpCmdProcessTimeEntry.setStatus('current')
acPMcpCmdProcessTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMcpCmdProcessTimeInterval.setStatus('current')
acPMcpCmdProcessTimeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeVal.setStatus('current')
acPMcpCmdProcessTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeAverage.setStatus('current')
acPMcpCmdProcessTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeMax.setStatus('current')
acPMcpCmdProcessTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeMin.setStatus('current')
acPMcpCmdProcessTimeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeVolume.setStatus('current')
acPMcpCmdProcessTimeTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeBelowLowThreshold.setStatus('current')
acPMcpCmdProcessTimeTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeBetweenThresholds.setStatus('current')
acPMcpCmdProcessTimeTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeAboveHighThreshold.setStatus('current')
acPMcpCmdProcessTimeFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeFullDayAverage.setStatus('current')
acPMcpCmdProcessTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTotal.setStatus('current')
acPMcpTransactionProcessTimerTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9), )
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTable.setStatus('current')
acPMcpTransactionProcessTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMcpTransactionProcessTimerInterval"))
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerEntry.setStatus('current')
acPMcpTransactionProcessTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerInterval.setStatus('current')
acPMcpTransactionProcessTimerVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerVal.setStatus('current')
acPMcpTransactionProcessTimerAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerAverage.setStatus('current')
acPMcpTransactionProcessTimerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerMax.setStatus('current')
acPMcpTransactionProcessTimerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerMin.setStatus('current')
acPMcpTransactionProcessTimerVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerVolume.setStatus('current')
acPMcpTransactionProcessTimerTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeBelowLowThreshold.setStatus('current')
acPMcpTransactionProcessTimerTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeBetweenThresholds.setStatus('current')
acPMcpTransactionProcessTimerTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeAboveHighThreshold.setStatus('current')
acPMcpTransactionProcessTimerFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerFullDayAverage.setStatus('current')
acPMcpTransactionProcessTimerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTotal.setStatus('current')
acPMCPCallAttemptsPerSecTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10), )
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecTable.setStatus('current')
acPMCPCallAttemptsPerSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCallAttemptsPerSecInterval"))
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecEntry.setStatus('current')
acPMCPCallAttemptsPerSecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecInterval.setStatus('current')
acPMCPCallAttemptsPerSecVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecVal.setStatus('current')
acPMCPCallAttemptsPerSecAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecAverage.setStatus('current')
acPMCPCallAttemptsPerSecMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecMax.setStatus('current')
acPMCPCallAttemptsPerSecMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecMin.setStatus('current')
acPMCPCallAttemptsPerSecVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecVolume.setStatus('current')
acPMMegaco = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41))
acPMMegacoServiceChangeCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1), )
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountTable.setStatus('current')
acPMMegacoServiceChangeCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoServiceChangeCountMethod"), (0, "AC-PM-Control-MIB", "acPMMegacoServiceChangeCountInterval"))
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountEntry.setStatus('current')
acPMMegacoServiceChangeCountMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("failOver", 0), ("forced", 1), ("graceful", 2), ("restart", 3), ("disconnected", 4), ("handoff", 5))))
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountMethod.setStatus('current')
acPMMegacoServiceChangeCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountInterval.setStatus('current')
acPMMegacoServiceChangeCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountVal.setStatus('current')
acPMCPCmdSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2), )
if mibBuilder.loadTexts: acPMCPCmdSuccessCountTable.setStatus('current')
acPMCPCmdSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCmdSuccessCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCmdSuccessCountInterval"))
if mibBuilder.loadTexts: acPMCPCmdSuccessCountEntry.setStatus('current')
acPMCPCmdSuccessCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCmdSuccessCountCommandType.setStatus('current')
acPMCPCmdSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCmdSuccessCountInterval.setStatus('current')
acPMCPCmdSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdSuccessCountVal.setStatus('current')
acPMCPCmdSuccessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdSuccessCountTotal.setStatus('current')
acPMCPCmdFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3), )
if mibBuilder.loadTexts: acPMCPCmdFailureCountTable.setStatus('current')
acPMCPCmdFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCmdFailureCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCmdFailureCountInterval"))
if mibBuilder.loadTexts: acPMCPCmdFailureCountEntry.setStatus('current')
acPMCPCmdFailureCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCmdFailureCountCommandType.setStatus('current')
acPMCPCmdFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCmdFailureCountInterval.setStatus('current')
acPMCPCmdFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdFailureCountVal.setStatus('current')
acPMCPCmdFailureCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdFailureCountTotal.setStatus('current')
acPMcpUMTSHandOverCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4), )
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountTable.setStatus('current')
acPMcpUMTSHandOverCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMcpUMTSHandOverCountInterval"))
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountEntry.setStatus('current')
acPMcpUMTSHandOverCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountInterval.setStatus('current')
acPMcpUMTSHandOverCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountVal.setStatus('current')
acPMMegacoAddFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5), )
if mibBuilder.loadTexts: acPMMegacoAddFailureCountTable.setStatus('current')
acPMMegacoAddFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoAddFailureCountInterval"))
if mibBuilder.loadTexts: acPMMegacoAddFailureCountEntry.setStatus('current')
acPMMegacoAddFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoAddFailureCountInterval.setStatus('current')
acPMMegacoAddFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoAddFailureCountVal.setStatus('current')
acPMMegacoModifyFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6), )
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountTable.setStatus('current')
acPMMegacoModifyFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoModifyFailureCountInterval"))
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountEntry.setStatus('current')
acPMMegacoModifyFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountInterval.setStatus('current')
acPMMegacoModifyFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountVal.setStatus('current')
acPMMegacoSuccessfulAddWithLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7), )
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackTable.setStatus('current')
acPMMegacoSuccessfulAddWithLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoSuccessfulAddWithLoopbackInterval"))
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackEntry.setStatus('current')
acPMMegacoSuccessfulAddWithLoopbackInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackInterval.setStatus('current')
acPMMegacoSuccessfulAddWithLoopbackVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackVal.setStatus('current')
acPMMegacoFailedAddWithLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8), )
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackTable.setStatus('current')
acPMMegacoFailedAddWithLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoFailedAddWithLoopbackInterval"))
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackEntry.setStatus('current')
acPMMegacoFailedAddWithLoopbackInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackInterval.setStatus('current')
acPMMegacoFailedAddWithLoopbackVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackVal.setStatus('current')
acPMMegacoOutgoingCommandSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9), )
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountTable.setStatus('current')
acPMMegacoOutgoingCommandSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoOutgoingCommandSuccessCountInterval"))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountEntry.setStatus('current')
acPMMegacoOutgoingCommandSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountInterval.setStatus('current')
acPMMegacoOutgoingCommandSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountVal.setStatus('current')
acPMMegacoOutgoingCommandFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10), )
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountTable.setStatus('current')
acPMMegacoOutgoingCommandFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoOutgoingCommandFailureCountInterval"))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountEntry.setStatus('current')
acPMMegacoOutgoingCommandFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountInterval.setStatus('current')
acPMMegacoOutgoingCommandFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountVal.setStatus('current')
acPMMGCP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51))
acPMMGCPRsipReasonCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1), )
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountTable.setStatus('current')
acPMMGCPRsipReasonCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPRsipReasonCountReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPRsipReasonCountInterval"))
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountEntry.setStatus('current')
acPMMGCPRsipReasonCountReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("restart", 0), ("forced", 1), ("disconnected", 2), ("keepAlive", 3), ("graceful", 4), ("cancelGraceful", 5), ("resetBoard", 6), ("nonVoice", 7))))
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountReasonCode.setStatus('current')
acPMMGCPRsipReasonCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountInterval.setStatus('current')
acPMMGCPRsipReasonCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountVal.setStatus('current')
acPMMGCPGeneratedDLCXTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2), )
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXTable.setStatus('current')
acPMMGCPGeneratedDLCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPGeneratedDLCXInterval"))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXEntry.setStatus('current')
acPMMGCPGeneratedDLCXInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXInterval.setStatus('current')
acPMMGCPGeneratedDLCXVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXVal.setStatus('current')
acPMMGCPCommandSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3), )
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountTable.setStatus('current')
acPMMGCPCommandSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPCommandSuccessCountCommandType"), (0, "AC-PM-Control-MIB", "acPMMGCPCommandSuccessCountInterval"))
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountEntry.setStatus('current')
acPMMGCPCommandSuccessCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountCommandType.setStatus('current')
acPMMGCPCommandSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountInterval.setStatus('current')
acPMMGCPCommandSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountVal.setStatus('current')
acPMMGCPCommandSuccessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountTotal.setStatus('current')
acPMMGCPCommandFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4), )
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountTable.setStatus('current')
acPMMGCPCommandFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPCommandFailureCountCommandType"), (0, "AC-PM-Control-MIB", "acPMMGCPCommandFailureCountInterval"))
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountEntry.setStatus('current')
acPMMGCPCommandFailureCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountCommandType.setStatus('current')
acPMMGCPCommandFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountInterval.setStatus('current')
acPMMGCPCommandFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountVal.setStatus('current')
acPMMGCPCommandFailureCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountTotal.setStatus('current')
acPMMGCPLoopbackCRCXTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5), )
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXTable.setStatus('current')
acPMMGCPLoopbackCRCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPLoopbackCRCXInterval"))
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXEntry.setStatus('current')
acPMMGCPLoopbackCRCXInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXInterval.setStatus('current')
acPMMGCPLoopbackCRCXVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXVal.setStatus('current')
acPMMGCPFailedLoopbackCRCXTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6), )
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXTable.setStatus('current')
acPMMGCPFailedLoopbackCRCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedLoopbackCRCXInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXEntry.setStatus('current')
acPMMGCPFailedLoopbackCRCXInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXInterval.setStatus('current')
acPMMGCPFailedLoopbackCRCXVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXVal.setStatus('current')
acPMMGCPGeneratedNTFYTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7), )
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYTable.setStatus('current')
acPMMGCPGeneratedNTFYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPGeneratedNTFYInterval"))
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYEntry.setStatus('current')
acPMMGCPGeneratedNTFYInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYInterval.setStatus('current')
acPMMGCPGeneratedNTFYVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYVal.setStatus('current')
acPMMGCPFailedNTFYResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8), )
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesTable.setStatus('current')
acPMMGCPFailedNTFYResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedNTFYResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesEntry.setStatus('current')
acPMMGCPFailedNTFYResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesInterval.setStatus('current')
acPMMGCPFailedNTFYResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesVal.setStatus('current')
acPMMGCPFailedRSIPResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9), )
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesTable.setStatus('current')
acPMMGCPFailedRSIPResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedRSIPResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesEntry.setStatus('current')
acPMMGCPFailedRSIPResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesInterval.setStatus('current')
acPMMGCPFailedRSIPResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesVal.setStatus('current')
acPMMGCPFailedCRCXResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10), )
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesTable.setStatus('current')
acPMMGCPFailedCRCXResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedCRCXResponsesReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPFailedCRCXResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesEntry.setStatus('current')
acPMMGCPFailedCRCXResponsesReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51))).clone(namedValues=NamedValues(("reasoncode-400", 0), ("reasoncode-401", 1), ("reasoncode-402", 2), ("reasoncode-403", 3), ("reasoncode-404", 4), ("reasoncode-405", 5), ("reasoncode-406", 6), ("reasoncode-407", 7), ("reasoncode-409", 8), ("reasoncode-410", 9), ("reasoncode-500", 10), ("reasoncode-501", 11), ("reasoncode-502", 12), ("reasoncode-503", 13), ("reasoncode-504", 14), ("reasoncode-505", 15), ("reasoncode-506", 16), ("reasoncode-507", 17), ("reasoncode-508", 18), ("reasoncode-509", 19), ("reasoncode-510", 20), ("reasoncode-511", 21), ("reasoncode-512", 22), ("reasoncode-513", 23), ("reasoncode-514", 24), ("reasoncode-515", 25), ("reasoncode-516", 26), ("reasoncode-517", 27), ("reasoncode-518", 28), ("reasoncode-519", 29), ("reasoncode-520", 30), ("reasoncode-521", 31), ("reasoncode-522", 32), ("reasoncode-523", 33), ("reasoncode-524", 34), ("reasoncode-525", 35), ("reasoncode-526", 36), ("reasoncode-527", 37), ("reasoncode-528", 38), ("reasoncode-529", 39), ("reasoncode-530", 40), ("reasoncode-531", 41), ("reasoncode-532", 42), ("reasoncode-533", 43), ("reasoncode-534", 44), ("reasoncode-535", 45), ("reasoncode-536", 46), ("reasoncode-537", 47), ("reasoncode-538", 48), ("reasoncode-539", 49), ("reasoncode-540", 50), ("reasoncode-541", 51))))
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesReasonCode.setStatus('current')
acPMMGCPFailedCRCXResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesInterval.setStatus('current')
acPMMGCPFailedCRCXResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesVal.setStatus('current')
acPMMGCPFailedMDCXResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11), )
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesTable.setStatus('current')
acPMMGCPFailedMDCXResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedMDCXResponsesReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPFailedMDCXResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesEntry.setStatus('current')
acPMMGCPFailedMDCXResponsesReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51))).clone(namedValues=NamedValues(("reasoncode-400", 0), ("reasoncode-401", 1), ("reasoncode-402", 2), ("reasoncode-403", 3), ("reasoncode-404", 4), ("reasoncode-405", 5), ("reasoncode-406", 6), ("reasoncode-407", 7), ("reasoncode-409", 8), ("reasoncode-410", 9), ("reasoncode-500", 10), ("reasoncode-501", 11), ("reasoncode-502", 12), ("reasoncode-503", 13), ("reasoncode-504", 14), ("reasoncode-505", 15), ("reasoncode-506", 16), ("reasoncode-507", 17), ("reasoncode-508", 18), ("reasoncode-509", 19), ("reasoncode-510", 20), ("reasoncode-511", 21), ("reasoncode-512", 22), ("reasoncode-513", 23), ("reasoncode-514", 24), ("reasoncode-515", 25), ("reasoncode-516", 26), ("reasoncode-517", 27), ("reasoncode-518", 28), ("reasoncode-519", 29), ("reasoncode-520", 30), ("reasoncode-521", 31), ("reasoncode-522", 32), ("reasoncode-523", 33), ("reasoncode-524", 34), ("reasoncode-525", 35), ("reasoncode-526", 36), ("reasoncode-527", 37), ("reasoncode-528", 38), ("reasoncode-529", 39), ("reasoncode-530", 40), ("reasoncode-531", 41), ("reasoncode-532", 42), ("reasoncode-533", 43), ("reasoncode-534", 44), ("reasoncode-535", 45), ("reasoncode-536", 46), ("reasoncode-537", 47), ("reasoncode-538", 48), ("reasoncode-539", 49), ("reasoncode-540", 50), ("reasoncode-541", 51))))
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesReasonCode.setStatus('current')
acPMMGCPFailedMDCXResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesInterval.setStatus('current')
acPMMGCPFailedMDCXResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesVal.setStatus('current')
acPMMGCPGeneratedDLCXPerReasonCodeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12), )
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeTable.setStatus('current')
acPMMGCPGeneratedDLCXPerReasonCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPGeneratedDLCXPerReasonCodeReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPGeneratedDLCXPerReasonCodeInterval"))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeEntry.setStatus('current')
acPMMGCPGeneratedDLCXPerReasonCodeReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("eNDPOINT-MALFUNCTIONING-900", 0), ("eNDPOINT-TAKEN-OUT-OF-SERVICE-901", 1), ("lOSS-OF-LOWER-LAYER-CONNECTIVITY-902", 2), ("qOS-RESOURCE-RESERVATION-WAS-LOST-903", 3), ("mANUAL-INTERVENTION-904", 4), ("fACILITY-FAILURE-905", 5))))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeReasonCode.setStatus('current')
acPMMGCPGeneratedDLCXPerReasonCodeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeInterval.setStatus('current')
acPMMGCPGeneratedDLCXPerReasonCodeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeVal.setStatus('current')
acPMSIP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52))
acPMSIPAttemptedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1), )
if mibBuilder.loadTexts: acPMSIPAttemptedCallsTable.setStatus('current')
acPMSIPAttemptedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPAttemptedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPAttemptedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPAttemptedCallsEntry.setStatus('current')
acPMSIPAttemptedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPAttemptedCallsDirection.setStatus('current')
acPMSIPAttemptedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPAttemptedCallsInterval.setStatus('current')
acPMSIPAttemptedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPAttemptedCallsVal.setStatus('current')
acPMSIPCallDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2), )
if mibBuilder.loadTexts: acPMSIPCallDurationTable.setStatus('current')
acPMSIPCallDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPCallDurationDirection"), (0, "AC-PM-Control-MIB", "acPMSIPCallDurationInterval"))
if mibBuilder.loadTexts: acPMSIPCallDurationEntry.setStatus('current')
acPMSIPCallDurationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPCallDurationDirection.setStatus('current')
acPMSIPCallDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPCallDurationInterval.setStatus('current')
acPMSIPCallDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationVal.setStatus('current')
acPMSIPCallDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationAverage.setStatus('current')
acPMSIPCallDurationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationMax.setStatus('current')
acPMSIPCallDurationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationMin.setStatus('current')
acPMSIPCallDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationVolume.setStatus('current')
acPMSIPCallDurationTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTimeBelowLowThreshold.setStatus('current')
acPMSIPCallDurationTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTimeBetweenThresholds.setStatus('current')
acPMSIPCallDurationTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTimeAboveHighThreshold.setStatus('current')
acPMSIPCallDurationFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationFullDayAverage.setStatus('current')
acPMSIPCallDurationTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTotal.setStatus('current')
acPMSIPNoMatchCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3), )
if mibBuilder.loadTexts: acPMSIPNoMatchCallsTable.setStatus('current')
acPMSIPNoMatchCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoMatchCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoMatchCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoMatchCallsEntry.setStatus('current')
acPMSIPNoMatchCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoMatchCallsDirection.setStatus('current')
acPMSIPNoMatchCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoMatchCallsInterval.setStatus('current')
acPMSIPNoMatchCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoMatchCallsVal.setStatus('current')
acPMSIPBusyCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4), )
if mibBuilder.loadTexts: acPMSIPBusyCallsTable.setStatus('current')
acPMSIPBusyCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPBusyCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPBusyCallsInterval"))
if mibBuilder.loadTexts: acPMSIPBusyCallsEntry.setStatus('current')
acPMSIPBusyCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPBusyCallsDirection.setStatus('current')
acPMSIPBusyCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPBusyCallsInterval.setStatus('current')
acPMSIPBusyCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPBusyCallsVal.setStatus('current')
acPMSIPNoAnswerCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5), )
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsTable.setStatus('current')
acPMSIPNoAnswerCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoAnswerCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoAnswerCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsEntry.setStatus('current')
acPMSIPNoAnswerCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsDirection.setStatus('current')
acPMSIPNoAnswerCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsInterval.setStatus('current')
acPMSIPNoAnswerCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsVal.setStatus('current')
acPMSIPNoRouteCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6), )
if mibBuilder.loadTexts: acPMSIPNoRouteCallsTable.setStatus('current')
acPMSIPNoRouteCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoRouteCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoRouteCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoRouteCallsEntry.setStatus('current')
acPMSIPNoRouteCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoRouteCallsDirection.setStatus('current')
acPMSIPNoRouteCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoRouteCallsInterval.setStatus('current')
acPMSIPNoRouteCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoRouteCallsVal.setStatus('current')
acPMSIPFailCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7), )
if mibBuilder.loadTexts: acPMSIPFailCallsTable.setStatus('current')
acPMSIPFailCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPFailCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPFailCallsInterval"))
if mibBuilder.loadTexts: acPMSIPFailCallsEntry.setStatus('current')
acPMSIPFailCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPFailCallsDirection.setStatus('current')
acPMSIPFailCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPFailCallsInterval.setStatus('current')
acPMSIPFailCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPFailCallsVal.setStatus('current')
acPMSIPEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8), )
if mibBuilder.loadTexts: acPMSIPEstablishedCallsTable.setStatus('current')
acPMSIPEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPEstablishedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPEstablishedCallsEntry.setStatus('current')
acPMSIPEstablishedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPEstablishedCallsDirection.setStatus('current')
acPMSIPEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPEstablishedCallsInterval.setStatus('current')
acPMSIPEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPEstablishedCallsVal.setStatus('current')
acPMSIPFaxAttemptedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9), )
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsTable.setStatus('current')
acPMSIPFaxAttemptedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPFaxAttemptedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPFaxAttemptedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsEntry.setStatus('current')
acPMSIPFaxAttemptedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsDirection.setStatus('current')
acPMSIPFaxAttemptedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsInterval.setStatus('current')
acPMSIPFaxAttemptedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsVal.setStatus('current')
acPMSIPFaxSuccessCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10), )
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsTable.setStatus('current')
acPMSIPFaxSuccessCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPFaxSuccessCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPFaxSuccessCallsInterval"))
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsEntry.setStatus('current')
acPMSIPFaxSuccessCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsDirection.setStatus('current')
acPMSIPFaxSuccessCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsInterval.setStatus('current')
acPMSIPFaxSuccessCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsVal.setStatus('current')
acPMSIPForwardedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11), )
if mibBuilder.loadTexts: acPMSIPForwardedCallsTable.setStatus('current')
acPMSIPForwardedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPForwardedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPForwardedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPForwardedCallsEntry.setStatus('current')
acPMSIPForwardedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPForwardedCallsDirection.setStatus('current')
acPMSIPForwardedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPForwardedCallsInterval.setStatus('current')
acPMSIPForwardedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPForwardedCallsVal.setStatus('current')
acPMSIPNoResourcesCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12), )
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsTable.setStatus('current')
acPMSIPNoResourcesCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoResourcesCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoResourcesCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsEntry.setStatus('current')
acPMSIPNoResourcesCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsDirection.setStatus('current')
acPMSIPNoResourcesCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsInterval.setStatus('current')
acPMSIPNoResourcesCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsVal.setStatus('current')
acPMSIPTel2IPTrunkEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13), )
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsTable.setStatus('current')
acPMSIPTel2IPTrunkEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkEstablishedCallsTrunkNum"), (0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsEntry.setStatus('current')
acPMSIPTel2IPTrunkEstablishedCallsTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsTrunkNum.setStatus('current')
acPMSIPTel2IPTrunkEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsInterval.setStatus('current')
acPMSIPTel2IPTrunkEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsVal.setStatus('current')
acPMSIPIP2TelTrunkEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14), )
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsTable.setStatus('current')
acPMSIPIP2TelTrunkEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkEstablishedCallsTrunkNum"), (0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsEntry.setStatus('current')
acPMSIPIP2TelTrunkEstablishedCallsTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsTrunkNum.setStatus('current')
acPMSIPIP2TelTrunkEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsInterval.setStatus('current')
acPMSIPIP2TelTrunkEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsVal.setStatus('current')
acPMSIPTel2IPTrunkGroupEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15), )
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsTable.setStatus('current')
acPMSIPTel2IPTrunkGroupEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum"), (0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkGroupEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsEntry.setStatus('current')
acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum.setStatus('current')
acPMSIPTel2IPTrunkGroupEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsInterval.setStatus('current')
acPMSIPTel2IPTrunkGroupEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsVal.setStatus('current')
acPMSIPIP2TelTrunkGroupEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16), )
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsTable.setStatus('current')
acPMSIPIP2TelTrunkGroupEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum"), (0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkGroupEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsEntry.setStatus('current')
acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum.setStatus('current')
acPMSIPIP2TelTrunkGroupEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsInterval.setStatus('current')
acPMSIPIP2TelTrunkGroupEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsVal.setStatus('current')
mibBuilder.exportSymbols("AC-PM-Control-MIB", acPMMegacoAddFailureCountInterval=acPMMegacoAddFailureCountInterval, acPMSIPCallDurationInterval=acPMSIPCallDurationInterval, acPMMegacoFailedAddWithLoopbackTable=acPMMegacoFailedAddWithLoopbackTable, acPMCPCallAttemptsPerSecAverage=acPMCPCallAttemptsPerSecAverage, acPMCPCommandSuccessCountInterval=acPMCPCommandSuccessCountInterval, acPMSIPTel2IPTrunkEstablishedCallsInterval=acPMSIPTel2IPTrunkEstablishedCallsInterval, acPMMGCPFailedMDCXResponsesReasonCode=acPMMGCPFailedMDCXResponsesReasonCode, acPMCPCommandSuccessCountVal=acPMCPCommandSuccessCountVal, acPMSIPNoAnswerCallsEntry=acPMSIPNoAnswerCallsEntry, acPMMGCPRsipReasonCountTable=acPMMGCPRsipReasonCountTable, acPMMegacoServiceChangeCountEntry=acPMMegacoServiceChangeCountEntry, acPMMegacoSuccessfulAddWithLoopbackVal=acPMMegacoSuccessfulAddWithLoopbackVal, acPMSIPNoRouteCallsInterval=acPMSIPNoRouteCallsInterval, acPMMegacoAttributesCmdSuccessCountHighThreshold=acPMMegacoAttributesCmdSuccessCountHighThreshold, acPMCPCommandSuccessCountTotal=acPMCPCommandSuccessCountTotal, acPMMegacoOutgoingCommandFailureCountTable=acPMMegacoOutgoingCommandFailureCountTable, acPMMGCPFailedMDCXResponsesVal=acPMMGCPFailedMDCXResponsesVal, acPMCPConnectionAttributesLifetimeLowThreshold=acPMCPConnectionAttributesLifetimeLowThreshold, acPMSIPEstablishedCallsInterval=acPMSIPEstablishedCallsInterval, acPMCPConnectionLifetimeTimeAboveHighThreshold=acPMCPConnectionLifetimeTimeAboveHighThreshold, acPMSIPFailCallsVal=acPMSIPFailCallsVal, acPMMGCPGeneratedDLCXEntry=acPMMGCPGeneratedDLCXEntry, acPMSIPNoAnswerCallsVal=acPMSIPNoAnswerCallsVal, acPMSIPAttemptedCallsInterval=acPMSIPAttemptedCallsInterval, acPMMGCPCommandSuccessCountTotal=acPMMGCPCommandSuccessCountTotal, acPMSIPFaxAttemptedCallsTable=acPMSIPFaxAttemptedCallsTable, acPMCPConnectionAttributesStateHighThreshold=acPMCPConnectionAttributesStateHighThreshold, acPMSipAttributesCallDurationHighThreshold=acPMSipAttributesCallDurationHighThreshold, acPMActiveContextCountFullDayAverage=acPMActiveContextCountFullDayAverage, acPMSIPForwardedCallsTable=acPMSIPForwardedCallsTable, acPMSIPFaxAttemptedCallsInterval=acPMSIPFaxAttemptedCallsInterval, acPMCPCommandCounterDirection=acPMCPCommandCounterDirection, acPMCPConnectionAttributesCommandSuccessCountLowThreshold=acPMCPConnectionAttributesCommandSuccessCountLowThreshold, acPMMGCPGeneratedNTFYInterval=acPMMGCPGeneratedNTFYInterval, acPMSIPNoResourcesCallsEntry=acPMSIPNoResourcesCallsEntry, acPMMegacoAddFailureCountTable=acPMMegacoAddFailureCountTable, acPMSIPFaxAttemptedCallsVal=acPMSIPFaxAttemptedCallsVal, acPMSIPBusyCallsVal=acPMSIPBusyCallsVal, acPMCPConnectionAttributesTransactionProcessTimerHighThreshold=acPMCPConnectionAttributesTransactionProcessTimerHighThreshold, acPMSIPNoAnswerCallsInterval=acPMSIPNoAnswerCallsInterval, acPMcpCmdProcessTimeTimeBelowLowThreshold=acPMcpCmdProcessTimeTimeBelowLowThreshold, acPMCPRetransmissionCountEntry=acPMCPRetransmissionCountEntry, acPMCPConnectionLifetimeInterval=acPMCPConnectionLifetimeInterval, acPMCPConnectionStateTable=acPMCPConnectionStateTable, acPMCPConnectionLifetimeTotal=acPMCPConnectionLifetimeTotal, acPMSIPBusyCallsEntry=acPMSIPBusyCallsEntry, acPMSIPBusyCallsInterval=acPMSIPBusyCallsInterval, acPMCPCmdSuccessCountEntry=acPMCPCmdSuccessCountEntry, acPMSIPNoMatchCallsInterval=acPMSIPNoMatchCallsInterval, acPMcpTransactionProcessTimerVolume=acPMcpTransactionProcessTimerVolume, acPMControl=acPMControl, acPMControlConfigurationPeriodLength=acPMControlConfigurationPeriodLength, acPMCPConnectionAttributesRetransmissionCountLowThreshold=acPMCPConnectionAttributesRetransmissionCountLowThreshold, acPMcpCmdProcessTimeMin=acPMcpCmdProcessTimeMin, acPMActiveContextCountTotal=acPMActiveContextCountTotal, acPMcpTransactionProcessTimerEntry=acPMcpTransactionProcessTimerEntry, acPMMegacoAttributesCmdFailureCountHighThreshold=acPMMegacoAttributesCmdFailureCountHighThreshold, acPMMGCPFailedMDCXResponsesEntry=acPMMGCPFailedMDCXResponsesEntry, acPMCPConnectionAttributesActiveContextCountHighThreshold=acPMCPConnectionAttributesActiveContextCountHighThreshold, acPMMegacoAttributesServiceChangeCountLowThreshold=acPMMegacoAttributesServiceChangeCountLowThreshold, acPMMGCPFailedMDCXResponsesInterval=acPMMGCPFailedMDCXResponsesInterval, acPMCPCommandFailureCountCommandType=acPMCPCommandFailureCountCommandType, acPMActiveContextCountMin=acPMActiveContextCountMin, acPMMegacoAttributesCmdSuccessCountLowThreshold=acPMMegacoAttributesCmdSuccessCountLowThreshold, acPMSIPTel2IPTrunkEstablishedCallsEntry=acPMSIPTel2IPTrunkEstablishedCallsEntry, acPMMGCPCommandSuccessCountInterval=acPMMGCPCommandSuccessCountInterval, acPMMGCP=acPMMGCP, acPMCPConnectionLifetimeMax=acPMCPConnectionLifetimeMax, acPMMGCPLoopbackCRCXEntry=acPMMGCPLoopbackCRCXEntry, acPMCPConnectionAttributesLifetimeHighThreshold=acPMCPConnectionAttributesLifetimeHighThreshold, acPMCPConnectionLifetimeTimeBetweenThresholds=acPMCPConnectionLifetimeTimeBetweenThresholds, acPMSIPIP2TelTrunkGroupEstablishedCallsInterval=acPMSIPIP2TelTrunkGroupEstablishedCallsInterval, acPMSIPCallDurationTimeBelowLowThreshold=acPMSIPCallDurationTimeBelowLowThreshold, acPMCPConnectionAttributesRetransmissionCountHighThreshold=acPMCPConnectionAttributesRetransmissionCountHighThreshold, acPMMGCPRsipReasonCountVal=acPMMGCPRsipReasonCountVal, acPMcpTransactionProcessTimerInterval=acPMcpTransactionProcessTimerInterval, acPMMGCPCommandSuccessCountVal=acPMMGCPCommandSuccessCountVal, acPMMegaco=acPMMegaco, acPMMGCPCommandSuccessCountTable=acPMMGCPCommandSuccessCountTable, acPMMGCPGeneratedDLCXPerReasonCodeReasonCode=acPMMGCPGeneratedDLCXPerReasonCodeReasonCode, acPMSIPBusyCallsTable=acPMSIPBusyCallsTable, acPMMegacoSuccessfulAddWithLoopbackEntry=acPMMegacoSuccessfulAddWithLoopbackEntry, acPMSIPAttemptedCallsVal=acPMSIPAttemptedCallsVal, acPMcpCmdProcessTimeTimeAboveHighThreshold=acPMcpCmdProcessTimeTimeAboveHighThreshold, acPMMGCPGeneratedDLCXPerReasonCodeTable=acPMMGCPGeneratedDLCXPerReasonCodeTable, acPMMGCPFailedCRCXResponsesInterval=acPMMGCPFailedCRCXResponsesInterval, acPMCPConnectionStateInterval=acPMCPConnectionStateInterval, acPMSIPCallDurationVolume=acPMSIPCallDurationVolume, acPMCPCmdFailureCountVal=acPMCPCmdFailureCountVal, acPMCPConnectionLifetimeVolume=acPMCPConnectionLifetimeVolume, acPMcpTransactionProcessTimerMin=acPMcpTransactionProcessTimerMin, acPMSIPIP2TelTrunkEstablishedCallsTrunkNum=acPMSIPIP2TelTrunkEstablishedCallsTrunkNum, acPMCPConnectionAttributesCommandFailureCountLowThreshold=acPMCPConnectionAttributesCommandFailureCountLowThreshold, acPMMGCPFailedNTFYResponsesTable=acPMMGCPFailedNTFYResponsesTable, acPMcpTransactionProcessTimerAverage=acPMcpTransactionProcessTimerAverage, acPMMGCPRsipReasonCountReasonCode=acPMMGCPRsipReasonCountReasonCode, acPMCPCmdSuccessCountTable=acPMCPCmdSuccessCountTable, acPMMGCPLoopbackCRCXInterval=acPMMGCPLoopbackCRCXInterval, acPMCPConnectionLifetimeEntry=acPMCPConnectionLifetimeEntry, acPMCPCallAttemptsPerSecVolume=acPMCPCallAttemptsPerSecVolume, acPMcpCmdProcessTimeTotal=acPMcpCmdProcessTimeTotal, acPMCPCommandSuccessCountCommandType=acPMCPCommandSuccessCountCommandType, acPMMGCPFailedMDCXResponsesTable=acPMMGCPFailedMDCXResponsesTable, acPMCPConnectionAttributesCommandCounterHighThreshold=acPMCPConnectionAttributesCommandCounterHighThreshold, acPMMegacoModifyFailureCountEntry=acPMMegacoModifyFailureCountEntry, acPMMGCPLoopbackCRCXTable=acPMMGCPLoopbackCRCXTable, acPMSIPFailCallsEntry=acPMSIPFailCallsEntry, acPMCPConnectionStateActiveTime=acPMCPConnectionStateActiveTime, acPMCPConnectionAttributesCommandFailureCountHighThreshold=acPMCPConnectionAttributesCommandFailureCountHighThreshold, acPMCPCmdFailureCountTotal=acPMCPCmdFailureCountTotal, acPMcpTransactionProcessTimerFullDayAverage=acPMcpTransactionProcessTimerFullDayAverage, acPMCPRetransmissionCountInterval=acPMCPRetransmissionCountInterval, acPMMGCPCommandFailureCountInterval=acPMMGCPCommandFailureCountInterval, acPMSIPForwardedCallsEntry=acPMSIPForwardedCallsEntry, acPMMegacoOutgoingCommandFailureCountEntry=acPMMegacoOutgoingCommandFailureCountEntry, acPMCPCallAttemptsPerSecInterval=acPMCPCallAttemptsPerSecInterval, acPMSIPFaxSuccessCallsDirection=acPMSIPFaxSuccessCallsDirection, acPMSIPIP2TelTrunkEstablishedCallsTable=acPMSIPIP2TelTrunkEstablishedCallsTable, acPMMGCPCommandFailureCountTotal=acPMMGCPCommandFailureCountTotal, acPMCPCmdFailureCountTable=acPMCPCmdFailureCountTable, acPMcpCmdProcessTimeVal=acPMcpCmdProcessTimeVal, acPMMGCPFailedNTFYResponsesInterval=acPMMGCPFailedNTFYResponsesInterval, acPMCPConnectionLifetimeTimeBelowLowThreshold=acPMCPConnectionLifetimeTimeBelowLowThreshold, acPMSIPTel2IPTrunkGroupEstablishedCallsInterval=acPMSIPTel2IPTrunkGroupEstablishedCallsInterval, acPMCPConnectionAttributesCommandSuccessCountHighThreshold=acPMCPConnectionAttributesCommandSuccessCountHighThreshold, acPMMGCPGeneratedDLCXPerReasonCodeEntry=acPMMGCPGeneratedDLCXPerReasonCodeEntry, acPMMGCPGeneratedDLCXTable=acPMMGCPGeneratedDLCXTable, acPMMGCPCommandSuccessCountCommandType=acPMMGCPCommandSuccessCountCommandType, acPMCPConnectionStateEntry=acPMCPConnectionStateEntry, acPMCPRetransmissionCountTable=acPMCPRetransmissionCountTable, acPMMegacoSuccessfulAddWithLoopbackInterval=acPMMegacoSuccessfulAddWithLoopbackInterval, acPMSIPAttemptedCallsTable=acPMSIPAttemptedCallsTable, acPMMGCPFailedRSIPResponsesEntry=acPMMGCPFailedRSIPResponsesEntry, acPMSIPNoAnswerCallsDirection=acPMSIPNoAnswerCallsDirection, acPMMegacoOutgoingCommandSuccessCountInterval=acPMMegacoOutgoingCommandSuccessCountInterval, acPMSIPFailCallsTable=acPMSIPFailCallsTable, acPMCPCommandFailureCountEntry=acPMCPCommandFailureCountEntry, acPMMGCPFailedCRCXResponsesVal=acPMMGCPFailedCRCXResponsesVal, acPMCPConnectionLifetimeFullDayAverage=acPMCPConnectionLifetimeFullDayAverage, acPMcpCmdProcessTimeVolume=acPMcpCmdProcessTimeVolume, acPMMegacoModifyFailureCountTable=acPMMegacoModifyFailureCountTable, acPMMGCPCommandFailureCountTable=acPMMGCPCommandFailureCountTable, acPMCPCmdSuccessCountTotal=acPMCPCmdSuccessCountTotal, acPMCPCommandSuccessCountEntry=acPMCPCommandSuccessCountEntry, acPMcpUMTSHandOverCountTable=acPMcpUMTSHandOverCountTable, acPMSipAttributes=acPMSipAttributes, acPMcpCmdProcessTimeTimeBetweenThresholds=acPMcpCmdProcessTimeTimeBetweenThresholds, acPMSIPAttemptedCallsEntry=acPMSIPAttemptedCallsEntry, acPMMGCPCommandFailureCountCommandType=acPMMGCPCommandFailureCountCommandType, acPMControlConfiguration=acPMControlConfiguration, acPMMegacoAddFailureCountVal=acPMMegacoAddFailureCountVal, acPMCPCallAttemptsPerSecMax=acPMCPCallAttemptsPerSecMax, acPMMGCPRsipReasonCountInterval=acPMMGCPRsipReasonCountInterval, acPMSIPFaxSuccessCallsTable=acPMSIPFaxSuccessCallsTable, acPMSIPForwardedCallsVal=acPMSIPForwardedCallsVal, acPMSIPIP2TelTrunkGroupEstablishedCallsVal=acPMSIPIP2TelTrunkGroupEstablishedCallsVal, acPMSIPCallDurationTotal=acPMSIPCallDurationTotal, acPMcpUMTSHandOverCountInterval=acPMcpUMTSHandOverCountInterval, acPMCPRetransmissionCountDirection=acPMCPRetransmissionCountDirection, acPMCPConnectionAttributesCommandProcessTimeHighThreshold=acPMCPConnectionAttributesCommandProcessTimeHighThreshold, acPMActiveContextCountEntry=acPMActiveContextCountEntry, acPMcpCmdProcessTimeAverage=acPMcpCmdProcessTimeAverage, acPMcpUMTSHandOverCountEntry=acPMcpUMTSHandOverCountEntry, acPMMGCPGeneratedDLCXPerReasonCodeVal=acPMMGCPGeneratedDLCXPerReasonCodeVal, acPMMGCPFailedNTFYResponsesEntry=acPMMGCPFailedNTFYResponsesEntry, acPMSIPIP2TelTrunkEstablishedCallsVal=acPMSIPIP2TelTrunkEstablishedCallsVal, acPMMegacoServiceChangeCountTable=acPMMegacoServiceChangeCountTable, acPMCPCallAttemptsPerSecEntry=acPMCPCallAttemptsPerSecEntry, PYSNMP_MODULE_ID=acPMControl, acPMCPCallAttemptsPerSecMin=acPMCPCallAttemptsPerSecMin, acPMcpCmdProcessTimeFullDayAverage=acPMcpCmdProcessTimeFullDayAverage, acPMSIPCallDurationTimeAboveHighThreshold=acPMSIPCallDurationTimeAboveHighThreshold, acPMSipAttributesCallDurationLowThreshold=acPMSipAttributesCallDurationLowThreshold, acPMCPRetransmissionCountVal=acPMCPRetransmissionCountVal, acPMMGCPGeneratedNTFYVal=acPMMGCPGeneratedNTFYVal, acPMActiveContextCountMax=acPMActiveContextCountMax, acPMControlDataAcPMControlTimeFromStartOfInterval=acPMControlDataAcPMControlTimeFromStartOfInterval, acPMSIPTel2IPTrunkGroupEstablishedCallsVal=acPMSIPTel2IPTrunkGroupEstablishedCallsVal, acPMSIPAttemptedCallsDirection=acPMSIPAttemptedCallsDirection, acPMCPCallAttemptsPerSecTable=acPMCPCallAttemptsPerSecTable, acPMCPConnectionAttributesStateLowThreshold=acPMCPConnectionAttributesStateLowThreshold, acPMCPCommandFailureCountVal=acPMCPCommandFailureCountVal, acPMMGCPFailedLoopbackCRCXInterval=acPMMGCPFailedLoopbackCRCXInterval, acPMCPConnectionLifetimeVal=acPMCPConnectionLifetimeVal, acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum=acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum, acPMSIPEstablishedCallsTable=acPMSIPEstablishedCallsTable, acPMActiveContextCountTimeBetweenThresholds=acPMActiveContextCountTimeBetweenThresholds, acPMCPConnectionAttributesTransactionProcessTimerLowThreshold=acPMCPConnectionAttributesTransactionProcessTimerLowThreshold, acPMMegacoOutgoingCommandSuccessCountVal=acPMMegacoOutgoingCommandSuccessCountVal, acPMMGCPGeneratedNTFYTable=acPMMGCPGeneratedNTFYTable, acPMCPCommandCounterVal=acPMCPCommandCounterVal, acPMSIPTel2IPTrunkGroupEstablishedCallsEntry=acPMSIPTel2IPTrunkGroupEstablishedCallsEntry, acPMSIPEstablishedCallsEntry=acPMSIPEstablishedCallsEntry, acPMMegacoOutgoingCommandFailureCountInterval=acPMMegacoOutgoingCommandFailureCountInterval, acPMCPCommandCounterInterval=acPMCPCommandCounterInterval, acPMSIPIP2TelTrunkEstablishedCallsInterval=acPMSIPIP2TelTrunkEstablishedCallsInterval, acPMSIPNoRouteCallsTable=acPMSIPNoRouteCallsTable, acPMCPCallAttemptsPerSecVal=acPMCPCallAttemptsPerSecVal, acPMActiveContextCountTable=acPMActiveContextCountTable, acPMSIPNoResourcesCallsTable=acPMSIPNoResourcesCallsTable, acPMSIPIP2TelTrunkGroupEstablishedCallsTable=acPMSIPIP2TelTrunkGroupEstablishedCallsTable, acPMMGCPCommandSuccessCountEntry=acPMMGCPCommandSuccessCountEntry, acPMCPConnectionAttributesActiveContextCountLowThreshold=acPMCPConnectionAttributesActiveContextCountLowThreshold, acPMCPRetransmissionCountTotal=acPMCPRetransmissionCountTotal, acPMActiveContextCountAverage=acPMActiveContextCountAverage, acPMCPConnectionLifetimeTable=acPMCPConnectionLifetimeTable, acPMSIPNoResourcesCallsInterval=acPMSIPNoResourcesCallsInterval, acPMSIPNoMatchCallsDirection=acPMSIPNoMatchCallsDirection, acPMMegacoFailedAddWithLoopbackVal=acPMMegacoFailedAddWithLoopbackVal, acPMSIPCallDurationVal=acPMSIPCallDurationVal, acPMCPCommandCounterTotal=acPMCPCommandCounterTotal, acPMCPCmdFailureCountInterval=acPMCPCmdFailureCountInterval, acPMSIPIP2TelTrunkEstablishedCallsEntry=acPMSIPIP2TelTrunkEstablishedCallsEntry, acPMMGCPGeneratedDLCXVal=acPMMGCPGeneratedDLCXVal, acPMSIPEstablishedCallsDirection=acPMSIPEstablishedCallsDirection, acPMActiveContextCountTimeAboveHighThreshold=acPMActiveContextCountTimeAboveHighThreshold, acPMSIPCallDurationMin=acPMSIPCallDurationMin, acPMSIPTel2IPTrunkEstablishedCallsVal=acPMSIPTel2IPTrunkEstablishedCallsVal, acPMMegacoServiceChangeCountInterval=acPMMegacoServiceChangeCountInterval, acPMCPCmdSuccessCountInterval=acPMCPCmdSuccessCountInterval, acPMActiveContextCountInterval=acPMActiveContextCountInterval, acPMMGCPCommandFailureCountVal=acPMMGCPCommandFailureCountVal, acPMCPCommandFailureCountTable=acPMCPCommandFailureCountTable, acPMSIPTel2IPTrunkEstablishedCallsTrunkNum=acPMSIPTel2IPTrunkEstablishedCallsTrunkNum, acPMMGCPFailedCRCXResponsesTable=acPMMGCPFailedCRCXResponsesTable, acPMSIPFailCallsInterval=acPMSIPFailCallsInterval, acPMcpCmdProcessTimeTable=acPMcpCmdProcessTimeTable, acPMCPConnectionAttributesCommandProcessTimeLowThreshold=acPMCPConnectionAttributesCommandProcessTimeLowThreshold, acPMSIP=acPMSIP, acPMCPConnectionLifetimeMin=acPMCPConnectionLifetimeMin, acPMMegacoAttributesCmdFailureCountLowThreshold=acPMMegacoAttributesCmdFailureCountLowThreshold, acPMSIPForwardedCallsInterval=acPMSIPForwardedCallsInterval, acPMcpCmdProcessTimeMax=acPMcpCmdProcessTimeMax, acPMActiveContextCountTimeBelowLowThreshold=acPMActiveContextCountTimeBelowLowThreshold, acPMMegacoAddFailureCountEntry=acPMMegacoAddFailureCountEntry, acPMSIPBusyCallsDirection=acPMSIPBusyCallsDirection, acPMMGCPFailedRSIPResponsesTable=acPMMGCPFailedRSIPResponsesTable, acPMCPCmdFailureCountCommandType=acPMCPCmdFailureCountCommandType, acPMMegacoModifyFailureCountVal=acPMMegacoModifyFailureCountVal, acPMMGCPRsipReasonCountEntry=acPMMGCPRsipReasonCountEntry, acPMSIPTel2IPTrunkGroupEstablishedCallsTable=acPMSIPTel2IPTrunkGroupEstablishedCallsTable, acPMMGCPFailedRSIPResponsesInterval=acPMMGCPFailedRSIPResponsesInterval, acPMSIPCallDurationEntry=acPMSIPCallDurationEntry, acPMMegacoServiceChangeCountVal=acPMMegacoServiceChangeCountVal, acPMMGCPGeneratedDLCXPerReasonCodeInterval=acPMMGCPGeneratedDLCXPerReasonCodeInterval, acPMCPCommandFailureCountTotal=acPMCPCommandFailureCountTotal, acPMSIPCallDurationMax=acPMSIPCallDurationMax, acPMcpTransactionProcessTimerTimeBelowLowThreshold=acPMcpTransactionProcessTimerTimeBelowLowThreshold, acPMCPCmdSuccessCountVal=acPMCPCmdSuccessCountVal, acPMMegacoAttributesServiceChangeCountHighThreshold=acPMMegacoAttributesServiceChangeCountHighThreshold, acPMMegacoOutgoingCommandSuccessCountEntry=acPMMegacoOutgoingCommandSuccessCountEntry, acPMSIPEstablishedCallsVal=acPMSIPEstablishedCallsVal, acPMMegacoFailedAddWithLoopbackInterval=acPMMegacoFailedAddWithLoopbackInterval, acPMMGCPFailedLoopbackCRCXVal=acPMMGCPFailedLoopbackCRCXVal)
mibBuilder.exportSymbols("AC-PM-Control-MIB", acPMSIPNoRouteCallsDirection=acPMSIPNoRouteCallsDirection, acPMCPCommandCounterEntry=acPMCPCommandCounterEntry, acPMCPCommandFailureCountInterval=acPMCPCommandFailureCountInterval, acPMSIPCallDurationFullDayAverage=acPMSIPCallDurationFullDayAverage, acPMCPCommandCounterTable=acPMCPCommandCounterTable, acPMSIPNoRouteCallsVal=acPMSIPNoRouteCallsVal, acPMSIPNoMatchCallsTable=acPMSIPNoMatchCallsTable, acPMControlConfigurationResetTotalCounters=acPMControlConfigurationResetTotalCounters, acPMCPConnectionStateChanges=acPMCPConnectionStateChanges, acPMCPCommandSuccessCountTable=acPMCPCommandSuccessCountTable, acPMMegacoFailedAddWithLoopbackEntry=acPMMegacoFailedAddWithLoopbackEntry, acPMSIPNoResourcesCallsDirection=acPMSIPNoResourcesCallsDirection, acPMMegacoSuccessfulAddWithLoopbackTable=acPMMegacoSuccessfulAddWithLoopbackTable, acPMMGCPFailedLoopbackCRCXTable=acPMMGCPFailedLoopbackCRCXTable, acPMSIPTel2IPTrunkEstablishedCallsTable=acPMSIPTel2IPTrunkEstablishedCallsTable, acPMSIPCallDurationAverage=acPMSIPCallDurationAverage, acPMSIPFaxSuccessCallsVal=acPMSIPFaxSuccessCallsVal, acPMSIPForwardedCallsDirection=acPMSIPForwardedCallsDirection, acPMMGCPFailedRSIPResponsesVal=acPMMGCPFailedRSIPResponsesVal, acPMcpTransactionProcessTimerTable=acPMcpTransactionProcessTimerTable, acPMMegacoModifyFailureCountInterval=acPMMegacoModifyFailureCountInterval, acPMSIPFaxSuccessCallsEntry=acPMSIPFaxSuccessCallsEntry, acPMCPCmdSuccessCountCommandType=acPMCPCmdSuccessCountCommandType, acPMMGCPFailedCRCXResponsesReasonCode=acPMMGCPFailedCRCXResponsesReasonCode, acPMMGCPGeneratedDLCXInterval=acPMMGCPGeneratedDLCXInterval, acPMcpTransactionProcessTimerMax=acPMcpTransactionProcessTimerMax, acPMCPConnectionLifetimeAverage=acPMCPConnectionLifetimeAverage, acPMMGCPLoopbackCRCXVal=acPMMGCPLoopbackCRCXVal, acPMcpTransactionProcessTimerTimeAboveHighThreshold=acPMcpTransactionProcessTimerTimeAboveHighThreshold, acPMcpCmdProcessTimeEntry=acPMcpCmdProcessTimeEntry, acPMSIPFailCallsDirection=acPMSIPFailCallsDirection, acPMSIPCallDurationTimeBetweenThresholds=acPMSIPCallDurationTimeBetweenThresholds, acPMActiveContextCountVolume=acPMActiveContextCountVolume, acPMControlData=acPMControlData, acPMMGCPFailedNTFYResponsesVal=acPMMGCPFailedNTFYResponsesVal, acPMcpTransactionProcessTimerTimeBetweenThresholds=acPMcpTransactionProcessTimerTimeBetweenThresholds, acPMSIPIP2TelTrunkGroupEstablishedCallsEntry=acPMSIPIP2TelTrunkGroupEstablishedCallsEntry, acPMCPCmdFailureCountEntry=acPMCPCmdFailureCountEntry, acPMSIPFaxSuccessCallsInterval=acPMSIPFaxSuccessCallsInterval, acPMcpCmdProcessTimeInterval=acPMcpCmdProcessTimeInterval, acPMActiveContextCountVal=acPMActiveContextCountVal, acPMCPConnectionAttributesCommandCounterLowThreshold=acPMCPConnectionAttributesCommandCounterLowThreshold, acPMSIPNoMatchCallsVal=acPMSIPNoMatchCallsVal, acPMMegacoServiceChangeCountMethod=acPMMegacoServiceChangeCountMethod, acPMMGCPGeneratedNTFYEntry=acPMMGCPGeneratedNTFYEntry, acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum=acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum, acPMcpTransactionProcessTimerVal=acPMcpTransactionProcessTimerVal, acPMMegacoOutgoingCommandFailureCountVal=acPMMegacoOutgoingCommandFailureCountVal, acPMSIPCallDurationDirection=acPMSIPCallDurationDirection, acPMMegacoOutgoingCommandSuccessCountTable=acPMMegacoOutgoingCommandSuccessCountTable, acPMMGCPFailedLoopbackCRCXEntry=acPMMGCPFailedLoopbackCRCXEntry, acPMMGCPFailedCRCXResponsesEntry=acPMMGCPFailedCRCXResponsesEntry, acPMcpUMTSHandOverCountVal=acPMcpUMTSHandOverCountVal, acPMMGCPCommandFailureCountEntry=acPMMGCPCommandFailureCountEntry, acPMSIPCallDurationTable=acPMSIPCallDurationTable, acPMCPConnection=acPMCPConnection, acPMSIPNoMatchCallsEntry=acPMSIPNoMatchCallsEntry, acPMSIPNoRouteCallsEntry=acPMSIPNoRouteCallsEntry, acPMMegacoAttributes=acPMMegacoAttributes, acPMCPConnectionAttributes=acPMCPConnectionAttributes, acPMSIPNoResourcesCallsVal=acPMSIPNoResourcesCallsVal, acPMSIPFaxAttemptedCallsDirection=acPMSIPFaxAttemptedCallsDirection, acPMcpTransactionProcessTimerTotal=acPMcpTransactionProcessTimerTotal, acPMSIPFaxAttemptedCallsEntry=acPMSIPFaxAttemptedCallsEntry, acPMSIPNoAnswerCallsTable=acPMSIPNoAnswerCallsTable)
