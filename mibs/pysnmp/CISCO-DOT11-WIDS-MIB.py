#
# PySNMP MIB module CISCO-DOT11-WIDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-WIDS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:38:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, iso, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, NotificationType, Gauge32, TimeTicks, Integer32, ObjectIdentity, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "NotificationType", "Gauge32", "TimeTicks", "Integer32", "ObjectIdentity", "IpAddress", "MibIdentifier")
MacAddress, TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
ciscoDot11WidsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 456))
ciscoDot11WidsMIB.setRevisions(('2004-11-30 00:00',))
if mibBuilder.loadTexts: ciscoDot11WidsMIB.setLastUpdated('200411300000Z')
if mibBuilder.loadTexts: ciscoDot11WidsMIB.setOrganization('Cisco System Inc.')
ciscoDot11WidsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 0))
ciscoDot11WidsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 1))
ciscoDot11WidsAuthFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1))
ciscoDot11WidsProtectFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2))
ciscoDot11WidsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 2))
ciscoDot11WidsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 2, 1))
ciscoDot11WidsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 456, 2, 2))
cDot11WidsFloodDetectEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11WidsFloodDetectEnable.setStatus('current')
cDot11WidsEapolFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(3)).setUnits('attempts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11WidsEapolFloodThreshold.setStatus('current')
cDot11WidsEapolFloodInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11WidsEapolFloodInterval.setStatus('current')
cDot11WidsBlackListThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(3)).setUnits('attempts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11WidsBlackListThreshold.setStatus('current')
cDot11WidsBlackListDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11WidsBlackListDuration.setStatus('current')
cDot11WidsFloodMaxEntriesPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11WidsFloodMaxEntriesPerIntf.setStatus('current')
cDot11WidsEapolFloodTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7), )
if mibBuilder.loadTexts: cDot11WidsEapolFloodTable.setStatus('current')
cDot11WidsEapolFloodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodIndex"))
if mibBuilder.loadTexts: cDot11WidsEapolFloodEntry.setStatus('current')
cDot11WidsEapolFloodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cDot11WidsEapolFloodIndex.setStatus('current')
cDot11WidsEapolFloodClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsEapolFloodClientMac.setStatus('current')
cDot11WidsEapolFloodClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsEapolFloodClientCount.setStatus('current')
cDot11WidsEapolFloodStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsEapolFloodStartTime.setStatus('current')
cDot11WidsEapolFloodStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsEapolFloodStopTime.setStatus('current')
cDot11WidsEapolFloodTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsEapolFloodTotalCount.setStatus('current')
cDot11WidsBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 8), )
if mibBuilder.loadTexts: cDot11WidsBlackListTable.setStatus('current')
cDot11WidsBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-WIDS-MIB", "cDot11WidsBlackListClientMac"))
if mibBuilder.loadTexts: cDot11WidsBlackListEntry.setStatus('current')
cDot11WidsBlackListClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: cDot11WidsBlackListClientMac.setStatus('current')
cDot11WidsBlackListAttemptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsBlackListAttemptCount.setStatus('current')
cDot11WidsBlackListTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 1, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsBlackListTime.setStatus('current')
cDot11WidsProtectFailClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1), )
if mibBuilder.loadTexts: cDot11WidsProtectFailClientTable.setStatus('current')
cDot11WidsProtectFailClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-WIDS-MIB", "cDot11WidsSsid"), (0, "CISCO-DOT11-WIDS-MIB", "cDot11WidsClientMacAddress"))
if mibBuilder.loadTexts: cDot11WidsProtectFailClientEntry.setStatus('current')
cDot11WidsSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cDot11WidsSsid.setStatus('current')
cDot11WidsClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: cDot11WidsClientMacAddress.setStatus('current')
cDot11WidsSelPairWiseCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsSelPairWiseCipher.setStatus('current')
cDot11WidsTkipIcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsTkipIcvErrors.setStatus('current')
cDot11WidsTkipLocalMicFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsTkipLocalMicFailures.setStatus('current')
cDot11WidsTkipRemoteMicFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsTkipRemoteMicFailures.setStatus('current')
cDot11WidsCcmpReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsCcmpReplays.setStatus('current')
cDot11WidsCcmpDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsCcmpDecryptErrors.setStatus('current')
cDot11WidsTkipReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsTkipReplays.setStatus('current')
cDot11WidsWepReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsWepReplays.setStatus('current')
cDot11WidsWepIcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsWepIcvErrors.setStatus('current')
cDot11WidsCkipReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsCkipReplays.setStatus('current')
cDot11WidsCkipCmicErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 456, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11WidsCkipCmicErrors.setStatus('current')
ciscoDot11WidsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 456, 2, 1, 1)).setObjects(("CISCO-DOT11-WIDS-MIB", "ciscoDot11WidsAuthFailGroup"), ("CISCO-DOT11-WIDS-MIB", "ciscoDot11WidsProtectFailGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11WidsMIBCompliance = ciscoDot11WidsMIBCompliance.setStatus('current')
ciscoDot11WidsAuthFailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 456, 2, 2, 1)).setObjects(("CISCO-DOT11-WIDS-MIB", "cDot11WidsFloodDetectEnable"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodThreshold"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodInterval"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsBlackListThreshold"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsBlackListDuration"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsFloodMaxEntriesPerIntf"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodTotalCount"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodClientMac"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodClientCount"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodStartTime"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsEapolFloodStopTime"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsBlackListAttemptCount"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsBlackListTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11WidsAuthFailGroup = ciscoDot11WidsAuthFailGroup.setStatus('current')
ciscoDot11WidsProtectFailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 456, 2, 2, 2)).setObjects(("CISCO-DOT11-WIDS-MIB", "cDot11WidsSelPairWiseCipher"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsTkipIcvErrors"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsTkipLocalMicFailures"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsTkipRemoteMicFailures"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsCcmpReplays"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsCcmpDecryptErrors"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsTkipReplays"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsWepReplays"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsWepIcvErrors"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsCkipReplays"), ("CISCO-DOT11-WIDS-MIB", "cDot11WidsCkipCmicErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11WidsProtectFailGroup = ciscoDot11WidsProtectFailGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-DOT11-WIDS-MIB", cDot11WidsClientMacAddress=cDot11WidsClientMacAddress, ciscoDot11WidsMIBCompliances=ciscoDot11WidsMIBCompliances, cDot11WidsBlackListClientMac=cDot11WidsBlackListClientMac, ciscoDot11WidsMIBGroups=ciscoDot11WidsMIBGroups, ciscoDot11WidsAuthFailures=ciscoDot11WidsAuthFailures, cDot11WidsEapolFloodClientCount=cDot11WidsEapolFloodClientCount, cDot11WidsEapolFloodStartTime=cDot11WidsEapolFloodStartTime, cDot11WidsBlackListEntry=cDot11WidsBlackListEntry, cDot11WidsWepReplays=cDot11WidsWepReplays, ciscoDot11WidsMIBNotifs=ciscoDot11WidsMIBNotifs, ciscoDot11WidsProtectFailures=ciscoDot11WidsProtectFailures, cDot11WidsProtectFailClientTable=cDot11WidsProtectFailClientTable, cDot11WidsFloodMaxEntriesPerIntf=cDot11WidsFloodMaxEntriesPerIntf, ciscoDot11WidsMIBConform=ciscoDot11WidsMIBConform, cDot11WidsCkipReplays=cDot11WidsCkipReplays, cDot11WidsCcmpDecryptErrors=cDot11WidsCcmpDecryptErrors, cDot11WidsBlackListDuration=cDot11WidsBlackListDuration, ciscoDot11WidsMIBObjects=ciscoDot11WidsMIBObjects, cDot11WidsCcmpReplays=cDot11WidsCcmpReplays, cDot11WidsTkipLocalMicFailures=cDot11WidsTkipLocalMicFailures, ciscoDot11WidsMIBCompliance=ciscoDot11WidsMIBCompliance, cDot11WidsEapolFloodStopTime=cDot11WidsEapolFloodStopTime, cDot11WidsEapolFloodThreshold=cDot11WidsEapolFloodThreshold, cDot11WidsBlackListAttemptCount=cDot11WidsBlackListAttemptCount, cDot11WidsEapolFloodInterval=cDot11WidsEapolFloodInterval, cDot11WidsProtectFailClientEntry=cDot11WidsProtectFailClientEntry, cDot11WidsEapolFloodClientMac=cDot11WidsEapolFloodClientMac, cDot11WidsSsid=cDot11WidsSsid, PYSNMP_MODULE_ID=ciscoDot11WidsMIB, cDot11WidsBlackListThreshold=cDot11WidsBlackListThreshold, cDot11WidsSelPairWiseCipher=cDot11WidsSelPairWiseCipher, cDot11WidsBlackListTable=cDot11WidsBlackListTable, ciscoDot11WidsProtectFailGroup=ciscoDot11WidsProtectFailGroup, cDot11WidsEapolFloodTable=cDot11WidsEapolFloodTable, cDot11WidsTkipIcvErrors=cDot11WidsTkipIcvErrors, cDot11WidsFloodDetectEnable=cDot11WidsFloodDetectEnable, cDot11WidsEapolFloodTotalCount=cDot11WidsEapolFloodTotalCount, cDot11WidsWepIcvErrors=cDot11WidsWepIcvErrors, cDot11WidsTkipRemoteMicFailures=cDot11WidsTkipRemoteMicFailures, cDot11WidsBlackListTime=cDot11WidsBlackListTime, cDot11WidsTkipReplays=cDot11WidsTkipReplays, cDot11WidsCkipCmicErrors=cDot11WidsCkipCmicErrors, ciscoDot11WidsAuthFailGroup=ciscoDot11WidsAuthFailGroup, ciscoDot11WidsMIB=ciscoDot11WidsMIB, cDot11WidsEapolFloodEntry=cDot11WidsEapolFloodEntry, cDot11WidsEapolFloodIndex=cDot11WidsEapolFloodIndex)
