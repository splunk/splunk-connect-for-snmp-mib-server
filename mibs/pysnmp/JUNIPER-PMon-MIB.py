#
# PySNMP MIB module JUNIPER-PMon-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-PMon-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:49:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
jnxPMonNotifications, jnxMibs = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPMonNotifications", "jnxMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, Counter64, iso, IpAddress, ModuleIdentity, Unsigned32, TimeTicks, MibIdentifier, Integer32, NotificationType, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Counter64", "iso", "IpAddress", "ModuleIdentity", "Unsigned32", "TimeTicks", "MibIdentifier", "Integer32", "NotificationType", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
jnxPMon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 19))
jnxPMon.setRevisions(('2002-06-05 00:00', '2002-08-27 00:00', '2002-09-09 00:00',))
if mibBuilder.loadTexts: jnxPMon.setLastUpdated('200307182153Z')
if mibBuilder.loadTexts: jnxPMon.setOrganization('Juniper Networks, Inc.')
class JnxPMonOverloadId(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("pmonMemOverload", 0), ("pmonPpsOverload", 1), ("pmonBpsOverload", 2), ("pmonMemWarning", 3))

jnxPMonFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1), )
if mibBuilder.loadTexts: jnxPMonFlowTable.setStatus('current')
jnxPMonFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonFlowEntry.setStatus('current')
jnxPMonCurrentActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonCurrentActiveFlows.setStatus('current')
jnxPMonTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlows.setStatus('current')
jnxPMonTotalFlowsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsPackets.setStatus('current')
jnxPMonTenSecondAverageFlowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowPackets.setStatus('current')
jnxPMonTotalFlowsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsBytes.setStatus('current')
jnxPMonTenSecondAverageFlowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowBytes.setStatus('current')
jnxPMonTotalFlowsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsExpired.setStatus('current')
jnxPMonTotalFlowsAged = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsAged.setStatus('current')
jnxPMonTotalFlowsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsExported.setStatus('current')
jnxPMonTotalFlowsPacketsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsPacketsExported.setStatus('current')
jnxPMonErrorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2), )
if mibBuilder.loadTexts: jnxPMonErrorTable.setStatus('current')
jnxPMonErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonErrorEntry.setStatus('current')
jnxPMonFlowAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowAllocFailures.setStatus('current')
jnxPMonFlowFreeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowFreeFailures.setStatus('current')
jnxPMonFreeListFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFreeListFailures.setStatus('current')
jnxPMonNoMemDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNoMemDrops.setStatus('current')
jnxPMonNotIPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNotIPDrops.setStatus('current')
jnxPMonNotIPv4Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNotIPv4Drops.setStatus('current')
jnxPMonTooSmallDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTooSmallDrops.setStatus('current')
jnxPMonCurrentOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 8), JnxPMonOverloadId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonCurrentOverload.setStatus('current')
jnxPMonLastOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 9), JnxPMonOverloadId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverload.setStatus('current')
jnxPMonLastOverloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadTime.setStatus('current')
jnxPMonLastOverloadDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadDate.setStatus('current')
jnxPMonLastOverloadEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("set", 2), ("cleared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadEvent.setStatus('current')
jnxPMonMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3), )
if mibBuilder.loadTexts: jnxPMonMemoryTable.setStatus('current')
jnxPMonMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonMemoryEntry.setStatus('current')
jnxPMonFlowTotalAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowTotalAlloc.setStatus('current')
jnxPMonFlowTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowTotalFree.setStatus('current')
jnxPMonFlowMaxAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowMaxAlloc.setStatus('current')
jnxPMonAllocPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonAllocPerSecond.setStatus('current')
jnxPMonFreePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFreePerSecond.setStatus('current')
jnxPMonTotalMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalMemoryUsed.setStatus('current')
jnxPMonTotalMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalMemoryFree.setStatus('current')
jnxPMonNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0))
jnxPMonOverloadSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverload"), ("JUNIPER-PMon-MIB", "jnxPMonCurrentOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverloadDate"))
if mibBuilder.loadTexts: jnxPMonOverloadSet.setStatus('current')
jnxPMonOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverload"), ("JUNIPER-PMon-MIB", "jnxPMonCurrentOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverloadDate"))
if mibBuilder.loadTexts: jnxPMonOverloadCleared.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-PMon-MIB", jnxPMonFreeListFailures=jnxPMonFreeListFailures, jnxPMonTotalFlowsBytes=jnxPMonTotalFlowsBytes, jnxPMonErrorTable=jnxPMonErrorTable, jnxPMonNotificationPrefix=jnxPMonNotificationPrefix, jnxPMonLastOverload=jnxPMonLastOverload, jnxPMonMemoryEntry=jnxPMonMemoryEntry, JnxPMonOverloadId=JnxPMonOverloadId, jnxPMonNotIPDrops=jnxPMonNotIPDrops, jnxPMonAllocPerSecond=jnxPMonAllocPerSecond, jnxPMonTotalMemoryUsed=jnxPMonTotalMemoryUsed, jnxPMonErrorEntry=jnxPMonErrorEntry, jnxPMonNotIPv4Drops=jnxPMonNotIPv4Drops, jnxPMonTotalFlowsExpired=jnxPMonTotalFlowsExpired, jnxPMonCurrentOverload=jnxPMonCurrentOverload, jnxPMonFlowMaxAlloc=jnxPMonFlowMaxAlloc, jnxPMonFlowFreeFailures=jnxPMonFlowFreeFailures, jnxPMonNoMemDrops=jnxPMonNoMemDrops, jnxPMonTenSecondAverageFlowBytes=jnxPMonTenSecondAverageFlowBytes, jnxPMonTotalFlowsPackets=jnxPMonTotalFlowsPackets, jnxPMonTotalMemoryFree=jnxPMonTotalMemoryFree, jnxPMonLastOverloadDate=jnxPMonLastOverloadDate, jnxPMonOverloadSet=jnxPMonOverloadSet, jnxPMonMemoryTable=jnxPMonMemoryTable, jnxPMonCurrentActiveFlows=jnxPMonCurrentActiveFlows, jnxPMonOverloadCleared=jnxPMonOverloadCleared, jnxPMonLastOverloadTime=jnxPMonLastOverloadTime, jnxPMonFlowTotalAlloc=jnxPMonFlowTotalAlloc, jnxPMonFlowEntry=jnxPMonFlowEntry, jnxPMonTotalFlows=jnxPMonTotalFlows, PYSNMP_MODULE_ID=jnxPMon, jnxPMonTotalFlowsAged=jnxPMonTotalFlowsAged, jnxPMonTotalFlowsExported=jnxPMonTotalFlowsExported, jnxPMonLastOverloadEvent=jnxPMonLastOverloadEvent, jnxPMonTotalFlowsPacketsExported=jnxPMonTotalFlowsPacketsExported, jnxPMonFlowTotalFree=jnxPMonFlowTotalFree, jnxPMonFlowAllocFailures=jnxPMonFlowAllocFailures, jnxPMonFlowTable=jnxPMonFlowTable, jnxPMonTenSecondAverageFlowPackets=jnxPMonTenSecondAverageFlowPackets, jnxPMonFreePerSecond=jnxPMonFreePerSecond, jnxPMon=jnxPMon, jnxPMonTooSmallDrops=jnxPMonTooSmallDrops)
