#
# PySNMP MIB module Wellfleet-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Counter64, TimeTicks, Integer32, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Counter64", "TimeTicks", "Integer32", "Counter32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIfGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIfGroup")
wfIf = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 1))
wfIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfNumber.setStatus('mandatory')
wfIfRegistrationMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wellfleetstandard", 1), ("dialcircuitunique", 2))).clone('wellfleetstandard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfRegistrationMode.setStatus('mandatory')
wfIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2), )
if mibBuilder.loadTexts: wfIfTable.setStatus('mandatory')
wfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1), ).setIndexNames((0, "Wellfleet-IF-MIB", "wfIfIndex"))
if mibBuilder.loadTexts: wfIfEntry.setStatus('mandatory')
wfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfIndex.setStatus('mandatory')
wfIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfDescr.setStatus('mandatory')
wfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfType.setStatus('mandatory')
wfIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfMtu.setStatus('mandatory')
wfIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfSpeed.setStatus('mandatory')
wfIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfPhysAddress.setStatus('mandatory')
wfIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfAdminStatus.setStatus('mandatory')
wfIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOperStatus.setStatus('mandatory')
wfIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfLastChange.setStatus('mandatory')
wfIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfInOctets.setStatus('mandatory')
wfIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfInUcastPkts.setStatus('mandatory')
wfIfInNUCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfInNUCastPkts.setStatus('mandatory')
wfIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfInDiscards.setStatus('mandatory')
wfIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfInErrors.setStatus('mandatory')
wfIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfInUnknownProtos.setStatus('mandatory')
wfIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOutOctets.setStatus('mandatory')
wfIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOutUcastPkts.setStatus('mandatory')
wfIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOutNUcastPkts.setStatus('mandatory')
wfIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOutDiscards.setStatus('mandatory')
wfIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOutErrors.setStatus('mandatory')
wfIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfOutQLen.setStatus('mandatory')
wfIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfSpecific.setStatus('mandatory')
wfIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 3), )
if mibBuilder.loadTexts: wfIfCfgTable.setStatus('mandatory')
wfIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 3, 1), ).setIndexNames((0, "Wellfleet-IF-MIB", "wfIfCfgIndex"))
if mibBuilder.loadTexts: wfIfCfgEntry.setStatus('mandatory')
wfIfCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfCfgIndex.setStatus('mandatory')
wfIfCfgConformanceTesting = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfCfgConformanceTesting.setStatus('mandatory')
wfIfCfgSparseTableAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("zerofill", 2))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfCfgSparseTableAdminStatus.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-IF-MIB", wfIfInOctets=wfIfInOctets, wfIfInNUCastPkts=wfIfInNUCastPkts, wfIfOutErrors=wfIfOutErrors, wfIfEntry=wfIfEntry, wfIfInDiscards=wfIfInDiscards, wfIfInErrors=wfIfInErrors, wfIfInUnknownProtos=wfIfInUnknownProtos, wfIfCfgIndex=wfIfCfgIndex, wfIfOutUcastPkts=wfIfOutUcastPkts, wfIfTable=wfIfTable, wfIfCfgConformanceTesting=wfIfCfgConformanceTesting, wfIfDescr=wfIfDescr, wfIf=wfIf, wfIfCfgEntry=wfIfCfgEntry, wfIfInUcastPkts=wfIfInUcastPkts, wfIfCfgTable=wfIfCfgTable, wfIfSpeed=wfIfSpeed, wfIfOutQLen=wfIfOutQLen, wfIfNumber=wfIfNumber, wfIfOperStatus=wfIfOperStatus, wfIfSpecific=wfIfSpecific, wfIfOutOctets=wfIfOutOctets, wfIfCfgSparseTableAdminStatus=wfIfCfgSparseTableAdminStatus, wfIfAdminStatus=wfIfAdminStatus, wfIfRegistrationMode=wfIfRegistrationMode, wfIfIndex=wfIfIndex, wfIfType=wfIfType, wfIfPhysAddress=wfIfPhysAddress, wfIfOutNUcastPkts=wfIfOutNUcastPkts, wfIfOutDiscards=wfIfOutDiscards, wfIfMtu=wfIfMtu, wfIfLastChange=wfIfLastChange)
