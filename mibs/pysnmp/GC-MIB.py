#
# PySNMP MIB module GC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
products, = mibBuilder.importSymbols("RBT-MIB", "products")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, Unsigned32, Gauge32, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, Counter64, NotificationType, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Unsigned32", "Gauge32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter64", "NotificationType", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
gc = ModuleIdentity((1, 3, 6, 1, 4, 1, 17163, 1, 100))
gc.setRevisions(('2014-12-09 00:00',))
if mibBuilder.loadTexts: gc.setLastUpdated('201412090000Z')
if mibBuilder.loadTexts: gc.setOrganization('Riverbed Technology, Inc.')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 3))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5))
model = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: model.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVersion.setStatus('current')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
health = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health.setStatus('current')
systemHealth = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 30000, 50000))).clone(namedValues=NamedValues(("healthy", 10000), ("degraded", 30000), ("critical", 50000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealth.setStatus('current')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
procTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11), )
if mibBuilder.loadTexts: procTable.setStatus('current')
procEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1), ).setIndexNames((0, "GC-MIB", "procIndex"))
if mibBuilder.loadTexts: procEntry.setStatus('current')
procIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: procIndex.setStatus('current')
procName = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procName.setStatus('current')
procStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStatus.setStatus('current')
procNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNumFailures.setStatus('current')
activeConfig = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConfig.setStatus('current')
alarmsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0))
procCrash = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: procCrash.setStatus('current')
procExit = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 2)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: procExit.setStatus('current')
configChange = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 3))
if mibBuilder.loadTexts: configChange.setStatus('current')
cpuUtil = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 4))
if mibBuilder.loadTexts: cpuUtil.setStatus('current')
pagingActivity = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 5))
if mibBuilder.loadTexts: pagingActivity.setStatus('current')
linkError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 6))
if mibBuilder.loadTexts: linkError.setStatus('current')
powerSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 7))
if mibBuilder.loadTexts: powerSupplyError.setStatus('current')
fanError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 8))
if mibBuilder.loadTexts: fanError.setStatus('current')
memoryError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 9))
if mibBuilder.loadTexts: memoryError.setStatus('current')
ipmi = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10))
if mibBuilder.loadTexts: ipmi.setStatus('current')
localFSFull = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11))
if mibBuilder.loadTexts: localFSFull.setStatus('current')
temperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 12))
if mibBuilder.loadTexts: temperatureCritical.setStatus('current')
temperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 13))
if mibBuilder.loadTexts: temperatureWarning.setStatus('current')
scheduledJobError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 14))
if mibBuilder.loadTexts: scheduledJobError.setStatus('current')
confModeEnter = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 15))
if mibBuilder.loadTexts: confModeEnter.setStatus('current')
confModeExit = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 16))
if mibBuilder.loadTexts: confModeExit.setStatus('current')
secureVaultLocked = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 17))
if mibBuilder.loadTexts: secureVaultLocked.setStatus('current')
procRestart = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 18)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: procRestart.setStatus('current')
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 19)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: testTrap.setStatus('current')
edgeError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10500))
if mibBuilder.loadTexts: edgeError.setStatus('current')
highAvailabilityError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10501))
if mibBuilder.loadTexts: highAvailabilityError.setStatus('current')
lunError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10502))
if mibBuilder.loadTexts: lunError.setStatus('current')
iscsiError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10503))
if mibBuilder.loadTexts: iscsiError.setStatus('current')
snapshotError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10505))
if mibBuilder.loadTexts: snapshotError.setStatus('current')
applianceUnlicensedError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10506))
if mibBuilder.loadTexts: applianceUnlicensedError.setStatus('current')
modelUnlicensedError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10507))
if mibBuilder.loadTexts: modelUnlicensedError.setStatus('current')
blkdiskError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10508))
if mibBuilder.loadTexts: blkdiskError.setStatus('current')
backupIntegrationError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10509))
if mibBuilder.loadTexts: backupIntegrationError.setStatus('current')
otherHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10510))
if mibBuilder.loadTexts: otherHardwareError.setStatus('current')
cpuUtilClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1004))
if mibBuilder.loadTexts: cpuUtilClear.setStatus('current')
pagingActivityClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1005))
if mibBuilder.loadTexts: pagingActivityClear.setStatus('current')
linkErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1006))
if mibBuilder.loadTexts: linkErrorClear.setStatus('current')
powerSupplyErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1007))
if mibBuilder.loadTexts: powerSupplyErrorClear.setStatus('current')
fanErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1008))
if mibBuilder.loadTexts: fanErrorClear.setStatus('current')
memoryErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1009))
if mibBuilder.loadTexts: memoryErrorClear.setStatus('current')
ipmiClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1010))
if mibBuilder.loadTexts: ipmiClear.setStatus('current')
localFSFullClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1011))
if mibBuilder.loadTexts: localFSFullClear.setStatus('current')
temperatureNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1012))
if mibBuilder.loadTexts: temperatureNonCritical.setStatus('current')
temperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1013))
if mibBuilder.loadTexts: temperatureNormal.setStatus('current')
secureVaultUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1017))
if mibBuilder.loadTexts: secureVaultUnlocked.setStatus('current')
edgeClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11500))
if mibBuilder.loadTexts: edgeClear.setStatus('current')
highAvailabilityClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11501))
if mibBuilder.loadTexts: highAvailabilityClear.setStatus('current')
lunClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11502))
if mibBuilder.loadTexts: lunClear.setStatus('current')
iscsiClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11503))
if mibBuilder.loadTexts: iscsiClear.setStatus('current')
snapshotClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11505))
if mibBuilder.loadTexts: snapshotClear.setStatus('current')
applianceUnlicensedClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11506))
if mibBuilder.loadTexts: applianceUnlicensedClear.setStatus('current')
modelUnlicensedClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11507))
if mibBuilder.loadTexts: modelUnlicensedClear.setStatus('current')
blkdiskClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11508))
if mibBuilder.loadTexts: blkdiskClear.setStatus('current')
backupIntegrationClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11509))
if mibBuilder.loadTexts: backupIntegrationClear.setStatus('current')
otherHardwareClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11510))
if mibBuilder.loadTexts: otherHardwareClear.setStatus('current')
cpuLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1))
cpuLoad1 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad1.setStatus('current')
cpuLoad5 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad5.setStatus('current')
cpuLoad15 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad15.setStatus('current')
cpuUtil1 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtil1.setStatus('current')
cpuIndivUtilTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5), )
if mibBuilder.loadTexts: cpuIndivUtilTable.setStatus('current')
cpuIndivUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1), ).setIndexNames((0, "GC-MIB", "cpuIndivIndex"))
if mibBuilder.loadTexts: cpuIndivUtilEntry.setStatus('current')
cpuIndivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpuIndivIndex.setStatus('current')
cpuIndivId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivId.setStatus('current')
cpuIndivIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivIdleTime.setStatus('current')
cpuIndivSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivSystemTime.setStatus('current')
cpuIndivUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivUserTime.setStatus('current')
mibBuilder.exportSymbols("GC-MIB", procTable=procTable, statistics=statistics, lunClear=lunClear, edgeClear=edgeClear, model=model, otherHardwareClear=otherHardwareClear, procStatus=procStatus, cpuIndivUtilEntry=cpuIndivUtilEntry, health=health, scheduledJobError=scheduledJobError, memoryErrorClear=memoryErrorClear, procExit=procExit, fanErrorClear=fanErrorClear, highAvailabilityClear=highAvailabilityClear, secureVaultLocked=secureVaultLocked, edgeError=edgeError, linkError=linkError, temperatureCritical=temperatureCritical, cpuIndivSystemTime=cpuIndivSystemTime, temperatureNormal=temperatureNormal, systemHealth=systemHealth, secureVaultUnlocked=secureVaultUnlocked, ipmi=ipmi, pagingActivityClear=pagingActivityClear, powerSupplyError=powerSupplyError, cpuLoad15=cpuLoad15, alarmsPrefix=alarmsPrefix, highAvailabilityError=highAvailabilityError, systemVersion=systemVersion, lunError=lunError, localFSFullClear=localFSFullClear, configChange=configChange, otherHardwareError=otherHardwareError, procEntry=procEntry, procNumFailures=procNumFailures, iscsiError=iscsiError, status=status, procRestart=procRestart, cpuIndivId=cpuIndivId, cpuIndivIdleTime=cpuIndivIdleTime, applianceUnlicensedError=applianceUnlicensedError, PYSNMP_MODULE_ID=gc, blkdiskClear=blkdiskClear, systemTemperature=systemTemperature, cpuIndivIndex=cpuIndivIndex, linkErrorClear=linkErrorClear, temperatureNonCritical=temperatureNonCritical, cpuLoad5=cpuLoad5, applianceUnlicensedClear=applianceUnlicensedClear, localFSFull=localFSFull, snapshotError=snapshotError, modelUnlicensedClear=modelUnlicensedClear, procCrash=procCrash, blkdiskError=blkdiskError, activeConfig=activeConfig, modelUnlicensedError=modelUnlicensedError, powerSupplyErrorClear=powerSupplyErrorClear, alarms=alarms, gc=gc, cpuUtil=cpuUtil, temperatureWarning=temperatureWarning, testTrap=testTrap, cpuUtil1=cpuUtil1, cpuLoad1=cpuLoad1, backupIntegrationClear=backupIntegrationClear, cpuLoad=cpuLoad, cpuIndivUtilTable=cpuIndivUtilTable, ipmiClear=ipmiClear, confModeExit=confModeExit, config=config, confModeEnter=confModeEnter, systemClock=systemClock, procName=procName, cpuUtilClear=cpuUtilClear, snapshotClear=snapshotClear, fanError=fanError, pagingActivity=pagingActivity, procIndex=procIndex, memoryError=memoryError, iscsiClear=iscsiClear, backupIntegrationError=backupIntegrationError, serialNumber=serialNumber, system=system, cpuIndivUserTime=cpuIndivUserTime)
