#
# PySNMP MIB module OMNI-gx2EDFA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2EDFA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
gx2EDFA, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2EDFA")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapChangedObjectId, trapPerceivedSeverity, trapNetworkElemOperState, trapNetworkElemAdminState, trapNetworkElemAlarmStatus, trapText, trapNETrapLastTrapTimeStamp, trapIdentifier, trapNetworkElemSerialNum, trapChangedValueInteger, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapNetworkElemModelNumber = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapChangedObjectId", "trapPerceivedSeverity", "trapNetworkElemOperState", "trapNetworkElemAdminState", "trapNetworkElemAlarmStatus", "trapText", "trapNETrapLastTrapTimeStamp", "trapIdentifier", "trapNetworkElemSerialNum", "trapChangedValueInteger", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapNetworkElemModelNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, Unsigned32, TimeTicks, Counter32, IpAddress, MibIdentifier, iso, ModuleIdentity, Bits, NotificationType, ObjectIdentity, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "Unsigned32", "TimeTicks", "Counter32", "IpAddress", "MibIdentifier", "iso", "ModuleIdentity", "Bits", "NotificationType", "ObjectIdentity", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2EDFADescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 1))
gx2EDFAAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2), )
if mibBuilder.loadTexts: gx2EDFAAnalogTable.setStatus('mandatory')
gx2EDFAAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFAAnalogTableIndex"))
if mibBuilder.loadTexts: gx2EDFAAnalogEntry.setStatus('mandatory')
gx2EDFADigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3), )
if mibBuilder.loadTexts: gx2EDFADigitalTable.setStatus('mandatory')
gx2EDFADigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFADigitalTableIndex"))
if mibBuilder.loadTexts: gx2EDFADigitalEntry.setStatus('mandatory')
gx2EDFAStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4), )
if mibBuilder.loadTexts: gx2EDFAStatusTable.setStatus('mandatory')
gx2EDFAStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFAStatusTableIndex"))
if mibBuilder.loadTexts: gx2EDFAStatusEntry.setStatus('mandatory')
gx2EDFAFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5), )
if mibBuilder.loadTexts: gx2EDFAFactoryTable.setStatus('mandatory')
gx2EDFAFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFAFactoryTableIndex"))
if mibBuilder.loadTexts: gx2EDFAFactoryEntry.setStatus('mandatory')
gx2EDFAHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6), )
if mibBuilder.loadTexts: gx2EDFAHoldTimeTable.setStatus('mandatory')
gx2EDFAHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "gx2EDFAHoldTimeTableIndex"), (0, "OMNI-gx2EDFA-MIB", "gx2EDFAHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2EDFAHoldTimeEntry.setStatus('mandatory')
edfagx2EDFAAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFAAnalogTableIndex.setStatus('mandatory')
edfalabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelModTemp.setStatus('optional')
edfauomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomModTemp.setStatus('optional')
edfamajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighModTemp.setStatus('mandatory')
edfamajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowModTemp.setStatus('mandatory')
edfaminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighModTemp.setStatus('mandatory')
edfaminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowModTemp.setStatus('mandatory')
edfacurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueModTemp.setStatus('mandatory')
edfastateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagModTemp.setStatus('mandatory')
edfaminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueModTemp.setStatus('mandatory')
edfamaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueModTemp.setStatus('mandatory')
edfaalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateModTemp.setStatus('mandatory')
edfalabelOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptInPower.setStatus('optional')
edfauomOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOptInPower.setStatus('optional')
edfamajorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOptInPower.setStatus('mandatory')
edfamajorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOptInPower.setStatus('mandatory')
edfaminorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOptInPower.setStatus('mandatory')
edfaminorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOptInPower.setStatus('mandatory')
edfacurrentValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueOptInPower.setStatus('mandatory')
edfastateFlagOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOptInPower.setStatus('mandatory')
edfaminValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOptInPower.setStatus('mandatory')
edfamaxValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOptInPower.setStatus('mandatory')
edfaalarmStateOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOptInPower.setStatus('mandatory')
edfalabelOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptOutPower.setStatus('optional')
edfauomOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOptOutPower.setStatus('optional')
edfamajorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOptOutPower.setStatus('mandatory')
edfamajorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOptOutPower.setStatus('mandatory')
edfaminorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOptOutPower.setStatus('mandatory')
edfaminorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOptOutPower.setStatus('mandatory')
edfacurrentValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueOptOutPower.setStatus('mandatory')
edfastateFlagOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOptOutPower.setStatus('mandatory')
edfaminValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOptOutPower.setStatus('mandatory')
edfamaxValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOptOutPower.setStatus('mandatory')
edfaalarmStateOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOptOutPower.setStatus('mandatory')
edfalabelTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECTemp.setStatus('optional')
edfauomTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomTECTemp.setStatus('optional')
edfamajorHighTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighTECTemp.setStatus('mandatory')
edfamajorLowTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowTECTemp.setStatus('mandatory')
edfaminorHighTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighTECTemp.setStatus('mandatory')
edfaminorLowTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowTECTemp.setStatus('mandatory')
edfacurrentValueTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueTECTemp.setStatus('mandatory')
edfastateFlagTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagTECTemp.setStatus('mandatory')
edfaminValueTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueTECTemp.setStatus('mandatory')
edfamaxValueTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueTECTemp.setStatus('mandatory')
edfaalarmStateTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateTECTemp.setStatus('mandatory')
edfalabelTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECCurrent.setStatus('optional')
edfauomTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomTECCurrent.setStatus('optional')
edfamajorHighTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighTECCurrent.setStatus('mandatory')
edfamajorLowTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowTECCurrent.setStatus('mandatory')
edfaminorHighTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighTECCurrent.setStatus('mandatory')
edfaminorLowTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowTECCurrent.setStatus('mandatory')
edfacurrentValueTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueTECCurrent.setStatus('mandatory')
edfastateFlagTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagTECCurrent.setStatus('mandatory')
edfaminValueTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueTECCurrent.setStatus('mandatory')
edfamaxValueTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueTECCurrent.setStatus('mandatory')
edfaalarmStateTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateTECCurrent.setStatus('mandatory')
edfalabelLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserCurrent.setStatus('optional')
edfauomLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomLaserCurrent.setStatus('optional')
edfamajorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighLaserCurrent.setStatus('mandatory')
edfamajorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowLaserCurrent.setStatus('mandatory')
edfaminorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighLaserCurrent.setStatus('mandatory')
edfaminorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowLaserCurrent.setStatus('mandatory')
edfacurrentValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueLaserCurrent.setStatus('mandatory')
edfastateFlagLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagLaserCurrent.setStatus('mandatory')
edfaminValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueLaserCurrent.setStatus('mandatory')
edfamaxValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueLaserCurrent.setStatus('mandatory')
edfaalarmStateLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateLaserCurrent.setStatus('mandatory')
edfalabelLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserPower.setStatus('optional')
edfauomLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomLaserPower.setStatus('optional')
edfamajorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighLaserPower.setStatus('mandatory')
edfamajorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowLaserPower.setStatus('mandatory')
edfaminorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighLaserPower.setStatus('mandatory')
edfaminorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowLaserPower.setStatus('mandatory')
edfacurrentValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueLaserPower.setStatus('mandatory')
edfastateFlagLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagLaserPower.setStatus('mandatory')
edfaminValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueLaserPower.setStatus('mandatory')
edfamaxValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueLaserPower.setStatus('mandatory')
edfaalarmStateLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateLaserPower.setStatus('mandatory')
edfalabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabel12Volt.setStatus('optional')
edfauom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauom12Volt.setStatus('optional')
edfamajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHigh12Volt.setStatus('mandatory')
edfamajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLow12Volt.setStatus('mandatory')
edfaminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHigh12Volt.setStatus('mandatory')
edfaminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLow12Volt.setStatus('mandatory')
edfacurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValue12Volt.setStatus('mandatory')
edfastateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlag12Volt.setStatus('mandatory')
edfaminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValue12Volt.setStatus('mandatory')
edfamaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValue12Volt.setStatus('mandatory')
edfaalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmState12Volt.setStatus('mandatory')
edfalabel37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabel37Volt.setStatus('optional')
edfauom37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauom37Volt.setStatus('optional')
edfamajorHigh37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHigh37Volt.setStatus('mandatory')
edfamajorLow37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLow37Volt.setStatus('mandatory')
edfaminorHigh37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHigh37Volt.setStatus('mandatory')
edfaminorLow37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLow37Volt.setStatus('mandatory')
edfacurrentValue37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValue37Volt.setStatus('mandatory')
edfastateFlag37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlag37Volt.setStatus('mandatory')
edfaminValue37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValue37Volt.setStatus('mandatory')
edfamaxValue37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValue37Volt.setStatus('mandatory')
edfaalarmState37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmState37Volt.setStatus('mandatory')
edfalabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFanCurrent.setStatus('optional')
edfauomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomFanCurrent.setStatus('optional')
edfamajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighFanCurrent.setStatus('mandatory')
edfamajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowFanCurrent.setStatus('mandatory')
edfaminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighFanCurrent.setStatus('mandatory')
edfaminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowFanCurrent.setStatus('mandatory')
edfacurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueFanCurrent.setStatus('mandatory')
edfastateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagFanCurrent.setStatus('mandatory')
edfaminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueFanCurrent.setStatus('mandatory')
edfamaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueFanCurrent.setStatus('mandatory')
edfaalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateFanCurrent.setStatus('mandatory')
edfalabelOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOPSetting.setStatus('optional')
edfauomOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOPSetting.setStatus('optional')
edfamajorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 114), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOPSetting.setStatus('mandatory')
edfamajorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 115), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOPSetting.setStatus('mandatory')
edfaminorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 116), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOPSetting.setStatus('mandatory')
edfaminorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 117), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOPSetting.setStatus('mandatory')
edfacurrentValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 118), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueOPSetting.setStatus('mandatory')
edfastateFlagOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOPSetting.setStatus('mandatory')
edfaminValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 120), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOPSetting.setStatus('mandatory')
edfamaxValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 121), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOPSetting.setStatus('mandatory')
edfaalarmStateOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOPSetting.setStatus('mandatory')
edfalabelLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLPSetting.setStatus('optional')
edfauomLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomLPSetting.setStatus('optional')
edfamajorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 125), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighLPSetting.setStatus('mandatory')
edfamajorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 126), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowLPSetting.setStatus('mandatory')
edfaminorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 127), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighLPSetting.setStatus('mandatory')
edfaminorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 128), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowLPSetting.setStatus('mandatory')
edfacurrentValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 129), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueLPSetting.setStatus('mandatory')
edfastateFlagLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagLPSetting.setStatus('mandatory')
edfaminValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 131), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueLPSetting.setStatus('mandatory')
edfamaxValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 132), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueLPSetting.setStatus('mandatory')
edfaalarmStateLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateLPSetting.setStatus('mandatory')
edfalabelCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelCGSetting.setStatus('optional')
edfauomCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomCGSetting.setStatus('optional')
edfamajorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 136), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighCGSetting.setStatus('mandatory')
edfamajorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 137), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowCGSetting.setStatus('mandatory')
edfaminorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 138), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighCGSetting.setStatus('mandatory')
edfaminorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 139), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowCGSetting.setStatus('mandatory')
edfacurrentValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 140), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueCGSetting.setStatus('mandatory')
edfastateFlagCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagCGSetting.setStatus('mandatory')
edfaminValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 142), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueCGSetting.setStatus('mandatory')
edfamaxValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 143), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueCGSetting.setStatus('mandatory')
edfaalarmStateCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateCGSetting.setStatus('mandatory')
edfalabelOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptThreshold.setStatus('optional')
edfauomOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOptThreshold.setStatus('optional')
edfamajorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 147), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOptThreshold.setStatus('mandatory')
edfamajorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 148), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOptThreshold.setStatus('mandatory')
edfaminorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 149), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOptThreshold.setStatus('mandatory')
edfaminorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 150), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOptThreshold.setStatus('mandatory')
edfacurrentValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 151), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueOptThreshold.setStatus('mandatory')
edfastateFlagOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOptThreshold.setStatus('mandatory')
edfaminValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 153), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOptThreshold.setStatus('mandatory')
edfamaxValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 154), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOptThreshold.setStatus('mandatory')
edfaalarmStateOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOptThreshold.setStatus('mandatory')
edfagx2EDFADigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFADigitalTableIndex.setStatus('mandatory')
edfalabelModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelModeSetting.setStatus('optional')
edfaenumModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaenumModeSetting.setStatus('optional')
edfavalueModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("power-out-preset", 1), ("power-out-set", 2), ("laser-power-preset", 3), ("laser-power-set", 4), ("constant-gain-preset", 5), ("constant-gain-set", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfavalueModeSetting.setStatus('mandatory')
edfastateFlagModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagModeSetting.setStatus('mandatory')
edfalabelModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelModuleState.setStatus('optional')
edfaenumModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaenumModuleState.setStatus('optional')
edfavalueModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfavalueModuleState.setStatus('mandatory')
edfastateFlagModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagModuleState.setStatus('mandatory')
edfalabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFactoryDefault.setStatus('optional')
edfaenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaenumFactoryDefault.setStatus('optional')
edfavalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfavalueFactoryDefault.setStatus('mandatory')
edfastateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagFactoryDefault.setStatus('mandatory')
edfagx2EDFAStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFAStatusTableIndex.setStatus('mandatory')
edfalabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelBoot.setStatus('optional')
edfavalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueBoot.setStatus('mandatory')
edfastateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagBoot.setStatus('mandatory')
edfalabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFlash.setStatus('optional')
edfavalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueFlash.setStatus('mandatory')
edfastateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagFlash.setStatus('mandatory')
edfalabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFactoryDataCRC.setStatus('optional')
edfavalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueFactoryDataCRC.setStatus('mandatory')
edfastateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagFactoryDataCRC.setStatus('mandatory')
edfalabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelAlarmDataCRC.setStatus('optional')
edfavalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueAlarmDataCRC.setStatus('mandatory')
edfastateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagAlarmDataCRC.setStatus('mandatory')
edfalabelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelCalibrationDataCRC.setStatus('optional')
edfavalueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueCalibrationDataCRC.setStatus('mandatory')
edfastateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagCalibrationDataCRC.setStatus('mandatory')
edfalabelOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptInShutdown.setStatus('optional')
edfavalueOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueOptInShutdown.setStatus('mandatory')
edfastateflagOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagOptInShutdown.setStatus('mandatory')
edfalabelTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECTempShutdown.setStatus('optional')
edfavalueTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueTECTempShutdown.setStatus('mandatory')
edfastateflagTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagTECTempShutdown.setStatus('mandatory')
edfalabelTECShutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECShutOverride.setStatus('optional')
edfavalueTECShutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueTECShutOverride.setStatus('mandatory')
edfastateflagTECShutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagTECShutOverride.setStatus('mandatory')
edfalabelPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelPowerFail.setStatus('optional')
edfavaluePowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavaluePowerFail.setStatus('mandatory')
edfastateflagPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagPowerFail.setStatus('mandatory')
edfalabelKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelKeySwitch.setStatus('optional')
edfavalueKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueKeySwitch.setStatus('mandatory')
edfastateflagKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagKeySwitch.setStatus('mandatory')
edfalabelLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserCurrShutdown.setStatus('optional')
edfavalueLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueLaserCurrShutdown.setStatus('mandatory')
edfastateflagLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagLaserCurrShutdown.setStatus('mandatory')
edfalabelLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserPowShutdown.setStatus('optional')
edfavalueLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueLaserPowShutdown.setStatus('mandatory')
edfastateflagLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagLaserPowShutdown.setStatus('mandatory')
edfalabelADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelADCStatus.setStatus('optional')
edfavalueADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueADCStatus.setStatus('mandatory')
edfastateflagADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagADCStatus.setStatus('mandatory')
edfalabelConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelConstGainStatus.setStatus('optional')
edfavalueConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueConstGainStatus.setStatus('mandatory')
edfastateflagConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagConstGainStatus.setStatus('mandatory')
edfalabelStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelStandbyStatus.setStatus('optional')
edfavalueStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueStandbyStatus.setStatus('mandatory')
edfastateflagStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagStandbyStatus.setStatus('mandatory')
edfagx2EDFAFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFAFactoryTableIndex.setStatus('mandatory')
edfabootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabootControlByte.setStatus('mandatory')
edfabootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabootStatusByte.setStatus('mandatory')
edfabank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabank0CRC.setStatus('mandatory')
edfabank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabank1CRC.setStatus('mandatory')
edfaprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaprgEEPROMByte.setStatus('mandatory')
edfafactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfafactoryCRC.setStatus('mandatory')
edfacalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarmdata", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacalculateCRC.setStatus('mandatory')
edfahourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfahourMeter.setStatus('mandatory')
edfaflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaflashPrgCntA.setStatus('mandatory')
edfaflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaflashPrgCntB.setStatus('mandatory')
edfafwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfafwRev0.setStatus('mandatory')
edfafwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfafwRev1.setStatus('mandatory')
gx2EDFAHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2EDFAHoldTimeTableIndex.setStatus('mandatory')
gx2EDFAHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2EDFAHoldTimeSpecIndex.setStatus('mandatory')
gx2EDFAHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2EDFAHoldTimeData.setStatus('mandatory')
trapEDFAConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAOpticalInPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAOpticalOutPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFATECTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFATECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFALaserCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFALaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAPlus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAPlus37CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAStandbyMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAOptInShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFATECTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAKeySwitch = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFALasCurrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFALasPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAInvalidMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFABoot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFABoot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFACalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAFacCalFloatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAOptInThreshAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEDFAGainErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2EDFA-MIB", edfalabelPowerFail=edfalabelPowerFail, edfamajorHighModTemp=edfamajorHighModTemp, gx2EDFADescriptor=gx2EDFADescriptor, edfamajorLowOptThreshold=edfamajorLowOptThreshold, edfavalueTECShutOverride=edfavalueTECShutOverride, trapEDFAOpticalOutPowerAlarm=trapEDFAOpticalOutPowerAlarm, edfaminorLowTECTemp=edfaminorLowTECTemp, edfalabelTECTemp=edfalabelTECTemp, edfastateflagADCStatus=edfastateflagADCStatus, edfaflashPrgCntA=edfaflashPrgCntA, edfabank0CRC=edfabank0CRC, edfaalarmStateTECTemp=edfaalarmStateTECTemp, edfastateFlagTECCurrent=edfastateFlagTECCurrent, edfacurrentValueLaserPower=edfacurrentValueLaserPower, edfamajorLowFanCurrent=edfamajorLowFanCurrent, edfamajorLowCGSetting=edfamajorLowCGSetting, edfaminorHighCGSetting=edfaminorHighCGSetting, edfamajorHighOptThreshold=edfamajorHighOptThreshold, edfalabelADCStatus=edfalabelADCStatus, edfastateFlagLaserPower=edfastateFlagLaserPower, edfastateflagFlash=edfastateflagFlash, edfalabelCalibrationDataCRC=edfalabelCalibrationDataCRC, edfamajorHighCGSetting=edfamajorHighCGSetting, edfalabelFactoryDataCRC=edfalabelFactoryDataCRC, gx2EDFAFactoryTable=gx2EDFAFactoryTable, edfavalueFlash=edfavalueFlash, edfahourMeter=edfahourMeter, edfaminorHigh37Volt=edfaminorHigh37Volt, edfaminorHighOptInPower=edfaminorHighOptInPower, edfafactoryCRC=edfafactoryCRC, edfamajorLowModTemp=edfamajorLowModTemp, edfaminValueFanCurrent=edfaminValueFanCurrent, edfacurrentValueOPSetting=edfacurrentValueOPSetting, trapEDFALaserCurrentAlarm=trapEDFALaserCurrentAlarm, trapEDFAFanCurrentAlarm=trapEDFAFanCurrentAlarm, edfacurrentValue37Volt=edfacurrentValue37Volt, edfastateFlagLPSetting=edfastateFlagLPSetting, edfauomFanCurrent=edfauomFanCurrent, edfastateflagStandbyStatus=edfastateflagStandbyStatus, edfalabelLPSetting=edfalabelLPSetting, edfauomTECTemp=edfauomTECTemp, edfastateflagConstGainStatus=edfastateflagConstGainStatus, edfastateflagPowerFail=edfastateflagPowerFail, trapEDFAFacCalFloatAlarm=trapEDFAFacCalFloatAlarm, gx2EDFAStatusEntry=gx2EDFAStatusEntry, edfamajorLow12Volt=edfamajorLow12Volt, edfaminValueOptOutPower=edfaminValueOptOutPower, edfacurrentValueTECTemp=edfacurrentValueTECTemp, edfacurrentValueTECCurrent=edfacurrentValueTECCurrent, edfaalarmStateOPSetting=edfaalarmStateOPSetting, edfalabelTECShutOverride=edfalabelTECShutOverride, gx2EDFAFactoryEntry=gx2EDFAFactoryEntry, edfaminorLowFanCurrent=edfaminorLowFanCurrent, edfastateFlagFanCurrent=edfastateFlagFanCurrent, edfaminorLowOPSetting=edfaminorLowOPSetting, edfastateflagKeySwitch=edfastateflagKeySwitch, edfagx2EDFAFactoryTableIndex=edfagx2EDFAFactoryTableIndex, edfalabelConstGainStatus=edfalabelConstGainStatus, trapEDFAOpticalInPowerAlarm=trapEDFAOpticalInPowerAlarm, edfamajorLowLPSetting=edfamajorLowLPSetting, edfaalarmStateCGSetting=edfaalarmStateCGSetting, edfamaxValueTECCurrent=edfamaxValueTECCurrent, edfastateFlagOptOutPower=edfastateFlagOptOutPower, trapEDFAConfigChangeInteger=trapEDFAConfigChangeInteger, trapEDFAOptInThreshAlarm=trapEDFAOptInThreshAlarm, edfavalueFactoryDefault=edfavalueFactoryDefault, edfaminorLowLaserPower=edfaminorLowLaserPower, edfalabelOPSetting=edfalabelOPSetting, edfauomOptOutPower=edfauomOptOutPower, edfabootControlByte=edfabootControlByte, edfaprgEEPROMByte=edfaprgEEPROMByte, edfacurrentValueOptInPower=edfacurrentValueOptInPower, edfamajorHighFanCurrent=edfamajorHighFanCurrent, trapEDFABoot0Alarm=trapEDFABoot0Alarm, edfamaxValueTECTemp=edfamaxValueTECTemp, edfaminorHighOptOutPower=edfaminorHighOptOutPower, edfavaluePowerFail=edfavaluePowerFail, trapEDFALasCurrShutdown=trapEDFALasCurrShutdown, edfalabelLaserCurrent=edfalabelLaserCurrent, edfalabelOptInPower=edfalabelOptInPower, edfaminorLow12Volt=edfaminorLow12Volt, trapEDFAConfigChangeDisplayString=trapEDFAConfigChangeDisplayString, edfauom12Volt=edfauom12Volt, edfagx2EDFAAnalogTableIndex=edfagx2EDFAAnalogTableIndex, edfaalarmStateLaserPower=edfaalarmStateLaserPower, edfaminValueLPSetting=edfaminValueLPSetting, edfaminValueOptThreshold=edfaminValueOptThreshold, edfamajorHigh37Volt=edfamajorHigh37Volt, edfastateflagFactoryDataCRC=edfastateflagFactoryDataCRC, edfafwRev0=edfafwRev0, edfaminorHighLaserPower=edfaminorHighLaserPower, trapEDFAStandbyMode=trapEDFAStandbyMode, edfaminValue37Volt=edfaminValue37Volt, edfabank1CRC=edfabank1CRC, edfavalueAlarmDataCRC=edfavalueAlarmDataCRC, edfaminValueModTemp=edfaminValueModTemp, edfaminorHigh12Volt=edfaminorHigh12Volt, edfamaxValueOPSetting=edfamaxValueOPSetting, gx2EDFAAnalogEntry=gx2EDFAAnalogEntry, edfastateFlagOptThreshold=edfastateFlagOptThreshold, edfamajorHighLPSetting=edfamajorHighLPSetting, edfaminorLowLaserCurrent=edfaminorLowLaserCurrent, edfamajorLowOptOutPower=edfamajorLowOptOutPower, edfamaxValue37Volt=edfamaxValue37Volt, edfaminValue12Volt=edfaminValue12Volt, gx2EDFAAnalogTable=gx2EDFAAnalogTable, edfaminorLowOptInPower=edfaminorLowOptInPower, edfaminValueTECTemp=edfaminValueTECTemp, edfaalarmState12Volt=edfaalarmState12Volt, trapEDFALasPowerShutdown=trapEDFALasPowerShutdown, edfastateFlagFactoryDefault=edfastateFlagFactoryDefault, edfabootStatusByte=edfabootStatusByte, edfaminorHighTECCurrent=edfaminorHighTECCurrent, edfastateFlagOptInPower=edfastateFlagOptInPower, edfalabelCGSetting=edfalabelCGSetting, edfalabelModeSetting=edfalabelModeSetting, edfamajorHighOPSetting=edfamajorHighOPSetting, edfacurrentValueFanCurrent=edfacurrentValueFanCurrent, edfavalueLaserPowShutdown=edfavalueLaserPowShutdown, edfavalueFactoryDataCRC=edfavalueFactoryDataCRC, edfamaxValueOptThreshold=edfamaxValueOptThreshold, edfavalueCalibrationDataCRC=edfavalueCalibrationDataCRC, edfamaxValueOptInPower=edfamaxValueOptInPower, edfaalarmStateModTemp=edfaalarmStateModTemp, edfalabel37Volt=edfalabel37Volt, trapEDFAOptInShutdown=trapEDFAOptInShutdown, edfamajorLow37Volt=edfamajorLow37Volt, edfalabelOptOutPower=edfalabelOptOutPower, edfalabelAlarmDataCRC=edfalabelAlarmDataCRC, edfastateflagOptInShutdown=edfastateflagOptInShutdown, edfalabelKeySwitch=edfalabelKeySwitch, edfavalueConstGainStatus=edfavalueConstGainStatus, trapEDFALaserPowerAlarm=trapEDFALaserPowerAlarm, edfauomTECCurrent=edfauomTECCurrent, edfauomLaserPower=edfauomLaserPower, edfamaxValueLaserPower=edfamaxValueLaserPower, edfalabelFanCurrent=edfalabelFanCurrent, edfavalueTECTempShutdown=edfavalueTECTempShutdown, edfafwRev1=edfafwRev1, edfacalculateCRC=edfacalculateCRC, edfaalarmState37Volt=edfaalarmState37Volt, edfaminorHighLPSetting=edfaminorHighLPSetting, edfaminValueCGSetting=edfaminValueCGSetting, trapEDFATECTempShutdown=trapEDFATECTempShutdown, edfavalueModeSetting=edfavalueModeSetting, trapEDFAResetFacDefault=trapEDFAResetFacDefault, trapEDFAPowerFail=trapEDFAPowerFail, edfaminValueOptInPower=edfaminValueOptInPower, edfaminorLowLPSetting=edfaminorLowLPSetting, edfacurrentValueModTemp=edfacurrentValueModTemp, edfagx2EDFAStatusTableIndex=edfagx2EDFAStatusTableIndex, edfaminorHighOptThreshold=edfaminorHighOptThreshold, edfaenumModuleState=edfaenumModuleState, edfaminorLowTECCurrent=edfaminorLowTECCurrent, trapEDFAInvalidMode=trapEDFAInvalidMode, trapEDFAFlashAlarm=trapEDFAFlashAlarm, edfavalueStandbyStatus=edfavalueStandbyStatus, edfaminorHighFanCurrent=edfaminorHighFanCurrent, edfastateFlagOPSetting=edfastateFlagOPSetting, edfastateFlagCGSetting=edfastateFlagCGSetting, edfamajorLowTECTemp=edfamajorLowTECTemp, edfavalueADCStatus=edfavalueADCStatus, trapEDFAFactoryDataCRCAlarm=trapEDFAFactoryDataCRCAlarm, trapEDFAKeySwitch=trapEDFAKeySwitch, edfalabelOptInShutdown=edfalabelOptInShutdown, edfaalarmStateOptOutPower=edfaalarmStateOptOutPower, edfalabelLaserCurrShutdown=edfalabelLaserCurrShutdown, edfaalarmStateFanCurrent=edfaalarmStateFanCurrent, edfaalarmStateLPSetting=edfaalarmStateLPSetting, trapEDFATECCurrentAlarm=trapEDFATECCurrentAlarm, trapEDFAPlus12CurrentAlarm=trapEDFAPlus12CurrentAlarm, trapEDFAPlus37CurrentAlarm=trapEDFAPlus37CurrentAlarm, gx2EDFAHoldTimeSpecIndex=gx2EDFAHoldTimeSpecIndex, edfastateflagTECTempShutdown=edfastateflagTECTempShutdown, edfaalarmStateLaserCurrent=edfaalarmStateLaserCurrent, gx2EDFAHoldTimeData=gx2EDFAHoldTimeData, edfastateFlag12Volt=edfastateFlag12Volt, edfamajorHighTECTemp=edfamajorHighTECTemp, edfauomModTemp=edfauomModTemp, edfamaxValueLaserCurrent=edfamaxValueLaserCurrent, edfaminorHighOPSetting=edfaminorHighOPSetting, edfauomCGSetting=edfauomCGSetting, edfauom37Volt=edfauom37Volt, trapEDFAModuleTemperatureAlarm=trapEDFAModuleTemperatureAlarm, edfamaxValueModTemp=edfamaxValueModTemp, edfaminorLowCGSetting=edfaminorLowCGSetting, edfamajorHigh12Volt=edfamajorHigh12Volt, gx2EDFADigitalEntry=gx2EDFADigitalEntry, edfastateflagTECShutOverride=edfastateflagTECShutOverride, edfaminValueLaserCurrent=edfaminValueLaserCurrent, edfaflashPrgCntB=edfaflashPrgCntB, edfavalueLaserCurrShutdown=edfavalueLaserCurrShutdown, edfaminValueLaserPower=edfaminValueLaserPower, edfaalarmStateOptThreshold=edfaalarmStateOptThreshold, edfaenumModeSetting=edfaenumModeSetting, edfauomOPSetting=edfauomOPSetting, edfamajorLowOptInPower=edfamajorLowOptInPower, edfaminorLowModTemp=edfaminorLowModTemp, edfaminorHighModTemp=edfaminorHighModTemp, edfalabelLaserPower=edfalabelLaserPower, edfavalueOptInShutdown=edfavalueOptInShutdown, edfaenumFactoryDefault=edfaenumFactoryDefault, edfalabelFlash=edfalabelFlash, edfamajorHighOptInPower=edfamajorHighOptInPower, edfaalarmStateOptInPower=edfaalarmStateOptInPower, edfacurrentValue12Volt=edfacurrentValue12Volt, edfamaxValueFanCurrent=edfamaxValueFanCurrent, edfamaxValueLPSetting=edfamaxValueLPSetting, edfacurrentValueLaserCurrent=edfacurrentValueLaserCurrent, edfastateFlagModTemp=edfastateFlagModTemp, edfaminorLow37Volt=edfaminorLow37Volt, edfavalueKeySwitch=edfavalueKeySwitch, trapEDFAAlarmDataCRCAlarm=trapEDFAAlarmDataCRCAlarm, edfastateFlagTECTemp=edfastateFlagTECTemp, edfastateflagAlarmDataCRC=edfastateflagAlarmDataCRC, edfamajorLowLaserCurrent=edfamajorLowLaserCurrent, edfamajorHighLaserCurrent=edfamajorHighLaserCurrent, trapEDFATECTemperatureAlarm=trapEDFATECTemperatureAlarm, edfamajorHighLaserPower=edfamajorHighLaserPower, edfacurrentValueOptThreshold=edfacurrentValueOptThreshold, edfaminorHighLaserCurrent=edfaminorHighLaserCurrent, edfalabelBoot=edfalabelBoot, edfavalueBoot=edfavalueBoot, edfaminorHighTECTemp=edfaminorHighTECTemp, edfamajorHighTECCurrent=edfamajorHighTECCurrent, edfastateFlagModeSetting=edfastateFlagModeSetting, edfaminValueTECCurrent=edfaminValueTECCurrent, edfalabelFactoryDefault=edfalabelFactoryDefault, trapEDFAGainErrorAlarm=trapEDFAGainErrorAlarm, edfamaxValueCGSetting=edfamaxValueCGSetting, Float=Float, gx2EDFAStatusTable=gx2EDFAStatusTable, edfalabelLaserPowShutdown=edfalabelLaserPowShutdown, edfalabelModuleState=edfalabelModuleState, edfamajorLowLaserPower=edfamajorLowLaserPower, edfauomOptThreshold=edfauomOptThreshold, edfastateflagBoot=edfastateflagBoot, edfaminorLowOptThreshold=edfaminorLowOptThreshold, trapEDFABoot1Alarm=trapEDFABoot1Alarm, edfamajorLowTECCurrent=edfamajorLowTECCurrent, edfalabelStandbyStatus=edfalabelStandbyStatus, gx2EDFAHoldTimeEntry=gx2EDFAHoldTimeEntry, edfauomOptInPower=edfauomOptInPower, edfaminValueOPSetting=edfaminValueOPSetting, edfastateflagCalibrationDataCRC=edfastateflagCalibrationDataCRC, edfacurrentValueCGSetting=edfacurrentValueCGSetting, edfacurrentValueLPSetting=edfacurrentValueLPSetting, edfastateFlagModuleState=edfastateFlagModuleState, edfamajorHighOptOutPower=edfamajorHighOptOutPower, edfastateflagLaserPowShutdown=edfastateflagLaserPowShutdown, edfalabelOptThreshold=edfalabelOptThreshold, edfaminorLowOptOutPower=edfaminorLowOptOutPower, edfamajorLowOPSetting=edfamajorLowOPSetting, edfalabelTECTempShutdown=edfalabelTECTempShutdown)
mibBuilder.exportSymbols("OMNI-gx2EDFA-MIB", edfamaxValue12Volt=edfamaxValue12Volt, edfalabel12Volt=edfalabel12Volt, trapEDFACalDataCRCAlarm=trapEDFACalDataCRCAlarm, edfamaxValueOptOutPower=edfamaxValueOptOutPower, edfastateFlagLaserCurrent=edfastateFlagLaserCurrent, gx2EDFAHoldTimeTable=gx2EDFAHoldTimeTable, edfavalueModuleState=edfavalueModuleState, edfastateFlag37Volt=edfastateFlag37Volt, edfalabelModTemp=edfalabelModTemp, edfalabelTECCurrent=edfalabelTECCurrent, gx2EDFADigitalTable=gx2EDFADigitalTable, edfacurrentValueOptOutPower=edfacurrentValueOptOutPower, edfauomLaserCurrent=edfauomLaserCurrent, edfauomLPSetting=edfauomLPSetting, edfagx2EDFADigitalTableIndex=edfagx2EDFADigitalTableIndex, edfastateflagLaserCurrShutdown=edfastateflagLaserCurrShutdown, gx2EDFAHoldTimeTableIndex=gx2EDFAHoldTimeTableIndex, edfaalarmStateTECCurrent=edfaalarmStateTECCurrent)
