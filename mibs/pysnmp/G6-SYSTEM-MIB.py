#
# PySNMP MIB module G6-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G6-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
g6, = mibBuilder.importSymbols("MICROSENS-G6-MIB", "g6")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, Gauge32, Unsigned32, ObjectIdentity, Counter64, iso, ModuleIdentity, MibIdentifier, enterprises, NotificationType, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter64", "iso", "ModuleIdentity", "MibIdentifier", "enterprises", "NotificationType", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
device = ModuleIdentity((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1))
device.setRevisions(('2015-05-22 10:59',))
if mibBuilder.loadTexts: device.setLastUpdated('201505221059Z')
if mibBuilder.loadTexts: device.setOrganization('MICROSENS GmbH & Co. KG')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30))
systemShowTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemShowTimeDate.setStatus('current')
systemSetTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSetTime.setStatus('current')
systemSetDate = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSetDate.setStatus('current')
systemShowUtilization = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemShowUtilization.setStatus('current')
systemRebootDevice = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRebootDevice.setStatus('current')
systemCreateSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemCreateSnapshot.setStatus('current')
systemSendWakeOnLanPacket = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSendWakeOnLanPacket.setStatus('current')
systemAlternativeMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAlternativeMacAddress.setStatus('current')
systemBootPreference = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sdCardFirst", 0), ("internalFirst", 1), ("sdCardOnly", 2), ("internalOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemBootPreference.setStatus('current')
systemInventory = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemInventory.setStatus('current')
systemAutorunCliScript = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAutorunCliScript.setStatus('current')
systemLocalConsole = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocalConsole.setStatus('current')
systemPermitDebugAccess = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPermitDebugAccess.setStatus('current')
systemPermitIncomingAlerts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPermitIncomingAlerts.setStatus('current')
scriptScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15), )
if mibBuilder.loadTexts: scriptScheduleTable.setStatus('current')
scriptScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1), ).setIndexNames((0, "G6-SYSTEM-MIB", "scriptScheduleIndex"))
if mibBuilder.loadTexts: scriptScheduleEntry.setStatus('current')
scriptScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: scriptScheduleIndex.setStatus('current')
scriptScheduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleName.setStatus('current')
scriptScheduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleMode.setStatus('current')
scriptScheduleCliScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleCliScript.setStatus('current')
scriptScheduleMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleMinutes.setStatus('current')
scriptScheduleHours = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleHours.setStatus('current')
scriptScheduleDays = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleDays.setStatus('current')
scriptScheduleMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleMonths.setStatus('current')
scriptScheduleWeekdays = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 15, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scriptScheduleWeekdays.setStatus('current')
systemLastBootTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLastBootTime.setStatus('current')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
systemUsedMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 102), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUsedMacAddress.setStatus('current')
systemUsedBootMedia = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sdCard", 0), ("internalMemory", 1), ("nfs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUsedBootMedia.setStatus('current')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
systemClimateLevel = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("criticalLow", 1), ("low", 2), ("normal", 3), ("increased", 4), ("high", 5), ("criticalHigh", 6), ("shutdown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClimateLevel.setStatus('current')
firmwareTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 106), )
if mibBuilder.loadTexts: firmwareTable.setStatus('current')
firmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 106, 1), ).setIndexNames((0, "G6-SYSTEM-MIB", "firmwareIndex"))
if mibBuilder.loadTexts: firmwareEntry.setStatus('current')
firmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 106, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: firmwareIndex.setStatus('current')
firmwareRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 106, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareRunningVersion.setStatus('current')
firmwareBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 106, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareBuildDate.setStatus('current')
firmwareBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 106, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareBuildNumber.setStatus('current')
saveInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 107), )
if mibBuilder.loadTexts: saveInfoTable.setStatus('current')
saveInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 107, 1), ).setIndexNames((0, "G6-SYSTEM-MIB", "saveInfoIndex"))
if mibBuilder.loadTexts: saveInfoEntry.setStatus('current')
saveInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 107, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: saveInfoIndex.setStatus('current')
saveInfoLastSavedParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 107, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saveInfoLastSavedParameter.setStatus('current')
saveInfoWriteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 107, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("nothingToSave", 0), ("processing", 1), ("savedToRam", 2), ("savedToSdcard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saveInfoWriteStatus.setStatus('current')
saveInfoTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 30, 107, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saveInfoTimeStamp.setStatus('current')
mibBuilder.exportSymbols("G6-SYSTEM-MIB", scriptScheduleIndex=scriptScheduleIndex, systemAlternativeMacAddress=systemAlternativeMacAddress, systemAutorunCliScript=systemAutorunCliScript, systemUsedBootMedia=systemUsedBootMedia, saveInfoIndex=saveInfoIndex, saveInfoTimeStamp=saveInfoTimeStamp, scriptScheduleMinutes=scriptScheduleMinutes, systemCreateSnapshot=systemCreateSnapshot, systemInventory=systemInventory, scriptScheduleCliScript=scriptScheduleCliScript, saveInfoTable=saveInfoTable, device=device, firmwareRunningVersion=firmwareRunningVersion, PYSNMP_MODULE_ID=device, firmwareTable=firmwareTable, system=system, systemSetTime=systemSetTime, systemSendWakeOnLanPacket=systemSendWakeOnLanPacket, systemTemperature=systemTemperature, firmwareBuildDate=firmwareBuildDate, saveInfoWriteStatus=saveInfoWriteStatus, scriptScheduleEntry=scriptScheduleEntry, scriptScheduleHours=scriptScheduleHours, systemRebootDevice=systemRebootDevice, systemLocalConsole=systemLocalConsole, systemLastBootTime=systemLastBootTime, systemShowTimeDate=systemShowTimeDate, scriptScheduleMode=scriptScheduleMode, systemPermitDebugAccess=systemPermitDebugAccess, systemUsedMacAddress=systemUsedMacAddress, scriptScheduleMonths=scriptScheduleMonths, systemPermitIncomingAlerts=systemPermitIncomingAlerts, systemSetDate=systemSetDate, systemUptime=systemUptime, scriptScheduleName=scriptScheduleName, firmwareBuildNumber=firmwareBuildNumber, firmwareIndex=firmwareIndex, systemShowUtilization=systemShowUtilization, saveInfoEntry=saveInfoEntry, scriptScheduleTable=scriptScheduleTable, scriptScheduleWeekdays=scriptScheduleWeekdays, systemClimateLevel=systemClimateLevel, firmwareEntry=firmwareEntry, saveInfoLastSavedParameter=saveInfoLastSavedParameter, scriptScheduleDays=scriptScheduleDays, systemBootPreference=systemBootPreference)
