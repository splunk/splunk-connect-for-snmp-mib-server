#
# PySNMP MIB module H3C-IPV6-ADDRESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-IPV6-ADDRESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:09:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, Gauge32, Integer32, Bits, ObjectIdentity, MibIdentifier, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "Gauge32", "Integer32", "Bits", "ObjectIdentity", "MibIdentifier", "Counter32", "NotificationType")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
h3cIpv6AddrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71))
h3cIpv6AddrMIB.setRevisions(('2006-03-15 00:00',))
if mibBuilder.loadTexts: h3cIpv6AddrMIB.setLastUpdated('200603150000Z')
if mibBuilder.loadTexts: h3cIpv6AddrMIB.setOrganization('Huawei 3Com Technologies Co., Ltd.')
h3cIpv6AddressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1))
h3cIpv6AddressConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1))
h3cIpv6AddrSetTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1), )
if mibBuilder.loadTexts: h3cIpv6AddrSetTable.setStatus('current')
h3cIpv6AddrSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1), ).setIndexNames((0, "H3C-IPV6-ADDRESS-MIB", "h3cIpv6AddrSetIfIndex"), (0, "H3C-IPV6-ADDRESS-MIB", "h3cIpv6AddrSetAddrType"), (0, "H3C-IPV6-ADDRESS-MIB", "h3cIpv6AddrSetAddr"))
if mibBuilder.loadTexts: h3cIpv6AddrSetEntry.setStatus('current')
h3cIpv6AddrSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIpv6AddrSetIfIndex.setStatus('current')
h3cIpv6AddrSetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: h3cIpv6AddrSetAddrType.setStatus('current')
h3cIpv6AddrSetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: h3cIpv6AddrSetAddr.setStatus('current')
h3cIpv6AddrSetPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpv6AddrSetPfxLength.setStatus('current')
h3cIpv6AddrSetSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("assignedIp", 1), ("assignedEUI64Ip", 2), ("assignedLinklocalIp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpv6AddrSetSourceType.setStatus('current')
h3cIpv6AddrSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpv6AddrSetRowStatus.setStatus('current')
h3cIpv6AddrReadTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2), )
if mibBuilder.loadTexts: h3cIpv6AddrReadTable.setStatus('current')
h3cIpv6AddrReadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1), ).setIndexNames((0, "H3C-IPV6-ADDRESS-MIB", "h3cIpv6AddrReadIfIndex"), (0, "H3C-IPV6-ADDRESS-MIB", "h3cIpv6AddrReadAddrType"), (0, "H3C-IPV6-ADDRESS-MIB", "h3cIpv6AddrReadAddr"))
if mibBuilder.loadTexts: h3cIpv6AddrReadEntry.setStatus('current')
h3cIpv6AddrReadIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIpv6AddrReadIfIndex.setStatus('current')
h3cIpv6AddrReadAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: h3cIpv6AddrReadAddrType.setStatus('current')
h3cIpv6AddrReadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: h3cIpv6AddrReadAddr.setStatus('current')
h3cIpv6AddrReadPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpv6AddrReadPfxLength.setStatus('current')
h3cIpv6AddrReadSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("assignedIp", 1), ("assignedEUI64Ip", 2), ("assignedAutoIp", 3), ("autoIp", 4), ("dhcpv6", 5), ("negotiate", 6), ("cluster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpv6AddrReadSourceType.setStatus('current')
h3cIpv6AddrReadCatalog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 71, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nodelocal", 1), ("linklocal", 2), ("sitelocal", 3), ("orglocal", 4), ("global", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpv6AddrReadCatalog.setStatus('current')
mibBuilder.exportSymbols("H3C-IPV6-ADDRESS-MIB", h3cIpv6AddrReadTable=h3cIpv6AddrReadTable, h3cIpv6AddrReadEntry=h3cIpv6AddrReadEntry, h3cIpv6AddrReadIfIndex=h3cIpv6AddrReadIfIndex, h3cIpv6AddrReadPfxLength=h3cIpv6AddrReadPfxLength, PYSNMP_MODULE_ID=h3cIpv6AddrMIB, h3cIpv6AddrReadAddr=h3cIpv6AddrReadAddr, h3cIpv6AddrSetEntry=h3cIpv6AddrSetEntry, h3cIpv6AddrSetIfIndex=h3cIpv6AddrSetIfIndex, h3cIpv6AddrSetRowStatus=h3cIpv6AddrSetRowStatus, h3cIpv6AddrMIB=h3cIpv6AddrMIB, h3cIpv6AddrSetPfxLength=h3cIpv6AddrSetPfxLength, h3cIpv6AddrReadSourceType=h3cIpv6AddrReadSourceType, h3cIpv6AddrSetTable=h3cIpv6AddrSetTable, h3cIpv6AddressConfig=h3cIpv6AddressConfig, h3cIpv6AddrSetSourceType=h3cIpv6AddrSetSourceType, h3cIpv6AddrReadAddrType=h3cIpv6AddrReadAddrType, h3cIpv6AddressObjects=h3cIpv6AddressObjects, h3cIpv6AddrSetAddr=h3cIpv6AddrSetAddr, h3cIpv6AddrReadCatalog=h3cIpv6AddrReadCatalog, h3cIpv6AddrSetAddrType=h3cIpv6AddrSetAddrType)
