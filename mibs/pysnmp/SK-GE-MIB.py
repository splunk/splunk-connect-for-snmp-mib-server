#
# PySNMP MIB module SK-GE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SK-GE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:56:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, iso, IpAddress, Counter64, MibIdentifier, ModuleIdentity, Integer32, Bits, NotificationType, Gauge32, Counter32, NotificationType, Unsigned32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "IpAddress", "Counter64", "MibIdentifier", "ModuleIdentity", "Integer32", "Bits", "NotificationType", "Gauge32", "Counter32", "NotificationType", "Unsigned32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sk = MibIdentifier((1, 3, 6, 1, 4, 1, 179))
skSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 1))
skMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2))
skNICs = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3))
skChipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 4))
skConcMib = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 3))
skfddiMib = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 4))
skGeMib = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 5))
skFddiNICs = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 1))
skGeNICs = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2))
skGeXMAC11800FP = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 4, 1))
skGeSxSingleLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 1))
skGeSxDualLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 2))
skGeLxSingleLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 3))
skGeLxDualLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 4))
skGeCxSingleLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 5))
skGeCxDualLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 6))
skGeTxSingleLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 7))
skGeTxDualLink = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 3, 2, 8))
skGeGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 5, 1))
skGeVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 5, 2))
skGeRlmt = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 5, 3))
class SkGeMACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

skGeMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeMibVersion.setStatus('mandatory')
skGeAction = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("force-trap", 2), ("save-permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeAction.setStatus('mandatory')
skGeNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeNumber.setStatus('mandatory')
skGeTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4), )
if mibBuilder.loadTexts: skGeTable.setStatus('mandatory')
skGeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeIndex"))
if mibBuilder.loadTexts: skGeEntry.setStatus('mandatory')
skGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeIndex.setStatus('mandatory')
skGeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeIfIndex.setStatus('mandatory')
skGePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGePortNumber.setStatus('mandatory')
skGeDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeDeviceType.setStatus('mandatory')
skGeDriverDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeDriverDescr.setStatus('mandatory')
skGeDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeDriverVersion.setStatus('mandatory')
skGeHwDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeHwDescr.setStatus('mandatory')
skGeHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeHwVersion.setStatus('mandatory')
skGeChipSet = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChipSet.setStatus('mandatory')
skGeDeviceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("reset", 2), ("self-test", 3), ("reset-counters", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeDeviceAction.setStatus('mandatory')
skGeTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeTestResult.setStatus('mandatory')
skGeBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("pci", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeBusType.setStatus('mandatory')
skGeBusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeBusSpeed.setStatus('mandatory')
skGeBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeBusWidth.setStatus('mandatory')
skGeChecksumEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumEntriesNumber.setStatus('mandatory')
skGeChecksumTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6), )
if mibBuilder.loadTexts: skGeChecksumTable.setStatus('mandatory')
skGeChecksumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeChecksumGeIndex"), (0, "SK-GE-MIB", "skGeChecksumIndex"))
if mibBuilder.loadTexts: skGeChecksumEntry.setStatus('mandatory')
skGeChecksumGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumGeIndex.setStatus('mandatory')
skGeChecksumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("udp", 2), ("tcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumIndex.setStatus('mandatory')
skGeChecksumRxOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumRxOkCts.setStatus('mandatory')
skGeChecksumRxUnableCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumRxUnableCts.setStatus('mandatory')
skGeChecksumRxErrCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumRxErrCts.setStatus('mandatory')
skGeChecksumTxOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumTxOkCts.setStatus('mandatory')
skGeChecksumTxUnableCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeChecksumTxUnableCts.setStatus('mandatory')
skGeTrapForceType = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeTrapForceType.setStatus('mandatory')
skGeTrapDestEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeTrapDestEntriesNumber.setStatus('mandatory')
skGeTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 9), )
if mibBuilder.loadTexts: skGeTrapDestTable.setStatus('mandatory')
skGeTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 9, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeTrapDestIndex"))
if mibBuilder.loadTexts: skGeTrapDestEntry.setStatus('mandatory')
skGeTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeTrapDestIndex.setStatus('mandatory')
skGeTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeTrapDestAddress.setStatus('mandatory')
skGeTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeTrapFilter.setStatus('mandatory')
skGeSensorEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorEntriesNumber.setStatus('mandatory')
skGeSensorTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14), )
if mibBuilder.loadTexts: skGeSensorTable.setStatus('mandatory')
skGeSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeSensorGeIndex"), (0, "SK-GE-MIB", "skGeSensorIndex"))
if mibBuilder.loadTexts: skGeSensorEntry.setStatus('mandatory')
skGeSensorGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorGeIndex.setStatus('mandatory')
skGeSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("temperature", 1), ("voltage-pci", 2), ("voltage-pci-io", 3), ("voltage-asic", 4), ("voltage-pma-or-phy-a-pll", 5), ("voltage-phy-2v5", 6), ("voltage-phy-b-pll", 7), ("speed-fan", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorIndex.setStatus('mandatory')
skGeSensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorDescr.setStatus('mandatory')
skGeSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("temperature", 1), ("voltage", 2), ("rpm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorType.setStatus('mandatory')
skGeSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorValue.setStatus('mandatory')
skGeSensorWarningThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorWarningThresholdLow.setStatus('mandatory')
skGeSensorWarningThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorWarningThresholdHigh.setStatus('mandatory')
skGeSensorErrorThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorErrorThresholdLow.setStatus('mandatory')
skGeSensorErrorThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorErrorThresholdHigh.setStatus('mandatory')
skGeSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorStatus.setStatus('mandatory')
skGeSensorWarningCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorWarningCts.setStatus('mandatory')
skGeSensorErrorCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorErrorCts.setStatus('mandatory')
skGeSensorWarningTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorWarningTimeStamp.setStatus('mandatory')
skGeSensorErrorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 14, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeSensorErrorTimeStamp.setStatus('mandatory')
skGeStatEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatEntriesNumber.setStatus('mandatory')
skGeStatTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16), )
if mibBuilder.loadTexts: skGeStatTable.setStatus('mandatory')
skGeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeStatGeIndex"), (0, "SK-GE-MIB", "skGeStatIndex"))
if mibBuilder.loadTexts: skGeStatEntry.setStatus('mandatory')
skGeStatGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatGeIndex.setStatus('mandatory')
skGeStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatIndex.setStatus('mandatory')
skGeStatTxOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOkCts.setStatus('mandatory')
skGeStatTxOctetsHighOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctetsHighOkCts.setStatus('mandatory')
skGeStatTxOctetsLowOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctetsLowOkCts.setStatus('mandatory')
skGeStatTxBroadcastOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxBroadcastOkCts.setStatus('mandatory')
skGeStatTxMulticastOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxMulticastOkCts.setStatus('mandatory')
skGeStatTxUnicastOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxUnicastOkCts.setStatus('mandatory')
skGeStatTxLongFramesCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxLongFramesCts.setStatus('mandatory')
skGeStatTxBurstCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxBurstCts.setStatus('mandatory')
skGeStatTxPFlowCtrlCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxPFlowCtrlCts.setStatus('mandatory')
skGeStatTxFlowCtrlCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxFlowCtrlCts.setStatus('mandatory')
skGeStatTxSingleCollisionsCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxSingleCollisionsCts.setStatus('mandatory')
skGeStatTxMultipleCollisionsCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxMultipleCollisionsCts.setStatus('mandatory')
skGeStatTxExcessiveCollisionsCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxExcessiveCollisionsCts.setStatus('mandatory')
skGeStatTxLateCollisionsCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxLateCollisionsCts.setStatus('mandatory')
skGeStatTxDeferralCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxDeferralCts.setStatus('mandatory')
skGeStatTxExcessiveDeferralCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxExcessiveDeferralCts.setStatus('mandatory')
skGeStatTxFifoUnderrunCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxFifoUnderrunCts.setStatus('mandatory')
skGeStatTxCarrierSenseCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxCarrierSenseCts.setStatus('mandatory')
skGeStatTxOctets64Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctets64Cts.setStatus('mandatory')
skGeStatTxOctets127Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctets127Cts.setStatus('mandatory')
skGeStatTxOctets255Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctets255Cts.setStatus('mandatory')
skGeStatTxOctets511Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctets511Cts.setStatus('mandatory')
skGeStatTxOctets1023Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctets1023Cts.setStatus('mandatory')
skGeStatTxOctetsMaxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxOctetsMaxCts.setStatus('mandatory')
skGeStatTxSyncCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxSyncCts.setStatus('mandatory')
skGeStatTxSyncOctetsHighCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxSyncOctetsHighCts.setStatus('mandatory')
skGeStatTxSyncOctetsLowCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatTxSyncOctetsLowCts.setStatus('mandatory')
skGeStatRxOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOkCts.setStatus('mandatory')
skGeStatRxOctetsHighOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctetsHighOkCts.setStatus('mandatory')
skGeStatRxOctetsLowOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctetsLowOkCts.setStatus('mandatory')
skGeStatRxBroadcastOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxBroadcastOkCts.setStatus('mandatory')
skGeStatRxMulticastOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxMulticastOkCts.setStatus('mandatory')
skGeStatRxUnicastOkCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxUnicastOkCts.setStatus('mandatory')
skGeStatRxPFlowCtrlCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxPFlowCtrlCts.setStatus('mandatory')
skGeStatRxFlowCtrlCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxFlowCtrlCts.setStatus('mandatory')
skGeStatRxPFlowCtrlErrCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxPFlowCtrlErrCts.setStatus('mandatory')
skGeStatRxFlowCtrlUnknownCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxFlowCtrlUnknownCts.setStatus('mandatory')
skGeStatRxBurstCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxBurstCts.setStatus('mandatory')
skGeStatRxMissedCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxMissedCts.setStatus('mandatory')
skGeStatRxFramingCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxFramingCts.setStatus('mandatory')
skGeStatRxFifoOverflowCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxFifoOverflowCts.setStatus('mandatory')
skGeStatRxJabberCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxJabberCts.setStatus('mandatory')
skGeStatRxCarrierCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxCarrierCts.setStatus('mandatory')
skGeStatRxIRLengthCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxIRLengthCts.setStatus('mandatory')
skGeStatRxSymbolCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxSymbolCts.setStatus('mandatory')
skGeStatRxShortsCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxShortsCts.setStatus('mandatory')
skGeStatRxRuntCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxRuntCts.setStatus('mandatory')
skGeStatRxCextCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxCextCts.setStatus('mandatory')
skGeStatRxTooLongCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxTooLongCts.setStatus('mandatory')
skGeStatRxFCSCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxFCSCts.setStatus('mandatory')
skGeStatRxOctets64Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctets64Cts.setStatus('mandatory')
skGeStatRxOctets127Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctets127Cts.setStatus('mandatory')
skGeStatRxOctets255Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctets255Cts.setStatus('mandatory')
skGeStatRxOctets511Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctets511Cts.setStatus('mandatory')
skGeStatRxOctets1023Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctets1023Cts.setStatus('mandatory')
skGeStatRxOctetsMaxCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxOctetsMaxCts.setStatus('mandatory')
skGeStatRxLongFramesCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 16, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeStatRxLongFramesCts.setStatus('mandatory')
skGeConfEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfEntriesNumber.setStatus('mandatory')
skGeConfTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18), )
if mibBuilder.loadTexts: skGeConfTable.setStatus('mandatory')
skGeConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeConfGeIndex"), (0, "SK-GE-MIB", "skGeConfIndex"))
if mibBuilder.loadTexts: skGeConfEntry.setStatus('mandatory')
skGeConfGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfGeIndex.setStatus('mandatory')
skGeConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfIndex.setStatus('mandatory')
skGeConfPhysCurrentAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 3), SkGeMACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfPhysCurrentAddr.setStatus('mandatory')
skGeConfPhysFactoryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 4), SkGeMACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfPhysFactoryAddr.setStatus('mandatory')
skGeConfPMDType = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ge1000Base-LX", 2), ("ge1000Base-SX", 3), ("ge1000Base-CX", 4), ("ge1000Base-T", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfPMDType.setStatus('mandatory')
skGeConfConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("duplex-sc", 2), ("d-sub", 3), ("fc-s2", 4), ("utp", 5), ("volition", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfConnector.setStatus('mandatory')
skGeConfLinkCap = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfLinkCap.setStatus('mandatory')
skGeConfLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2), ("auto-half-duplex", 3), ("auto-full-duplex", 4), ("auto-both", 5), ("sense", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeConfLinkMode.setStatus('mandatory')
skGeConfLinkModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("half-duplex", 2), ("full-duplex", 3), ("auto-half-duplex", 4), ("auto-full-duplex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfLinkModeStatus.setStatus('mandatory')
skGeConfLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("link-physically-down", 1), ("link-auto-failure", 2), ("link-logically-down", 3), ("link-logically-up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfLinkStatus.setStatus('mandatory')
skGeConfFlowCtrlCap = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local-send", 2), ("symmetric", 3), ("symmetric-or-remote-send", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfFlowCtrlCap.setStatus('mandatory')
skGeConfFlowCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local-send", 2), ("symmetric", 3), ("symmetric-or-remote-send", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeConfFlowCtrlMode.setStatus('mandatory')
skGeConfFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("remote-send", 2), ("local-send", 3), ("symmetric", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfFlowCtrlStatus.setStatus('mandatory')
skGeConfPhyOperationCap = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfPhyOperationCap.setStatus('mandatory')
skGeConfPhyOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto-negotiation", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeConfPhyOperationMode.setStatus('mandatory')
skGeConfPhyOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unset", 1), ("master", 2), ("slave", 3), ("configuration-fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeConfPhyOperationStatus.setStatus('mandatory')
skGeVpdTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 1), )
if mibBuilder.loadTexts: skGeVpdTable.setStatus('mandatory')
skGeVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 1, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeVpdIndex"))
if mibBuilder.loadTexts: skGeVpdEntry.setStatus('mandatory')
skGeVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeVpdIndex.setStatus('mandatory')
skGeVpdFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeVpdFreeBytes.setStatus('mandatory')
skGeVpdEntryList = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeVpdEntryList.setStatus('mandatory')
skGeVpdValueTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2), )
if mibBuilder.loadTexts: skGeVpdValueTable.setStatus('mandatory')
skGeVpdValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeVpdValueIndex"), (0, "SK-GE-MIB", "skGeVpdKey"))
if mibBuilder.loadTexts: skGeVpdValueEntry.setStatus('mandatory')
skGeVpdValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeVpdValueIndex.setStatus('mandatory')
skGeVpdKey = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeVpdKey.setStatus('mandatory')
skGeVpdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeVpdValue.setStatus('mandatory')
skGeVpdAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-write", 1), ("read-only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeVpdAccess.setStatus('mandatory')
skGeVpdValid = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeVpdValid.setStatus('mandatory')
skGeRlmtEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtEntriesNumber.setStatus('mandatory')
skGeRlmtTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2), )
if mibBuilder.loadTexts: skGeRlmtTable.setStatus('mandatory')
skGeRlmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeRlmtIndex"))
if mibBuilder.loadTexts: skGeRlmtEntry.setStatus('mandatory')
skGeRlmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtIndex.setStatus('mandatory')
skGeRlmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeRlmtMode.setStatus('mandatory')
skGeRlmtPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtPortActive.setStatus('mandatory')
skGeRlmtPortPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeRlmtPortPreferred.setStatus('mandatory')
skGeRlmtChangeCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtChangeCts.setStatus('mandatory')
skGeRlmtChangeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtChangeTimeStamp.setStatus('mandatory')
skGeRlmtChangeEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtChangeEstimate.setStatus('mandatory')
skGeRlmtChangeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeRlmtChangeThreshold.setStatus('mandatory')
skGeRlmtPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtPortNumber.setStatus('mandatory')
skGeRlmtStatEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatEntriesNumber.setStatus('mandatory')
skGeRlmtStatTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4), )
if mibBuilder.loadTexts: skGeRlmtStatTable.setStatus('mandatory')
skGeRlmtStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeRlmtStatGeIndex"), (0, "SK-GE-MIB", "skGeRlmtStatIndex"))
if mibBuilder.loadTexts: skGeRlmtStatEntry.setStatus('mandatory')
skGeRlmtStatGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatGeIndex.setStatus('mandatory')
skGeRlmtStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatIndex.setStatus('mandatory')
skGeRlmtStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("active", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatStatus.setStatus('mandatory')
skGeRlmtStatTxHelloCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatTxHelloCts.setStatus('mandatory')
skGeRlmtStatRxHelloCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatRxHelloCts.setStatus('mandatory')
skGeRlmtStatTxSpHelloReqCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatTxSpHelloReqCts.setStatus('mandatory')
skGeRlmtStatRxSpHelloCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtStatRxSpHelloCts.setStatus('mandatory')
skGeRlmtMonitorEntriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtMonitorEntriesNumber.setStatus('mandatory')
skGeRlmtMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6), )
if mibBuilder.loadTexts: skGeRlmtMonitorTable.setStatus('mandatory')
skGeRlmtMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1), ).setIndexNames((0, "SK-GE-MIB", "skGeRlmtMonitorGeIndex"), (0, "SK-GE-MIB", "skGeRlmtMonitorIndex"))
if mibBuilder.loadTexts: skGeRlmtMonitorEntry.setStatus('mandatory')
skGeRlmtMonitorGeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtMonitorGeIndex.setStatus('mandatory')
skGeRlmtMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtMonitorIndex.setStatus('mandatory')
skGeRlmtMonitorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1, 3), SkGeMACAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeRlmtMonitorAddr.setStatus('mandatory')
skGeRlmtMonitorErrCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtMonitorErrCts.setStatus('mandatory')
skGeRlmtMonitorErrTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: skGeRlmtMonitorErrTimeStamp.setStatus('mandatory')
skGeRlmtMonitorAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 5, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skGeRlmtMonitorAdmin.setStatus('mandatory')
skGeSensorWarningLower = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,500)).setObjects(("SK-GE-MIB", "skGeSensorGeIndex"), ("SK-GE-MIB", "skGeSensorIndex"), ("SK-GE-MIB", "skGeSensorDescr"), ("SK-GE-MIB", "skGeSensorType"), ("SK-GE-MIB", "skGeSensorValue"))
skGeSensorWarningUpper = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,501)).setObjects(("SK-GE-MIB", "skGeSensorGeIndex"), ("SK-GE-MIB", "skGeSensorIndex"), ("SK-GE-MIB", "skGeSensorDescr"), ("SK-GE-MIB", "skGeSensorType"), ("SK-GE-MIB", "skGeSensorValue"))
skGeSensorErrorLower = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,502)).setObjects(("SK-GE-MIB", "skGeSensorGeIndex"), ("SK-GE-MIB", "skGeSensorIndex"), ("SK-GE-MIB", "skGeSensorDescr"), ("SK-GE-MIB", "skGeSensorType"), ("SK-GE-MIB", "skGeSensorValue"))
skGeSensorErrorUpper = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,503)).setObjects(("SK-GE-MIB", "skGeSensorGeIndex"), ("SK-GE-MIB", "skGeSensorIndex"), ("SK-GE-MIB", "skGeSensorDescr"), ("SK-GE-MIB", "skGeSensorType"), ("SK-GE-MIB", "skGeSensorValue"))
skGeRlmtChangeThresholdCondition = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,520)).setObjects(("SK-GE-MIB", "skGeRlmtIndex"))
skGeRlmtChangeCondition = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,521)).setObjects(("SK-GE-MIB", "skGeRlmtIndex"), ("SK-GE-MIB", "skGeRlmtPortActive"))
skGeRlmtPortDown = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,522)).setObjects(("SK-GE-MIB", "skGeRlmtStatGeIndex"), ("SK-GE-MIB", "skGeRlmtStatIndex"))
skGeRlmtPortUp = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,523)).setObjects(("SK-GE-MIB", "skGeRlmtStatGeIndex"), ("SK-GE-MIB", "skGeRlmtStatIndex"))
skGeRlmtSegmentation = NotificationType((1, 3, 6, 1, 4, 1, 179) + (0,524)).setObjects(("SK-GE-MIB", "skGeRlmtIndex"))
mibBuilder.exportSymbols("SK-GE-MIB", skGeStatRxCextCts=skGeStatRxCextCts, skGeHwDescr=skGeHwDescr, skGeConfLinkModeStatus=skGeConfLinkModeStatus, skGeStatRxOctetsMaxCts=skGeStatRxOctetsMaxCts, skGeVpdValueIndex=skGeVpdValueIndex, skGeRlmtSegmentation=skGeRlmtSegmentation, skGeStatTxMulticastOkCts=skGeStatTxMulticastOkCts, skGeStatRxFlowCtrlCts=skGeStatRxFlowCtrlCts, skGeStatRxPFlowCtrlCts=skGeStatRxPFlowCtrlCts, skGeSensorWarningUpper=skGeSensorWarningUpper, skGeStatRxFCSCts=skGeStatRxFCSCts, skGeStatRxOctetsLowOkCts=skGeStatRxOctetsLowOkCts, skGeVpdValueTable=skGeVpdValueTable, skGeStatRxOctets255Cts=skGeStatRxOctets255Cts, skGeStatRxFramingCts=skGeStatRxFramingCts, skGeDriverVersion=skGeDriverVersion, skGeHwVersion=skGeHwVersion, skGeTrapDestIndex=skGeTrapDestIndex, skGeStatTxPFlowCtrlCts=skGeStatTxPFlowCtrlCts, skGeStatTxOctets255Cts=skGeStatTxOctets255Cts, sk=sk, skGeStatRxOctets64Cts=skGeStatRxOctets64Cts, skGeConfPMDType=skGeConfPMDType, skGeStatTxOctets127Cts=skGeStatTxOctets127Cts, skGeRlmtIndex=skGeRlmtIndex, skGeSensorWarningLower=skGeSensorWarningLower, skGeRlmtChangeThresholdCondition=skGeRlmtChangeThresholdCondition, skGeSensorErrorTimeStamp=skGeSensorErrorTimeStamp, skGeStatTxLateCollisionsCts=skGeStatTxLateCollisionsCts, skGeTrapFilter=skGeTrapFilter, skGeRlmtStatIndex=skGeRlmtStatIndex, skGeChecksumIndex=skGeChecksumIndex, skGeTable=skGeTable, skGeStatRxPFlowCtrlErrCts=skGeStatRxPFlowCtrlErrCts, skGeStatTxOctets1023Cts=skGeStatTxOctets1023Cts, skGeStatTxSyncOctetsLowCts=skGeStatTxSyncOctetsLowCts, skGeSensorEntry=skGeSensorEntry, skGeRlmtChangeEstimate=skGeRlmtChangeEstimate, skGeRlmtMode=skGeRlmtMode, skGeChecksumEntry=skGeChecksumEntry, skGeRlmtMonitorGeIndex=skGeRlmtMonitorGeIndex, skGeConfFlowCtrlMode=skGeConfFlowCtrlMode, skGeConfLinkStatus=skGeConfLinkStatus, skGeVpd=skGeVpd, skMibs=skMibs, skGeBusType=skGeBusType, skGeStatTxOkCts=skGeStatTxOkCts, skGeChecksumRxUnableCts=skGeChecksumRxUnableCts, skGeTrapDestEntriesNumber=skGeTrapDestEntriesNumber, skGeIndex=skGeIndex, skGeMib=skGeMib, skGeSensorWarningThresholdLow=skGeSensorWarningThresholdLow, skGeVpdKey=skGeVpdKey, skGeVpdValid=skGeVpdValid, skGeRlmtStatRxSpHelloCts=skGeRlmtStatRxSpHelloCts, skGePortNumber=skGePortNumber, skGeRlmtMonitorAdmin=skGeRlmtMonitorAdmin, skGeStatTxMultipleCollisionsCts=skGeStatTxMultipleCollisionsCts, skGeChipSet=skGeChipSet, skGeStatTxBroadcastOkCts=skGeStatTxBroadcastOkCts, skGeConfLinkMode=skGeConfLinkMode, skGeRlmtChangeCondition=skGeRlmtChangeCondition, skFddiNICs=skFddiNICs, skGeRlmtPortDown=skGeRlmtPortDown, skGeStatTxOctets64Cts=skGeStatTxOctets64Cts, skGeVpdIndex=skGeVpdIndex, skGeTrapDestAddress=skGeTrapDestAddress, skfddiMib=skfddiMib, skGeSensorErrorThresholdHigh=skGeSensorErrorThresholdHigh, SkGeMACAddress=SkGeMACAddress, skGeChecksumGeIndex=skGeChecksumGeIndex, skGeRlmtChangeTimeStamp=skGeRlmtChangeTimeStamp, skGeChecksumRxErrCts=skGeChecksumRxErrCts, skGeGeneral=skGeGeneral, skGeStatRxShortsCts=skGeStatRxShortsCts, skGeStatRxLongFramesCts=skGeStatRxLongFramesCts, skChipSets=skChipSets, skGeStatTxLongFramesCts=skGeStatTxLongFramesCts, skGeStatIndex=skGeStatIndex, skGeSensorValue=skGeSensorValue, skNICs=skNICs, skGeVpdValueEntry=skGeVpdValueEntry, skGeStatTxExcessiveCollisionsCts=skGeStatTxExcessiveCollisionsCts, skGeVpdFreeBytes=skGeVpdFreeBytes, skGeRlmtStatStatus=skGeRlmtStatStatus, skConcMib=skConcMib, skGeRlmt=skGeRlmt, skGeTrapDestEntry=skGeTrapDestEntry, skGeStatRxOctets511Cts=skGeStatRxOctets511Cts, skGeIfIndex=skGeIfIndex, skGeRlmtMonitorIndex=skGeRlmtMonitorIndex, skGeStatRxRuntCts=skGeStatRxRuntCts, skSystems=skSystems, skGeRlmtMonitorEntriesNumber=skGeRlmtMonitorEntriesNumber, skGeStatRxJabberCts=skGeStatRxJabberCts, skGeSensorWarningCts=skGeSensorWarningCts, skGeStatRxTooLongCts=skGeStatRxTooLongCts, skGeStatRxFlowCtrlUnknownCts=skGeStatRxFlowCtrlUnknownCts, skGeRlmtStatRxHelloCts=skGeRlmtStatRxHelloCts, skGeStatTxExcessiveDeferralCts=skGeStatTxExcessiveDeferralCts, skGeRlmtTable=skGeRlmtTable, skGeDriverDescr=skGeDriverDescr, skGeRlmtMonitorErrCts=skGeRlmtMonitorErrCts, skGeMibVersion=skGeMibVersion, skGeSensorEntriesNumber=skGeSensorEntriesNumber, skGeVpdEntry=skGeVpdEntry, skGeStatTxSyncOctetsHighCts=skGeStatTxSyncOctetsHighCts, skGeStatEntry=skGeStatEntry, skGeRlmtPortNumber=skGeRlmtPortNumber, skGeSensorWarningThresholdHigh=skGeSensorWarningThresholdHigh, skGeTrapDestTable=skGeTrapDestTable, skGeStatRxIRLengthCts=skGeStatRxIRLengthCts, skGeDeviceType=skGeDeviceType, skGeConfFlowCtrlStatus=skGeConfFlowCtrlStatus, skGeVpdTable=skGeVpdTable, skGeVpdAccess=skGeVpdAccess, skGeRlmtEntry=skGeRlmtEntry, skGeSensorGeIndex=skGeSensorGeIndex, skGeStatRxUnicastOkCts=skGeStatRxUnicastOkCts, skGeSensorErrorThresholdLow=skGeSensorErrorThresholdLow, skGeStatTxSingleCollisionsCts=skGeStatTxSingleCollisionsCts, skGeStatRxBurstCts=skGeStatRxBurstCts, skGeDeviceAction=skGeDeviceAction, skGeSensorWarningTimeStamp=skGeSensorWarningTimeStamp, skGeRlmtMonitorErrTimeStamp=skGeRlmtMonitorErrTimeStamp, skGeStatTxOctetsMaxCts=skGeStatTxOctetsMaxCts, skGeEntry=skGeEntry, skGeStatTable=skGeStatTable, skGeStatRxMulticastOkCts=skGeStatRxMulticastOkCts, skGeSxDualLink=skGeSxDualLink, skGeRlmtMonitorTable=skGeRlmtMonitorTable, skGeConfPhyOperationStatus=skGeConfPhyOperationStatus, skGeStatRxOctets1023Cts=skGeStatRxOctets1023Cts, skGeTestResult=skGeTestResult, skGeChecksumRxOkCts=skGeChecksumRxOkCts, skGeSensorDescr=skGeSensorDescr, skGeConfFlowCtrlCap=skGeConfFlowCtrlCap, skGeSensorIndex=skGeSensorIndex, skGeRlmtStatTxHelloCts=skGeRlmtStatTxHelloCts, skGeChecksumTable=skGeChecksumTable, skGeVpdValue=skGeVpdValue, skGeBusSpeed=skGeBusSpeed, skGeStatTxCarrierSenseCts=skGeStatTxCarrierSenseCts, skGeRlmtStatTable=skGeRlmtStatTable, skGeChecksumTxUnableCts=skGeChecksumTxUnableCts, skGeStatRxSymbolCts=skGeStatRxSymbolCts, skGeNICs=skGeNICs, skGeRlmtStatEntry=skGeRlmtStatEntry, skGeConfEntriesNumber=skGeConfEntriesNumber, skGeSensorErrorLower=skGeSensorErrorLower, skGeStatTxDeferralCts=skGeStatTxDeferralCts, skGeSensorTable=skGeSensorTable, skGeTxSingleLink=skGeTxSingleLink, skGeSensorStatus=skGeSensorStatus, skGeConfTable=skGeConfTable, skGeCxDualLink=skGeCxDualLink, skGeSxSingleLink=skGeSxSingleLink, skGeNumber=skGeNumber, skGeRlmtStatTxSpHelloReqCts=skGeRlmtStatTxSpHelloReqCts, skGeSensorErrorCts=skGeSensorErrorCts, skGeStatRxBroadcastOkCts=skGeStatRxBroadcastOkCts, skGeAction=skGeAction, skGeConfGeIndex=skGeConfGeIndex, skGeStatTxOctets511Cts=skGeStatTxOctets511Cts, skGeConfPhysFactoryAddr=skGeConfPhysFactoryAddr, skGeConfPhysCurrentAddr=skGeConfPhysCurrentAddr, skGeConfPhyOperationCap=skGeConfPhyOperationCap, skGeStatRxCarrierCts=skGeStatRxCarrierCts, skGeStatTxOctetsHighOkCts=skGeStatTxOctetsHighOkCts, skGeRlmtChangeThreshold=skGeRlmtChangeThreshold, skGeRlmtMonitorAddr=skGeRlmtMonitorAddr, skGeRlmtPortPreferred=skGeRlmtPortPreferred, skGeStatTxBurstCts=skGeStatTxBurstCts, skGeBusWidth=skGeBusWidth, skGeXMAC11800FP=skGeXMAC11800FP, skGeLxSingleLink=skGeLxSingleLink, skGeStatRxOctets127Cts=skGeStatRxOctets127Cts, skGeRlmtPortActive=skGeRlmtPortActive, skGeStatRxOkCts=skGeStatRxOkCts, skGeVpdEntryList=skGeVpdEntryList, skGeStatTxSyncCts=skGeStatTxSyncCts, skGeRlmtEntriesNumber=skGeRlmtEntriesNumber, skGeStatGeIndex=skGeStatGeIndex, skGeStatRxFifoOverflowCts=skGeStatRxFifoOverflowCts, skGeCxSingleLink=skGeCxSingleLink, skGeRlmtChangeCts=skGeRlmtChangeCts, skGeConfLinkCap=skGeConfLinkCap, skGeStatTxFifoUnderrunCts=skGeStatTxFifoUnderrunCts, skGeStatRxOctetsHighOkCts=skGeStatRxOctetsHighOkCts, skGeConfEntry=skGeConfEntry, skGeStatTxUnicastOkCts=skGeStatTxUnicastOkCts, skGeChecksumEntriesNumber=skGeChecksumEntriesNumber, skGeStatEntriesNumber=skGeStatEntriesNumber, skGeStatTxFlowCtrlCts=skGeStatTxFlowCtrlCts, skGeConfPhyOperationMode=skGeConfPhyOperationMode, skGeLxDualLink=skGeLxDualLink, skGeSensorType=skGeSensorType, skGeStatRxMissedCts=skGeStatRxMissedCts, skGeChecksumTxOkCts=skGeChecksumTxOkCts, skGeRlmtStatGeIndex=skGeRlmtStatGeIndex, skGeSensorErrorUpper=skGeSensorErrorUpper, skGeTrapForceType=skGeTrapForceType, skGeTxDualLink=skGeTxDualLink, skGeConfConnector=skGeConfConnector, skGeRlmtMonitorEntry=skGeRlmtMonitorEntry, skGeStatTxOctetsLowOkCts=skGeStatTxOctetsLowOkCts, skGeRlmtPortUp=skGeRlmtPortUp, skGeRlmtStatEntriesNumber=skGeRlmtStatEntriesNumber, skGeConfIndex=skGeConfIndex)
