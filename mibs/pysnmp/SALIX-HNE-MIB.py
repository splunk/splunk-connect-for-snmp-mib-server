#
# PySNMP MIB module SALIX-HNE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-HNE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:52:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
atmfM4TcAdaptorEntry, atmfM4PlugInUnitEntry, atmfM4CellProtoHistIndex, atmfM4EquipHolderEntry = mibBuilder.importSymbols("ATM-FORUM-M4-MIB", "atmfM4TcAdaptorEntry", "atmfM4PlugInUnitEntry", "atmfM4CellProtoHistIndex", "atmfM4EquipHolderEntry")
atmVclVpi, atmVplVpi, atmVplEntry, AtmTrafficDescrParamIndex, atmInterfaceConfEntry, atmVclEntry, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVclVpi", "atmVplVpi", "atmVplEntry", "AtmTrafficDescrParamIndex", "atmInterfaceConfEntry", "atmVclEntry", "atmVclVci")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
hrSWInstalledEntry, hrSWInstalledIndex = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSWInstalledEntry", "hrSWInstalledIndex")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
hybridSwitch, = mibBuilder.importSymbols("SALIX-MIB", "hybridSwitch")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Bits, Counter64, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, NotificationType, ObjectIdentity, Gauge32, Counter32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Counter64", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "NotificationType", "ObjectIdentity", "Gauge32", "Counter32", "ModuleIdentity", "iso")
DisplayString, TextualConvention, DateAndTime, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "TruthValue", "RowStatus")
sonetLineIntervalEntry, sonetPathIntervalEntry, sonetSectionCurrentEntry, sonetPathCurrentEntry, sonetSectionIntervalEntry, sonetMediumEntry, sonetLineCurrentEntry = mibBuilder.importSymbols("SONET-MIB", "sonetLineIntervalEntry", "sonetPathIntervalEntry", "sonetSectionCurrentEntry", "sonetPathCurrentEntry", "sonetSectionIntervalEntry", "sonetMediumEntry", "sonetLineCurrentEntry")
hneMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1))
if mibBuilder.loadTexts: hneMIB.setLastUpdated('9808170000Z')
if mibBuilder.loadTexts: hneMIB.setOrganization('SALIX Technologies')
class HnePlugInUnitType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("mpu", 1), ("dpu", 2), ("smu", 3), ("liu", 4), ("hsf", 5), ("powerSupply", 6), ("fan", 7), ("hardDrive", 8))

hneMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1))
hneMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 2))
hneMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3))
hneMIBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4))
hneSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1))
hneSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2))
hneTdm = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3))
hneAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4))
hneAtmfM4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5))
hnePlugInUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 6))
hneSystemHost = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 1))
hneSystemSync = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2))
hneSystemHsf = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 3))
hneSysSyncTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("line", 2), ("external", 3))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncTimingMode.setStatus('current')
hneSysSyncPrimaryRefLine = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncPrimaryRefLine.setStatus('current')
hneSysSyncSecondaryRefLine = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncSecondaryRefLine.setStatus('current')
hneSysSyncRevertiveSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncRevertiveSwitch.setStatus('current')
hneSysSyncClockMode = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("freeRun", 1), ("normal", 2), ("holdover", 3), ("fastStart", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncClockMode.setStatus('current')
hneSysSyncConfiguredActiveRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncConfiguredActiveRef.setStatus('current')
hneSysSyncAutoRefSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncAutoRefSwitch.setStatus('current')
hneSysSyncFreeRunAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncFreeRunAlarm.setStatus('current')
hneSysSyncWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 9), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysSyncWorking.setStatus('current')
hneSysSyncProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 10), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncProtect.setStatus('current')
hneSysSyncPrimaryRefLineState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("lossOfSignalError", 2), ("frequencyOffsetError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncPrimaryRefLineState.setStatus('current')
hneSysSyncSecondaryRefLineState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("lossOfSignalError", 2), ("frequencyOffsetError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncSecondaryRefLineState.setStatus('current')
hneSysSyncCurrentActiveRef = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncCurrentActiveRef.setStatus('current')
hneSysSyncForcedState = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("revertiveSwitchInhibit", 1), ("autoReferenceSwitchInhbit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysSyncForcedState.setStatus('current')
hneSysHsfWorking = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 3, 1), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSysHsfWorking.setStatus('current')
hneSysHsfProtect = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 1, 3, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSysHsfProtect.setStatus('current')
hneSonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hneSonetLineTable.setStatus('current')
hneSonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1), )
sonetMediumEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetLineEntry"))
hneSonetLineEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetLineEntry.setStatus('current')
hneSonetLineTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("loop", 2))).clone('sync')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetLineTimingSource.setStatus('current')
hneSonetLineDccSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("section", 1), ("line", 2))).clone('section')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetLineDccSelection.setStatus('current')
hneSonetLineOverheadLoopThroughModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetLineOverheadLoopThroughModeEnabled.setStatus('current')
hneSonetProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hneSonetProtectionTable.setStatus('current')
hneSonetProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "SALIX-HNE-MIB", "hneSonetProtectionInterfaceHigh"), (0, "SALIX-HNE-MIB", "hneSonetProtectionInterfaceLow"))
if mibBuilder.loadTexts: hneSonetProtectionEntry.setStatus('current')
hneSonetProtectionInterfaceHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hneSonetProtectionInterfaceHigh.setStatus('current')
hneSonetProtectionInterfaceLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hneSonetProtectionInterfaceLow.setStatus('current')
hneSonetProtectionInterfaceWorking = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionInterfaceWorking.setStatus('current')
hneSonetProtectionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("onePlusOne", 1), ("oneToOne", 2), ("oneToN", 3))).clone('onePlusOne')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionConfig.setStatus('current')
hneSonetProtectionRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionRevertive.setStatus('current')
hneSonetProtectionBiDirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneSonetProtectionBiDirectional.setStatus('current')
hneSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hneSonetPathTable.setStatus('current')
hneSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1), )
sonetPathCurrentEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetPathEntry"))
hneSonetPathEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetPathEntry.setStatus('current')
hneSonetPathContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atm", 1), ("atmVam", 2), ("notTerminated", 3), ("terminatedNotSpecified", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathContentType.setStatus('current')
hneSonetPathOverheadLoopThroughModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathOverheadLoopThroughModeEnabled.setStatus('current')
hneSonetPathSpeMicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("receive", 1), ("transmit", 2), ("receiveTransmit", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathSpeMicMode.setStatus('current')
hneSonetPathReceiveTraceMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathReceiveTraceMessage.setStatus('current')
hneSonetPathTransmitTraceMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathTransmitTraceMessage.setStatus('current')
hneSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneSonetPathRowStatus.setStatus('current')
hneTdmCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: hneTdmCrossConnectTable.setStatus('current')
hneTdmCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "SALIX-HNE-MIB", "hneTdmCrossConnectPathTerminationPoint1"), (0, "SALIX-HNE-MIB", "hneTdmCrossConnectPathTerminationPoint2"))
if mibBuilder.loadTexts: hneTdmCrossConnectEntry.setStatus('current')
hneTdmCrossConnectPathTerminationPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hneTdmCrossConnectPathTerminationPoint1.setStatus('current')
hneTdmCrossConnectPathTerminationPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hneTdmCrossConnectPathTerminationPoint2.setStatus('current')
hneTdmCrossConnectOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneTdmCrossConnectOperStatus.setStatus('current')
hneTdmCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneTdmCrossConnectRowStatus.setStatus('current')
hneAtmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: hneAtmInterfaceConfTable.setStatus('current')
hneAtmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 1, 1), )
atmInterfaceConfEntry.registerAugmentions(("SALIX-HNE-MIB", "hneAtmInterfaceConfEntry"))
hneAtmInterfaceConfEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: hneAtmInterfaceConfEntry.setStatus('current')
hneAtmInterfaceValueAddedModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmInterfaceValueAddedModeEnabled.setStatus('current')
hneAtmTrafficDescrParamIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 3), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmTrafficDescrParamIndexNext.setStatus('current')
hneAtmVplTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 4), )
if mibBuilder.loadTexts: hneAtmVplTable.setStatus('current')
hneAtmVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 4, 1), )
atmVplEntry.registerAugmentions(("SALIX-HNE-MIB", "hneAtmVplEntry"))
hneAtmVplEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: hneAtmVplEntry.setStatus('current')
hneAtmVplVamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("hostTerminated", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hneAtmVplVamMode.setStatus('current')
hneAtmfM4TcAdaptorTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: hneAtmfM4TcAdaptorTable.setStatus('current')
hneAtmfM4TcAdaptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5, 1, 1), )
atmfM4TcAdaptorEntry.registerAugmentions(("SALIX-HNE-MIB", "hneAtmfM4TcAdaptorEntry"))
hneAtmfM4TcAdaptorEntry.setIndexNames(*atmfM4TcAdaptorEntry.getIndexNames())
if mibBuilder.loadTexts: hneAtmfM4TcAdaptorEntry.setStatus('current')
hneAtmfM4TcHecErroredCellAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("drop", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hneAtmfM4TcHecErroredCellAction.setStatus('current')
hneGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1))
hneCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 2))
hneCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 2, 1)).setObjects(("SALIX-HNE-MIB", "hneSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneCompliance = hneCompliance.setStatus('current')
hneSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 1)).setObjects(("SALIX-HNE-MIB", "hneSysSyncTimingMode"), ("SALIX-HNE-MIB", "hneSysSyncPrimaryRefLine"), ("SALIX-HNE-MIB", "hneSysSyncSecondaryRefLine"), ("SALIX-HNE-MIB", "hneSysSyncRevertiveSwitch"), ("SALIX-HNE-MIB", "hneSysSyncClockMode"), ("SALIX-HNE-MIB", "hneSysSyncConfiguredActiveRef"), ("SALIX-HNE-MIB", "hneSysSyncAutoRefSwitch"), ("SALIX-HNE-MIB", "hneSysSyncFreeRunAlarm"), ("SALIX-HNE-MIB", "hneSysSyncWorking"), ("SALIX-HNE-MIB", "hneSysSyncProtect"), ("SALIX-HNE-MIB", "hneSysSyncPrimaryRefLineState"), ("SALIX-HNE-MIB", "hneSysSyncSecondaryRefLineState"), ("SALIX-HNE-MIB", "hneSysSyncCurrentActiveRef"), ("SALIX-HNE-MIB", "hneSysSyncForcedState"), ("SALIX-HNE-MIB", "hneSysHsfWorking"), ("SALIX-HNE-MIB", "hneSysHsfProtect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneSystemGroup = hneSystemGroup.setStatus('current')
hneSonetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 2)).setObjects(("SALIX-HNE-MIB", "hneSonetLineTimingSource"), ("SALIX-HNE-MIB", "hneSonetLineDccSelection"), ("SALIX-HNE-MIB", "hneSonetLineOverheadLoopThroughModeEnabled"), ("SALIX-HNE-MIB", "hneSonetProtectionInterfaceWorking"), ("SALIX-HNE-MIB", "hneSonetProtectionConfig"), ("SALIX-HNE-MIB", "hneSonetProtectionRevertive"), ("SALIX-HNE-MIB", "hneSonetProtectionBiDirectional"), ("SALIX-HNE-MIB", "hneSonetPathContentType"), ("SALIX-HNE-MIB", "hneSonetPathOverheadLoopThroughModeEnabled"), ("SALIX-HNE-MIB", "hneSonetPathSpeMicMode"), ("SALIX-HNE-MIB", "hneSonetPathReceiveTraceMessage"), ("SALIX-HNE-MIB", "hneSonetPathTransmitTraceMessage"), ("SALIX-HNE-MIB", "hneSonetPathRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneSonetGroup = hneSonetGroup.setStatus('current')
hneTdmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 3)).setObjects(("SALIX-HNE-MIB", "hneTdmCrossConnectRowStatus"), ("SALIX-HNE-MIB", "hneTdmCrossConnectOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneTdmGroup = hneTdmGroup.setStatus('current')
hneAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 4)).setObjects(("SALIX-HNE-MIB", "hneAtmInterfaceValueAddedModeEnabled"), ("SALIX-HNE-MIB", "hneAtmTrafficDescrParamIndexNext"), ("SALIX-HNE-MIB", "hneAtmVplVamMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneAtmGroup = hneAtmGroup.setStatus('current')
hneAtmfM4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 3, 1, 5)).setObjects(("SALIX-HNE-MIB", "hneAtmfM4TcHecErroredCellAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hneAtmfM4Group = hneAtmfM4Group.setStatus('current')
hneSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5), )
if mibBuilder.loadTexts: hneSonetPathCurrentTable.setStatus('current')
hneSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1), )
sonetPathCurrentEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetPathCurrentEntry"))
hneSonetPathCurrentEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetPathCurrentEntry.setStatus('current')
hneSonetPathCurrentRxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentRxPosPointerJustCount.setStatus('current')
hneSonetPathCurrentRxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentRxNegPointerJustCount.setStatus('current')
hneSonetPathCurrentTxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentTxPosPointerJustCount.setStatus('current')
hneSonetPathCurrentTxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathCurrentTxNegPointerJustCount.setStatus('current')
hneSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6), )
if mibBuilder.loadTexts: hneSonetPathIntervalTable.setStatus('current')
hneSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1), )
sonetPathIntervalEntry.registerAugmentions(("SALIX-HNE-MIB", "hneSonetPathIntervalEntry"))
hneSonetPathIntervalEntry.setIndexNames(*sonetPathIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: hneSonetPathIntervalEntry.setStatus('current')
hneSonetPathIntervalRxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalRxPosPointerJustCount.setStatus('current')
hneSonetPathIntervalRxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalRxNegPointerJustCount.setStatus('current')
hneSonetPathIntervalTxPosPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalTxPosPointerJustCount.setStatus('current')
hneSonetPathIntervalTxNegPointerJustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneSonetPathIntervalTxNegPointerJustCount.setStatus('current')
hneAtmLiuCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7), )
if mibBuilder.loadTexts: hneAtmLiuCurrentTable.setStatus('current')
hneAtmLiuCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hneAtmLiuCurrentEntry.setStatus('current')
hneAtmLiuCurrentPhysLayerCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentPhysLayerCellCount.setStatus('current')
hneAtmLiuCurrentRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentRxCellCount.setStatus('current')
hneAtmLiuCurrentTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentTxCellCount.setStatus('current')
hneAtmLiuCurrentCongestionDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentCongestionDroppedCount.setStatus('current')
hneAtmLiuCurrentInvalidCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentInvalidCellCount.setStatus('current')
hneAtmLiuCurrentErroredOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentErroredOAMCellCount.setStatus('current')
hneAtmLiuCurrentValidOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentValidOAMCellCount.setStatus('current')
hneAtmLiuCurrentTxOverrunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentTxOverrunCount.setStatus('current')
hneAtmLiuCurrentMissingHeaderCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentMissingHeaderCellCount.setStatus('current')
hneAtmLiuCurrentNonRoutableCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentNonRoutableCellCount.setStatus('current')
hneAtmLiuCurrentVcSearchFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentVcSearchFailedCount.setStatus('current')
hneAtmLiuCurrentInternalParityErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuCurrentInternalParityErrorCount.setStatus('current')
hneAtmLiuHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8), )
if mibBuilder.loadTexts: hneAtmLiuHistoryTable.setStatus('current')
hneAtmLiuHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: hneAtmLiuHistoryEntry.setStatus('current')
hneAtmLiuHistoryPhysLayerCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryPhysLayerCellCount.setStatus('current')
hneAtmLiuHistoryRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryRxCellCount.setStatus('current')
hneAtmLiuHistoryTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryTxCellCount.setStatus('current')
hneAtmLiuHistoryCongestionDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryCongestionDroppedCount.setStatus('current')
hneAtmLiuHistoryInvalidCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryInvalidCellCount.setStatus('current')
hneAtmLiuHistoryErroredOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryErroredOAMCellCount.setStatus('current')
hneAtmLiuHistoryValidOAMCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryValidOAMCellCount.setStatus('current')
hneAtmLiuHistoryTxOverrunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryTxOverrunCount.setStatus('current')
hneAtmLiuHistoryMissingHeaderCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryMissingHeaderCellCount.setStatus('current')
hneAtmLiuHistoryNonRoutableCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryNonRoutableCellCount.setStatus('current')
hneAtmLiuHistoryVcSearchFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryVcSearchFailedCount.setStatus('current')
hneAtmLiuHistoryInternalParityErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneAtmLiuHistoryInternalParityErrorCount.setStatus('current')
hneVclCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9), )
if mibBuilder.loadTexts: hneVclCurrentTable.setStatus('current')
hneVclCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: hneVclCurrentEntry.setStatus('current')
hneVclCurrentBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentBIP16Count.setStatus('current')
hneVclCurrentRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxSECBCount.setStatus('current')
hneVclCurrentRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxLostCellCount.setStatus('current')
hneVclCurrentRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxMisinsertedCellCount.setStatus('current')
hneVclCurrentRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentRxBIPVCount.setStatus('current')
hneVclCurrentTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxSECBCount.setStatus('current')
hneVclCurrentTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxLostCellCount.setStatus('current')
hneVclCurrentTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxMisinsertedCellCount.setStatus('current')
hneVclCurrentTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclCurrentTxBIPVCount.setStatus('current')
hneVclHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10), )
if mibBuilder.loadTexts: hneVclHistoryTable.setStatus('current')
hneVclHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: hneVclHistoryEntry.setStatus('current')
hneVclHistoryBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryBIP16Count.setStatus('current')
hneVclHistoryRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxSECBCount.setStatus('current')
hneVclHistoryRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxLostCellCount.setStatus('current')
hneVclHistoryRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxMisinsertedCellCount.setStatus('current')
hneVclHistoryRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryRxBIPVCount.setStatus('current')
hneVclHistoryTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxSECBCount.setStatus('current')
hneVclHistoryTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxLostCellCount.setStatus('current')
hneVclHistoryTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxMisinsertedCellCount.setStatus('current')
hneVclHistoryTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVclHistoryTxBIPVCount.setStatus('current')
hneVplCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11), )
if mibBuilder.loadTexts: hneVplCurrentTable.setStatus('current')
hneVplCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: hneVplCurrentEntry.setStatus('current')
hneVplCurrentBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentBIP16Count.setStatus('current')
hneVplCurrentRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxSECBCount.setStatus('current')
hneVplCurrentRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxLostCellCount.setStatus('current')
hneVplCurrentRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxMisinsertedCellCount.setStatus('current')
hneVplCurrentRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentRxBIPVCount.setStatus('current')
hneVplCurrentTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxSECBCount.setStatus('current')
hneVplCurrentTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxLostCellCount.setStatus('current')
hneVplCurrentTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxMisinsertedCellCount.setStatus('current')
hneVplCurrentTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 11, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplCurrentTxBIPVCount.setStatus('current')
hneVplHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12), )
if mibBuilder.loadTexts: hneVplHistoryTable.setStatus('current')
hneVplHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: hneVplHistoryEntry.setStatus('current')
hneVplHistoryBIP16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryBIP16Count.setStatus('current')
hneVplHistoryRxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxSECBCount.setStatus('current')
hneVplHistoryRxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxLostCellCount.setStatus('current')
hneVplHistoryRxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxMisinsertedCellCount.setStatus('current')
hneVplHistoryRxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryRxBIPVCount.setStatus('current')
hneVplHistoryTxSECBCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxSECBCount.setStatus('current')
hneVplHistoryTxLostCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxLostCellCount.setStatus('current')
hneVplHistoryTxMisinsertedCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxMisinsertedCellCount.setStatus('current')
hneVplHistoryTxBIPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 3, 1, 1, 4, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hneVplHistoryTxBIPVCount.setStatus('current')
mibBuilder.exportSymbols("SALIX-HNE-MIB", hneAtmLiuHistoryEntry=hneAtmLiuHistoryEntry, hneSysSyncFreeRunAlarm=hneSysSyncFreeRunAlarm, hneAtmLiuHistoryTxCellCount=hneAtmLiuHistoryTxCellCount, hneVplCurrentRxLostCellCount=hneVplCurrentRxLostCellCount, hneVplHistoryRxMisinsertedCellCount=hneVplHistoryRxMisinsertedCellCount, hneVplCurrentTxLostCellCount=hneVplCurrentTxLostCellCount, hneAtmLiuHistoryMissingHeaderCellCount=hneAtmLiuHistoryMissingHeaderCellCount, hneVclCurrentRxMisinsertedCellCount=hneVclCurrentRxMisinsertedCellCount, hneCompliance=hneCompliance, hneSystemGroup=hneSystemGroup, hneAtmLiuCurrentVcSearchFailedCount=hneAtmLiuCurrentVcSearchFailedCount, hneAtmLiuHistoryTable=hneAtmLiuHistoryTable, hneSonetProtectionInterfaceHigh=hneSonetProtectionInterfaceHigh, hneSonetLineDccSelection=hneSonetLineDccSelection, hneAtmLiuCurrentInvalidCellCount=hneAtmLiuCurrentInvalidCellCount, hneAtmLiuHistoryErroredOAMCellCount=hneAtmLiuHistoryErroredOAMCellCount, hneAtmfM4TcHecErroredCellAction=hneAtmfM4TcHecErroredCellAction, hneSystemSync=hneSystemSync, hneSonetPathSpeMicMode=hneSonetPathSpeMicMode, hneTdmCrossConnectRowStatus=hneTdmCrossConnectRowStatus, hneSonetPathReceiveTraceMessage=hneSonetPathReceiveTraceMessage, hneVclHistoryTxMisinsertedCellCount=hneVclHistoryTxMisinsertedCellCount, hneVplHistoryEntry=hneVplHistoryEntry, hneGroups=hneGroups, hneSysSyncPrimaryRefLine=hneSysSyncPrimaryRefLine, hneSonetLineTimingSource=hneSonetLineTimingSource, hneVclHistoryTxSECBCount=hneVclHistoryTxSECBCount, hneVclCurrentTxSECBCount=hneVclCurrentTxSECBCount, hneSonetProtectionConfig=hneSonetProtectionConfig, hneVplCurrentRxMisinsertedCellCount=hneVplCurrentRxMisinsertedCellCount, hneSysSyncConfiguredActiveRef=hneSysSyncConfiguredActiveRef, hneVplHistoryBIP16Count=hneVplHistoryBIP16Count, hneAtmLiuHistoryInternalParityErrorCount=hneAtmLiuHistoryInternalParityErrorCount, hneVplHistoryTxSECBCount=hneVplHistoryTxSECBCount, hneSysSyncAutoRefSwitch=hneSysSyncAutoRefSwitch, hneVclCurrentRxBIPVCount=hneVclCurrentRxBIPVCount, hneVclCurrentEntry=hneVclCurrentEntry, hneVclHistoryRxSECBCount=hneVclHistoryRxSECBCount, hneSonetPathCurrentEntry=hneSonetPathCurrentEntry, hneAtmLiuHistoryRxCellCount=hneAtmLiuHistoryRxCellCount, hneSonetLineEntry=hneSonetLineEntry, hneVclCurrentRxSECBCount=hneVclCurrentRxSECBCount, hneAtmfM4TcAdaptorEntry=hneAtmfM4TcAdaptorEntry, hneAtmLiuHistoryCongestionDroppedCount=hneAtmLiuHistoryCongestionDroppedCount, hneVplHistoryRxBIPVCount=hneVplHistoryRxBIPVCount, hneAtmLiuCurrentEntry=hneAtmLiuCurrentEntry, hneAtmLiuCurrentMissingHeaderCellCount=hneAtmLiuCurrentMissingHeaderCellCount, hneAtmLiuHistoryPhysLayerCellCount=hneAtmLiuHistoryPhysLayerCellCount, hneTdmGroup=hneTdmGroup, hneVplHistoryTable=hneVplHistoryTable, hneSonetPathIntervalTxNegPointerJustCount=hneSonetPathIntervalTxNegPointerJustCount, hneSonetPathIntervalRxPosPointerJustCount=hneSonetPathIntervalRxPosPointerJustCount, hneVplHistoryTxMisinsertedCellCount=hneVplHistoryTxMisinsertedCellCount, hneAtmfM4TcAdaptorTable=hneAtmfM4TcAdaptorTable, PYSNMP_MODULE_ID=hneMIB, hneAtmVplTable=hneAtmVplTable, hneSonetProtectionInterfaceLow=hneSonetProtectionInterfaceLow, hneVclHistoryEntry=hneVclHistoryEntry, hneSonetLineOverheadLoopThroughModeEnabled=hneSonetLineOverheadLoopThroughModeEnabled, hneSonetProtectionInterfaceWorking=hneSonetProtectionInterfaceWorking, hneSystemHost=hneSystemHost, hneSysSyncTimingMode=hneSysSyncTimingMode, hneMIBTraps=hneMIBTraps, hneVclHistoryTable=hneVclHistoryTable, hneAtmInterfaceConfEntry=hneAtmInterfaceConfEntry, hneSysSyncRevertiveSwitch=hneSysSyncRevertiveSwitch, hneAtmInterfaceConfTable=hneAtmInterfaceConfTable, hneVplCurrentTxMisinsertedCellCount=hneVplCurrentTxMisinsertedCellCount, hneVclHistoryRxLostCellCount=hneVclHistoryRxLostCellCount, hneMIBCompliance=hneMIBCompliance, hneVclCurrentTxBIPVCount=hneVclCurrentTxBIPVCount, hneSonetGroup=hneSonetGroup, hneAtmLiuHistoryVcSearchFailedCount=hneAtmLiuHistoryVcSearchFailedCount, hneVplHistoryTxLostCellCount=hneVplHistoryTxLostCellCount, hneAtm=hneAtm, hneSysSyncCurrentActiveRef=hneSysSyncCurrentActiveRef, hneMIBStats=hneMIBStats, hneSystem=hneSystem, hneAtmfM4=hneAtmfM4, hneVplCurrentRxSECBCount=hneVplCurrentRxSECBCount, hneVplCurrentBIP16Count=hneVplCurrentBIP16Count, hneVclCurrentTable=hneVclCurrentTable, hneSonetPathCurrentRxNegPointerJustCount=hneSonetPathCurrentRxNegPointerJustCount, hneSysSyncSecondaryRefLineState=hneSysSyncSecondaryRefLineState, hneVplCurrentTxBIPVCount=hneVplCurrentTxBIPVCount, hneAtmLiuHistoryTxOverrunCount=hneAtmLiuHistoryTxOverrunCount, HnePlugInUnitType=HnePlugInUnitType, hneTdmCrossConnectPathTerminationPoint1=hneTdmCrossConnectPathTerminationPoint1, hneAtmLiuHistoryValidOAMCellCount=hneAtmLiuHistoryValidOAMCellCount, hneVclCurrentTxLostCellCount=hneVclCurrentTxLostCellCount, hneTdmCrossConnectEntry=hneTdmCrossConnectEntry, hneVplHistoryRxSECBCount=hneVplHistoryRxSECBCount, hneSonetPathIntervalEntry=hneSonetPathIntervalEntry, hneSystemHsf=hneSystemHsf, hneMIB=hneMIB, hneVplCurrentTable=hneVplCurrentTable, hneVclHistoryRxBIPVCount=hneVclHistoryRxBIPVCount, hneTdm=hneTdm, hneSysSyncPrimaryRefLineState=hneSysSyncPrimaryRefLineState, hneAtmLiuCurrentCongestionDroppedCount=hneAtmLiuCurrentCongestionDroppedCount, hneSonetPathCurrentTable=hneSonetPathCurrentTable, hneSonetPathTable=hneSonetPathTable, hneSonetProtectionEntry=hneSonetProtectionEntry, hneAtmLiuHistoryInvalidCellCount=hneAtmLiuHistoryInvalidCellCount, hneSysSyncSecondaryRefLine=hneSysSyncSecondaryRefLine, hneSonetProtectionRevertive=hneSonetProtectionRevertive, hneVclCurrentRxLostCellCount=hneVclCurrentRxLostCellCount, hneVclHistoryRxMisinsertedCellCount=hneVclHistoryRxMisinsertedCellCount, hneSysSyncProtect=hneSysSyncProtect, hneAtmLiuCurrentErroredOAMCellCount=hneAtmLiuCurrentErroredOAMCellCount, hneSonetPathTransmitTraceMessage=hneSonetPathTransmitTraceMessage, hneSonetPathCurrentTxPosPointerJustCount=hneSonetPathCurrentTxPosPointerJustCount, hneSonetPathIntervalTable=hneSonetPathIntervalTable, hneAtmInterfaceValueAddedModeEnabled=hneAtmInterfaceValueAddedModeEnabled, hneSonetPathCurrentRxPosPointerJustCount=hneSonetPathCurrentRxPosPointerJustCount, hneSonetPathIntervalTxPosPointerJustCount=hneSonetPathIntervalTxPosPointerJustCount, hneAtmLiuCurrentInternalParityErrorCount=hneAtmLiuCurrentInternalParityErrorCount, hneVclHistoryTxLostCellCount=hneVclHistoryTxLostCellCount, hneTdmCrossConnectOperStatus=hneTdmCrossConnectOperStatus, hneAtmLiuCurrentRxCellCount=hneAtmLiuCurrentRxCellCount, hneVplHistoryTxBIPVCount=hneVplHistoryTxBIPVCount, hneAtmTrafficDescrParamIndexNext=hneAtmTrafficDescrParamIndexNext, hneVplCurrentEntry=hneVplCurrentEntry, hneSonetPathContentType=hneSonetPathContentType, hneSonetPathCurrentTxNegPointerJustCount=hneSonetPathCurrentTxNegPointerJustCount, hneAtmLiuCurrentNonRoutableCellCount=hneAtmLiuCurrentNonRoutableCellCount, hneAtmLiuCurrentTxOverrunCount=hneAtmLiuCurrentTxOverrunCount, hneSysSyncWorking=hneSysSyncWorking, hneSonetPathEntry=hneSonetPathEntry, hneSysSyncClockMode=hneSysSyncClockMode, hneSysSyncForcedState=hneSysSyncForcedState, hneAtmGroup=hneAtmGroup, hneAtmLiuHistoryNonRoutableCellCount=hneAtmLiuHistoryNonRoutableCellCount, hneVclHistoryTxBIPVCount=hneVclHistoryTxBIPVCount, hneTdmCrossConnectTable=hneTdmCrossConnectTable, hneSonetPathRowStatus=hneSonetPathRowStatus, hneSonetProtectionTable=hneSonetProtectionTable, hneVplCurrentTxSECBCount=hneVplCurrentTxSECBCount, hneSysHsfWorking=hneSysHsfWorking, hneAtmLiuCurrentValidOAMCellCount=hneAtmLiuCurrentValidOAMCellCount, hneAtmLiuCurrentPhysLayerCellCount=hneAtmLiuCurrentPhysLayerCellCount, hneAtmLiuCurrentTxCellCount=hneAtmLiuCurrentTxCellCount, hneSonetLineTable=hneSonetLineTable, hneAtmVplVamMode=hneAtmVplVamMode, hneTdmCrossConnectPathTerminationPoint2=hneTdmCrossConnectPathTerminationPoint2, hneSonetPathIntervalRxNegPointerJustCount=hneSonetPathIntervalRxNegPointerJustCount, hneVclCurrentTxMisinsertedCellCount=hneVclCurrentTxMisinsertedCellCount, hneSonet=hneSonet, hneSysHsfProtect=hneSysHsfProtect, hneAtmLiuCurrentTable=hneAtmLiuCurrentTable, hneSonetPathOverheadLoopThroughModeEnabled=hneSonetPathOverheadLoopThroughModeEnabled, hneVplHistoryRxLostCellCount=hneVplHistoryRxLostCellCount, hneMIBObjects=hneMIBObjects, hneSonetProtectionBiDirectional=hneSonetProtectionBiDirectional, hnePlugInUnit=hnePlugInUnit, hneVclHistoryBIP16Count=hneVclHistoryBIP16Count, hneVclCurrentBIP16Count=hneVclCurrentBIP16Count, hneAtmVplEntry=hneAtmVplEntry, hneVplCurrentRxBIPVCount=hneVplCurrentRxBIPVCount, hneAtmfM4Group=hneAtmfM4Group, hneCompliances=hneCompliances)
