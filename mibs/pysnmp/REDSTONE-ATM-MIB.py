#
# PySNMP MIB module REDSTONE-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:47:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsNextIfIndex, = mibBuilder.importSymbols("REDSTONE-TC", "RsNextIfIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter32, Gauge32, Counter64, ObjectIdentity, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, iso, MibIdentifier, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Gauge32", "Counter64", "ObjectIdentity", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "iso", "MibIdentifier", "TimeTicks", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
rsAtmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 8))
rsAtmMIB.setRevisions(('1999-08-04 00:00',))
if mibBuilder.loadTexts: rsAtmMIB.setLastUpdated('9908040000Z')
if mibBuilder.loadTexts: rsAtmMIB.setOrganization('Redstone Communications, Inc.')
rsAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1))
rsAtmIfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1))
rsAtmAal5IfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2))
rsAtmSubIfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3))
rsAtmNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 1), RsNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAtmNextIfIndex.setStatus('current')
rsAtmIfTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2), )
if mibBuilder.loadTexts: rsAtmIfTable.setStatus('current')
rsAtmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1), ).setIndexNames((0, "REDSTONE-ATM-MIB", "rsAtmIfIndex"))
if mibBuilder.loadTexts: rsAtmIfEntry.setStatus('current')
rsAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rsAtmIfIndex.setStatus('current')
rsAtmIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmIfRowStatus.setStatus('current')
rsAtmIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmIfLowerIfIndex.setStatus('current')
rsAtmIfIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAtmIfIlmiVpi.setStatus('current')
rsAtmIfIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAtmIfIlmiVci.setStatus('current')
rsAtmIfIlmiVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAtmIfIlmiVcd.setStatus('current')
rsAtmIfIlmiPollFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAtmIfIlmiPollFrequency.setStatus('current')
rsAtmIfIlmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAtmIfIlmiAdminState.setStatus('current')
rsAtmIfUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("version3Dot0", 0), ("version3Dot1", 1), ("version4Dot0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAtmIfUniVersion.setStatus('current')
rsAtmAal5NextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2, 1), RsNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAtmAal5NextIfIndex.setStatus('current')
rsAtmAal5IfTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2, 2), )
if mibBuilder.loadTexts: rsAtmAal5IfTable.setStatus('current')
rsAtmAal5IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2, 2, 1), ).setIndexNames((0, "REDSTONE-ATM-MIB", "rsAtmAal5IfIndex"))
if mibBuilder.loadTexts: rsAtmAal5IfEntry.setStatus('current')
rsAtmAal5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rsAtmAal5IfIndex.setStatus('current')
rsAtmAal5IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmAal5IfRowStatus.setStatus('current')
rsAtmAal5IfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 2, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmAal5IfLowerIfIndex.setStatus('current')
rsAtmSubIfNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 1), RsNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAtmSubIfNextIfIndex.setStatus('current')
rsAtmSubIfTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 2), )
if mibBuilder.loadTexts: rsAtmSubIfTable.setStatus('current')
rsAtmSubIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 2, 1), ).setIndexNames((0, "REDSTONE-ATM-MIB", "rsAtmSubIfIndex"))
if mibBuilder.loadTexts: rsAtmSubIfEntry.setStatus('current')
rsAtmSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rsAtmSubIfIndex.setStatus('current')
rsAtmSubIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfRowStatus.setStatus('current')
rsAtmSubIfDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfDistinguisher.setStatus('current')
rsAtmSubIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfLowerIfIndex.setStatus('current')
rsAtmSubIfVccTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3), )
if mibBuilder.loadTexts: rsAtmSubIfVccTable.setStatus('current')
rsAtmSubIfVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1), ).setIndexNames((0, "REDSTONE-ATM-MIB", "rsAtmSubIfIndex"), (0, "REDSTONE-ATM-MIB", "rsAtmSubIfVccVpi"), (0, "REDSTONE-ATM-MIB", "rsAtmSubIfVccVci"))
if mibBuilder.loadTexts: rsAtmSubIfVccEntry.setStatus('current')
rsAtmSubIfVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: rsAtmSubIfVccVpi.setStatus('current')
rsAtmSubIfVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rsAtmSubIfVccVci.setStatus('current')
rsAtmSubIfVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccRowStatus.setStatus('current')
rsAtmSubIfVccVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccVcd.setStatus('current')
rsAtmSubIfVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfc1483VcMux", 0), ("rfc1483Llc", 1))).clone('rfc1483VcMux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccType.setStatus('current')
rsAtmSubIfVccServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ubr", 0), ("ubrPcr", 1), ("nrtVbr", 2))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccServiceCategory.setStatus('current')
rsAtmSubIfVccPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 7), Integer32()).setUnits('cells per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccPcr.setStatus('current')
rsAtmSubIfVccScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 8), Integer32()).setUnits('cells per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccScr.setStatus('current')
rsAtmSubIfVccMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 8, 1, 3, 3, 1, 9), Integer32()).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAtmSubIfVccMbs.setStatus('current')
rsAtmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4))
rsAtmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4, 1))
rsAtmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4, 2))
rsAtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4, 1, 1)).setObjects(("REDSTONE-ATM-MIB", "rsAtmGroup"), ("REDSTONE-ATM-MIB", "rsAtmAal5Group"), ("REDSTONE-ATM-MIB", "rsAtmSubIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAtmCompliance = rsAtmCompliance.setStatus('current')
rsAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4, 2, 1)).setObjects(("REDSTONE-ATM-MIB", "rsAtmNextIfIndex"), ("REDSTONE-ATM-MIB", "rsAtmIfRowStatus"), ("REDSTONE-ATM-MIB", "rsAtmIfLowerIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAtmGroup = rsAtmGroup.setStatus('current')
rsAtmAal5Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4, 2, 2)).setObjects(("REDSTONE-ATM-MIB", "rsAtmAal5NextIfIndex"), ("REDSTONE-ATM-MIB", "rsAtmAal5IfRowStatus"), ("REDSTONE-ATM-MIB", "rsAtmAal5IfLowerIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAtmAal5Group = rsAtmAal5Group.setStatus('current')
rsAtmSubIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 8, 4, 2, 3)).setObjects(("REDSTONE-ATM-MIB", "rsAtmSubIfNextIfIndex"), ("REDSTONE-ATM-MIB", "rsAtmSubIfRowStatus"), ("REDSTONE-ATM-MIB", "rsAtmSubIfLowerIfIndex"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccRowStatus"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccVcd"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccType"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccServiceCategory"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccPcr"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccScr"), ("REDSTONE-ATM-MIB", "rsAtmSubIfVccMbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAtmSubIfGroup = rsAtmSubIfGroup.setStatus('current')
mibBuilder.exportSymbols("REDSTONE-ATM-MIB", rsAtmIfTable=rsAtmIfTable, rsAtmSubIfVccTable=rsAtmSubIfVccTable, rsAtmIfIlmiAdminState=rsAtmIfIlmiAdminState, rsAtmSubIfVccVci=rsAtmSubIfVccVci, rsAtmObjects=rsAtmObjects, rsAtmAal5IfIndex=rsAtmAal5IfIndex, rsAtmIfRowStatus=rsAtmIfRowStatus, rsAtmIfIlmiPollFrequency=rsAtmIfIlmiPollFrequency, rsAtmIfUniVersion=rsAtmIfUniVersion, rsAtmAal5IfLowerIfIndex=rsAtmAal5IfLowerIfIndex, rsAtmSubIfTable=rsAtmSubIfTable, rsAtmSubIfVccServiceCategory=rsAtmSubIfVccServiceCategory, rsAtmCompliances=rsAtmCompliances, rsAtmMIB=rsAtmMIB, rsAtmSubIfVccType=rsAtmSubIfVccType, rsAtmSubIfRowStatus=rsAtmSubIfRowStatus, rsAtmIfLayer=rsAtmIfLayer, rsAtmSubIfGroup=rsAtmSubIfGroup, rsAtmSubIfVccEntry=rsAtmSubIfVccEntry, rsAtmGroup=rsAtmGroup, rsAtmConformance=rsAtmConformance, rsAtmCompliance=rsAtmCompliance, rsAtmSubIfLayer=rsAtmSubIfLayer, rsAtmSubIfEntry=rsAtmSubIfEntry, rsAtmAal5IfLayer=rsAtmAal5IfLayer, rsAtmSubIfNextIfIndex=rsAtmSubIfNextIfIndex, rsAtmSubIfVccMbs=rsAtmSubIfVccMbs, rsAtmIfEntry=rsAtmIfEntry, rsAtmAal5IfTable=rsAtmAal5IfTable, rsAtmNextIfIndex=rsAtmNextIfIndex, rsAtmIfIndex=rsAtmIfIndex, PYSNMP_MODULE_ID=rsAtmMIB, rsAtmAal5IfRowStatus=rsAtmAal5IfRowStatus, rsAtmIfIlmiVci=rsAtmIfIlmiVci, rsAtmSubIfVccVpi=rsAtmSubIfVccVpi, rsAtmSubIfVccScr=rsAtmSubIfVccScr, rsAtmGroups=rsAtmGroups, rsAtmIfIlmiVcd=rsAtmIfIlmiVcd, rsAtmIfLowerIfIndex=rsAtmIfLowerIfIndex, rsAtmAal5IfEntry=rsAtmAal5IfEntry, rsAtmAal5Group=rsAtmAal5Group, rsAtmSubIfVccRowStatus=rsAtmSubIfVccRowStatus, rsAtmAal5NextIfIndex=rsAtmAal5NextIfIndex, rsAtmSubIfDistinguisher=rsAtmSubIfDistinguisher, rsAtmSubIfLowerIfIndex=rsAtmSubIfLowerIfIndex, rsAtmSubIfIndex=rsAtmSubIfIndex, rsAtmIfIlmiVpi=rsAtmIfIlmiVpi, rsAtmSubIfVccVcd=rsAtmSubIfVccVcd, rsAtmSubIfVccPcr=rsAtmSubIfVccPcr)
