#
# PySNMP MIB module GDC-5553-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDC-5553-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, MibIdentifier, Bits, NotificationType, Counter64, Unsigned32, ObjectIdentity, enterprises, IpAddress, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "MibIdentifier", "Bits", "NotificationType", "Counter64", "Unsigned32", "ObjectIdentity", "enterprises", "IpAddress", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
sc5553 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5))
sc5553Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 1))
sc5553Allocation = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 2))
sc5553Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 3))
sc5553DTEsignalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 4))
sc5553Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 5))
sc5553Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 6))
sc5553Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7))
sc5553MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553MIBversion.setStatus('mandatory')
sc5553VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2), )
if mibBuilder.loadTexts: sc5553VersionTable.setStatus('mandatory')
sc5553VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1), ).setIndexNames((0, "GDC-5553-MIB", "sc5553VersionIndex"))
if mibBuilder.loadTexts: sc5553VersionEntry.setStatus('mandatory')
sc5553VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553VersionIndex.setStatus('mandatory')
sc5553FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553FirmwareRev.setStatus('obsolete')
sc5553ActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553ActiveFirmwareRev.setStatus('mandatory')
sc5553StoredFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553StoredFirmwareRev.setStatus('mandatory')
sc5553StoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553StoredFirmwareStatus.setStatus('mandatory')
sc5553SwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553SwitchActiveFirmware.setStatus('mandatory')
sc5553DownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DownloadingMode.setStatus('mandatory')
sc5553Ds0AllocationTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1), )
if mibBuilder.loadTexts: sc5553Ds0AllocationTable.setStatus('mandatory')
sc5553Ds0AllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1, 1), ).setIndexNames((0, "GDC-5553-MIB", "sc5553Ds0AllocationIndex"))
if mibBuilder.loadTexts: sc5553Ds0AllocationEntry.setStatus('mandatory')
sc5553Ds0AllocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553Ds0AllocationIndex.setStatus('mandatory')
sc5553DS0BaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("nx56k", 2), ("nx64k", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DS0BaseRate.setStatus('mandatory')
sc5553Highway = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highway1", 1), ("highway2", 2), ("highway3", 3), ("highway4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553Highway.setStatus('mandatory')
sc5553DccDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("dccDs01", 1), ("dccDs02", 2), ("dccDs03", 3), ("dccDs04", 4), ("dccDs05", 5), ("dccDs06", 6), ("dccDs07", 7), ("dccDs08", 8), ("dccDs09", 9), ("dccDs010", 10), ("dccDs011", 11), ("dccDs012", 12), ("dccDs013", 13), ("dccDs014", 14), ("dccDs015", 15), ("dccDs016", 16), ("dccDs017", 17), ("dccDs018", 18), ("dccDs019", 19), ("dccDs020", 20), ("dccDs021", 21), ("dccDs022", 22), ("dccDs023", 23), ("dccDs024", 24), ("dccDs025", 25), ("dccDs026", 26), ("dccDs027", 27), ("dccDs028", 28), ("dccDs029", 29), ("dccDs030", 30), ("dccDs031", 31), ("dccDs032", 32), ("noDccDs0", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DccDs0.setStatus('mandatory')
sc5553DS0Allocation = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553DS0Allocation.setStatus('mandatory')
sc5553ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1), )
if mibBuilder.loadTexts: sc5553ConfigTable.setStatus('mandatory')
sc5553ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1), ).setIndexNames((0, "GDC-5553-MIB", "sc5553ConfigIndex"))
if mibBuilder.loadTexts: sc5553ConfigEntry.setStatus('mandatory')
sc5553ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553ConfigIndex.setStatus('mandatory')
sc5553ExternalTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553ExternalTiming.setStatus('mandatory')
sc5553ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v35", 1), ("eia530", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553ChannelType.setStatus('mandatory')
sc5553ClockInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txClockNormRxClockNorm", 1), ("txClockNormRxClockInvert", 2), ("txClockInvertRxClockNorm", 3), ("txClockInvertRxClockInvert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553ClockInvert.setStatus('mandatory')
sc5553DataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txDataNormRxDataNorm", 1), ("txDataNormRxDataInvert", 2), ("txDataInvertRxDataNorm", 3), ("txDataInvertRxDataInvert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DataInvert.setStatus('mandatory')
sc5553ConstantDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553ConstantDCD.setStatus('mandatory')
sc5553ConstantDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553ConstantDSR.setStatus('mandatory')
sc5553RTSCTScontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ctsOn", 1), ("ctsDelay10ms", 2), ("ctsDelayStandard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553RTSCTScontrol.setStatus('mandatory')
sc5553ExtLLCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553ExtLLCtrl.setStatus('mandatory')
sc5553ExtRLCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553ExtRLCtrl.setStatus('mandatory')
sc5553InbandDccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("embedded", 2), ("dccDs0", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553InbandDccMode.setStatus('mandatory')
sc5553InbandLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("pn127", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553InbandLoop.setStatus('mandatory')
sc5553InbandLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("tenMinutes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553InbandLoopdown.setStatus('mandatory')
sc5553WakeUpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553WakeUpRemote.setStatus('mandatory')
sc5553SignalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1), )
if mibBuilder.loadTexts: sc5553SignalStatusTable.setStatus('mandatory')
sc5553SignalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1), ).setIndexNames((0, "GDC-5553-MIB", "sc5553SignalStatusIndex"))
if mibBuilder.loadTexts: sc5553SignalStatusEntry.setStatus('mandatory')
sc5553SignalStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553SignalStatusIndex.setStatus('mandatory')
sc5553CTSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("transitions", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553CTSstatus.setStatus('mandatory')
sc5553RTSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("transitions", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553RTSstatus.setStatus('mandatory')
sc5553DTRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553DTRstatus.setStatus('mandatory')
sc5553DSRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553DSRstatus.setStatus('mandatory')
sc5553DCDstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("transitions", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553DCDstatus.setStatus('mandatory')
sc5553RXCstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("transitions", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553RXCstatus.setStatus('mandatory')
sc5553TXCstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("transitions", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553TXCstatus.setStatus('mandatory')
sc5553RXDstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("transitions", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553RXDstatus.setStatus('mandatory')
sc5553TXDstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("transitions", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553TXDstatus.setStatus('mandatory')
sc5553ALTestLeadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553ALTestLeadStatus.setStatus('mandatory')
sc5553RLTestLeadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553RLTestLeadStatus.setStatus('mandatory')
sc5553DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1), )
if mibBuilder.loadTexts: sc5553DiagTable.setStatus('mandatory')
sc5553DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1, 1), ).setIndexNames((0, "GDC-5553-MIB", "sc5553DiagIndex"))
if mibBuilder.loadTexts: sc5553DiagEntry.setStatus('mandatory')
sc5553DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553DiagIndex.setStatus('mandatory')
sc5553DiagPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send511Pattern", 1), ("send2047Pattern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DiagPattern.setStatus('mandatory')
sc5553DiagTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553DiagTestResults.setStatus('mandatory')
sc5553DiagTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("testTime30Secs", 15), ("testTime1Min", 1), ("testTime2Mins", 2), ("testTime3Mins", 3), ("testTime4Mins", 4), ("testTime5Mins", 5), ("testTime6Mins", 6), ("testTime7Mins", 7), ("testTime8Mins", 8), ("testTime9Mins", 9), ("testTime10Mins", 10), ("testTime15Mins", 11), ("testTime20Mins", 12), ("testTime25Mins", 13), ("testTime30Mins", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DiagTestDuration.setStatus('mandatory')
sc5553DiagTestSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stopTestorNoTest", 1), ("localloop", 2), ("localloopselftest", 3), ("digitalLoop", 4), ("remoteloop", 5), ("remoteloopselftest", 6), ("networkdelay", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DiagTestSelection.setStatus('mandatory')
sc5553MaintTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1), )
if mibBuilder.loadTexts: sc5553MaintTable.setStatus('mandatory')
sc5553MaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1, 1), ).setIndexNames((0, "GDC-5553-MIB", "sc5553MaintIndex"))
if mibBuilder.loadTexts: sc5553MaintEntry.setStatus('mandatory')
sc5553MaintIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553MaintIndex.setStatus('mandatory')
sc5553LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc5553LedStatus.setStatus('mandatory')
sc5553SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553SoftReset.setStatus('mandatory')
sc5553FrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553FrontPanel.setStatus('mandatory')
sc5553DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 5, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("factoryDefault", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc5553DefaultInit.setStatus('mandatory')
sc5553AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1))
sc5553NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 1))
sc5553DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 2))
sc5553PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 3))
sc5553DTRLossAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 4))
sc5553DSRLossAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 5))
sc5553DCDLossAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 6))
sc5553TxCLossAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 7))
sc5553TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 8))
sc5553EEPROMCheckAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 9))
sc5553EIATestAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 10))
sc5553FrontPanelTestAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 11))
sc5553TxDNoTransAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 12))
sc5553RxDNoTransAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 5, 7, 1, 13))
mibBuilder.exportSymbols("GDC-5553-MIB", sc5553DTRstatus=sc5553DTRstatus, sc5553MaintTable=sc5553MaintTable, sc5553Alarms=sc5553Alarms, sc5553RLTestLeadStatus=sc5553RLTestLeadStatus, sc5553DiagTable=sc5553DiagTable, sc5553DCDstatus=sc5553DCDstatus, sc5553MIBversion=sc5553MIBversion, sc5553ActiveFirmwareRev=sc5553ActiveFirmwareRev, sc5553StoredFirmwareStatus=sc5553StoredFirmwareStatus, sc5553ChannelType=sc5553ChannelType, sc5553DSRstatus=sc5553DSRstatus, sc5553MaintEntry=sc5553MaintEntry, sc5553RXCstatus=sc5553RXCstatus, sc5553=sc5553, sc5553StoredFirmwareRev=sc5553StoredFirmwareRev, sc5553Diagnostics=sc5553Diagnostics, sc5553NoResponseAlm=sc5553NoResponseAlm, sc5553ConstantDCD=sc5553ConstantDCD, sc5553DS0Allocation=sc5553DS0Allocation, sc5553DefaultInit=sc5553DefaultInit, sc5553DccDs0=sc5553DccDs0, sc5553ExtRLCtrl=sc5553ExtRLCtrl, sc5553InbandDccMode=sc5553InbandDccMode, sc5553SignalStatusTable=sc5553SignalStatusTable, sc5553ConfigIndex=sc5553ConfigIndex, sc5553DiagTestSelection=sc5553DiagTestSelection, sc5553DiagIndex=sc5553DiagIndex, sc5553FirmwareRev=sc5553FirmwareRev, sc5553TxDNoTransAlarm=sc5553TxDNoTransAlarm, sc5553ConfigEntry=sc5553ConfigEntry, sc5553RXDstatus=sc5553RXDstatus, sc5553Allocation=sc5553Allocation, sc5553TXDstatus=sc5553TXDstatus, sc5553Configuration=sc5553Configuration, sc5553ExternalTiming=sc5553ExternalTiming, sc5553InbandLoopdown=sc5553InbandLoopdown, sc5553DTRLossAlarm=sc5553DTRLossAlarm, sc5553MaintIndex=sc5553MaintIndex, sc5553SwitchActiveFirmware=sc5553SwitchActiveFirmware, sc5553RTSCTScontrol=sc5553RTSCTScontrol, sc5553ClockInvert=sc5553ClockInvert, sc5553DiagTestDuration=sc5553DiagTestDuration, sc5553Maintenance=sc5553Maintenance, sc5553EIATestAlarm=sc5553EIATestAlarm, sc5553VersionIndex=sc5553VersionIndex, sc5553DiagEntry=sc5553DiagEntry, sc5553DiagTestResults=sc5553DiagTestResults, sc5553Ds0AllocationIndex=sc5553Ds0AllocationIndex, sc5553VersionEntry=sc5553VersionEntry, sc5553DataInvert=sc5553DataInvert, sc5553SoftReset=sc5553SoftReset, sc5553VersionTable=sc5553VersionTable, sc5553RxDNoTransAlarm=sc5553RxDNoTransAlarm, sc5553CTSstatus=sc5553CTSstatus, sc5553DCDLossAlarm=sc5553DCDLossAlarm, sc5553DS0BaseRate=sc5553DS0BaseRate, sc5553ExtLLCtrl=sc5553ExtLLCtrl, sc5553Ds0AllocationTable=sc5553Ds0AllocationTable, sc5553DiagRxErrAlm=sc5553DiagRxErrAlm, sc5553EEPROMCheckAlarm=sc5553EEPROMCheckAlarm, sc5553FrontPanelTestAlarm=sc5553FrontPanelTestAlarm, sc5553FrontPanel=sc5553FrontPanel, sc5553LedStatus=sc5553LedStatus, sc5553Highway=sc5553Highway, sc5553SignalStatusEntry=sc5553SignalStatusEntry, sc5553InbandLoop=sc5553InbandLoop, sc5553DTEsignalStat=sc5553DTEsignalStat, sc5553SignalStatusIndex=sc5553SignalStatusIndex, sc5553PowerUpAlm=sc5553PowerUpAlm, sc5553ALTestLeadStatus=sc5553ALTestLeadStatus, sc5553Ds0AllocationEntry=sc5553Ds0AllocationEntry, sc5553RTSstatus=sc5553RTSstatus, dsx1=dsx1, gdc=gdc, sc5553TxCLossAlarm=sc5553TxCLossAlarm, sc5553TXCstatus=sc5553TXCstatus, sc5553ConfigTable=sc5553ConfigTable, sc5553Version=sc5553Version, sc5553AlarmData=sc5553AlarmData, sc5553TimingLoss=sc5553TimingLoss, sc5553DownloadingMode=sc5553DownloadingMode, sc5553DSRLossAlarm=sc5553DSRLossAlarm, sc5553DiagPattern=sc5553DiagPattern, sc5553WakeUpRemote=sc5553WakeUpRemote, sc5553ConstantDSR=sc5553ConstantDSR)
