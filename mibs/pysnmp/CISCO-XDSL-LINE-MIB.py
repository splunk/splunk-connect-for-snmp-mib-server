#
# PySNMP MIB module CISCO-XDSL-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-XDSL-LINE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:05:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adslLineConfProfileEntry, = mibBuilder.importSymbols("ADSL-LINE-MIB", "adslLineConfProfileEntry")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter32, NotificationType, IpAddress, Bits, Counter64, ModuleIdentity, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "NotificationType", "IpAddress", "Bits", "Counter64", "ModuleIdentity", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "iso", "Unsigned32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoXdslLineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 204))
ciscoXdslLineMIB.setRevisions(('2001-02-10 00:00',))
if mibBuilder.loadTexts: ciscoXdslLineMIB.setLastUpdated('200102100000Z')
if mibBuilder.loadTexts: ciscoXdslLineMIB.setOrganization('Cisco Systems, Inc.')
ciscoXdslLineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 1))
cXdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1), )
if mibBuilder.loadTexts: cXdslLineTable.setStatus('current')
cXdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cXdslLineEntry.setStatus('current')
cXdslLineTimeSinceLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslLineTimeSinceLastChange.setStatus('current')
cXdslLineNoOfChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslLineNoOfChanges.setStatus('current')
cXdslTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2), )
if mibBuilder.loadTexts: cXdslTestTable.setStatus('current')
cXdslTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cXdslTestEntry.setStatus('current')
cXdslTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("passed", 3), ("failed", 4), ("aborted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestStatus.setStatus('current')
cXdslTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("bertDigitalLocal", 2), ("bertAnalogLocal", 3), ("bertDigitalRemote", 4), ("bertAnalogRemote", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslTestType.setStatus('current')
cXdslTestTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("clear", 3), ("ready", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslTestTrigger.setStatus('current')
cXdslTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslTestTime.setStatus('current')
cXdslTestBertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("noError", 0), ("cpeBertAborted", 1), ("lostCpeSync", 2), ("noCpeSync", 3), ("noCpeResults", 4), ("coBertAborted", 5), ("lostCoSync", 6), ("noCoSync", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertErrors.setStatus('current')
cXdslTestBertBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertBitErrors.setStatus('current')
cXdslTestBertRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertRunTime.setStatus('current')
cXdslTestBertBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000000))).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertBitRate.setStatus('current')
cXdslModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3), )
if mibBuilder.loadTexts: cXdslModeTable.setStatus('current')
cXdslModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cXdslModeEntry.setStatus('current')
cXdslModeLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("loopbackAnalogLocal", 2), ("loopbackDigitalLocal", 3), ("loopbackAnalogRemote", 4), ("loopbackDigitalRemote", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslModeLoopback.setStatus('current')
cXdslModeSpectrum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("spectrum1", 2), ("spectrum2", 3), ("spectrum3", 4), ("spectrum4", 5), ("spectrum5", 6), ("spectrum6", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslModeSpectrum.setStatus('current')
cXdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4), )
if mibBuilder.loadTexts: cXdslLineConfProfileTable.setStatus('current')
cXdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1), )
adslLineConfProfileEntry.registerAugmentions(("CISCO-XDSL-LINE-MIB", "cXdslLineConfProfileEntry"))
cXdslLineConfProfileEntry.setIndexNames(*adslLineConfProfileEntry.getIndexNames())
if mibBuilder.loadTexts: cXdslLineConfProfileEntry.setStatus('current')
cXdslLineConfPayloadScrambled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cXdslLineConfPayloadScrambled.setStatus('current')
cXdslLineConfAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cXdslLineConfAlarmsEnabled.setStatus('current')
cXdslLineConfLinkUpDownTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cXdslLineConfLinkUpDownTrap.setStatus('current')
ciscoXdslLineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 3))
ciscoXdslLineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 1))
ciscoXdslLineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2))
ciscoXdslLineMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 1, 1)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslLineGroup"), ("CISCO-XDSL-LINE-MIB", "cXdslLineConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoXdslLineMIBCompliance = ciscoXdslLineMIBCompliance.setStatus('current')
cXdslLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 1)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslLineTimeSinceLastChange"), ("CISCO-XDSL-LINE-MIB", "cXdslLineNoOfChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslLineGroup = cXdslLineGroup.setStatus('current')
cXdslLineConfProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 2)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslLineConfPayloadScrambled"), ("CISCO-XDSL-LINE-MIB", "cXdslLineConfAlarmsEnabled"), ("CISCO-XDSL-LINE-MIB", "cXdslLineConfLinkUpDownTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslLineConfProfileGroup = cXdslLineConfProfileGroup.setStatus('current')
cXdslTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 3)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslTestStatus"), ("CISCO-XDSL-LINE-MIB", "cXdslTestType"), ("CISCO-XDSL-LINE-MIB", "cXdslTestTrigger"), ("CISCO-XDSL-LINE-MIB", "cXdslTestTime"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertErrors"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertBitErrors"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertRunTime"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslTestGroup = cXdslTestGroup.setStatus('current')
cXdslModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 4)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslModeLoopback"), ("CISCO-XDSL-LINE-MIB", "cXdslModeSpectrum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslModeGroup = cXdslModeGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-XDSL-LINE-MIB", ciscoXdslLineMIBConformance=ciscoXdslLineMIBConformance, cXdslModeLoopback=cXdslModeLoopback, cXdslTestEntry=cXdslTestEntry, cXdslLineTable=cXdslLineTable, cXdslLineConfLinkUpDownTrap=cXdslLineConfLinkUpDownTrap, cXdslTestStatus=cXdslTestStatus, PYSNMP_MODULE_ID=ciscoXdslLineMIB, ciscoXdslLineMIBCompliances=ciscoXdslLineMIBCompliances, cXdslTestTrigger=cXdslTestTrigger, cXdslTestType=cXdslTestType, cXdslTestGroup=cXdslTestGroup, cXdslLineConfPayloadScrambled=cXdslLineConfPayloadScrambled, cXdslLineEntry=cXdslLineEntry, cXdslLineTimeSinceLastChange=cXdslLineTimeSinceLastChange, ciscoXdslLineMIBObjects=ciscoXdslLineMIBObjects, cXdslTestBertRunTime=cXdslTestBertRunTime, cXdslLineConfProfileTable=cXdslLineConfProfileTable, cXdslTestTime=cXdslTestTime, ciscoXdslLineMIB=ciscoXdslLineMIB, cXdslTestBertErrors=cXdslTestBertErrors, cXdslLineGroup=cXdslLineGroup, cXdslLineNoOfChanges=cXdslLineNoOfChanges, cXdslTestBertBitRate=cXdslTestBertBitRate, cXdslModeEntry=cXdslModeEntry, cXdslLineConfAlarmsEnabled=cXdslLineConfAlarmsEnabled, cXdslLineConfProfileGroup=cXdslLineConfProfileGroup, cXdslTestBertBitErrors=cXdslTestBertBitErrors, ciscoXdslLineMIBGroups=ciscoXdslLineMIBGroups, ciscoXdslLineMIBCompliance=ciscoXdslLineMIBCompliance, cXdslModeTable=cXdslModeTable, cXdslModeSpectrum=cXdslModeSpectrum, cXdslLineConfProfileEntry=cXdslLineConfProfileEntry, cXdslModeGroup=cXdslModeGroup, cXdslTestTable=cXdslTestTable)
