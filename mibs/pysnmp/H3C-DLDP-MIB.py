#
# PySNMP MIB module H3C-DLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-DLDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:08:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, Counter64, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, IpAddress, Bits, Unsigned32, Integer32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter64", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "IpAddress", "Bits", "Unsigned32", "Integer32", "ObjectIdentity", "iso")
TextualConvention, TruthValue, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString")
h3cDldp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43))
h3cDldp.setRevisions(('2004-12-13 00:00',))
if mibBuilder.loadTexts: h3cDldp.setLastUpdated('200412130000Z')
if mibBuilder.loadTexts: h3cDldp.setOrganization('Huawei 3Com Technologies Co., Ltd.')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class DLDPStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("initial", 1), ("inactive", 2), ("active", 3), ("advertisement", 4), ("probe", 5), ("disable", 6))

class DLDPNeighborStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unidirection", 1), ("bidirection", 2), ("unknown", 3))

h3cDLDPMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1))
h3cDLDPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1))
h3cDLDPWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("enhance", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPWorkMode.setStatus('current')
h3cDLDPSystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPSystemEnable.setStatus('current')
h3cDLDPSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPSystemReset.setStatus('current')
h3cDLDPInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPInterval.setStatus('current')
h3cDLDPAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPAuthenticationMode.setStatus('current')
h3cDLDPAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPAuthenticationPassword.setStatus('current')
h3cDLDPUnidirectionalShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPUnidirectionalShutdown.setStatus('current')
h3cDLDPPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 2), )
if mibBuilder.loadTexts: h3cDLDPPortStateTable.setStatus('current')
h3cDLDPPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPPortStateEntry.setStatus('current')
h3cDLDPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 2, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPPortState.setStatus('current')
h3cDLDPPortDLDPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3), )
if mibBuilder.loadTexts: h3cDLDPPortDLDPTable.setStatus('current')
h3cDLDPPortDLDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPPortDLDPEntry.setStatus('current')
h3cDLDPPortDLDPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1, 1), DLDPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPPortDLDPState.setStatus('current')
h3cDLDPLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPLinkState.setStatus('current')
h3cDLDPPortDLDPReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPPortDLDPReset.setStatus('current')
h3cDLDPNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4), )
if mibBuilder.loadTexts: h3cDLDPNeighborTable.setStatus('current')
h3cDLDPNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-DLDP-MIB", "h3cDLDPNeighborBridgeMac"), (0, "H3C-DLDP-MIB", "h3cDLDPNeighborPortIndex"))
if mibBuilder.loadTexts: h3cDLDPNeighborEntry.setStatus('current')
h3cDLDPNeighborBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDLDPNeighborBridgeMac.setStatus('current')
h3cDLDPNeighborPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cDLDPNeighborPortIndex.setStatus('current')
h3cDLDPNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 3), DLDPNeighborStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPNeighborState.setStatus('current')
h3cDLDPNeighborAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPNeighborAgingTime.setStatus('current')
h3cDLDPTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 2))
h3cDLDPNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 2, 1))
h3cDLDPUnidirectionalPort = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 2, 1, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPUnidirectionalPort.setStatus('current')
mibBuilder.exportSymbols("H3C-DLDP-MIB", h3cDLDPPortState=h3cDLDPPortState, EnabledStatus=EnabledStatus, h3cDLDPPortDLDPTable=h3cDLDPPortDLDPTable, h3cDLDPNeighborAgingTime=h3cDLDPNeighborAgingTime, h3cDLDPPortDLDPState=h3cDLDPPortDLDPState, h3cDLDPNeighborEntry=h3cDLDPNeighborEntry, h3cDLDPWorkMode=h3cDLDPWorkMode, h3cDLDPNeighborState=h3cDLDPNeighborState, h3cDLDPInterval=h3cDLDPInterval, h3cDLDPNotification=h3cDLDPNotification, h3cDLDPAuthenticationMode=h3cDLDPAuthenticationMode, h3cDLDPPortStateEntry=h3cDLDPPortStateEntry, h3cDLDPPortStateTable=h3cDLDPPortStateTable, h3cDLDPNeighborTable=h3cDLDPNeighborTable, DLDPNeighborStatus=DLDPNeighborStatus, h3cDldp=h3cDldp, h3cDLDPPortDLDPEntry=h3cDLDPPortDLDPEntry, h3cDLDPLinkState=h3cDLDPLinkState, h3cDLDPNeighborPortIndex=h3cDLDPNeighborPortIndex, h3cDLDPTrapObject=h3cDLDPTrapObject, h3cDLDPSystemEnable=h3cDLDPSystemEnable, PYSNMP_MODULE_ID=h3cDldp, h3cDLDPSystemReset=h3cDLDPSystemReset, DLDPStatus=DLDPStatus, h3cDLDPUnidirectionalPort=h3cDLDPUnidirectionalPort, h3cDLDPConfigGroup=h3cDLDPConfigGroup, h3cDLDPMibObject=h3cDLDPMibObject, h3cDLDPUnidirectionalShutdown=h3cDLDPUnidirectionalShutdown, h3cDLDPPortDLDPReset=h3cDLDPPortDLDPReset, h3cDLDPNeighborBridgeMac=h3cDLDPNeighborBridgeMac, h3cDLDPAuthenticationPassword=h3cDLDPAuthenticationPassword)
