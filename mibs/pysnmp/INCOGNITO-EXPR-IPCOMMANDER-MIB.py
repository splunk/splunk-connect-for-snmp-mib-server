#
# PySNMP MIB module INCOGNITO-EXPR-IPCOMMANDER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INCOGNITO-EXPR-IPCOMMANDER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
incognitoExpr, = mibBuilder.importSymbols("INCOGNITO-MIB", "incognitoExpr")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, ModuleIdentity, ObjectIdentity, Gauge32, Counter64, iso, IpAddress, NotificationType, MibIdentifier, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "ModuleIdentity", "ObjectIdentity", "Gauge32", "Counter64", "iso", "IpAddress", "NotificationType", "MibIdentifier", "Unsigned32", "Counter32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
incognitoIPC = ModuleIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1))
incognitoIPC.setRevisions(('2008-02-13 18:02', '2008-05-07 18:34', '2009-05-08 17:00', '2009-07-30 11:00', '2009-09-15 09:00', '2009-11-06 09:00', '2009-11-06 09:00',))
if mibBuilder.loadTexts: incognitoIPC.setLastUpdated('201001111600Z')
if mibBuilder.loadTexts: incognitoIPC.setOrganization('Incognito Software Inc.')
draftServerMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 1))
if mibBuilder.loadTexts: draftServerMIB.setStatus('current')
ipcServerObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2))
if mibBuilder.loadTexts: ipcServerObjects.setStatus('current')
ipcNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3))
if mibBuilder.loadTexts: ipcNotificationPrefix.setStatus('current')
ipcTimeOfDayServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5))
if mibBuilder.loadTexts: ipcTimeOfDayServer.setStatus('current')
ipcDeprecatedNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99))
if mibBuilder.loadTexts: ipcDeprecatedNotificationPrefix.setStatus('current')
ipcFailover = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100))
if mibBuilder.loadTexts: ipcFailover.setStatus('current')
ipcDHCPStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2))
if mibBuilder.loadTexts: ipcDHCPStatistics.setStatus('current')
ipcConfiguration = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 3))
if mibBuilder.loadTexts: ipcConfiguration.setStatus('current')
ipcNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 4))
if mibBuilder.loadTexts: ipcNotifyObjects.setStatus('current')
ipcDeprecatedNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99))
if mibBuilder.loadTexts: ipcDeprecatedNotifyObjects.setStatus('current')
ipcServiceStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 101))
if mibBuilder.loadTexts: ipcServiceStatistics.setStatus('current')
ipcServiceInformation = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102))
if mibBuilder.loadTexts: ipcServiceInformation.setStatus('current')
ipcFailoverStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1))
if mibBuilder.loadTexts: ipcFailoverStatistics.setStatus('current')
ipcFailoverSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1))
if mibBuilder.loadTexts: ipcFailoverSummaryStatistics.setStatus('current')
ipcFailoverProtocolStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 2))
if mibBuilder.loadTexts: ipcFailoverProtocolStatistics.setStatus('current')
ipcFailoverTimerSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1))
if mibBuilder.loadTexts: ipcFailoverTimerSummaryStatistics.setStatus('current')
ipcFailoverErrorSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2))
if mibBuilder.loadTexts: ipcFailoverErrorSummaryStatistics.setStatus('current')
ipcFailoverTimeDownSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3))
if mibBuilder.loadTexts: ipcFailoverTimeDownSummaryStatistics.setStatus('current')
ipcFailoverResynchSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4))
if mibBuilder.loadTexts: ipcFailoverResynchSummaryStatistics.setStatus('current')
ipcFailoverTimeupSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5))
if mibBuilder.loadTexts: ipcFailoverTimeupSummaryStatistics.setStatus('current')
ipcFailoverRecdSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6))
if mibBuilder.loadTexts: ipcFailoverRecdSummaryStatistics.setStatus('current')
ipcFailoverSentSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7))
if mibBuilder.loadTexts: ipcFailoverSentSummaryStatistics.setStatus('current')
ipcFailoverTrafficSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8))
if mibBuilder.loadTexts: ipcFailoverTrafficSummaryStatistics.setStatus('current')
ipcFailoverStatusSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 9))
if mibBuilder.loadTexts: ipcFailoverStatusSummaryStatistics.setStatus('current')
ipcFailStatLastStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastStartTime.setStatus('current')
ipcFailStatLastSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastSyncTime.setStatus('current')
ipcFailStatLastTestTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastTestTime.setStatus('current')
ipcFailStatLastDownTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastDownTime.setStatus('current')
ipcFailStatLastUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastUpTime.setStatus('current')
ipcFailStatSendErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSendErrors.setStatus('current')
ipcFailStatRecvErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecvErrors.setStatus('current')
ipcFailStatPlatformMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatPlatformMismatchErrors.setStatus('current')
ipcFailStatVersionMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatVersionMismatchErrors.setStatus('current')
ipcFailStatRoleMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRoleMismatchErrors.setStatus('current')
ipcFailStatCRC1Errors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCRC1Errors.setStatus('current')
ipcFailStatCRC2Errors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCRC2Errors.setStatus('current')
ipcFailStatDecryptErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatDecryptErrors.setStatus('current')
ipcFailStatAccessDeniedErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatAccessDeniedErrors.setStatus('current')
ipcFailStatTotalTimeDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTotalTimeDown.setStatus('current')
ipcFailStatLongestTimeDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLongestTimeDown.setStatus('current')
ipcFailStatCountTimeDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCountTimeDown.setStatus('current')
ipcFailStatTotalResynch = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTotalResynch.setStatus('current')
ipcFailStatLongestResynch = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLongestResynch.setStatus('current')
ipcFailStatCountResynch = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCountResynch.setStatus('current')
ipcFailStatTotalTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTotalTimeUp.setStatus('current')
ipcFailStatLongestTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLongestTimeUp.setStatus('current')
ipcFailStatCountTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCountTimeUp.setStatus('current')
ipcFailStatRecdHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdHeartbeats.setStatus('current')
ipcFailStatRecdTestRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdTestRequests.setStatus('current')
ipcFailStatRecdTestReplies = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdTestReplies.setStatus('current')
ipcFailStatRecdDataTxRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTxRequests.setStatus('current')
ipcFailStatRecdDataTxData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTxData.setStatus('current')
ipcFailStatRecdDataTxAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTxAcks.setStatus('current')
ipcFailStatRecdDataTransactionData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTransactionData.setStatus('current')
ipcFailStatRecdDataTransactionAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTransactionAcks.setStatus('current')
ipcFailStatRecdDataConflicts = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataConflicts.setStatus('current')
ipcFailStatRecdDataConflictAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataConflictAcks.setStatus('current')
ipcFailStatRecdDataResynchRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataResynchRequests.setStatus('current')
ipcFailStatRecdDataResynchAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataResynchAcks.setStatus('current')
ipcFailStatRecdShuttingDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdShuttingDown.setStatus('current')
ipcFailStatSentHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentHeartbeats.setStatus('current')
ipcFailStatSentTestRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentTestRequests.setStatus('current')
ipcFailStatSentTestReplies = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentTestReplies.setStatus('current')
ipcFailStatSentDataTxRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTxRequests.setStatus('current')
ipcFailStatSentDataTxData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTxData.setStatus('current')
ipcFailStatSentDataTxAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTxAcks.setStatus('current')
ipcFailStatSentDataTransactionData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTransactionData.setStatus('current')
ipcFailStatSentDataTransactionAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTransactionAcks.setStatus('current')
ipcFailStatSentDataConflicts = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataConflicts.setStatus('current')
ipcFailStatSentDataConflictAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataConflictAcks.setStatus('current')
ipcFailStatSentDataResynchRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataResynchRequests.setStatus('current')
ipcFailStatSentDataResynchAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataResynchAcks.setStatus('current')
ipcFailStatSentShuttingDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentShuttingDown.setStatus('current')
ipcFailStatBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatBytesSent.setStatus('current')
ipcFailStatBytesRecd = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatBytesRecd.setStatus('current')
ipcFailStatTxSent = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTxSent.setStatus('current')
ipcFailStatTxRecd = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTxRecd.setStatus('current')
ipcFailStatStatus = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatStatus.setStatus('current')
ipcFailStatOperation = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatOperation.setStatus('current')
ipcDHCPPacketStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1))
if mibBuilder.loadTexts: ipcDHCPPacketStatistics.setStatus('current')
ipcDHCPPacketDiscardStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1))
if mibBuilder.loadTexts: ipcDHCPPacketDiscardStatistics.setStatus('current')
ipcDHCPDiscoverPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDiscoverPacketDiscards.setStatus('current')
ipcDHCPRequestPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPRequestPacketDiscards.setStatus('current')
ipcDHCPInformPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPInformPacketDiscards.setStatus('current')
ipcDHCPDeclinePacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDeclinePacketDiscards.setStatus('current')
ipcDHCPOtherPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPOtherPacketDiscards.setStatus('current')
ipcDHCPPacketSupercedeStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2))
if mibBuilder.loadTexts: ipcDHCPPacketSupercedeStatistics.setStatus('current')
ipcDHCPDiscoverPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDiscoverPacketSupercedes.setStatus('current')
ipcDHCPRequestPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPRequestPacketSupercedes.setStatus('current')
ipcDHCPInformPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPInformPacketSupercedes.setStatus('current')
ipcDHCPDeclinePacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDeclinePacketSupercedes.setStatus('current')
ipcDHCPOtherPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPOtherPacketSupercedes.setStatus('current')
ipcDHCPPacketResponseStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3))
if mibBuilder.loadTexts: ipcDHCPPacketResponseStatistics.setStatus('current')
ipcDHCPBOOTPPacketResponseAvg1minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg1minTime.setStatus('current')
ipcDHCPBOOTPPacketResponseAvg5minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg5minTime.setStatus('current')
ipcDHCPBOOTPPacketResponseAvg15minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg15minTime.setStatus('current')
ipcDHCPDHCPv4PacketResponseAvg1minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg1minTime.setStatus('current')
ipcDHCPDHCPv4PacketResponseAvg5minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg5minTime.setStatus('current')
ipcDHCPDHCPv4PacketResponseAvg15minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg15minTime.setStatus('current')
ipcConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4))
if mibBuilder.loadTexts: ipcConformance.setStatus('current')
todServerObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1))
if mibBuilder.loadTexts: todServerObjects.setStatus('current')
todClientObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 2))
if mibBuilder.loadTexts: todClientObjects.setStatus('current')
todCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 1))
if mibBuilder.loadTexts: todCounters.setStatus('current')
todCountTcpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todCountTcpRequests.setStatus('current')
todCountUdpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todCountUdpRequests.setStatus('current')
ipcServiceLeasesInUse = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 101, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceLeasesInUse.setStatus('current')
ipcServiceServerName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceServerName.setStatus('current')
ipcServiceName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceName.setStatus('current')
ipcServiceVersion = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceVersion.setStatus('current')
ipcServiceLicenseUsers = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceLicenseUsers.setStatus('current')
ipcServiceSubscriptionExpiration = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceSubscriptionExpiration.setStatus('current')
ipcServiceLicenseType = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceLicenseType.setStatus('current')
ipcServiceOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceOperatingSystem.setStatus('current')
ipcServiceStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceStartTime.setStatus('current')
todServerNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 2))
todServerConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3))
if mibBuilder.loadTexts: todServerConformance.setStatus('current')
todServerCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 1))
todServerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 2))
todServerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 1, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "todServerCounterObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todServerCompliance = todServerCompliance.setStatus('current')
todServerCounterObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 2, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "todCountTcpRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "todCountUdpRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todServerCounterObjects = todServerCounterObjects.setStatus('current')
ipcServiceStatisticsConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1))
if mibBuilder.loadTexts: ipcServiceStatisticsConformance.setStatus('current')
ipcServiceStatisticsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 1))
ipcServiceSatisticsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 2))
ipcServiceInformationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 3))
ipcServiceStatisticsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 1, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceStatisticsObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcServiceStatisticsCompliance = ipcServiceStatisticsCompliance.setStatus('current')
ipcServiceStatisticsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 2, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceLeasesInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcServiceStatisticsObjects = ipcServiceStatisticsObjects.setStatus('current')
ipcServiceInformationObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 3, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceServerName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceVersion"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceLicenseUsers"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceSubscriptionExpiration"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceLicenseType"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceOperatingSystem"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcServiceInformationObjects = ipcServiceInformationObjects.setStatus('current')
ipcPausedTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 4, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcPausedTime.setStatus('current')
ipcResumedTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 4, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcResumedTime.setStatus('current')
ipcNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3, 0))
if mibBuilder.loadTexts: ipcNotifications.setStatus('current')
ipcNotifyServerPaused = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3, 0, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcPausedTime"))
if mibBuilder.loadTexts: ipcNotifyServerPaused.setStatus('current')
ipcNotifyServerResumed = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3, 0, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcResumedTime"))
if mibBuilder.loadTexts: ipcNotifyServerResumed.setStatus('current')
ipcDhcpNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1))
if mibBuilder.loadTexts: ipcDhcpNotifyObjects.setStatus('current')
ipcmdDHCPFreeAddressLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressLowThreshold.setStatus('current')
ipcmdDHCPFreeAddressHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressHighThreshold.setStatus('current')
ipcmdDHCPFreeAddressCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressCriticalThreshold.setStatus('current')
ipcmdDHCPFreeAddressValue = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressValue.setStatus('current')
ipcmdDHCPFreeAddressUnits = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("value", 1), ("percent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressUnits.setStatus('current')
ipcmdDHCPRuleID = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRuleID.setStatus('current')
ipcmdDHCPRuleName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRuleName.setStatus('current')
ipcmdDHCPRogueServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerAddress.setStatus('current')
ipcmdDHCPRogueServerNumRequest = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerNumRequest.setStatus('current')
ipcmdDHCPRogueServerRequestTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerRequestTime.setStatus('current')
ipcmdDHCPRogueServerInfo = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerInfo.setStatus('current')
ipcmdDHCPCurrentUserCount = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 12), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPCurrentUserCount.setStatus('current')
ipcmdDHCPLicenseCount = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPLicenseCount.setStatus('current')
ipcmdDHCPExceedingLicenseLimit = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPExceedingLicenseLimit.setStatus('current')
ipcmdDHCPFailoverConflictAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 15), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverConflictAddress.setStatus('current')
ipcmdDHCPNetViewName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPNetViewName.setStatus('current')
ipcmdDHCPCurrentHWM = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 17), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPCurrentHWM.setStatus('current')
ipcmdDHCPFailoverResynchStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverResynchStartTime.setStatus('current')
ipcmdDHCPFailoverResynchEndTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverResynchEndTime.setStatus('current')
ipcmdDHCPDuplicateDeviceHWAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceHWAddress.setStatus('current')
ipcmdDHCPDuplicateDeviceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 21), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceIPAddress.setStatus('current')
ipcmdDHCPDuplicateDeviceRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceRemoteID.setStatus('current')
ipcmdDHCPDuplicateDeviceCircuitID = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceCircuitID.setStatus('current')
ipcmdDHCPDuplicateDeviceGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 24), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceGWAddress.setStatus('current')
ipcmdTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 25), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdTFTPServerAddress.setStatus('current')
ipcmdDHCPFailoverTerminatedReason = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverTerminatedReason.setStatus('current')
ipcmdNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2))
if mibBuilder.loadTexts: ipcmdNotifyObjects.setStatus('current')
ipcmdNotifyServer = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyServer.setStatus('current')
ipcmdNotifyServerType = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dns", 1), ("dhcp", 2), ("ldap", 3), ("mps", 4), ("tftp", 5), ("kdc", 6), ("dhcpRelay", 7), ("cfm", 8), ("cfmproxy", 9), ("unknown", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyServerType.setStatus('current')
ipcmdUnknownIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdUnknownIPAddress.setStatus('current')
ipcmdServerDiskSpaceFreeTotal = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeTotal.setStatus('current')
ipcmdServerDiskSpaceFreeCount = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeCount.setStatus('current')
ipcmdServerDiskSpaceFreeUnits = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("value", 1), ("percent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeUnits.setStatus('current')
ipcmdServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServiceStatus.setStatus('current')
ipcmdNotifyHost = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyHost.setStatus('current')
ipcmdNotifyDevice = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyDevice.setStatus('current')
incognitoNotifyNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0))
if mibBuilder.loadTexts: incognitoNotifyNotifications.setStatus('current')
incognitoIPCMDServerStart = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerStart.setStatus('current')
incognitoIPCMDServerStop = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerStop.setStatus('current')
incognitoIPCMDServicePaused = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 3)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServicePaused.setStatus('current')
incognitoIPCMDServiceResume = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 4)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceResume.setStatus('current')
incognitoIPCMDExceededLicense = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 5)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentUserCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPLicenseCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPExceedingLicenseLimit"))
if mibBuilder.loadTexts: incognitoIPCMDExceededLicense.setStatus('current')
incognitoIPCMDFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 6)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressHighThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"))
if mibBuilder.loadTexts: incognitoIPCMDFreeAddressHigh.setStatus('current')
incognitoIPCMDCriticalAddressLevel = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 7)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressCriticalThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"))
if mibBuilder.loadTexts: incognitoIPCMDCriticalAddressLevel.setStatus('current')
incognitoIPCMDOtherServerResponding = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 8)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDOtherServerResponding.setStatus('current')
incognitoIPCMDOtherServerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 9)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDOtherServerNotResponding.setStatus('current')
incognitoIPCMDFailoverConflict = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 10)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverConflictAddress"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverConflict.setStatus('current')
incognitoIPCMDServiceOverloaded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 11)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceOverloaded.setStatus('current')
incognitoIPCMDServiceCaughtUp = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 12)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceCaughtUp.setStatus('current')
incognitoIPCMDDDNSFailure = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 13)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDDDNSFailure.setStatus('current')
incognitoIPCMDUnknownDevice = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 14)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdUnknownIPAddress"))
if mibBuilder.loadTexts: incognitoIPCMDUnknownDevice.setStatus('current')
incognitoIPCMDRogueServer = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 15)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerNumRequest"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerRequestTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerInfo"))
if mibBuilder.loadTexts: incognitoIPCMDRogueServer.setStatus('current')
incognitoIPCMDDiskStorageLow = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 16)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeTotal"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeUnits"))
if mibBuilder.loadTexts: incognitoIPCMDDiskStorageLow.setStatus('current')
incognitoIPCMDServiceBackupDone = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 17)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceBackupDone.setStatus('current')
incognitoIPCMDFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 18)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressLowThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"))
if mibBuilder.loadTexts: incognitoIPCMDFreeAddressLow.setStatus('current')
incognitoIPCMDFailoverResynchOperationStarted = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 19)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchStartTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverResynchOperationStarted.setStatus('current')
incognitoIPCMDFailoverResynchOperationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 20)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchEndTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverResynchOperationCompleted.setStatus('current')
incognitoIPCMDNetViewCriticalHWMExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 21)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPNetViewName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"))
if mibBuilder.loadTexts: incognitoIPCMDNetViewCriticalHWMExceeded.setStatus('current')
incognitoIPCMDNetViewWarningHWMExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 22)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPNetViewName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"))
if mibBuilder.loadTexts: incognitoIPCMDNetViewWarningHWMExceeded.setStatus('current')
incognitoIPCMDPossibleDuplicateDevice = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 23)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceHWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceIPAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceRemoteID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceCircuitID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceGWAddress"))
if mibBuilder.loadTexts: incognitoIPCMDPossibleDuplicateDevice.setStatus('current')
incognitoIPCMDNoMoreAddressesAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 24)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceHWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceRemoteID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceCircuitID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceGWAddress"))
if mibBuilder.loadTexts: incognitoIPCMDNoMoreAddressesAvailable.setStatus('current')
incognitoIPCMDTFTPServerJoining = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 25)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdTFTPServerAddress"))
if mibBuilder.loadTexts: incognitoIPCMDTFTPServerJoining.setStatus('current')
incognitoIPCMDTFTPServerLeaving = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 26)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdTFTPServerAddress"))
if mibBuilder.loadTexts: incognitoIPCMDTFTPServerLeaving.setStatus('current')
incognitoIPCMDServerJoinClusterIntegration = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 27)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerJoinClusterIntegration.setStatus('current')
incognitoIPCMDServerLeaveClusterIntegration = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 28)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerLeaveClusterIntegration.setStatus('current')
incognitoIPCMDFailoverTerminated = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 29)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverTerminatedReason"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverTerminated.setStatus('current')
incognitoIPCMDLDAPCommunicationsUp = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 30)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPCommunicationsUp.setStatus('current')
incognitoIPCMDLDAPCommunicationsDown = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 31)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPCommunicationsDown.setStatus('current')
incognitoIPCMDLDAPTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 32)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPTimedOut.setStatus('current')
incognitoIPCMDRADIUSAccountingHWMExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 33)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"))
if mibBuilder.loadTexts: incognitoIPCMDRADIUSAccountingHWMExceeded.setStatus('current')
incognitoIPCMDLDAPSetCommunicationsUp = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 34)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPSetCommunicationsUp.setStatus('current')
incognitoIPCMDLDAPSetCommunicationsDown = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 35)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPSetCommunicationsDown.setStatus('current')
incognitoIPCMDDHCPDoSExceededLimit = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 36)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyDevice"))
if mibBuilder.loadTexts: incognitoIPCMDDHCPDoSExceededLimit.setStatus('current')
incognitoIPCMDDHCPDoSBelowLimit = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 37)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyDevice"))
if mibBuilder.loadTexts: incognitoIPCMDDHCPDoSBelowLimit.setStatus('current')
ipcCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 1))
if mibBuilder.loadTexts: ipcCompliances.setStatus('current')
ipcGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2))
if mibBuilder.loadTexts: ipcGroups.setStatus('current')
ipcDeprecatedGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99))
if mibBuilder.loadTexts: ipcDeprecatedGroups.setStatus('current')
ipcNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcResumedTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcPausedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcNotifyObjectsGroup = ipcNotifyObjectsGroup.setStatus('current')
ipcFailoverSummaryStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 3)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastStartTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastSyncTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastTestTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastDownTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastUpTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSendErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecvErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatPlatformMismatchErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatVersionMismatchErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRoleMismatchErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCRC1Errors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCRC2Errors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatDecryptErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatAccessDeniedErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTotalTimeDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLongestTimeDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCountTimeDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTotalResynch"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLongestResynch"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCountResynch"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTotalTimeUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLongestTimeUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCountTimeUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdHeartbeats"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdTestRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdTestReplies"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTxRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTxData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTxAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTransactionData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTransactionAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataConflicts"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataConflictAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataResynchRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataResynchAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdShuttingDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentHeartbeats"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentTestRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentTestReplies"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTxRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTxData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTxAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTransactionData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTransactionAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataConflicts"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataConflictAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataResynchRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataResynchAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentShuttingDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatBytesSent"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatBytesRecd"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTxSent"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTxRecd"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatStatus"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatOperation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcFailoverSummaryStatisticsGroup = ipcFailoverSummaryStatisticsGroup.setStatus('current')
ipcDHCPPacketStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 4)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDiscoverPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPRequestPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPInformPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDeclinePacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPOtherPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDiscoverPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPRequestPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPInformPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDeclinePacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPOtherPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPBOOTPPacketResponseAvg1minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPBOOTPPacketResponseAvg5minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPBOOTPPacketResponseAvg15minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDHCPv4PacketResponseAvg1minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDHCPv4PacketResponseAvg5minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDHCPv4PacketResponseAvg15minTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDHCPPacketStatisticsGroup = ipcDHCPPacketStatisticsGroup.setStatus('current')
ipcNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcNotifyServerResumed"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcNotifyServerPaused"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcNotificationsGroup = ipcNotificationsGroup.setStatus('current')
ipcDeprecatedNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerStart"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerStop"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServicePaused"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceResume"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDExceededLicense"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFreeAddressHigh"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDCriticalAddressLevel"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDOtherServerResponding"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDOtherServerNotResponding"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverConflict"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceOverloaded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceCaughtUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDDNSFailure"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDUnknownDevice"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDRogueServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDiskStorageLow"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceBackupDone"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFreeAddressLow"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverResynchOperationStarted"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverResynchOperationCompleted"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDNetViewCriticalHWMExceeded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDNetViewWarningHWMExceeded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDPossibleDuplicateDevice"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDNoMoreAddressesAvailable"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDTFTPServerLeaving"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDTFTPServerJoining"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerJoinClusterIntegration"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerLeaveClusterIntegration"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverTerminated"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPCommunicationsUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPCommunicationsDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPTimedOut"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDRADIUSAccountingHWMExceeded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPSetCommunicationsUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPSetCommunicationsDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDHCPDoSExceededLimit"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDHCPDoSBelowLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDeprecatedNotificationsGroup = ipcDeprecatedNotificationsGroup.setStatus('current')
ipcDeprecatedNotifyBaseObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressLowThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressHighThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressCriticalThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerNumRequest"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerRequestTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerInfo"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentUserCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPLicenseCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPExceedingLicenseLimit"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverConflictAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPNetViewName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchStartTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchEndTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceHWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceIPAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceRemoteID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceCircuitID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceGWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdTFTPServerAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverTerminatedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDeprecatedNotifyBaseObjectsGroup = ipcDeprecatedNotifyBaseObjectsGroup.setStatus('current')
ipcDeprecatedNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99, 3)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdUnknownIPAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeTotal"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyDevice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDeprecatedNotifyObjectsGroup = ipcDeprecatedNotifyObjectsGroup.setStatus('current')
mibBuilder.exportSymbols("INCOGNITO-EXPR-IPCOMMANDER-MIB", ipcDhcpNotifyObjects=ipcDhcpNotifyObjects, ipcServiceSubscriptionExpiration=ipcServiceSubscriptionExpiration, ipcDHCPBOOTPPacketResponseAvg5minTime=ipcDHCPBOOTPPacketResponseAvg5minTime, incognitoIPCMDServerLeaveClusterIntegration=incognitoIPCMDServerLeaveClusterIntegration, ipcFailoverTimeDownSummaryStatistics=ipcFailoverTimeDownSummaryStatistics, ipcPausedTime=ipcPausedTime, ipcmdNotifyServerType=ipcmdNotifyServerType, ipcFailoverTrafficSummaryStatistics=ipcFailoverTrafficSummaryStatistics, ipcFailoverRecdSummaryStatistics=ipcFailoverRecdSummaryStatistics, ipcFailStatCRC1Errors=ipcFailStatCRC1Errors, ipcFailStatSentDataConflictAcks=ipcFailStatSentDataConflictAcks, ipcDeprecatedNotifyObjectsGroup=ipcDeprecatedNotifyObjectsGroup, ipcFailStatRecdDataTxRequests=ipcFailStatRecdDataTxRequests, ipcDHCPRequestPacketDiscards=ipcDHCPRequestPacketDiscards, ipcFailStatSentDataTxAcks=ipcFailStatSentDataTxAcks, incognitoIPCMDFailoverConflict=incognitoIPCMDFailoverConflict, ipcFailoverSummaryStatistics=ipcFailoverSummaryStatistics, ipcServiceLeasesInUse=ipcServiceLeasesInUse, incognitoIPCMDLDAPSetCommunicationsDown=incognitoIPCMDLDAPSetCommunicationsDown, ipcFailoverStatusSummaryStatistics=ipcFailoverStatusSummaryStatistics, ipcDHCPPacketStatisticsGroup=ipcDHCPPacketStatisticsGroup, ipcFailoverTimerSummaryStatistics=ipcFailoverTimerSummaryStatistics, todServerConformance=todServerConformance, ipcFailStatAccessDeniedErrors=ipcFailStatAccessDeniedErrors, ipcServiceName=ipcServiceName, ipcDHCPPacketResponseStatistics=ipcDHCPPacketResponseStatistics, ipcmdServiceStatus=ipcmdServiceStatus, ipcServiceInformationGroups=ipcServiceInformationGroups, ipcServiceInformationObjects=ipcServiceInformationObjects, ipcServiceStatistics=ipcServiceStatistics, ipcDHCPRequestPacketSupercedes=ipcDHCPRequestPacketSupercedes, incognitoIPCMDCriticalAddressLevel=incognitoIPCMDCriticalAddressLevel, ipcFailStatRecvErrors=ipcFailStatRecvErrors, ipcmdDHCPDuplicateDeviceHWAddress=ipcmdDHCPDuplicateDeviceHWAddress, incognitoIPCMDOtherServerNotResponding=incognitoIPCMDOtherServerNotResponding, ipcDeprecatedNotificationPrefix=ipcDeprecatedNotificationPrefix, ipcFailStatRecdDataResynchAcks=ipcFailStatRecdDataResynchAcks, incognitoIPCMDNoMoreAddressesAvailable=incognitoIPCMDNoMoreAddressesAvailable, ipcFailStatRecdDataConflictAcks=ipcFailStatRecdDataConflictAcks, incognitoIPCMDLDAPTimedOut=incognitoIPCMDLDAPTimedOut, ipcServiceStatisticsConformance=ipcServiceStatisticsConformance, ipcFailStatRecdDataTxData=ipcFailStatRecdDataTxData, incognitoIPCMDServiceBackupDone=incognitoIPCMDServiceBackupDone, ipcFailStatLastUpTime=ipcFailStatLastUpTime, ipcDHCPDHCPv4PacketResponseAvg5minTime=ipcDHCPDHCPv4PacketResponseAvg5minTime, incognitoIPCMDLDAPCommunicationsUp=incognitoIPCMDLDAPCommunicationsUp, todServerObjects=todServerObjects, incognitoIPCMDDHCPDoSExceededLimit=incognitoIPCMDDHCPDoSExceededLimit, ipcFailStatLastTestTime=ipcFailStatLastTestTime, ipcmdDHCPDuplicateDeviceGWAddress=ipcmdDHCPDuplicateDeviceGWAddress, ipcFailStatRecdDataTransactionData=ipcFailStatRecdDataTransactionData, ipcmdDHCPFreeAddressLowThreshold=ipcmdDHCPFreeAddressLowThreshold, ipcFailStatRecdDataTransactionAcks=ipcFailStatRecdDataTransactionAcks, ipcFailStatSentDataConflicts=ipcFailStatSentDataConflicts, ipcFailStatLastDownTime=ipcFailStatLastDownTime, ipcFailStatSendErrors=ipcFailStatSendErrors, incognitoIPC=incognitoIPC, ipcServiceLicenseUsers=ipcServiceLicenseUsers, ipcFailStatCountTimeDown=ipcFailStatCountTimeDown, PYSNMP_MODULE_ID=incognitoIPC, ipcFailStatLongestTimeUp=ipcFailStatLongestTimeUp, todCounters=todCounters, ipcFailStatLastSyncTime=ipcFailStatLastSyncTime, ipcDHCPDHCPv4PacketResponseAvg1minTime=ipcDHCPDHCPv4PacketResponseAvg1minTime, ipcmdDHCPFailoverResynchStartTime=ipcmdDHCPFailoverResynchStartTime, ipcDHCPDiscoverPacketSupercedes=ipcDHCPDiscoverPacketSupercedes, ipcDHCPBOOTPPacketResponseAvg1minTime=ipcDHCPBOOTPPacketResponseAvg1minTime, ipcmdServerDiskSpaceFreeTotal=ipcmdServerDiskSpaceFreeTotal, ipcmdDHCPExceedingLicenseLimit=ipcmdDHCPExceedingLicenseLimit, todCountUdpRequests=todCountUdpRequests, ipcmdDHCPFreeAddressCriticalThreshold=ipcmdDHCPFreeAddressCriticalThreshold, ipcFailStatSentHeartbeats=ipcFailStatSentHeartbeats, incognitoIPCMDNetViewWarningHWMExceeded=incognitoIPCMDNetViewWarningHWMExceeded, incognitoIPCMDFailoverResynchOperationStarted=incognitoIPCMDFailoverResynchOperationStarted, ipcmdDHCPFreeAddressHighThreshold=ipcmdDHCPFreeAddressHighThreshold, ipcDHCPDHCPv4PacketResponseAvg15minTime=ipcDHCPDHCPv4PacketResponseAvg15minTime, incognitoIPCMDPossibleDuplicateDevice=incognitoIPCMDPossibleDuplicateDevice, ipcDeprecatedNotificationsGroup=ipcDeprecatedNotificationsGroup, ipcServerObjects=ipcServerObjects, ipcmdDHCPLicenseCount=ipcmdDHCPLicenseCount, ipcFailStatSentDataTransactionData=ipcFailStatSentDataTransactionData, ipcDHCPBOOTPPacketResponseAvg15minTime=ipcDHCPBOOTPPacketResponseAvg15minTime, ipcServiceOperatingSystem=ipcServiceOperatingSystem, ipcmdDHCPNetViewName=ipcmdDHCPNetViewName, incognitoIPCMDServerStop=incognitoIPCMDServerStop, ipcFailoverTimeupSummaryStatistics=ipcFailoverTimeupSummaryStatistics, ipcConformance=ipcConformance, ipcFailStatTxRecd=ipcFailStatTxRecd, ipcFailStatTotalTimeDown=ipcFailStatTotalTimeDown, ipcDHCPDeclinePacketDiscards=ipcDHCPDeclinePacketDiscards, incognitoIPCMDRogueServer=incognitoIPCMDRogueServer, ipcFailStatSentDataTxRequests=ipcFailStatSentDataTxRequests, ipcFailStatBytesRecd=ipcFailStatBytesRecd, ipcDHCPPacketDiscardStatistics=ipcDHCPPacketDiscardStatistics, ipcmdDHCPRogueServerAddress=ipcmdDHCPRogueServerAddress, ipcServiceStatisticsCompliances=ipcServiceStatisticsCompliances, incognitoIPCMDServicePaused=incognitoIPCMDServicePaused, incognitoIPCMDLDAPSetCommunicationsUp=incognitoIPCMDLDAPSetCommunicationsUp, incognitoIPCMDServiceCaughtUp=incognitoIPCMDServiceCaughtUp, ipcServiceLicenseType=ipcServiceLicenseType, ipcDeprecatedNotifyObjects=ipcDeprecatedNotifyObjects, ipcNotificationPrefix=ipcNotificationPrefix, ipcFailStatSentTestRequests=ipcFailStatSentTestRequests, incognitoIPCMDNetViewCriticalHWMExceeded=incognitoIPCMDNetViewCriticalHWMExceeded, ipcFailoverStatistics=ipcFailoverStatistics, incognitoIPCMDServerJoinClusterIntegration=incognitoIPCMDServerJoinClusterIntegration, ipcServiceServerName=ipcServiceServerName, ipcmdDHCPRuleID=ipcmdDHCPRuleID, ipcFailStatRecdDataResynchRequests=ipcFailStatRecdDataResynchRequests, incognitoIPCMDRADIUSAccountingHWMExceeded=incognitoIPCMDRADIUSAccountingHWMExceeded, draftServerMIB=draftServerMIB, ipcmdDHCPCurrentHWM=ipcmdDHCPCurrentHWM, todServerCounterObjects=todServerCounterObjects, ipcNotifyServerResumed=ipcNotifyServerResumed, ipcNotifications=ipcNotifications, ipcFailStatSentTestReplies=ipcFailStatSentTestReplies, ipcDeprecatedGroups=ipcDeprecatedGroups, ipcmdDHCPFreeAddressValue=ipcmdDHCPFreeAddressValue, ipcGroups=ipcGroups, ipcFailStatTxSent=ipcFailStatTxSent, todServerNotificationPrefix=todServerNotificationPrefix, ipcmdDHCPCurrentUserCount=ipcmdDHCPCurrentUserCount, incognitoIPCMDDHCPDoSBelowLimit=incognitoIPCMDDHCPDoSBelowLimit, incognitoIPCMDUnknownDevice=incognitoIPCMDUnknownDevice, ipcmdDHCPFreeAddressUnits=ipcmdDHCPFreeAddressUnits, ipcFailStatSentShuttingDown=ipcFailStatSentShuttingDown, ipcDHCPDeclinePacketSupercedes=ipcDHCPDeclinePacketSupercedes, ipcCompliances=ipcCompliances, ipcFailoverSummaryStatisticsGroup=ipcFailoverSummaryStatisticsGroup, ipcNotifyObjects=ipcNotifyObjects, ipcFailStatTotalResynch=ipcFailStatTotalResynch, ipcFailStatLongestResynch=ipcFailStatLongestResynch, ipcmdTFTPServerAddress=ipcmdTFTPServerAddress, ipcmdDHCPDuplicateDeviceRemoteID=ipcmdDHCPDuplicateDeviceRemoteID, ipcFailStatPlatformMismatchErrors=ipcFailStatPlatformMismatchErrors, ipcmdDHCPDuplicateDeviceIPAddress=ipcmdDHCPDuplicateDeviceIPAddress, ipcNotifyServerPaused=ipcNotifyServerPaused, ipcFailStatCountTimeUp=ipcFailStatCountTimeUp, ipcFailStatCountResynch=ipcFailStatCountResynch, ipcServiceStatisticsObjects=ipcServiceStatisticsObjects, ipcFailStatDecryptErrors=ipcFailStatDecryptErrors, ipcFailStatVersionMismatchErrors=ipcFailStatVersionMismatchErrors, ipcFailover=ipcFailover, ipcDHCPOtherPacketDiscards=ipcDHCPOtherPacketDiscards, ipcFailoverProtocolStatistics=ipcFailoverProtocolStatistics, ipcFailoverErrorSummaryStatistics=ipcFailoverErrorSummaryStatistics, ipcDHCPPacketSupercedeStatistics=ipcDHCPPacketSupercedeStatistics, incognitoIPCMDServerStart=incognitoIPCMDServerStart, ipcFailStatLongestTimeDown=ipcFailStatLongestTimeDown, ipcFailoverResynchSummaryStatistics=ipcFailoverResynchSummaryStatistics, ipcDHCPOtherPacketSupercedes=ipcDHCPOtherPacketSupercedes, ipcmdNotifyHost=ipcmdNotifyHost, incognitoIPCMDLDAPCommunicationsDown=incognitoIPCMDLDAPCommunicationsDown, ipcFailStatSentDataResynchRequests=ipcFailStatSentDataResynchRequests, ipcDHCPInformPacketSupercedes=ipcDHCPInformPacketSupercedes, ipcDeprecatedNotifyBaseObjectsGroup=ipcDeprecatedNotifyBaseObjectsGroup, ipcConfiguration=ipcConfiguration, incognitoIPCMDFreeAddressHigh=incognitoIPCMDFreeAddressHigh, ipcmdDHCPFailoverResynchEndTime=ipcmdDHCPFailoverResynchEndTime, incognitoIPCMDFailoverTerminated=incognitoIPCMDFailoverTerminated, ipcmdServerDiskSpaceFreeUnits=ipcmdServerDiskSpaceFreeUnits, todServerGroups=todServerGroups, ipcDHCPPacketStatistics=ipcDHCPPacketStatistics, incognitoNotifyNotifications=incognitoNotifyNotifications, incognitoIPCMDServiceResume=incognitoIPCMDServiceResume, ipcmdDHCPFailoverConflictAddress=ipcmdDHCPFailoverConflictAddress, ipcFailStatCRC2Errors=ipcFailStatCRC2Errors, todServerCompliance=todServerCompliance, ipcNotifyObjectsGroup=ipcNotifyObjectsGroup, ipcFailoverSentSummaryStatistics=ipcFailoverSentSummaryStatistics, ipcServiceStartTime=ipcServiceStartTime, todCountTcpRequests=todCountTcpRequests, ipcServiceSatisticsGroups=ipcServiceSatisticsGroups, incognitoIPCMDOtherServerResponding=incognitoIPCMDOtherServerResponding, ipcmdDHCPDuplicateDeviceCircuitID=ipcmdDHCPDuplicateDeviceCircuitID, ipcDHCPDiscoverPacketDiscards=ipcDHCPDiscoverPacketDiscards, ipcmdUnknownIPAddress=ipcmdUnknownIPAddress, incognitoIPCMDFreeAddressLow=incognitoIPCMDFreeAddressLow, incognitoIPCMDFailoverResynchOperationCompleted=incognitoIPCMDFailoverResynchOperationCompleted, ipcNotificationsGroup=ipcNotificationsGroup, ipcFailStatRecdHeartbeats=ipcFailStatRecdHeartbeats, ipcmdDHCPFailoverTerminatedReason=ipcmdDHCPFailoverTerminatedReason, ipcmdNotifyServer=ipcmdNotifyServer, ipcServiceVersion=ipcServiceVersion, incognitoIPCMDDiskStorageLow=incognitoIPCMDDiskStorageLow, ipcFailStatRecdDataConflicts=ipcFailStatRecdDataConflicts, ipcFailStatStatus=ipcFailStatStatus, ipcmdNotifyDevice=ipcmdNotifyDevice, ipcResumedTime=ipcResumedTime, ipcFailStatRoleMismatchErrors=ipcFailStatRoleMismatchErrors, ipcServiceStatisticsCompliance=ipcServiceStatisticsCompliance, incognitoIPCMDExceededLicense=incognitoIPCMDExceededLicense, ipcFailStatRecdTestReplies=ipcFailStatRecdTestReplies, ipcTimeOfDayServer=ipcTimeOfDayServer, ipcFailStatSentDataResynchAcks=ipcFailStatSentDataResynchAcks, ipcDHCPStatistics=ipcDHCPStatistics, ipcFailStatRecdTestRequests=ipcFailStatRecdTestRequests, ipcDHCPInformPacketDiscards=ipcDHCPInformPacketDiscards, ipcmdDHCPRogueServerRequestTime=ipcmdDHCPRogueServerRequestTime, incognitoIPCMDDDNSFailure=incognitoIPCMDDDNSFailure, ipcFailStatSentDataTxData=ipcFailStatSentDataTxData, ipcmdServerDiskSpaceFreeCount=ipcmdServerDiskSpaceFreeCount, ipcFailStatLastStartTime=ipcFailStatLastStartTime, ipcFailStatRecdDataTxAcks=ipcFailStatRecdDataTxAcks, todClientObjects=todClientObjects, ipcmdDHCPRogueServerNumRequest=ipcmdDHCPRogueServerNumRequest, incognitoIPCMDServiceOverloaded=incognitoIPCMDServiceOverloaded, ipcFailStatRecdShuttingDown=ipcFailStatRecdShuttingDown, ipcFailStatOperation=ipcFailStatOperation, incognitoIPCMDTFTPServerJoining=incognitoIPCMDTFTPServerJoining, ipcFailStatBytesSent=ipcFailStatBytesSent, ipcFailStatSentDataTransactionAcks=ipcFailStatSentDataTransactionAcks, ipcmdNotifyObjects=ipcmdNotifyObjects, incognitoIPCMDTFTPServerLeaving=incognitoIPCMDTFTPServerLeaving, ipcmdDHCPRuleName=ipcmdDHCPRuleName, todServerCompliances=todServerCompliances, ipcFailStatTotalTimeUp=ipcFailStatTotalTimeUp, ipcServiceInformation=ipcServiceInformation, ipcmdDHCPRogueServerInfo=ipcmdDHCPRogueServerInfo)
