#
# PySNMP MIB module DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
device, coriolisMibs = mibBuilder.importSymbols("CORIOLIS-MIB", "device", "coriolisMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, ObjectIdentity, MibIdentifier, iso, ModuleIdentity, Integer32, IpAddress, Counter32, Unsigned32, TimeTicks, Counter64, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "ObjectIdentity", "MibIdentifier", "iso", "ModuleIdentity", "Integer32", "IpAddress", "Counter32", "Unsigned32", "TimeTicks", "Counter64", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
deviceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 1, 1))
if mibBuilder.loadTexts: deviceMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: deviceMIB.setOrganization('Coriolis Networks')
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 5812, 1, 2))
systime = MibIdentifier((1, 3, 6, 1, 4, 1, 5812, 1, 3))
chassisAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisAutoConfig.setStatus('current')
chassisIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisIpAddr.setStatus('current')
chassisId = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 21, 25))).clone(namedValues=NamedValues(("optiFlow5500", 1), ("optiFlow5000", 2), ("optiFlow3500", 3), ("optiFlow3000", 4), ("optiFlow3500thirteen", 5), ("optiFlow3000thirteen", 6), ("optiFlow1010", 21), ("optiFlow1020", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisId.setStatus('current')
chassisCharacter = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gne", 1), ("ne", 2), ("sne", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisCharacter.setStatus('current')
chassisElemReachStatus = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reachable", 1), ("unreachable", 2))))
if mibBuilder.loadTexts: chassisElemReachStatus.setStatus('current')
chassisNumElemReachable = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNumElemReachable.setStatus('current')
chassisCurrentCharacter = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gne", 1), ("ne", 2), ("sne", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCurrentCharacter.setStatus('current')
chassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("good", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chassisFanStatus.setStatus('current')
chassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 1, 2, 10), )
if mibBuilder.loadTexts: chassisPowerSupplyTable.setStatus('current')
chassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 1, 2, 10, 1), ).setIndexNames((0, "DEVICE-MIB", "chassisPowerSupplyNumber"))
if mibBuilder.loadTexts: chassisPowerSupplyEntry.setStatus('current')
chassisPowerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: chassisPowerSupplyNumber.setStatus('current')
chassisPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("present", 1), ("absent", 2), ("tempHot", 3), ("tempNorm", 4), ("fault", 5), ("noFault", 6), ("fail", 7), ("noFail", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chassisPowerSupplyStatus.setStatus('current')
chassisFWStatus = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("ok", 0), ("bad-host", 1), ("net-drv", 2), ("file-not-found", 3), ("task-not-found", 4), ("read-error", 5), ("unknown-image-type", 6), ("out-of-memory", 7), ("write-error", 8), ("busy", 9), ("spawn-failed", 10), ("in-progress", 11), ("state-error", 12), ("bad-ip-addr", 13), ("bad-msg", 14), ("unknown-msg", 15), ("retries-expired", 16), ("reg-ipc", 17), ("fault", 18), ("lock-failure", 19), ("locked", 20), ("invalid-image-header", 21), ("crc-mismatch", 22), ("not-a-gne", 23), ("signature-mismatch", 24), ("last-instance", 25), ("init-not-complete", 26), ("abort", 27), ("pending", 28)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chassisFWStatus.setStatus('current')
ringFWStatus = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("ok", 0), ("bad-host", 1), ("net-drv", 2), ("file-not-found", 3), ("task-not-found", 4), ("read-error", 5), ("unknown-image-type", 6), ("out-of-memory", 7), ("write-error", 8), ("busy", 9), ("spawn-failed", 10), ("in-progress", 11), ("state-error", 12), ("bad-ip-addr", 13), ("bad-msg", 14), ("unknown-msg", 15), ("retries-expired", 16), ("reg-ipc", 17), ("fault", 18), ("lock-failure", 19), ("locked", 20), ("invalid-image-header", 21), ("crc-mismatch", 22), ("not-a-gne", 23), ("signature-mismatch", 24), ("last-instance", 25), ("init-not-complete", 26), ("abort", 27), ("pending", 28)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ringFWStatus.setStatus('current')
ftpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 13), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ftpServerIP.setStatus('current')
controlFilePath = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: controlFilePath.setStatus('current')
versionString = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: versionString.setStatus('current')
syslogUnknownEvent = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogUnknownEvent.setStatus('current')
syslogUnknownVersion = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: syslogUnknownVersion.setStatus('current')
chassisRoutingProt = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("rip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisRoutingProt.setStatus('current')
chassisSubnetIp = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSubnetIp.setStatus('current')
chassisSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSubnetMask.setStatus('current')
chassisRingsOnMaster = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisRingsOnMaster.setStatus('current')
chassisCurrentRingsOnMaster = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCurrentRingsOnMaster.setStatus('current')
chassisFailoverPreserveRings = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 2, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisFailoverPreserveRings.setStatus('current')
systimeTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tmExt", 1), ("tmLine", 2), ("tmFreerun", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeTimingMode.setStatus('current')
systimePriBITSFraming = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("t1SF", 1), ("t1ESF4K", 2), ("t1T1DM", 3), ("t1T1DMAlt", 4), ("t1SLC96", 5), ("e1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriBITSFraming.setStatus('current')
systimeSecBITSFraming = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("t1SF", 1), ("t1ESF4K", 2), ("t1T1DM", 3), ("t1T1DMAlt", 4), ("t1SLC96", 5), ("e1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecBITSFraming.setStatus('current')
systimePriBITSCoding = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriBITSCoding.setStatus('current')
systimeSecBITSCoding = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecBITSCoding.setStatus('current')
systimePriClkSrcId = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriClkSrcId.setStatus('current')
systimeSecClkSrcId = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecClkSrcId.setStatus('current')
systimeClkReference = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("crAuto", 1), ("crPri", 2), ("crSec", 3), ("crHoldover", 4), ("crStandby", 5), ("crStandbypri", 6), ("crStandbysec", 7), ("crFreerun", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeClkReference.setStatus('current')
systimeClkRevertive = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeClkRevertive.setStatus('current')
systimeStandbyClkEnable = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeStandbyClkEnable.setStatus('current')
systimePriCSNVTime = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriCSNVTime.setStatus('current')
systimeSecCSNVTime = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecCSNVTime.setStatus('current')
systimePriCSHVTime = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriCSHVTime.setStatus('current')
systimeSecCSHVTime = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecCSHVTime.setStatus('current')
systimePriCSUseLimit = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriCSUseLimit.setStatus('current')
systimeSecCSUseLimit = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecCSUseLimit.setStatus('current')
systimeStandbyCSUseLimit = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeStandbyCSUseLimit.setStatus('current')
systimePriCSUseInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimePriCSUseInterval.setStatus('current')
systimeSecCSUseInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeSecCSUseInterval.setStatus('current')
systimeStandbyCSUseInterval = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeStandbyCSUseInterval.setStatus('current')
systimeCREventEnable = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systimeCREventEnable.setStatus('current')
systimeCRInUse = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("crAuto", 1), ("crPri", 2), ("crSec", 3), ("crHoldover", 4), ("crStandby", 5), ("crStandbypri", 6), ("crStandbysec", 7), ("crFreerun", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systimeCRInUse.setStatus('current')
systimeCRUsedCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systimeCRUsedCount.setStatus('current')
deviceNMSTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 1, 4), )
if mibBuilder.loadTexts: deviceNMSTable.setStatus('current')
deviceNMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1), ).setIndexNames((0, "DEVICE-MIB", "deviceNMSIndex"))
if mibBuilder.loadTexts: deviceNMSEntry.setStatus('current')
deviceNMSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: deviceNMSIndex.setStatus('current')
deviceNMSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceNMSIpAddress.setStatus('current')
deviceNMSAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessTypeTrapEnabled", 1), ("accessTypeTrapDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceNMSAccessType.setStatus('current')
deviceNMSMIBIITrapList = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceNMSMIBIITrapList.setStatus('current')
deviceNMSEnterpriseTrapList = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceNMSEnterpriseTrapList.setStatus('current')
deviceNMSTrapSevAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trapSevClear", 1), ("trapSevInfo", 2), ("trapSevWarning", 3), ("trapSevMinor", 4), ("trapSevMajor", 5), ("trapSevCritical", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceNMSTrapSevAllowed.setStatus('current')
sysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 5812, 1, 5))
numBytesFree = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesFree.setStatus('current')
numBlocksFree = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksFree.setStatus('current')
avgBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeFree.setStatus('current')
maxBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockSizeFree.setStatus('current')
numBytesAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesAlloc.setStatus('current')
numBlocksAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksAlloc.setStatus('current')
avgBlockSizeAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeAlloc.setStatus('current')
memUtilization = MibScalar((1, 3, 6, 1, 4, 1, 5812, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUtilization.setStatus('current')
sysTask = MibIdentifier((1, 3, 6, 1, 4, 1, 5812, 1, 6))
taskTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1), )
if mibBuilder.loadTexts: taskTable.setStatus('current')
taskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1), ).setIndexNames((0, "DEVICE-MIB", "taskId"))
if mibBuilder.loadTexts: taskEntry.setStatus('current')
taskId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskId.setStatus('current')
taskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskName.setStatus('current')
taskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskPriority.setStatus('current')
taskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("task-ready", 1), ("task-suspended", 2), ("task-delay", 3), ("task-deleted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskStatus.setStatus('current')
taskOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskOptions.setStatus('current')
taskMain = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskMain.setStatus('current')
taskStackPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPtr.setStatus('current')
taskStackBase = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackBase.setStatus('current')
taskStackPos = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPos.setStatus('current')
taskStackEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackEnd.setStatus('current')
taskStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskStackSize.setStatus('current')
taskStackSizeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackSizeUsage.setStatus('current')
taskStackMaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackMaxUsed.setStatus('current')
taskStackFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackFree.setStatus('current')
taskErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 1, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskErrorStatus.setStatus('current')
emSysLogCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,8))
emSysLogCapacity = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,9))
emSysLogBackUpDelete = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,10))
emSysLogEvIdWrap = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,11))
emErrLogCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,14))
emErrLogCapacity = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,15))
emErrLogBackUpDelete = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,16))
emErrLogEvIdWrap = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,17))
emSysLogsCleared = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,18))
emErrLogsCleared = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,19))
systimeClkReferenceChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,23)).setObjects(("DEVICE-MIB", "systimeClkReference"))
powerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,42)).setObjects(("DEVICE-MIB", "chassisPowerSupplyNumber"), ("DEVICE-MIB", "chassisPowerSupplyStatus"))
fanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,43)).setObjects(("DEVICE-MIB", "chassisFanStatus"))
chassisFWUpdate = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,54)).setObjects(("DEVICE-MIB", "chassisFWStatus"), ("DEVICE-MIB", "chassisIpAddr"), ("DEVICE-MIB", "ftpServerIP"), ("DEVICE-MIB", "controlFilePath"))
chassisFWActivate = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,52)).setObjects(("DEVICE-MIB", "chassisFWStatus"), ("DEVICE-MIB", "chassisIpAddr"), ("DEVICE-MIB", "versionString"))
ringFWUpdate = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,53)).setObjects(("DEVICE-MIB", "ringFWStatus"), ("DEVICE-MIB", "chassisIpAddr"), ("DEVICE-MIB", "ftpServerIP"), ("DEVICE-MIB", "controlFilePath"))
ringFWActivate = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,51)).setObjects(("DEVICE-MIB", "ringFWStatus"), ("DEVICE-MIB", "chassisIpAddr"), ("DEVICE-MIB", "versionString"))
sysLogUnknownEvent = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,57)).setObjects(("DEVICE-MIB", "syslogUnknownEvent"))
sysLogUnknownVersion = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,58)).setObjects(("DEVICE-MIB", "syslogUnknownVersion"))
mibBuilder.exportSymbols("DEVICE-MIB", systimeClkReferenceChange=systimeClkReferenceChange, taskErrorStatus=taskErrorStatus, deviceMIB=deviceMIB, taskId=taskId, chassisAutoConfig=chassisAutoConfig, chassisRingsOnMaster=chassisRingsOnMaster, emSysLogBackUpDelete=emSysLogBackUpDelete, chassis=chassis, taskStackSize=taskStackSize, deviceNMSEnterpriseTrapList=deviceNMSEnterpriseTrapList, numBlocksFree=numBlocksFree, chassisElemReachStatus=chassisElemReachStatus, chassisPowerSupplyEntry=chassisPowerSupplyEntry, chassisSubnetMask=chassisSubnetMask, emErrLogsCleared=emErrLogsCleared, sysLogUnknownEvent=sysLogUnknownEvent, taskStackMaxUsed=taskStackMaxUsed, chassisFWStatus=chassisFWStatus, systimeStandbyCSUseInterval=systimeStandbyCSUseInterval, chassisPowerSupplyStatus=chassisPowerSupplyStatus, systimePriClkSrcId=systimePriClkSrcId, systimeSecCSHVTime=systimeSecCSHVTime, ringFWActivate=ringFWActivate, taskStatus=taskStatus, chassisPowerSupplyTable=chassisPowerSupplyTable, taskTable=taskTable, ftpServerIP=ftpServerIP, sysLogUnknownVersion=sysLogUnknownVersion, deviceNMSIndex=deviceNMSIndex, systimeSecCSUseLimit=systimeSecCSUseLimit, systimePriCSHVTime=systimePriCSHVTime, deviceNMSTrapSevAllowed=deviceNMSTrapSevAllowed, emErrLogCorrupt=emErrLogCorrupt, PYSNMP_MODULE_ID=deviceMIB, deviceNMSMIBIITrapList=deviceNMSMIBIITrapList, ringFWStatus=ringFWStatus, controlFilePath=controlFilePath, taskStackBase=taskStackBase, taskStackSizeUsage=taskStackSizeUsage, deviceNMSAccessType=deviceNMSAccessType, taskStackPos=taskStackPos, systimeCRInUse=systimeCRInUse, deviceNMSIpAddress=deviceNMSIpAddress, taskMain=taskMain, emErrLogBackUpDelete=emErrLogBackUpDelete, chassisIpAddr=chassisIpAddr, chassisFailoverPreserveRings=chassisFailoverPreserveRings, sysMemory=sysMemory, chassisId=chassisId, syslogUnknownEvent=syslogUnknownEvent, taskPriority=taskPriority, taskName=taskName, systimeCRUsedCount=systimeCRUsedCount, emSysLogsCleared=emSysLogsCleared, versionString=versionString, systime=systime, systimeSecClkSrcId=systimeSecClkSrcId, systimeSecCSNVTime=systimeSecCSNVTime, sysTask=sysTask, emSysLogCorrupt=emSysLogCorrupt, chassisPowerSupplyNumber=chassisPowerSupplyNumber, chassisSubnetIp=chassisSubnetIp, taskOptions=taskOptions, avgBlockSizeAlloc=avgBlockSizeAlloc, systimeSecBITSFraming=systimeSecBITSFraming, systimePriBITSFraming=systimePriBITSFraming, systimeSecCSUseInterval=systimeSecCSUseInterval, systimePriCSUseLimit=systimePriCSUseLimit, systimeClkReference=systimeClkReference, systimePriBITSCoding=systimePriBITSCoding, numBlocksAlloc=numBlocksAlloc, maxBlockSizeFree=maxBlockSizeFree, avgBlockSizeFree=avgBlockSizeFree, systimeStandbyCSUseLimit=systimeStandbyCSUseLimit, numBytesAlloc=numBytesAlloc, chassisFanStatus=chassisFanStatus, chassisCharacter=chassisCharacter, ringFWUpdate=ringFWUpdate, chassisFWUpdate=chassisFWUpdate, systimeClkRevertive=systimeClkRevertive, memUtilization=memUtilization, syslogUnknownVersion=syslogUnknownVersion, emSysLogCapacity=emSysLogCapacity, taskEntry=taskEntry, chassisRoutingProt=chassisRoutingProt, deviceNMSTable=deviceNMSTable, systimeSecBITSCoding=systimeSecBITSCoding, chassisNumElemReachable=chassisNumElemReachable, numBytesFree=numBytesFree, taskStackPtr=taskStackPtr, systimePriCSUseInterval=systimePriCSUseInterval, emErrLogEvIdWrap=emErrLogEvIdWrap, systimePriCSNVTime=systimePriCSNVTime, emErrLogCapacity=emErrLogCapacity, chassisFWActivate=chassisFWActivate, systimeTimingMode=systimeTimingMode, powerSupplyStatusChange=powerSupplyStatusChange, systimeStandbyClkEnable=systimeStandbyClkEnable, chassisCurrentRingsOnMaster=chassisCurrentRingsOnMaster, taskStackFree=taskStackFree, fanStatusChange=fanStatusChange, taskStackEnd=taskStackEnd, emSysLogEvIdWrap=emSysLogEvIdWrap, chassisCurrentCharacter=chassisCurrentCharacter, systimeCREventEnable=systimeCREventEnable, deviceNMSEntry=deviceNMSEntry)
