#
# PySNMP MIB module BAS-UDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-UDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
BasChassisId, basAliasUdp, BasSlotId, BasInterfaceId, BasLogicalPortId = mibBuilder.importSymbols("BAS-MIB", "BasChassisId", "basAliasUdp", "BasSlotId", "BasInterfaceId", "BasLogicalPortId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, NotificationType, Gauge32, Unsigned32, MibIdentifier, TimeTicks, IpAddress, Counter32, iso, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "NotificationType", "Gauge32", "Unsigned32", "MibIdentifier", "TimeTicks", "IpAddress", "Counter32", "iso", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
basAliasUdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1))
if mibBuilder.loadTexts: basAliasUdpMIB.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basAliasUdpMIB.setOrganization('Broadband Access Systems')
basUdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1))
basUdpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1), )
if mibBuilder.loadTexts: basUdpGroupTable.setStatus('current')
basUdpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1), ).setIndexNames((0, "BAS-UDP-MIB", "basUdpGroupChassis"), (0, "BAS-UDP-MIB", "basUdpGroupSlot"), (0, "BAS-UDP-MIB", "basUdpGroupIf"), (0, "BAS-UDP-MIB", "basUdpGroupLPort"))
if mibBuilder.loadTexts: basUdpGroupEntry.setStatus('current')
basUdpInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpInDatagrams.setStatus('current')
basUdpNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpNoPorts.setStatus('current')
basUdpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpInErrors.setStatus('current')
basUdpOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpOutDatagrams.setStatus('current')
basUdpGroupChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basUdpGroupChassis.setStatus('current')
basUdpGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basUdpGroupSlot.setStatus('current')
basUdpGroupIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basUdpGroupIf.setStatus('current')
basUdpGroupLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basUdpGroupLPort.setStatus('current')
basUdpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2), )
if mibBuilder.loadTexts: basUdpTable.setStatus('current')
basUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1), ).setIndexNames((0, "BAS-UDP-MIB", "basUdpLisChassis"), (0, "BAS-UDP-MIB", "basUdpLisSlot"), (0, "BAS-UDP-MIB", "basUdpLisIf"), (0, "BAS-UDP-MIB", "basUdpLisLPort"), (0, "BAS-UDP-MIB", "basUdpLocalAddress"), (0, "BAS-UDP-MIB", "basUdpLocalPort"))
if mibBuilder.loadTexts: basUdpEntry.setStatus('current')
basUdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpLocalAddress.setStatus('current')
basUdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpLocalPort.setStatus('current')
basUdpLisChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basUdpLisChassis.setStatus('current')
basUdpLisSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basUdpLisSlot.setStatus('current')
basUdpLisIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basUdpLisIf.setStatus('current')
basUdpLisLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basUdpLisLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-UDP-MIB", basUdpGroupChassis=basUdpGroupChassis, basUdpObjects=basUdpObjects, basUdpInErrors=basUdpInErrors, basAliasUdpMIB=basAliasUdpMIB, basUdpLisSlot=basUdpLisSlot, basUdpTable=basUdpTable, basUdpOutDatagrams=basUdpOutDatagrams, PYSNMP_MODULE_ID=basAliasUdpMIB, basUdpLocalPort=basUdpLocalPort, basUdpGroupEntry=basUdpGroupEntry, basUdpLisIf=basUdpLisIf, basUdpGroupLPort=basUdpGroupLPort, basUdpGroupTable=basUdpGroupTable, basUdpGroupIf=basUdpGroupIf, basUdpInDatagrams=basUdpInDatagrams, basUdpLisLPort=basUdpLisLPort, basUdpLisChassis=basUdpLisChassis, basUdpLocalAddress=basUdpLocalAddress, basUdpGroupSlot=basUdpGroupSlot, basUdpNoPorts=basUdpNoPorts, basUdpEntry=basUdpEntry)
