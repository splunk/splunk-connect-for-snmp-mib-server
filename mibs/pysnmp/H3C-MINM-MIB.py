#
# PySNMP MIB module H3C-MINM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-MINM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:09:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
h3cVsiIndex, = mibBuilder.importSymbols("H3C-VSI-MIB", "h3cVsiIndex")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Gauge32, TimeTicks, Counter64, iso, ObjectIdentity, Integer32, Unsigned32, ModuleIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Gauge32", "TimeTicks", "Counter64", "iso", "ObjectIdentity", "Integer32", "Unsigned32", "ModuleIdentity", "NotificationType", "IpAddress")
MacAddress, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "RowStatus")
h3cMinm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107))
h3cMinm.setRevisions(('2009-08-08 10:00',))
if mibBuilder.loadTexts: h3cMinm.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: h3cMinm.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class H3cMinmEnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

h3cMinmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1))
h3cMinmScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 1))
h3cMinmCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 1, 1), Bits().clone(namedValues=NamedValues(("reEncapsulation", 0), ("uplink", 1), ("vsiShareConnection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMinmCapabilities.setStatus('current')
h3cMinmBmac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMinmBmac.setStatus('current')
h3cMinmVsiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 2), )
if mibBuilder.loadTexts: h3cMinmVsiTable.setStatus('current')
h3cMinmVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 2, 1), ).setIndexNames((0, "H3C-VSI-MIB", "h3cVsiIndex"))
if mibBuilder.loadTexts: h3cMinmVsiEntry.setStatus('current')
h3cMinmVsiBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMinmVsiBvlan.setStatus('current')
h3cMinmVsiReEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 2, 1, 2), H3cMinmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMinmVsiReEncapsulation.setStatus('current')
h3cMinmVsiNextAvailableLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMinmVsiNextAvailableLinkId.setStatus('current')
h3cMinmUplinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 3), )
if mibBuilder.loadTexts: h3cMinmUplinkTable.setStatus('current')
h3cMinmUplinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 3, 1), ).setIndexNames((0, "H3C-VSI-MIB", "h3cVsiIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cMinmUplinkEntry.setStatus('current')
h3cMinmUplinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMinmUplinkRowStatus.setStatus('current')
h3cMinmConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4), )
if mibBuilder.loadTexts: h3cMinmConnectionTable.setStatus('current')
h3cMinmConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1), ).setIndexNames((0, "H3C-VSI-MIB", "h3cVsiIndex"), (0, "H3C-MINM-MIB", "h3cMinmConnectionLinkId"))
if mibBuilder.loadTexts: h3cMinmConnectionEntry.setStatus('current')
h3cMinmConnectionLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cMinmConnectionLinkId.setStatus('current')
h3cMinmConnectionBmac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMinmConnectionBmac.setStatus('current')
h3cMinmConnectionBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMinmConnectionBvlan.setStatus('current')
h3cMinmConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMinmConnectionPort.setStatus('current')
h3cMinmConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("learned", 1), ("configDynamic", 2), ("configStatic", 3), ("blackhole", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMinmConnectionStatus.setStatus('current')
h3cMinmConnectionAgingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aging", 1), ("noAged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMinmConnectionAgingStatus.setStatus('current')
h3cMinmConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 107, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMinmConnectionRowStatus.setStatus('current')
mibBuilder.exportSymbols("H3C-MINM-MIB", h3cMinmConnectionLinkId=h3cMinmConnectionLinkId, h3cMinmUplinkRowStatus=h3cMinmUplinkRowStatus, h3cMinmScalarGroup=h3cMinmScalarGroup, h3cMinmUplinkEntry=h3cMinmUplinkEntry, h3cMinmObjects=h3cMinmObjects, PYSNMP_MODULE_ID=h3cMinm, h3cMinmConnectionBmac=h3cMinmConnectionBmac, h3cMinm=h3cMinm, h3cMinmConnectionBvlan=h3cMinmConnectionBvlan, h3cMinmBmac=h3cMinmBmac, H3cMinmEnabledStatus=H3cMinmEnabledStatus, h3cMinmConnectionRowStatus=h3cMinmConnectionRowStatus, h3cMinmVsiTable=h3cMinmVsiTable, h3cMinmCapabilities=h3cMinmCapabilities, h3cMinmConnectionAgingStatus=h3cMinmConnectionAgingStatus, h3cMinmUplinkTable=h3cMinmUplinkTable, h3cMinmConnectionPort=h3cMinmConnectionPort, h3cMinmVsiReEncapsulation=h3cMinmVsiReEncapsulation, h3cMinmVsiEntry=h3cMinmVsiEntry, h3cMinmVsiBvlan=h3cMinmVsiBvlan, h3cMinmConnectionEntry=h3cMinmConnectionEntry, h3cMinmConnectionStatus=h3cMinmConnectionStatus, h3cMinmVsiNextAvailableLinkId=h3cMinmVsiNextAvailableLinkId, h3cMinmConnectionTable=h3cMinmConnectionTable)
