#
# PySNMP MIB module Nortel-Magellan-Passport-ProvisioningMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-ProvisioningMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
RowStatus, StorageType, RowPointer, Unsigned32, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowStatus", "StorageType", "RowPointer", "Unsigned32", "DisplayString")
EnterpriseDateAndTime, AsciiStringIndex, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "AsciiStringIndex", "AsciiString", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, iso, ObjectIdentity, NotificationType, Integer32, Counter64, ModuleIdentity, Gauge32, IpAddress, Counter32, Unsigned32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "ObjectIdentity", "NotificationType", "Integer32", "Counter64", "ModuleIdentity", "Gauge32", "IpAddress", "Counter32", "Unsigned32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
provisioningMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19))
prov = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11))
provRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 1), )
if mibBuilder.loadTexts: provRowStatusTable.setStatus('mandatory')
provRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ProvisioningMIB", "provIndex"))
if mibBuilder.loadTexts: provRowStatusEntry.setStatus('mandatory')
provRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provRowStatus.setStatus('mandatory')
provComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provComponentName.setStatus('mandatory')
provStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provStorageType.setStatus('mandatory')
provIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: provIndex.setStatus('mandatory')
provStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 10), )
if mibBuilder.loadTexts: provStateTable.setStatus('mandatory')
provStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ProvisioningMIB", "provIndex"))
if mibBuilder.loadTexts: provStateEntry.setStatus('mandatory')
provAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: provAdminState.setStatus('mandatory')
provOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: provOperationalState.setStatus('mandatory')
provUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: provUsageState.setStatus('mandatory')
provOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11), )
if mibBuilder.loadTexts: provOperTable.setStatus('mandatory')
provOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ProvisioningMIB", "provIndex"))
if mibBuilder.loadTexts: provOperEntry.setStatus('mandatory')
provProvisioningActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 21))).clone(namedValues=NamedValues(("initialLoading", 0), ("none", 2), ("activation", 3), ("initialActivation", 4), ("rollingBack", 5), ("saving", 6), ("loadingOrApplying", 7), ("semanticChecking", 8), ("waitingForConfirm", 9), ("clearing", 11), ("copying", 12), ("committing", 13), ("deleting", 14), ("confirming", 15), ("adding", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provProvisioningActivity.setStatus('mandatory')
provActivityProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provActivityProgress.setStatus('mandatory')
provCommittedFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provCommittedFileName.setStatus('mandatory')
provCurrentViewFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provCurrentViewFileName.setStatus('mandatory')
provLastUsedFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provLastUsedFileName.setStatus('mandatory')
provProvisioningSession = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provProvisioningSession.setStatus('mandatory')
provProvisioningUser = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provProvisioningUser.setStatus('mandatory')
provCheckRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provCheckRequired.setStatus('mandatory')
provNextFileSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provNextFileSequenceNumber.setStatus('obsolete')
provConfirmRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provConfirmRequired.setStatus('mandatory')
provProvisioningDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provProvisioningDirectory.setStatus('obsolete')
provEditViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 12), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provEditViewName.setStatus('mandatory')
provEditViewAddedComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provEditViewAddedComponents.setStatus('mandatory')
provEditViewDeletedComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provEditViewDeletedComponents.setStatus('mandatory')
provEditViewChangedComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provEditViewChangedComponents.setStatus('mandatory')
provStandbyCpActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6))).clone(namedValues=NamedValues(("none", 0), ("loadingProvisioningData", 1), ("savingCommitFormatProvisioningData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provStandbyCpActivity.setStatus('mandatory')
provStandbyCpActivityProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 11, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provStandbyCpActivityProgress.setStatus('mandatory')
provView = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2))
provViewRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 1), )
if mibBuilder.loadTexts: provViewRowStatusTable.setStatus('mandatory')
provViewRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ProvisioningMIB", "provIndex"), (0, "Nortel-Magellan-Passport-ProvisioningMIB", "provViewIndex"))
if mibBuilder.loadTexts: provViewRowStatusEntry.setStatus('mandatory')
provViewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewRowStatus.setStatus('mandatory')
provViewComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewComponentName.setStatus('mandatory')
provViewStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewStorageType.setStatus('mandatory')
provViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: provViewIndex.setStatus('mandatory')
provViewOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100), )
if mibBuilder.loadTexts: provViewOperTable.setStatus('mandatory')
provViewOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ProvisioningMIB", "provIndex"), (0, "Nortel-Magellan-Passport-ProvisioningMIB", "provViewIndex"))
if mibBuilder.loadTexts: provViewOperEntry.setStatus('mandatory')
provViewUser = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewUser.setStatus('mandatory')
provViewCheckState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 0), ("unknown", 1), ("partial", 2), ("softwareChanged", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewCheckState.setStatus('mandatory')
provViewComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewComponents.setStatus('mandatory')
provViewFormats = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewFormats.setStatus('mandatory')
provViewBaseView = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewBaseView.setStatus('mandatory')
provViewVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewVersion.setStatus('mandatory')
provViewCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 11, 2, 100, 1, 7), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: provViewCreationDate.setStatus('mandatory')
provisioningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 1))
provisioningGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 1, 5))
provisioningGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 1, 5, 1))
provisioningGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 1, 5, 1, 2))
provisioningCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 3))
provisioningCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 3, 5))
provisioningCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 3, 5, 1))
provisioningCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 19, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-ProvisioningMIB", provProvisioningSession=provProvisioningSession, provLastUsedFileName=provLastUsedFileName, provViewStorageType=provViewStorageType, provisioningGroupBE00=provisioningGroupBE00, provEditViewDeletedComponents=provEditViewDeletedComponents, provViewIndex=provViewIndex, provConfirmRequired=provConfirmRequired, provViewFormats=provViewFormats, provViewCreationDate=provViewCreationDate, provisioningCapabilitiesBE=provisioningCapabilitiesBE, provStateTable=provStateTable, provProvisioningUser=provProvisioningUser, provViewRowStatusTable=provViewRowStatusTable, provisioningCapabilitiesBE00=provisioningCapabilitiesBE00, provEditViewName=provEditViewName, provViewComponents=provViewComponents, provOperEntry=provOperEntry, provisioningGroupBE=provisioningGroupBE, provRowStatus=provRowStatus, provRowStatusTable=provRowStatusTable, provNextFileSequenceNumber=provNextFileSequenceNumber, provView=provView, prov=prov, provRowStatusEntry=provRowStatusEntry, provStateEntry=provStateEntry, provStandbyCpActivity=provStandbyCpActivity, provStorageType=provStorageType, provCurrentViewFileName=provCurrentViewFileName, provOperationalState=provOperationalState, provViewCheckState=provViewCheckState, provisioningCapabilitiesBE00A=provisioningCapabilitiesBE00A, provProvisioningDirectory=provProvisioningDirectory, provViewVersion=provViewVersion, provProvisioningActivity=provProvisioningActivity, provisioningGroup=provisioningGroup, provisioningMIB=provisioningMIB, provViewRowStatus=provViewRowStatus, provStandbyCpActivityProgress=provStandbyCpActivityProgress, provComponentName=provComponentName, provActivityProgress=provActivityProgress, provViewComponentName=provViewComponentName, provOperTable=provOperTable, provCommittedFileName=provCommittedFileName, provIndex=provIndex, provViewOperTable=provViewOperTable, provEditViewAddedComponents=provEditViewAddedComponents, provViewUser=provViewUser, provUsageState=provUsageState, provCheckRequired=provCheckRequired, provEditViewChangedComponents=provEditViewChangedComponents, provisioningGroupBE00A=provisioningGroupBE00A, provViewOperEntry=provViewOperEntry, provViewRowStatusEntry=provViewRowStatusEntry, provisioningCapabilities=provisioningCapabilities, provViewBaseView=provViewBaseView, provAdminState=provAdminState)
