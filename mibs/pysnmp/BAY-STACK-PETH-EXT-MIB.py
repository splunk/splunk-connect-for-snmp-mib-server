#
# PySNMP MIB module BAY-STACK-PETH-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-PETH-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Unsigned32, IpAddress, Gauge32, ObjectIdentity, MibIdentifier, Integer32, iso, Counter32, Counter64, ModuleIdentity, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "IpAddress", "Gauge32", "ObjectIdentity", "MibIdentifier", "Integer32", "iso", "Counter32", "Counter64", "ModuleIdentity", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackPethExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 8))
bayStackPethExtMib.setRevisions(('2012-01-25 00:00', '2011-07-20 00:00', '2011-01-10 00:00', '2004-11-11 00:00', '2004-10-18 00:00', '2004-09-14 00:00',))
if mibBuilder.loadTexts: bayStackPethExtMib.setLastUpdated('201107200000Z')
if mibBuilder.loadTexts: bayStackPethExtMib.setOrganization('Avaya')
bspeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 8, 0))
bspeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 8, 1))
bspePethPsePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1), )
if mibBuilder.loadTexts: bspePethPsePortExtTable.setStatus('current')
bspePethPsePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1), ).setIndexNames((0, "BAY-STACK-PETH-EXT-MIB", "bspePethPsePortExtGroupIndex"), (0, "BAY-STACK-PETH-EXT-MIB", "bspePethPsePortExtIndex"))
if mibBuilder.loadTexts: bspePethPsePortExtEntry.setStatus('current')
bspePethPsePortExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bspePethPsePortExtGroupIndex.setStatus('current')
bspePethPsePortExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bspePethPsePortExtIndex.setStatus('current')
bspePethPsePortExtPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 32))).setUnits('watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePethPsePortExtPowerLimit.setStatus('current')
bspePethPsePortExtDetailedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("poweredResistiveDiscovery", 1), ("poweredCapacitiveDiscovery", 2), ("poweredCiscoLegacyDiscovery", 3), ("invalidPD", 4), ("overloadFault", 5), ("underloadFault", 6), ("uvovFault", 7), ("powerManaged", 8), ("limitOverloadFault", 9), ("discoveryDisabled", 10), ("unableToResetTps", 11), ("unableToInitializeTps", 12), ("uninitialized", 13), ("nonexistent", 14), ("otherFault", 15), ("detectionStatus", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtDetailedStatus.setStatus('current')
bspePethPsePortExtMeasuredVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 5), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(400, 580), ))).setUnits('decivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredVoltage.setStatus('current')
bspePethPsePortExtMeasuredCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 660))).setUnits('milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredCurrent.setStatus('current')
bspePethPsePortExtMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredPower.setStatus('current')
bspePethPsePortExtCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("underCurrent", 2), ("overCurrent", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtCurrentStatus.setStatus('current')
bspePethPsePortExtCurrentStatusClear = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePethPsePortExtCurrentStatusClear.setStatus('current')
bspePethMainPseExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2), )
if mibBuilder.loadTexts: bspePethMainPseExtTable.setStatus('current')
bspePethMainPseExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-PETH-EXT-MIB", "bspePethMainPseExtGroupIndex"))
if mibBuilder.loadTexts: bspePethMainPseExtEntry.setStatus('current')
bspePethMainPseExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bspePethMainPseExtGroupIndex.setStatus('current')
bspePethMainPseExtPowerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acOnly", 1), ("dcOnly", 2), ("acDc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethMainPseExtPowerPresent.setStatus('current')
bspePethMainPseExtDisconnectScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acDisconnect", 1), ("dcDisconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePethMainPseExtDisconnectScheme.setStatus('current')
bspeScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3))
bspeIpPhonePowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 32), ))).setUnits('watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspeIpPhonePowerLimit.setStatus('current')
bspeIpPhonePowerPriority = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspeIpPhonePowerPriority.setStatus('current')
bspePoEPowerMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowPowerBudget", 1), ("highPowerBudget", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePoEPowerMode.setStatus('current')
bspePethPsePortCurrentStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 8, 0, 1)).setObjects(("BAY-STACK-PETH-EXT-MIB", "bspePethPsePortExtCurrentStatus"))
if mibBuilder.loadTexts: bspePethPsePortCurrentStatusNotification.setStatus('current')
bspeIpPhonePowerLimitNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 8, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("BAY-STACK-PETH-EXT-MIB", "bspeIpPhonePowerLimit"))
if mibBuilder.loadTexts: bspeIpPhonePowerLimitNotification.setStatus('current')
bspeIpPhonePowerPriorityNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 8, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("BAY-STACK-PETH-EXT-MIB", "bspeIpPhonePowerPriority"))
if mibBuilder.loadTexts: bspeIpPhonePowerPriorityNotification.setStatus('current')
mibBuilder.exportSymbols("BAY-STACK-PETH-EXT-MIB", bspePoEPowerMode=bspePoEPowerMode, bspePethPsePortExtPowerLimit=bspePethPsePortExtPowerLimit, bspePethPsePortCurrentStatusNotification=bspePethPsePortCurrentStatusNotification, bspeObjects=bspeObjects, bspePethPsePortExtMeasuredVoltage=bspePethPsePortExtMeasuredVoltage, bspePethPsePortExtMeasuredPower=bspePethPsePortExtMeasuredPower, bspePethPsePortExtCurrentStatusClear=bspePethPsePortExtCurrentStatusClear, bspePethMainPseExtPowerPresent=bspePethMainPseExtPowerPresent, bspePethPsePortExtDetailedStatus=bspePethPsePortExtDetailedStatus, bspeScalars=bspeScalars, bspePethPsePortExtTable=bspePethPsePortExtTable, bspePethPsePortExtGroupIndex=bspePethPsePortExtGroupIndex, bspePethPsePortExtIndex=bspePethPsePortExtIndex, bspePethPsePortExtMeasuredCurrent=bspePethPsePortExtMeasuredCurrent, bspeNotifications=bspeNotifications, bspePethMainPseExtEntry=bspePethMainPseExtEntry, bspePethMainPseExtGroupIndex=bspePethMainPseExtGroupIndex, bayStackPethExtMib=bayStackPethExtMib, bspePethPsePortExtEntry=bspePethPsePortExtEntry, bspePethPsePortExtCurrentStatus=bspePethPsePortExtCurrentStatus, bspeIpPhonePowerLimit=bspeIpPhonePowerLimit, bspePethMainPseExtTable=bspePethMainPseExtTable, bspePethMainPseExtDisconnectScheme=bspePethMainPseExtDisconnectScheme, bspeIpPhonePowerPriority=bspeIpPhonePowerPriority, bspeIpPhonePowerLimitNotification=bspeIpPhonePowerLimitNotification, PYSNMP_MODULE_ID=bayStackPethExtMib, bspeIpPhonePowerPriorityNotification=bspeIpPhonePowerPriorityNotification)
