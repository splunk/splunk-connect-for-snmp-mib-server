#
# PySNMP MIB module EATON-PXG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EATON-PXG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
powerChain, = mibBuilder.importSymbols("EATON-OIDS", "powerChain")
entPhysicalName, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Bits, Integer32, Counter32, ObjectIdentity, Unsigned32, NotificationType, TimeTicks, Gauge32, IpAddress, Counter64, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "NotificationType", "TimeTicks", "Gauge32", "IpAddress", "Counter64", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
pxgMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 8, 1))
pxgMIB.setRevisions(('2008-01-30 00:00', '2007-07-05 00:00', '2007-04-10 00:00', '2007-01-03 00:00', '2006-10-13 00:00',))
if mibBuilder.loadTexts: pxgMIB.setLastUpdated('200801300000Z')
if mibBuilder.loadTexts: pxgMIB.setOrganization('Eaton Corporation')
pxgMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 8, 1, 1))
eventInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 1))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2))
eventID = MibScalar((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventID.setStatus('current')
eventSequenceIndex = MibScalar((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSequenceIndex.setStatus('current')
eventDescription = MibScalar((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDescription.setStatus('current')
eventValue = MibScalar((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventValue.setStatus('current')
numAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAlarmsPresent.setStatus('current')
activeAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2), )
if mibBuilder.loadTexts: activeAlarmsTable.setStatus('current')
activeAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1), ).setIndexNames((0, "EATON-PXG-MIB", "alarmID"))
if mibBuilder.loadTexts: activeAlarmsEntry.setStatus('current')
alarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmID.setStatus('current')
alarmSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSequenceIndex.setStatus('current')
alarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescription.setStatus('current')
alarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmValue.setStatus('current')
alarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("critical", 1), ("cautionary", 2), ("acknowledged", 3), ("active", 4), ("cleared", 5), ("closed", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLevel.setStatus('current')
alarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 8, 1, 1, 2, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTime.setStatus('current')
pxgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 8, 1, 0))
powerChainCriticalAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 1)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainCriticalAlarmEvent.setStatus('current')
powerChainCautionaryAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 2)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainCautionaryAlarmEvent.setStatus('current')
powerChainAlarmEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 3)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainAlarmEventAcknowledged.setStatus('current')
powerChainEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 4)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainEventCleared.setStatus('current')
powerChainEvent = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 5)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainEvent.setStatus('current')
powerChainAlarmEventClosed = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 6)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainAlarmEventClosed.setStatus('current')
powerChainCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 7)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainCriticalAlarm.setStatus('current')
powerChainCautionaryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 8)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainCautionaryAlarm.setStatus('current')
powerChainAlarmAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 9)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainAlarmAcknowledged.setStatus('current')
powerChainAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 10)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainAlarmCleared.setStatus('current')
powerChainAlarmClosed = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 11)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainAlarmClosed.setStatus('current')
powerChainAlarmUpdated = NotificationType((1, 3, 6, 1, 4, 1, 534, 8, 1, 0, 12)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("EATON-PXG-MIB", "alarmLevel"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: powerChainAlarmUpdated.setStatus('current')
pxgConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 8, 1, 2))
tkEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 8, 1, 2, 1)).setObjects(("EATON-PXG-MIB", "eventID"), ("EATON-PXG-MIB", "eventSequenceIndex"), ("EATON-PXG-MIB", "eventDescription"), ("EATON-PXG-MIB", "eventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tkEventGroup = tkEventGroup.setStatus('current')
tkAlarmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 8, 1, 2, 2)).setObjects(("EATON-PXG-MIB", "alarmID"), ("EATON-PXG-MIB", "alarmSequenceIndex"), ("EATON-PXG-MIB", "alarmDescription"), ("EATON-PXG-MIB", "alarmValue"), ("EATON-PXG-MIB", "alarmLevel"), ("EATON-PXG-MIB", "alarmTime"), ("EATON-PXG-MIB", "numAlarmsPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tkAlarmTableGroup = tkAlarmTableGroup.setStatus('current')
tkEventNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 8, 1, 2, 3)).setObjects(("EATON-PXG-MIB", "powerChainCriticalAlarmEvent"), ("EATON-PXG-MIB", "powerChainCautionaryAlarmEvent"), ("EATON-PXG-MIB", "powerChainAlarmEventAcknowledged"), ("EATON-PXG-MIB", "powerChainEventCleared"), ("EATON-PXG-MIB", "powerChainEvent"), ("EATON-PXG-MIB", "powerChainAlarmEventClosed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tkEventNotifyGroup = tkEventNotifyGroup.setStatus('current')
tkAlarmNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 8, 1, 2, 4)).setObjects(("EATON-PXG-MIB", "powerChainCriticalAlarm"), ("EATON-PXG-MIB", "powerChainCautionaryAlarm"), ("EATON-PXG-MIB", "powerChainAlarmAcknowledged"), ("EATON-PXG-MIB", "powerChainAlarmCleared"), ("EATON-PXG-MIB", "powerChainAlarmClosed"), ("EATON-PXG-MIB", "powerChainAlarmUpdated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tkAlarmNotifyGroup = tkAlarmNotifyGroup.setStatus('current')
tkSimpleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 8, 1, 2, 5)).setObjects(("EATON-PXG-MIB", "tkEventGroup"), ("EATON-PXG-MIB", "tkEventNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tkSimpleCompliance = tkSimpleCompliance.setStatus('current')
tkAlarmsTableCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 8, 1, 2, 6)).setObjects(("EATON-PXG-MIB", "tkEventGroup"), ("EATON-PXG-MIB", "tkAlarmTableGroup"), ("EATON-PXG-MIB", "tkEventNotifyGroup"), ("EATON-PXG-MIB", "tkAlarmNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tkAlarmsTableCompliance = tkAlarmsTableCompliance.setStatus('current')
mibBuilder.exportSymbols("EATON-PXG-MIB", pxgMIBObjects=pxgMIBObjects, eventID=eventID, eventSequenceIndex=eventSequenceIndex, tkEventGroup=tkEventGroup, powerChainEvent=powerChainEvent, activeAlarmsEntry=activeAlarmsEntry, tkAlarmNotifyGroup=tkAlarmNotifyGroup, powerChainAlarmAcknowledged=powerChainAlarmAcknowledged, powerChainEventCleared=powerChainEventCleared, powerChainAlarmClosed=powerChainAlarmClosed, alarmValue=alarmValue, eventInfo=eventInfo, tkSimpleCompliance=tkSimpleCompliance, activeAlarmsTable=activeAlarmsTable, alarmSequenceIndex=alarmSequenceIndex, alarmID=alarmID, tkAlarmTableGroup=tkAlarmTableGroup, powerChainAlarmEventAcknowledged=powerChainAlarmEventAcknowledged, eventDescription=eventDescription, tkAlarmsTableCompliance=tkAlarmsTableCompliance, powerChainCautionaryAlarm=powerChainCautionaryAlarm, pxgMIB=pxgMIB, numAlarmsPresent=numAlarmsPresent, alarms=alarms, powerChainAlarmUpdated=powerChainAlarmUpdated, pxgConformance=pxgConformance, PYSNMP_MODULE_ID=pxgMIB, alarmDescription=alarmDescription, pxgNotifications=pxgNotifications, powerChainCriticalAlarm=powerChainCriticalAlarm, powerChainCautionaryAlarmEvent=powerChainCautionaryAlarmEvent, powerChainAlarmCleared=powerChainAlarmCleared, alarmTime=alarmTime, powerChainCriticalAlarmEvent=powerChainCriticalAlarmEvent, powerChainAlarmEventClosed=powerChainAlarmEventClosed, alarmLevel=alarmLevel, eventValue=eventValue, tkEventNotifyGroup=tkEventNotifyGroup)
