#
# PySNMP MIB module HPN-ICF-LswMSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LswMSTP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
dot1dStpPort, dot1dStpPortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPort", "dot1dStpPortEntry")
hpnicflswCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicflswCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, MibIdentifier, NotificationType, Integer32, IpAddress, TimeTicks, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "MibIdentifier", "NotificationType", "Integer32", "IpAddress", "TimeTicks", "ModuleIdentity", "ObjectIdentity")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hpnicfdot1sMstp = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14))
hpnicfdot1sMstp.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hpnicfdot1sMstp.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hpnicfdot1sMstp.setOrganization('')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Hpnicfdot1sFormatStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("legacy", 1), ("dot1s", 2), ("auto", 3))

hpnicfdot1sStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 1), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sStpStatus.setStatus('current')
hpnicfdot1sStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sStpForceVersion.setStatus('current')
hpnicfdot1sStpDiameter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sStpDiameter.setStatus('current')
hpnicfdot1sMstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstBridgeMaxHops.setStatus('current')
hpnicfdot1sMstMasterBridgeID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstMasterBridgeID.setStatus('current')
hpnicfdot1sMstMasterPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstMasterPathCost.setStatus('current')
hpnicfdot1sMstBpduGuard = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 7), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstBpduGuard.setStatus('current')
hpnicfdot1sMstAdminFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstAdminFormatSelector.setStatus('current')
hpnicfdot1sMstAdminRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstAdminRegionName.setStatus('current')
hpnicfdot1sMstAdminRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstAdminRevisionLevel.setStatus('current')
hpnicfdot1sMstOperFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstOperFormatSelector.setStatus('current')
hpnicfdot1sMstOperRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstOperRegionName.setStatus('current')
hpnicfdot1sMstOperRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstOperRevisionLevel.setStatus('current')
hpnicfdot1sMstOperConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstOperConfigDigest.setStatus('current')
hpnicfdot1sMstRegionConfActive = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstRegionConfActive.setStatus('current')
hpnicfdot1sMstDefaultVlanAllo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstDefaultVlanAllo.setStatus('current')
hpnicfdot1sMstDefaultRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstDefaultRegionName.setStatus('current')
hpnicfdot1sVIDAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 18), )
if mibBuilder.loadTexts: hpnicfdot1sVIDAllocationTable.setStatus('current')
hpnicfdot1sVIDAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 18, 1), ).setIndexNames((0, "HPN-ICF-LswMSTP-MIB", "hpnicfdot1sMstVID"))
if mibBuilder.loadTexts: hpnicfdot1sVIDAllocationEntry.setStatus('current')
hpnicfdot1sMstVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstVID.setStatus('current')
hpnicfdot1sAdminMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sAdminMstID.setStatus('current')
hpnicfdot1sOperMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sOperMstID.setStatus('current')
hpnicfdot1sInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19), )
if mibBuilder.loadTexts: hpnicfdot1sInstanceTable.setStatus('current')
hpnicfdot1sInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1), ).setIndexNames((0, "HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"))
if mibBuilder.loadTexts: hpnicfdot1sInstanceEntry.setStatus('current')
hpnicfdot1sInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sInstanceID.setStatus('current')
hpnicfdot1sMstiBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiBridgeID.setStatus('current')
hpnicfdot1sMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiBridgePriority.setStatus('current')
hpnicfdot1sMstiDesignedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiDesignedRoot.setStatus('current')
hpnicfdot1sMstiRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiRootPathCost.setStatus('current')
hpnicfdot1sMstiRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiRootPort.setStatus('current')
hpnicfdot1sMstiRootType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("secondary", 1), ("primary", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiRootType.setStatus('current')
hpnicfdot1sMstiRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiRemainingHops.setStatus('current')
hpnicfdot1sMstiAdminMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiAdminMappedVlanListLow.setStatus('current')
hpnicfdot1sMstiAdminMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiAdminMappedVlanListHigh.setStatus('current')
hpnicfdot1sMstiOperMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiOperMappedVlanListLow.setStatus('current')
hpnicfdot1sMstiOperMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 19, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiOperMappedVlanListHigh.setStatus('current')
hpnicfdot1sPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20), )
if mibBuilder.loadTexts: hpnicfdot1sPortTable.setStatus('current')
hpnicfdot1sPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1), ).setIndexNames((0, "HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"), (0, "HPN-ICF-LswMSTP-MIB", "hpnicfdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hpnicfdot1sPortEntry.setStatus('current')
hpnicfdot1sMstiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiPortIndex.setStatus('current')
hpnicfdot1sMstiState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiState.setStatus('current')
hpnicfdot1sMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiPortPriority.setStatus('current')
hpnicfdot1sMstiPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiPathCost.setStatus('current')
hpnicfdot1sMstiDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiDesignatedRoot.setStatus('current')
hpnicfdot1sMstiDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiDesignatedCost.setStatus('current')
hpnicfdot1sMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiDesignatedBridge.setStatus('current')
hpnicfdot1sMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiDesignatedPort.setStatus('current')
hpnicfdot1sMstiMasterBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiMasterBridgeID.setStatus('current')
hpnicfdot1sMstiMasterPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiMasterPortCost.setStatus('current')
hpnicfdot1sMstiStpPortEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 11), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortEdgeport.setStatus('current')
hpnicfdot1sMstiStpPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortPointToPoint.setStatus('current')
hpnicfdot1sMstiStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpMcheck.setStatus('current')
hpnicfdot1sMstiStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpTransLimit.setStatus('current')
hpnicfdot1sMstiStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpRXStpBPDU.setStatus('current')
hpnicfdot1sMstiStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpTXStpBPDU.setStatus('current')
hpnicfdot1sMstiStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpRXTCNBPDU.setStatus('current')
hpnicfdot1sMstiStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpTXTCNBPDU.setStatus('current')
hpnicfdot1sMstiStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpRXRSTPBPDU.setStatus('current')
hpnicfdot1sMstiStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpTXRSTPBPDU.setStatus('current')
hpnicfdot1sMstiStpRXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpRXMSTPBPDU.setStatus('current')
hpnicfdot1sMstiStpTXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpTXMSTPBPDU.setStatus('current')
hpnicfdot1sMstiStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpClearStatistics.setStatus('current')
hpnicfdot1sMstiStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpDefaultPortCost.setStatus('current')
hpnicfdot1sMstiStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 25), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpStatus.setStatus('current')
hpnicfdot1sMstiPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 26), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiPortRootGuard.setStatus('current')
hpnicfdot1sMstiPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 27), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiPortLoopGuard.setStatus('current')
hpnicfdot1sMstiStpPortSendingBPDUType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortSendingBPDUType.setStatus('current')
hpnicfdot1sMstiStpOperPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpOperPortPointToPoint.setStatus('current')
hpnicfdot1sMstiStpPortAdminBPDUFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 30), Hpnicfdot1sFormatStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortAdminBPDUFmt.setStatus('current')
hpnicfdot1sMstiStpPortOperBPDUFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 31), Hpnicfdot1sFormatStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortOperBPDUFmt.setStatus('current')
hpnicfdot1sMstiStpPortRoleRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 32), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortRoleRestriction.setStatus('current')
hpnicfdot1sMstiStpPortTcRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 33), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortTcRestriction.setStatus('current')
hpnicfdot1sMstiStpPortDisputed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 20, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1sMstiStpPortDisputed.setStatus('current')
hpnicfdot1sStpPathCostStandard = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("legacy", 0), ("dot1d-1998", 1), ("dot1t", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1sStpPathCostStandard.setStatus('current')
hpnicfMstpEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0))
if mibBuilder.loadTexts: hpnicfMstpEventsV2.setStatus('current')
hpnicfPortMstiStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0, 1)).setObjects(("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"), ("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hpnicfPortMstiStateForwarding.setStatus('current')
hpnicfPortMstiStateDiscarding = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0, 2)).setObjects(("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"), ("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hpnicfPortMstiStateDiscarding.setStatus('current')
hpnicfBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0, 3)).setObjects(("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"))
if mibBuilder.loadTexts: hpnicfBridgeLostRootPrimary.setStatus('current')
hpnicfPortMstiRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0, 4)).setObjects(("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"), ("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hpnicfPortMstiRootGuarded.setStatus('current')
hpnicfPortMstiBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0, 5)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: hpnicfPortMstiBpduGuarded.setStatus('current')
hpnicfPortMstiLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 14, 0, 6)).setObjects(("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sInstanceID"), ("HPN-ICF-LswMSTP-MIB", "hpnicfdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hpnicfPortMstiLoopGuarded.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-LswMSTP-MIB", hpnicfdot1sVIDAllocationTable=hpnicfdot1sVIDAllocationTable, hpnicfdot1sMstiState=hpnicfdot1sMstiState, hpnicfdot1sMstAdminRegionName=hpnicfdot1sMstAdminRegionName, hpnicfdot1sMstiDesignatedCost=hpnicfdot1sMstiDesignatedCost, hpnicfdot1sMstiStpRXRSTPBPDU=hpnicfdot1sMstiStpRXRSTPBPDU, hpnicfdot1sMstiDesignedRoot=hpnicfdot1sMstiDesignedRoot, hpnicfPortMstiStateForwarding=hpnicfPortMstiStateForwarding, hpnicfdot1sMstiStpTransLimit=hpnicfdot1sMstiStpTransLimit, hpnicfdot1sMstiStpPortSendingBPDUType=hpnicfdot1sMstiStpPortSendingBPDUType, hpnicfdot1sAdminMstID=hpnicfdot1sAdminMstID, hpnicfdot1sMstMasterPathCost=hpnicfdot1sMstMasterPathCost, hpnicfdot1sMstiBridgeID=hpnicfdot1sMstiBridgeID, hpnicfdot1sMstDefaultVlanAllo=hpnicfdot1sMstDefaultVlanAllo, hpnicfdot1sMstiAdminMappedVlanListHigh=hpnicfdot1sMstiAdminMappedVlanListHigh, hpnicfPortMstiLoopGuarded=hpnicfPortMstiLoopGuarded, hpnicfdot1sStpDiameter=hpnicfdot1sStpDiameter, hpnicfdot1sStpForceVersion=hpnicfdot1sStpForceVersion, hpnicfdot1sMstiRootPort=hpnicfdot1sMstiRootPort, hpnicfdot1sMstiPortPriority=hpnicfdot1sMstiPortPriority, PYSNMP_MODULE_ID=hpnicfdot1sMstp, hpnicfdot1sInstanceTable=hpnicfdot1sInstanceTable, hpnicfdot1sMstVID=hpnicfdot1sMstVID, hpnicfdot1sVIDAllocationEntry=hpnicfdot1sVIDAllocationEntry, hpnicfdot1sMstBridgeMaxHops=hpnicfdot1sMstBridgeMaxHops, hpnicfdot1sMstAdminRevisionLevel=hpnicfdot1sMstAdminRevisionLevel, hpnicfdot1sMstiStpPortOperBPDUFmt=hpnicfdot1sMstiStpPortOperBPDUFmt, hpnicfdot1sMstAdminFormatSelector=hpnicfdot1sMstAdminFormatSelector, hpnicfdot1sMstOperConfigDigest=hpnicfdot1sMstOperConfigDigest, hpnicfdot1sMstiPathCost=hpnicfdot1sMstiPathCost, hpnicfdot1sMstiStpPortTcRestriction=hpnicfdot1sMstiStpPortTcRestriction, hpnicfdot1sMstiStpTXTCNBPDU=hpnicfdot1sMstiStpTXTCNBPDU, hpnicfdot1sMstiPortIndex=hpnicfdot1sMstiPortIndex, hpnicfdot1sMstiStpStatus=hpnicfdot1sMstiStpStatus, hpnicfdot1sMstiOperMappedVlanListLow=hpnicfdot1sMstiOperMappedVlanListLow, hpnicfdot1sMstBpduGuard=hpnicfdot1sMstBpduGuard, hpnicfdot1sMstiAdminMappedVlanListLow=hpnicfdot1sMstiAdminMappedVlanListLow, hpnicfdot1sMstiPortRootGuard=hpnicfdot1sMstiPortRootGuard, hpnicfdot1sMstiStpPortPointToPoint=hpnicfdot1sMstiStpPortPointToPoint, hpnicfdot1sPortTable=hpnicfdot1sPortTable, hpnicfdot1sMstiStpClearStatistics=hpnicfdot1sMstiStpClearStatistics, hpnicfdot1sMstOperRevisionLevel=hpnicfdot1sMstOperRevisionLevel, hpnicfdot1sMstiDesignatedBridge=hpnicfdot1sMstiDesignatedBridge, hpnicfdot1sMstDefaultRegionName=hpnicfdot1sMstDefaultRegionName, hpnicfPortMstiBpduGuarded=hpnicfPortMstiBpduGuarded, hpnicfdot1sMstOperRegionName=hpnicfdot1sMstOperRegionName, hpnicfdot1sMstp=hpnicfdot1sMstp, hpnicfdot1sMstiOperMappedVlanListHigh=hpnicfdot1sMstiOperMappedVlanListHigh, hpnicfdot1sMstiStpRXStpBPDU=hpnicfdot1sMstiStpRXStpBPDU, hpnicfdot1sMstiStpRXTCNBPDU=hpnicfdot1sMstiStpRXTCNBPDU, hpnicfdot1sMstMasterBridgeID=hpnicfdot1sMstMasterBridgeID, hpnicfdot1sMstOperFormatSelector=hpnicfdot1sMstOperFormatSelector, hpnicfdot1sMstiBridgePriority=hpnicfdot1sMstiBridgePriority, hpnicfdot1sPortEntry=hpnicfdot1sPortEntry, hpnicfMstpEventsV2=hpnicfMstpEventsV2, hpnicfdot1sOperMstID=hpnicfdot1sOperMstID, hpnicfdot1sMstiStpTXRSTPBPDU=hpnicfdot1sMstiStpTXRSTPBPDU, hpnicfPortMstiStateDiscarding=hpnicfPortMstiStateDiscarding, hpnicfdot1sInstanceEntry=hpnicfdot1sInstanceEntry, hpnicfdot1sMstiMasterPortCost=hpnicfdot1sMstiMasterPortCost, hpnicfdot1sMstiDesignatedPort=hpnicfdot1sMstiDesignatedPort, hpnicfdot1sMstiStpMcheck=hpnicfdot1sMstiStpMcheck, hpnicfBridgeLostRootPrimary=hpnicfBridgeLostRootPrimary, hpnicfdot1sMstiRootPathCost=hpnicfdot1sMstiRootPathCost, hpnicfdot1sMstiStpPortEdgeport=hpnicfdot1sMstiStpPortEdgeport, BridgeId=BridgeId, hpnicfdot1sInstanceID=hpnicfdot1sInstanceID, hpnicfdot1sMstiStpDefaultPortCost=hpnicfdot1sMstiStpDefaultPortCost, hpnicfdot1sMstiRootType=hpnicfdot1sMstiRootType, hpnicfdot1sMstiMasterBridgeID=hpnicfdot1sMstiMasterBridgeID, hpnicfdot1sMstiStpRXMSTPBPDU=hpnicfdot1sMstiStpRXMSTPBPDU, hpnicfdot1sStpStatus=hpnicfdot1sStpStatus, hpnicfdot1sMstRegionConfActive=hpnicfdot1sMstRegionConfActive, hpnicfdot1sMstiStpPortDisputed=hpnicfdot1sMstiStpPortDisputed, hpnicfdot1sStpPathCostStandard=hpnicfdot1sStpPathCostStandard, hpnicfdot1sMstiStpPortAdminBPDUFmt=hpnicfdot1sMstiStpPortAdminBPDUFmt, Hpnicfdot1sFormatStatus=Hpnicfdot1sFormatStatus, hpnicfdot1sMstiPortLoopGuard=hpnicfdot1sMstiPortLoopGuard, hpnicfdot1sMstiStpOperPortPointToPoint=hpnicfdot1sMstiStpOperPortPointToPoint, hpnicfdot1sMstiStpTXMSTPBPDU=hpnicfdot1sMstiStpTXMSTPBPDU, hpnicfdot1sMstiStpPortRoleRestriction=hpnicfdot1sMstiStpPortRoleRestriction, hpnicfdot1sMstiDesignatedRoot=hpnicfdot1sMstiDesignatedRoot, hpnicfdot1sMstiRemainingHops=hpnicfdot1sMstiRemainingHops, hpnicfPortMstiRootGuarded=hpnicfPortMstiRootGuarded, EnabledStatus=EnabledStatus, hpnicfdot1sMstiStpTXStpBPDU=hpnicfdot1sMstiStpTXStpBPDU)
