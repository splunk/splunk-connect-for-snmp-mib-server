#
# PySNMP MIB module CISCO-OPTICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OPTICAL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:51:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Integer32, TimeTicks, ObjectIdentity, Unsigned32, IpAddress, Counter64, Counter32, MibIdentifier, Gauge32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "TimeTicks", "ObjectIdentity", "Unsigned32", "IpAddress", "Counter64", "Counter32", "MibIdentifier", "Gauge32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, MacAddress, TextualConvention, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TruthValue", "TimeStamp")
ciscoOpticalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 828))
ciscoOpticalMIB.setRevisions(('2016-05-24 00:00', '2015-12-01 00:00', '2015-10-30 00:00',))
if mibBuilder.loadTexts: ciscoOpticalMIB.setLastUpdated('201605240000Z')
if mibBuilder.loadTexts: ciscoOpticalMIB.setOrganization('Cisco Systems, Inc.')
class CoiOpticalPower(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-4000, 3000)

class CoiOpticalWavelength(TextualConvention, Unsigned32):
    reference = 'ITU - T Recommendation G.694.1 - Spectral grids for WDM applications: DWDM frequency grid, May 2002'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1528770, 1604030), )
class CoiIntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fifteenMin", 1), ("oneDay", 2), ("thirtySecond", 3))

class CoiPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("clientPort", 1), ("trunkPort", 2))

class CoiOptAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("alarmUnknown", 1), ("equipmentFailure", 2))

class CoiOptAlarmSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notReported", 1), ("notAlarmed", 2), ("minor", 3), ("major", 4), ("critical", 5))

class CoiOptAlarmStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("raised", 1), ("cleared", 2), ("transient", 3))

class CoiOptAlarmServiceAffecting(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("serviceAffecting", 1), ("nonServiceAffecting", 2))

ciscoOpticalMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 0))
ciscoOpticalMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1))
coiOpticsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 828, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPortType"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"))
if mibBuilder.loadTexts: coiOpticsStatusChange.setStatus('current')
coiOpticalEquipmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 828, 0, 2)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalAlarmLocation"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmType"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmTimeStamp"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmName"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmAdditionalInfo"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmSeverity"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmServiceAffecting"))
if mibBuilder.loadTexts: coiOpticalEquipmentAlarm.setStatus('current')
coiOpticalController = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1))
coiOpticalPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2))
coiOpticalNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalNotifEnabled.setStatus('current')
coiOpticalControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2), )
if mibBuilder.loadTexts: coiOpticalControllerTable.setStatus('current')
coiOpticalControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coiOpticalControllerEntry.setStatus('current')
coiOpticalControllerWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 1), CoiOpticalWavelength().clone(1529553)).setUnits('1/100 nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerWavelength.setStatus('current')
coiOpticalControllerLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerLaserStatus.setStatus('current')
coiOpticalControllerFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 3), Unsigned32()).setUnits('100 MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerFrequency.setStatus('current')
coiOpticalControllerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerChannelNumber.setStatus('current')
coiOpticalControllerTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 5), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTransmitPower.setStatus('current')
coiOpticalControllerOpticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerOpticsType.setStatus('current')
coiOpticalControllerRXLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 7), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerRXLowThreshold.setStatus('current')
coiOpticalControllerTXLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 8), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTXLowThreshold.setStatus('current')
coiOpticalControllerRXHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 9), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerRXHighThreshold.setStatus('current')
coiOpticalControllerTXHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 10), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTXHighThreshold.setStatus('current')
coiOpticalControllerLBCHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerLBCHighThreshold.setStatus('current')
coiOpticalControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 12), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("improprmvl", 1), ("mea", 2), ("provMismatch", 3), ("highRXPwr", 4), ("highTXPwr", 5), ("lowRXPwr", 6), ("lowTXPwr", 7), ("highLBC", 8), ("highDGD", 9), ("outOfRangeCD", 10), ("lowOSNR", 11), ("wvlOutOfLock", 12), ("highLaserTemp", 13), ("lowLaserTemp", 14), ("ppmFail", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerStatus.setStatus('current')
coiOpticalControllerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 13), CoiPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPortType.setStatus('current')
coiOpticalControllerTotalRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 14), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTotalRXPower.setStatus('current')
coiOpticalControllerTotalTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 2, 1, 15), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOpticalControllerTotalTXPower.setStatus('current')
coiOpticalControllerPerLaneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3), )
if mibBuilder.loadTexts: coiOpticalControllerPerLaneTable.setStatus('current')
coiOpticalControllerPerLaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOpticalControllerLane"))
if mibBuilder.loadTexts: coiOpticalControllerPerLaneEntry.setStatus('current')
coiOpticalControllerLane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coiOpticalControllerLane.setStatus('current')
coiOpticalControllerPerLaneRXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 2), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneRXPower.setStatus('current')
coiOpticalControllerPerLaneTXPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 3), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneTXPower.setStatus('current')
coiOpticalControllerPerLaneLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneLBC.setStatus('current')
coiOpticalControllerPerLaneOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 5), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneOSNR.setStatus('current')
coiOpticalControllerPerLaneChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 6), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneChromaticDispersion.setStatus('current')
coiOpticalControllerPerLaneDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 7), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneDifferentialGroupDelay.setStatus('current')
coiOpticalControllerPerLaneSecondOrderPMD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 8), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLaneSecondOrderPMD.setStatus('current')
coiOpticalControllerPerLanePolarizationDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 9), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLanePolarizationDependentLoss.setStatus('current')
coiOpticalControllerPerLanePolarizationChangeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 10), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLanePolarizationChangeRate.setStatus('current')
coiOpticalControllerPerLanePhaseNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 1, 3, 1, 11), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalControllerPerLanePhaseNoise.setStatus('current')
coiOpticalClientInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 3), )
if mibBuilder.loadTexts: coiOpticalClientInfoTable.setStatus('current')
coiOpticalClientInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coiOpticalClientInfoEntry.setStatus('current')
coiOpticalClientEthernetNeighbourMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOpticalClientEthernetNeighbourMAC.setStatus('current')
coiOpticalThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1), )
if mibBuilder.loadTexts: coiOpticalThresholdTable.setStatus('current')
coiOpticalThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOptThreshIntervalType"))
if mibBuilder.loadTexts: coiOpticalThresholdEntry.setStatus('current')
coiOptThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOptThreshIntervalType.setStatus('current')
coiOptThreshTXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 2), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerMin.setStatus('current')
coiOptThreshRXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 3), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerMin.setStatus('current')
coiOptThreshOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 4), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNRMin.setStatus('current')
coiOptThreshChromaticDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 5), Integer32()).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionMin.setStatus('current')
coiOptThreshDifferentialGroupDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 6), Integer32()).setUnits('1/100 ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayMin.setStatus('current')
coiOptThreshSecondOrderPMDMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 7), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDMin.setStatus('current')
coiOptThreshPolarizationDependentLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 8), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossMin.setStatus('current')
coiOptThreshPolarizationChangeRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 9), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateMin.setStatus('current')
coiOptThreshPhaseNoiseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 10), Integer32()).setUnits('1/1000 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseMin.setStatus('current')
coiOptThreshLBCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCMin.setStatus('current')
coiOptThreshTXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 12), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerMax.setStatus('current')
coiOptThreshRXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 13), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerMax.setStatus('current')
coiOptThreshOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 14), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNRMax.setStatus('current')
coiOptThreshChromaticDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 15), Integer32()).setUnits('ps/nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionMax.setStatus('current')
coiOptThreshDifferentialGroupDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 16), Integer32()).setUnits('1/100 ps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayMax.setStatus('current')
coiOptThreshSecondOrderPMDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 17), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDMax.setStatus('current')
coiOptThreshPolarizationDependentLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 18), Integer32()).setUnits('1/100 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossMax.setStatus('current')
coiOptThreshPolarizationChangeRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 19), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateMax.setStatus('current')
coiOptThreshPhaseNoiseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 20), Integer32()).setUnits('1/1000 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseMax.setStatus('current')
coiOptThreshLBCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCMax.setStatus('current')
coiOptThreshTXPowerEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerEnableMin.setStatus('current')
coiOptThreshRXPowerEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerEnableMin.setStatus('current')
coiOptThreshOSNREnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNREnableMin.setStatus('current')
coiOptThreshChromaticDispersionEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionEnableMin.setStatus('current')
coiOptThreshDifferentialGroupDelayEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayEnableMin.setStatus('current')
coiOptThreshSecondOrderPMDEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDEnableMin.setStatus('current')
coiOptThreshPolarizationDependentLossEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossEnableMin.setStatus('current')
coiOptThreshPolarizationChangeRateEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateEnableMin.setStatus('current')
coiOptThreshPhaseNoiseEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseEnableMin.setStatus('current')
coiOptThreshLBCEnableMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCEnableMin.setStatus('current')
coiOptThreshTXPowerEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshTXPowerEnableMax.setStatus('current')
coiOptThreshRXPowerEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshRXPowerEnableMax.setStatus('current')
coiOptThreshOSNREnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshOSNREnableMax.setStatus('current')
coiOptThreshChromaticDispersionEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshChromaticDispersionEnableMax.setStatus('current')
coiOptThreshDifferentialGroupDelayEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshDifferentialGroupDelayEnableMax.setStatus('current')
coiOptThreshSecondOrderPMDEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshSecondOrderPMDEnableMax.setStatus('current')
coiOptThreshPolarizationDependentLossEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationDependentLossEnableMax.setStatus('current')
coiOptThreshPolarizationChangeRateEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPolarizationChangeRateEnableMax.setStatus('current')
coiOptThreshPhaseNoiseEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshPhaseNoiseEnableMax.setStatus('current')
coiOptThreshLBCEnableMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 1, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOptThreshLBCEnableMax.setStatus('current')
coiOpticalCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2), )
if mibBuilder.loadTexts: coiOpticalCurrentTable.setStatus('current')
coiOpticalCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOptCurrentLane"), (0, "CISCO-OPTICAL-MIB", "coiOptCurrentIntervalType"))
if mibBuilder.loadTexts: coiOpticalCurrentEntry.setStatus('current')
coiOptCurrentLane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coiOptCurrentLane.setStatus('current')
coiOptCurrentIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 2), CoiIntervalType())
if mibBuilder.loadTexts: coiOptCurrentIntervalType.setStatus('current')
coiOptCurrentTXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 3), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTXPowerMax.setStatus('current')
coiOptCurrentRXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 4), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentRXPowerMax.setStatus('current')
coiOptCurrentOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 5), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentOSNRMax.setStatus('current')
coiOptCurrentChromaticDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 6), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionMax.setStatus('current')
coiOptCurrentDifferentialGroupDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 7), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayMax.setStatus('current')
coiOptCurrentSecondOrderPMDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 8), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDMax.setStatus('current')
coiOptCurrentPolarizationDependentLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 9), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossMax.setStatus('current')
coiOptCurrentPolarizationChangeRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 10), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateMax.setStatus('current')
coiOptCurrentPhaseNoiseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 11), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseMax.setStatus('current')
coiOptCurrentLBCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentLBCMax.setStatus('current')
coiOptCurrentTXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 13), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTXPowerMin.setStatus('current')
coiOptCurrentRXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 14), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentRXPowerMin.setStatus('current')
coiOptCurrentOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 15), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentOSNRMin.setStatus('current')
coiOptCurrentChromaticDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 16), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionMin.setStatus('current')
coiOptCurrentDifferentialGroupDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 17), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayMin.setStatus('current')
coiOptCurrentSecondOrderPMDMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 18), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDMin.setStatus('current')
coiOptCurrentPolarizationDependentLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 19), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossMin.setStatus('current')
coiOptCurrentPolarizationChangeRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 20), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateMin.setStatus('current')
coiOptCurrentPhaseNoiseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 21), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseMin.setStatus('current')
coiOptCurrentLBCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentLBCMin.setStatus('current')
coiOptCurrentTXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 23), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTXPowerAvg.setStatus('current')
coiOptCurrentRXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 24), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentRXPowerAvg.setStatus('current')
coiOptCurrentOSNRAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 25), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentOSNRAvg.setStatus('current')
coiOptCurrentChromaticDispersionAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 26), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentChromaticDispersionAvg.setStatus('current')
coiOptCurrentDifferentialGroupDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 27), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentDifferentialGroupDelayAvg.setStatus('current')
coiOptCurrentSecondOrderPMDAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 28), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentSecondOrderPMDAvg.setStatus('current')
coiOptCurrentPolarizationDependentLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 29), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationDependentLossAvg.setStatus('current')
coiOptCurrentPolarizationChangeRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 30), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPolarizationChangeRateAvg.setStatus('current')
coiOptCurrentPhaseNoiseAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 31), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentPhaseNoiseAvg.setStatus('current')
coiOptCurrentLBCAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentLBCAvg.setStatus('current')
coiOptCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptCurrentTimestamp.setStatus('current')
coiOpticalIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3), )
if mibBuilder.loadTexts: coiOpticalIntervalTable.setStatus('current')
coiOpticalIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OPTICAL-MIB", "coiOptIntervalLane"), (0, "CISCO-OPTICAL-MIB", "coiOptIntervalIntervalType"), (0, "CISCO-OPTICAL-MIB", "coiOptIntervalNum"))
if mibBuilder.loadTexts: coiOpticalIntervalEntry.setStatus('current')
coiOptIntervalLane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coiOptIntervalLane.setStatus('current')
coiOptIntervalIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 2), CoiIntervalType())
if mibBuilder.loadTexts: coiOptIntervalIntervalType.setStatus('current')
coiOptIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: coiOptIntervalNum.setStatus('current')
coiOptIntervalTXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 4), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTXPowerMax.setStatus('current')
coiOptIntervalRXPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 5), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalRXPowerMax.setStatus('current')
coiOptIntervalOSNRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 6), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalOSNRMax.setStatus('current')
coiOptIntervalChromaticDispersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 7), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionMax.setStatus('current')
coiOptIntervalDifferentialGroupDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 8), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayMax.setStatus('current')
coiOptIntervalSecondOrderPMDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 9), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDMax.setStatus('current')
coiOptIntervalPolarizationDependentLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 10), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossMax.setStatus('current')
coiOptIntervalPolarizationChangeRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 11), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateMax.setStatus('current')
coiOptIntervalPhaseNoiseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 12), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseMax.setStatus('current')
coiOptIntervalLBCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 13), Integer32()).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalLBCMax.setStatus('current')
coiOptIntervalTXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 14), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTXPowerMin.setStatus('current')
coiOptIntervalRXPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 15), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalRXPowerMin.setStatus('current')
coiOptIntervalOSNRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 16), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalOSNRMin.setStatus('current')
coiOptIntervalChromaticDispersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 17), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionMin.setStatus('current')
coiOptIntervalDifferentialGroupDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 18), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayMin.setStatus('current')
coiOptIntervalSecondOrderPMDMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 19), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDMin.setStatus('current')
coiOptIntervalPolarizationDependentLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 20), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossMin.setStatus('current')
coiOptIntervalPolarizationChangeRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 21), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateMin.setStatus('current')
coiOptIntervalPhaseNoiseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 22), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseMin.setStatus('current')
coiOptIntervalLBCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 23), Integer32()).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalLBCMin.setStatus('current')
coiOptIntervalTXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 24), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTXPowerAvg.setStatus('current')
coiOptIntervalRXPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 25), CoiOpticalPower()).setUnits('1/100 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalRXPowerAvg.setStatus('current')
coiOptIntervalOSNRAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 26), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalOSNRAvg.setStatus('current')
coiOptIntervalChromaticDispersionAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 27), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalChromaticDispersionAvg.setStatus('current')
coiOptIntervalDifferentialGroupDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 28), Integer32()).setUnits('1/100 ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalDifferentialGroupDelayAvg.setStatus('current')
coiOptIntervalSecondOrderPMDAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 29), Integer32()).setUnits('1/100 ps^2').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalSecondOrderPMDAvg.setStatus('current')
coiOptIntervalPolarizationDependentLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 30), Integer32()).setUnits('1/100 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationDependentLossAvg.setStatus('current')
coiOptIntervalPolarizationChangeRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 31), Integer32()).setUnits('1/100 rad/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPolarizationChangeRateAvg.setStatus('current')
coiOptIntervalPhaseNoiseAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 32), Integer32()).setUnits('1/1000 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalPhaseNoiseAvg.setStatus('current')
coiOptIntervalLBCAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 33), Integer32()).setUnits('1/10 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalLBCAvg.setStatus('current')
coiOptIntervalTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 2, 3, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOptIntervalTimestamp.setStatus('current')
coiOpticalEquipmentAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4))
coiOpticalAlarmLocation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmLocation.setStatus('current')
coiOpticalAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 2), CoiOptAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmType.setStatus('current')
coiOpticalAlarmTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 3), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmTimeStamp.setStatus('current')
coiOpticalAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmName.setStatus('current')
coiOpticalAlarmAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmAdditionalInfo.setStatus('current')
coiOpticalAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 6), CoiOptAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmSeverity.setStatus('current')
coiOpticalAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 7), CoiOptAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmStatus.setStatus('current')
coiOpticalAlarmServiceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 828, 1, 4, 8), CoiOptAlarmServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: coiOpticalAlarmServiceAffecting.setStatus('current')
ciscoOpticalMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 2))
ciscoOpticalMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 1))
ciscoOpticalMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2))
ciscoOpticalMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 1, 1)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalClientInfoGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalThresholdGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalCurrentGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalIntervalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifEnableGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifStatusObjectGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalEquipmentAlarmInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOpticalMIBCompliance = ciscoOpticalMIBCompliance.setStatus('deprecated')
ciscoOpticalMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 1, 2)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalClientInfoGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalThresholdGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalCurrentGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalIntervalGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifEnableGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifStatusObjectGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalNotifGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalEquipmentAlarmInfoGroup"), ("CISCO-OPTICAL-MIB", "coiOpticalPowerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOpticalMIBComplianceRev1 = ciscoOpticalMIBComplianceRev1.setStatus('current')
coiOpticalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 1)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerLaserStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTransmitPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerOpticsType"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerLBCHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneRXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneTXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneLBC"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalGroup = coiOpticalGroup.setStatus('current')
coiOpticalControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 2)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerWavelength"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerLaserStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerFrequency"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerChannelNumber"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTransmitPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerOpticsType"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXLowThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerRXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTXHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerLBCHighThreshold"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalControllerGroup = coiOpticalControllerGroup.setStatus('current')
coiOpticalControllerPerLaneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 3)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneRXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneTXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneLBC"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneOSNR"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneChromaticDispersion"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneDifferentialGroupDelay"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLaneSecondOrderPMD"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLanePolarizationDependentLoss"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLanePolarizationChangeRate"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerPerLanePhaseNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalControllerPerLaneGroup = coiOpticalControllerPerLaneGroup.setStatus('current')
coiOpticalClientInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 4)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalClientEthernetNeighbourMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalClientInfoGroup = coiOpticalClientInfoGroup.setStatus('current')
coiOpticalThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 5)).setObjects(("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNRMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNRMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNREnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCEnableMin"), ("CISCO-OPTICAL-MIB", "coiOptThreshTXPowerEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshRXPowerEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshOSNREnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshChromaticDispersionEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshDifferentialGroupDelayEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshSecondOrderPMDEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationDependentLossEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPolarizationChangeRateEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshPhaseNoiseEnableMax"), ("CISCO-OPTICAL-MIB", "coiOptThreshLBCEnableMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalThresholdGroup = coiOpticalThresholdGroup.setStatus('current')
coiOpticalCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 6)).setObjects(("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentOSNRMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentChromaticDispersionMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentDifferentialGroupDelayMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentSecondOrderPMDMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationDependentLossMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationChangeRateMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPhaseNoiseMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentOSNRMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentChromaticDispersionMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentDifferentialGroupDelayMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentSecondOrderPMDMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationDependentLossMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationChangeRateMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPhaseNoiseMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentOSNRAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentChromaticDispersionAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentDifferentialGroupDelayAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentSecondOrderPMDAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationDependentLossAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPolarizationChangeRateAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentPhaseNoiseAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentLBCAvg"), ("CISCO-OPTICAL-MIB", "coiOptCurrentTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalCurrentGroup = coiOpticalCurrentGroup.setStatus('current')
coiOpticalIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 7)).setObjects(("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalOSNRMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalChromaticDispersionMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalDifferentialGroupDelayMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalSecondOrderPMDMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationDependentLossMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationChangeRateMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPhaseNoiseMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMax"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalOSNRMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalChromaticDispersionMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalDifferentialGroupDelayMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalSecondOrderPMDMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationDependentLossMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationChangeRateMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPhaseNoiseMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCMin"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalRXPowerAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalOSNRAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalChromaticDispersionAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalDifferentialGroupDelayAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalSecondOrderPMDAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationDependentLossAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPolarizationChangeRateAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalPhaseNoiseAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalLBCAvg"), ("CISCO-OPTICAL-MIB", "coiOptIntervalTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalIntervalGroup = coiOpticalIntervalGroup.setStatus('current')
coiOpticalNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 8)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalNotifEnableGroup = coiOpticalNotifEnableGroup.setStatus('current')
coiOpticalNotifStatusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 9)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalNotifStatusObjectGroup = coiOpticalNotifStatusObjectGroup.setStatus('current')
coiOpticalNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 10)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticsStatusChange"), ("CISCO-OPTICAL-MIB", "coiOpticalEquipmentAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalNotifGroup = coiOpticalNotifGroup.setStatus('current')
coiOpticalEquipmentAlarmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 11)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalAlarmLocation"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmType"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmTimeStamp"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmName"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmAdditionalInfo"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmSeverity"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmStatus"), ("CISCO-OPTICAL-MIB", "coiOpticalAlarmServiceAffecting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalEquipmentAlarmInfoGroup = coiOpticalEquipmentAlarmInfoGroup.setStatus('current')
coiOpticalPowerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 828, 2, 2, 12)).setObjects(("CISCO-OPTICAL-MIB", "coiOpticalControllerTotalRXPower"), ("CISCO-OPTICAL-MIB", "coiOpticalControllerTotalTXPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiOpticalPowerGroup = coiOpticalPowerGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-OPTICAL-MIB", coiOptThreshDifferentialGroupDelayEnableMin=coiOptThreshDifferentialGroupDelayEnableMin, CoiOptAlarmType=CoiOptAlarmType, CoiPortType=CoiPortType, coiOptThreshOSNREnableMin=coiOptThreshOSNREnableMin, coiOpticalControllerPerLaneOSNR=coiOpticalControllerPerLaneOSNR, coiOptThreshOSNRMin=coiOptThreshOSNRMin, coiOptThreshPolarizationChangeRateEnableMax=coiOptThreshPolarizationChangeRateEnableMax, coiOptThreshDifferentialGroupDelayMax=coiOptThreshDifferentialGroupDelayMax, coiOpticalControllerFrequency=coiOpticalControllerFrequency, coiOpticalControllerPerLaneChromaticDispersion=coiOpticalControllerPerLaneChromaticDispersion, coiOptThreshSecondOrderPMDMin=coiOptThreshSecondOrderPMDMin, coiOpticalAlarmName=coiOpticalAlarmName, coiOpticalControllerPerLaneSecondOrderPMD=coiOpticalControllerPerLaneSecondOrderPMD, coiOptThreshSecondOrderPMDMax=coiOptThreshSecondOrderPMDMax, coiOpticalThresholdTable=coiOpticalThresholdTable, coiOptIntervalPolarizationDependentLossMax=coiOptIntervalPolarizationDependentLossMax, coiOpticalIntervalGroup=coiOpticalIntervalGroup, coiOptThreshSecondOrderPMDEnableMin=coiOptThreshSecondOrderPMDEnableMin, coiOpticalControllerRXLowThreshold=coiOpticalControllerRXLowThreshold, coiOpticalControllerChannelNumber=coiOpticalControllerChannelNumber, coiOptThreshDifferentialGroupDelayMin=coiOptThreshDifferentialGroupDelayMin, coiOpticalControllerLBCHighThreshold=coiOpticalControllerLBCHighThreshold, coiOptIntervalTXPowerMax=coiOptIntervalTXPowerMax, coiOptIntervalRXPowerMax=coiOptIntervalRXPowerMax, CoiOpticalWavelength=CoiOpticalWavelength, coiOptIntervalSecondOrderPMDMax=coiOptIntervalSecondOrderPMDMax, coiOptThreshPolarizationDependentLossMax=coiOptThreshPolarizationDependentLossMax, coiOptIntervalChromaticDispersionMin=coiOptIntervalChromaticDispersionMin, coiOptThreshRXPowerMax=coiOptThreshRXPowerMax, coiOpticalClientEthernetNeighbourMAC=coiOpticalClientEthernetNeighbourMAC, ciscoOpticalMIBGroups=ciscoOpticalMIBGroups, coiOptThreshTXPowerEnableMax=coiOptThreshTXPowerEnableMax, coiOpticalControllerOpticsType=coiOpticalControllerOpticsType, coiOpticalEquipmentAlarmInfoGroup=coiOpticalEquipmentAlarmInfoGroup, coiOptCurrentTXPowerAvg=coiOptCurrentTXPowerAvg, coiOpticalPerformanceMonitoring=coiOpticalPerformanceMonitoring, coiOptIntervalPhaseNoiseMax=coiOptIntervalPhaseNoiseMax, coiOptThreshChromaticDispersionEnableMin=coiOptThreshChromaticDispersionEnableMin, coiOpticalIntervalTable=coiOpticalIntervalTable, coiOptThreshPhaseNoiseMin=coiOptThreshPhaseNoiseMin, coiOptThreshPolarizationChangeRateEnableMin=coiOptThreshPolarizationChangeRateEnableMin, coiOpticalControllerTXLowThreshold=coiOpticalControllerTXLowThreshold, coiOptIntervalPolarizationChangeRateMin=coiOptIntervalPolarizationChangeRateMin, coiOptCurrentTimestamp=coiOptCurrentTimestamp, coiOptIntervalRXPowerAvg=coiOptIntervalRXPowerAvg, coiOpticalControllerPerLaneGroup=coiOpticalControllerPerLaneGroup, coiOpticalPowerGroup=coiOpticalPowerGroup, coiOptIntervalSecondOrderPMDMin=coiOptIntervalSecondOrderPMDMin, coiOpticalControllerTable=coiOpticalControllerTable, coiOptThreshChromaticDispersionMax=coiOptThreshChromaticDispersionMax, coiOpticalControllerGroup=coiOpticalControllerGroup, coiOptIntervalTimestamp=coiOptIntervalTimestamp, coiOptIntervalTXPowerAvg=coiOptIntervalTXPowerAvg, coiOpticalClientInfoEntry=coiOpticalClientInfoEntry, CoiOptAlarmServiceAffecting=CoiOptAlarmServiceAffecting, coiOptCurrentLane=coiOptCurrentLane, coiOptThreshLBCMax=coiOptThreshLBCMax, coiOptThreshLBCEnableMax=coiOptThreshLBCEnableMax, coiOptThreshPhaseNoiseEnableMin=coiOptThreshPhaseNoiseEnableMin, coiOptThreshChromaticDispersionMin=coiOptThreshChromaticDispersionMin, coiOptThreshPolarizationDependentLossEnableMin=coiOptThreshPolarizationDependentLossEnableMin, coiOptCurrentPolarizationChangeRateMax=coiOptCurrentPolarizationChangeRateMax, coiOptIntervalOSNRMax=coiOptIntervalOSNRMax, coiOptIntervalPolarizationDependentLossMin=coiOptIntervalPolarizationDependentLossMin, coiOpticalClientInfoTable=coiOpticalClientInfoTable, coiOpticalControllerPerLaneTable=coiOpticalControllerPerLaneTable, coiOptThreshTXPowerMin=coiOptThreshTXPowerMin, coiOptIntervalDifferentialGroupDelayAvg=coiOptIntervalDifferentialGroupDelayAvg, coiOptCurrentLBCMax=coiOptCurrentLBCMax, coiOpticalEquipmentAlarm=coiOpticalEquipmentAlarm, ciscoOpticalMIBCompliance=ciscoOpticalMIBCompliance, coiOptThreshPolarizationChangeRateMin=coiOptThreshPolarizationChangeRateMin, coiOptThreshOSNRMax=coiOptThreshOSNRMax, coiOptCurrentIntervalType=coiOptCurrentIntervalType, coiOptCurrentOSNRAvg=coiOptCurrentOSNRAvg, coiOptThreshPolarizationDependentLossMin=coiOptThreshPolarizationDependentLossMin, coiOpticalAlarmStatus=coiOpticalAlarmStatus, CoiOptAlarmSeverity=CoiOptAlarmSeverity, coiOpticalCurrentGroup=coiOpticalCurrentGroup, coiOpticalAlarmLocation=coiOpticalAlarmLocation, coiOpticalThresholdEntry=coiOpticalThresholdEntry, coiOptThreshRXPowerEnableMax=coiOptThreshRXPowerEnableMax, coiOptIntervalOSNRMin=coiOptIntervalOSNRMin, coiOptIntervalPhaseNoiseMin=coiOptIntervalPhaseNoiseMin, coiOpticalControllerRXHighThreshold=coiOpticalControllerRXHighThreshold, coiOpticalControllerLane=coiOpticalControllerLane, coiOptCurrentChromaticDispersionAvg=coiOptCurrentChromaticDispersionAvg, coiOpticalController=coiOpticalController, coiOptCurrentDifferentialGroupDelayMax=coiOptCurrentDifferentialGroupDelayMax, coiOptCurrentChromaticDispersionMin=coiOptCurrentChromaticDispersionMin, coiOptCurrentRXPowerMax=coiOptCurrentRXPowerMax, coiOpticalControllerTransmitPower=coiOpticalControllerTransmitPower, coiOptIntervalChromaticDispersionAvg=coiOptIntervalChromaticDispersionAvg, coiOptCurrentLBCAvg=coiOptCurrentLBCAvg, coiOptThreshRXPowerMin=coiOptThreshRXPowerMin, ciscoOpticalMIBConformance=ciscoOpticalMIBConformance, coiOpticalAlarmTimeStamp=coiOpticalAlarmTimeStamp, coiOpticalControllerPerLanePolarizationChangeRate=coiOpticalControllerPerLanePolarizationChangeRate, coiOptCurrentPhaseNoiseMax=coiOptCurrentPhaseNoiseMax, coiOptCurrentPolarizationChangeRateMin=coiOptCurrentPolarizationChangeRateMin, coiOptCurrentOSNRMax=coiOptCurrentOSNRMax, coiOpticalControllerTotalRXPower=coiOpticalControllerTotalRXPower, coiOptIntervalLBCMax=coiOptIntervalLBCMax, CoiOptAlarmStatus=CoiOptAlarmStatus, coiOptThreshChromaticDispersionEnableMax=coiOptThreshChromaticDispersionEnableMax, coiOptIntervalTXPowerMin=coiOptIntervalTXPowerMin, coiOpticalControllerPerLaneDifferentialGroupDelay=coiOpticalControllerPerLaneDifferentialGroupDelay, coiOptThreshSecondOrderPMDEnableMax=coiOptThreshSecondOrderPMDEnableMax, coiOptIntervalIntervalType=coiOptIntervalIntervalType, coiOptIntervalRXPowerMin=coiOptIntervalRXPowerMin, coiOptIntervalLBCMin=coiOptIntervalLBCMin, coiOpticalAlarmSeverity=coiOpticalAlarmSeverity, coiOpticalNotifEnableGroup=coiOpticalNotifEnableGroup, coiOptIntervalLane=coiOptIntervalLane, coiOptCurrentPhaseNoiseMin=coiOptCurrentPhaseNoiseMin, ciscoOpticalMIBObjects=ciscoOpticalMIBObjects, coiOptCurrentPolarizationDependentLossAvg=coiOptCurrentPolarizationDependentLossAvg, coiOptIntervalLBCAvg=coiOptIntervalLBCAvg, coiOpticsStatusChange=coiOpticsStatusChange, coiOpticalThresholdGroup=coiOpticalThresholdGroup, coiOptThreshIntervalType=coiOptThreshIntervalType, coiOpticalAlarmServiceAffecting=coiOpticalAlarmServiceAffecting, coiOptThreshPolarizationChangeRateMax=coiOptThreshPolarizationChangeRateMax, CoiOpticalPower=CoiOpticalPower, coiOptCurrentLBCMin=coiOptCurrentLBCMin, coiOpticalControllerPerLaneEntry=coiOpticalControllerPerLaneEntry, coiOptIntervalNum=coiOptIntervalNum, ciscoOpticalMIBComplianceRev1=ciscoOpticalMIBComplianceRev1, coiOpticalControllerTXHighThreshold=coiOpticalControllerTXHighThreshold, CoiIntervalType=CoiIntervalType, coiOpticalControllerStatus=coiOpticalControllerStatus, coiOpticalNotifEnabled=coiOpticalNotifEnabled, coiOpticalControllerPerLanePhaseNoise=coiOpticalControllerPerLanePhaseNoise, coiOptThreshDifferentialGroupDelayEnableMax=coiOptThreshDifferentialGroupDelayEnableMax, coiOptCurrentDifferentialGroupDelayMin=coiOptCurrentDifferentialGroupDelayMin, coiOptThreshLBCMin=coiOptThreshLBCMin, coiOpticalEquipmentAlarmGroup=coiOpticalEquipmentAlarmGroup, coiOptCurrentRXPowerMin=coiOptCurrentRXPowerMin, coiOptCurrentPolarizationChangeRateAvg=coiOptCurrentPolarizationChangeRateAvg, PYSNMP_MODULE_ID=ciscoOpticalMIB, coiOptCurrentPolarizationDependentLossMax=coiOptCurrentPolarizationDependentLossMax, coiOpticalControllerPerLaneLBC=coiOpticalControllerPerLaneLBC, coiOptIntervalPolarizationDependentLossAvg=coiOptIntervalPolarizationDependentLossAvg, coiOpticalGroup=coiOpticalGroup, coiOptCurrentSecondOrderPMDMax=coiOptCurrentSecondOrderPMDMax, coiOptCurrentTXPowerMin=coiOptCurrentTXPowerMin, coiOptThreshPolarizationDependentLossEnableMax=coiOptThreshPolarizationDependentLossEnableMax, coiOptIntervalChromaticDispersionMax=coiOptIntervalChromaticDispersionMax, coiOpticalControllerLaserStatus=coiOpticalControllerLaserStatus, coiOpticalControllerPerLaneRXPower=coiOpticalControllerPerLaneRXPower, coiOptThreshLBCEnableMin=coiOptThreshLBCEnableMin, ciscoOpticalMIBNotifs=ciscoOpticalMIBNotifs, coiOptThreshTXPowerEnableMin=coiOptThreshTXPowerEnableMin, coiOptIntervalOSNRAvg=coiOptIntervalOSNRAvg, coiOptThreshOSNREnableMax=coiOptThreshOSNREnableMax, coiOpticalClientInfoGroup=coiOpticalClientInfoGroup, coiOpticalNotifGroup=coiOpticalNotifGroup, coiOptCurrentSecondOrderPMDMin=coiOptCurrentSecondOrderPMDMin, coiOpticalControllerPerLaneTXPower=coiOpticalControllerPerLaneTXPower, coiOpticalControllerTotalTXPower=coiOpticalControllerTotalTXPower, coiOpticalCurrentTable=coiOpticalCurrentTable, coiOpticalIntervalEntry=coiOpticalIntervalEntry, coiOptCurrentPolarizationDependentLossMin=coiOptCurrentPolarizationDependentLossMin, coiOpticalControllerPerLanePolarizationDependentLoss=coiOpticalControllerPerLanePolarizationDependentLoss, coiOpticalAlarmAdditionalInfo=coiOpticalAlarmAdditionalInfo, coiOpticalControllerWavelength=coiOpticalControllerWavelength, coiOptThreshTXPowerMax=coiOptThreshTXPowerMax, coiOpticalControllerEntry=coiOpticalControllerEntry, coiOpticalCurrentEntry=coiOpticalCurrentEntry, ciscoOpticalMIB=ciscoOpticalMIB, coiOptIntervalPolarizationChangeRateMax=coiOptIntervalPolarizationChangeRateMax, coiOptCurrentDifferentialGroupDelayAvg=coiOptCurrentDifferentialGroupDelayAvg, coiOpticalAlarmType=coiOpticalAlarmType, coiOptThreshPhaseNoiseEnableMax=coiOptThreshPhaseNoiseEnableMax, coiOptThreshPhaseNoiseMax=coiOptThreshPhaseNoiseMax, coiOptCurrentChromaticDispersionMax=coiOptCurrentChromaticDispersionMax, ciscoOpticalMIBCompliances=ciscoOpticalMIBCompliances, coiOptCurrentSecondOrderPMDAvg=coiOptCurrentSecondOrderPMDAvg, coiOptCurrentTXPowerMax=coiOptCurrentTXPowerMax, coiOptIntervalPhaseNoiseAvg=coiOptIntervalPhaseNoiseAvg, coiOptIntervalSecondOrderPMDAvg=coiOptIntervalSecondOrderPMDAvg, coiOptIntervalDifferentialGroupDelayMin=coiOptIntervalDifferentialGroupDelayMin, coiOptCurrentOSNRMin=coiOptCurrentOSNRMin, coiOptIntervalDifferentialGroupDelayMax=coiOptIntervalDifferentialGroupDelayMax, coiOptCurrentPhaseNoiseAvg=coiOptCurrentPhaseNoiseAvg, coiOpticalNotifStatusObjectGroup=coiOpticalNotifStatusObjectGroup, coiOpticalControllerPortType=coiOpticalControllerPortType, coiOptIntervalPolarizationChangeRateAvg=coiOptIntervalPolarizationChangeRateAvg, coiOptCurrentRXPowerAvg=coiOptCurrentRXPowerAvg, coiOptThreshRXPowerEnableMin=coiOptThreshRXPowerEnableMin)
