#
# PySNMP MIB module IEEE8021-AS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-AS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
IEEE8021BridgePortNumber, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021BridgePortNumber")
ifGeneralInformationGroup, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup", "InterfaceIndexOrZero")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Bits, Integer32, ModuleIdentity, iso, TimeTicks, Counter64, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Bits", "Integer32", "ModuleIdentity", "iso", "TimeTicks", "Counter64", "IpAddress", "Unsigned32")
TextualConvention, DisplayString, RowStatus, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TimeStamp", "TruthValue")
ieee8021AsTimeSyncMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 20))
ieee8021AsTimeSyncMib.setRevisions(('2012-12-12 00:00', '2010-11-11 00:00',))
if mibBuilder.loadTexts: ieee8021AsTimeSyncMib.setLastUpdated('201212120000Z')
if mibBuilder.loadTexts: ieee8021AsTimeSyncMib.setOrganization('IEEE 802.1 Working Group')
ieee8021AsMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1))
ieee8021AsConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 2))
class ClockIdentity(TextualConvention, OctetString):
    reference = '6.3.3.6 and 8.5.2.2.1'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class IEEE8021ASClockClassValue(TextualConvention, Integer32):
    reference = '14.2.3 and IEEE Std 1588-2008 7.6.2.4'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(6, 7, 13, 14, 52, 58, 187, 193, 248, 255))
    namedValues = NamedValues(("primarySync", 6), ("primarySyncLost", 7), ("applicationSpecificSync", 13), ("applicationSpecficSyncLost", 14), ("primarySyncAlternativeA", 52), ("applicationSpecificAlternativeA", 58), ("primarySyncAlternativeB", 187), ("applicationSpecficAlternativeB", 193), ("defaultClock", 248), ("slaveOnlyClock", 255))

class IEEE8021ASClockAccuracyValue(TextualConvention, Integer32):
    reference = '8.6.2.3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))
    namedValues = NamedValues(("timeAccurateTo25ns", 32), ("timeAccurateTo100ns", 33), ("timeAccurateTo250ns", 34), ("timeAccurateTo1us", 35), ("timeAccurateTo2dot5us", 36), ("timeAccurateTo10us", 37), ("timeAccurateTo25us", 38), ("timeAccurateTo100us", 39), ("timeAccurateTo250us", 40), ("timeAccurateTo1ms", 41), ("timeAccurateTo2dot5ms", 42), ("timeAccurateTo10ms", 43), ("timeAccurateTo25ms", 44), ("timeAccurateTo100ms", 45), ("timeAccurateTo250ms", 46), ("timeAccurateTo1s", 47), ("timeAccurateTo10s", 48), ("timeAccurateToGT10s", 49), ("timeAccurateToUnknown", 254))

class IEEE8021ASTimeSourceValue(TextualConvention, Integer32):
    reference = '8.6.2.7 and Table 8-3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 96, 144, 160))
    namedValues = NamedValues(("atomicClock", 16), ("gps", 32), ("terrestrialRadio", 48), ("ptp", 64), ("ntp", 80), ("handSet", 96), ("other", 144), ("internalOscillator", 160))

ieee8021AsDefaultDS = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 1))
ieee8021AsDefaultDSClockIdentity = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 1), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSClockIdentity.setStatus('current')
ieee8021AsDefaultDSNumberPorts = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSNumberPorts.setStatus('current')
ieee8021AsDefaultDSClockClass = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 3), IEEE8021ASClockClassValue().clone('defaultClock')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSClockClass.setStatus('current')
ieee8021AsDefaultDSClockAccuracy = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 4), IEEE8021ASClockAccuracyValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSClockAccuracy.setStatus('current')
ieee8021AsDefaultDSOffsetScaledLogVariance = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSOffsetScaledLogVariance.setStatus('current')
ieee8021AsDefaultDSPriority1 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsDefaultDSPriority1.setStatus('current')
ieee8021AsDefaultDSPriority2 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(248)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsDefaultDSPriority2.setStatus('current')
ieee8021AsDefaultDSGmCapable = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSGmCapable.setStatus('current')
ieee8021AsDefaultDSCurrentUTCOffset = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSCurrentUTCOffset.setStatus('current')
ieee8021AsDefaultDSCurrentUTCOffsetValid = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSCurrentUTCOffsetValid.setStatus('current')
ieee8021AsDefaultDSLeap59 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSLeap59.setStatus('current')
ieee8021AsDefaultDSLeap61 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSLeap61.setStatus('current')
ieee8021AsDefaultDSTimeTraceable = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSTimeTraceable.setStatus('current')
ieee8021AsDefaultDSFrequencyTraceable = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSFrequencyTraceable.setStatus('current')
ieee8021AsDefaultDSTimeSource = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 15), IEEE8021ASTimeSourceValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsDefaultDSTimeSource.setStatus('current')
ieee8021AsCurrentDS = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 2))
ieee8021AsCurrentDSStepsRemoved = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSStepsRemoved.setStatus('current')
ieee8021AsCurrentDSOffsetFromMasterHs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 2), Integer32()).setUnits('2**-16 ns * 2**64').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSOffsetFromMasterHs.setStatus('current')
ieee8021AsCurrentDSOffsetFromMasterMs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 3), Integer32()).setUnits('2**-16 ns * 2**32').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSOffsetFromMasterMs.setStatus('current')
ieee8021AsCurrentDSOffsetFromMasterLs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 4), Integer32()).setUnits('2**-16 ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSOffsetFromMasterLs.setStatus('current')
ieee8021AsCurrentDSLastGmPhaseChangeHs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSLastGmPhaseChangeHs.setStatus('current')
ieee8021AsCurrentDSLastGmPhaseChangeMs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSLastGmPhaseChangeMs.setStatus('current')
ieee8021AsCurrentDSLastGmPhaseChangeLs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSLastGmPhaseChangeLs.setStatus('current')
ieee8021AsCurrentDSLastGmFreqChangeMs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSLastGmFreqChangeMs.setStatus('current')
ieee8021AsCurrentDSLastGmFreqChangeLs = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSLastGmFreqChangeLs.setStatus('current')
ieee8021AsCurrentDSGmTimebaseIndicator = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSGmTimebaseIndicator.setStatus('current')
ieee8021AsCurrentDSGmChangeCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSGmChangeCount.setStatus('current')
ieee8021AsCurrentDSTimeOfLastGmChangeEvent = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 12), TimeStamp()).setUnits('0.01 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSTimeOfLastGmChangeEvent.setStatus('current')
ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 13), TimeStamp()).setUnits('0.01 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent.setStatus('current')
ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 14), TimeStamp()).setUnits('0.01 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent.setStatus('current')
ieee8021AsParentDS = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 3))
ieee8021AsParentDSParentClockIdentity = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 1), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSParentClockIdentity.setStatus('current')
ieee8021AsParentDSParentPortNumber = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSParentPortNumber.setStatus('current')
ieee8021AsParentDSCumlativeRateRatio = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSCumlativeRateRatio.setStatus('current')
ieee8021AsParentDSGrandmasterIdentity = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 4), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSGrandmasterIdentity.setStatus('current')
ieee8021AsParentDSGrandmasterClockClass = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 5), IEEE8021ASClockClassValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSGrandmasterClockClass.setStatus('current')
ieee8021AsParentDSGrandmasterClockAccuracy = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 6), IEEE8021ASClockAccuracyValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSGrandmasterClockAccuracy.setStatus('current')
ieee8021AsParentDSGrandmasterOffsetScaledLogVariance = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsParentDSGrandmasterOffsetScaledLogVariance.setStatus('current')
ieee8021AsParentDSGrandmasterPriority1 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsParentDSGrandmasterPriority1.setStatus('current')
ieee8021AsParentDSGrandmasterPriority2 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsParentDSGrandmasterPriority2.setStatus('current')
ieee8021AsTimePropertiesDS = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 4))
ieee8021AsTimePropertiesDSCurrentUtcOffset = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSCurrentUtcOffset.setStatus('current')
ieee8021AsTimePropertiesDSCurrentUtcOffsetValid = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSCurrentUtcOffsetValid.setStatus('current')
ieee8021AsTimePropertiesDSLeap59 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSLeap59.setStatus('current')
ieee8021AsTimePropertiesDSLeap61 = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSLeap61.setStatus('current')
ieee8021AsTimePropertiesDSTimeTraceable = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSTimeTraceable.setStatus('current')
ieee8021AsTimePropertiesDSFrequencyTraceable = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSFrequencyTraceable.setStatus('current')
ieee8021AsTimePropertiesDSTimeSource = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 7), IEEE8021ASTimeSourceValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsTimePropertiesDSTimeSource.setStatus('current')
ieee8021AsPortDSIfTable = MibTable((1, 3, 111, 2, 802, 1, 1, 20, 1, 5), )
if mibBuilder.loadTexts: ieee8021AsPortDSIfTable.setStatus('current')
ieee8021AsPortDSIfEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1), ).setIndexNames((0, "IEEE8021-AS-MIB", "ieee8021AsBridgeBasePort"), (0, "IEEE8021-AS-MIB", "ieee8021AsPortDSAsIfIndex"))
if mibBuilder.loadTexts: ieee8021AsPortDSIfEntry.setStatus('current')
ieee8021AsBridgeBasePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021AsBridgeBasePort.setStatus('current')
ieee8021AsPortDSAsIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ieee8021AsPortDSAsIfIndex.setStatus('current')
ieee8021AsPortDSClockIdentity = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 3), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSClockIdentity.setStatus('current')
ieee8021AsPortDSPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSPortNumber.setStatus('current')
ieee8021AsPortDSPortRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 9))).clone(namedValues=NamedValues(("disabledPort", 3), ("masterPort", 6), ("passivePort", 7), ("slavePort", 9))).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSPortRole.setStatus('current')
ieee8021AsPortDSPttPortEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 6), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSPttPortEnabled.setStatus('current')
ieee8021AsPortDSIsMeasuringDelay = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 7), TruthValue().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSIsMeasuringDelay.setStatus('current')
ieee8021AsPortDSAsCapable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSAsCapable.setStatus('current')
ieee8021AsPortDSNeighborPropDelayHs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 9), Unsigned32()).setUnits('2**-16 ns * 2**64').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborPropDelayHs.setStatus('current')
ieee8021AsPortDSNeighborPropDelayMs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 10), Unsigned32()).setUnits('2**-16 ns * 2**32').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborPropDelayMs.setStatus('current')
ieee8021AsPortDSNeighborPropDelayLs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 11), Unsigned32()).setUnits('2**-16 ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborPropDelayLs.setStatus('current')
ieee8021AsPortDSNeighborPropDelayThreshHs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 12), Unsigned32()).setUnits('2**-16 ns * 2 ** 64').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborPropDelayThreshHs.setStatus('current')
ieee8021AsPortDSNeighborPropDelayThreshMs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 13), Unsigned32()).setUnits('2**-16 ns * 2 ** 32').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborPropDelayThreshMs.setStatus('current')
ieee8021AsPortDSNeighborPropDelayThreshLs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 14), Unsigned32()).setUnits('2**-16 ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborPropDelayThreshLs.setStatus('current')
ieee8021AsPortDSDelayAsymmetryHs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 15), Integer32()).setUnits('2**-16 ns * 2**64').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSDelayAsymmetryHs.setStatus('current')
ieee8021AsPortDSDelayAsymmetryMs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 16), Unsigned32()).setUnits('2**-16 ns * 2**32').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSDelayAsymmetryMs.setStatus('current')
ieee8021AsPortDSDelayAsymmetryLs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 17), Unsigned32()).setUnits('2**-16 ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSDelayAsymmetryLs.setStatus('current')
ieee8021AsPortDSNeighborRateRatio = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSNeighborRateRatio.setStatus('current')
ieee8021AsPortDSInitialLogAnnounceInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSInitialLogAnnounceInterval.setStatus('current')
ieee8021AsPortDSCurrentLogAnnounceInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSCurrentLogAnnounceInterval.setStatus('current')
ieee8021AsPortDSAnnounceReceiptTimeout = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSAnnounceReceiptTimeout.setStatus('current')
ieee8021AsPortDSInitialLogSyncInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127)).clone(-3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSInitialLogSyncInterval.setStatus('current')
ieee8021AsPortDSCurrentLogSyncInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127)).clone(-3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSCurrentLogSyncInterval.setStatus('current')
ieee8021AsPortDSSyncReceiptTimeout = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSSyncReceiptTimeout.setStatus('current')
ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 25), Unsigned32().clone(0)).setUnits('2**-16 ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs.setStatus('current')
ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 26), Unsigned32().clone(5722)).setUnits('2**-16 ns * 2**32').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs.setStatus('current')
ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 27), Unsigned32().clone(197132288)).setUnits('2**-16 ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs.setStatus('current')
ieee8021AsPortDSInitialLogPdelayReqInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSInitialLogPdelayReqInterval.setStatus('current')
ieee8021AsPortDSCurrentLogPdelayReqInterval = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSCurrentLogPdelayReqInterval.setStatus('current')
ieee8021AsPortDSAllowedLostResponses = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSAllowedLostResponses.setStatus('current')
ieee8021AsPortDSVersionNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortDSVersionNumber.setStatus('current')
ieee8021AsPortDSNupMs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNupMs.setStatus('current')
ieee8021AsPortDSNupLs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNupLs.setStatus('current')
ieee8021AsPortDSNdownMs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNdownMs.setStatus('current')
ieee8021AsPortDSNdownLs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSNdownLs.setStatus('current')
ieee8021AsPortDSAcceptableMasterTableEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 36), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsPortDSAcceptableMasterTableEnabled.setStatus('current')
ieee8021AsPortStatIfTable = MibTable((1, 3, 111, 2, 802, 1, 1, 20, 1, 6), )
if mibBuilder.loadTexts: ieee8021AsPortStatIfTable.setStatus('current')
ieee8021AsPortStatIfEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1), ).setIndexNames((0, "IEEE8021-AS-MIB", "ieee8021AsBridgeBasePort"), (0, "IEEE8021-AS-MIB", "ieee8021AsPortDSAsIfIndex"))
if mibBuilder.loadTexts: ieee8021AsPortStatIfEntry.setStatus('current')
ieee8021AsPortStatRxSyncCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxSyncCount.setStatus('current')
ieee8021AsPortStatRxFollowUpCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxFollowUpCount.setStatus('current')
ieee8021AsPortStatRxPdelayRequest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxPdelayRequest.setStatus('current')
ieee8021AsPortStatRxPdelayResponse = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxPdelayResponse.setStatus('current')
ieee8021AsPortStatRxPdelayResponseFollowUp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxPdelayResponseFollowUp.setStatus('current')
ieee8021AsPortStatRxAnnounce = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxAnnounce.setStatus('current')
ieee8021AsPortStatRxPTPPacketDiscard = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxPTPPacketDiscard.setStatus('current')
ieee8021AsPortStatRxSyncReceiptTimeouts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatRxSyncReceiptTimeouts.setStatus('current')
ieee8021AsPortStatAnnounceReceiptTimeouts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatAnnounceReceiptTimeouts.setStatus('current')
ieee8021AsPortStatPdelayAllowedLostResponsesExceeded = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatPdelayAllowedLostResponsesExceeded.setStatus('current')
ieee8021AsPortStatTxSyncCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatTxSyncCount.setStatus('current')
ieee8021AsPortStatTxFollowUpCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatTxFollowUpCount.setStatus('current')
ieee8021AsPortStatTxPdelayRequest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatTxPdelayRequest.setStatus('current')
ieee8021AsPortStatTxPdelayResponse = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatTxPdelayResponse.setStatus('current')
ieee8021AsPortStatTxPdelayResponseFollowUp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatTxPdelayResponseFollowUp.setStatus('current')
ieee8021AsPortStatTxAnnounce = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsPortStatTxAnnounce.setStatus('current')
ieee8021AsAcceptableMasterTableDS = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 7))
ieee8021AsAcceptableMasterTableDSBase = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 1))
ieee8021AsAcceptableMasterTableDSMaster = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2))
ieee8021AsAcceptableMasterTableDSMaxTableSize = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterTableDSMaxTableSize.setStatus('current')
ieee8021AsAcceptableMasterTableDSActualTableSize = MibScalar((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterTableDSActualTableSize.setStatus('current')
ieee8021AsAcceptableMasterTableDSMasterTable = MibTable((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1), )
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterTableDSMasterTable.setStatus('current')
ieee8021AsAcceptableMasterTableDSMasterEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1), ).setIndexNames((0, "IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterTableDSMasterId"))
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterTableDSMasterEntry.setStatus('current')
ieee8021AsAcceptableMasterTableDSMasterId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterTableDSMasterId.setStatus('current')
ieee8021AsAcceptableMasterClockIdentity = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 2), ClockIdentity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterClockIdentity.setStatus('current')
ieee8021AsAcceptableMasterPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterPortNumber.setStatus('current')
ieee8021AsAcceptableMasterAlternatePriority1 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(244)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterAlternatePriority1.setStatus('current')
ieee8021AsAcceptableMasterRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021AsAcceptableMasterRowStatus.setStatus('current')
ieee8021AsCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 2, 1))
ieee8021AsGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 2, 2))
ieee8021AsCompliancesCor1 = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 20, 2, 3))
ieee8021ASSystemDefaultReqdGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 1)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsDefaultDSClockIdentity"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSNumberPorts"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSClockClass"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSClockAccuracy"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSOffsetScaledLogVariance"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSPriority1"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSPriority2"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSGmCapable"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSCurrentUTCOffset"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSCurrentUTCOffsetValid"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSLeap59"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSLeap61"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSTimeTraceable"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSFrequencyTraceable"), ("IEEE8021-AS-MIB", "ieee8021AsDefaultDSTimeSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021ASSystemDefaultReqdGroup = ieee8021ASSystemDefaultReqdGroup.setStatus('current')
ieee8021ASSystemCurrentGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 2)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsCurrentDSStepsRemoved"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSOffsetFromMasterHs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSOffsetFromMasterMs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSOffsetFromMasterLs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSLastGmPhaseChangeHs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSLastGmPhaseChangeMs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSLastGmPhaseChangeLs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSLastGmFreqChangeMs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSLastGmFreqChangeLs"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSGmTimebaseIndicator"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSGmChangeCount"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSTimeOfLastGmChangeEvent"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent"), ("IEEE8021-AS-MIB", "ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021ASSystemCurrentGroup = ieee8021ASSystemCurrentGroup.setStatus('current')
ieee8021AsSystemClockParentGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 3)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsParentDSParentClockIdentity"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSParentPortNumber"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSCumlativeRateRatio"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSGrandmasterIdentity"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSGrandmasterClockClass"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSGrandmasterClockAccuracy"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSGrandmasterOffsetScaledLogVariance"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSGrandmasterPriority1"), ("IEEE8021-AS-MIB", "ieee8021AsParentDSGrandmasterPriority2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsSystemClockParentGroup = ieee8021AsSystemClockParentGroup.setStatus('current')
ieee8021AsSystemTimePropertiesGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 4)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSCurrentUtcOffset"), ("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSCurrentUtcOffsetValid"), ("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSLeap59"), ("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSLeap61"), ("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSTimeTraceable"), ("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSFrequencyTraceable"), ("IEEE8021-AS-MIB", "ieee8021AsTimePropertiesDSTimeSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsSystemTimePropertiesGroup = ieee8021AsSystemTimePropertiesGroup.setStatus('current')
ieee8021AsPortDataSetGlobalGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 5)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsPortDSClockIdentity"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSPortNumber"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSPortRole"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSPttPortEnabled"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSIsMeasuringDelay"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSAsCapable"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborPropDelayHs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborPropDelayMs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborPropDelayLs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborPropDelayThreshHs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborPropDelayThreshMs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborPropDelayThreshLs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSDelayAsymmetryHs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSDelayAsymmetryMs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSDelayAsymmetryLs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNeighborRateRatio"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSInitialLogAnnounceInterval"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSCurrentLogAnnounceInterval"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSAnnounceReceiptTimeout"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSInitialLogSyncInterval"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSCurrentLogSyncInterval"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSSyncReceiptTimeout"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSInitialLogPdelayReqInterval"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSCurrentLogPdelayReqInterval"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSAllowedLostResponses"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSVersionNumber"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNupMs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNupLs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNdownMs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSNdownLs"), ("IEEE8021-AS-MIB", "ieee8021AsPortDSAcceptableMasterTableEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsPortDataSetGlobalGroup = ieee8021AsPortDataSetGlobalGroup.setStatus('current')
ieee8021ASPortStatisticsGlobalGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 6)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsPortStatRxSyncCount"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxFollowUpCount"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxPdelayRequest"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxPdelayResponse"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxPdelayResponseFollowUp"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxAnnounce"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxPTPPacketDiscard"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatRxSyncReceiptTimeouts"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatAnnounceReceiptTimeouts"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatPdelayAllowedLostResponsesExceeded"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatTxSyncCount"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatTxFollowUpCount"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatTxPdelayRequest"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatTxPdelayResponse"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatTxPdelayResponseFollowUp"), ("IEEE8021-AS-MIB", "ieee8021AsPortStatTxAnnounce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021ASPortStatisticsGlobalGroup = ieee8021ASPortStatisticsGlobalGroup.setStatus('current')
ieee8021AsAcceptableMasterBaseGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 7)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterTableDSMaxTableSize"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterTableDSActualTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsAcceptableMasterBaseGroup = ieee8021AsAcceptableMasterBaseGroup.setStatus('current')
ieee8021AsAcceptableMasterTableGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 20, 2, 2, 8)).setObjects(("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterClockIdentity"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterPortNumber"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterAlternatePriority1"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsAcceptableMasterTableGroup = ieee8021AsAcceptableMasterTableGroup.setStatus('current')
ieee8021AsCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 20, 2, 1, 1)).setObjects(("SNMPv2-MIB", "systemGroup"), ("IF-MIB", "ifGeneralInformationGroup"), ("IEEE8021-AS-MIB", "ieee8021ASSystemDefaultReqdGroup"), ("IEEE8021-AS-MIB", "ieee8021ASSystemCurrentGroup"), ("IEEE8021-AS-MIB", "ieee8021AsSystemClockParentGroup"), ("IEEE8021-AS-MIB", "ieee8021AsSystemTimePropertiesGroup"), ("IEEE8021-AS-MIB", "ieee8021AsPortDataSetGlobalGroup"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterBaseGroup"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsCompliance = ieee8021AsCompliance.setStatus('deprecated')
ieee8021AsComplianceCor1 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 20, 2, 1, 2)).setObjects(("SNMPv2-MIB", "systemGroup"), ("IF-MIB", "ifGeneralInformationGroup"), ("IEEE8021-AS-MIB", "ieee8021ASSystemDefaultReqdGroup"), ("IEEE8021-AS-MIB", "ieee8021ASSystemCurrentGroup"), ("IEEE8021-AS-MIB", "ieee8021AsSystemClockParentGroup"), ("IEEE8021-AS-MIB", "ieee8021AsSystemTimePropertiesGroup"), ("IEEE8021-AS-MIB", "ieee8021AsPortDataSetGlobalGroup"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterBaseGroup"), ("IEEE8021-AS-MIB", "ieee8021AsAcceptableMasterTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021AsComplianceCor1 = ieee8021AsComplianceCor1.setStatus('current')
mibBuilder.exportSymbols("IEEE8021-AS-MIB", ieee8021AsSystemClockParentGroup=ieee8021AsSystemClockParentGroup, ieee8021AsTimePropertiesDS=ieee8021AsTimePropertiesDS, ieee8021AsPortStatIfEntry=ieee8021AsPortStatIfEntry, ieee8021AsParentDSParentPortNumber=ieee8021AsParentDSParentPortNumber, ieee8021AsPortDSCurrentLogSyncInterval=ieee8021AsPortDSCurrentLogSyncInterval, ieee8021AsPortStatRxPdelayRequest=ieee8021AsPortStatRxPdelayRequest, ieee8021AsDefaultDSCurrentUTCOffsetValid=ieee8021AsDefaultDSCurrentUTCOffsetValid, ieee8021AsPortDSIfEntry=ieee8021AsPortDSIfEntry, ieee8021AsPortStatRxAnnounce=ieee8021AsPortStatRxAnnounce, ieee8021AsGroups=ieee8021AsGroups, ieee8021AsAcceptableMasterTableGroup=ieee8021AsAcceptableMasterTableGroup, ieee8021AsPortDSCurrentLogAnnounceInterval=ieee8021AsPortDSCurrentLogAnnounceInterval, ieee8021AsMIBObjects=ieee8021AsMIBObjects, IEEE8021ASClockClassValue=IEEE8021ASClockClassValue, ieee8021AsDefaultDSLeap61=ieee8021AsDefaultDSLeap61, ieee8021AsPortDSNeighborPropDelayThreshLs=ieee8021AsPortDSNeighborPropDelayThreshLs, ieee8021AsTimePropertiesDSCurrentUtcOffset=ieee8021AsTimePropertiesDSCurrentUtcOffset, ieee8021AsPortStatRxPTPPacketDiscard=ieee8021AsPortStatRxPTPPacketDiscard, ieee8021AsPortDSNupMs=ieee8021AsPortDSNupMs, ieee8021AsPortDSAcceptableMasterTableEnabled=ieee8021AsPortDSAcceptableMasterTableEnabled, ieee8021AsSystemTimePropertiesGroup=ieee8021AsSystemTimePropertiesGroup, ieee8021AsPortStatRxPdelayResponseFollowUp=ieee8021AsPortStatRxPdelayResponseFollowUp, ieee8021AsCompliances=ieee8021AsCompliances, ieee8021AsComplianceCor1=ieee8021AsComplianceCor1, ieee8021AsPortStatTxPdelayRequest=ieee8021AsPortStatTxPdelayRequest, ieee8021AsBridgeBasePort=ieee8021AsBridgeBasePort, ieee8021AsCurrentDS=ieee8021AsCurrentDS, ieee8021AsParentDSGrandmasterPriority2=ieee8021AsParentDSGrandmasterPriority2, ieee8021AsCurrentDSLastGmPhaseChangeMs=ieee8021AsCurrentDSLastGmPhaseChangeMs, ieee8021AsCompliancesCor1=ieee8021AsCompliancesCor1, ieee8021AsPortDSIsMeasuringDelay=ieee8021AsPortDSIsMeasuringDelay, ieee8021AsPortDSPortNumber=ieee8021AsPortDSPortNumber, ieee8021AsPortDSClockIdentity=ieee8021AsPortDSClockIdentity, ieee8021AsPortStatTxSyncCount=ieee8021AsPortStatTxSyncCount, ieee8021AsParentDSCumlativeRateRatio=ieee8021AsParentDSCumlativeRateRatio, ieee8021AsPortDSPortRole=ieee8021AsPortDSPortRole, ieee8021AsPortDSDelayAsymmetryHs=ieee8021AsPortDSDelayAsymmetryHs, ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs=ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs, ieee8021AsParentDSParentClockIdentity=ieee8021AsParentDSParentClockIdentity, ieee8021AsPortDSVersionNumber=ieee8021AsPortDSVersionNumber, ieee8021AsPortDataSetGlobalGroup=ieee8021AsPortDataSetGlobalGroup, ieee8021AsCurrentDSLastGmPhaseChangeHs=ieee8021AsCurrentDSLastGmPhaseChangeHs, ieee8021AsDefaultDSTimeSource=ieee8021AsDefaultDSTimeSource, ieee8021AsCompliance=ieee8021AsCompliance, ieee8021AsPortStatRxSyncCount=ieee8021AsPortStatRxSyncCount, ieee8021AsParentDSGrandmasterClockClass=ieee8021AsParentDSGrandmasterClockClass, ieee8021AsDefaultDSLeap59=ieee8021AsDefaultDSLeap59, ieee8021AsParentDSGrandmasterClockAccuracy=ieee8021AsParentDSGrandmasterClockAccuracy, ieee8021AsDefaultDSTimeTraceable=ieee8021AsDefaultDSTimeTraceable, ieee8021AsPortStatRxFollowUpCount=ieee8021AsPortStatRxFollowUpCount, ieee8021AsPortStatRxPdelayResponse=ieee8021AsPortStatRxPdelayResponse, ieee8021AsAcceptableMasterBaseGroup=ieee8021AsAcceptableMasterBaseGroup, PYSNMP_MODULE_ID=ieee8021AsTimeSyncMib, ieee8021AsAcceptableMasterTableDSActualTableSize=ieee8021AsAcceptableMasterTableDSActualTableSize, ieee8021ASSystemCurrentGroup=ieee8021ASSystemCurrentGroup, ieee8021AsDefaultDSNumberPorts=ieee8021AsDefaultDSNumberPorts, ieee8021AsCurrentDSStepsRemoved=ieee8021AsCurrentDSStepsRemoved, ieee8021AsPortStatTxAnnounce=ieee8021AsPortStatTxAnnounce, ieee8021AsCurrentDSLastGmPhaseChangeLs=ieee8021AsCurrentDSLastGmPhaseChangeLs, ieee8021AsPortDSDelayAsymmetryLs=ieee8021AsPortDSDelayAsymmetryLs, ieee8021AsPortDSNeighborRateRatio=ieee8021AsPortDSNeighborRateRatio, ieee8021AsAcceptableMasterTableDS=ieee8021AsAcceptableMasterTableDS, ieee8021AsPortDSIfTable=ieee8021AsPortDSIfTable, ieee8021AsTimePropertiesDSCurrentUtcOffsetValid=ieee8021AsTimePropertiesDSCurrentUtcOffsetValid, ieee8021AsPortDSAllowedLostResponses=ieee8021AsPortDSAllowedLostResponses, ieee8021AsCurrentDSLastGmFreqChangeLs=ieee8021AsCurrentDSLastGmFreqChangeLs, ieee8021AsPortDSNeighborPropDelayMs=ieee8021AsPortDSNeighborPropDelayMs, ieee8021AsPortStatTxPdelayResponseFollowUp=ieee8021AsPortStatTxPdelayResponseFollowUp, ieee8021AsAcceptableMasterTableDSMasterEntry=ieee8021AsAcceptableMasterTableDSMasterEntry, ieee8021AsTimePropertiesDSTimeSource=ieee8021AsTimePropertiesDSTimeSource, ieee8021AsTimePropertiesDSTimeTraceable=ieee8021AsTimePropertiesDSTimeTraceable, ieee8021AsPortDSAsCapable=ieee8021AsPortDSAsCapable, ieee8021AsPortDSNdownLs=ieee8021AsPortDSNdownLs, ieee8021AsParentDSGrandmasterOffsetScaledLogVariance=ieee8021AsParentDSGrandmasterOffsetScaledLogVariance, ieee8021AsPortDSNeighborPropDelayThreshMs=ieee8021AsPortDSNeighborPropDelayThreshMs, ieee8021AsPortDSAsIfIndex=ieee8021AsPortDSAsIfIndex, ieee8021AsPortDSNeighborPropDelayHs=ieee8021AsPortDSNeighborPropDelayHs, ieee8021AsPortDSNeighborPropDelayLs=ieee8021AsPortDSNeighborPropDelayLs, ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent=ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent, ieee8021AsAcceptableMasterTableDSBase=ieee8021AsAcceptableMasterTableDSBase, ieee8021AsPortStatAnnounceReceiptTimeouts=ieee8021AsPortStatAnnounceReceiptTimeouts, ieee8021ASSystemDefaultReqdGroup=ieee8021ASSystemDefaultReqdGroup, IEEE8021ASClockAccuracyValue=IEEE8021ASClockAccuracyValue, ieee8021AsConformance=ieee8021AsConformance, ieee8021AsCurrentDSOffsetFromMasterHs=ieee8021AsCurrentDSOffsetFromMasterHs, ieee8021AsPortDSAnnounceReceiptTimeout=ieee8021AsPortDSAnnounceReceiptTimeout, ieee8021AsParentDSGrandmasterPriority1=ieee8021AsParentDSGrandmasterPriority1, ieee8021AsCurrentDSOffsetFromMasterMs=ieee8021AsCurrentDSOffsetFromMasterMs, ieee8021AsDefaultDSFrequencyTraceable=ieee8021AsDefaultDSFrequencyTraceable, ieee8021AsPortDSInitialLogPdelayReqInterval=ieee8021AsPortDSInitialLogPdelayReqInterval, ieee8021AsCurrentDSGmChangeCount=ieee8021AsCurrentDSGmChangeCount, ieee8021AsAcceptableMasterPortNumber=ieee8021AsAcceptableMasterPortNumber, ieee8021AsPortDSNdownMs=ieee8021AsPortDSNdownMs, ieee8021AsPortDSCurrentLogPdelayReqInterval=ieee8021AsPortDSCurrentLogPdelayReqInterval, ieee8021AsAcceptableMasterTableDSMaxTableSize=ieee8021AsAcceptableMasterTableDSMaxTableSize, ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent=ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent, ieee8021AsDefaultDSOffsetScaledLogVariance=ieee8021AsDefaultDSOffsetScaledLogVariance, ieee8021AsPortStatPdelayAllowedLostResponsesExceeded=ieee8021AsPortStatPdelayAllowedLostResponsesExceeded, ieee8021AsAcceptableMasterTableDSMasterTable=ieee8021AsAcceptableMasterTableDSMasterTable, ieee8021AsAcceptableMasterAlternatePriority1=ieee8021AsAcceptableMasterAlternatePriority1, ieee8021AsPortStatRxSyncReceiptTimeouts=ieee8021AsPortStatRxSyncReceiptTimeouts, ieee8021AsAcceptableMasterClockIdentity=ieee8021AsAcceptableMasterClockIdentity, ieee8021AsDefaultDSCurrentUTCOffset=ieee8021AsDefaultDSCurrentUTCOffset, ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs=ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs, ieee8021AsCurrentDSGmTimebaseIndicator=ieee8021AsCurrentDSGmTimebaseIndicator, ieee8021AsTimePropertiesDSLeap61=ieee8021AsTimePropertiesDSLeap61, ieee8021AsPortDSSyncReceiptTimeout=ieee8021AsPortDSSyncReceiptTimeout, ieee8021AsDefaultDSClockClass=ieee8021AsDefaultDSClockClass, ieee8021AsPortStatTxPdelayResponse=ieee8021AsPortStatTxPdelayResponse, ieee8021AsCurrentDSOffsetFromMasterLs=ieee8021AsCurrentDSOffsetFromMasterLs, ieee8021AsPortDSDelayAsymmetryMs=ieee8021AsPortDSDelayAsymmetryMs, IEEE8021ASTimeSourceValue=IEEE8021ASTimeSourceValue, ieee8021AsPortStatTxFollowUpCount=ieee8021AsPortStatTxFollowUpCount, ClockIdentity=ClockIdentity, ieee8021AsDefaultDSPriority1=ieee8021AsDefaultDSPriority1, ieee8021AsPortStatIfTable=ieee8021AsPortStatIfTable, ieee8021AsParentDS=ieee8021AsParentDS, ieee8021AsAcceptableMasterRowStatus=ieee8021AsAcceptableMasterRowStatus, ieee8021AsDefaultDSClockAccuracy=ieee8021AsDefaultDSClockAccuracy, ieee8021AsPortDSNupLs=ieee8021AsPortDSNupLs, ieee8021AsAcceptableMasterTableDSMaster=ieee8021AsAcceptableMasterTableDSMaster, ieee8021AsTimePropertiesDSLeap59=ieee8021AsTimePropertiesDSLeap59, ieee8021AsDefaultDSClockIdentity=ieee8021AsDefaultDSClockIdentity, ieee8021AsDefaultDSPriority2=ieee8021AsDefaultDSPriority2, ieee8021AsParentDSGrandmasterIdentity=ieee8021AsParentDSGrandmasterIdentity, ieee8021AsTimeSyncMib=ieee8021AsTimeSyncMib, ieee8021AsCurrentDSLastGmFreqChangeMs=ieee8021AsCurrentDSLastGmFreqChangeMs, ieee8021AsDefaultDS=ieee8021AsDefaultDS, ieee8021AsPortDSInitialLogAnnounceInterval=ieee8021AsPortDSInitialLogAnnounceInterval, ieee8021ASPortStatisticsGlobalGroup=ieee8021ASPortStatisticsGlobalGroup, ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs=ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs, ieee8021AsPortDSInitialLogSyncInterval=ieee8021AsPortDSInitialLogSyncInterval, ieee8021AsPortDSPttPortEnabled=ieee8021AsPortDSPttPortEnabled, ieee8021AsAcceptableMasterTableDSMasterId=ieee8021AsAcceptableMasterTableDSMasterId, ieee8021AsDefaultDSGmCapable=ieee8021AsDefaultDSGmCapable, ieee8021AsTimePropertiesDSFrequencyTraceable=ieee8021AsTimePropertiesDSFrequencyTraceable, ieee8021AsCurrentDSTimeOfLastGmChangeEvent=ieee8021AsCurrentDSTimeOfLastGmChangeEvent, ieee8021AsPortDSNeighborPropDelayThreshHs=ieee8021AsPortDSNeighborPropDelayThreshHs)
