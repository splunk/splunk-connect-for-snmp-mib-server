#
# PySNMP MIB module A3COM51-SS9000SX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM51-SS9000SX
# Produced by pysmi-0.3.4 at Mon Apr 29 16:54:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, sysDescr = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime", "sysDescr")
Counter64, enterprises, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Unsigned32, IpAddress, Integer32, Counter32, TimeTicks, ModuleIdentity, MibIdentifier, NotificationType, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "enterprises", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Unsigned32", "IpAddress", "Integer32", "Counter32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "NotificationType", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
extreme = MibIdentifier((1, 3, 6, 1, 4, 1, 1916))
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8))
superStackSwitch9000SX = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 32))
superStackSwitch3800 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 34))
superStackSwitch9100 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 36))
superStackSwitch9000SX_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 27)).setLabel("superStackSwitch9000SX-mib")
overheat = NotificationType((1, 3, 6, 1, 4, 1, 1916) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("SNMPv2-MIB", "sysDescr"))
fanfailed = NotificationType((1, 3, 6, 1, 4, 1, 1916) + (0,2)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("SNMPv2-MIB", "sysDescr"))
fanOK = NotificationType((1, 3, 6, 1, 4, 1, 1916) + (0,3)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("SNMPv2-MIB", "sysDescr"))
invalidLoginAttempt = NotificationType((1, 3, 6, 1, 4, 1, 1916) + (0,4)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("SNMPv2-MIB", "sysDescr"))
ss9000UnitPaceMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalEthernet", 2), ("lowLatency", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss9000UnitPaceMode.setStatus('mandatory')
ss9000PortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 27, 2), )
if mibBuilder.loadTexts: ss9000PortTable.setStatus('mandatory')
ss9000PortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 27, 2, 1), ).setIndexNames((0, "A3COM51-SS9000SX", "ss9000PortIndex"))
if mibBuilder.loadTexts: ss9000PortTableEntry.setStatus('mandatory')
ss9000PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortIndex.setStatus('mandatory')
ss9000PortRxPktCtLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortRxPktCtLow.setStatus('mandatory')
ss9000PortRxPktCtHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortRxPktCtHigh.setStatus('mandatory')
ss9000PortRxByteCtLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortRxByteCtLow.setStatus('mandatory')
ss9000PortRxByteCtHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortRxByteCtHigh.setStatus('mandatory')
ss9000PortTxPktCtLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortTxPktCtLow.setStatus('mandatory')
ss9000PortTxPktCtHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortTxPktCtHigh.setStatus('mandatory')
ss9000PortTxByteCtLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortTxByteCtLow.setStatus('mandatory')
ss9000PortTxByteCtHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 27, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000PortTxByteCtHigh.setStatus('mandatory')
ss9000SaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 43, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveToPrimary", 1), ("saveToSecondary", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ss9000SaveConfiguration.setStatus('mandatory')
ss9000SaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 27, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveInProgress", 1), ("saveNotInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss9000SaveStatus.setStatus('mandatory')
ss9000MauType = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 27, 5))
ss9000MauType1000BaseSX = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 27, 5, 1))
mibBuilder.exportSymbols("A3COM51-SS9000SX", fanOK=fanOK, superStackSwitch9000SX_mib=superStackSwitch9000SX_mib, extreme=extreme, a3Com=a3Com, superStackSwitch9000SX=superStackSwitch9000SX, ss9000UnitPaceMode=ss9000UnitPaceMode, superStackSwitch9100=superStackSwitch9100, ss9000PortRxPktCtLow=ss9000PortRxPktCtLow, superStackSwitch3800=superStackSwitch3800, ss9000PortTableEntry=ss9000PortTableEntry, ss9000SaveStatus=ss9000SaveStatus, ss9000PortTxByteCtHigh=ss9000PortTxByteCtHigh, ss9000PortTxByteCtLow=ss9000PortTxByteCtLow, ss9000MauType=ss9000MauType, ss9000PortRxPktCtHigh=ss9000PortRxPktCtHigh, hub=hub, ss9000PortTxPktCtLow=ss9000PortTxPktCtLow, fanfailed=fanfailed, invalidLoginAttempt=invalidLoginAttempt, ss9000PortIndex=ss9000PortIndex, ss9000PortRxByteCtLow=ss9000PortRxByteCtLow, ss9000PortTxPktCtHigh=ss9000PortTxPktCtHigh, ss9000PortRxByteCtHigh=ss9000PortRxByteCtHigh, ss9000MauType1000BaseSX=ss9000MauType1000BaseSX, ss9000SaveConfiguration=ss9000SaveConfiguration, products=products, overheat=overheat, ss9000PortTable=ss9000PortTable)
