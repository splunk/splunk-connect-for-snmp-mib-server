#
# PySNMP MIB module ITOUCH-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
MacAddress, dot1dTpFdbAddress = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress", "dot1dTpFdbAddress")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
iTouch, = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Gauge32, ObjectIdentity, IpAddress, Counter64, MibIdentifier, Counter32, TimeTicks, ModuleIdentity, NotificationType, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Gauge32", "ObjectIdentity", "IpAddress", "Counter64", "MibIdentifier", "Counter32", "TimeTicks", "ModuleIdentity", "NotificationType", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bridgeDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 5))
xBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 19))
xBridgeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 19, 1))
xBridgeProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 19, 3))
xBridgeFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 19, 4))
bridgeState = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeState.setStatus('mandatory')
bridgeEarlyLoopState = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEarlyLoopState.setStatus('mandatory')
bridgeEarlyLoopCount = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEarlyLoopCount.setStatus('mandatory')
bridgeEarlyLoopAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEarlyLoopAddress.setStatus('mandatory')
bridgeSpanningTreeState = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeSpanningTreeState.setStatus('mandatory')
bridgeFilterDiscardTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(43200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFilterDiscardTimeout.setStatus('mandatory')
bridgeTopologyState = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stable", 1), ("changing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeTopologyState.setStatus('mandatory')
bridgeTopologyChangeAddr = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeTopologyChangeAddr.setStatus('mandatory')
bridgeProtocolFilterState = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeProtocolFilterState.setStatus('mandatory')
bridgeProtocolDefaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 33, 19, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 101))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5), ("discard", 101))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeProtocolDefaultPriority.setStatus('mandatory')
bridgeProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 33, 19, 3, 3), )
if mibBuilder.loadTexts: bridgeProtocolTable.setStatus('mandatory')
bridgeProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 19, 3, 3, 1), ).setIndexNames((0, "ITOUCH-BRIDGE-MIB", "bridgeProtocolProtocol"))
if mibBuilder.loadTexts: bridgeProtocolEntry.setStatus('mandatory')
bridgeProtocolProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeProtocolProtocol.setStatus('mandatory')
bridgeProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeProtocolName.setStatus('mandatory')
bridgeProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 101))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5), ("discard", 101))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeProtocolPriority.setStatus('mandatory')
bridgeProtocolUses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeProtocolUses.setStatus('mandatory')
bridgeProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeProtocolStatus.setStatus('mandatory')
bridgeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 19, 4, 1), )
if mibBuilder.loadTexts: bridgeFilterTable.setStatus('mandatory')
bridgeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 19, 4, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpFdbAddress"))
if mibBuilder.loadTexts: bridgeFilterEntry.setStatus('mandatory')
bridgeFilterForwardSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFilterForwardSubPort.setStatus('mandatory')
bridgeFilterUses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeFilterUses.setStatus('mandatory')
bridgeFilterAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeFilterAge.setStatus('mandatory')
bridgeFilterLinkTable = MibTable((1, 3, 6, 1, 4, 1, 33, 19, 4, 2), )
if mibBuilder.loadTexts: bridgeFilterLinkTable.setStatus('mandatory')
bridgeFilterLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 19, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bridgeFilterLinkEntry.setStatus('mandatory')
bridgeFilterLinkOverflowCam = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 19, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFilterLinkOverflowCam.setStatus('mandatory')
mibBuilder.exportSymbols("ITOUCH-BRIDGE-MIB", bridgeEarlyLoopState=bridgeEarlyLoopState, bridgeProtocolTable=bridgeProtocolTable, bridgeFilterLinkOverflowCam=bridgeFilterLinkOverflowCam, bridgeFilterAge=bridgeFilterAge, bridgeEarlyLoopCount=bridgeEarlyLoopCount, bridgeProtocolDefaultPriority=bridgeProtocolDefaultPriority, bridgeProtocolProtocol=bridgeProtocolProtocol, xBridgeFilter=xBridgeFilter, bridgeFilterLinkEntry=bridgeFilterLinkEntry, bridgeFilterForwardSubPort=bridgeFilterForwardSubPort, bridgeFilterDiscardTimeout=bridgeFilterDiscardTimeout, xBridgeProtocol=xBridgeProtocol, bridgeEarlyLoopAddress=bridgeEarlyLoopAddress, bridgeSpanningTreeState=bridgeSpanningTreeState, bridgeProtocolUses=bridgeProtocolUses, bridgeFilterUses=bridgeFilterUses, bridgeFilterTable=bridgeFilterTable, bridgeProtocolEntry=bridgeProtocolEntry, xBridgeSystem=xBridgeSystem, bridgeState=bridgeState, bridgeTopologyChangeAddr=bridgeTopologyChangeAddr, bridgeDep=bridgeDep, bridgeFilterEntry=bridgeFilterEntry, xBridge=xBridge, bridgeTopologyState=bridgeTopologyState, bridgeProtocolPriority=bridgeProtocolPriority, bridgeFilterLinkTable=bridgeFilterLinkTable, bridgeProtocolName=bridgeProtocolName, bridgeProtocolStatus=bridgeProtocolStatus, bridgeProtocolFilterState=bridgeProtocolFilterState)
