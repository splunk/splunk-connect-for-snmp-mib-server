#
# PySNMP MIB module LC-PHYSICAL-ENTITIES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LC-PHYSICAL-ENTITIES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
lancastTraps, lancastMibModulesA = mibBuilder.importSymbols("LANCAST-MIB", "lancastTraps", "lancastMibModulesA")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Unsigned32, MibIdentifier, Bits, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Integer32, ObjectIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Unsigned32", "MibIdentifier", "Bits", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Integer32", "ObjectIdentity", "NotificationType", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
physicalEntities = ModuleIdentity((1, 3, 6, 1, 4, 1, 2745, 1, 2))
physicalEntities.setRevisions(('1999-03-03 12:00',))
if mibBuilder.loadTexts: physicalEntities.setLastUpdated('9903031200Z')
if mibBuilder.loadTexts: physicalEntities.setOrganization('Lancast Inc')
chassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2))
backPlaneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3))
powerSupplyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4))
modulesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5))
ePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6))
serialPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7))
chassisTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1), )
if mibBuilder.loadTexts: chassisTable.setStatus('current')
chassisTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "chassisEntityIndex"))
if mibBuilder.loadTexts: chassisTableEntry.setStatus('current')
chassisEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisEntityIndex.setStatus('current')
chassisDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDescription.setStatus('current')
chassisPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPartNumber.setStatus('current')
chassisNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNumSlots.setStatus('current')
chassisCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCurrentTemp.setStatus('current')
chassisMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaxTemp.setStatus('current')
chassisReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetable", 2), ("not-resetable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisReset.setStatus('current')
lastEntityResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cold-start", 1), ("nms-sw-reset", 2), ("download-reset", 3), ("watch-dog-timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetReason.setStatus('current')
lastEntityResetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetIndex.setStatus('current')
lastEntityResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetTime.setStatus('current')
lastEntityResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 9, 10))).clone(namedValues=NamedValues(("chassis", 3), ("module", 9), ("port", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetType.setStatus('current')
backPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1), )
if mibBuilder.loadTexts: backPlaneTable.setStatus('current')
backPlaneTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "backPlaneEntityIndex"))
if mibBuilder.loadTexts: backPlaneTableEntry.setStatus('current')
backPlaneEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneEntityIndex.setStatus('current')
backPlaneDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneDescription.setStatus('current')
backPlanePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlanePartNumber.setStatus('current')
backPlaneSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneSerialNumber.setStatus('current')
backPlaneManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneManufactureDate.setStatus('current')
backPlaneHWRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneHWRevisionNumber.setStatus('current')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
powerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"))
if mibBuilder.loadTexts: powerSupplyTableEntry.setStatus('current')
powerSupplyEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyEntityIndex.setStatus('current')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("universal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('current')
powerSupply5vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply5vCurrent.setStatus('current')
powerSupply5vMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply5vMin.setStatus('current')
powerSupply5vMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply5vMax.setStatus('current')
powerSupplyUnitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ps-A", 1), ("ps-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyUnitIdentifier.setStatus('current')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
moduleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"))
if mibBuilder.loadTexts: moduleTableEntry.setStatus('current')
modEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modEntityIndex.setStatus('current')
modAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modAdminState.setStatus('current')
modOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modOperStatus.setStatus('current')
modType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("reserved", 2), ("mgmnt", 3), ("singleTwister", 4), ("dualTwister", 5), ("redundantTwister", 6), ("displayModule", 7), ("singleTwister2", 8), ("fixedPort", 9), ("rateAdapter", 10), ("gigabitTwister", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modType.setStatus('current')
modDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modDescription.setStatus('current')
modName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modName.setStatus('current')
modPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPartNumber.setStatus('current')
modSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modSerialNumber.setStatus('current')
modManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modManufactureDate.setStatus('current')
modDiagnosticTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modDiagnosticTestStatus.setStatus('current')
modHWRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modHWRevisionNumber.setStatus('current')
modNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumPorts.setStatus('current')
modFirstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFirstSlot.setStatus('current')
modNumSlotsOccupied = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumSlotsOccupied.setStatus('current')
modReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetable", 2), ("not-resetable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modReset.setStatus('current')
mgmntTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2), )
if mibBuilder.loadTexts: mgmntTable.setStatus('current')
mgmntTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "mgmntEntityIndex"))
if mibBuilder.loadTexts: mgmntTableEntry.setStatus('current')
mgmntEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntEntityIndex.setStatus('current')
mgmntBootImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntBootImageName.setStatus('current')
mgmntBootImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntBootImageVersion.setStatus('current')
mgmntCoreImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntCoreImageName.setStatus('current')
mgmntCoreImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntCoreImageVersion.setStatus('current')
mgmntAppImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntAppImageName.setStatus('current')
mgmntAppImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntAppImageVersion.setStatus('current')
mgmntRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntRamMemorySize.setStatus('current')
mgmntFlashMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntFlashMemorySize.setStatus('current')
mgmntNVRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntNVRamMemorySize.setStatus('current')
mgmnt5vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt5vCurrent.setStatus('current')
mgmnt5vMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt5vMin.setStatus('current')
mgmnt5vMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt5vMax.setStatus('current')
mgmnt3pt3vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt3pt3vCurrent.setStatus('current')
mgmnt3pt3vMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt3pt3vMin.setStatus('current')
mgmnt3pt3vMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt3pt3vMax.setStatus('current')
mgmntDiagnosticBootError = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntDiagnosticBootError.setStatus('current')
singleTwisterTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3), )
if mibBuilder.loadTexts: singleTwisterTable.setStatus('current')
singleTwisterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "stwEntityIndex"))
if mibBuilder.loadTexts: singleTwisterTableEntry.setStatus('current')
stwEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stwEntityIndex.setStatus('current')
stwLinkLossCarryForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stwLinkLossCarryForward.setStatus('current')
dualTwisterTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4), )
if mibBuilder.loadTexts: dualTwisterTable.setStatus('current')
dualTwisterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "stwEntityIndex"))
if mibBuilder.loadTexts: dualTwisterTableEntry.setStatus('current')
dtwEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtwEntityIndex.setStatus('current')
dtwLinkLossCarryForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtwLinkLossCarryForward.setStatus('current')
redundantTwisterTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5), )
if mibBuilder.loadTexts: redundantTwisterTable.setStatus('current')
redundantTwisterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "rtwEntityIndex"))
if mibBuilder.loadTexts: redundantTwisterTableEntry.setStatus('current')
rtwEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtwEntityIndex.setStatus('current')
rtwAutoRestorePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("not-selectable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwAutoRestorePrimary.setStatus('current')
rtwLinkLossCarryForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwLinkLossCarryForward.setStatus('current')
rtwActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtwActivePort.setStatus('current')
rtwRedundantTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwRedundantTransmission.setStatus('current')
rtwSecondarySwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtwSecondarySwitchOver.setStatus('current')
rtwLinkPulseControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("both-ports", 1), ("active-port", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwLinkPulseControl.setStatus('current')
rtwModeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundant", 1), ("selectAB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwModeControl.setStatus('current')
rtwABSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selectA", 1), ("selectB", 2), ("not-selectable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwABSelect.setStatus('current')
ePortTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1), )
if mibBuilder.loadTexts: ePortTable.setStatus('current')
ePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "ePortEntityIndex"))
if mibBuilder.loadTexts: ePortTableEntry.setStatus('current')
ePortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortEntityIndex.setStatus('current')
ePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortIfIndex.setStatus('current')
ePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("e10BaseT", 2), ("e10BaseFL-MM", 3), ("e10BaseFL-SM", 4), ("e100BaseTX", 5), ("e100BaseFX-MM", 6), ("e100BaseFX-SM", 7), ("e10-100Base-TX", 8), ("e1000Base-LX", 9), ("e1000Base-SX", 10), ("e1000Base-FX", 11), ("e10Base-SX", 12), ("e100Base-SX", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortType.setStatus('current')
ePortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortDescription.setStatus('current')
ePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortName.setStatus('current')
ePortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-detected", 1), ("no-link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortLinkStatus.setStatus('current')
ePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortAdminState.setStatus('current')
ePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortOperStatus.setStatus('current')
ePortDuplexAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortDuplexAdmin.setStatus('current')
ePortDuplexOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortDuplexOper.setStatus('current')
ePortSpeedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 0), ("tenMbit", 1), ("onehundredMbit", 2), ("gigabit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortSpeedAdmin.setStatus('current')
ePortSpeedOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenMbit", 1), ("onehundredMbit", 2), ("gigabit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortSpeedOper.setStatus('current')
ePortAutoNegotiationAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortAutoNegotiationAdmin.setStatus('current')
ePortAutoNegotiationOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortAutoNegotiationOper.setStatus('current')
ePortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetable", 2), ("not-resetable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortReset.setStatus('current')
ePortActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortActivity.setStatus('current')
ePortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("rj11", 2), ("rj21", 3), ("rj45", 4), ("bnc", 5), ("sc", 6), ("st", 7), ("sma", 8), ("mt-rj", 9), ("vf-45", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortConnector.setStatus('current')
ePortParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortParentRelPos.setStatus('current')
serialPortTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1), )
if mibBuilder.loadTexts: serialPortTable.setStatus('current')
serialPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "serialPortEntityIndex"))
if mibBuilder.loadTexts: serialPortTableEntry.setStatus('current')
serialPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortEntityIndex.setStatus('current')
serialPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortDescription.setStatus('current')
serialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortName.setStatus('current')
serialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9600, 19200, 38400))).clone(namedValues=NamedValues(("baud-9600", 9600), ("baud-19200", 19200), ("baud-38400", 38400)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortSpeed.setStatus('current')
serialPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortDataBits.setStatus('current')
serialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortParity.setStatus('current')
serialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("one-five", 2), ("two", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortStopBits.setStatus('current')
serialPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xon-xoff", 2), ("hardware", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortFlowControl.setStatus('current')
serialPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db9", 1), ("db25", 2), ("rj45", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortConnector.setStatus('current')
tempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 11)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "chassisEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "chassisCurrentTemp"), ("LC-PHYSICAL-ENTITIES-MIB", "chassisMaxTemp"))
if mibBuilder.loadTexts: tempStatusChange.setStatus('current')
backPlaneFailure = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 12)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"))
if mibBuilder.loadTexts: backPlaneFailure.setStatus('current')
powerSupply5vChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 13)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupply5vCurrent"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupply5vMin"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupply5vMax"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupply5vChange.setStatus('current')
powerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 14)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyStatus"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupplyStatusChange.setStatus('current')
powerSupplyInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 15)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyType"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupplyInsertion.setStatus('current')
powerSupplyRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 16)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyType"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupplyRemoval.setStatus('current')
chassisEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 17)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetReason"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetTime"))
if mibBuilder.loadTexts: chassisEntityReset.setStatus('current')
moduleEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 18)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetReason"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetTime"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: moduleEntityReset.setStatus('current')
eportEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 19)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetReason"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetTime"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"), ("LC-PHYSICAL-ENTITIES-MIB", "ePortParentRelPos"))
if mibBuilder.loadTexts: eportEntityReset.setStatus('current')
moduleInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 20)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: moduleInsertion.setStatus('current')
moduleRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 21)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: moduleRemoval.setStatus('current')
unknownModule = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 22)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"))
if mibBuilder.loadTexts: unknownModule.setStatus('current')
moduleFailure = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 23)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"))
if mibBuilder.loadTexts: moduleFailure.setStatus('current')
ePortLinkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 24)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "ePortEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "ePortLinkStatus"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: ePortLinkStatusChange.setStatus('current')
ePortAdminChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 25)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "ePortEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "ePortAdminState"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: ePortAdminChange.setStatus('current')
rtwSwitchOverChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 26)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "rtwEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "rtwActivePort"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: rtwSwitchOverChange.setStatus('current')
mibBuilder.exportSymbols("LC-PHYSICAL-ENTITIES-MIB", mgmntTable=mgmntTable, mgmntAppImageVersion=mgmntAppImageVersion, ePortReset=ePortReset, rtwSecondarySwitchOver=rtwSecondarySwitchOver, modDiagnosticTestStatus=modDiagnosticTestStatus, modPartNumber=modPartNumber, ePortActivity=ePortActivity, powerSupplyGroup=powerSupplyGroup, serialPortTable=serialPortTable, chassisPartNumber=chassisPartNumber, rtwRedundantTransmission=rtwRedundantTransmission, ePortEntityIndex=ePortEntityIndex, serialPortName=serialPortName, powerSupplyRemoval=powerSupplyRemoval, powerSupply5vMax=powerSupply5vMax, backPlaneTableEntry=backPlaneTableEntry, rtwAutoRestorePrimary=rtwAutoRestorePrimary, singleTwisterTable=singleTwisterTable, modType=modType, lastEntityResetIndex=lastEntityResetIndex, serialPortEntityIndex=serialPortEntityIndex, ePortParentRelPos=ePortParentRelPos, lastEntityResetTime=lastEntityResetTime, dtwEntityIndex=dtwEntityIndex, powerSupplyStatus=powerSupplyStatus, ePortOperStatus=ePortOperStatus, mgmntBootImageVersion=mgmntBootImageVersion, ePortTableEntry=ePortTableEntry, redundantTwisterTable=redundantTwisterTable, ePortSpeedAdmin=ePortSpeedAdmin, rtwActivePort=rtwActivePort, dualTwisterTableEntry=dualTwisterTableEntry, chassisTableEntry=chassisTableEntry, modName=modName, mgmntFlashMemorySize=mgmntFlashMemorySize, ePortAdminState=ePortAdminState, ePortIfIndex=ePortIfIndex, serialPortDescription=serialPortDescription, chassisDescription=chassisDescription, ePortDescription=ePortDescription, mgmnt3pt3vCurrent=mgmnt3pt3vCurrent, modEntityIndex=modEntityIndex, chassisTable=chassisTable, PYSNMP_MODULE_ID=physicalEntities, lastEntityResetReason=lastEntityResetReason, backPlanePartNumber=backPlanePartNumber, chassisCurrentTemp=chassisCurrentTemp, modManufactureDate=modManufactureDate, serialPortSpeed=serialPortSpeed, chassisEntityReset=chassisEntityReset, stwLinkLossCarryForward=stwLinkLossCarryForward, modulesGroup=modulesGroup, ePortGroup=ePortGroup, backPlaneManufactureDate=backPlaneManufactureDate, redundantTwisterTableEntry=redundantTwisterTableEntry, serialPortGroup=serialPortGroup, rtwModeControl=rtwModeControl, singleTwisterTableEntry=singleTwisterTableEntry, unknownModule=unknownModule, ePortDuplexAdmin=ePortDuplexAdmin, ePortDuplexOper=ePortDuplexOper, moduleInsertion=moduleInsertion, backPlaneEntityIndex=backPlaneEntityIndex, powerSupply5vMin=powerSupply5vMin, powerSupplyInsertion=powerSupplyInsertion, backPlaneTable=backPlaneTable, stwEntityIndex=stwEntityIndex, moduleFailure=moduleFailure, serialPortStopBits=serialPortStopBits, backPlaneHWRevisionNumber=backPlaneHWRevisionNumber, modNumSlotsOccupied=modNumSlotsOccupied, chassisNumSlots=chassisNumSlots, mgmntDiagnosticBootError=mgmntDiagnosticBootError, ePortAdminChange=ePortAdminChange, ePortAutoNegotiationOper=ePortAutoNegotiationOper, modAdminState=modAdminState, moduleEntityReset=moduleEntityReset, backPlaneFailure=backPlaneFailure, moduleRemoval=moduleRemoval, modFirstSlot=modFirstSlot, mgmnt5vMax=mgmnt5vMax, serialPortDataBits=serialPortDataBits, serialPortParity=serialPortParity, backPlaneGroup=backPlaneGroup, powerSupplyUnitIdentifier=powerSupplyUnitIdentifier, rtwLinkLossCarryForward=rtwLinkLossCarryForward, serialPortConnector=serialPortConnector, moduleTableEntry=moduleTableEntry, ePortType=ePortType, powerSupplyTable=powerSupplyTable, mgmntTableEntry=mgmntTableEntry, mgmntBootImageName=mgmntBootImageName, mgmntRamMemorySize=mgmntRamMemorySize, chassisMaxTemp=chassisMaxTemp, ePortSpeedOper=ePortSpeedOper, powerSupplyType=powerSupplyType, physicalEntities=physicalEntities, chassisGroup=chassisGroup, dualTwisterTable=dualTwisterTable, powerSupplyTableEntry=powerSupplyTableEntry, rtwABSelect=rtwABSelect, serialPortTableEntry=serialPortTableEntry, modOperStatus=modOperStatus, ePortConnector=ePortConnector, modSerialNumber=modSerialNumber, backPlaneSerialNumber=backPlaneSerialNumber, powerSupplyEntityIndex=powerSupplyEntityIndex, mgmnt3pt3vMin=mgmnt3pt3vMin, lastEntityResetType=lastEntityResetType, mgmntNVRamMemorySize=mgmntNVRamMemorySize, ePortLinkStatus=ePortLinkStatus, moduleTable=moduleTable, powerSupply5vCurrent=powerSupply5vCurrent, modHWRevisionNumber=modHWRevisionNumber, mgmntAppImageName=mgmntAppImageName, mgmnt5vMin=mgmnt5vMin, mgmntEntityIndex=mgmntEntityIndex, serialPortFlowControl=serialPortFlowControl, mgmnt5vCurrent=mgmnt5vCurrent, ePortTable=ePortTable, chassisEntityIndex=chassisEntityIndex, modReset=modReset, powerSupply5vChange=powerSupply5vChange, mgmnt3pt3vMax=mgmnt3pt3vMax, ePortAutoNegotiationAdmin=ePortAutoNegotiationAdmin, powerSupplyStatusChange=powerSupplyStatusChange, chassisReset=chassisReset, mgmntCoreImageName=mgmntCoreImageName, ePortLinkStatusChange=ePortLinkStatusChange, rtwEntityIndex=rtwEntityIndex, modNumPorts=modNumPorts, dtwLinkLossCarryForward=dtwLinkLossCarryForward, rtwLinkPulseControl=rtwLinkPulseControl, backPlaneDescription=backPlaneDescription, rtwSwitchOverChange=rtwSwitchOverChange, ePortName=ePortName, modDescription=modDescription, tempStatusChange=tempStatusChange, mgmntCoreImageVersion=mgmntCoreImageVersion, eportEntityReset=eportEntityReset)
