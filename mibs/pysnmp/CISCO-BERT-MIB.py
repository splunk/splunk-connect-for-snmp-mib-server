#
# PySNMP MIB module CISCO-BERT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-BERT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, ModuleIdentity, Integer32, NotificationType, Unsigned32, Gauge32, IpAddress, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ModuleIdentity", "Integer32", "NotificationType", "Unsigned32", "Gauge32", "IpAddress", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "Bits")
TextualConvention, DateAndTime, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "RowStatus", "DisplayString")
ciscoBertMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 185))
ciscoBertMIB.setRevisions(('2002-05-05 00:00', '2001-09-09 00:00', '2000-12-08 00:00',))
if mibBuilder.loadTexts: ciscoBertMIB.setLastUpdated('200205050000Z')
if mibBuilder.loadTexts: ciscoBertMIB.setOrganization('Cisco Systems, Inc.')
class BertPatterns(TextualConvention, Integer32):
    reference = 'CCITT/ITU O.150, O.151, O.152, O.153, O.161 Standards.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))
    namedValues = NamedValues(("allZeros", 1), ("allOnes", 2), ("altOneZero", 3), ("doubleAltOnesZeros", 4), ("oneIn4", 5), ("oneIn8", 6), ("oneIn16", 7), ("threeIn24", 8), ("inbandLoopBackActivate", 9), ("inbandLoopBackDeactivate", 10), ("twoE3MinusOne", 11), ("twoE4MinusOne", 12), ("twoE5MinusOne", 13), ("twoE6MinusOne", 14), ("twoE7MinusOne", 15), ("twoE7MinusOneFT1Loopup", 16), ("twoE7MinusOneFT1Loopdown", 17), ("twoE9MinusOne", 18), ("twoE10MinusOne", 19), ("twoE11MinusOne", 20), ("twoE15MinusOne", 21), ("twoE17MinusOne", 22), ("twoE18MinusOne", 23), ("twoE20MinusOne", 24), ("twoE20MinusOneQRSS", 25), ("twoE21MinusOne", 26), ("twoE22MinusOne", 27), ("twoE23MinusOne", 28), ("twoE25MinusOne", 29), ("twoE28MinusOne", 30), ("twoE29MinusOne", 31), ("twoE31MinusOne", 32), ("dds1pattern", 33), ("dds2pattern", 34), ("dds3pattern", 35), ("dds4pattern", 36), ("dds5pattern", 37), ("userPattern", 38))

ciscoBertMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 185, 1))
ciscoBertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1))
cbConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1), )
if mibBuilder.loadTexts: cbConfTable.setStatus('current')
cbConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbConfEntry.setStatus('current')
cbTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 1), BertPatterns()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbTestPattern.setStatus('current')
cbUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbUserPattern.setStatus('current')
cbBertTxPatternInv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInverted", 1), ("inverted", 2))).clone('notInverted')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbBertTxPatternInv.setStatus('current')
cbBertRxPatternInv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInverted", 1), ("inverted", 2))).clone('notInverted')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbBertRxPatternInv.setStatus('current')
cbLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("farEndLineLoopback", 1), ("remoteLineLoopback", 2), ("localLoopback", 3), ("farEndPayloadLoopback", 4), ("remotePayloadLoopback", 5), ("noLoopback", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbLoopback.setStatus('current')
cbLoopbackCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nonLatchOCUwith1", 1), ("nonLatchOCUwithout1", 2), ("nonLatchCSU", 3), ("nonLatchDSU", 4), ("latchDS0Drop", 5), ("latchDS0Line", 6), ("latchOCU", 7), ("latchCSU", 8), ("latchDSU", 9), ("latchHL96", 10), ("v54PN127Polynomial", 11), ("lineInband", 12), ("lineLoopbackESF", 13), ("localLoopback", 14), ("noLoopbackCode", 15), ("payloadLoopbackESF", 16), ("lineLoopbackFEAC", 17), ("smartJackInband", 18)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbLoopbackCode.setStatus('current')
cbSingleBitErrorInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noError", 1), ("insertError", 2))).clone('noError')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbSingleBitErrorInsert.setStatus('current')
cbErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("oneInTen", 2), ("oneInHundred", 3), ("oneInThousand", 4), ("oneInTenThousand", 5), ("oneInHundredThousand", 6), ("oneInMillion", 7), ("oneInTenMillion", 8))).clone('noError')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbErrorInsertionRate.setStatus('current')
cbDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbDuration.setStatus('current')
cbOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("success", 1), ("inSync", 2), ("outOfSync", 3), ("inLoopback", 4), ("clockOutOfSync", 5), ("bertFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbOperStatus.setStatus('current')
cbFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aborted", 1), ("loopbackFailed", 2), ("interfaceStateChange", 3), ("processorModuleStateChange", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbFailedReason.setStatus('current')
cbStartDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStartDateAndTime.setStatus('current')
cbDS0DPCodeIteration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbDS0DPCodeIteration.setStatus('current')
cbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbRowStatus.setStatus('current')
cbDs0BitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 1, 1, 15), Bits().clone(namedValues=NamedValues(("dsZero1", 0), ("dsZero2", 1), ("dsZero3", 2), ("dsZero4", 3), ("dsZero5", 4), ("dsZero6", 5), ("dsZero7", 6), ("dsZero8", 7), ("dsZero9", 8), ("dsZero10", 9), ("dsZero11", 10), ("dsZero12", 11), ("dsZero13", 12), ("dsZero14", 13), ("dsZero15", 14), ("dsZero16", 15), ("dsZero17", 16), ("dsZero18", 17), ("dsZero19", 18), ("dsZero20", 19), ("dsZero21", 20), ("dsZero22", 21), ("dsZero23", 22), ("dsZero24", 23), ("dsZero25", 24), ("dsZero26", 25), ("dsZero27", 26), ("dsZero28", 27), ("dsZero29", 28), ("dsZero30", 29), ("dsZero31", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbDs0BitMap.setStatus('current')
cbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2), )
if mibBuilder.loadTexts: cbStatsTable.setStatus('current')
cbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbStatsEntry.setStatus('current')
cbTxBitCountLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbTxBitCountLower.setStatus('current')
cbTxBitCountUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbTxBitCountUpper.setStatus('current')
cbHCTxBitCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHCTxBitCounts.setStatus('current')
cbRxBitCountLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbRxBitCountLower.setStatus('current')
cbRxBitCountUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbRxBitCountUpper.setStatus('current')
cbHCRxBitCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHCRxBitCounts.setStatus('current')
cbRxBitErrCountLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbRxBitErrCountLower.setStatus('current')
cbRxBitErrCountUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbRxBitErrCountUpper.setStatus('current')
cbHCRxBitErrCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHCRxBitErrCounts.setStatus('current')
cbSyncLossCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbSyncLossCounts.setStatus('current')
cbPatternLossCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPatternLossCounts.setStatus('current')
cbFrameLossCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbFrameLossCounts.setStatus('current')
cbESsCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbESsCounts.setStatus('current')
cbSESsCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbSESsCounts.setStatus('current')
cbEFSsCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbEFSsCounts.setStatus('current')
cbErrorInjectCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 185, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbErrorInjectCounts.setStatus('current')
ciscoBertMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 185, 8))
ciscoBertMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 1))
ciscoBertMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 2))
ciscoBertMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 1, 1)).setObjects(("CISCO-BERT-MIB", "ciscoBertConfigGroup"), ("CISCO-BERT-MIB", "ciscoBertStatsGroup"), ("CISCO-BERT-MIB", "ciscoBertHCStatsGroup"), ("CISCO-BERT-MIB", "ciscoBertLoopbackGroup"), ("CISCO-BERT-MIB", "ciscoBertConfigGroupDs1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBertMIBCompliance = ciscoBertMIBCompliance.setStatus('current')
ciscoBertConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 2, 1)).setObjects(("CISCO-BERT-MIB", "cbTestPattern"), ("CISCO-BERT-MIB", "cbUserPattern"), ("CISCO-BERT-MIB", "cbBertTxPatternInv"), ("CISCO-BERT-MIB", "cbBertRxPatternInv"), ("CISCO-BERT-MIB", "cbSingleBitErrorInsert"), ("CISCO-BERT-MIB", "cbErrorInsertionRate"), ("CISCO-BERT-MIB", "cbDuration"), ("CISCO-BERT-MIB", "cbOperStatus"), ("CISCO-BERT-MIB", "cbFailedReason"), ("CISCO-BERT-MIB", "cbStartDateAndTime"), ("CISCO-BERT-MIB", "cbDS0DPCodeIteration"), ("CISCO-BERT-MIB", "cbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBertConfigGroup = ciscoBertConfigGroup.setStatus('current')
ciscoBertLoopbackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 2, 2)).setObjects(("CISCO-BERT-MIB", "cbLoopback"), ("CISCO-BERT-MIB", "cbLoopbackCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBertLoopbackGroup = ciscoBertLoopbackGroup.setStatus('current')
ciscoBertStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 2, 3)).setObjects(("CISCO-BERT-MIB", "cbTxBitCountLower"), ("CISCO-BERT-MIB", "cbTxBitCountUpper"), ("CISCO-BERT-MIB", "cbRxBitCountLower"), ("CISCO-BERT-MIB", "cbRxBitCountUpper"), ("CISCO-BERT-MIB", "cbRxBitErrCountLower"), ("CISCO-BERT-MIB", "cbRxBitErrCountUpper"), ("CISCO-BERT-MIB", "cbSyncLossCounts"), ("CISCO-BERT-MIB", "cbPatternLossCounts"), ("CISCO-BERT-MIB", "cbFrameLossCounts"), ("CISCO-BERT-MIB", "cbESsCounts"), ("CISCO-BERT-MIB", "cbSESsCounts"), ("CISCO-BERT-MIB", "cbEFSsCounts"), ("CISCO-BERT-MIB", "cbErrorInjectCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBertStatsGroup = ciscoBertStatsGroup.setStatus('current')
ciscoBertHCStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 2, 4)).setObjects(("CISCO-BERT-MIB", "cbHCTxBitCounts"), ("CISCO-BERT-MIB", "cbHCRxBitCounts"), ("CISCO-BERT-MIB", "cbHCRxBitErrCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBertHCStatsGroup = ciscoBertHCStatsGroup.setStatus('current')
ciscoBertConfigGroupDs1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 185, 8, 2, 5)).setObjects(("CISCO-BERT-MIB", "cbDs0BitMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBertConfigGroupDs1 = ciscoBertConfigGroupDs1.setStatus('current')
mibBuilder.exportSymbols("CISCO-BERT-MIB", ciscoBertLoopbackGroup=ciscoBertLoopbackGroup, cbHCRxBitCounts=cbHCRxBitCounts, cbRxBitCountLower=cbRxBitCountLower, cbErrorInsertionRate=cbErrorInsertionRate, cbTxBitCountUpper=cbTxBitCountUpper, cbLoopback=cbLoopback, cbRxBitCountUpper=cbRxBitCountUpper, cbHCRxBitErrCounts=cbHCRxBitErrCounts, ciscoBertConfigGroup=ciscoBertConfigGroup, cbDS0DPCodeIteration=cbDS0DPCodeIteration, cbRxBitErrCountLower=cbRxBitErrCountLower, cbUserPattern=cbUserPattern, ciscoBertMIBCompliances=ciscoBertMIBCompliances, cbStatsTable=cbStatsTable, ciscoBertMIBObjects=ciscoBertMIBObjects, cbStartDateAndTime=cbStartDateAndTime, cbHCTxBitCounts=cbHCTxBitCounts, ciscoBertConfig=ciscoBertConfig, ciscoBertMIBConformance=ciscoBertMIBConformance, ciscoBertConfigGroupDs1=ciscoBertConfigGroupDs1, BertPatterns=BertPatterns, cbRowStatus=cbRowStatus, cbOperStatus=cbOperStatus, cbRxBitErrCountUpper=cbRxBitErrCountUpper, cbTestPattern=cbTestPattern, cbConfEntry=cbConfEntry, PYSNMP_MODULE_ID=ciscoBertMIB, ciscoBertMIBGroups=ciscoBertMIBGroups, cbSingleBitErrorInsert=cbSingleBitErrorInsert, cbTxBitCountLower=cbTxBitCountLower, cbLoopbackCode=cbLoopbackCode, cbConfTable=cbConfTable, cbStatsEntry=cbStatsEntry, ciscoBertHCStatsGroup=ciscoBertHCStatsGroup, cbBertTxPatternInv=cbBertTxPatternInv, cbSESsCounts=cbSESsCounts, cbErrorInjectCounts=cbErrorInjectCounts, cbDuration=cbDuration, cbDs0BitMap=cbDs0BitMap, cbESsCounts=cbESsCounts, cbSyncLossCounts=cbSyncLossCounts, ciscoBertStatsGroup=ciscoBertStatsGroup, cbBertRxPatternInv=cbBertRxPatternInv, cbEFSsCounts=cbEFSsCounts, ciscoBertMIBCompliance=ciscoBertMIBCompliance, cbPatternLossCounts=cbPatternLossCounts, cbFailedReason=cbFailedReason, ciscoBertMIB=ciscoBertMIB, cbFrameLossCounts=cbFrameLossCounts)
