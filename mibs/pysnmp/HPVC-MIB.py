#
# PySNMP MIB module HPVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPVC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
enterprises, Counter32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32, NotificationType, mib_2, iso, Gauge32, TimeTicks, Counter64, ObjectIdentity, ModuleIdentity, zeroDotZero = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "mib-2", "iso", "Gauge32", "TimeTicks", "Counter64", "ObjectIdentity", "ModuleIdentity", "zeroDotZero")
RowPointer, TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
TransportAddressType, TransportAddress = mibBuilder.importSymbols("TRANSPORT-ADDRESS-MIB", "TransportAddressType", "TransportAddress")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
hpSysMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5))
hpEmbeddedServerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7))
hpModuleMgmtProc = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5))
virtualConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2))
vcDomainMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1))
vcDomainMIB.setRevisions(('2008-12-08 00:00', '2009-01-08 00:00', '2009-02-17 00:00', '2009-06-27 00:00', '2010-03-08 00:00',))
if mibBuilder.loadTexts: vcDomainMIB.setLastUpdated('200810080000Z')
if mibBuilder.loadTexts: vcDomainMIB.setOrganization('Hewlett-Packard Company')
vcDomainMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1))
vcDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1))
vcEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2))
vcModule = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3))
vcPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4))
vcPhysicalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5))
vcEnetNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6))
vcFcFabric = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7))
vcProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8))
vcEnetNetworkVcPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9))
vcFcFabricVcPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10))
vcProfileNetworkMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11))
vcProfileFcFabricMap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12))
class VcManagedStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("disabled", 7), ("info", 8))

class VcDomainModuleRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unintegrated", 1), ("primaryProtected", 2), ("primaryUnprotected", 3), ("standby", 4), ("other", 5))

class VcModuleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vcModuleEnet", 1), ("vcModuleFC", 2), ("vcModuleOther", 3))

class VcPortType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vcEnetPhysicalPort", 1), ("vcEnetLogicallPort", 2), ("vcFCPort", 3))

vcDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainName.setStatus('current')
vcDomainManagedStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 2), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainManagedStatus.setStatus('current')
vcDomainPrimaryAddressType = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 3), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainPrimaryAddressType.setStatus('current')
vcDomainPrimaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 4), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainPrimaryAddress.setStatus('current')
vcDomainCheckpointValid = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainCheckpointValid.setStatus('current')
vcDomainLastCheckpointTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainLastCheckpointTime.setStatus('current')
vcDomainStackingLinkRedundant = MibScalar((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcDomainStackingLinkRedundant.setStatus('current')
vcEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: vcEnclosureTable.setStatus('current')
vcEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcEnclosureIndex"))
if mibBuilder.loadTexts: vcEnclosureEntry.setStatus('current')
vcEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureIndex.setStatus('current')
vcEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureName.setStatus('current')
vcEnclosureManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureManagedStatus.setStatus('current')
vcEnclosureAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 4), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureAddressType.setStatus('current')
vcEnclosureAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 5), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureAddress.setStatus('current')
vcEnclosureUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnclosureUUID.setStatus('current')
vcModuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: vcModuleTable.setStatus('current')
vcModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcModuleIndex"))
if mibBuilder.loadTexts: vcModuleEntry.setStatus('current')
vcModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleIndex.setStatus('current')
vcModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 2), VcModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleType.setStatus('current')
vcModuleManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleManagedStatus.setStatus('current')
vcModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModulePartNumber.setStatus('current')
vcModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleSerialNumber.setStatus('current')
vcModuleProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleProductName.setStatus('current')
vcModuleFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleFwRev.setStatus('current')
vcModuleEnclosurePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleEnclosurePointer.setStatus('current')
vcModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleLocation.setStatus('current')
vcModuleAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 10), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleAddressType.setStatus('current')
vcModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 11), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleAddress.setStatus('current')
vcModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 3, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcModuleID.setStatus('current')
vcPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: vcPortTable.setStatus('current')
vcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcPortIndex"))
if mibBuilder.loadTexts: vcPortEntry.setStatus('current')
vcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortIndex.setStatus('current')
vcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 2), VcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortType.setStatus('current')
vcPortManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortManagedStatus.setStatus('current')
vcPortManagerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 4), TransportAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortManagerAddressType.setStatus('current')
vcPortManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 5), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortManagerAddress.setStatus('current')
vcPortPhysicalPortPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortPhysicalPortPointer.setStatus('current')
vcPortContainerPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 4, 1, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPortContainerPointer.setStatus('current')
vcPhysicalServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: vcPhysicalServerTable.setStatus('current')
vcPhysicalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcPhysicalServerIndex"))
if mibBuilder.loadTexts: vcPhysicalServerEntry.setStatus('current')
vcPhysicalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerIndex.setStatus('current')
vcPhysicalServerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerEnclosureIndex.setStatus('current')
vcPhysicalServerManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerManagedStatus.setStatus('current')
vcPhysicalServerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerPartNumber.setStatus('current')
vcPhysicalServerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerSerialNumber.setStatus('current')
vcPhysicalServerProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerProductName.setStatus('current')
vcPhysicalServerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPhysicalServerLocation.setStatus('current')
vcFcFabricTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1), )
if mibBuilder.loadTexts: vcFcFabricTable.setStatus('current')
vcFcFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcFcFabricIndex"))
if mibBuilder.loadTexts: vcFcFabricEntry.setStatus('current')
vcFcFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricIndex.setStatus('current')
vcFcFabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricName.setStatus('current')
vcFcFabricManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 7, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricManagedStatus.setStatus('current')
vcEnetNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: vcEnetNetworkTable.setStatus('current')
vcEnetNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcEnetNetworkIndex"))
if mibBuilder.loadTexts: vcEnetNetworkEntry.setStatus('current')
vcEnetNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkIndex.setStatus('current')
vcEnetNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkName.setStatus('current')
vcEnetNetworkManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkManagedStatus.setStatus('current')
vcEnetNetworkUplinkVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkUplinkVlanId.setStatus('current')
vcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1), )
if mibBuilder.loadTexts: vcProfileTable.setStatus('current')
vcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcProfileIndex"))
if mibBuilder.loadTexts: vcProfileEntry.setStatus('current')
vcProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileIndex.setStatus('current')
vcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileName.setStatus('current')
vcProfileManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 3), VcManagedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileManagedStatus.setStatus('current')
vcProfilePhysicalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfilePhysicalServerIndex.setStatus('current')
vcProfileLogicalSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 8, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileLogicalSerialNumber.setStatus('current')
vcEnetNetworkVcPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1), )
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapTable.setStatus('current')
vcEnetNetworkVcPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcEnetNetworkVcPortMapNetworkIndex"), (0, "HPVC-MIB", "vcEnetNetworkVcPortMapVcPortIndex"))
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapEntry.setStatus('current')
vcEnetNetworkVcPortMapNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapNetworkIndex.setStatus('current')
vcEnetNetworkVcPortMapVcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcEnetNetworkVcPortMapVcPortIndex.setStatus('current')
vcFcFabricVcPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: vcFcFabricVcPortMapTable.setStatus('current')
vcFcFabricVcPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcFcFabricVcPortMapFcFabricIndex"), (0, "HPVC-MIB", "vcFcFabricVcPortMapVcPortIndex"))
if mibBuilder.loadTexts: vcFcFabricVcPortMapEntry.setStatus('current')
vcFcFabricVcPortMapFcFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricVcPortMapFcFabricIndex.setStatus('current')
vcFcFabricVcPortMapVcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFcFabricVcPortMapVcPortIndex.setStatus('current')
vcProfileNetworkMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1), )
if mibBuilder.loadTexts: vcProfileNetworkMapTable.setStatus('current')
vcProfileNetworkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcProfileNetworkMapProfileIndex"), (0, "HPVC-MIB", "vcProfileNetworkMapConnectionIndex"))
if mibBuilder.loadTexts: vcProfileNetworkMapEntry.setStatus('current')
vcProfileNetworkMapProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileNetworkMapProfileIndex.setStatus('current')
vcProfileNetworkMapConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileNetworkMapConnectionIndex.setStatus('current')
vcProfileNetworkMapNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileNetworkMapNetworkIndex.setStatus('current')
vcProfileFcFabricMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1), )
if mibBuilder.loadTexts: vcProfileFcFabricMapTable.setStatus('current')
vcProfileFcFabricMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1), ).setIndexNames((0, "HPVC-MIB", "vcProfileFcFabricMapProfileIndex"), (0, "HPVC-MIB", "vcProfileFcFabricMapConnectionIndex"))
if mibBuilder.loadTexts: vcProfileFcFabricMapEntry.setStatus('current')
vcProfileFcFabricMapProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileFcFabricMapProfileIndex.setStatus('current')
vcProfileFcFabricMapConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileFcFabricMapConnectionIndex.setStatus('current')
vcProfileFcFabricMapFcFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcProfileFcFabricMapFcFabricIndex.setStatus('current')
vcDomainMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2))
vcDomainMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0))
vcDomainMIBNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 1))
vcDomainManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 1)).setObjects(("HPVC-MIB", "vcDomainManagedStatus"))
if mibBuilder.loadTexts: vcDomainManagedStatusChange.setStatus('current')
vcCheckpointTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 2)).setObjects(("HPVC-MIB", "vcDomainCheckpointValid"), ("HPVC-MIB", "vcDomainLastCheckpointTime"))
if mibBuilder.loadTexts: vcCheckpointTimeout.setStatus('current')
vcCheckpointCompleted = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 3)).setObjects(("HPVC-MIB", "vcDomainCheckpointValid"))
if mibBuilder.loadTexts: vcCheckpointCompleted.setStatus('current')
vcEnetNetworkManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 4)).setObjects(("HPVC-MIB", "vcEnetNetworkManagedStatus"), ("HPVC-MIB", "vcEnetNetworkIndex"))
if mibBuilder.loadTexts: vcEnetNetworkManagedStatusChange.setStatus('current')
vcFcFabricManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 5)).setObjects(("HPVC-MIB", "vcFcFabricManagedStatus"), ("HPVC-MIB", "vcFcFabricIndex"))
if mibBuilder.loadTexts: vcFcFabricManagedStatusChange.setStatus('current')
vcModuleManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 6)).setObjects(("HPVC-MIB", "vcModuleManagedStatus"), ("HPVC-MIB", "vcModuleIndex"))
if mibBuilder.loadTexts: vcModuleManagedStatusChange.setStatus('current')
vcEnclosureManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 7)).setObjects(("HPVC-MIB", "vcEnclosureManagedStatus"), ("HPVC-MIB", "vcEnclosureIndex"))
if mibBuilder.loadTexts: vcEnclosureManagedStatusChange.setStatus('current')
vcPhysicalServerManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 8)).setObjects(("HPVC-MIB", "vcPhysicalServerManagedStatus"), ("HPVC-MIB", "vcPhysicalServerIndex"))
if mibBuilder.loadTexts: vcPhysicalServerManagedStatusChange.setStatus('current')
vcProfileManagedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 9)).setObjects(("HPVC-MIB", "vcProfileManagedStatus"), ("HPVC-MIB", "vcProfileIndex"))
if mibBuilder.loadTexts: vcProfileManagedStatusChange.setStatus('current')
vcTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 10)).setObjects(("HPVC-MIB", "vcDomainName"))
if mibBuilder.loadTexts: vcTestTrap.setStatus('current')
vcDomainStackingLinkRendundancyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 2, 0, 11)).setObjects(("HPVC-MIB", "vcDomainStackingLinkRedundant"))
if mibBuilder.loadTexts: vcDomainStackingLinkRendundancyStatusChange.setStatus('current')
vcDomainMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3))
vcDomainMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 1))
vcDomainMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2))
vcDomainMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 1, 1)).setObjects(("HPVC-MIB", "vcDomainGroup"), ("HPVC-MIB", "vcEnclosureGroup"), ("HPVC-MIB", "vcModuleGroup"), ("HPVC-MIB", "vcPortGroup"), ("HPVC-MIB", "vcPhysicalServerGroup"), ("HPVC-MIB", "vcFcFabricGroup"), ("HPVC-MIB", "vcEnetNetworkGroup"), ("HPVC-MIB", "vcProfileGroup"), ("HPVC-MIB", "vcEnetNetworkVcPortMapGroup"), ("HPVC-MIB", "vcFcFabricVcPortMapGroup"), ("HPVC-MIB", "vcProfileNetworkMapGroup"), ("HPVC-MIB", "vcProfileFcFabricMapGroup"), ("HPVC-MIB", "vcManagedStatusNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcDomainMIBCompliance = vcDomainMIBCompliance.setStatus('current')
vcDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 1)).setObjects(("HPVC-MIB", "vcDomainName"), ("HPVC-MIB", "vcDomainManagedStatus"), ("HPVC-MIB", "vcDomainPrimaryAddressType"), ("HPVC-MIB", "vcDomainPrimaryAddress"), ("HPVC-MIB", "vcDomainCheckpointValid"), ("HPVC-MIB", "vcDomainLastCheckpointTime"), ("HPVC-MIB", "vcDomainStackingLinkRedundant"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcDomainGroup = vcDomainGroup.setStatus('current')
vcEnclosureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 2)).setObjects(("HPVC-MIB", "vcEnclosureIndex"), ("HPVC-MIB", "vcEnclosureName"), ("HPVC-MIB", "vcEnclosureManagedStatus"), ("HPVC-MIB", "vcEnclosureAddressType"), ("HPVC-MIB", "vcEnclosureAddress"), ("HPVC-MIB", "vcEnclosureUUID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcEnclosureGroup = vcEnclosureGroup.setStatus('current')
vcModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 3)).setObjects(("HPVC-MIB", "vcModuleIndex"), ("HPVC-MIB", "vcModuleType"), ("HPVC-MIB", "vcModuleManagedStatus"), ("HPVC-MIB", "vcModulePartNumber"), ("HPVC-MIB", "vcModuleFwRev"), ("HPVC-MIB", "vcModuleEnclosurePointer"), ("HPVC-MIB", "vcModuleLocation"), ("HPVC-MIB", "vcModuleAddressType"), ("HPVC-MIB", "vcModuleAddress"), ("HPVC-MIB", "vcModuleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcModuleGroup = vcModuleGroup.setStatus('current')
vcPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 4)).setObjects(("HPVC-MIB", "vcPortIndex"), ("HPVC-MIB", "vcPortType"), ("HPVC-MIB", "vcPortManagedStatus"), ("HPVC-MIB", "vcPortManagerAddressType"), ("HPVC-MIB", "vcPortManagerAddress"), ("HPVC-MIB", "vcPortContainerPointer"), ("HPVC-MIB", "vcPortPhysicalPortPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcPortGroup = vcPortGroup.setStatus('current')
vcPhysicalServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 5)).setObjects(("HPVC-MIB", "vcPhysicalServerIndex"), ("HPVC-MIB", "vcPhysicalServerEnclosureIndex"), ("HPVC-MIB", "vcPhysicalServerManagedStatus"), ("HPVC-MIB", "vcPhysicalServerLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcPhysicalServerGroup = vcPhysicalServerGroup.setStatus('current')
vcFcFabricGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 6)).setObjects(("HPVC-MIB", "vcFcFabricIndex"), ("HPVC-MIB", "vcFcFabricName"), ("HPVC-MIB", "vcFcFabricManagedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcFcFabricGroup = vcFcFabricGroup.setStatus('current')
vcEnetNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 7)).setObjects(("HPVC-MIB", "vcEnetNetworkIndex"), ("HPVC-MIB", "vcEnetNetworkName"), ("HPVC-MIB", "vcEnetNetworkManagedStatus"), ("HPVC-MIB", "vcEnetNetworkUplinkVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcEnetNetworkGroup = vcEnetNetworkGroup.setStatus('current')
vcProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 8)).setObjects(("HPVC-MIB", "vcProfileIndex"), ("HPVC-MIB", "vcProfileName"), ("HPVC-MIB", "vcProfileManagedStatus"), ("HPVC-MIB", "vcProfilePhysicalServerIndex"), ("HPVC-MIB", "vcProfileLogicalSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcProfileGroup = vcProfileGroup.setStatus('current')
vcEnetNetworkVcPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 9)).setObjects(("HPVC-MIB", "vcEnetNetworkVcPortMapNetworkIndex"), ("HPVC-MIB", "vcEnetNetworkVcPortMapVcPortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcEnetNetworkVcPortMapGroup = vcEnetNetworkVcPortMapGroup.setStatus('current')
vcFcFabricVcPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 10)).setObjects(("HPVC-MIB", "vcFcFabricVcPortMapFcFabricIndex"), ("HPVC-MIB", "vcFcFabricVcPortMapVcPortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcFcFabricVcPortMapGroup = vcFcFabricVcPortMapGroup.setStatus('current')
vcProfileNetworkMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 11)).setObjects(("HPVC-MIB", "vcProfileNetworkMapProfileIndex"), ("HPVC-MIB", "vcProfileNetworkMapNetworkIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcProfileNetworkMapGroup = vcProfileNetworkMapGroup.setStatus('current')
vcProfileFcFabricMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 12)).setObjects(("HPVC-MIB", "vcProfileFcFabricMapProfileIndex"), ("HPVC-MIB", "vcProfileFcFabricMapFcFabricIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcProfileFcFabricMapGroup = vcProfileFcFabricMapGroup.setStatus('current')
vcManagedStatusNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 5, 7, 5, 2, 1, 3, 2, 13)).setObjects(("HPVC-MIB", "vcDomainManagedStatusChange"), ("HPVC-MIB", "vcCheckpointTimeout"), ("HPVC-MIB", "vcCheckpointCompleted"), ("HPVC-MIB", "vcEnetNetworkManagedStatusChange"), ("HPVC-MIB", "vcFcFabricManagedStatusChange"), ("HPVC-MIB", "vcModuleManagedStatusChange"), ("HPVC-MIB", "vcEnclosureManagedStatusChange"), ("HPVC-MIB", "vcPhysicalServerManagedStatusChange"), ("HPVC-MIB", "vcProfileManagedStatusChange"), ("HPVC-MIB", "vcTestTrap"), ("HPVC-MIB", "vcDomainStackingLinkRendundancyStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vcManagedStatusNotificationsGroup = vcManagedStatusNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("HPVC-MIB", vcProfileTable=vcProfileTable, hpEmbeddedServerMgt=hpEmbeddedServerMgt, vcModuleSerialNumber=vcModuleSerialNumber, vcPortContainerPointer=vcPortContainerPointer, vcModuleManagedStatusChange=vcModuleManagedStatusChange, vcCheckpointTimeout=vcCheckpointTimeout, vcFcFabricName=vcFcFabricName, vcEnetNetworkTable=vcEnetNetworkTable, vcProfileFcFabricMapEntry=vcProfileFcFabricMapEntry, vcDomainMIBGroups=vcDomainMIBGroups, vcModuleType=vcModuleType, vcProfileFcFabricMapConnectionIndex=vcProfileFcFabricMapConnectionIndex, vcFcFabric=vcFcFabric, vcPhysicalServerLocation=vcPhysicalServerLocation, vcProfileNetworkMapNetworkIndex=vcProfileNetworkMapNetworkIndex, vcFcFabricVcPortMapGroup=vcFcFabricVcPortMapGroup, vcDomainMIBNotificationPrefix=vcDomainMIBNotificationPrefix, vcFcFabricManagedStatus=vcFcFabricManagedStatus, vcModuleIndex=vcModuleIndex, vcEnetNetworkManagedStatus=vcEnetNetworkManagedStatus, vcProfileNetworkMap=vcProfileNetworkMap, vcEnetNetworkManagedStatusChange=vcEnetNetworkManagedStatusChange, vcPhysicalServerEnclosureIndex=vcPhysicalServerEnclosureIndex, vcEnclosureAddress=vcEnclosureAddress, vcEnclosureEntry=vcEnclosureEntry, vcFcFabricGroup=vcFcFabricGroup, vcProfileNetworkMapConnectionIndex=vcProfileNetworkMapConnectionIndex, vcDomainStackingLinkRendundancyStatusChange=vcDomainStackingLinkRendundancyStatusChange, vcPhysicalServerManagedStatusChange=vcPhysicalServerManagedStatusChange, vcEnetNetworkIndex=vcEnetNetworkIndex, vcDomainMIBNotifications=vcDomainMIBNotifications, vcProfileIndex=vcProfileIndex, vcPhysicalServer=vcPhysicalServer, vcTestTrap=vcTestTrap, VcPortType=VcPortType, vcFcFabricEntry=vcFcFabricEntry, PYSNMP_MODULE_ID=vcDomainMIB, vcPhysicalServerSerialNumber=vcPhysicalServerSerialNumber, vcDomainManagedStatus=vcDomainManagedStatus, vcProfileLogicalSerialNumber=vcProfileLogicalSerialNumber, vcFcFabricVcPortMapVcPortIndex=vcFcFabricVcPortMapVcPortIndex, vcModuleGroup=vcModuleGroup, vcPhysicalServerEntry=vcPhysicalServerEntry, vcPhysicalServerGroup=vcPhysicalServerGroup, hpSysMgt=hpSysMgt, vcEnclosureAddressType=vcEnclosureAddressType, vcDomainMIBCompliances=vcDomainMIBCompliances, vcPortGroup=vcPortGroup, vcPortType=vcPortType, vcPhysicalServerManagedStatus=vcPhysicalServerManagedStatus, vcEnetNetworkEntry=vcEnetNetworkEntry, vcPortEntry=vcPortEntry, vcProfileManagedStatusChange=vcProfileManagedStatusChange, vcPhysicalServerProductName=vcPhysicalServerProductName, VcDomainModuleRole=VcDomainModuleRole, vcDomainPrimaryAddress=vcDomainPrimaryAddress, vcProfileNetworkMapProfileIndex=vcProfileNetworkMapProfileIndex, vcModuleEnclosurePointer=vcModuleEnclosurePointer, hpModuleMgmtProc=hpModuleMgmtProc, vcDomainGroup=vcDomainGroup, vcProfileFcFabricMapFcFabricIndex=vcProfileFcFabricMapFcFabricIndex, vcFcFabricVcPortMap=vcFcFabricVcPortMap, vcModulePartNumber=vcModulePartNumber, vcPortManagerAddress=vcPortManagerAddress, vcProfileFcFabricMap=vcProfileFcFabricMap, VcManagedStatus=VcManagedStatus, vcEnetNetworkName=vcEnetNetworkName, vcPortManagedStatus=vcPortManagedStatus, vcModuleManagedStatus=vcModuleManagedStatus, virtualConnect=virtualConnect, vcEnclosureTable=vcEnclosureTable, vcCheckpointCompleted=vcCheckpointCompleted, vcProfileFcFabricMapProfileIndex=vcProfileFcFabricMapProfileIndex, vcEnclosureManagedStatus=vcEnclosureManagedStatus, vcDomainName=vcDomainName, vcProfileFcFabricMapGroup=vcProfileFcFabricMapGroup, vcProfilePhysicalServerIndex=vcProfilePhysicalServerIndex, vcProfileName=vcProfileName, vcProfileFcFabricMapTable=vcProfileFcFabricMapTable, vcFcFabricVcPortMapFcFabricIndex=vcFcFabricVcPortMapFcFabricIndex, vcFcFabricManagedStatusChange=vcFcFabricManagedStatusChange, vcModuleAddressType=vcModuleAddressType, vcModuleProductName=vcModuleProductName, vcModuleID=vcModuleID, vcEnclosureGroup=vcEnclosureGroup, vcModuleEntry=vcModuleEntry, vcManagedStatusNotificationsGroup=vcManagedStatusNotificationsGroup, vcPortManagerAddressType=vcPortManagerAddressType, vcDomainStackingLinkRedundant=vcDomainStackingLinkRedundant, vcFcFabricVcPortMapEntry=vcFcFabricVcPortMapEntry, vcDomainMIBObjects=vcDomainMIBObjects, vcEnetNetworkVcPortMapNetworkIndex=vcEnetNetworkVcPortMapNetworkIndex, vcEnetNetworkVcPortMapTable=vcEnetNetworkVcPortMapTable, vcEnetNetworkVcPortMapEntry=vcEnetNetworkVcPortMapEntry, vcProfileNetworkMapTable=vcProfileNetworkMapTable, vcDomainMIBCompliance=vcDomainMIBCompliance, vcDomainCheckpointValid=vcDomainCheckpointValid, vcEnclosureIndex=vcEnclosureIndex, vcEnetNetwork=vcEnetNetwork, vcFcFabricVcPortMapTable=vcFcFabricVcPortMapTable, vcPhysicalServerPartNumber=vcPhysicalServerPartNumber, vcProfileNetworkMapGroup=vcProfileNetworkMapGroup, vcDomainManagedStatusChange=vcDomainManagedStatusChange, vcDomainLastCheckpointTime=vcDomainLastCheckpointTime, vcPhysicalServerIndex=vcPhysicalServerIndex, VcModuleType=VcModuleType, vcEnclosureManagedStatusChange=vcEnclosureManagedStatusChange, vcModuleLocation=vcModuleLocation, vcProfileGroup=vcProfileGroup, vcModuleAddress=vcModuleAddress, vcProfileManagedStatus=vcProfileManagedStatus, vcDomainPrimaryAddressType=vcDomainPrimaryAddressType, vcEnetNetworkVcPortMapGroup=vcEnetNetworkVcPortMapGroup, vcProfileNetworkMapEntry=vcProfileNetworkMapEntry, vcEnclosure=vcEnclosure, vcDomainMIBConformance=vcDomainMIBConformance, vcEnetNetworkVcPortMap=vcEnetNetworkVcPortMap, vcEnclosureName=vcEnclosureName, vcEnetNetworkVcPortMapVcPortIndex=vcEnetNetworkVcPortMapVcPortIndex, vcPhysicalServerTable=vcPhysicalServerTable, vcDomain=vcDomain, vcFcFabricTable=vcFcFabricTable, vcPortIndex=vcPortIndex, vcPort=vcPort, vcPortTable=vcPortTable, vcDomainMIBNotificationObjects=vcDomainMIBNotificationObjects, hp=hp, vcDomainMIB=vcDomainMIB, vcModule=vcModule, vcEnetNetworkGroup=vcEnetNetworkGroup, vcProfile=vcProfile, vcProfileEntry=vcProfileEntry, vcModuleFwRev=vcModuleFwRev, vcEnclosureUUID=vcEnclosureUUID, vcPortPhysicalPortPointer=vcPortPhysicalPortPointer, vcFcFabricIndex=vcFcFabricIndex, vcModuleTable=vcModuleTable, vcEnetNetworkUplinkVlanId=vcEnetNetworkUplinkVlanId)
