#
# PySNMP MIB module Storage-Management-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Storage-Management-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:07:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Integer32, TimeTicks, Unsigned32, enterprises, NotificationType, ObjectIdentity, Bits, Counter64, Counter32, Gauge32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Integer32", "TimeTicks", "Unsigned32", "enterprises", "NotificationType", "ObjectIdentity", "Bits", "Counter64", "Counter32", "Gauge32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniStorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20))
sniStorMgmtAvailInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 1))
sniStorMgmtProductInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1))
sniStorMgmtHsmsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2))
sniStorMgmtMarenInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3))
sniStorMgmtTlsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4))
sniStorMgmtRobarInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5))
sniStorMgmtResourceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 2))
sniStorMgmtPubsetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 3))
sniStorMgmtDiskInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 4))
sniStorMgmtGlobalData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 18))
sniStorMgmtPubsetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 20))
sniStorMgmtDiskTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 20, 21))
storMgmtProductTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtProductTabNum.setStatus('mandatory')
storMgmtProductTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2), )
if mibBuilder.loadTexts: storMgmtProductTable.setStatus('mandatory')
storMgmtProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtProductIndex"))
if mibBuilder.loadTexts: storMgmtProductEntry.setStatus('mandatory')
storMgmtProductIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtProductIndex.setStatus('mandatory')
storMgmtProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtProductName.setStatus('mandatory')
storMgmtProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtProductVersion.setStatus('mandatory')
storMgmtProductState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("created", 1), ("not-created", 2), ("in-delete", 3), ("in-create", 4), ("in-resume", 5), ("in-hold", 6), ("not-resumed", 7), ("locked", 8), ("not-installed", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtProductState.setStatus('mandatory')
storMgmtProductTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtProductTimestamp.setStatus('mandatory')
storMgmtHsmsOpmode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defineshow", 1), ("simulation", 2), ("operation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtHsmsOpmode.setStatus('mandatory')
storMgmtHsmsModeTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtHsmsModeTimestamp.setStatus('mandatory')
storMgmtHsmsServertask = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtHsmsServertask.setStatus('mandatory')
storMgmtHsmsWaitJobs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsWaitJobs.setStatus('mandatory')
storMgmtHsmsInstances = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsInstances.setStatus('mandatory')
storMgmtHsmsAcceptReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsAcceptReqs.setStatus('mandatory')
storMgmtHsmsCompleteReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsCompleteReqs.setStatus('mandatory')
storMgmtHsmsInterruptReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsInterruptReqs.setStatus('mandatory')
storMgmtHsmsWaitReqsRead = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsWaitReqsRead.setStatus('mandatory')
storMgmtHsmsWaitReqsWrite = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsWaitReqsWrite.setStatus('mandatory')
storMgmtHsmsWaitReqsExpress = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsWaitReqsExpress.setStatus('mandatory')
storMgmtHsmsStimeRead = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsStimeRead.setStatus('mandatory')
storMgmtHsmsStimeWrite = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsStimeWrite.setStatus('mandatory')
storMgmtHsmsStimeExpress = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsStimeExpress.setStatus('mandatory')
storMgmtHsmsNetload = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtHsmsNetload.setStatus('mandatory')
storMgmtHsmsS1Bottleneck = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 2) + (0,1))
storMgmtMarenCPTask = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenCPTask.setStatus('mandatory')
storMgmtMarenUCPTask = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenUCPTask.setStatus('mandatory')
storMgmtMarenCatConn = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spd", 1), ("rfalocal", 2), ("rfaremote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenCatConn.setStatus('mandatory')
storMgmtMarenConnState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenConnState.setStatus('mandatory')
storMgmtMarenLocTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenLocTabNum.setStatus('mandatory')
storMgmtMarenLocTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 6), )
if mibBuilder.loadTexts: storMgmtMarenLocTable.setStatus('mandatory')
storMgmtMarenLocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 6, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtMarenLocIndex"))
if mibBuilder.loadTexts: storMgmtMarenLocEntry.setStatus('mandatory')
storMgmtMarenLocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenLocIndex.setStatus('mandatory')
storMgmtMarenLocName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenLocName.setStatus('mandatory')
storMgmtMarenLocOpmode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenLocOpmode.setStatus('mandatory')
storMgmtMarenLocFreevol = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenLocFreevol.setStatus('mandatory')
storMgmtMarenNetworkTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenNetworkTabNum.setStatus('mandatory')
storMgmtMarenNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 8), )
if mibBuilder.loadTexts: storMgmtMarenNetworkTable.setStatus('mandatory')
storMgmtMarenNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 8, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtMarenNetworkIndex"))
if mibBuilder.loadTexts: storMgmtMarenNetworkEntry.setStatus('mandatory')
storMgmtMarenNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenNetworkIndex.setStatus('mandatory')
storMgmtMarenNetworkHost = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtMarenNetworkHost.setStatus('mandatory')
storMgmtMarenNoVolume = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 3) + (0,1))
storMgmtTlsTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtTlsTabNum.setStatus('mandatory')
storMgmtTlsTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2), )
if mibBuilder.loadTexts: storMgmtTlsTable.setStatus('mandatory')
storMgmtTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtTlsIndex"))
if mibBuilder.loadTexts: storMgmtTlsEntry.setStatus('mandatory')
storMgmtTlsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtTlsIndex.setStatus('mandatory')
storMgmtTlsRobState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("automatic", 1), ("pause", 2), ("manual", 3), ("off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtTlsRobState.setStatus('mandatory')
storMgmtTlsFreeboxno = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtTlsFreeboxno.setStatus('mandatory')
storMgmtTlsCleanno = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtTlsCleanno.setStatus('mandatory')
storMgmtTlsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtTlsLocation.setStatus('mandatory')
storMgmtTlsOffline = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 4) + (0,1))
storMgmtRobarTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarTabNum.setStatus('mandatory')
storMgmtRobarTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2), )
if mibBuilder.loadTexts: storMgmtRobarTable.setStatus('mandatory')
storMgmtRobarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtRobarIndex"))
if mibBuilder.loadTexts: storMgmtRobarEntry.setStatus('mandatory')
storMgmtRobarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarIndex.setStatus('mandatory')
storMgmtRobarLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarLocation.setStatus('mandatory')
storMgmtRobarState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("running", 1), ("terminated", 2), ("aborted", 3), ("loaded", 4), ("in-hold", 5), ("not-installed", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarState.setStatus('mandatory')
storMgmtRobarVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarVersion.setStatus('mandatory')
storMgmtRobarConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("not-available", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarConnState.setStatus('mandatory')
storMgmtRobarRobState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtRobarRobState.setStatus('mandatory')
storMgmtRobarRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtRobarRouting.setStatus('mandatory')
storMgmtRobarBs2Messages = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 20, 1, 5) + (0,1))
storMgmtResourcePubset = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtResourcePubset.setStatus('mandatory')
storMgmtResourceSaturation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level-0", 1), ("level-1", 2), ("level-2", 3), ("level-3", 4), ("level-4", 5), ("level-5", 6), ("unknown-level", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtResourceSaturation.setStatus('mandatory')
storMgmtResourceCapacity = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtResourceCapacity.setStatus('mandatory')
storMgmtResourceSpaceAllocated = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtResourceSpaceAllocated.setStatus('mandatory')
storMgmtResourceFragment = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtResourceFragment.setStatus('mandatory')
storMgmtResourceReusableS1 = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtResourceReusableS1.setStatus('mandatory')
storMgmtResourceSecureQueue = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtResourceSecureQueue.setStatus('mandatory')
storMgmtPubsetTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetTabNum.setStatus('mandatory')
storMgmtPubsetTabState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("all", 1), ("paging", 2), ("local", 3), ("remote", 4), ("accessible", 5), ("local-accessible", 6), ("shared", 7), ("exclusive", 8), ("remote-accessible", 9), ("local-accessible-speedcat", 10), ("xcs-pubset", 11), ("hsms-supported", 12), ("single-feature", 13), ("system-managed", 14), ("volume-sets", 15), ("unused-volsets", 16), ("master-change-error", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtPubsetTabState.setStatus('mandatory')
storMgmtPubsetTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10), )
if mibBuilder.loadTexts: storMgmtPubsetTable.setStatus('mandatory')
storMgmtPubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtPubsetIndex"))
if mibBuilder.loadTexts: storMgmtPubsetEntry.setStatus('mandatory')
storMgmtPubsetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetIndex.setStatus('mandatory')
storMgmtPubsetTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("single-feature", 1), ("system-managed", 2), ("volumeset", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetTyp.setStatus('mandatory')
storMgmtPubsetLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetLocal.setStatus('mandatory')
storMgmtPubsetHome = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("home", 1), ("imported", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetHome.setStatus('mandatory')
storMgmtPubsetShared = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("shared", 1), ("exclusive", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetShared.setStatus('mandatory')
storMgmtPubsetMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetMaster.setStatus('mandatory')
storMgmtPubsetAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("accessible", 1), ("inaccessible", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetAccessible.setStatus('mandatory')
storMgmtPubsetQuiet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetQuiet.setStatus('mandatory')
storMgmtPubsetPaging = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetPaging.setStatus('mandatory')
storMgmtPubsetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetSize.setStatus('mandatory')
storMgmtPubsetUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetUsedSize.setStatus('mandatory')
storMgmtPubsetSaturationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level-0", 1), ("level-1", 2), ("level-2", 3), ("level-3", 4), ("level-4", 5), ("level-5", 6), ("unknown-level", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtPubsetSaturationLevel.setStatus('mandatory')
storMgmtDiskTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskTabNum.setStatus('mandatory')
storMgmtDiskTabReconfState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("all", 1), ("attached", 2), ("detached", 3), ("other", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtDiskTabReconfState.setStatus('mandatory')
storMgmtDiskTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10), )
if mibBuilder.loadTexts: storMgmtDiskTable.setStatus('mandatory')
storMgmtDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1), ).setIndexNames((0, "Storage-Management-MIB", "storMgmtDiskIndex"))
if mibBuilder.loadTexts: storMgmtDiskEntry.setStatus('mandatory')
storMgmtDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskIndex.setStatus('mandatory')
storMgmtDiskVSN = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskVSN.setStatus('mandatory')
storMgmtDiskDeviceAllocState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("free", 1), ("allocated", 2), ("exclusive-allocated", 3), ("current-public-assigned", 4), ("dms-used-volume-assigned", 5), ("drv-assigned", 6), ("drv-public-assigned", 7), ("drv-dms-used-volume-assigned", 8), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskDeviceAllocState.setStatus('mandatory')
storMgmtDiskSystemUse = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("paging-device", 1), ("public-device", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskSystemUse.setStatus('mandatory')
storMgmtDiskPoolAttribut = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("shared-privat-disk", 1), ("device-switchable", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskPoolAttribut.setStatus('mandatory')
storMgmtDiskReconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("attached", 1), ("detach-pending", 2), ("detached", 3), ("assignment-in-progress", 4), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskReconfState.setStatus('mandatory')
storMgmtDiskVolAllocState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("free", 1), ("task-exclusive", 2), ("task-sharable", 3), ("current-public", 4), ("current-paging", 5), ("volume-cancelled", 6), ("volume-allocated", 7), ("invalid", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskVolAllocState.setStatus('mandatory')
storMgmtDiskPrivDiskRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("offline", 1), ("active", 2), ("inactive", 3), ("end-in-process", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskPrivDiskRunState.setStatus('mandatory')
storMgmtDiskPhaseSet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("online-only", 1), ("premounting", 2), ("mounting", 3), ("in-use", 4), ("not-specified", 5), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskPhaseSet.setStatus('mandatory')
storMgmtDiskActionState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("no-action", 1), ("inoperable", 2), ("remount", 3), ("cancelled", 4), ("no-device-available", 5), ("recover", 6), ("positioning", 7), ("writepermission-missing", 8), ("unlock", 9), ("svl-update", 10), ("dismount", 11), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskActionState.setStatus('mandatory')
storMgmtDiskUse = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dms", 1), ("special", 2), ("work", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskUse.setStatus('mandatory')
storMgmtDiskAssignTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("standard", 1), ("user", 2), ("user-by-default", 3), ("operator", 4), ("operator-by-default", 5), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskAssignTime.setStatus('mandatory')
storMgmtDiskUserAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("standard", 1), ("shared", 2), ("shared-by-default", 3), ("exclusive", 4), ("exclusive-by-default", 5), ("no", 6), ("no-by-default", 7), ("all", 8), ("all-by-default", 9), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskUserAllocation.setStatus('mandatory')
storMgmtDiskOperatorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("standard", 1), ("shared", 2), ("shared-by-default", 3), ("exclusive", 4), ("exclusive-by-default", 5), ("no", 6), ("no-by-default", 7), ("all", 8), ("all-by-default", 9), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskOperatorControl.setStatus('mandatory')
storMgmtDiskSystemAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("shared", 1), ("exclusive", 2), ("all", 3), ("current-shared", 4), ("current-exclusive", 5), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskSystemAllocation.setStatus('mandatory')
storMgmtDiskAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("write", 1), ("ppd", 2), ("from-device", 3), ("write-from-device", 4), ("ppd-from-device", 5), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskAccess.setStatus('mandatory')
storMgmtDiskRecordingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 20, 4, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("single-recording", 1), ("dual-recording-by-volume", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtDiskRecordingMode.setStatus('mandatory')
storMgmtGlobalDataVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storMgmtGlobalDataVersion.setStatus('mandatory')
storMgmtGlobalDataInputFile = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 20, 18, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: storMgmtGlobalDataInputFile.setStatus('mandatory')
storMgmtPubsetSatLevTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 20, 20) + (0,301)).setObjects(("Storage-Management-MIB", "storMgmtPubsetIndex"), ("Storage-Management-MIB", "storMgmtPubsetSaturationLevel"))
storMgmtDiskReconfStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 20, 21) + (0,301)).setObjects(("Storage-Management-MIB", "storMgmtDiskIndex"), ("Storage-Management-MIB", "storMgmtDiskReconfState"))
mibBuilder.exportSymbols("Storage-Management-MIB", storMgmtGlobalDataInputFile=storMgmtGlobalDataInputFile, storMgmtTlsLocation=storMgmtTlsLocation, storMgmtDiskAssignTime=storMgmtDiskAssignTime, storMgmtRobarConnState=storMgmtRobarConnState, storMgmtDiskUserAllocation=storMgmtDiskUserAllocation, storMgmtTlsFreeboxno=storMgmtTlsFreeboxno, storMgmtPubsetTabNum=storMgmtPubsetTabNum, sniStorMgmtDiskInfo=sniStorMgmtDiskInfo, storMgmtResourceSecureQueue=storMgmtResourceSecureQueue, storMgmtPubsetQuiet=storMgmtPubsetQuiet, sniStorMgmt=sniStorMgmt, storMgmtHsmsStimeExpress=storMgmtHsmsStimeExpress, storMgmtPubsetMaster=storMgmtPubsetMaster, storMgmtDiskActionState=storMgmtDiskActionState, storMgmtProductIndex=storMgmtProductIndex, storMgmtHsmsWaitReqsRead=storMgmtHsmsWaitReqsRead, storMgmtDiskPrivDiskRunState=storMgmtDiskPrivDiskRunState, storMgmtTlsOffline=storMgmtTlsOffline, storMgmtResourceCapacity=storMgmtResourceCapacity, storMgmtResourcePubset=storMgmtResourcePubset, storMgmtRobarIndex=storMgmtRobarIndex, storMgmtDiskVolAllocState=storMgmtDiskVolAllocState, storMgmtDiskRecordingMode=storMgmtDiskRecordingMode, storMgmtPubsetTabState=storMgmtPubsetTabState, storMgmtProductVersion=storMgmtProductVersion, sniStorMgmtPubsetInfo=sniStorMgmtPubsetInfo, storMgmtMarenNetworkTable=storMgmtMarenNetworkTable, storMgmtDiskPoolAttribut=storMgmtDiskPoolAttribut, storMgmtMarenNetworkEntry=storMgmtMarenNetworkEntry, storMgmtDiskAccess=storMgmtDiskAccess, storMgmtMarenCPTask=storMgmtMarenCPTask, storMgmtTlsEntry=storMgmtTlsEntry, storMgmtPubsetSatLevTrap=storMgmtPubsetSatLevTrap, storMgmtPubsetUsedSize=storMgmtPubsetUsedSize, storMgmtMarenCatConn=storMgmtMarenCatConn, sniStorMgmtRobarInfo=sniStorMgmtRobarInfo, storMgmtRobarState=storMgmtRobarState, storMgmtPubsetAccessible=storMgmtPubsetAccessible, storMgmtTlsIndex=storMgmtTlsIndex, sniStorMgmtTlsInfo=sniStorMgmtTlsInfo, storMgmtProductEntry=storMgmtProductEntry, storMgmtHsmsAcceptReqs=storMgmtHsmsAcceptReqs, storMgmtTlsTabNum=storMgmtTlsTabNum, storMgmtDiskOperatorControl=storMgmtDiskOperatorControl, storMgmtProductTable=storMgmtProductTable, storMgmtRobarEntry=storMgmtRobarEntry, storMgmtMarenLocEntry=storMgmtMarenLocEntry, storMgmtResourceReusableS1=storMgmtResourceReusableS1, storMgmtDiskVSN=storMgmtDiskVSN, storMgmtHsmsWaitReqsExpress=storMgmtHsmsWaitReqsExpress, storMgmtHsmsWaitJobs=storMgmtHsmsWaitJobs, storMgmtRobarLocation=storMgmtRobarLocation, storMgmtDiskUse=storMgmtDiskUse, storMgmtMarenLocOpmode=storMgmtMarenLocOpmode, storMgmtDiskSystemAllocation=storMgmtDiskSystemAllocation, storMgmtDiskSystemUse=storMgmtDiskSystemUse, sniStorMgmtPubsetTraps=sniStorMgmtPubsetTraps, storMgmtHsmsServertask=storMgmtHsmsServertask, storMgmtPubsetSize=storMgmtPubsetSize, sniStorMgmtResourceInfo=sniStorMgmtResourceInfo, storMgmtDiskTabReconfState=storMgmtDiskTabReconfState, storMgmtHsmsStimeWrite=storMgmtHsmsStimeWrite, storMgmtHsmsInstances=storMgmtHsmsInstances, storMgmtMarenLocFreevol=storMgmtMarenLocFreevol, storMgmtDiskEntry=storMgmtDiskEntry, storMgmtMarenLocIndex=storMgmtMarenLocIndex, storMgmtRobarTable=storMgmtRobarTable, storMgmtDiskReconfState=storMgmtDiskReconfState, storMgmtHsmsOpmode=storMgmtHsmsOpmode, storMgmtRobarRouting=storMgmtRobarRouting, storMgmtPubsetIndex=storMgmtPubsetIndex, storMgmtRobarTabNum=storMgmtRobarTabNum, storMgmtPubsetHome=storMgmtPubsetHome, storMgmtRobarBs2Messages=storMgmtRobarBs2Messages, storMgmtPubsetShared=storMgmtPubsetShared, storMgmtTlsTable=storMgmtTlsTable, storMgmtProductTabNum=storMgmtProductTabNum, storMgmtTlsCleanno=storMgmtTlsCleanno, storMgmtMarenNetworkIndex=storMgmtMarenNetworkIndex, storMgmtProductTimestamp=storMgmtProductTimestamp, storMgmtMarenLocTabNum=storMgmtMarenLocTabNum, storMgmtResourceSaturation=storMgmtResourceSaturation, storMgmtMarenNetworkTabNum=storMgmtMarenNetworkTabNum, sniStorMgmtProductInfo=sniStorMgmtProductInfo, storMgmtResourceSpaceAllocated=storMgmtResourceSpaceAllocated, storMgmtPubsetLocal=storMgmtPubsetLocal, storMgmtHsmsNetload=storMgmtHsmsNetload, storMgmtPubsetSaturationLevel=storMgmtPubsetSaturationLevel, storMgmtDiskDeviceAllocState=storMgmtDiskDeviceAllocState, sniStorMgmtHsmsInfo=sniStorMgmtHsmsInfo, storMgmtMarenNetworkHost=storMgmtMarenNetworkHost, sniStorMgmtAvailInfo=sniStorMgmtAvailInfo, storMgmtHsmsModeTimestamp=storMgmtHsmsModeTimestamp, sniStorMgmtGlobalData=sniStorMgmtGlobalData, storMgmtMarenConnState=storMgmtMarenConnState, storMgmtPubsetTyp=storMgmtPubsetTyp, storMgmtMarenUCPTask=storMgmtMarenUCPTask, storMgmtPubsetTable=storMgmtPubsetTable, storMgmtMarenLocTable=storMgmtMarenLocTable, storMgmtMarenLocName=storMgmtMarenLocName, sniStorMgmtMarenInfo=sniStorMgmtMarenInfo, storMgmtGlobalDataVersion=storMgmtGlobalDataVersion, storMgmtHsmsS1Bottleneck=storMgmtHsmsS1Bottleneck, sni=sni, storMgmtHsmsWaitReqsWrite=storMgmtHsmsWaitReqsWrite, storMgmtDiskTabNum=storMgmtDiskTabNum, storMgmtHsmsStimeRead=storMgmtHsmsStimeRead, sniStorMgmtDiskTraps=sniStorMgmtDiskTraps, storMgmtDiskTable=storMgmtDiskTable, storMgmtDiskIndex=storMgmtDiskIndex, storMgmtProductName=storMgmtProductName, storMgmtResourceFragment=storMgmtResourceFragment, storMgmtDiskPhaseSet=storMgmtDiskPhaseSet, storMgmtProductState=storMgmtProductState, storMgmtMarenNoVolume=storMgmtMarenNoVolume, storMgmtTlsRobState=storMgmtTlsRobState, storMgmtDiskReconfStateTrap=storMgmtDiskReconfStateTrap, storMgmtRobarVersion=storMgmtRobarVersion, sniProductMibs=sniProductMibs, storMgmtHsmsInterruptReqs=storMgmtHsmsInterruptReqs, storMgmtPubsetEntry=storMgmtPubsetEntry, storMgmtHsmsCompleteReqs=storMgmtHsmsCompleteReqs, storMgmtPubsetPaging=storMgmtPubsetPaging, storMgmtRobarRobState=storMgmtRobarRobState)
