#
# PySNMP MIB module JUNIPER-PFE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-PFE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:49:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
jnxPfeMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPfeMibRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, ObjectIdentity, NotificationType, Gauge32, Counter32, IpAddress, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "ObjectIdentity", "NotificationType", "Gauge32", "Counter32", "IpAddress", "Bits", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxPfeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1))
jnxPfeMib.setRevisions(('2014-11-14 00:00', '2014-03-12 00:00', '2011-09-09 00:00', '2010-02-07 00:00',))
if mibBuilder.loadTexts: jnxPfeMib.setLastUpdated('201109220000Z')
if mibBuilder.loadTexts: jnxPfeMib.setOrganization('Juniper Networks, Inc.')
class JnxPfeMemoryTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("nh", 1), ("fw", 2), ("encap", 3))

jnxPfeNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1))
jnxPfeNotifyGlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1), )
if mibBuilder.loadTexts: jnxPfeNotifyGlTable.setStatus('current')
jnxPfeNotifyGlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeNotifyGlSlot"))
if mibBuilder.loadTexts: jnxPfeNotifyGlEntry.setStatus('current')
jnxPfeNotifyGlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: jnxPfeNotifyGlSlot.setStatus('current')
jnxPfeNotifyGlParsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlParsed.setStatus('current')
jnxPfeNotifyGlAged = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlAged.setStatus('current')
jnxPfeNotifyGlCorrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlCorrupt.setStatus('current')
jnxPfeNotifyGlIllegal = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlIllegal.setStatus('current')
jnxPfeNotifyGlSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlSample.setStatus('current')
jnxPfeNotifyGlGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlGiants.setStatus('current')
jnxPfeNotifyGlTtlExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlTtlExceeded.setStatus('current')
jnxPfeNotifyGlTtlExcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlTtlExcErrors.setStatus('current')
jnxPfeNotifyGlSvcOptAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlSvcOptAsp.setStatus('current')
jnxPfeNotifyGlSvcOptRe = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlSvcOptRe.setStatus('current')
jnxPfeNotifyGlPostSvcOptOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlPostSvcOptOut.setStatus('current')
jnxPfeNotifyGlOptTtlExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlOptTtlExp.setStatus('current')
jnxPfeNotifyGlDiscSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlDiscSample.setStatus('current')
jnxPfeNotifyGlRateLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlRateLimited.setStatus('current')
jnxPfeNotifyGlPktGetFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlPktGetFails.setStatus('current')
jnxPfeNotifyGlDmaFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlDmaFails.setStatus('current')
jnxPfeNotifyGlDmaTotals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlDmaTotals.setStatus('current')
jnxPfeNotifyGlUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlUnknowns.setStatus('current')
jnxPfeNotifyGlParAccSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyGlParAccSec.setStatus('current')
jnxPfeNotifyTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2), )
if mibBuilder.loadTexts: jnxPfeNotifyTypeTable.setStatus('current')
jnxPfeNotifyTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeNotifyGlSlot"), (0, "JUNIPER-PFE-MIB", "jnxPfeNotifyTypeId"))
if mibBuilder.loadTexts: jnxPfeNotifyTypeEntry.setStatus('current')
jnxPfeNotifyTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("illegal", 1), ("unclassified", 2), ("option", 3), ("nextHop", 4), ("discard", 5), ("sample", 6), ("redirect", 7), ("dontFragment", 8), ("cfdf", 9), ("poison", 10), ("unknown", 11), ("specialMemPkt", 12), ("autoConfig", 13), ("reject", 14))))
if mibBuilder.loadTexts: jnxPfeNotifyTypeId.setStatus('current')
jnxPfeNotifyTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeDescr.setStatus('current')
jnxPfeNotifyTypeParsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeParsed.setStatus('current')
jnxPfeNotifyTypeInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeInput.setStatus('current')
jnxPfeNotifyTypeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeFailed.setStatus('current')
jnxPfeNotifyTypeIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeNotifyTypeIgnored.setStatus('current')
jnxPfeMemoryErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3), )
if mibBuilder.loadTexts: jnxPfeMemoryErrorsTable.setStatus('current')
jnxPfeMemoryErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeFpcSlot"), (0, "JUNIPER-PFE-MIB", "jnxPfeSlot"))
if mibBuilder.loadTexts: jnxPfeMemoryErrorsEntry.setStatus('current')
jnxPfeFpcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: jnxPfeFpcSlot.setStatus('current')
jnxPfeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: jnxPfeSlot.setStatus('current')
jnxPfeParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeParityErrors.setStatus('current')
jnxPfeEccErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeEccErrors.setStatus('current')
pfeMemoryErrorsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 0))
pfeMemoryErrors = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 1, 0, 1)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeParityErrors"), ("JUNIPER-PFE-MIB", "jnxPfeEccErrors"))
if mibBuilder.loadTexts: pfeMemoryErrors.setStatus('current')
jnxPfeMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2))
jnxPfeMemoryUkernTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 1), )
if mibBuilder.loadTexts: jnxPfeMemoryUkernTable.setStatus('current')
jnxPfeMemoryUkernEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 1, 1), ).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeGlSlot"))
if mibBuilder.loadTexts: jnxPfeMemoryUkernEntry.setStatus('current')
jnxPfeMemoryUkernFreePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeMemoryUkernFreePercent.setStatus('current')
jnxPfeMemoryForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 2), )
if mibBuilder.loadTexts: jnxPfeMemoryForwardingTable.setStatus('current')
jnxPfeMemoryForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 2, 1), ).setIndexNames((0, "JUNIPER-PFE-MIB", "jnxPfeGlSlot"), (0, "JUNIPER-PFE-MIB", "jnxPfeMemoryForwardingChipSlot"), (0, "JUNIPER-PFE-MIB", "jnxPfeMemoryType"))
if mibBuilder.loadTexts: jnxPfeMemoryForwardingEntry.setStatus('current')
jnxPfeMemoryForwardingChipSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: jnxPfeMemoryForwardingChipSlot.setStatus('current')
jnxPfeMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 2, 1, 2), JnxPfeMemoryTypeEnum())
if mibBuilder.loadTexts: jnxPfeMemoryType.setStatus('current')
jnxPfeMemoryForwardingPercentFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPfeMemoryForwardingPercentFree.setStatus('current')
jnxPfeMemoryTrapVars = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 3))
if mibBuilder.loadTexts: jnxPfeMemoryTrapVars.setStatus('current')
jnxPfeGlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPfeGlSlot.setStatus('current')
jnxPfeInstanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPfeInstanceNumber.setStatus('current')
jnxPfeMemoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPfeMemoryThreshold.setStatus('current')
jnxPfeMemoryNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4))
jnxPfeMemoryNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0))
jnxPfeHeapMemoryThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 1)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeHeapMemoryThresholdExceeded.setStatus('current')
jnxPfeHeapMemoryThresholdAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 2)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeHeapMemoryThresholdAbated.setStatus('current')
jnxPfeNextHopMemoryThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 3)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeInstanceNumber"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeNextHopMemoryThresholdExceeded.setStatus('current')
jnxPfeNextHopMemoryThresholdAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 4)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeInstanceNumber"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeNextHopMemoryThresholdAbated.setStatus('current')
jnxPfeFilterMemoryThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 5)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeInstanceNumber"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeFilterMemoryThresholdExceeded.setStatus('current')
jnxPfeFilterMemoryThresholdAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 6)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeInstanceNumber"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeFilterMemoryThresholdAbated.setStatus('current')
jnxPfeEncapMemoryThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 7)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeInstanceNumber"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeEncapMemoryThresholdExceeded.setStatus('current')
jnxPfeEncapMemoryThresholdAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 44, 1, 2, 4, 0, 8)).setObjects(("JUNIPER-PFE-MIB", "jnxPfeGlSlot"), ("JUNIPER-PFE-MIB", "jnxPfeInstanceNumber"), ("JUNIPER-PFE-MIB", "jnxPfeMemoryThreshold"))
if mibBuilder.loadTexts: jnxPfeEncapMemoryThresholdAbated.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-PFE-MIB", jnxPfeNotifyTypeIgnored=jnxPfeNotifyTypeIgnored, jnxPfeNextHopMemoryThresholdAbated=jnxPfeNextHopMemoryThresholdAbated, jnxPfeMemoryUkernFreePercent=jnxPfeMemoryUkernFreePercent, PYSNMP_MODULE_ID=jnxPfeMib, jnxPfeGlSlot=jnxPfeGlSlot, jnxPfeMemoryForwardingTable=jnxPfeMemoryForwardingTable, jnxPfeMemoryForwardingEntry=jnxPfeMemoryForwardingEntry, jnxPfeNotifyGlGiants=jnxPfeNotifyGlGiants, jnxPfeNotifyGlTable=jnxPfeNotifyGlTable, jnxPfeMemoryForwardingChipSlot=jnxPfeMemoryForwardingChipSlot, jnxPfeMemoryUkernEntry=jnxPfeMemoryUkernEntry, jnxPfeFpcSlot=jnxPfeFpcSlot, jnxPfeMemoryNotifications=jnxPfeMemoryNotifications, jnxPfeSlot=jnxPfeSlot, jnxPfeMemoryNotificationsPrefix=jnxPfeMemoryNotificationsPrefix, jnxPfeFilterMemoryThresholdAbated=jnxPfeFilterMemoryThresholdAbated, jnxPfeNotifyGlTtlExcErrors=jnxPfeNotifyGlTtlExcErrors, jnxPfeMemoryErrorsTable=jnxPfeMemoryErrorsTable, jnxPfeNotifyGlUnknowns=jnxPfeNotifyGlUnknowns, jnxPfeMemoryErrorsEntry=jnxPfeMemoryErrorsEntry, jnxPfeInstanceNumber=jnxPfeInstanceNumber, jnxPfeEccErrors=jnxPfeEccErrors, jnxPfeHeapMemoryThresholdExceeded=jnxPfeHeapMemoryThresholdExceeded, jnxPfeNotifyTypeParsed=jnxPfeNotifyTypeParsed, jnxPfeMemory=jnxPfeMemory, jnxPfeNotifyGlDiscSample=jnxPfeNotifyGlDiscSample, jnxPfeNotifyGlPktGetFails=jnxPfeNotifyGlPktGetFails, jnxPfeNextHopMemoryThresholdExceeded=jnxPfeNextHopMemoryThresholdExceeded, pfeMemoryErrors=pfeMemoryErrors, jnxPfeNotifyGlEntry=jnxPfeNotifyGlEntry, jnxPfeNotifyGlOptTtlExp=jnxPfeNotifyGlOptTtlExp, jnxPfeNotifyTypeTable=jnxPfeNotifyTypeTable, jnxPfeHeapMemoryThresholdAbated=jnxPfeHeapMemoryThresholdAbated, jnxPfeNotifyGlDmaTotals=jnxPfeNotifyGlDmaTotals, jnxPfeNotifyGlParsed=jnxPfeNotifyGlParsed, jnxPfeNotifyTypeFailed=jnxPfeNotifyTypeFailed, jnxPfeMemoryThreshold=jnxPfeMemoryThreshold, jnxPfeMemoryTrapVars=jnxPfeMemoryTrapVars, jnxPfeFilterMemoryThresholdExceeded=jnxPfeFilterMemoryThresholdExceeded, pfeMemoryErrorsNotificationPrefix=pfeMemoryErrorsNotificationPrefix, jnxPfeEncapMemoryThresholdAbated=jnxPfeEncapMemoryThresholdAbated, jnxPfeMemoryForwardingPercentFree=jnxPfeMemoryForwardingPercentFree, jnxPfeNotifyTypeId=jnxPfeNotifyTypeId, jnxPfeNotifyGlParAccSec=jnxPfeNotifyGlParAccSec, jnxPfeNotifyTypeInput=jnxPfeNotifyTypeInput, jnxPfeMib=jnxPfeMib, jnxPfeParityErrors=jnxPfeParityErrors, jnxPfeNotifyGlSvcOptAsp=jnxPfeNotifyGlSvcOptAsp, jnxPfeNotifyGlTtlExceeded=jnxPfeNotifyGlTtlExceeded, jnxPfeMemoryUkernTable=jnxPfeMemoryUkernTable, jnxPfeNotifyTypeEntry=jnxPfeNotifyTypeEntry, jnxPfeNotifyGlAged=jnxPfeNotifyGlAged, jnxPfeNotifyGlDmaFails=jnxPfeNotifyGlDmaFails, jnxPfeNotifyTypeDescr=jnxPfeNotifyTypeDescr, jnxPfeNotification=jnxPfeNotification, jnxPfeNotifyGlRateLimited=jnxPfeNotifyGlRateLimited, jnxPfeEncapMemoryThresholdExceeded=jnxPfeEncapMemoryThresholdExceeded, jnxPfeNotifyGlIllegal=jnxPfeNotifyGlIllegal, jnxPfeNotifyGlSlot=jnxPfeNotifyGlSlot, jnxPfeNotifyGlSvcOptRe=jnxPfeNotifyGlSvcOptRe, jnxPfeNotifyGlSample=jnxPfeNotifyGlSample, jnxPfeMemoryType=jnxPfeMemoryType, jnxPfeNotifyGlPostSvcOptOut=jnxPfeNotifyGlPostSvcOptOut, JnxPfeMemoryTypeEnum=JnxPfeMemoryTypeEnum, jnxPfeNotifyGlCorrupt=jnxPfeNotifyGlCorrupt)
