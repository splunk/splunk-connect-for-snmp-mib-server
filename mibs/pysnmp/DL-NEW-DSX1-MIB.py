#
# PySNMP MIB module DL-NEW-DSX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DL-NEW-DSX1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:32:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, ModuleIdentity, IpAddress, NotificationType, Bits, Counter64, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, TimeTicks, ObjectIdentity, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ModuleIdentity", "IpAddress", "NotificationType", "Bits", "Counter64", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

digital_link = MibIdentifier((1, 3, 6, 1, 4, 1, 300)).setLabel("digital-link")
dl_new_t1 = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200)).setLabel("dl-new-t1")
class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class PortId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))
    namedValues = NamedValues(("mainNet", 1), ("aux", 2), ("otherNet", 3), ("reserved1", 4), ("reserved2", 5), ("reserved3", 6), ("ethPort", 7), ("commPort", 8), ("int-clock", 9), ("ext-clock", 10), ("data1", 11), ("data2", 12), ("data3", 13), ("data4", 14), ("data5", 15), ("data6", 16), ("data7", 17), ("data8", 18), ("data9", 19), ("data10", 20), ("data11", 21), ("data12", 22), ("data13", 23), ("data14", 24), ("data15", 25), ("data16", 26), ("data17", 27), ("data18", 28), ("data19", 29), ("data20", 30), ("data21", 31), ("data22", 32), ("data23", 33), ("data24", 34), ("data25", 35), ("data26", 36), ("data27", 37), ("data28", 38), ("data29", 39), ("data30", 40), ("data31", 41), ("data32", 42), ("noPort", 43))

class AlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("lostSignal", 1), ("lostSync", 2), ("detectedYellow", 3), ("detectedAIS", 4), ("detectedExternalAlarm", 5), ("exceededBpvThreshold", 6), ("exceededOofThreshold", 7), ("exceededCrcThreshold", 8), ("remoteAlarmBitSet", 9), ("detectedPSfailure", 10), ("detectedCntlCardMissing", 11), ("lostDlcFdlLink", 12), ("exceededIbCrcThreshold", 13), ("lostDlcInbandLink", 14), ("lmiSpoofing", 15))

class TestType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("noTest", 1), ("selfTest", 2), ("netLoopback", 3), ("payloadLoopback", 4), ("dteLoopback", 5), ("loopUpRemote", 6), ("loopDownRemote", 7), ("sendQrwPattern", 8), ("send1in8Pattern", 9), ("send1in1Pattern", 10), ("send1in3Pattern", 11), ("send1in5Pattern", 12), ("send2in3Pattern", 14), ("send4in5Pattern", 15), ("send3in24Pattern", 16), ("sendAllOnePattern", 17), ("sendAllZeroPattern", 18), ("sendUser1Pattern", 19), ("sendUser2Pattern", 20), ("sendSmartJackSet", 21), ("sendSmartJackReset", 22), ("sendAPatternError", 23), ("dteNetLoopback", 24), ("reserved1", 25), ("reserved2", 26), ("reserved3", 27), ("reserved4", 28), ("reserved5", 29), ("reserved6", 30), ("lampTest", 31))

dlcUnitHwConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 1))
dlcUnitModelType = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("vxEncore", 1), ("dl100Encore", 2), ("dl1200", 3), ("dl2400", 4), ("dl600", 5), ("dl600Encore", 6), ("ensembleEncore", 7), ("soloEncore", 8), ("soloE1Encore", 9), ("ensembleE1Encore", 10), ("soloT1CSU", 11), ("ensembleT1CSU", 12), ("soloSelectT1Module", 13), ("soloSelectE1Module", 14), ("soloSelectT1", 15), ("soloSelectE1", 16), ("dl4200T1", 17), ("dl4200E1", 18), ("dl5440T1", 19), ("dl5440E1", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitModelType.setStatus('mandatory')
dlcUnitHwRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitHwRev.setStatus('mandatory')
dlcUnitHwOptions = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitHwOptions.setStatus('mandatory')
dlcUnitSwRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitSwRev.setStatus('mandatory')
dlcUnitDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitDataPorts.setStatus('mandatory')
dlcUnitRam = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitRam.setStatus('mandatory')
dlcUnitRom = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitRom.setStatus('mandatory')
dlcUnitFlash = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitFlash.setStatus('mandatory')
dlcUnitSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitSlotNum.setStatus('mandatory')
dlcUnitMibRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitMibRev.setStatus('mandatory')
dlcUnitFeatures = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("inband", 1), ("ipm32", 2), ("ipm96", 4), ("rmon2", 8), ("sla", 16), ("dni", 32), ("dte2", 64), ("reserved4", 128), ("reserved5", 256), ("reserved6", 512), ("reserved7", 1024), ("reserved8", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitFeatures.setStatus('mandatory')
dlcUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2))
dlcUnitId = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitId.setStatus('mandatory')
dlcUnitProtectMode = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitProtectMode.setStatus('mandatory')
dlcUnitYellowEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 3), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitYellowEnable.setStatus('mandatory')
dlcUnitNetPassFdl = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 4), PortId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitNetPassFdl.setStatus('mandatory')
dlcUnitMainClockSource = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 5), PortId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitMainClockSource.setStatus('mandatory')
dlcUnitAltClockSource = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 6), PortId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitAltClockSource.setStatus('mandatory')
dlcUnitExtClockRate = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(56, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitExtClockRate.setStatus('mandatory')
class LoopCodeType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("standard", 1), ("alternate", 2), ("v54", 3), ("reserved1", 4), ("reserved2", 5), ("reserved3", 6), ("disable", 7))

dlcUnitFullBandwidthLoopCode = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 8), LoopCodeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitFullBandwidthLoopCode.setStatus('mandatory')
dlcUnitFractionalLoopCode = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 9), LoopCodeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitFractionalLoopCode.setStatus('mandatory')
dlcUnitTestLength = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTestLength.setStatus('mandatory')
dlcUnitUserPattern1 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitUserPattern1.setStatus('mandatory')
dlcUnitUserPattern2 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitUserPattern2.setStatus('mandatory')
dlcUnitBlockAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 13), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitBlockAllAlarms.setStatus('mandatory')
dlcUnitDsx1TrapEnableTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 14), )
if mibBuilder.loadTexts: dlcUnitDsx1TrapEnableTable.setStatus('mandatory')
dlcDsx1TrapEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDsx1TrapPortId"))
if mibBuilder.loadTexts: dlcDsx1TrapEnableEntry.setStatus('mandatory')
dlcDsx1TrapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDsx1TrapPortId.setStatus('mandatory')
dlcDsx1BpvThresholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1BpvThresholdTrap.setStatus('mandatory')
dlcDsx1OofThresholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1OofThresholdTrap.setStatus('mandatory')
dlcDsx1CrcThresholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1CrcThresholdTrap.setStatus('mandatory')
dlcDsx1LossOfSignalTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 5), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1LossOfSignalTrapEnable.setStatus('mandatory')
dlcDsx1LossOfSyncTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 6), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1LossOfSyncTrapEnable.setStatus('mandatory')
dlcDsx1ReceiveAIStrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 7), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1ReceiveAIStrapEnable.setStatus('mandatory')
dlcDsx1ReceiveYellowAlarmTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 8), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1ReceiveYellowAlarmTrapEnable.setStatus('mandatory')
dlcDsx1ReceiveRemoteAlarmTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 9), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1ReceiveRemoteAlarmTrapEnable.setStatus('mandatory')
dlcDsx1PSfailureTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 10), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1PSfailureTrapEnable.setStatus('mandatory')
dlcDsx1CntlCrdMissingTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1CntlCrdMissingTrapEnable.setStatus('mandatory')
dlcDsx1FdlLinkTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1FdlLinkTrapEnable.setStatus('mandatory')
dlcDsx1IbCrcThresholdTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1IbCrcThresholdTrap.setStatus('mandatory')
dlcDsx1InbandLinkTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 14, 1, 14), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1InbandLinkTrapEnable.setStatus('mandatory')
dlcUnitDataDteLossTrapEnableTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 15), )
if mibBuilder.loadTexts: dlcUnitDataDteLossTrapEnableTable.setStatus('mandatory')
dlcDataDteLossTrapEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 15, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDataLossPortId"))
if mibBuilder.loadTexts: dlcDataDteLossTrapEnableEntry.setStatus('mandatory')
dlcDataLossPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 15, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDataLossPortId.setStatus('mandatory')
dlcDataLossEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 15, 1, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDataLossEnable.setStatus('mandatory')
dlcUnitExternalAlarmInputTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 16), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitExternalAlarmInputTrapEnable.setStatus('mandatory')
dlcUnitExternalAlarmInputContacts = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitExternalAlarmInputContacts.setStatus('mandatory')
dlcUnitExternalAlarmInputMessage = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitExternalAlarmInputMessage.setStatus('mandatory')
dlcUnitExternalAlarmOutputContacts = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitExternalAlarmOutputContacts.setStatus('mandatory')
dlcUnitExternalAlarmOutputTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitExternalAlarmOutputTrapEnable.setStatus('mandatory')
dlcUnitDsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 21), )
if mibBuilder.loadTexts: dlcUnitDsx1ConfigTable.setStatus('mandatory')
dlcDsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDsx1ConfigPortId"))
if mibBuilder.loadTexts: dlcDsx1ConfigEntry.setStatus('mandatory')
dlcDsx1ConfigPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDsx1ConfigPortId.setStatus('mandatory')
dlcDsx1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("esfFraming", 1), ("d4Framing", 2), ("crc4Enabled", 3), ("crc4Disabled", 4), ("unstructured", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1Framing.setStatus('mandatory')
dlcDsx1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8zsCode", 1), ("amiCode", 2), ("hdb3Code", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1LineCode.setStatus('mandatory')
dlcDsx1LineMatching = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("buildOut0", 1), ("buildOut7p5", 2), ("buildOut15", 3), ("length0", 4), ("length133", 5), ("length266", 6), ("length399", 7), ("length533", 8), ("ohms75", 9), ("ohms120", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1LineMatching.setStatus('mandatory')
dlcDsx1DacsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 5), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1DacsMode.setStatus('mandatory')
dlcDsx1UseDlcFdlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 6), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1UseDlcFdlProtocol.setStatus('mandatory')
dlcDsx1UseAnsiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 7), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1UseAnsiProtocol.setStatus('mandatory')
dlcDsx1Bit7Stuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 8), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1Bit7Stuffing.setStatus('mandatory')
dlcDsx1InBandBit = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDsx1InBandBit.setStatus('mandatory')
dlcUnitDataDteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 22), )
if mibBuilder.loadTexts: dlcUnitDataDteConfigTable.setStatus('mandatory')
dlcDataDteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDataConfigPortId"))
if mibBuilder.loadTexts: dlcDataDteConfigEntry.setStatus('mandatory')
dlcDataConfigPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDataConfigPortId.setStatus('mandatory')
dlcDataConfigEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("hdlc", 2), ("deferred", 3), ("forced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDataConfigEncoding.setStatus('mandatory')
dlcDataConfigLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("rtsLoss", 2), ("dtrLoss", 3), ("dataDependentLoss", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDataConfigLoss.setStatus('mandatory')
dlcDataConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dteMode", 1), ("dceMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDataConfigMode.setStatus('mandatory')
dlcDataConfigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v35", 1), ("rs449", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDataConfigFormat.setStatus('mandatory')
dlcDataConfigTransmitTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scte", 1), ("sct", 2), ("sctInverted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDataConfigTransmitTiming.setStatus('mandatory')
dlcUnitMuxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 23), )
if mibBuilder.loadTexts: dlcUnitMuxConfigTable.setStatus('mandatory')
dlcMuxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 23, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcMuxConfigBusId"), (0, "DL-NEW-DSX1-MIB", "dlcMuxConfigSlotNumber"))
if mibBuilder.loadTexts: dlcMuxConfigEntry.setStatus('mandatory')
dlcMuxConfigBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcMuxConfigBusId.setStatus('mandatory')
dlcMuxConfigSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcMuxConfigSlotNumber.setStatus('mandatory')
dlcMuxConfigPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 23, 1, 3), PortId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcMuxConfigPortId.setStatus('mandatory')
dlcUnitSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 24))
dlcSnmpUnitIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpUnitIpAddr.setStatus('mandatory')
dlcSnmpUnitNetMask = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpUnitNetMask.setStatus('mandatory')
dlcSnmpTrapAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapAddr1.setStatus('mandatory')
dlcSnmpTrapAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapAddr2.setStatus('mandatory')
dlcSnmpTrapAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapAddr3.setStatus('mandatory')
dlcSnmpTrapDlci1 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDlci1.setStatus('mandatory')
dlcSnmpTrapDlci2 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDlci2.setStatus('mandatory')
dlcSnmpTrapDlci3 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDlci3.setStatus('mandatory')
dlcSnmpTrapDirection1 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("commDirection", 1), ("netDirection", 2), ("dteDirection", 3), ("fdlDirection", 4), ("ethDirection", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDirection1.setStatus('mandatory')
dlcSnmpTrapDirection2 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("commDirection", 1), ("netDirection", 2), ("dteDirection", 3), ("fdlDirection", 4), ("ethDirection", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDirection2.setStatus('mandatory')
dlcSnmpTrapDirection3 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("commDirection", 1), ("netDirection", 2), ("dteDirection", 3), ("fdlDirection", 4), ("ethDirection", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDirection3.setStatus('mandatory')
dlcSnmpTrapDirection = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commDirection", 1), ("ibcDirection", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSnmpTrapDirection.setStatus('mandatory')
dlcSnmpEthernetConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 13))
dlcEthernetIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 13, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcEthernetIpAddr.setStatus('mandatory')
dlcEthernetIpMask = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcEthernetIpMask.setStatus('mandatory')
dlcEthernetGatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcEthernetGatewayAddr.setStatus('mandatory')
dlcEthernetMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 24, 13, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcEthernetMacAddr.setStatus('mandatory')
dlcUnitConfigTime = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 25))
dlcUnitTimeYear = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1992, 2037))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTimeYear.setStatus('mandatory')
dlcUnitTimeMonth = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTimeMonth.setStatus('mandatory')
dlcUnitTimeDay = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTimeDay.setStatus('mandatory')
dlcUnitTimeHour = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTimeHour.setStatus('mandatory')
dlcUnitTimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 25, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTimeMinute.setStatus('mandatory')
dlcUnitTimeSecond = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTimeSecond.setStatus('mandatory')
dlcUnitSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitSerialNum.setStatus('mandatory')
dlcUnitModemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 27))
dlcModemPhoneNum1 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 27, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcModemPhoneNum1.setStatus('mandatory')
dlcModemPhoneNum2 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 27, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcModemPhoneNum2.setStatus('mandatory')
dlcModemInitString1 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 27, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcModemInitString1.setStatus('mandatory')
dlcModemInitString2 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 27, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcModemInitString2.setStatus('mandatory')
dlcUnitInbandMode = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noInband", 1), ("frameRelay", 2), ("ciscoHdlc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitInbandMode.setStatus('mandatory')
class UnitStatusItem(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512))
    namedValues = NamedValues(("normal", 1), ("noClock", 2), ("testInProgress", 4), ("sendKeepAlive", 8), ("sendYellowAlarm", 16), ("reserved1", 32), ("reserved2", 64), ("reserved3", 128), ("reserved4", 256), ("reserved5", 512))

class PortStatusItem(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("normal", 1), ("lossOfSignal", 2), ("lossOfSync", 3), ("yellowAlarmDetected", 4), ("blueAlarmDetected", 5), ("setCodeReceived", 6), ("resetCodeReceived", 7), ("excessiveErrorRate", 8), ("localTest", 9), ("eBitReceived", 10), ("reserved1", 11), ("reserved2", 12), ("reserved3", 13), ("reserved4", 14))

dlcUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 3))
dlcUnitCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 3, 1), UnitStatusItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitCurrentStatus.setStatus('mandatory')
dlcUnitErrorFreeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitErrorFreeSeconds.setStatus('mandatory')
dlcUnitLastSelfTestResult = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitLastSelfTestResult.setStatus('mandatory')
dlcUnitPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 3, 4), )
if mibBuilder.loadTexts: dlcUnitPortStatusTable.setStatus('mandatory')
dlcPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 3, 4, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcPortStatusId"), (0, "DL-NEW-DSX1-MIB", "dlcPortStatus"))
if mibBuilder.loadTexts: dlcPortStatusEntry.setStatus('mandatory')
dlcPortStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 3, 4, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcPortStatusId.setStatus('mandatory')
dlcPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 3, 4, 1, 2), PortStatusItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcPortStatus.setStatus('mandatory')
dlcPortStatusNetRxBwUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 3, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcPortStatusNetRxBwUtilization.setStatus('mandatory')
dlcPortStatusNetTxBwUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 3, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcPortStatusNetTxBwUtilization.setStatus('mandatory')
dlcUnitAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 3, 5), )
if mibBuilder.loadTexts: dlcUnitAlarmTable.setStatus('mandatory')
dlcAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 3, 5, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcAlarmPort"), (0, "DL-NEW-DSX1-MIB", "dlcAlarmType"))
if mibBuilder.loadTexts: dlcAlarmEntry.setStatus('mandatory')
dlcAlarmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 3, 5, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcAlarmPort.setStatus('mandatory')
dlcAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 3, 5, 1, 2), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcAlarmType.setStatus('mandatory')
dlcUnitErrorSecondsRatio = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitErrorSecondsRatio.setStatus('mandatory')
dlcUnitSeverelyErroredSecondsRatio = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitSeverelyErroredSecondsRatio.setStatus('mandatory')
dlcUnitBackgroundBlockErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitBackgroundBlockErrorRatio.setStatus('mandatory')
dlcUnitUserArchive = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 4))
dlcUnitUserArchiveValidTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 4, 1), )
if mibBuilder.loadTexts: dlcUnitUserArchiveValidTable.setStatus('mandatory')
dlcUserArchiveValidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 4, 1, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcValidPortId"))
if mibBuilder.loadTexts: dlcUserArchiveValidEntry.setStatus('mandatory')
dlcValidPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 1, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcValidPortId.setStatus('mandatory')
dlcValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcValidIntervals.setStatus('mandatory')
dlcUnitUserLifetimeTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 4, 2), )
if mibBuilder.loadTexts: dlcUnitUserLifetimeTable.setStatus('mandatory')
dlcUserLifetimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcLifetimePortId"))
if mibBuilder.loadTexts: dlcUserLifetimeEntry.setStatus('mandatory')
dlcLifetimePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLifetimePortId.setStatus('mandatory')
dlcLifetimeES = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLifetimeES.setStatus('mandatory')
dlcLifetimeUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLifetimeUAS.setStatus('mandatory')
dlcLifetimeCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLifetimeCrcErrors.setStatus('mandatory')
dlcLifetimeBpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLifetimeBpvErrors.setStatus('mandatory')
dlcLifetimeOofErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLifetimeOofErrors.setStatus('mandatory')
dlcLifetimeIbCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 2, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLifetimeIbCrcErrors.setStatus('mandatory')
dlcUnitUserCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 4, 3), )
if mibBuilder.loadTexts: dlcUnitUserCurrentTable.setStatus('mandatory')
dlcUserCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcCurrentPortId"))
if mibBuilder.loadTexts: dlcUserCurrentEntry.setStatus('mandatory')
dlcCurrentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentPortId.setStatus('mandatory')
dlcCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentES.setStatus('mandatory')
dlcCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentUAS.setStatus('mandatory')
dlcCurrentCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentCrcErrors.setStatus('mandatory')
dlcCurrentBpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentBpvErrors.setStatus('mandatory')
dlcCurrentOofErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentOofErrors.setStatus('mandatory')
dlcCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentTimeElapsed.setStatus('mandatory')
dlcCurrentIbCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcCurrentIbCrcErrors.setStatus('mandatory')
dlcUnitUserArchiveTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 4, 4), )
if mibBuilder.loadTexts: dlcUnitUserArchiveTable.setStatus('mandatory')
dlcUserArchiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcArchivePortId"), (0, "DL-NEW-DSX1-MIB", "dlcArchiveInterval"))
if mibBuilder.loadTexts: dlcUserArchiveEntry.setStatus('mandatory')
dlcArchivePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchivePortId.setStatus('mandatory')
dlcArchiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveInterval.setStatus('mandatory')
dlcArchiveES = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveES.setStatus('mandatory')
dlcArchiveUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveUAS.setStatus('mandatory')
dlcArchiveCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveCrcErrors.setStatus('mandatory')
dlcArchiveBpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveBpvErrors.setStatus('mandatory')
dlcArchiveOofErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveOofErrors.setStatus('mandatory')
dlcArchiveIbCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveIbCrcErrors.setStatus('mandatory')
dlcArchiveNetRxBwUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveNetRxBwUtilization.setStatus('mandatory')
dlcArchiveNetRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveNetRxPackets.setStatus('mandatory')
dlcArchiveNetTxBwUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveNetTxBwUtilization.setStatus('mandatory')
dlcArchiveNetTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcArchiveNetTxPackets.setStatus('mandatory')
dlcUnitTest = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 5))
dlcUnitTestTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 5, 1), )
if mibBuilder.loadTexts: dlcUnitTestTable.setStatus('mandatory')
dlcUnitTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcUnitTestPortId"))
if mibBuilder.loadTexts: dlcUnitTestEntry.setStatus('mandatory')
dlcUnitTestPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 1), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitTestPortId.setStatus('mandatory')
dlcUnitTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 2), TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTestType.setStatus('mandatory')
dlcUnitTestPatternStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("search", 1), ("locked", 2), ("overflow", 3), ("off", 4), ("lockedAfterLoss", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitTestPatternStatus.setStatus('mandatory')
dlcUnitTestPatternErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitTestPatternErrors.setStatus('mandatory')
dlcLinkTestSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLinkTestSentPackets.setStatus('mandatory')
dlcLinkTestReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLinkTestReceivedPackets.setStatus('mandatory')
dlcLinkTestErroredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLinkTestErroredPackets.setStatus('mandatory')
dlcLinkTestMissingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLinkTestMissingPackets.setStatus('mandatory')
dlcLinkTestAverageRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLinkTestAverageRoundTrip.setStatus('mandatory')
dlcLinkTestMaximumRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcLinkTestMaximumRoundTrip.setStatus('mandatory')
dlcUnitDialOutTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitDialOutTimeInterval.setStatus('mandatory')
class FramedUnframed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("framed", 1), ("unframed", 2))

dlcAlarmSignal = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 30), FramedUnframed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcAlarmSignal.setStatus('mandatory')
dlcUnitIdleCode = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitIdleCode.setStatus('mandatory')
class RemoteCommunicationsMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("digital-link", 2), ("att-TR54016", 3), ("ansi-T1-403", 4))

dlcRemoteCommunicationsMode = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 32), RemoteCommunicationsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcRemoteCommunicationsMode.setStatus('mandatory')
dlcUnitConfigLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 33))
dlcLinkTestState = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("running", 3), ("idle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestState.setStatus('mandatory')
dlcLinkTestAddress = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestAddress.setStatus('mandatory')
dlcLinkTestDlci = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestDlci.setStatus('mandatory')
dlcLinkTestPort = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("net", 2), ("dte", 3), ("eth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestPort.setStatus('mandatory')
dlcLinkTestLength = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestLength.setStatus('mandatory')
dlcLinkTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestInterval.setStatus('mandatory')
dlcLinkTestPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestPacketSize.setStatus('mandatory')
dlcLinkTestPattern = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 33, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ping511", 1), ("ping2047", 2), ("ping1-0", 3), ("ping-all-1", 4), ("ping-all-0", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkTestPattern.setStatus('mandatory')
dlcUnitInbandConfig = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 34), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitInbandConfig.setStatus('mandatory')
dlcUnitInbandTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frameRelay", 1), ("ciscoHdlc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUnitInbandTrafficType.setStatus('mandatory')
dlcUnitPerformanceMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 36), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitPerformanceMonitoring.setStatus('mandatory')
dlcUnitPvcAutoDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 37), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcUnitPvcAutoDiscovery.setStatus('mandatory')
dlcUnitDelayMonitorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 38))
dlcDelayMonitorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1), )
if mibBuilder.loadTexts: dlcDelayMonitorConfigTable.setStatus('mandatory')
dlcDelayMonitorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDelayMonitorConfigIndex"))
if mibBuilder.loadTexts: dlcDelayMonitorConfigEntry.setStatus('mandatory')
dlcDelayMonitorConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorConfigIndex.setStatus('mandatory')
dlcDelayMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("running", 3), ("idle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorState.setStatus('mandatory')
dlcDelayMonitorTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorTargetAddress.setStatus('mandatory')
dlcDelayMonitorDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorDlci.setStatus('mandatory')
dlcDelayMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("net", 2), ("dte", 3), ("eth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorPort.setStatus('mandatory')
dlcDelayMonitorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorInterval.setStatus('mandatory')
dlcDelayMonitorPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorPacketSize.setStatus('mandatory')
dlcDelayMonitorPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 38, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ping511", 1), ("ping2047", 2), ("ping1-0", 3), ("ping-all-1", 4), ("ping-all-0", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDelayMonitorPattern.setStatus('mandatory')
dlcUnitDelayMonitorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 6))
dlcDelayMonitorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 6, 1), )
if mibBuilder.loadTexts: dlcDelayMonitorStatusTable.setStatus('mandatory')
dlcDelayMonitorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDelayMonitorStatusIndex"))
if mibBuilder.loadTexts: dlcDelayMonitorStatusEntry.setStatus('mandatory')
dlcDelayMonitorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorStatusIndex.setStatus('mandatory')
dlcDelayMonitorSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorSentPackets.setStatus('mandatory')
dlcDelayMonitorReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorReceivedPackets.setStatus('mandatory')
dlcDelayMonitorErroredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorErroredPackets.setStatus('mandatory')
dlcDelayMonitorMissingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorMissingPackets.setStatus('mandatory')
dlcDelayMonitorAverageRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorAverageRoundTrip.setStatus('mandatory')
dlcDelayMonitorMaximumRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 6, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDelayMonitorMaximumRoundTrip.setStatus('mandatory')
dlcDLCItable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 2, 39), )
if mibBuilder.loadTexts: dlcDLCItable.setStatus('mandatory')
dlcDLCItableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 2, 39, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcDLCInumber"), (0, "DL-NEW-DSX1-MIB", "dlcDTECIR"), (0, "DL-NEW-DSX1-MIB", "dlcNETCIR"))
if mibBuilder.loadTexts: dlcDLCItableEntry.setStatus('mandatory')
dlcDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDLCInumber.setStatus('mandatory')
dlcDTECIR = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 39, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDTECIR.setStatus('mandatory')
dlcNETCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 39, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcNETCIR.setStatus('mandatory')
dlcDLCIstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 2, 39, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDLCIstatus.setStatus('mandatory')
dlcUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 300, 200, 7), )
if mibBuilder.loadTexts: dlcUtilizationTable.setStatus('mandatory')
dlcUtilTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 200, 7, 1), ).setIndexNames((0, "DL-NEW-DSX1-MIB", "dlcUtilDLCINumber"))
if mibBuilder.loadTexts: dlcUtilTableEntry.setStatus('mandatory')
dlcUtilDLCINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtilDLCINumber.setStatus('mandatory')
dlcUtilEncodedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtilEncodedValue.setStatus('mandatory')
dlcUtilTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtilTimestamp.setStatus('mandatory')
dlcUtilLessThan20 = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtilLessThan20.setStatus('mandatory')
dlcUtil20_40 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 5), Counter32()).setLabel("dlcUtil20-40").setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtil20_40.setStatus('mandatory')
dlcUtil40_60 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 6), Counter32()).setLabel("dlcUtil40-60").setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtil40_60.setStatus('mandatory')
dlcUtil60_80 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 7), Counter32()).setLabel("dlcUtil60-80").setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtil60_80.setStatus('mandatory')
dlcUtil80_100 = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 8), Counter32()).setLabel("dlcUtil80-100").setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtil80_100.setStatus('mandatory')
dlcUtilMoreThan100 = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 200, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcUtilMoreThan100.setStatus('mandatory')
dlcLMIConditioningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 41))
dlcLMIConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1))
dlcLMIEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLMIEnable.setStatus('mandatory')
dlcMaintenanceDLCI = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcMaintenanceDLCI.setStatus('mandatory')
dlcManagementDLCI = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcManagementDLCI.setStatus('mandatory')
dlcManagementDLCIEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcManagementDLCIEnable.setStatus('mandatory')
dlcSpoofingProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frf1-0", 1), ("annex-d", 2), ("annex-a", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcSpoofingProtocolType.setStatus('mandatory')
dlcDTESpoofingEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDTESpoofingEnable.setStatus('mandatory')
dlcNetSpoofingEnable = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcNetSpoofingEnable.setStatus('mandatory')
dlcLinkIntegrityVerificationPollingTimer = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLinkIntegrityVerificationPollingTimer.setStatus('mandatory')
dlcFullStatusPollingCounter = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcFullStatusPollingCounter.setStatus('mandatory')
dlcLMIErrorEvent = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLMIErrorEvent.setStatus('mandatory')
dlcLMIErrorMonitorEvent = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLMIErrorMonitorEvent.setStatus('mandatory')
dlcLMIErrorFreeEvent = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLMIErrorFreeEvent.setStatus('mandatory')
dlcLMIErrorFreeMonitorEvent = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLMIErrorFreeMonitorEvent.setStatus('mandatory')
dlcDTEResponseTimer = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcDTEResponseTimer.setStatus('mandatory')
dlcLMIUnitLocation = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpe", 1), ("co", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcLMIUnitLocation.setStatus('mandatory')
dlcLMIStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 2))
dlcSpoofingStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("dte-spoofing", 2), ("net-spoofing", 3), ("dte-and-net-spoofing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcSpoofingStatus.setStatus('mandatory')
dlcDTEInterfaceLMIStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("lmi-up", 2), ("lmi-down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcDTEInterfaceLMIStatus.setStatus('mandatory')
dlcNetInterfaceLMIStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 41, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("lmi-up", 2), ("lmi-down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlcNetInterfaceLMIStatus.setStatus('mandatory')
dlcInbandDtePort = MibScalar((1, 3, 6, 1, 4, 1, 300, 200, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data1", 1), ("data2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlcInbandDtePort.setStatus('mandatory')
startTest = NotificationType((1, 3, 6, 1, 4, 1, 300, 200) + (0,1)).setObjects(("DL-NEW-DSX1-MIB", "dlcUnitTestPortId"), ("DL-NEW-DSX1-MIB", "dlcUnitTestType"))
endTest = NotificationType((1, 3, 6, 1, 4, 1, 300, 200) + (0,2)).setObjects(("DL-NEW-DSX1-MIB", "dlcUnitTestPortId"), ("DL-NEW-DSX1-MIB", "dlcUnitTestType"))
startAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 200) + (0,3)).setObjects(("DL-NEW-DSX1-MIB", "dlcAlarmPort"), ("DL-NEW-DSX1-MIB", "dlcAlarmType"))
endAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 200) + (0,4)).setObjects(("DL-NEW-DSX1-MIB", "dlcAlarmPort"), ("DL-NEW-DSX1-MIB", "dlcAlarmType"))
manualConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 300, 200) + (0,5))
mibBuilder.exportSymbols("DL-NEW-DSX1-MIB", dlcArchiveNetTxBwUtilization=dlcArchiveNetTxBwUtilization, dlcLMIStatus=dlcLMIStatus, dlcDelayMonitorMaximumRoundTrip=dlcDelayMonitorMaximumRoundTrip, dlcEthernetGatewayAddr=dlcEthernetGatewayAddr, dlcUnitLastSelfTestResult=dlcUnitLastSelfTestResult, dlcUnitTimeYear=dlcUnitTimeYear, dlcDelayMonitorConfigIndex=dlcDelayMonitorConfigIndex, dlcUtil80_100=dlcUtil80_100, dlcDLCItableEntry=dlcDLCItableEntry, dlcLinkTestMissingPackets=dlcLinkTestMissingPackets, dlcUnitFractionalLoopCode=dlcUnitFractionalLoopCode, dlcUnitDelayMonitorConfig=dlcUnitDelayMonitorConfig, dlcUnitIdleCode=dlcUnitIdleCode, dlcUtil20_40=dlcUtil20_40, dlcUnitDataPorts=dlcUnitDataPorts, dlcDsx1FdlLinkTrapEnable=dlcDsx1FdlLinkTrapEnable, dlcArchiveES=dlcArchiveES, dlcUnitTestTable=dlcUnitTestTable, dlcUnitTestPortId=dlcUnitTestPortId, dlcUnitConfigLinkTest=dlcUnitConfigLinkTest, dlcDelayMonitorErroredPackets=dlcDelayMonitorErroredPackets, dlcDataConfigFormat=dlcDataConfigFormat, dlcDsx1InBandBit=dlcDsx1InBandBit, dlcUnitAlarmTable=dlcUnitAlarmTable, dlcArchivePortId=dlcArchivePortId, dlcAlarmEntry=dlcAlarmEntry, dlcDsx1OofThresholdTrap=dlcDsx1OofThresholdTrap, manualConfigChange=manualConfigChange, dlcLifetimeES=dlcLifetimeES, dlcUnitInbandMode=dlcUnitInbandMode, dlcUnitConfigTime=dlcUnitConfigTime, dlcLinkTestInterval=dlcLinkTestInterval, dlcUtilTimestamp=dlcUtilTimestamp, dlcDsx1LineCode=dlcDsx1LineCode, dlcAlarmType=dlcAlarmType, dlcCurrentES=dlcCurrentES, dlcAlarmSignal=dlcAlarmSignal, dlcDsx1TrapEnableEntry=dlcDsx1TrapEnableEntry, dlcUtilEncodedValue=dlcUtilEncodedValue, dlcUnitDialOutTimeInterval=dlcUnitDialOutTimeInterval, dlcArchiveBpvErrors=dlcArchiveBpvErrors, dlcLMIConfiguration=dlcLMIConfiguration, dlcDataDteLossTrapEnableEntry=dlcDataDteLossTrapEnableEntry, dlcLinkTestPacketSize=dlcLinkTestPacketSize, dlcUnitPerformanceMonitoring=dlcUnitPerformanceMonitoring, dlcUnitHwOptions=dlcUnitHwOptions, dlcPortStatusNetRxBwUtilization=dlcPortStatusNetRxBwUtilization, dlcUnitUserPattern2=dlcUnitUserPattern2, dlcArchiveCrcErrors=dlcArchiveCrcErrors, dlcUnitInbandTrafficType=dlcUnitInbandTrafficType, dlcDsx1UseDlcFdlProtocol=dlcDsx1UseDlcFdlProtocol, dlcUnitPortStatusTable=dlcUnitPortStatusTable, Boolean=Boolean, dlcUnitId=dlcUnitId, UnitStatusItem=UnitStatusItem, dlcUnitRom=dlcUnitRom, dlcCurrentPortId=dlcCurrentPortId, dlcDataConfigPortId=dlcDataConfigPortId, dlcUnitUserArchive=dlcUnitUserArchive, dlcEthernetIpMask=dlcEthernetIpMask, MacAddress=MacAddress, dlcUnitInbandConfig=dlcUnitInbandConfig, dlcDTESpoofingEnable=dlcDTESpoofingEnable, dlcUnitNetPassFdl=dlcUnitNetPassFdl, dlcDsx1CntlCrdMissingTrapEnable=dlcDsx1CntlCrdMissingTrapEnable, dlcSnmpEthernetConfiguration=dlcSnmpEthernetConfiguration, dlcLMIEnable=dlcLMIEnable, dlcDelayMonitorSentPackets=dlcDelayMonitorSentPackets, dlcSnmpTrapDirection2=dlcSnmpTrapDirection2, dlcDelayMonitorInterval=dlcDelayMonitorInterval, dlcUnitErrorSecondsRatio=dlcUnitErrorSecondsRatio, dlcUnitBlockAllAlarms=dlcUnitBlockAllAlarms, dlcUnitSeverelyErroredSecondsRatio=dlcUnitSeverelyErroredSecondsRatio, dlcNETCIR=dlcNETCIR, dlcDsx1IbCrcThresholdTrap=dlcDsx1IbCrcThresholdTrap, dlcLifetimePortId=dlcLifetimePortId, dlcUnitSlotNum=dlcUnitSlotNum, dlcUnitUserArchiveTable=dlcUnitUserArchiveTable, dlcDTEInterfaceLMIStatus=dlcDTEInterfaceLMIStatus, dlcSnmpUnitNetMask=dlcSnmpUnitNetMask, dlcUnitSnmpConfig=dlcUnitSnmpConfig, dlcSnmpTrapDlci1=dlcSnmpTrapDlci1, dlcUnitExternalAlarmOutputTrapEnable=dlcUnitExternalAlarmOutputTrapEnable, endTest=endTest, dlcUnitDsx1TrapEnableTable=dlcUnitDsx1TrapEnableTable, LoopCodeType=LoopCodeType, dlcUnitTestType=dlcUnitTestType, dlcUnitDsx1ConfigTable=dlcUnitDsx1ConfigTable, dlcSpoofingStatus=dlcSpoofingStatus, startAlarm=startAlarm, dlcSnmpTrapAddr3=dlcSnmpTrapAddr3, dlcDataConfigEncoding=dlcDataConfigEncoding, dlcDelayMonitorState=dlcDelayMonitorState, dlcMuxConfigBusId=dlcMuxConfigBusId, dlcDLCIstatus=dlcDLCIstatus, dlcLinkTestAddress=dlcLinkTestAddress, dlcUnitAltClockSource=dlcUnitAltClockSource, FramedUnframed=FramedUnframed, dlcDsx1PSfailureTrapEnable=dlcDsx1PSfailureTrapEnable, dlcUserLifetimeEntry=dlcUserLifetimeEntry, dlcCurrentTimeElapsed=dlcCurrentTimeElapsed, dlcUnitSerialNum=dlcUnitSerialNum, dlcDelayMonitorDlci=dlcDelayMonitorDlci, dlcUnitCurrentStatus=dlcUnitCurrentStatus, dlcDsx1Bit7Stuffing=dlcDsx1Bit7Stuffing, dlcUnitFlash=dlcUnitFlash, dlcDsx1ConfigEntry=dlcDsx1ConfigEntry, dlcDelayMonitorReceivedPackets=dlcDelayMonitorReceivedPackets, dlcUnitUserPattern1=dlcUnitUserPattern1, dlcPortStatus=dlcPortStatus, dlcUnitUserArchiveValidTable=dlcUnitUserArchiveValidTable, dlcLinkTestPattern=dlcLinkTestPattern, dlcLinkTestSentPackets=dlcLinkTestSentPackets, dlcUtilDLCINumber=dlcUtilDLCINumber, dlcUnitHwConfig=dlcUnitHwConfig, dlcSnmpTrapDlci2=dlcSnmpTrapDlci2, dlcPortStatusEntry=dlcPortStatusEntry, dlcDelayMonitorPacketSize=dlcDelayMonitorPacketSize, dlcInbandDtePort=dlcInbandDtePort, dlcLifetimeOofErrors=dlcLifetimeOofErrors, dlcArchiveNetRxPackets=dlcArchiveNetRxPackets, dlcModemInitString1=dlcModemInitString1, dlcUtilTableEntry=dlcUtilTableEntry, dlcUnitStatus=dlcUnitStatus, dlcUnitMainClockSource=dlcUnitMainClockSource, dlcDsx1ReceiveRemoteAlarmTrapEnable=dlcDsx1ReceiveRemoteAlarmTrapEnable, dlcSnmpTrapDlci3=dlcSnmpTrapDlci3, dlcLMIErrorFreeEvent=dlcLMIErrorFreeEvent, dlcDLCItable=dlcDLCItable, dlcCurrentIbCrcErrors=dlcCurrentIbCrcErrors, dlcUnitFullBandwidthLoopCode=dlcUnitFullBandwidthLoopCode, dlcDataConfigMode=dlcDataConfigMode, dlcUnitRam=dlcUnitRam, dlcDsx1LineMatching=dlcDsx1LineMatching, dlcLifetimeUAS=dlcLifetimeUAS, dlcUserArchiveEntry=dlcUserArchiveEntry, dlcNetInterfaceLMIStatus=dlcNetInterfaceLMIStatus, dlcUnitUserLifetimeTable=dlcUnitUserLifetimeTable, dlcUnitFeatures=dlcUnitFeatures, dlcEthernetIpAddr=dlcEthernetIpAddr, dlcCurrentCrcErrors=dlcCurrentCrcErrors, dlcLinkTestMaximumRoundTrip=dlcLinkTestMaximumRoundTrip, dlcUtil40_60=dlcUtil40_60, dlcModemPhoneNum1=dlcModemPhoneNum1, dlcUtilMoreThan100=dlcUtilMoreThan100, dlcUnitTest=dlcUnitTest, dlcLinkIntegrityVerificationPollingTimer=dlcLinkIntegrityVerificationPollingTimer, dlcDTEResponseTimer=dlcDTEResponseTimer, dlcUtilizationTable=dlcUtilizationTable, dlcUnitDataDteConfigTable=dlcUnitDataDteConfigTable, dlcCurrentBpvErrors=dlcCurrentBpvErrors, dlcDelayMonitorTargetAddress=dlcDelayMonitorTargetAddress, dlcUtilLessThan20=dlcUtilLessThan20, dlcArchiveNetTxPackets=dlcArchiveNetTxPackets, dlcDLCInumber=dlcDLCInumber, dlcLifetimeCrcErrors=dlcLifetimeCrcErrors, dlcLMIConditioningGroup=dlcLMIConditioningGroup, dlcArchiveInterval=dlcArchiveInterval, dlcUnitTimeMonth=dlcUnitTimeMonth, dlcUnitSwRev=dlcUnitSwRev, dlcUnitExternalAlarmInputTrapEnable=dlcUnitExternalAlarmInputTrapEnable, dlcDelayMonitorAverageRoundTrip=dlcDelayMonitorAverageRoundTrip, dlcLMIErrorMonitorEvent=dlcLMIErrorMonitorEvent, dlcLinkTestPort=dlcLinkTestPort, dlcDsx1DacsMode=dlcDsx1DacsMode, endAlarm=endAlarm, dlcUnitConfig=dlcUnitConfig, dlcLifetimeIbCrcErrors=dlcLifetimeIbCrcErrors, dlcCurrentOofErrors=dlcCurrentOofErrors, dlcUnitProtectMode=dlcUnitProtectMode, dlcUnitBackgroundBlockErrorRatio=dlcUnitBackgroundBlockErrorRatio, dlcDelayMonitorConfigEntry=dlcDelayMonitorConfigEntry, dlcFullStatusPollingCounter=dlcFullStatusPollingCounter, dlcDelayMonitorStatusTable=dlcDelayMonitorStatusTable, dlcUnitDelayMonitorStatus=dlcUnitDelayMonitorStatus, dlcMuxConfigSlotNumber=dlcMuxConfigSlotNumber, dlcLinkTestReceivedPackets=dlcLinkTestReceivedPackets, dlcUnitHwRev=dlcUnitHwRev, dlcUnitTestLength=dlcUnitTestLength, dlcUnitExternalAlarmInputMessage=dlcUnitExternalAlarmInputMessage, PortId=PortId, dlcSnmpTrapAddr2=dlcSnmpTrapAddr2, dlcLinkTestDlci=dlcLinkTestDlci, dlcUnitErrorFreeSeconds=dlcUnitErrorFreeSeconds, dlcDsx1ReceiveYellowAlarmTrapEnable=dlcDsx1ReceiveYellowAlarmTrapEnable, dlcLMIErrorEvent=dlcLMIErrorEvent, dlcSpoofingProtocolType=dlcSpoofingProtocolType, dlcUserArchiveValidEntry=dlcUserArchiveValidEntry, dlcLMIErrorFreeMonitorEvent=dlcLMIErrorFreeMonitorEvent, dlcUnitDataDteLossTrapEnableTable=dlcUnitDataDteLossTrapEnableTable, dlcUnitTimeDay=dlcUnitTimeDay, dlcDelayMonitorMissingPackets=dlcDelayMonitorMissingPackets, dlcArchiveOofErrors=dlcArchiveOofErrors, dlcDataLossPortId=dlcDataLossPortId, dlcMaintenanceDLCI=dlcMaintenanceDLCI, dlcDsx1Framing=dlcDsx1Framing, dlcSnmpTrapDirection=dlcSnmpTrapDirection, dlcDelayMonitorPattern=dlcDelayMonitorPattern, dlcLinkTestErroredPackets=dlcLinkTestErroredPackets, dlcModemInitString2=dlcModemInitString2, dlcLinkTestState=dlcLinkTestState, dlcEthernetMacAddr=dlcEthernetMacAddr, dlcMuxConfigEntry=dlcMuxConfigEntry, digital_link=digital_link, dlcDataConfigTransmitTiming=dlcDataConfigTransmitTiming, dlcMuxConfigPortId=dlcMuxConfigPortId, dlcUnitExternalAlarmOutputContacts=dlcUnitExternalAlarmOutputContacts, dlcSnmpTrapDirection1=dlcSnmpTrapDirection1, dlcUnitTimeHour=dlcUnitTimeHour, dlcCurrentUAS=dlcCurrentUAS, dlcValidPortId=dlcValidPortId, dlcUnitTimeMinute=dlcUnitTimeMinute, dlcUnitTestEntry=dlcUnitTestEntry, dlcArchiveNetRxBwUtilization=dlcArchiveNetRxBwUtilization, dlcDsx1BpvThresholdTrap=dlcDsx1BpvThresholdTrap, dlcManagementDLCI=dlcManagementDLCI, dlcArchiveUAS=dlcArchiveUAS, startTest=startTest, dlcDsx1InbandLinkTrapEnable=dlcDsx1InbandLinkTrapEnable, dlcUnitExtClockRate=dlcUnitExtClockRate, dlcDataDteConfigEntry=dlcDataDteConfigEntry, dlcRemoteCommunicationsMode=dlcRemoteCommunicationsMode, dlcUnitMuxConfigTable=dlcUnitMuxConfigTable, dlcManagementDLCIEnable=dlcManagementDLCIEnable, dlcDsx1CrcThresholdTrap=dlcDsx1CrcThresholdTrap, dlcUnitMibRev=dlcUnitMibRev, dlcPortStatusNetTxBwUtilization=dlcPortStatusNetTxBwUtilization, dlcUnitPvcAutoDiscovery=dlcUnitPvcAutoDiscovery, dlcDelayMonitorStatusEntry=dlcDelayMonitorStatusEntry, dlcLMIUnitLocation=dlcLMIUnitLocation, dlcDsx1ReceiveAIStrapEnable=dlcDsx1ReceiveAIStrapEnable, dlcDsx1UseAnsiProtocol=dlcDsx1UseAnsiProtocol, dlcValidIntervals=dlcValidIntervals, dlcUnitUserCurrentTable=dlcUnitUserCurrentTable, dlcSnmpUnitIpAddr=dlcSnmpUnitIpAddr, dlcUnitTestPatternErrors=dlcUnitTestPatternErrors, dlcSnmpTrapDirection3=dlcSnmpTrapDirection3, dlcLinkTestAverageRoundTrip=dlcLinkTestAverageRoundTrip, dlcUserCurrentEntry=dlcUserCurrentEntry, RemoteCommunicationsMode=RemoteCommunicationsMode, PortStatusItem=PortStatusItem, dlcPortStatusId=dlcPortStatusId, dlcDsx1ConfigPortId=dlcDsx1ConfigPortId, dlcUtil60_80=dlcUtil60_80, dlcUnitModelType=dlcUnitModelType, dlcUnitYellowEnable=dlcUnitYellowEnable, dlcDsx1LossOfSignalTrapEnable=dlcDsx1LossOfSignalTrapEnable, dlcDelayMonitorPort=dlcDelayMonitorPort, dlcNetSpoofingEnable=dlcNetSpoofingEnable, dlcUnitTestPatternStatus=dlcUnitTestPatternStatus, dlcModemPhoneNum2=dlcModemPhoneNum2, dlcDsx1LossOfSyncTrapEnable=dlcDsx1LossOfSyncTrapEnable, dlcArchiveIbCrcErrors=dlcArchiveIbCrcErrors, dlcDataConfigLoss=dlcDataConfigLoss)
mibBuilder.exportSymbols("DL-NEW-DSX1-MIB", dlcSnmpTrapAddr1=dlcSnmpTrapAddr1, dlcAlarmPort=dlcAlarmPort, dl_new_t1=dl_new_t1, dlcDTECIR=dlcDTECIR, dlcUnitModemConfig=dlcUnitModemConfig, dlcDelayMonitorConfigTable=dlcDelayMonitorConfigTable, dlcLifetimeBpvErrors=dlcLifetimeBpvErrors, AlarmType=AlarmType, dlcDelayMonitorStatusIndex=dlcDelayMonitorStatusIndex, dlcLinkTestLength=dlcLinkTestLength, dlcDsx1TrapPortId=dlcDsx1TrapPortId, TestType=TestType, dlcDataLossEnable=dlcDataLossEnable, dlcUnitTimeSecond=dlcUnitTimeSecond, dlcUnitExternalAlarmInputContacts=dlcUnitExternalAlarmInputContacts)
