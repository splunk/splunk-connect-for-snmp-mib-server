#
# PySNMP MIB module HH3C-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RADIUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
radiusAccServerIndex, radiusAccClientServerPortNumber, radiusAccServerAddress = mibBuilder.importSymbols("RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex", "radiusAccClientServerPortNumber", "radiusAccServerAddress")
radiusAuthServerIndex, radiusAuthServerAddress, radiusAuthClientServerPortNumber = mibBuilder.importSymbols("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex", "radiusAuthServerAddress", "radiusAuthClientServerPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, NotificationType, Integer32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, IpAddress, ModuleIdentity, Counter64, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "NotificationType", "Integer32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "IpAddress", "ModuleIdentity", "Counter64", "ObjectIdentity", "iso")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
hh3cRadius = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 13))
hh3cRadius.setRevisions(('2014-06-07 18:00',))
if mibBuilder.loadTexts: hh3cRadius.setLastUpdated('201406071800Z')
if mibBuilder.loadTexts: hh3cRadius.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cRdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1))
hh3cRdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1), )
if mibBuilder.loadTexts: hh3cRdInfoTable.setStatus('current')
hh3cRdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdGroupName"))
if mibBuilder.loadTexts: hh3cRdInfoEntry.setStatus('current')
hh3cRdGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cRdGroupName.setStatus('current')
hh3cRdPrimAuthIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAuthIp.setStatus('deprecated')
hh3cRdPrimUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimUdpPort.setStatus('current')
hh3cRdPrimState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimState.setStatus('current')
hh3cRdSecAuthIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAuthIp.setStatus('deprecated')
hh3cRdSecUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecUdpPort.setStatus('current')
hh3cRdSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecState.setStatus('current')
hh3cRdKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdKey.setStatus('current')
hh3cRdRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdRetry.setStatus('current')
hh3cRdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdTimeout.setStatus('current')
hh3cRdPrimAuthIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 11), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAuthIpAddrType.setStatus('current')
hh3cRdPrimAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAuthIpAddr.setStatus('current')
hh3cRdSecAuthIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 13), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAuthIpAddrType.setStatus('current')
hh3cRdSecAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 14), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAuthIpAddr.setStatus('current')
hh3cRdServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("iphotel", 2), ("portal", 3), ("extended", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdServerType.setStatus('current')
hh3cRdQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdQuietTime.setStatus('current')
hh3cRdUserNameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withoutdomain", 1), ("withdomain", 2), ("keeporignal", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdUserNameFormat.setStatus('current')
hh3cRdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdRowStatus.setStatus('current')
hh3cRdSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecKey.setStatus('current')
hh3cRdPrimVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimVpnName.setStatus('current')
hh3cRdSecVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecVpnName.setStatus('current')
hh3cRdAuthNasIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 22), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAuthNasIpAddrType.setStatus('current')
hh3cRdAuthNasIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAuthNasIpAddr.setStatus('current')
hh3cRdAuthNasIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 1, 1, 24), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAuthNasIpv6Addr.setStatus('current')
hh3cRdAccInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2), )
if mibBuilder.loadTexts: hh3cRdAccInfoTable.setStatus('current')
hh3cRdAccInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdAccGroupName"))
if mibBuilder.loadTexts: hh3cRdAccInfoEntry.setStatus('current')
hh3cRdAccGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cRdAccGroupName.setStatus('current')
hh3cRdPrimAccIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccIpAddrType.setStatus('current')
hh3cRdPrimAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccIpAddr.setStatus('current')
hh3cRdPrimAccUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccUdpPort.setStatus('current')
hh3cRdPrimAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccState.setStatus('current')
hh3cRdSecAccIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccIpAddrType.setStatus('current')
hh3cRdSecAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccIpAddr.setStatus('current')
hh3cRdSecAccUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccUdpPort.setStatus('current')
hh3cRdSecAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccState.setStatus('current')
hh3cRdAccKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccKey.setStatus('current')
hh3cRdAccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRetry.setStatus('current')
hh3cRdAccTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccTimeout.setStatus('current')
hh3cRdAccServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("iphotel", 2), ("portal", 3), ("extended", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccServerType.setStatus('current')
hh3cRdAccQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccQuietTime.setStatus('current')
hh3cRdAccFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("reject", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccFailureAction.setStatus('current')
hh3cRdAccRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRealTime.setStatus('current')
hh3cRdAccRealTimeRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRealTimeRetry.setStatus('current')
hh3cRdAccSaveStopPktEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccSaveStopPktEnable.setStatus('current')
hh3cRdAccStopRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccStopRetry.setStatus('current')
hh3cRdAccDataFlowUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("byte", 1), ("kiloByte", 2), ("megaByte", 3), ("gigaByte", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccDataFlowUnit.setStatus('current')
hh3cRdAccPacketUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onePacket", 1), ("kiloPacket", 2), ("megaPacket", 3), ("gigaPacket", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccPacketUnit.setStatus('current')
hh3cRdAccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccRowStatus.setStatus('current')
hh3cRdAcctOnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAcctOnEnable.setStatus('current')
hh3cRdAcctOnSendTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 24), Integer32().clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAcctOnSendTimes.setStatus('current')
hh3cRdAcctOnSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 25), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAcctOnSendInterval.setStatus('current')
hh3cRdSecAccKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccKey.setStatus('current')
hh3cRdPrimAccVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdPrimAccVpnName.setStatus('current')
hh3cRdSecAccVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecAccVpnName.setStatus('current')
hh3cRdAccNasIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 29), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccNasIpAddrType.setStatus('current')
hh3cRdAccNasIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 30), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccNasIpAddr.setStatus('current')
hh3cRdAccNasIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 2, 1, 31), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdAccNasIpv6Addr.setStatus('current')
hh3cRadiusGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 3))
hh3cRadiusAuthErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(30)).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRadiusAuthErrThreshold.setStatus('current')
hh3cRdSecondaryAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4), )
if mibBuilder.loadTexts: hh3cRdSecondaryAuthServerTable.setStatus('current')
hh3cRdSecondaryAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdGroupName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthIpAddrType"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthIpAddr"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthVpnName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAuthUdpPort"))
if mibBuilder.loadTexts: hh3cRdSecondaryAuthServerEntry.setStatus('current')
hh3cRdSecondaryAuthIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cRdSecondaryAuthIpAddrType.setStatus('current')
hh3cRdSecondaryAuthIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cRdSecondaryAuthIpAddr.setStatus('current')
hh3cRdSecondaryAuthVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hh3cRdSecondaryAuthVpnName.setStatus('current')
hh3cRdSecondaryAuthUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cRdSecondaryAuthUdpPort.setStatus('current')
hh3cRdSecondaryAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAuthState.setStatus('current')
hh3cRdSecondaryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAuthKey.setStatus('current')
hh3cRdSecondaryAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAuthRowStatus.setStatus('current')
hh3cRdSecondaryAccServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5), )
if mibBuilder.loadTexts: hh3cRdSecondaryAccServerTable.setStatus('current')
hh3cRdSecondaryAccServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRdAccGroupName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccIpAddrType"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccIpAddr"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccVpnName"), (0, "HH3C-RADIUS-MIB", "hh3cRdSecondaryAccUdpPort"))
if mibBuilder.loadTexts: hh3cRdSecondaryAccServerEntry.setStatus('current')
hh3cRdSecondaryAccIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cRdSecondaryAccIpAddrType.setStatus('current')
hh3cRdSecondaryAccIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cRdSecondaryAccIpAddr.setStatus('current')
hh3cRdSecondaryAccVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hh3cRdSecondaryAccVpnName.setStatus('current')
hh3cRdSecondaryAccUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cRdSecondaryAccUdpPort.setStatus('current')
hh3cRdSecondaryAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAccState.setStatus('current')
hh3cRdSecondaryAccKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAccKey.setStatus('current')
hh3cRdSecondaryAccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 1, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRdSecondaryAccRowStatus.setStatus('current')
hh3cRadiusAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2))
hh3cRadiusAccClient = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1))
hh3cRadiusAccServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cRadiusAccServerTable.setStatus('current')
hh3cRadiusAccServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1), ).setIndexNames((0, "RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex"))
if mibBuilder.loadTexts: hh3cRadiusAccServerEntry.setStatus('current')
hh3cRadiusAccClientStartRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStartRequests.setStatus('current')
hh3cRadiusAccClientStartResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStartResponses.setStatus('current')
hh3cRadiusAccClientInterimRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientInterimRequests.setStatus('current')
hh3cRadiusAccClientInterimResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientInterimResponses.setStatus('current')
hh3cRadiusAccClientStopRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStopRequests.setStatus('current')
hh3cRadiusAccClientStopResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAccClientStopResponses.setStatus('current')
hh3cRadiusServerTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3))
hh3cRadiusAuthServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 1)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAuthServerDownTrap.setStatus('current')
hh3cRadiusAccServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 2)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAccServerDownTrap.setStatus('current')
hh3cRadiusServerTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0))
hh3cRadiusAuthServerUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0, 1)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAuthServerUpTrap.setStatus('current')
hh3cRadiusAccServerUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0, 2)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccClientServerPortNumber"), ("HH3C-RADIUS-MIB", "hh3cRadiusServerFirstTrapTime"))
if mibBuilder.loadTexts: hh3cRadiusAccServerUpTrap.setStatus('current')
hh3cRadiusAuthErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 13, 3, 0, 3)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"))
if mibBuilder.loadTexts: hh3cRadiusAuthErrTrap.setStatus('current')
hh3cRadiusAuthenticating = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4))
hh3cRadiusAuthClient = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1))
hh3cRadiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1), )
if mibBuilder.loadTexts: hh3cRadiusAuthServerTable.setStatus('current')
hh3cRadiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1), ).setIndexNames((0, "RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex"))
if mibBuilder.loadTexts: hh3cRadiusAuthServerEntry.setStatus('current')
hh3cRadiusAuthFailureTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAuthFailureTimes.setStatus('current')
hh3cRadiusAuthTimeoutTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAuthTimeoutTimes.setStatus('current')
hh3cRadiusAuthRejectTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusAuthRejectTimes.setStatus('current')
hh3cRadiusExtend = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5))
hh3cRadiusExtendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 1))
hh3cRadiusExtendTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2))
hh3cRadiusExtendTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 3))
hh3cRadiusSchAuthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1), )
if mibBuilder.loadTexts: hh3cRadiusSchAuthTable.setStatus('current')
hh3cRadiusSchAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRadiusSchAuthGroupName"))
if mibBuilder.loadTexts: hh3cRadiusSchAuthEntry.setStatus('current')
hh3cRadiusSchAuthGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: hh3cRadiusSchAuthGroupName.setStatus('current')
hh3cRadiusSchAuthPrimIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimIpAddr.setStatus('current')
hh3cRadiusSchAuthPrimUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 3), Integer32().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimUdpPort.setStatus('current')
hh3cRadiusSchAuthPrimKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthPrimKey.setStatus('current')
hh3cRadiusSchAuthSecIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecIpAddr.setStatus('current')
hh3cRadiusSchAuthSecUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 6), Integer32().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecUdpPort.setStatus('current')
hh3cRadiusSchAuthSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthSecKey.setStatus('current')
hh3cRadiusSchAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAuthRowStatus.setStatus('current')
hh3cRadiusSchAccTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2), )
if mibBuilder.loadTexts: hh3cRadiusSchAccTable.setStatus('current')
hh3cRadiusSchAccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1), ).setIndexNames((0, "HH3C-RADIUS-MIB", "hh3cRadiusSchAccGroupName"))
if mibBuilder.loadTexts: hh3cRadiusSchAccEntry.setStatus('current')
hh3cRadiusSchAccGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: hh3cRadiusSchAccGroupName.setStatus('current')
hh3cRadiusSchAccPrimIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimIpAddr.setStatus('current')
hh3cRadiusSchAccPrimUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 3), Integer32().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimUdpPort.setStatus('current')
hh3cRadiusSchAccPrimKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccPrimKey.setStatus('current')
hh3cRadiusSchAccSecIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccSecIpAddr.setStatus('current')
hh3cRadiusSchAccSecUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 6), Integer32().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccSecUdpPort.setStatus('current')
hh3cRadiusSchAccSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccSecKey.setStatus('current')
hh3cRadiusSchAccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 13, 5, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRadiusSchAccRowStatus.setStatus('current')
hh3cRadiusStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6))
hh3cRadiusStatAccReq = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatAccReq.setStatus('current')
hh3cRadiusStatAccAck = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatAccAck.setStatus('current')
hh3cRadiusStatLogoutReq = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatLogoutReq.setStatus('current')
hh3cRadiusStatLogoutAck = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRadiusStatLogoutAck.setStatus('current')
hh3cRadiusServerTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 13, 7))
hh3cRadiusServerFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 13, 7, 1), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRadiusServerFirstTrapTime.setStatus('current')
mibBuilder.exportSymbols("HH3C-RADIUS-MIB", hh3cRdSecVpnName=hh3cRdSecVpnName, hh3cRdPrimAuthIp=hh3cRdPrimAuthIp, hh3cRdAccNasIpAddrType=hh3cRdAccNasIpAddrType, hh3cRadiusSchAuthRowStatus=hh3cRadiusSchAuthRowStatus, hh3cRadiusAuthErrThreshold=hh3cRadiusAuthErrThreshold, hh3cRadiusAccServerTable=hh3cRadiusAccServerTable, hh3cRadiusSchAccSecUdpPort=hh3cRadiusSchAccSecUdpPort, hh3cRdAccNasIpAddr=hh3cRdAccNasIpAddr, hh3cRadiusAccounting=hh3cRadiusAccounting, hh3cRdAccInfoTable=hh3cRdAccInfoTable, hh3cRadiusAccClientStartRequests=hh3cRadiusAccClientStartRequests, hh3cRadiusAuthTimeoutTimes=hh3cRadiusAuthTimeoutTimes, hh3cRadiusSchAuthPrimIpAddr=hh3cRadiusSchAuthPrimIpAddr, hh3cRadiusAccClient=hh3cRadiusAccClient, hh3cRadiusStatistic=hh3cRadiusStatistic, hh3cRadiusStatAccReq=hh3cRadiusStatAccReq, hh3cRadiusAuthRejectTimes=hh3cRadiusAuthRejectTimes, hh3cRdSecState=hh3cRdSecState, hh3cRadiusSchAccRowStatus=hh3cRadiusSchAccRowStatus, hh3cRdSecAccUdpPort=hh3cRdSecAccUdpPort, hh3cRdAccRowStatus=hh3cRdAccRowStatus, hh3cRdRetry=hh3cRdRetry, hh3cRadiusServerTrap=hh3cRadiusServerTrap, hh3cRdSecondaryAccRowStatus=hh3cRdSecondaryAccRowStatus, hh3cRadiusAccClientStartResponses=hh3cRadiusAccClientStartResponses, hh3cRdSecondaryAuthKey=hh3cRdSecondaryAuthKey, hh3cRdUserNameFormat=hh3cRdUserNameFormat, hh3cRdSecondaryAccKey=hh3cRdSecondaryAccKey, hh3cRdSecondaryAccVpnName=hh3cRdSecondaryAccVpnName, hh3cRdSecondaryAuthServerTable=hh3cRdSecondaryAuthServerTable, hh3cRadius=hh3cRadius, hh3cRdAcctOnSendInterval=hh3cRdAcctOnSendInterval, hh3cRadiusSchAccPrimUdpPort=hh3cRadiusSchAccPrimUdpPort, hh3cRdAuthNasIpAddrType=hh3cRdAuthNasIpAddrType, hh3cRdSecUdpPort=hh3cRdSecUdpPort, hh3cRdPrimAccUdpPort=hh3cRdPrimAccUdpPort, hh3cRdSecAccIpAddrType=hh3cRdSecAccIpAddrType, hh3cRdSecondaryAccState=hh3cRdSecondaryAccState, hh3cRdSecAccIpAddr=hh3cRdSecAccIpAddr, PYSNMP_MODULE_ID=hh3cRadius, hh3cRdAccFailureAction=hh3cRdAccFailureAction, hh3cRadiusSchAccSecKey=hh3cRadiusSchAccSecKey, hh3cRdAccRealTimeRetry=hh3cRdAccRealTimeRetry, hh3cRdPrimAuthIpAddrType=hh3cRdPrimAuthIpAddrType, hh3cRdAuthNasIpv6Addr=hh3cRdAuthNasIpv6Addr, hh3cRdAccTimeout=hh3cRdAccTimeout, hh3cRdSecondaryAccIpAddrType=hh3cRdSecondaryAccIpAddrType, hh3cRdRowStatus=hh3cRdRowStatus, hh3cRadiusSchAuthSecIpAddr=hh3cRadiusSchAuthSecIpAddr, hh3cRadiusSchAuthSecKey=hh3cRadiusSchAuthSecKey, hh3cRadiusAuthenticating=hh3cRadiusAuthenticating, hh3cRdSecAuthIp=hh3cRdSecAuthIp, hh3cRdTimeout=hh3cRdTimeout, hh3cRadiusSchAccEntry=hh3cRadiusSchAccEntry, hh3cRadiusServerFirstTrapTime=hh3cRadiusServerFirstTrapTime, hh3cRadiusAuthServerEntry=hh3cRadiusAuthServerEntry, hh3cRdSecondaryAuthState=hh3cRdSecondaryAuthState, hh3cRdAccKey=hh3cRdAccKey, hh3cRdSecondaryAccServerTable=hh3cRdSecondaryAccServerTable, hh3cRadiusAuthClient=hh3cRadiusAuthClient, hh3cRadiusAuthFailureTimes=hh3cRadiusAuthFailureTimes, hh3cRdAccNasIpv6Addr=hh3cRdAccNasIpv6Addr, hh3cRdSecondaryAuthIpAddr=hh3cRdSecondaryAuthIpAddr, hh3cRadiusAccServerUpTrap=hh3cRadiusAccServerUpTrap, hh3cRdPrimAccVpnName=hh3cRdPrimAccVpnName, hh3cRdSecondaryAccIpAddr=hh3cRdSecondaryAccIpAddr, hh3cRadiusExtend=hh3cRadiusExtend, hh3cRdAccStopRetry=hh3cRdAccStopRetry, hh3cRadiusSchAuthPrimUdpPort=hh3cRadiusSchAuthPrimUdpPort, hh3cRdKey=hh3cRdKey, hh3cRadiusSchAccPrimKey=hh3cRadiusSchAccPrimKey, hh3cRadiusAuthErrTrap=hh3cRadiusAuthErrTrap, hh3cRdPrimAccState=hh3cRdPrimAccState, hh3cRadiusAccServerDownTrap=hh3cRadiusAccServerDownTrap, hh3cRdAuthNasIpAddr=hh3cRdAuthNasIpAddr, hh3cRdSecondaryAuthIpAddrType=hh3cRdSecondaryAuthIpAddrType, hh3cRdSecKey=hh3cRdSecKey, hh3cRdInfoEntry=hh3cRdInfoEntry, hh3cRadiusAuthServerTable=hh3cRadiusAuthServerTable, hh3cRdSecondaryAccServerEntry=hh3cRdSecondaryAccServerEntry, hh3cRadiusStatLogoutAck=hh3cRadiusStatLogoutAck, hh3cRdAccQuietTime=hh3cRdAccQuietTime, hh3cRdSecondaryAuthServerEntry=hh3cRdSecondaryAuthServerEntry, hh3cRadiusStatAccAck=hh3cRadiusStatAccAck, hh3cRadiusSchAccPrimIpAddr=hh3cRadiusSchAccPrimIpAddr, hh3cRdSecAuthIpAddr=hh3cRdSecAuthIpAddr, hh3cRadiusGlobalConfig=hh3cRadiusGlobalConfig, hh3cRdSecondaryAuthRowStatus=hh3cRdSecondaryAuthRowStatus, hh3cRdAccDataFlowUnit=hh3cRdAccDataFlowUnit, hh3cRdAcctOnSendTimes=hh3cRdAcctOnSendTimes, hh3cRadiusSchAccSecIpAddr=hh3cRadiusSchAccSecIpAddr, hh3cRadiusServerTrapPrefix=hh3cRadiusServerTrapPrefix, hh3cRdAccInfoEntry=hh3cRdAccInfoEntry, hh3cRdSecondaryAccUdpPort=hh3cRdSecondaryAccUdpPort, hh3cRdAccGroupName=hh3cRdAccGroupName, hh3cRdPrimState=hh3cRdPrimState, hh3cRadiusSchAuthPrimKey=hh3cRadiusSchAuthPrimKey, hh3cRdObjects=hh3cRdObjects, hh3cRdServerType=hh3cRdServerType, hh3cRadiusSchAuthTable=hh3cRadiusSchAuthTable, hh3cRadiusAuthServerUpTrap=hh3cRadiusAuthServerUpTrap, hh3cRdGroupName=hh3cRdGroupName, hh3cRadiusSchAuthEntry=hh3cRadiusSchAuthEntry, hh3cRdPrimAccIpAddr=hh3cRdPrimAccIpAddr, hh3cRdPrimVpnName=hh3cRdPrimVpnName, hh3cRadiusExtendTraps=hh3cRadiusExtendTraps, hh3cRdAccRealTime=hh3cRdAccRealTime, hh3cRdQuietTime=hh3cRdQuietTime, hh3cRadiusAccClientInterimResponses=hh3cRadiusAccClientInterimResponses, hh3cRdPrimAuthIpAddr=hh3cRdPrimAuthIpAddr, hh3cRdAccServerType=hh3cRdAccServerType, hh3cRdAccRetry=hh3cRdAccRetry, hh3cRdSecAccState=hh3cRdSecAccState, hh3cRdAccSaveStopPktEnable=hh3cRdAccSaveStopPktEnable, hh3cRadiusStatLogoutReq=hh3cRadiusStatLogoutReq, hh3cRdSecAccKey=hh3cRdSecAccKey, hh3cRadiusSchAuthSecUdpPort=hh3cRadiusSchAuthSecUdpPort, hh3cRdAcctOnEnable=hh3cRdAcctOnEnable, hh3cRadiusAccClientStopRequests=hh3cRadiusAccClientStopRequests, hh3cRadiusAccClientInterimRequests=hh3cRadiusAccClientInterimRequests, hh3cRadiusExtendObjects=hh3cRadiusExtendObjects, hh3cRadiusAccServerEntry=hh3cRadiusAccServerEntry, hh3cRdInfoTable=hh3cRdInfoTable, hh3cRadiusAccClientStopResponses=hh3cRadiusAccClientStopResponses, hh3cRdAccPacketUnit=hh3cRdAccPacketUnit, hh3cRdSecondaryAuthVpnName=hh3cRdSecondaryAuthVpnName, hh3cRadiusSchAuthGroupName=hh3cRadiusSchAuthGroupName, hh3cRadiusAuthServerDownTrap=hh3cRadiusAuthServerDownTrap, hh3cRadiusSchAccGroupName=hh3cRadiusSchAccGroupName, hh3cRdSecAccVpnName=hh3cRdSecAccVpnName, hh3cRadiusSchAccTable=hh3cRadiusSchAccTable, hh3cRadiusServerTrapVarObjects=hh3cRadiusServerTrapVarObjects, hh3cRdPrimAccIpAddrType=hh3cRdPrimAccIpAddrType, hh3cRdSecondaryAuthUdpPort=hh3cRdSecondaryAuthUdpPort, hh3cRdSecAuthIpAddrType=hh3cRdSecAuthIpAddrType, hh3cRadiusExtendTables=hh3cRadiusExtendTables, hh3cRdPrimUdpPort=hh3cRdPrimUdpPort)
