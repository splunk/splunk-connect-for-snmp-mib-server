#
# PySNMP MIB module CISCO-VINES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VINES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:01:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Gauge32, ModuleIdentity, Unsigned32, IpAddress, MibIdentifier, iso, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Gauge32", "ModuleIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "iso", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC-v1", "PhysAddress", "TruthValue")
ciscoVinesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17))
ciscoVinesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1))
cvBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1))
cvForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2))
cvTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3))
cvInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4))
ciscoVinesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3))
ciscoVinesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 1))
ciscoVinesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 2))
class VinesNetworkNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class VinesHostNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class VinesMetric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 819200)

cvBasicNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1, 1), VinesNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvBasicNetwork.setStatus('mandatory')
cvBasicHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1, 2), VinesHostNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvBasicHost.setStatus('mandatory')
cvBasicNextClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1, 3), VinesHostNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvBasicNextClient.setStatus('mandatory')
cvForwNeighborNeighborCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborNeighborCount.setStatus('mandatory')
cvForwNeighborPathCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborPathCount.setStatus('mandatory')
cvForwNeighborVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborVersion.setStatus('mandatory')
cvForwNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4), )
if mibBuilder.loadTexts: cvForwNeighborTable.setStatus('mandatory')
cvForwNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-VINES-MIB", "cvForwNeighborNetwork"), (0, "CISCO-VINES-MIB", "cvForwNeighborHost"), (0, "IF-MIB", "ifIndex"), (0, "CISCO-VINES-MIB", "cvForwNeighborPhysAddress"))
if mibBuilder.loadTexts: cvForwNeighborEntry.setStatus('mandatory')
cvForwNeighborNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 1), VinesNetworkNumber())
if mibBuilder.loadTexts: cvForwNeighborNetwork.setStatus('mandatory')
cvForwNeighborHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 2), VinesHostNumber())
if mibBuilder.loadTexts: cvForwNeighborHost.setStatus('mandatory')
cvForwNeighborPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 3), PhysAddress())
if mibBuilder.loadTexts: cvForwNeighborPhysAddress.setStatus('mandatory')
cvForwNeighborSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unrecognized", 1), ("self", 2), ("rtpRedirect", 3), ("rtpUpdate", 4), ("manualRoute", 5), ("igrp", 6), ("test", 7), ("manualNeighbor", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborSource.setStatus('mandatory')
cvForwNeighborRtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborRtpVersion.setStatus('mandatory')
cvForwNeighborUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("next", 1), ("roundRobin", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborUsageType.setStatus('mandatory')
cvForwNeighborAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborAge.setStatus('mandatory')
cvForwNeighborMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 8), VinesMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborMetric.setStatus('mandatory')
cvForwNeighborUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborUses.setStatus('mandatory')
cvForwRouteRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteRouterCount.setStatus('mandatory')
cvForwRouteRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteRouteCount.setStatus('mandatory')
cvForwRouteVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteVersion.setStatus('mandatory')
cvForwRouteUpdateCountdown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteUpdateCountdown.setStatus('mandatory')
cvForwRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9), )
if mibBuilder.loadTexts: cvForwRouteTable.setStatus('mandatory')
cvForwRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1), ).setIndexNames((0, "CISCO-VINES-MIB", "cvForwRouteNetworkNumber"), (0, "CISCO-VINES-MIB", "cvForwRouteNeighborNetwork"))
if mibBuilder.loadTexts: cvForwRouteEntry.setStatus('mandatory')
cvForwRouteNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 1), VinesNetworkNumber())
if mibBuilder.loadTexts: cvForwRouteNetworkNumber.setStatus('mandatory')
cvForwRouteNeighborNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 2), VinesNetworkNumber())
if mibBuilder.loadTexts: cvForwRouteNeighborNetwork.setStatus('mandatory')
cvForwRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unrecognized", 1), ("self", 2), ("rtpRedirect", 3), ("rtpUpdate", 4), ("manualRoute", 5), ("igrp", 6), ("test", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteSource.setStatus('mandatory')
cvForwRouteRtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteRtpVersion.setStatus('mandatory')
cvForwRouteUseNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteUseNext.setStatus('mandatory')
cvForwRouteForwardBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteForwardBroadcast.setStatus('mandatory')
cvForwRouteSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteSuppress.setStatus('mandatory')
cvForwRouteLoadShareEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteLoadShareEligible.setStatus('mandatory')
cvForwRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteAge.setStatus('mandatory')
cvForwRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 10), VinesMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteMetric.setStatus('mandatory')
cvForwRouteUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteUses.setStatus('mandatory')
cvTotalInputPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalInputPackets.setStatus('mandatory')
cvTotalOutputPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalOutputPackets.setStatus('mandatory')
cvTotalLocalDestPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalLocalDestPackets.setStatus('mandatory')
cvTotalForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalForwardedPackets.setStatus('mandatory')
cvTotalBroadcastInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalBroadcastInPackets.setStatus('mandatory')
cvTotalBroadcastOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalBroadcastOutPackets.setStatus('mandatory')
cvTotalBroadcastForwardPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalBroadcastForwardPackets.setStatus('mandatory')
cvTotalLanOnlyPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalLanOnlyPackets.setStatus('mandatory')
cvTotalNotOver4800Packets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalNotOver4800Packets.setStatus('mandatory')
cvTotalNoChargesPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalNoChargesPackets.setStatus('mandatory')
cvTotalFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalFormatErrors.setStatus('mandatory')
cvTotalChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalChecksumErrors.setStatus('mandatory')
cvTotalHopCountsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalHopCountsExceeded.setStatus('mandatory')
cvTotalNoRouteDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalNoRouteDrops.setStatus('mandatory')
cvTotalEncapsFailedDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalEncapsFailedDrops.setStatus('mandatory')
cvTotalUnknownPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalUnknownPackets.setStatus('mandatory')
cvTotalIcpInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalIcpInPackets.setStatus('mandatory')
cvTotalIcpOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalIcpOutPackets.setStatus('mandatory')
cvTotalMetricOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalMetricOutPackets.setStatus('mandatory')
cvTotalMacEchoInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalMacEchoInPackets.setStatus('mandatory')
cvTotalMacEchoOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalMacEchoOutPackets.setStatus('mandatory')
cvTotalEchoInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalEchoInPackets.setStatus('mandatory')
cvTotalEchoOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalEchoOutPackets.setStatus('mandatory')
cvTotalProxyOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalProxyOutPackets.setStatus('mandatory')
cvTotalProxyReplyOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalProxyReplyOutPackets.setStatus('mandatory')
cvIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1), )
if mibBuilder.loadTexts: cvIfConfigTable.setStatus('mandatory')
cvIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvIfConfigEntry.setStatus('mandatory')
cvIfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 1), VinesMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigMetric.setStatus('mandatory')
cvIfConfigEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("arpa", 1), ("tokenRing", 2), ("snap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigEncapsulation.setStatus('mandatory')
cvIfConfigAccesslist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigAccesslist.setStatus('mandatory')
cvIfConfigPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("always", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigPropagate.setStatus('mandatory')
cvIfConfigArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("always", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigArpEnabled.setStatus('mandatory')
cvIfConfigServerless = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("dynamic", 2), ("always", 3), ("alwaysBroadcast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigServerless.setStatus('mandatory')
cvIfConfigRedirectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigRedirectInterval.setStatus('mandatory')
cvIfConfigSplitDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigSplitDisabled.setStatus('mandatory')
cvIfConfigLineup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigLineup.setStatus('mandatory')
cvIfConfigFastokay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigFastokay.setStatus('mandatory')
cvIfConfigRouteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigRouteCache.setStatus('mandatory')
cvIfConfigInputRouterFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigInputRouterFilter.setStatus('mandatory')
cvIfConfigInputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigInputNetworkFilter.setStatus('mandatory')
cvIfConfigOutputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigOutputNetworkFilter.setStatus('mandatory')
cvIfCountInTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2), )
if mibBuilder.loadTexts: cvIfCountInTable.setStatus('mandatory')
cvIfCountInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvIfCountInEntry.setStatus('mandatory')
cvIfCountInNotEnabledDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInNotEnabledDrops.setStatus('mandatory')
cvIfCountInFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInFormatErrors.setStatus('mandatory')
cvIfCountInLocalDestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInLocalDestPackets.setStatus('mandatory')
cvIfCountInBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastPackets.setStatus('mandatory')
cvIfCountInForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInForwardedPackets.setStatus('mandatory')
cvIfCountInNoRouteDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInNoRouteDrops.setStatus('mandatory')
cvIfCountInZeroHopCountDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInZeroHopCountDrops.setStatus('mandatory')
cvIfCountInChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInChecksumErrors.setStatus('mandatory')
cvIfCountInArpQueryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpQueryRequests.setStatus('mandatory')
cvIfCountInArpQueryResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpQueryResponses.setStatus('mandatory')
cvIfCountInArpAssignmentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpAssignmentRequests.setStatus('mandatory')
cvIfCountInArpAssignmentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpAssignmentResponses.setStatus('mandatory')
cvIfCountInArpIllegalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpIllegalMessages.setStatus('mandatory')
cvIfCountInIcpErrorMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIcpErrorMessages.setStatus('mandatory')
cvIfCountInIcpMetricMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIcpMetricMessages.setStatus('mandatory')
cvIfCountInIcpIllegalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIcpIllegalMessages.setStatus('mandatory')
cvIfCountInIpcMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIpcMessages.setStatus('mandatory')
cvIfCountInRtp0Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp0Messages.setStatus('mandatory')
cvIfCountInRtp1Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp1Messages.setStatus('mandatory')
cvIfCountInRtp2Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp2Messages.setStatus('mandatory')
cvIfCountInRtp3Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp3Messages.setStatus('mandatory')
cvIfCountInRtpUpdateMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpUpdateMessages.setStatus('mandatory')
cvIfCountInRtpResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpResponseMessages.setStatus('mandatory')
cvIfCountInRtpRedirectMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpRedirectMessages.setStatus('mandatory')
cvIfCountInRtpIllegalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpIllegalMessages.setStatus('mandatory')
cvIfCountInSppMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInSppMessages.setStatus('mandatory')
cvIfCountInIpUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIpUnknownProtocols.setStatus('mandatory')
cvIfCountInIpcUnknownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIpcUnknownPorts.setStatus('mandatory')
cvIfCountInBroadcastsHelpered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastsHelpered.setStatus('mandatory')
cvIfCountInBroadcastsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastsForwarded.setStatus('mandatory')
cvIfCountInBroadcastDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastDuplicates.setStatus('mandatory')
cvIfCountInEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInEchoPackets.setStatus('mandatory')
cvIfCountInMacEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInMacEchoPackets.setStatus('mandatory')
cvIfCountInProxyReplyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInProxyReplyPackets.setStatus('mandatory')
cvIfCountOutTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3), )
if mibBuilder.loadTexts: cvIfCountOutTable.setStatus('mandatory')
cvIfCountOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvIfCountOutEntry.setStatus('mandatory')
cvIfCountOutUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutUnicastPackets.setStatus('mandatory')
cvIfCountOutBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutBroadcastPackets.setStatus('mandatory')
cvIfCountOutForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutForwardedPackets.setStatus('mandatory')
cvIfCountOutEncapsulationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutEncapsulationFailures.setStatus('mandatory')
cvIfCountOutAccessFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutAccessFailures.setStatus('mandatory')
cvIfCountOutDownFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutDownFailures.setStatus('mandatory')
cvIfCountOutPacketsNotBroadcastToSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastToSource.setStatus('mandatory')
cvIfCountOutPacketsNotBroadcastLanOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastLanOnly.setStatus('mandatory')
cvIfCountOutPacketsNotBroadcastNotOver4800 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastNotOver4800.setStatus('mandatory')
cvIfCountOutPacketsNotBroadcastNoCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastNoCharge.setStatus('mandatory')
cvIfCountOutBroadcastsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutBroadcastsForwarded.setStatus('mandatory')
cvIfCountOutBroadcastsHelpered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutBroadcastsHelpered.setStatus('mandatory')
cvIfCountOutArpQueryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpQueryRequests.setStatus('mandatory')
cvIfCountOutArpQueryResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpQueryResponses.setStatus('mandatory')
cvIfCountOutArpAssignmentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpAssignmentRequests.setStatus('mandatory')
cvIfCountOutArpAssignmentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpAssignmentResponses.setStatus('mandatory')
cvIfCountOutIcpErrorMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutIcpErrorMessages.setStatus('mandatory')
cvIfCountOutIcpMetricMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutIcpMetricMessages.setStatus('mandatory')
cvIfCountOutIpcMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutIpcMessages.setStatus('mandatory')
cvIfCountOutRtp0Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtp0Messages.setStatus('mandatory')
cvIfCountOutRtpRequestMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpRequestMessages.setStatus('mandatory')
cvIfCountOutRtp2Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtp2Messages.setStatus('mandatory')
cvIfCountOutRtp3Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtp3Messages.setStatus('mandatory')
cvIfCountOutRtpUpdateMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpUpdateMessages.setStatus('mandatory')
cvIfCountOutRtpResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpResponseMessages.setStatus('mandatory')
cvIfCountOutRtpRedirectMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpRedirectMessages.setStatus('mandatory')
cvIfCountOutSppMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutSppMessages.setStatus('mandatory')
cvIfCountOutEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutEchoPackets.setStatus('mandatory')
cvIfCountOutMacEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutMacEchoPackets.setStatus('mandatory')
cvIfCountOutProxyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutProxyPackets.setStatus('mandatory')
ciscoVinesMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 2, 1))
ciscoVinesMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 1, 1))
mibBuilder.exportSymbols("CISCO-VINES-MIB", cvIfCountInRtp2Messages=cvIfCountInRtp2Messages, cvIfCountInTable=cvIfCountInTable, cvForwRouteRouteCount=cvForwRouteRouteCount, cvTotalBroadcastOutPackets=cvTotalBroadcastOutPackets, cvIfCountOutPacketsNotBroadcastNoCharge=cvIfCountOutPacketsNotBroadcastNoCharge, cvForwRouteLoadShareEligible=cvForwRouteLoadShareEligible, cvIfCountInEchoPackets=cvIfCountInEchoPackets, cvTotalEchoOutPackets=cvTotalEchoOutPackets, cvIfCountOutRtp2Messages=cvIfCountOutRtp2Messages, cvTotalBroadcastForwardPackets=cvTotalBroadcastForwardPackets, cvTotalUnknownPackets=cvTotalUnknownPackets, cvIfConfigTable=cvIfConfigTable, cvForwRouteUses=cvForwRouteUses, cvIfConfigInputRouterFilter=cvIfConfigInputRouterFilter, cvIfCountInChecksumErrors=cvIfCountInChecksumErrors, cvIfCountInForwardedPackets=cvIfCountInForwardedPackets, cvIfCountInZeroHopCountDrops=cvIfCountInZeroHopCountDrops, cvForwRouteSource=cvForwRouteSource, ciscoVinesMIBCompliances=ciscoVinesMIBCompliances, cvTotalNoRouteDrops=cvTotalNoRouteDrops, cvIfCountInLocalDestPackets=cvIfCountInLocalDestPackets, ciscoVinesMIBGroups=ciscoVinesMIBGroups, cvForwNeighborPhysAddress=cvForwNeighborPhysAddress, cvForwRouteNeighborNetwork=cvForwRouteNeighborNetwork, cvTotalMetricOutPackets=cvTotalMetricOutPackets, cvForwRouteMetric=cvForwRouteMetric, cvIfCountOutIcpErrorMessages=cvIfCountOutIcpErrorMessages, cvTotalInputPackets=cvTotalInputPackets, cvIfCountInIcpErrorMessages=cvIfCountInIcpErrorMessages, cvIfCountInArpQueryResponses=cvIfCountInArpQueryResponses, cvIfCountOutRtpRedirectMessages=cvIfCountOutRtpRedirectMessages, cvIfCountInRtpResponseMessages=cvIfCountInRtpResponseMessages, cvIfCountInRtp0Messages=cvIfCountInRtp0Messages, cvForwNeighborNetwork=cvForwNeighborNetwork, cvTotalEchoInPackets=cvTotalEchoInPackets, cvIfConfigServerless=cvIfConfigServerless, cvIfCountInArpAssignmentRequests=cvIfCountInArpAssignmentRequests, cvIfCountInArpIllegalMessages=cvIfCountInArpIllegalMessages, cvIfConfigEncapsulation=cvIfConfigEncapsulation, cvIfCountOutBroadcastsHelpered=cvIfCountOutBroadcastsHelpered, cvTotalOutputPackets=cvTotalOutputPackets, cvIfConfigLineup=cvIfConfigLineup, ciscoVinesMIBObjects=ciscoVinesMIBObjects, cvIfConfigEntry=cvIfConfigEntry, cvIfCountOutIcpMetricMessages=cvIfCountOutIcpMetricMessages, cvIfCountOutForwardedPackets=cvIfCountOutForwardedPackets, VinesHostNumber=VinesHostNumber, cvIfCountInFormatErrors=cvIfCountInFormatErrors, cvForwNeighborMetric=cvForwNeighborMetric, cvForwRouteAge=cvForwRouteAge, cvIfCountInArpAssignmentResponses=cvIfCountInArpAssignmentResponses, cvIfCountOutRtpResponseMessages=cvIfCountOutRtpResponseMessages, cvInterface=cvInterface, cvIfCountInMacEchoPackets=cvIfCountInMacEchoPackets, cvForwNeighborRtpVersion=cvForwNeighborRtpVersion, cvTotalFormatErrors=cvTotalFormatErrors, cvIfCountInRtpUpdateMessages=cvIfCountInRtpUpdateMessages, cvForwNeighborUses=cvForwNeighborUses, cvBasic=cvBasic, cvIfCountOutArpAssignmentRequests=cvIfCountOutArpAssignmentRequests, cvIfConfigOutputNetworkFilter=cvIfConfigOutputNetworkFilter, cvForwRouteForwardBroadcast=cvForwRouteForwardBroadcast, cvTotalChecksumErrors=cvTotalChecksumErrors, cvTotalMacEchoInPackets=cvTotalMacEchoInPackets, cvIfCountOutSppMessages=cvIfCountOutSppMessages, cvIfCountOutPacketsNotBroadcastNotOver4800=cvIfCountOutPacketsNotBroadcastNotOver4800, VinesNetworkNumber=VinesNetworkNumber, cvIfCountInRtp3Messages=cvIfCountInRtp3Messages, cvIfCountOutProxyPackets=cvIfCountOutProxyPackets, cvBasicHost=cvBasicHost, cvIfCountInIcpMetricMessages=cvIfCountInIcpMetricMessages, cvIfCountOutUnicastPackets=cvIfCountOutUnicastPackets, ciscoVinesMIB=ciscoVinesMIB, cvForwRouteNetworkNumber=cvForwRouteNetworkNumber, cvIfCountInProxyReplyPackets=cvIfCountInProxyReplyPackets, cvIfCountInSppMessages=cvIfCountInSppMessages, cvIfCountOutRtp0Messages=cvIfCountOutRtp0Messages, cvIfCountOutTable=cvIfCountOutTable, cvIfCountOutPacketsNotBroadcastToSource=cvIfCountOutPacketsNotBroadcastToSource, cvForwRouteTable=cvForwRouteTable, cvIfCountInNoRouteDrops=cvIfCountInNoRouteDrops, cvForwRouteRouterCount=cvForwRouteRouterCount, cvIfCountOutRtpRequestMessages=cvIfCountOutRtpRequestMessages, cvForwRouteRtpVersion=cvForwRouteRtpVersion, cvIfCountInBroadcastDuplicates=cvIfCountInBroadcastDuplicates, cvIfCountOutRtpUpdateMessages=cvIfCountOutRtpUpdateMessages, cvIfCountInBroadcastPackets=cvIfCountInBroadcastPackets, cvForwRouteEntry=cvForwRouteEntry, cvIfCountOutArpAssignmentResponses=cvIfCountOutArpAssignmentResponses, cvTotalProxyReplyOutPackets=cvTotalProxyReplyOutPackets, cvBasicNetwork=cvBasicNetwork, cvTotalIcpInPackets=cvTotalIcpInPackets, cvIfCountOutMacEchoPackets=cvIfCountOutMacEchoPackets, cvForwNeighborHost=cvForwNeighborHost, cvTotalIcpOutPackets=cvTotalIcpOutPackets, cvIfConfigFastokay=cvIfConfigFastokay, cvIfCountInIpcMessages=cvIfCountInIpcMessages, cvTotalBroadcastInPackets=cvTotalBroadcastInPackets, cvIfCountInBroadcastsForwarded=cvIfCountInBroadcastsForwarded, cvIfCountInIpcUnknownPorts=cvIfCountInIpcUnknownPorts, cvBasicNextClient=cvBasicNextClient, cvTotalNotOver4800Packets=cvTotalNotOver4800Packets, cvIfCountInRtpRedirectMessages=cvIfCountInRtpRedirectMessages, cvForwNeighborNeighborCount=cvForwNeighborNeighborCount, cvIfConfigSplitDisabled=cvIfConfigSplitDisabled, cvIfCountInNotEnabledDrops=cvIfCountInNotEnabledDrops, cvIfCountInArpQueryRequests=cvIfCountInArpQueryRequests, cvIfCountInRtpIllegalMessages=cvIfCountInRtpIllegalMessages, cvIfConfigMetric=cvIfConfigMetric, cvForwNeighborTable=cvForwNeighborTable, cvForwNeighborSource=cvForwNeighborSource, cvForwNeighborAge=cvForwNeighborAge, cvIfCountOutDownFailures=cvIfCountOutDownFailures, cvTotal=cvTotal, ciscoVinesMIBConformance=ciscoVinesMIBConformance, cvForwNeighborVersion=cvForwNeighborVersion, cvTotalProxyOutPackets=cvTotalProxyOutPackets, cvIfConfigRedirectInterval=cvIfConfigRedirectInterval, cvForwNeighborEntry=cvForwNeighborEntry, ciscoVinesMIBGroup=ciscoVinesMIBGroup, ciscoVinesMIBCompliance=ciscoVinesMIBCompliance, cvForwRouteUpdateCountdown=cvForwRouteUpdateCountdown, cvTotalLocalDestPackets=cvTotalLocalDestPackets, cvIfCountOutEntry=cvIfCountOutEntry, VinesMetric=VinesMetric, cvForwarding=cvForwarding, cvIfCountOutBroadcastPackets=cvIfCountOutBroadcastPackets, cvIfConfigPropagate=cvIfConfigPropagate, cvIfCountInRtp1Messages=cvIfCountInRtp1Messages, cvIfCountOutEchoPackets=cvIfCountOutEchoPackets, cvIfCountOutBroadcastsForwarded=cvIfCountOutBroadcastsForwarded, cvTotalForwardedPackets=cvTotalForwardedPackets, cvIfCountOutAccessFailures=cvIfCountOutAccessFailures, cvIfCountOutPacketsNotBroadcastLanOnly=cvIfCountOutPacketsNotBroadcastLanOnly, cvIfConfigAccesslist=cvIfConfigAccesslist, cvForwNeighborPathCount=cvForwNeighborPathCount, cvIfCountInIpUnknownProtocols=cvIfCountInIpUnknownProtocols, cvIfCountOutArpQueryRequests=cvIfCountOutArpQueryRequests, cvTotalNoChargesPackets=cvTotalNoChargesPackets, cvIfCountOutIpcMessages=cvIfCountOutIpcMessages, cvForwRouteVersion=cvForwRouteVersion, cvForwRouteSuppress=cvForwRouteSuppress, cvIfCountOutEncapsulationFailures=cvIfCountOutEncapsulationFailures, cvIfCountInEntry=cvIfCountInEntry, cvIfConfigRouteCache=cvIfConfigRouteCache, cvIfCountOutArpQueryResponses=cvIfCountOutArpQueryResponses, cvIfCountInBroadcastsHelpered=cvIfCountInBroadcastsHelpered, cvTotalMacEchoOutPackets=cvTotalMacEchoOutPackets, cvIfCountOutRtp3Messages=cvIfCountOutRtp3Messages, cvForwNeighborUsageType=cvForwNeighborUsageType, cvIfCountInIcpIllegalMessages=cvIfCountInIcpIllegalMessages, cvIfConfigArpEnabled=cvIfConfigArpEnabled, cvTotalLanOnlyPackets=cvTotalLanOnlyPackets, cvTotalEncapsFailedDrops=cvTotalEncapsFailedDrops, cvTotalHopCountsExceeded=cvTotalHopCountsExceeded, cvForwRouteUseNext=cvForwRouteUseNext, cvIfConfigInputNetworkFilter=cvIfConfigInputNetworkFilter)
