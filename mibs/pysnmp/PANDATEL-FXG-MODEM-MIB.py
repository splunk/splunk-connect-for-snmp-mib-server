#
# PySNMP MIB module PANDATEL-FXG-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-FXG-MODEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Bits, Unsigned32, Counter32, Counter64, NotificationType, iso, IpAddress, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Bits", "Unsigned32", "Counter32", "Counter64", "NotificationType", "iso", "IpAddress", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fxg_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 506)).setLabel("fxg-modem")
fxg = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506))
fxgModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1), )
if mibBuilder.loadTexts: fxgModemTable.setStatus('mandatory')
fxgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1), ).setIndexNames((0, "PANDATEL-FXG-MODEM-MIB", "mdmRack"), (0, "PANDATEL-FXG-MODEM-MIB", "mdmModem"), (0, "PANDATEL-FXG-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: fxgTableEntry.setStatus('mandatory')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
mdmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmAlarm.setStatus('mandatory')
mdmRemoteAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("enable", 5), ("disable-local", 8), ("disable-local-and-remote", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRemoteAccessMode.setStatus('mandatory')
mdmForcedRemoteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmForcedRemoteAccess.setStatus('mandatory')
mdmClockRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("gigabit-Ethernet-1250", 6), ("fibre-Channel-1062", 7), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockRecovery.setStatus('mandatory')
mdmOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("modem-mode", 2), ("converter-mode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmOperationMode.setStatus('mandatory')
mdmInterfaceAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmInterfaceAlarmCondition.setStatus('mandatory')
mdmLineAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 506, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLineAlarmCondition.setStatus('mandatory')
mibBuilder.exportSymbols("PANDATEL-FXG-MODEM-MIB", fxgModemTable=fxgModemTable, mdmModemName=mdmModemName, fxg_modem=fxg_modem, mdmInterfaceAlarmCondition=mdmInterfaceAlarmCondition, mdmRack=mdmRack, mdmAlarm=mdmAlarm, mdmLineAlarmCondition=mdmLineAlarmCondition, mdmPosition=mdmPosition, mdmModem=mdmModem, mdmRemoteAccessMode=mdmRemoteAccessMode, mdmClockRecovery=mdmClockRecovery, mdmOperationMode=mdmOperationMode, mdmForcedRemoteAccess=mdmForcedRemoteAccess, fxgTableEntry=fxgTableEntry, fxg=fxg)
