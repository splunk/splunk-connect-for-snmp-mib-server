#
# PySNMP MIB module IBM3172-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM3172-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ModuleIdentity, iso, Gauge32, TimeTicks, Counter64, IpAddress, Counter32, enterprises, Unsigned32, Integer32, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ModuleIdentity", "iso", "Gauge32", "TimeTicks", "Counter64", "IpAddress", "Counter32", "enterprises", "Unsigned32", "Integer32", "ObjectIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm3172MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 6, 1, 8))
if mibBuilder.loadTexts: ibm3172MIB.setLastUpdated('9704070000Z')
if mibBuilder.loadTexts: ibm3172MIB.setOrganization('OS/390 TCP/IP OpenEdition Development')
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm3172 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1))
ibm3172SystemTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 1), )
if mibBuilder.loadTexts: ibm3172SystemTable.setStatus('current')
ibm3172SystemTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172SystemTableEntry.setStatus('current')
ibm3172Descr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172Descr.setStatus('current')
ibm3172Contact = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172Contact.setStatus('current')
ibm3172Location = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172Location.setStatus('current')
ibm3172ifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifNumber.setStatus('current')
ibm3172ifTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 2), )
if mibBuilder.loadTexts: ibm3172ifTrapTable.setStatus('current')
ibm3172ifTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifTrapTableEntry.setStatus('current')
ibm3172ifTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifTrapEnable.setStatus('current')
ibm3172ifChanCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 3), )
if mibBuilder.loadTexts: ibm3172ifChanCountersTable.setStatus('current')
ibm3172ifChanCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifChanCountersTableEntry.setStatus('current')
ibm3172ifInChanOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInChanOctets.setStatus('current')
ibm3172ifOutChanOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutChanOctets.setStatus('current')
ibm3172ifInChanBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInChanBlocks.setStatus('current')
ibm3172ifOutChanBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutChanBlocks.setStatus('current')
ibm3172ifLANCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 4), )
if mibBuilder.loadTexts: ibm3172ifLANCountersTable.setStatus('current')
ibm3172ifLANCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifLANCountersTableEntry.setStatus('current')
ibm3172ifInLANOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANOctets.setStatus('current')
ibm3172ifOutLANOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANOctets.setStatus('current')
ibm3172ifInLANFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANFrames.setStatus('current')
ibm3172ifOutLANFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANFrames.setStatus('current')
ibm3172ifInLANErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANErrors.setStatus('current')
ibm3172ifOutLANErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANErrors.setStatus('current')
ibm3172ifInLANDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANDiscards.setStatus('current')
ibm3172ifOutLANDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANDiscards.setStatus('current')
ibm3172ifBlkCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 5), )
if mibBuilder.loadTexts: ibm3172ifBlkCountersTable.setStatus('current')
ibm3172ifBlkCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifBlkCountersTableEntry.setStatus('current')
ibm3172ifBlkRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkRcvOctets.setStatus('current')
ibm3172ifBlkXmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkXmitOctets.setStatus('current')
ibm3172ifBlkRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkRcvFrames.setStatus('current')
ibm3172ifBlkXmitBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkXmitBlocks.setStatus('current')
ibm3172ifInBlkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInBlkErrors.setStatus('current')
ibm3172ifInBlkDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInBlkDiscards.setStatus('current')
ibm3172ifDblkCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 6), )
if mibBuilder.loadTexts: ibm3172ifDblkCountersTable.setStatus('current')
ibm3172ifDblkCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifDblkCountersTableEntry.setStatus('current')
ibm3172ifDblkRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkRcvOctets.setStatus('current')
ibm3172ifDblkXmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkXmitOctets.setStatus('current')
ibm3172ifDblkRcvBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkRcvBlocks.setStatus('current')
ibm3172ifDblkXmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkXmitFrames.setStatus('current')
ibm3172ifOutDblkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutDblkErrors.setStatus('current')
ibm3172ifOutDblkDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutDblkDiscards.setStatus('current')
ibm3172ifDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 7), )
if mibBuilder.loadTexts: ibm3172ifDeviceTable.setStatus('current')
ibm3172ifDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifDeviceTableEntry.setStatus('current')
ibm3172ifDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDeviceNumber.setStatus('current')
ibm3172MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2))
ibm3172MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 1))
ibm3172MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 2))
ibm3172MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 1, 1)).setObjects(("IBM3172-MIB", "ibm3172Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibm3172MIBCompliance = ibm3172MIBCompliance.setStatus('current')
ibm3172Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 2, 1)).setObjects(("IBM3172-MIB", "ibm3172Descr"), ("IBM3172-MIB", "ibm3172Contact"), ("IBM3172-MIB", "ibm3172Location"), ("IBM3172-MIB", "ibm3172ifNumber"), ("IBM3172-MIB", "ibm3172ifTrapEnable"), ("IBM3172-MIB", "ibm3172ifInChanOctets"), ("IBM3172-MIB", "ibm3172ifOutChanOctets"), ("IBM3172-MIB", "ibm3172ifInChanBlocks"), ("IBM3172-MIB", "ibm3172ifOutChanBlocks"), ("IBM3172-MIB", "ibm3172ifInLANOctets"), ("IBM3172-MIB", "ibm3172ifOutLANOctets"), ("IBM3172-MIB", "ibm3172ifInLANFrames"), ("IBM3172-MIB", "ibm3172ifOutLANFrames"), ("IBM3172-MIB", "ibm3172ifInLANErrors"), ("IBM3172-MIB", "ibm3172ifOutLANErrors"), ("IBM3172-MIB", "ibm3172ifInLANDiscards"), ("IBM3172-MIB", "ibm3172ifOutLANDiscards"), ("IBM3172-MIB", "ibm3172ifBlkRcvOctets"), ("IBM3172-MIB", "ibm3172ifBlkXmitOctets"), ("IBM3172-MIB", "ibm3172ifBlkRcvFrames"), ("IBM3172-MIB", "ibm3172ifBlkXmitBlocks"), ("IBM3172-MIB", "ibm3172ifInBlkErrors"), ("IBM3172-MIB", "ibm3172ifInBlkDiscards"), ("IBM3172-MIB", "ibm3172ifDblkRcvOctets"), ("IBM3172-MIB", "ibm3172ifDblkXmitOctets"), ("IBM3172-MIB", "ibm3172ifDblkRcvBlocks"), ("IBM3172-MIB", "ibm3172ifDblkXmitFrames"), ("IBM3172-MIB", "ibm3172ifOutDblkErrors"), ("IBM3172-MIB", "ibm3172ifOutDblkDiscards"), ("IBM3172-MIB", "ibm3172ifDeviceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibm3172Group = ibm3172Group.setStatus('current')
mibBuilder.exportSymbols("IBM3172-MIB", ibm3172ifDeviceTable=ibm3172ifDeviceTable, PYSNMP_MODULE_ID=ibm3172MIB, ibm3172ifOutChanOctets=ibm3172ifOutChanOctets, ibm3172ifDeviceNumber=ibm3172ifDeviceNumber, ibm3172ifOutLANOctets=ibm3172ifOutLANOctets, ibm3172ifOutLANErrors=ibm3172ifOutLANErrors, ibm3172ifInBlkDiscards=ibm3172ifInBlkDiscards, ibm3172ifBlkCountersTable=ibm3172ifBlkCountersTable, ibm=ibm, ibm3172ifTrapEnable=ibm3172ifTrapEnable, ibm3172ifLANCountersTable=ibm3172ifLANCountersTable, ibm3172ifInChanOctets=ibm3172ifInChanOctets, ibm3172ifOutDblkDiscards=ibm3172ifOutDblkDiscards, ibm3172=ibm3172, ibm3172ifOutDblkErrors=ibm3172ifOutDblkErrors, ibm3172Contact=ibm3172Contact, ibm3172ifNumber=ibm3172ifNumber, ibm3172ifChanCountersTableEntry=ibm3172ifChanCountersTableEntry, ibm3172ifBlkXmitOctets=ibm3172ifBlkXmitOctets, ibm3172MIBCompliances=ibm3172MIBCompliances, ibm3172ifInChanBlocks=ibm3172ifInChanBlocks, ibm3172ifDblkRcvOctets=ibm3172ifDblkRcvOctets, ibm3172ifChanCountersTable=ibm3172ifChanCountersTable, ibm3172ifInLANErrors=ibm3172ifInLANErrors, ibm3172MIB=ibm3172MIB, ibm3172MIBCompliance=ibm3172MIBCompliance, ibm3172Location=ibm3172Location, ibm3172ifTrapTableEntry=ibm3172ifTrapTableEntry, ibm3172ifInLANDiscards=ibm3172ifInLANDiscards, ibm3172SystemTable=ibm3172SystemTable, ibm3172ifBlkXmitBlocks=ibm3172ifBlkXmitBlocks, ibm3172Group=ibm3172Group, ibm3172ifOutLANDiscards=ibm3172ifOutLANDiscards, ibm3172ifOutChanBlocks=ibm3172ifOutChanBlocks, ibm3172ifInLANOctets=ibm3172ifInLANOctets, ibm3172ifBlkRcvFrames=ibm3172ifBlkRcvFrames, ibm3172ifTrapTable=ibm3172ifTrapTable, ibm3172ifDeviceTableEntry=ibm3172ifDeviceTableEntry, ibm3172ifLANCountersTableEntry=ibm3172ifLANCountersTableEntry, ibm3172ifBlkCountersTableEntry=ibm3172ifBlkCountersTableEntry, ibm3172SystemTableEntry=ibm3172SystemTableEntry, ibm3172ifOutLANFrames=ibm3172ifOutLANFrames, ibm3172ifDblkCountersTableEntry=ibm3172ifDblkCountersTableEntry, ibm3172ifInLANFrames=ibm3172ifInLANFrames, ibm3172ifBlkRcvOctets=ibm3172ifBlkRcvOctets, ibm3172ifDblkRcvBlocks=ibm3172ifDblkRcvBlocks, ibm3172ifInBlkErrors=ibm3172ifInBlkErrors, ibm3172Descr=ibm3172Descr, ibm3172MIBConformance=ibm3172MIBConformance, ibmProd=ibmProd, ibm3172MIBGroups=ibm3172MIBGroups, ibm3172ifDblkCountersTable=ibm3172ifDblkCountersTable, ibm3172ifDblkXmitOctets=ibm3172ifDblkXmitOctets, ibm3172ifDblkXmitFrames=ibm3172ifDblkXmitFrames)
