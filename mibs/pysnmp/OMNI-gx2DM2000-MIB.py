#
# PySNMP MIB module OMNI-gx2DM2000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2DM2000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
gx2Dm2000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Dm2000")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemAdminState, trapNetworkElemModelNumber, trapNetworkElemAvailStatus, trapChangedObjectId, trapNetworkElemAlarmStatus, trapNETrapLastTrapTimeStamp, trapIdentifier, trapChangedValueDisplayString, trapNetworkElemOperState, trapChangedValueInteger, trapText, trapNetworkElemSerialNum, trapPerceivedSeverity = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState", "trapNetworkElemModelNumber", "trapNetworkElemAvailStatus", "trapChangedObjectId", "trapNetworkElemAlarmStatus", "trapNETrapLastTrapTimeStamp", "trapIdentifier", "trapChangedValueDisplayString", "trapNetworkElemOperState", "trapChangedValueInteger", "trapText", "trapNetworkElemSerialNum", "trapPerceivedSeverity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Gauge32, Bits, Unsigned32, Counter32, MibIdentifier, iso, TimeTicks, NotificationType, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Gauge32", "Bits", "Unsigned32", "Counter32", "MibIdentifier", "iso", "TimeTicks", "NotificationType", "NotificationType", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2dm2000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 1))
gx2dm2000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2), )
if mibBuilder.loadTexts: gx2dm2000AnalogTable.setStatus('mandatory')
gx2dm2000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1), ).setIndexNames((0, "OMNI-gx2DM2000-MIB", "gx2dm2000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2dm2000AnalogEntry.setStatus('mandatory')
gx2dm2000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3), )
if mibBuilder.loadTexts: gx2dm2000DigitalTable.setStatus('mandatory')
gx2dm2000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2), ).setIndexNames((0, "OMNI-gx2DM2000-MIB", "gx2dm2000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2dm2000DigitalEntry.setStatus('mandatory')
gx2dm2000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4), )
if mibBuilder.loadTexts: gx2dm2000StatusTable.setStatus('mandatory')
gx2dm2000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3), ).setIndexNames((0, "OMNI-gx2DM2000-MIB", "gx2dm2000StatusTableIndex"))
if mibBuilder.loadTexts: gx2dm2000StatusEntry.setStatus('mandatory')
gx2dm2000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5), )
if mibBuilder.loadTexts: gx2dm2000FactoryTable.setStatus('mandatory')
gx2dm2000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4), ).setIndexNames((0, "OMNI-gx2DM2000-MIB", "gx2dm2000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2dm2000FactoryEntry.setStatus('mandatory')
gx2Dm2000HoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 6), )
if mibBuilder.loadTexts: gx2Dm2000HoldTimeTable.setStatus('mandatory')
gx2Dm2000HoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 6, 5), ).setIndexNames((0, "OMNI-gx2DM2000-MIB", "gx2Dm2000HoldTimeTableIndex"), (0, "OMNI-gx2DM2000-MIB", "gx2Dm2000HoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Dm2000HoldTimeEntry.setStatus('mandatory')
gx2dm2000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dm2000AnalogTableIndex.setStatus('mandatory')
dm2000labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelOffsetNomMonitor.setStatus('optional')
dm2000uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomOffsetNomMonitor.setStatus('optional')
dm2000majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighOffsetNomMonitor.setStatus('mandatory')
dm2000majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowOffsetNomMonitor.setStatus('mandatory')
dm2000minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighOffsetNomMonitor.setStatus('mandatory')
dm2000minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowOffsetNomMonitor.setStatus('mandatory')
dm2000currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueOffsetNomMonitor.setStatus('mandatory')
dm2000stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagOffsetNomMonitor.setStatus('mandatory')
dm2000minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueOffsetNomMonitor.setStatus('mandatory')
dm2000maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueOffsetNomMonitor.setStatus('mandatory')
dm2000alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateOffsetNomMonitor.setStatus('mandatory')
dm2000labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelOffsetNomCnt.setStatus('optional')
dm2000uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomOffsetNomCnt.setStatus('optional')
dm2000majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighOffsetNomCnt.setStatus('mandatory')
dm2000majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowOffsetNomCnt.setStatus('mandatory')
dm2000minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighOffsetNomCnt.setStatus('mandatory')
dm2000minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowOffsetNomCnt.setStatus('mandatory')
dm2000currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000currentValueOffsetNomCnt.setStatus('mandatory')
dm2000stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagOffsetNomCnt.setStatus('mandatory')
dm2000minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueOffsetNomCnt.setStatus('mandatory')
dm2000maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueOffsetNomCnt.setStatus('mandatory')
dm2000alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateOffsetNomCnt.setStatus('mandatory')
dm2000labelRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelRelAttenSetting.setStatus('optional')
dm2000uomRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomRelAttenSetting.setStatus('optional')
dm2000majorHighRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighRelAttenSetting.setStatus('mandatory')
dm2000majorLowRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowRelAttenSetting.setStatus('mandatory')
dm2000minorHighRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighRelAttenSetting.setStatus('mandatory')
dm2000minorLowRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowRelAttenSetting.setStatus('mandatory')
dm2000currentValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000currentValueRelAttenSetting.setStatus('mandatory')
dm2000stateFlagRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagRelAttenSetting.setStatus('mandatory')
dm2000minValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueRelAttenSetting.setStatus('mandatory')
dm2000maxValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueRelAttenSetting.setStatus('mandatory')
dm2000alarmStateRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateRelAttenSetting.setStatus('mandatory')
dm2000labelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelOptPower.setStatus('optional')
dm2000uomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomOptPower.setStatus('optional')
dm2000majorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighOptPower.setStatus('mandatory')
dm2000majorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowOptPower.setStatus('mandatory')
dm2000minorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighOptPower.setStatus('mandatory')
dm2000minorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowOptPower.setStatus('mandatory')
dm2000currentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueOptPower.setStatus('mandatory')
dm2000stateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagOptPower.setStatus('mandatory')
dm2000minValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueOptPower.setStatus('mandatory')
dm2000maxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueOptPower.setStatus('mandatory')
dm2000alarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateOptPower.setStatus('mandatory')
dm2000labelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelLaserBias.setStatus('optional')
dm2000uomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomLaserBias.setStatus('optional')
dm2000majorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighLaserBias.setStatus('mandatory')
dm2000majorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowLaserBias.setStatus('mandatory')
dm2000minorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighLaserBias.setStatus('mandatory')
dm2000minorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowLaserBias.setStatus('mandatory')
dm2000currentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueLaserBias.setStatus('mandatory')
dm2000stateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagLaserBias.setStatus('mandatory')
dm2000minValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueLaserBias.setStatus('mandatory')
dm2000maxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueLaserBias.setStatus('mandatory')
dm2000alarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateLaserBias.setStatus('mandatory')
dm2000labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelTecCurrent.setStatus('optional')
dm2000uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomTecCurrent.setStatus('optional')
dm2000majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighTecCurrent.setStatus('mandatory')
dm2000majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowTecCurrent.setStatus('mandatory')
dm2000minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighTecCurrent.setStatus('mandatory')
dm2000minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowTecCurrent.setStatus('mandatory')
dm2000currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueTecCurrent.setStatus('mandatory')
dm2000stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagTecCurrent.setStatus('mandatory')
dm2000minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueTecCurrent.setStatus('mandatory')
dm2000maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueTecCurrent.setStatus('mandatory')
dm2000alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateTecCurrent.setStatus('mandatory')
dm2000labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelLaserTemp.setStatus('optional')
dm2000uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomLaserTemp.setStatus('optional')
dm2000majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighLaserTemp.setStatus('mandatory')
dm2000majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowLaserTemp.setStatus('mandatory')
dm2000minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighLaserTemp.setStatus('mandatory')
dm2000minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowLaserTemp.setStatus('mandatory')
dm2000currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueLaserTemp.setStatus('mandatory')
dm2000stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagLaserTemp.setStatus('mandatory')
dm2000minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueLaserTemp.setStatus('mandatory')
dm2000maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueLaserTemp.setStatus('mandatory')
dm2000alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateLaserTemp.setStatus('mandatory')
dm2000labelModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelModuleTemp.setStatus('optional')
dm2000uomModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomModuleTemp.setStatus('optional')
dm2000majorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighModuleTemp.setStatus('mandatory')
dm2000majorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowModuleTemp.setStatus('mandatory')
dm2000minorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighModuleTemp.setStatus('mandatory')
dm2000minorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowModuleTemp.setStatus('mandatory')
dm2000currentValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueModuleTemp.setStatus('mandatory')
dm2000stateFlagModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagModuleTemp.setStatus('mandatory')
dm2000minValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueModuleTemp.setStatus('mandatory')
dm2000maxValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueModuleTemp.setStatus('mandatory')
dm2000alarmStateModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateModuleTemp.setStatus('mandatory')
dm2000labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelFanCurrent.setStatus('optional')
dm2000uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uomFanCurrent.setStatus('optional')
dm2000majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHighFanCurrent.setStatus('mandatory')
dm2000majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLowFanCurrent.setStatus('mandatory')
dm2000minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHighFanCurrent.setStatus('mandatory')
dm2000minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLowFanCurrent.setStatus('mandatory')
dm2000currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValueFanCurrent.setStatus('mandatory')
dm2000stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlagFanCurrent.setStatus('mandatory')
dm2000minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValueFanCurrent.setStatus('mandatory')
dm2000maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValueFanCurrent.setStatus('mandatory')
dm2000alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmStateFanCurrent.setStatus('mandatory')
dm2000label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000label12Volt.setStatus('optional')
dm2000uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000uom12Volt.setStatus('optional')
dm2000majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorHigh12Volt.setStatus('mandatory')
dm2000majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000majorLow12Volt.setStatus('mandatory')
dm2000minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorHigh12Volt.setStatus('mandatory')
dm2000minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minorLow12Volt.setStatus('mandatory')
dm2000currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000currentValue12Volt.setStatus('mandatory')
dm2000stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateFlag12Volt.setStatus('mandatory')
dm2000minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000minValue12Volt.setStatus('mandatory')
dm2000maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000maxValue12Volt.setStatus('mandatory')
dm2000alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000alarmState12Volt.setStatus('mandatory')
gx2dm2000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dm2000DigitalTableIndex.setStatus('mandatory')
dm2000labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelRfInput.setStatus('optional')
dm2000enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumRfInput.setStatus('optional')
dm2000valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueRfInput.setStatus('mandatory')
dm2000stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagRfInput.setStatus('mandatory')
dm2000labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelOptOutput.setStatus('optional')
dm2000enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumOptOutput.setStatus('optional')
dm2000valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueOptOutput.setStatus('mandatory')
dm2000stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagOptOutput.setStatus('mandatory')
dm2000labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelLaserMode.setStatus('optional')
dm2000enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumLaserMode.setStatus('optional')
dm2000valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueLaserMode.setStatus('mandatory')
dm2000stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagLaserMode.setStatus('mandatory')
dm2000labelLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelLaserSecMode.setStatus('optional')
dm2000enumLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumLaserSecMode.setStatus('optional')
dm2000valueLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw", 1), ("video", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueLaserSecMode.setStatus('mandatory')
dm2000stateflagLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagLaserSecMode.setStatus('mandatory')
dm2000labelVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelVideoOffset.setStatus('optional')
dm2000enumVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumVideoOffset.setStatus('optional')
dm2000valueVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("minus2dB", 1), ("minus3dB", 2), ("minus4dB", 3), ("minus5dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueVideoOffset.setStatus('mandatory')
dm2000stateflagVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagVideoOffset.setStatus('mandatory')
dm2000labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelFactoryDefault.setStatus('optional')
dm2000enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumFactoryDefault.setStatus('optional')
dm2000valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueFactoryDefault.setStatus('mandatory')
dm2000stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagFactoryDefault.setStatus('mandatory')
dm2000labelFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelFiberLength.setStatus('optional')
dm2000enumFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumFiberLength.setStatus('optional')
dm2000valueFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueFiberLength.setStatus('mandatory')
dm2000stateflagFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagFiberLength.setStatus('mandatory')
dm2000labelWavelengthOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelWavelengthOffset.setStatus('optional')
dm2000enumWavelengthOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000enumWavelengthOffset.setStatus('optional')
dm2000valueWavelengthOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("narrowcast", 1), ("FullSpectrum", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm2000valueWavelengthOffset.setStatus('mandatory')
dm2000stateflagWavelengthOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagWavelengthOffset.setStatus('mandatory')
gx2dm2000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dm2000StatusTableIndex.setStatus('mandatory')
dm2000labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelBoot.setStatus('optional')
dm2000valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueBoot.setStatus('mandatory')
dm2000stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagBoot.setStatus('mandatory')
dm2000labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelFlash.setStatus('optional')
dm2000valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueFlash.setStatus('mandatory')
dm2000stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagFlash.setStatus('mandatory')
dm2000labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelFactoryDataCRC.setStatus('optional')
dm2000valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueFactoryDataCRC.setStatus('mandatory')
dm2000stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagFactoryDataCRC.setStatus('mandatory')
dm2000labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelLaserDataCRC.setStatus('optional')
dm2000valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueLaserDataCRC.setStatus('mandatory')
dm2000stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagLaserDataCRC.setStatus('mandatory')
dm2000labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelAlarmDataCrc.setStatus('optional')
dm2000valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueAlarmDataCrc.setStatus('mandatory')
dm2000stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagAlarmDataCrc.setStatus('mandatory')
dm2000labelHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelHWStatus.setStatus('optional')
dm2000valueHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueHWStatus.setStatus('mandatory')
dm2000stateflagHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagHWStatus.setStatus('mandatory')
dm2000labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000labelRFInputStatus.setStatus('optional')
dm2000valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000valueRFInputStatus.setStatus('mandatory')
dm2000stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000stateflagRFInputStatus.setStatus('mandatory')
gx2dm2000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dm2000FactoryTableIndex.setStatus('mandatory')
dm2000bootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000bootControlByteValue.setStatus('mandatory')
dm2000bootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000bootStatusByteValue.setStatus('mandatory')
dm2000bank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000bank1CRCValue.setStatus('mandatory')
dm2000bank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000bank2CRCValue.setStatus('mandatory')
dm2000prgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000prgEEPROMByteValue.setStatus('mandatory')
dm2000factoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000factoryCRCValue.setStatus('mandatory')
dm2000calculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("laserData", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000calculateCRCValue.setStatus('mandatory')
dm2000hourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000hourMeterValue.setStatus('mandatory')
dm2000flashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000flashPrgCntAValue.setStatus('mandatory')
dm2000flashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000flashPrgCntBValue.setStatus('mandatory')
dm2000flashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000flashBankARevValue.setStatus('mandatory')
dm2000flashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm2000flashBankBRevValue.setStatus('mandatory')
gx2Dm2000HoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm2000HoldTimeTableIndex.setStatus('mandatory')
gx2Dm2000HoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm2000HoldTimeSpecIndex.setStatus('mandatory')
gx2Dm2000HoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2Dm2000HoldTimeData.setStatus('mandatory')
trapDM2000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000RFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000RFOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000OpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000LaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000LaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000TECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM200012vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000LaserBiasCntLoopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000LaserBiasCntLoopInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000RFParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000TECParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000AttnTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000PowerMeterTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000LaserDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000UserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000UserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM2000ResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 34) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2DM2000-MIB", dm2000labelFactoryDefault=dm2000labelFactoryDefault, dm2000minorLowModuleTemp=dm2000minorLowModuleTemp, dm2000uomOptPower=dm2000uomOptPower, dm2000currentValueTecCurrent=dm2000currentValueTecCurrent, dm2000maxValue12Volt=dm2000maxValue12Volt, dm2000valueWavelengthOffset=dm2000valueWavelengthOffset, dm2000minorLowOffsetNomCnt=dm2000minorLowOffsetNomCnt, dm2000majorHigh12Volt=dm2000majorHigh12Volt, dm2000majorLowModuleTemp=dm2000majorLowModuleTemp, dm2000stateFlagModuleTemp=dm2000stateFlagModuleTemp, dm2000stateFlag12Volt=dm2000stateFlag12Volt, dm2000stateflagBoot=dm2000stateflagBoot, trapDM2000BankBootAlarm=trapDM2000BankBootAlarm, dm2000labelVideoOffset=dm2000labelVideoOffset, trapDM2000RFInputAlarm=trapDM2000RFInputAlarm, dm2000minorHighFanCurrent=dm2000minorHighFanCurrent, dm2000labelWavelengthOffset=dm2000labelWavelengthOffset, dm2000minorLowFanCurrent=dm2000minorLowFanCurrent, dm2000alarmState12Volt=dm2000alarmState12Volt, trapDM2000FanCurrentAlarm=trapDM2000FanCurrentAlarm, dm2000labelRfInput=dm2000labelRfInput, dm2000minValueFanCurrent=dm2000minValueFanCurrent, gx2dm2000StatusTable=gx2dm2000StatusTable, dm2000labelFanCurrent=dm2000labelFanCurrent, dm2000stateFlagLaserTemp=dm2000stateFlagLaserTemp, dm2000valueFactoryDefault=dm2000valueFactoryDefault, dm2000stateflagOptOutput=dm2000stateflagOptOutput, trapDM200012vAlarm=trapDM200012vAlarm, dm2000stateflagLaserDataCRC=dm2000stateflagLaserDataCRC, dm2000majorHighModuleTemp=dm2000majorHighModuleTemp, dm2000stateFlagOffsetNomCnt=dm2000stateFlagOffsetNomCnt, dm2000currentValueModuleTemp=dm2000currentValueModuleTemp, dm2000majorLowOptPower=dm2000majorLowOptPower, dm2000uomModuleTemp=dm2000uomModuleTemp, dm2000stateflagFlash=dm2000stateflagFlash, dm2000factoryCRCValue=dm2000factoryCRCValue, dm2000labelFactoryDataCRC=dm2000labelFactoryDataCRC, trapDM2000RFOffsetAlarm=trapDM2000RFOffsetAlarm, dm2000currentValueOffsetNomCnt=dm2000currentValueOffsetNomCnt, gx2Dm2000HoldTimeTableIndex=gx2Dm2000HoldTimeTableIndex, dm2000uomRelAttenSetting=dm2000uomRelAttenSetting, trapDM2000LaserBiasAlarm=trapDM2000LaserBiasAlarm, dm2000minValueOffsetNomMonitor=dm2000minValueOffsetNomMonitor, dm2000enumOptOutput=dm2000enumOptOutput, dm2000majorLowLaserTemp=dm2000majorLowLaserTemp, dm2000labelModuleTemp=dm2000labelModuleTemp, dm2000stateflagRFInputStatus=dm2000stateflagRFInputStatus, dm2000valueBoot=dm2000valueBoot, gx2dm2000DigitalTable=gx2dm2000DigitalTable, trapDM2000AlarmDataCRCAlarm=trapDM2000AlarmDataCRCAlarm, dm2000majorHighRelAttenSetting=dm2000majorHighRelAttenSetting, dm2000minorHighOptPower=dm2000minorHighOptPower, trapDM2000TECParamInitAlarm=trapDM2000TECParamInitAlarm, dm2000currentValueOptPower=dm2000currentValueOptPower, dm2000maxValueOptPower=dm2000maxValueOptPower, trapDM2000UserRFOffAlarm=trapDM2000UserRFOffAlarm, gx2dm2000Descriptor=gx2dm2000Descriptor, dm2000majorHighOffsetNomMonitor=dm2000majorHighOffsetNomMonitor, dm2000labelBoot=dm2000labelBoot, dm2000currentValueLaserTemp=dm2000currentValueLaserTemp, dm2000valueFiberLength=dm2000valueFiberLength, dm2000valueRfInput=dm2000valueRfInput, dm2000minValueOffsetNomCnt=dm2000minValueOffsetNomCnt, dm2000stateFlagFanCurrent=dm2000stateFlagFanCurrent, gx2dm2000FactoryTableIndex=gx2dm2000FactoryTableIndex, dm2000minorLowLaserTemp=dm2000minorLowLaserTemp, trapDM2000ResetFactoryDefaultAlarm=trapDM2000ResetFactoryDefaultAlarm, dm2000currentValueRelAttenSetting=dm2000currentValueRelAttenSetting, dm2000majorLowOffsetNomMonitor=dm2000majorLowOffsetNomMonitor, dm2000uomOffsetNomCnt=dm2000uomOffsetNomCnt, gx2dm2000StatusEntry=gx2dm2000StatusEntry, trapDM2000RFOverloadAlarm=trapDM2000RFOverloadAlarm, dm2000alarmStateModuleTemp=dm2000alarmStateModuleTemp, dm2000flashPrgCntBValue=dm2000flashPrgCntBValue, dm2000majorLowTecCurrent=dm2000majorLowTecCurrent, gx2dm2000StatusTableIndex=gx2dm2000StatusTableIndex, dm2000majorLowOffsetNomCnt=dm2000majorLowOffsetNomCnt, trapDM2000ConfigChangeInteger=trapDM2000ConfigChangeInteger, dm2000maxValueTecCurrent=dm2000maxValueTecCurrent, dm2000alarmStateFanCurrent=dm2000alarmStateFanCurrent, dm2000stateFlagRelAttenSetting=dm2000stateFlagRelAttenSetting, dm2000labelLaserTemp=dm2000labelLaserTemp, dm2000labelLaserMode=dm2000labelLaserMode, dm2000stateflagFiberLength=dm2000stateflagFiberLength, dm2000stateflagWavelengthOffset=dm2000stateflagWavelengthOffset, dm2000minorHighLaserTemp=dm2000minorHighLaserTemp, trapDM2000OpticalPowerAlarm=trapDM2000OpticalPowerAlarm, dm2000minorHighModuleTemp=dm2000minorHighModuleTemp, gx2Dm2000HoldTimeData=gx2Dm2000HoldTimeData, Float=Float, dm2000currentValueOffsetNomMonitor=dm2000currentValueOffsetNomMonitor, dm2000valueLaserSecMode=dm2000valueLaserSecMode, dm2000labelLaserDataCRC=dm2000labelLaserDataCRC, dm2000flashPrgCntAValue=dm2000flashPrgCntAValue, dm2000enumLaserMode=dm2000enumLaserMode, dm2000label12Volt=dm2000label12Volt, dm2000minorLow12Volt=dm2000minorLow12Volt, dm2000minValueTecCurrent=dm2000minValueTecCurrent, dm2000maxValueLaserTemp=dm2000maxValueLaserTemp, dm2000valueLaserMode=dm2000valueLaserMode, dm2000majorHighLaserBias=dm2000majorHighLaserBias, dm2000labelFiberLength=dm2000labelFiberLength, trapDM2000LaserTempAlarm=trapDM2000LaserTempAlarm, dm2000labelOffsetNomMonitor=dm2000labelOffsetNomMonitor, dm2000stateflagFactoryDataCRC=dm2000stateflagFactoryDataCRC, dm2000bank1CRCValue=dm2000bank1CRCValue, trapDM2000FactoryDataCRCAlarm=trapDM2000FactoryDataCRCAlarm, gx2dm2000FactoryEntry=gx2dm2000FactoryEntry, dm2000enumVideoOffset=dm2000enumVideoOffset, dm2000alarmStateLaserBias=dm2000alarmStateLaserBias, dm2000alarmStateOffsetNomMonitor=dm2000alarmStateOffsetNomMonitor, dm2000uomTecCurrent=dm2000uomTecCurrent, dm2000currentValue12Volt=dm2000currentValue12Volt, dm2000uomOffsetNomMonitor=dm2000uomOffsetNomMonitor, dm2000enumFiberLength=dm2000enumFiberLength, dm2000labelLaserBias=dm2000labelLaserBias, dm2000enumLaserSecMode=dm2000enumLaserSecMode, dm2000prgEEPROMByteValue=dm2000prgEEPROMByteValue, dm2000valueFactoryDataCRC=dm2000valueFactoryDataCRC, dm2000minorHigh12Volt=dm2000minorHigh12Volt, dm2000valueOptOutput=dm2000valueOptOutput, dm2000labelOptOutput=dm2000labelOptOutput, dm2000stateflagLaserMode=dm2000stateflagLaserMode, dm2000valueVideoOffset=dm2000valueVideoOffset, trapDM2000RFParamInitAlarm=trapDM2000RFParamInitAlarm, dm2000majorHighFanCurrent=dm2000majorHighFanCurrent, dm2000maxValueRelAttenSetting=dm2000maxValueRelAttenSetting, dm2000labelRelAttenSetting=dm2000labelRelAttenSetting, dm2000bank2CRCValue=dm2000bank2CRCValue, dm2000uomLaserTemp=dm2000uomLaserTemp, dm2000stateflagFactoryDefault=dm2000stateflagFactoryDefault, dm2000alarmStateTecCurrent=dm2000alarmStateTecCurrent, dm2000uomLaserBias=dm2000uomLaserBias, trapDM2000ConfigChangeDisplayString=trapDM2000ConfigChangeDisplayString, trapDM2000ModuleTempAlarm=trapDM2000ModuleTempAlarm, dm2000minorLowLaserBias=dm2000minorLowLaserBias, dm2000valueLaserDataCRC=dm2000valueLaserDataCRC, dm2000enumRfInput=dm2000enumRfInput, dm2000maxValueFanCurrent=dm2000maxValueFanCurrent, dm2000stateflagVideoOffset=dm2000stateflagVideoOffset, dm2000majorHighOptPower=dm2000majorHighOptPower, trapDM2000LaserBiasCntLoopInitAlarm=trapDM2000LaserBiasCntLoopInitAlarm, dm2000maxValueOffsetNomCnt=dm2000maxValueOffsetNomCnt, trapDM2000TECCurrentAlarm=trapDM2000TECCurrentAlarm, dm2000minValueLaserBias=dm2000minValueLaserBias, dm2000minorHighRelAttenSetting=dm2000minorHighRelAttenSetting, dm2000uomFanCurrent=dm2000uomFanCurrent, dm2000labelOptPower=dm2000labelOptPower, dm2000majorLowLaserBias=dm2000majorLowLaserBias, dm2000alarmStateOptPower=dm2000alarmStateOptPower, dm2000minorLowTecCurrent=dm2000minorLowTecCurrent, dm2000valueAlarmDataCrc=dm2000valueAlarmDataCrc, dm2000minorLowOffsetNomMonitor=dm2000minorLowOffsetNomMonitor, dm2000labelAlarmDataCrc=dm2000labelAlarmDataCrc, dm2000labelHWStatus=dm2000labelHWStatus, gx2Dm2000HoldTimeSpecIndex=gx2Dm2000HoldTimeSpecIndex, dm2000minValueModuleTemp=dm2000minValueModuleTemp, trapDM2000LaserBiasCntLoopAlarm=trapDM2000LaserBiasCntLoopAlarm, dm2000labelFlash=dm2000labelFlash, dm2000maxValueOffsetNomMonitor=dm2000maxValueOffsetNomMonitor, dm2000majorLowRelAttenSetting=dm2000majorLowRelAttenSetting, dm2000uom12Volt=dm2000uom12Volt, dm2000stateflagLaserSecMode=dm2000stateflagLaserSecMode, dm2000flashBankBRevValue=dm2000flashBankBRevValue, dm2000minorLowRelAttenSetting=dm2000minorLowRelAttenSetting, gx2dm2000AnalogTable=gx2dm2000AnalogTable, dm2000minorHighOffsetNomCnt=dm2000minorHighOffsetNomCnt, dm2000enumWavelengthOffset=dm2000enumWavelengthOffset, dm2000alarmStateOffsetNomCnt=dm2000alarmStateOffsetNomCnt, dm2000minValueOptPower=dm2000minValueOptPower, dm2000minorHighLaserBias=dm2000minorHighLaserBias, dm2000stateflagHWStatus=dm2000stateflagHWStatus, dm2000hourMeterValue=dm2000hourMeterValue, gx2Dm2000HoldTimeEntry=gx2Dm2000HoldTimeEntry, dm2000alarmStateLaserTemp=dm2000alarmStateLaserTemp, dm2000stateFlagOffsetNomMonitor=dm2000stateFlagOffsetNomMonitor, dm2000stateFlagTecCurrent=dm2000stateFlagTecCurrent, dm2000majorHighOffsetNomCnt=dm2000majorHighOffsetNomCnt, dm2000maxValueLaserBias=dm2000maxValueLaserBias, trapDM2000FlashAlarm=trapDM2000FlashAlarm, dm2000currentValueLaserBias=dm2000currentValueLaserBias, dm2000minValueLaserTemp=dm2000minValueLaserTemp, gx2Dm2000HoldTimeTable=gx2Dm2000HoldTimeTable, dm2000valueRFInputStatus=dm2000valueRFInputStatus, dm2000calculateCRCValue=dm2000calculateCRCValue, dm2000majorLow12Volt=dm2000majorLow12Volt, gx2dm2000DigitalTableIndex=gx2dm2000DigitalTableIndex, dm2000stateflagAlarmDataCrc=dm2000stateflagAlarmDataCrc, dm2000minValueRelAttenSetting=dm2000minValueRelAttenSetting, dm2000majorHighLaserTemp=dm2000majorHighLaserTemp, gx2dm2000DigitalEntry=gx2dm2000DigitalEntry, dm2000minorLowOptPower=dm2000minorLowOptPower, dm2000valueFlash=dm2000valueFlash, dm2000currentValueFanCurrent=dm2000currentValueFanCurrent, trapDM2000LaserDataCRCAlarm=trapDM2000LaserDataCRCAlarm, dm2000labelTecCurrent=dm2000labelTecCurrent, dm2000minorHighTecCurrent=dm2000minorHighTecCurrent, dm2000valueHWStatus=dm2000valueHWStatus, gx2dm2000AnalogTableIndex=gx2dm2000AnalogTableIndex, dm2000flashBankARevValue=dm2000flashBankARevValue, trapDM2000PowerMeterTableInitAlarm=trapDM2000PowerMeterTableInitAlarm, dm2000stateFlagLaserBias=dm2000stateFlagLaserBias, gx2dm2000AnalogEntry=gx2dm2000AnalogEntry, trapDM2000AttnTableInitAlarm=trapDM2000AttnTableInitAlarm, dm2000labelLaserSecMode=dm2000labelLaserSecMode, dm2000minValue12Volt=dm2000minValue12Volt, dm2000majorHighTecCurrent=dm2000majorHighTecCurrent, dm2000stateFlagOptPower=dm2000stateFlagOptPower, dm2000alarmStateRelAttenSetting=dm2000alarmStateRelAttenSetting, trapDM2000UserOpticalOffAlarm=trapDM2000UserOpticalOffAlarm, dm2000labelOffsetNomCnt=dm2000labelOffsetNomCnt, dm2000enumFactoryDefault=dm2000enumFactoryDefault, dm2000minorHighOffsetNomMonitor=dm2000minorHighOffsetNomMonitor, dm2000maxValueModuleTemp=dm2000maxValueModuleTemp, dm2000bootControlByteValue=dm2000bootControlByteValue, dm2000stateflagRfInput=dm2000stateflagRfInput, dm2000bootStatusByteValue=dm2000bootStatusByteValue, dm2000labelRFInputStatus=dm2000labelRFInputStatus, gx2dm2000FactoryTable=gx2dm2000FactoryTable, dm2000majorLowFanCurrent=dm2000majorLowFanCurrent)
