#
# PySNMP MIB module CISCO-CALL-TRACKER-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CALL-TRACKER-MODEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:34:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
cctActiveCallId, cctHistoryIndex = mibBuilder.importSymbols("CISCO-CALL-TRACKER-MIB", "cctActiveCallId", "cctHistoryIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibIdentifier, Counter32, Unsigned32, Counter64, NotificationType, Integer32, Bits, iso, TimeTicks, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Counter32", "Unsigned32", "Counter64", "NotificationType", "Integer32", "Bits", "iso", "TimeTicks", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoCallTrackerModemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 165))
ciscoCallTrackerModemMIB.setRevisions(('2005-12-06 00:00', '2001-12-14 00:00',))
if mibBuilder.loadTexts: ciscoCallTrackerModemMIB.setLastUpdated('200512060000Z')
if mibBuilder.loadTexts: ciscoCallTrackerModemMIB.setOrganization('Cisco Systems, Inc.')
class CctmModulation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("other", 1), ("bell103a", 2), ("bell212a", 3), ("v21", 4), ("v22", 5), ("v22bis", 6), ("v32", 7), ("v32bis", 8), ("vfc", 9), ("v34", 10), ("v17", 11), ("v29", 12), ("v33", 13), ("k56flex", 14), ("v23", 15), ("v32terbo", 16), ("v34plus", 17), ("v90", 18), ("v27ter", 19), ("v110", 20))

class CctmECProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("normal", 1), ("direct", 2), ("mnp", 3), ("lapmV42", 4), ("syncMode", 5), ("asyncMode", 6), ("ara1", 7), ("ara2", 8), ("other", 9))

class CctmDataCompression(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("v42bisTx", 2), ("v42bisRx", 3), ("v42bisBoth", 4), ("mnp5", 5), ("v44Tx", 6), ("v44Rx", 7), ("v44Both", 8))

cctmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 1))
cctmActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1))
cctmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2))
cctmActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1), )
if mibBuilder.loadTexts: cctmActiveTable.setStatus('current')
cctmActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CALL-TRACKER-MIB", "cctActiveCallId"))
if mibBuilder.loadTexts: cctmActiveEntry.setStatus('current')
cctmActiveProjectedMaxRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 1), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveProjectedMaxRxRate.setStatus('current')
cctmActiveProjectedMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 2), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveProjectedMaxTxRate.setStatus('current')
cctmActiveRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 3), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxRate.setStatus('current')
cctmActiveTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 4), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveTxRate.setStatus('current')
cctmActiveAttemptedModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 5), CctmModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveAttemptedModulation.setStatus('current')
cctmActiveInitialModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 6), CctmModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveInitialModulation.setStatus('current')
cctmActiveModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 7), CctmModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveModulation.setStatus('current')
cctmActiveAttemptedECProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 8), CctmECProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveAttemptedECProtocol.setStatus('current')
cctmActiveECProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 9), CctmECProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveECProtocol.setStatus('current')
cctmActiveSupportedDC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("mnp5", 0), ("v42bisRx", 1), ("v42bisTx", 2), ("v44Rx", 3), ("v44Tx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveSupportedDC.setStatus('current')
cctmActiveDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 11), CctmDataCompression()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveDataCompression.setStatus('current')
cctmActiveRxHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 12), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxHighWatermark.setStatus('current')
cctmActiveRxLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 13), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxLowWatermark.setStatus('current')
cctmActiveTxHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 14), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveTxHighWatermark.setStatus('current')
cctmActiveTxLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 15), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveTxLowWatermark.setStatus('current')
cctmActiveLocalUpRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveLocalUpRateShifts.setStatus('current')
cctmActiveLocalDownRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveLocalDownRateShifts.setStatus('current')
cctmActiveRemoteUpRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRemoteUpRateShifts.setStatus('current')
cctmActiveRemoteDownRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRemoteDownRateShifts.setStatus('current')
cctmActiveRateShiftFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRateShiftFailures.setStatus('current')
cctmActiveLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveLocalRetrains.setStatus('current')
cctmActiveRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRemoteRetrains.setStatus('current')
cctmActiveRetrainFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRetrainFailures.setStatus('current')
cctmActiveRxLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxLinkOctets.setStatus('current')
cctmActiveTxLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveTxLinkOctets.setStatus('current')
cctmActiveRxECFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxECFrames.setStatus('current')
cctmActiveTxECFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveTxECFrames.setStatus('current')
cctmActiveRxECNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxECNAKs.setStatus('current')
cctmActiveTxECNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveTxECNAKs.setStatus('current')
cctmActiveRxECFramesBad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxECFramesBad.setStatus('current')
cctmActiveECFramesResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveECFramesResent.setStatus('current')
cctmActiveECLinkTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveECLinkTimeouts.setStatus('current')
cctmActiveRxCharLost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmActiveRxCharLost.setStatus('current')
cctmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1), )
if mibBuilder.loadTexts: cctmHistoryTable.setStatus('current')
cctmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CALL-TRACKER-MIB", "cctHistoryIndex"))
if mibBuilder.loadTexts: cctmHistoryEntry.setStatus('current')
cctmHistoryProjectedMaxRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 1), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryProjectedMaxRxRate.setStatus('current')
cctmHistoryProjectedMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 2), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryProjectedMaxTxRate.setStatus('current')
cctmHistoryFinalRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 3), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryFinalRxRate.setStatus('current')
cctmHistoryFinalTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 4), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryFinalTxRate.setStatus('current')
cctmHistoryAttemptedModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 5), CctmModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryAttemptedModulation.setStatus('current')
cctmHistoryInitialModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 6), CctmModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryInitialModulation.setStatus('current')
cctmHistoryFinalModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 7), CctmModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryFinalModulation.setStatus('current')
cctmHistoryAttemptedECProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 8), CctmECProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryAttemptedECProtocol.setStatus('current')
cctmHistoryECProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 9), CctmECProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryECProtocol.setStatus('current')
cctmHistorySupportedDC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 10), Bits().clone(namedValues=NamedValues(("mnp5", 0), ("v42bisRx", 1), ("v42bisTx", 2), ("v44Rx", 3), ("v44Tx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistorySupportedDC.setStatus('current')
cctmHistoryDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 11), CctmDataCompression()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryDataCompression.setStatus('current')
cctmHistoryRxHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 12), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxHighWatermark.setStatus('current')
cctmHistoryRxLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 13), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxLowWatermark.setStatus('current')
cctmHistoryTxHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 14), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryTxHighWatermark.setStatus('current')
cctmHistoryTxLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 15), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryTxLowWatermark.setStatus('current')
cctmHistoryLocalUpRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryLocalUpRateShifts.setStatus('current')
cctmHistoryLocalDownRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryLocalDownRateShifts.setStatus('current')
cctmHistoryRemoteUpRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRemoteUpRateShifts.setStatus('current')
cctmHistoryRemoteDownRateShifts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRemoteDownRateShifts.setStatus('current')
cctmHistoryRateShiftFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRateShiftFailures.setStatus('current')
cctmHistoryLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryLocalRetrains.setStatus('current')
cctmHistoryRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRemoteRetrains.setStatus('current')
cctmHistoryRetrainFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRetrainFailures.setStatus('current')
cctmHistoryRxLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxLinkOctets.setStatus('current')
cctmHistoryTxLinkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryTxLinkOctets.setStatus('current')
cctmHistoryRxECFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxECFrames.setStatus('current')
cctmHistoryTxECFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryTxECFrames.setStatus('current')
cctmHistoryRxECNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxECNAKs.setStatus('current')
cctmHistoryTxECNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryTxECNAKs.setStatus('current')
cctmHistoryRxECFramesBad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxECFramesBad.setStatus('current')
cctmHistoryECFramesResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryECFramesResent.setStatus('current')
cctmHistoryECLinkTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryECLinkTimeouts.setStatus('current')
cctmHistoryRxCharLost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryRxCharLost.setStatus('current')
cctmHistoryDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryDisconnectReason.setStatus('current')
cctmHistoryDisconnectReasonText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmHistoryDisconnectReasonText.setStatus('current')
cctmXHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2), )
if mibBuilder.loadTexts: cctmXHistoryTable.setStatus('current')
cctmXHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1), )
cctmHistoryEntry.registerAugmentions(("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryEntry"))
cctmXHistoryEntry.setIndexNames(*cctmHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: cctmXHistoryEntry.setStatus('current')
cctmXHistoryRxECInfoFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 1), Unsigned32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryRxECInfoFrameSize.setStatus('current')
cctmXHistoryTxECInfoFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 2), Unsigned32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryTxECInfoFrameSize.setStatus('current')
cctmXHistoryRxECWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 3), Unsigned32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryRxECWindowSize.setStatus('current')
cctmXHistoryTxECWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 4), Unsigned32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryTxECWindowSize.setStatus('current')
cctmXHistoryRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 0))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryRxLevel.setStatus('current')
cctmXHistoryTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 0))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryTxLevel.setStatus('current')
cctmXHistoryConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("points4", 1), ("points16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryConstellation.setStatus('current')
cctmXHistoryV90Status = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAttempted", 1), ("failure", 2), ("success", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryV90Status.setStatus('current')
cctmXHistoryV90Failure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noFailure", 1), ("clientNonPCM", 2), ("clientFallback", 3), ("serverV90Disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryV90Failure.setStatus('current')
cctmXHistoryV90ClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryV90ClientId.setStatus('current')
cctmXHistoryECWindowClosures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 165, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cctmXHistoryECWindowClosures.setStatus('current')
cctmMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 2))
cctmMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 2, 0))
cctmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 3))
cctmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 3, 1))
cctmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 165, 3, 2))
cctmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 165, 3, 1, 1)).setObjects(("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveGroup"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryGroup"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cctmMIBCompliance = cctmMIBCompliance.setStatus('current')
cctmActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 165, 3, 2, 2)).setObjects(("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveProjectedMaxRxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveProjectedMaxTxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveTxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveAttemptedModulation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveInitialModulation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveModulation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveAttemptedECProtocol"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveECProtocol"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveSupportedDC"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveDataCompression"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxHighWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxLowWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveTxHighWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveTxLowWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveLocalUpRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRemoteUpRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveLocalDownRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRemoteDownRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRateShiftFailures"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveLocalRetrains"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRemoteRetrains"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRetrainFailures"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxLinkOctets"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveTxLinkOctets"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxECFrames"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveTxECFrames"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxECNAKs"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveTxECNAKs"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxECFramesBad"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveECFramesResent"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveECLinkTimeouts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmActiveRxCharLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cctmActiveGroup = cctmActiveGroup.setStatus('current')
cctmHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 165, 3, 2, 3)).setObjects(("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryProjectedMaxRxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryProjectedMaxTxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryFinalRxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryFinalTxRate"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryAttemptedModulation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryInitialModulation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryFinalModulation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryAttemptedECProtocol"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryECProtocol"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistorySupportedDC"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryDataCompression"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxHighWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxLowWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryTxHighWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryTxLowWatermark"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryLocalUpRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRemoteUpRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryLocalDownRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRemoteDownRateShifts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRateShiftFailures"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryLocalRetrains"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRemoteRetrains"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRetrainFailures"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxLinkOctets"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryTxLinkOctets"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxECFrames"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryTxECFrames"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxECNAKs"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryTxECNAKs"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxECFramesBad"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryECFramesResent"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryECLinkTimeouts"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryRxCharLost"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryDisconnectReason"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmHistoryDisconnectReasonText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cctmHistoryGroup = cctmHistoryGroup.setStatus('current')
cctmXHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 165, 3, 2, 4)).setObjects(("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryRxECInfoFrameSize"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryTxECInfoFrameSize"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryRxECWindowSize"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryTxECWindowSize"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryRxLevel"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryTxLevel"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryConstellation"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryV90Status"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryV90Failure"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryV90ClientId"), ("CISCO-CALL-TRACKER-MODEM-MIB", "cctmXHistoryECWindowClosures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cctmXHistoryGroup = cctmXHistoryGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CALL-TRACKER-MODEM-MIB", cctmActiveAttemptedECProtocol=cctmActiveAttemptedECProtocol, cctmHistoryProjectedMaxRxRate=cctmHistoryProjectedMaxRxRate, cctmHistoryRxECFrames=cctmHistoryRxECFrames, PYSNMP_MODULE_ID=ciscoCallTrackerModemMIB, cctmXHistoryGroup=cctmXHistoryGroup, cctmActiveRetrainFailures=cctmActiveRetrainFailures, cctmHistoryRetrainFailures=cctmHistoryRetrainFailures, cctmActiveEntry=cctmActiveEntry, cctmActiveTxECNAKs=cctmActiveTxECNAKs, cctmActiveRxCharLost=cctmActiveRxCharLost, cctmHistory=cctmHistory, cctmHistoryProjectedMaxTxRate=cctmHistoryProjectedMaxTxRate, cctmHistoryRemoteUpRateShifts=cctmHistoryRemoteUpRateShifts, cctmActiveRxRate=cctmActiveRxRate, cctmHistoryTxECFrames=cctmHistoryTxECFrames, CctmModulation=CctmModulation, cctmActiveTable=cctmActiveTable, cctmHistoryECProtocol=cctmHistoryECProtocol, cctmActiveProjectedMaxTxRate=cctmActiveProjectedMaxTxRate, cctmActiveRemoteDownRateShifts=cctmActiveRemoteDownRateShifts, CctmECProtocol=CctmECProtocol, cctmActiveTxLowWatermark=cctmActiveTxLowWatermark, cctmActiveInitialModulation=cctmActiveInitialModulation, cctmXHistoryV90ClientId=cctmXHistoryV90ClientId, cctmHistoryLocalDownRateShifts=cctmHistoryLocalDownRateShifts, cctmActiveAttemptedModulation=cctmActiveAttemptedModulation, cctmXHistoryRxECInfoFrameSize=cctmXHistoryRxECInfoFrameSize, cctmActiveECFramesResent=cctmActiveECFramesResent, cctmHistoryRemoteDownRateShifts=cctmHistoryRemoteDownRateShifts, cctmMIBNotificationPrefix=cctmMIBNotificationPrefix, cctmActiveTxRate=cctmActiveTxRate, cctmMIBConformance=cctmMIBConformance, cctmActiveRxLinkOctets=cctmActiveRxLinkOctets, cctmActiveTxHighWatermark=cctmActiveTxHighWatermark, cctmHistoryLocalUpRateShifts=cctmHistoryLocalUpRateShifts, cctmXHistoryTable=cctmXHistoryTable, cctmActiveRxECFrames=cctmActiveRxECFrames, cctmHistoryTxLowWatermark=cctmHistoryTxLowWatermark, cctmHistoryFinalRxRate=cctmHistoryFinalRxRate, cctmMIBGroups=cctmMIBGroups, cctmHistoryTxECNAKs=cctmHistoryTxECNAKs, cctmXHistoryV90Status=cctmXHistoryV90Status, cctmXHistoryRxLevel=cctmXHistoryRxLevel, cctmHistoryGroup=cctmHistoryGroup, cctmXHistoryConstellation=cctmXHistoryConstellation, cctmHistoryECFramesResent=cctmHistoryECFramesResent, CctmDataCompression=CctmDataCompression, cctmHistoryTable=cctmHistoryTable, cctmHistoryRxECFramesBad=cctmHistoryRxECFramesBad, cctmXHistoryRxECWindowSize=cctmXHistoryRxECWindowSize, cctmHistoryDisconnectReasonText=cctmHistoryDisconnectReasonText, cctmHistoryECLinkTimeouts=cctmHistoryECLinkTimeouts, cctmActiveRxECFramesBad=cctmActiveRxECFramesBad, cctmActiveRemoteRetrains=cctmActiveRemoteRetrains, cctmHistoryInitialModulation=cctmHistoryInitialModulation, cctmHistoryRxLinkOctets=cctmHistoryRxLinkOctets, cctmActiveRateShiftFailures=cctmActiveRateShiftFailures, cctmActiveGroup=cctmActiveGroup, cctmActiveRxECNAKs=cctmActiveRxECNAKs, cctmActiveDataCompression=cctmActiveDataCompression, cctmHistoryRxLowWatermark=cctmHistoryRxLowWatermark, cctmHistoryAttemptedModulation=cctmHistoryAttemptedModulation, cctmActive=cctmActive, cctmActiveTxLinkOctets=cctmActiveTxLinkOctets, cctmXHistoryECWindowClosures=cctmXHistoryECWindowClosures, cctmHistoryRxECNAKs=cctmHistoryRxECNAKs, cctmMIBCompliances=cctmMIBCompliances, cctmXHistoryTxLevel=cctmXHistoryTxLevel, cctmHistoryFinalTxRate=cctmHistoryFinalTxRate, cctmActiveSupportedDC=cctmActiveSupportedDC, cctmActiveECProtocol=cctmActiveECProtocol, cctmHistoryRemoteRetrains=cctmHistoryRemoteRetrains, cctmActiveProjectedMaxRxRate=cctmActiveProjectedMaxRxRate, cctmHistorySupportedDC=cctmHistorySupportedDC, cctmActiveRxHighWatermark=cctmActiveRxHighWatermark, cctmXHistoryEntry=cctmXHistoryEntry, cctmActiveLocalRetrains=cctmActiveLocalRetrains, cctmHistoryRxCharLost=cctmHistoryRxCharLost, cctmActiveTxECFrames=cctmActiveTxECFrames, cctmActiveLocalDownRateShifts=cctmActiveLocalDownRateShifts, cctmActiveECLinkTimeouts=cctmActiveECLinkTimeouts, cctmMIBObjects=cctmMIBObjects, cctmActiveLocalUpRateShifts=cctmActiveLocalUpRateShifts, cctmActiveModulation=cctmActiveModulation, cctmHistoryRateShiftFailures=cctmHistoryRateShiftFailures, cctmHistoryAttemptedECProtocol=cctmHistoryAttemptedECProtocol, cctmHistoryLocalRetrains=cctmHistoryLocalRetrains, cctmHistoryEntry=cctmHistoryEntry, cctmActiveRemoteUpRateShifts=cctmActiveRemoteUpRateShifts, cctmMIBNotifications=cctmMIBNotifications, cctmActiveRxLowWatermark=cctmActiveRxLowWatermark, cctmHistoryDisconnectReason=cctmHistoryDisconnectReason, cctmXHistoryV90Failure=cctmXHistoryV90Failure, cctmHistoryRxHighWatermark=cctmHistoryRxHighWatermark, cctmMIBCompliance=cctmMIBCompliance, ciscoCallTrackerModemMIB=ciscoCallTrackerModemMIB, cctmXHistoryTxECInfoFrameSize=cctmXHistoryTxECInfoFrameSize, cctmXHistoryTxECWindowSize=cctmXHistoryTxECWindowSize, cctmHistoryTxHighWatermark=cctmHistoryTxHighWatermark, cctmHistoryFinalModulation=cctmHistoryFinalModulation, cctmHistoryDataCompression=cctmHistoryDataCompression, cctmHistoryTxLinkOctets=cctmHistoryTxLinkOctets)
