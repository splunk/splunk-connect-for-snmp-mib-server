#
# PySNMP MIB module HP-SWITCH-FIPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SWITCH-FIPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, NotificationType, TimeTicks, MibIdentifier, Gauge32, Counter32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "NotificationType", "TimeTicks", "MibIdentifier", "Gauge32", "Counter32", "Bits", "Counter64")
DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
hpSwitchFipSnoopingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78))
hpSwitchFipSnoopingMib.setRevisions(('2010-06-03 15:39',))
if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setLastUpdated('201006031539Z')
if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setOrganization('HP ProCurve Networking')
hpSwitchFipsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1))
hpSwitchFipsStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2))
hpSwitchFipsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3))
hpSwitchFipsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 1))
hpSwitchFipsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFipsAdminStatus.setStatus('current')
hpSwitchFipsTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2))
hpSwitchFipsFcMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1), )
if mibBuilder.loadTexts: hpSwitchFipsFcMapTable.setStatus('current')
hpSwitchFipsFcMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcMapIndex"))
if mibBuilder.loadTexts: hpSwitchFipsFcMapEntry.setStatus('current')
hpSwitchFipsFcMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpSwitchFipsFcMapIndex.setStatus('current')
hpSwitchFipsFcMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFipsFcMap.setStatus('current')
hpSwitchFipsFcfMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2), )
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddressTable.setStatus('current')
hpSwitchFipsFcfMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsVirtualFabricInterfaceIndex"), (0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfMacAddress"))
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddressEntry.setStatus('current')
hpSwitchFipsVirtualFabricInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchFipsVirtualFabricInterfaceIndex.setStatus('current')
hpSwitchFipsFcfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddress.setStatus('current')
hpSwitchFipsFcoeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcoeVlanId.setStatus('current')
hpSwitchFipsFcfFcMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcfFcMap.setStatus('current')
hpSwitchFipsFcfEnodeLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcfEnodeLoginCount.setStatus('current')
hpSwitchFipsFcfNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcfNameId.setStatus('current')
hpSwitchFipsFabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFabricName.setStatus('current')
hpSwitchFipsFcfMacTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchFipsFcfMacTableRowStatus.setStatus('current')
hpSwitchFipsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3), )
if mibBuilder.loadTexts: hpSwitchFipsSessionTable.setStatus('current')
hpSwitchFipsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeInterfaceIndex"), (0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeFPMAMacAddress"))
if mibBuilder.loadTexts: hpSwitchFipsSessionEntry.setStatus('current')
hpSwitchFipsSessEnodeInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeInterfaceIndex.setStatus('current')
hpSwitchFipsSessEnodeFPMAMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeFPMAMacAddress.setStatus('current')
hpSwitchFipsSessEnodeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeMacAddress.setStatus('current')
hpSwitchFipsSessEnodeNportId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeNportId.setStatus('current')
hpSwitchFipsSessEnodeNportIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flogi", 1), ("npivfdisc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeNportIdType.setStatus('current')
hpSwitchFipsSessFcfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessFcfMacAddress.setStatus('current')
hpSwitchFipsSessFcMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessFcMap.setStatus('current')
hpSwitchFipsSessVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessVlanId.setStatus('current')
hpSwitchFipsSessFcfNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessFcfNameId.setStatus('current')
hpSwitchFipsGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 1))
hpSwitchFipsFipDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFipDropPkts.setStatus('current')
hpSwitchFipsFcoeDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcoeDropPkts.setStatus('current')
hpSwitchFipsSessStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2))
hpSwitchFipsSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1), )
if mibBuilder.loadTexts: hpSwitchFipsSessStatsTable.setStatus('current')
hpSwitchFipsSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessEnodeIfIndex"), (0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessFPMAMacAddress"))
if mibBuilder.loadTexts: hpSwitchFipsSessStatsEntry.setStatus('current')
hpSwitchFipsStatsSessEnodeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchFipsStatsSessEnodeIfIndex.setStatus('current')
hpSwitchFipsStatsSessFPMAMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFPMAMacAddress.setStatus('current')
hpSwitchFipsStatsSessFcfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFcfMacAddress.setStatus('current')
hpSwitchFipsStatsSessFcoePermitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFcoePermitPkts.setStatus('current')
hpSwitchFipsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 1))
hpSwitchFipsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2))
hpSwitchFipsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 1, 1)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsConfigGroup"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessionGroup"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsCompliance = hpSwitchFipsCompliance.setStatus('current')
hpSwitchFipsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2, 1)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsAdminStatus"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcMap"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcoeVlanId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfFcMap"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfEnodeLoginCount"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfNameId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFabricName"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfMacTableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsConfigGroup = hpSwitchFipsConfigGroup.setStatus('current')
hpSwitchFipsSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2, 2)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeMacAddress"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeNportId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeNportIdType"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessFcfMacAddress"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessFcMap"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessVlanId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessFcfNameId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsSessionGroup = hpSwitchFipsSessionGroup.setStatus('current')
hpSwitchFipsStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2, 3)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFipDropPkts"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcoeDropPkts"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessFcfMacAddress"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessFcoePermitPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsStatisticsGroup = hpSwitchFipsStatisticsGroup.setStatus('current')
mibBuilder.exportSymbols("HP-SWITCH-FIPS-MIB", hpSwitchFipsSessionGroup=hpSwitchFipsSessionGroup, hpSwitchFipsAdminStatus=hpSwitchFipsAdminStatus, hpSwitchFipsSessFcfMacAddress=hpSwitchFipsSessFcfMacAddress, hpSwitchFipsStatsSessFcoePermitPkts=hpSwitchFipsStatsSessFcoePermitPkts, hpSwitchFipsFabricName=hpSwitchFipsFabricName, hpSwitchFipsSessionEntry=hpSwitchFipsSessionEntry, hpSwitchFipsStatistics=hpSwitchFipsStatistics, hpSwitchFipsFcMap=hpSwitchFipsFcMap, hpSwitchFipsSessEnodeNportId=hpSwitchFipsSessEnodeNportId, hpSwitchFipsFipDropPkts=hpSwitchFipsFipDropPkts, hpSwitchFipsStatsSessFcfMacAddress=hpSwitchFipsStatsSessFcfMacAddress, hpSwitchFipsSessVlanId=hpSwitchFipsSessVlanId, hpSwitchFipsScalars=hpSwitchFipsScalars, hpSwitchFipSnoopingMib=hpSwitchFipSnoopingMib, hpSwitchFipsSessStats=hpSwitchFipsSessStats, hpSwitchFipsFcfMacAddress=hpSwitchFipsFcfMacAddress, hpSwitchFipsCompliances=hpSwitchFipsCompliances, hpSwitchFipsConfigGroup=hpSwitchFipsConfigGroup, hpSwitchFipsGroups=hpSwitchFipsGroups, PYSNMP_MODULE_ID=hpSwitchFipSnoopingMib, hpSwitchFipsFcfFcMap=hpSwitchFipsFcfFcMap, hpSwitchFipsFcMapEntry=hpSwitchFipsFcMapEntry, hpSwitchFipsStatsSessFPMAMacAddress=hpSwitchFipsStatsSessFPMAMacAddress, hpSwitchFipsTables=hpSwitchFipsTables, hpSwitchFipsConfigObjects=hpSwitchFipsConfigObjects, hpSwitchFipsFcMapTable=hpSwitchFipsFcMapTable, hpSwitchFipsFcoeVlanId=hpSwitchFipsFcoeVlanId, hpSwitchFipsSessEnodeNportIdType=hpSwitchFipsSessEnodeNportIdType, hpSwitchFipsConformance=hpSwitchFipsConformance, hpSwitchFipsSessionTable=hpSwitchFipsSessionTable, hpSwitchFipsSessFcfNameId=hpSwitchFipsSessFcfNameId, hpSwitchFipsSessEnodeInterfaceIndex=hpSwitchFipsSessEnodeInterfaceIndex, hpSwitchFipsFcfMacTableRowStatus=hpSwitchFipsFcfMacTableRowStatus, hpSwitchFipsFcoeDropPkts=hpSwitchFipsFcoeDropPkts, hpSwitchFipsFcfMacAddressTable=hpSwitchFipsFcfMacAddressTable, hpSwitchFipsStatisticsGroup=hpSwitchFipsStatisticsGroup, hpSwitchFipsVirtualFabricInterfaceIndex=hpSwitchFipsVirtualFabricInterfaceIndex, hpSwitchFipsFcfNameId=hpSwitchFipsFcfNameId, hpSwitchFipsGlobalStats=hpSwitchFipsGlobalStats, hpSwitchFipsSessEnodeFPMAMacAddress=hpSwitchFipsSessEnodeFPMAMacAddress, hpSwitchFipsSessStatsTable=hpSwitchFipsSessStatsTable, hpSwitchFipsCompliance=hpSwitchFipsCompliance, hpSwitchFipsSessFcMap=hpSwitchFipsSessFcMap, hpSwitchFipsFcMapIndex=hpSwitchFipsFcMapIndex, hpSwitchFipsSessEnodeMacAddress=hpSwitchFipsSessEnodeMacAddress, hpSwitchFipsStatsSessEnodeIfIndex=hpSwitchFipsStatsSessEnodeIfIndex, hpSwitchFipsFcfMacAddressEntry=hpSwitchFipsFcfMacAddressEntry, hpSwitchFipsFcfEnodeLoginCount=hpSwitchFipsFcfEnodeLoginCount, hpSwitchFipsSessStatsEntry=hpSwitchFipsSessStatsEntry)
