#
# PySNMP MIB module GSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:07:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, IpAddress, Counter32, Integer32, ObjectIdentity, MibIdentifier, TimeTicks, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, ModuleIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "IpAddress", "Counter32", "Integer32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "ModuleIdentity", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
gswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2))
nbsDevIdentify = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 2))
nbsDeviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 3))
nbsPortsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 5))
nbsPortsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 6))
nbsPortsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 7))
nbsAddressTable = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 8))
nbsSlotsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 9))
nbsPALPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 12))
nbsNPorts = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsNPorts.setStatus('mandatory')
nbsNMacRecords = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsNMacRecords.setStatus('mandatory')
nbsMacFirstGap = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMacFirstGap.setStatus('mandatory')
nbsUpLinkType = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notExist", 1), ("fast2Ethernet100BaseTX", 2), ("fast2Ethernet100BaseTxFx", 3), ("fast2Ethernet100BaseFX", 4), ("atm", 5), ("fast8Ethernet100BaseTX", 6), ("fast8Ethernet10or100BaseTX", 7), ("fast5Ethernet100BaseTX", 8), ("fast5Ethernet100BaseFX", 9), ("fast8Ethernet100BaseTP", 10), ("fast4Ethernet100BaseFO", 11), ("ISDN", 12), ("VPN", 13), ("fast1Ethernet1000BaseGE", 14), ("FDDI", 15), ("fast2Ethernet1000BaseGE", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsUpLinkType.setStatus('mandatory')
nbsBaseHardVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsBaseHardVers.setStatus('mandatory')
nbsCardHardVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCardHardVers.setStatus('mandatory')
nbsUpLinkHardVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsUpLinkHardVers.setStatus('mandatory')
nbsSoftVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSoftVers.setStatus('mandatory')
nbsSnifferPort = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSnifferPort.setStatus('mandatory')
nbsCreatinDate = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCreatinDate.setStatus('mandatory')
nbsSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSpanningTree.setStatus('mandatory')
nbsLearningProcess = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsLearningProcess.setStatus('mandatory')
nbsParitionEnable = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsParitionEnable.setStatus('mandatory')
nbsRMONmode = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsRMONmode.setStatus('mandatory')
nbsBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("limited", 1), ("not-limited", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsBufferThreshold.setStatus('mandatory')
nbsForwardMulticast = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsForwardMulticast.setStatus('mandatory')
nbsForwardUnkPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsForwardUnkPkts.setStatus('mandatory')
nbsBackOffMode = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("aggressive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsBackOffMode.setStatus('mandatory')
nbsPortsContTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 5, 1), )
if mibBuilder.loadTexts: nbsPortsContTable.setStatus('mandatory')
nbsPortsContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPortIndex1"))
if mibBuilder.loadTexts: nbsPortsContEntry.setStatus('mandatory')
nbsPortIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortIndex1.setStatus('mandatory')
nbsPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortEnable.setStatus('mandatory')
nbsPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortDuplex.setStatus('mandatory')
nbsPortMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("sniffer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortMonitor.setStatus('mandatory')
nbsPortPolDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortPolDetection.setStatus('mandatory')
nbsPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortBroadcast.setStatus('mandatory')
nbsPortForwardUnk = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortForwardUnk.setStatus('mandatory')
nbsPortSpaning = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortSpaning.setStatus('mandatory')
nbsPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("s10MBps", 2), ("s100MBps", 3), ("s1000MBps", 4), ("s10000MBps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortSpeed.setStatus('mandatory')
nbsPortsStatTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 6, 1), )
if mibBuilder.loadTexts: nbsPortsStatTable.setStatus('mandatory')
nbsPortsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPortIndex"))
if mibBuilder.loadTexts: nbsPortsStatEntry.setStatus('mandatory')
nbsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortIndex.setStatus('mandatory')
nbsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("empty", 1), ("normal", 2), ("fastCopper", 3), ("fastFiber", 4), ("slowFiber", 5), ("gigaCopper", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortType.setStatus('mandatory')
nbsPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPartition.setStatus('mandatory')
nbsLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsLinkTest.setStatus('mandatory')
nbsPortsCountTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 7, 1), )
if mibBuilder.loadTexts: nbsPortsCountTable.setStatus('mandatory')
nbsPortsCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPortIndex2"))
if mibBuilder.loadTexts: nbsPortsCountEntry.setStatus('mandatory')
nbsPortIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortIndex2.setStatus('mandatory')
nbsPortByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortByteRec.setStatus('mandatory')
nbsPortMulByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortMulByteRec.setStatus('mandatory')
nbsPortBroadByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortBroadByteRec.setStatus('mandatory')
nbsPortByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortByteSent.setStatus('mandatory')
nbsPortFramesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFramesRec.setStatus('mandatory')
nbsPortMulFramesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortMulFramesRec.setStatus('mandatory')
nbsPortBroadFramesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortBroadFramesRec.setStatus('mandatory')
nbsPortFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFramesSent.setStatus('mandatory')
nbsPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCollisions.setStatus('mandatory')
nbsPortLateColl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortLateColl.setStatus('mandatory')
nbsPortCRCAligErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCRCAligErr.setStatus('mandatory')
nbsPortFramesShort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFramesShort.setStatus('mandatory')
nbsPortFrameLong = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFrameLong.setStatus('mandatory')
nbsPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortJabber.setStatus('mandatory')
nbsPortBadByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortBadByteRec.setStatus('mandatory')
nbsMACAddrTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 8, 1), )
if mibBuilder.loadTexts: nbsMACAddrTable.setStatus('mandatory')
nbsMACAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsAddrIndex"))
if mibBuilder.loadTexts: nbsMACAddrEntry.setStatus('mandatory')
nbsAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsAddrIndex.setStatus('mandatory')
nbsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMACAddress.setStatus('mandatory')
nbsAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsAddrPort.setStatus('mandatory')
nbsAddrStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsAddrStatic.setStatus('mandatory')
nbsAddrForwardTo = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-port", 1), ("all-ports", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsAddrForwardTo.setStatus('mandatory')
nbsCardsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 9, 1), )
if mibBuilder.loadTexts: nbsCardsTable.setStatus('mandatory')
nbsCardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 9, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsAddrIndex"))
if mibBuilder.loadTexts: nbsCardsEntry.setStatus('mandatory')
nbsCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCardIndex.setStatus('mandatory')
nbsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("emptySlot", 1), ("copper20Ethernet10or100Base", 2), ("copper40Ethernet10Base", 3), ("powerSupplyError", 4), ("powerSupplyOK", 5), ("fibre10Ethernet100Base", 6), ("fansUnitError", 7), ("fansUnitOK", 8), ("universal", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCardType.setStatus('mandatory')
nbsPALPortsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 12, 1), )
if mibBuilder.loadTexts: nbsPALPortsTable.setStatus('mandatory')
nbsPALPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 12, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPALPortIndex"))
if mibBuilder.loadTexts: nbsPALPortsEntry.setStatus('mandatory')
nbsPALPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPALPortIndex.setStatus('mandatory')
nbsPALPortOpticPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPALPortOpticPower.setStatus('mandatory')
mibBuilder.exportSymbols("GSWITCH-MIB", nbsPortMulByteRec=nbsPortMulByteRec, nbsPortsControl=nbsPortsControl, nbsParitionEnable=nbsParitionEnable, nbsPortType=nbsPortType, nbsLearningProcess=nbsLearningProcess, nbsMACAddress=nbsMACAddress, nbsUpLinkType=nbsUpLinkType, nbsAddrIndex=nbsAddrIndex, nbsLinkTest=nbsLinkTest, nbsCreatinDate=nbsCreatinDate, nbsCardIndex=nbsCardIndex, nbsPortPolDetection=nbsPortPolDetection, nbsPortByteSent=nbsPortByteSent, nbsPortFrameLong=nbsPortFrameLong, nbsPortsContTable=nbsPortsContTable, nbsPortMonitor=nbsPortMonitor, nbsPortSpeed=nbsPortSpeed, nbsPortBroadFramesRec=nbsPortBroadFramesRec, nbsPortForwardUnk=nbsPortForwardUnk, nbsMACAddrEntry=nbsMACAddrEntry, nbsCardType=nbsCardType, nbsPortsCounters=nbsPortsCounters, nbsCardsEntry=nbsCardsEntry, nbsBackOffMode=nbsBackOffMode, nbsSpanningTree=nbsSpanningTree, nbsNMacRecords=nbsNMacRecords, nbsPortSpaning=nbsPortSpaning, nbsPALPortsEntry=nbsPALPortsEntry, nbsPortIndex2=nbsPortIndex2, nbsPortsContEntry=nbsPortsContEntry, nbsPortsStatEntry=nbsPortsStatEntry, nbsPortLateColl=nbsPortLateColl, nbsBufferThreshold=nbsBufferThreshold, nbsPortFramesRec=nbsPortFramesRec, nbsPortBroadcast=nbsPortBroadcast, nbsPortCollisions=nbsPortCollisions, nbsPortCRCAligErr=nbsPortCRCAligErr, nbsPALPortOpticPower=nbsPALPortOpticPower, nbsSnifferPort=nbsSnifferPort, nbsPortFramesShort=nbsPortFramesShort, nbsPortsCountTable=nbsPortsCountTable, nbsMacFirstGap=nbsMacFirstGap, nbsBaseHardVers=nbsBaseHardVers, nbsPortDuplex=nbsPortDuplex, nbsPALPorts=nbsPALPorts, nbsSlotsTable=nbsSlotsTable, nbsUpLinkHardVers=nbsUpLinkHardVers, nbsPartition=nbsPartition, nbsPortIndex=nbsPortIndex, gswitch=gswitch, nbsSoftVers=nbsSoftVers, nbsNPorts=nbsNPorts, nbsPortsStatus=nbsPortsStatus, nbsPortByteRec=nbsPortByteRec, nbsAddrPort=nbsAddrPort, nbsPortBroadByteRec=nbsPortBroadByteRec, nbsPortMulFramesRec=nbsPortMulFramesRec, nbsPortsStatTable=nbsPortsStatTable, nbsAddrStatic=nbsAddrStatic, nbsCardHardVers=nbsCardHardVers, nbsForwardUnkPkts=nbsForwardUnkPkts, nbsPortEnable=nbsPortEnable, nbsRMONmode=nbsRMONmode, nbsPortFramesSent=nbsPortFramesSent, nbsPortsCountEntry=nbsPortsCountEntry, nbase=nbase, nbsPortJabber=nbsPortJabber, nbsMACAddrTable=nbsMACAddrTable, nbsPortBadByteRec=nbsPortBadByteRec, nbsAddressTable=nbsAddressTable, nbsAddrForwardTo=nbsAddrForwardTo, nbsDevIdentify=nbsDevIdentify, nbsPALPortsTable=nbsPALPortsTable, nbsPALPortIndex=nbsPALPortIndex, nbsForwardMulticast=nbsForwardMulticast, nbsDeviceControl=nbsDeviceControl, nbsPortIndex1=nbsPortIndex1, nbsCardsTable=nbsCardsTable)
