#
# PySNMP MIB module XPPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XPPC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, ModuleIdentity, Bits, MibIdentifier, ObjectIdentity, enterprises, Counter32, NotificationType, Gauge32, TimeTicks, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "ModuleIdentity", "Bits", "MibIdentifier", "ObjectIdentity", "enterprises", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ppc = MibIdentifier((1, 3, 6, 1, 4, 1, 935))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1))
ppcmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 2))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 2, 1))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1))
upsIdentp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1))
upsBatteryp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2))
upsInputp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3))
upsOutputp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4))
upsConfigp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5))
upsControlp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6))
upsTestp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7))
upsThreePhase = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8))
upsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9))
upsBaseIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 1))
upsSmartIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2))
upsBaseBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1))
upsSmartBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2))
upsBaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 1))
upsSmartInput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2))
upsBaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 1))
upsSmartOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2))
upsBaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1))
upsSmartConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2))
upsBaseControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 1))
upsSmartControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2))
upsBaseTest = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 1))
upsSmartTest = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2))
upsThreePhaseBatteryGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1))
upsThreePhaseInputGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2))
upsThreePhaseOutputGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3))
upsThreePhaseBypassGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4))
upsThreePhaseDCandRectifierStatusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5))
upsThreePhaseUPSStatusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6))
upsThreePhaseFaultStatusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7))
upsThreePhaseRatingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8))
mconfigTrapsReceiversNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigTrapsReceiversNum.setStatus('mandatory')
mconfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 935, 2, 1, 2), )
if mibBuilder.loadTexts: mconfigTrapsReceiversTable.setStatus('mandatory')
mconfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1), ).setIndexNames((0, "XPPC-MIB", "trapsIndex"))
if mibBuilder.loadTexts: mconfigTrapsReceiversEntry.setStatus('mandatory')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
severityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: severityLevel.setStatus('mandatory')
receiverAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAccept.setStatus('mandatory')
upsBaseIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseIdentModel.setStatus('mandatory')
upsBaseIdentUpsName = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseIdentUpsName.setStatus('mandatory')
upsSmartIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentFirmwareRevision.setStatus('mandatory')
upsSmartIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentDateOfManufacture.setStatus('mandatory')
upsSmartIdentUpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentUpsSerialNumber.setStatus('mandatory')
upsSmartIdentAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentAgentFirmwareRevision.setStatus('mandatory')
upsBaseBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryStatus.setStatus('mandatory')
upsBaseBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryTimeOnBattery.setStatus('mandatory')
upsBaseBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseBatteryLastReplaceDate.setStatus('mandatory')
upsSmartBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryCapacity.setStatus('mandatory')
upsSmartBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryVoltage.setStatus('mandatory')
upsSmartBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryTemperature.setStatus('mandatory')
upsSmartBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryRunTimeRemaining.setStatus('mandatory')
upsSmartBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryReplaceIndicator.setStatus('mandatory')
upsSmartBatteryFullChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryFullChargeVoltage.setStatus('mandatory')
upsSmartBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryCurrent.setStatus('mandatory')
upsBaseInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseInputPhase.setStatus('mandatory')
upsSmartInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputLineVoltage.setStatus('mandatory')
upsSmartInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputMaxLineVoltage.setStatus('mandatory')
upsSmartInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputMinLineVoltage.setStatus('mandatory')
upsSmartInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputFrequency.setStatus('mandatory')
upsSmartInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noTransfer", 1), ("highLineVoltage", 2), ("brownout", 3), ("blackout", 4), ("smallMomentarySag", 5), ("deepMomentarySag", 6), ("smallMomentarySpike", 7), ("largeMomentarySpike", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputLineFailCause.setStatus('mandatory')
upsBaseOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBoost", 4), ("sleeping", 5), ("onBypass", 6), ("rebooting", 7), ("standBy", 8), ("onBuck", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputStatus.setStatus('mandatory')
upsBaseOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputPhase.setStatus('mandatory')
upsSmartOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartOutputVoltage.setStatus('mandatory')
upsSmartOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartOutputFrequency.setStatus('mandatory')
upsSmartOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartOutputLoad.setStatus('mandatory')
upsBaseConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseConfigNumDevices.setStatus('mandatory')
upsBaseConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: upsBaseConfigDeviceTable.setStatus('mandatory')
upsBaseConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "XPPC-MIB", "indexOfDevice"))
if mibBuilder.loadTexts: upsBaseConfigDeviceEntry.setStatus('mandatory')
indexOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexOfDevice.setStatus('mandatory')
nameOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameOfDevice.setStatus('mandatory')
vaRatingOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaRatingOfDevice.setStatus('mandatory')
deviceAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceAccept.setStatus('mandatory')
upsSmartConfigRatedOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigRatedOutputVoltage.setStatus('mandatory')
upsSmartConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigHighTransferVolt.setStatus('mandatory')
upsSmartConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigLowTransferVolt.setStatus('mandatory')
upsSmartConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timed", 1), ("atLowBattery", 2), ("never", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigAlarm.setStatus('mandatory')
upsSmartConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigAlarmTimer.setStatus('mandatory')
upsSmartConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigMinReturnCapacity.setStatus('mandatory')
upsSmartConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigSensitivity.setStatus('mandatory')
upsSmartConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigLowBatteryRunTime.setStatus('mandatory')
upsSmartConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigReturnDelay.setStatus('mandatory')
upsSmartConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigShutoffDelay.setStatus('mandatory')
upsSmartConfigUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigUpsSleepTime.setStatus('mandatory')
upsSmartConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigSetEEPROMDefaults.setStatus('mandatory')
upsBaseControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTurnOffUps", 1), ("turnUpsOffToConserveBattery", 2), ("turnUpsOffToConserveBatteryDelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseControlConserveBattery.setStatus('mandatory')
upsSmartControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlUpsOff.setStatus('mandatory')
upsSmartControlRebootUps = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRebootUps", 1), ("rebootUps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlRebootUps.setStatus('mandatory')
upsSmartControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlUpsSleep.setStatus('mandatory')
upsSmartControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlSimulatePowerFail.setStatus('mandatory')
upsSmartControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlFlashAndBeep.setStatus('mandatory')
upsSmartControlTurnOnUpsLoad = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUpsSmartControlTurnOnUpsLoad", 1), ("upsSmartControlTurnOnUpsLoad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlTurnOnUpsLoad.setStatus('mandatory')
upsSmartTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("biweekly", 2), ("weekly", 3), ("never", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestDiagnosticSchedule.setStatus('mandatory')
upsSmartTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestDiagnostics.setStatus('mandatory')
upsSmartTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestDiagnosticsResults.setStatus('mandatory')
upsSmartTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestLastDiagnosticsDate.setStatus('mandatory')
upsSmartTestIndicators = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestIndicators.setStatus('mandatory')
upsSmartTestRuntimeCalibration = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPerformCalibration", 1), ("performCalibration", 2), ("cancelCurrentCalibration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestRuntimeCalibration.setStatus('mandatory')
upsSmartTestCalibrationResults = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("invalidTest", 2), ("calibrationInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestCalibrationResults.setStatus('mandatory')
upsSmartTestCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestCalibrationDate.setStatus('mandatory')
upsThreePhaseBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryVoltage.setStatus('mandatory')
upsThreePhaseBatteryCapacityPercentage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryCapacityPercentage.setStatus('mandatory')
upsThreePhaseBatteryTimeRemain = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryTimeRemain.setStatus('mandatory')
upsThreePhaseBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryCurrent.setStatus('mandatory')
upsThreePhaseBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryTemperature.setStatus('mandatory')
upsThreePhaseInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputFrequency.setStatus('mandatory')
upsThreePhaseInputVoltageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputVoltageR.setStatus('mandatory')
upsThreePhaseInputVoltageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputVoltageS.setStatus('mandatory')
upsThreePhaseInputVoltageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputVoltageT.setStatus('mandatory')
upsThreePhaseOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputFrequency.setStatus('mandatory')
upsThreePhaseOutputVoltageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageR.setStatus('mandatory')
upsThreePhaseOutputVoltageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageS.setStatus('mandatory')
upsThreePhaseOutputVoltageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageT.setStatus('mandatory')
upsThreePhaseOutputLoadPercentageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageR.setStatus('mandatory')
upsThreePhaseOutputLoadPercentageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageS.setStatus('mandatory')
upsThreePhaseOutputLoadPercentageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageT.setStatus('mandatory')
upsThreePhaseBypassSourceFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypassSourceFrequency.setStatus('mandatory')
upsThreePhaseBypssSourceVoltageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageR.setStatus('mandatory')
upsThreePhaseBypssSourceVoltageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageS.setStatus('mandatory')
upsThreePhaseBypssSourceVoltageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageT.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusRecRotError = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusRecRotError.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusLowBatteryShutdown = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusLowBatteryShutdown.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusLowBattery.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusInAndOut = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("threeInOneOut", 2), ("threeInThreeOut", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusInAndOut.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("backup", 4), ("acnormal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusBatteryStatus.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 16))).clone(namedValues=NamedValues(("boost", 6), ("float", 7), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusChargeStatus.setStatus('mandatory')
upsThreePhaseDCandRectifierStatusRecOperating = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusRecOperating.setStatus('mandatory')
upsThreePhaseUPSStatusBypassFreqFail = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusBypassFreqFail.setStatus('mandatory')
upsThreePhaseUPSStatusManualBypassBreaker = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("close", 8), ("open", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusManualBypassBreaker.setStatus('mandatory')
upsThreePhaseUPSStatusACStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11))).clone(namedValues=NamedValues(("normal", 10), ("abnormal", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusACStatus.setStatus('mandatory')
upsThreePhaseUPSStaticSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 13))).clone(namedValues=NamedValues(("invermode", 12), ("bypassmode", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStaticSwitchMode.setStatus('mandatory')
upsThreePhaseUPSStatusInverterOperating = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusInverterOperating.setStatus('mandatory')
upsThreePhaseFaultStatusEmergencyStop = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusEmergencyStop.setStatus('mandatory')
upsThreePhaseFaultStatusHighDCShutdown = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusHighDCShutdown.setStatus('mandatory')
upsThreePhaseFaultStatusBypassBreaker = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusBypassBreaker.setStatus('mandatory')
upsThreePhaseFaultStatusOverLoad = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusOverLoad.setStatus('mandatory')
upsThreePhaseFaultStatusInverterOutputFail = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusInverterOutputFail.setStatus('mandatory')
upsThreePhaseFaultStatusOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusOverTemperature.setStatus('mandatory')
upsThreePhaseFaultStatusShortCircuit = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusShortCircuit.setStatus('mandatory')
upsThreePhaseRatingRectifierVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingRectifierVoltage.setStatus('mandatory')
upsThreePhaseRatingRectifierFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingRectifierFrequency.setStatus('mandatory')
upsThreePhaseRatingBypassVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingBypassVoltage.setStatus('mandatory')
upsThreePhaseRatingBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingBypassFrequency.setStatus('mandatory')
upsThreePhaseRatingOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingOutputVoltage.setStatus('mandatory')
upsThreePhaseRatingOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingOutputFrequency.setStatus('mandatory')
upsThreePhaseRatingBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingBatteryVoltage.setStatus('mandatory')
upsThreePhaseRatingPower = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingPower.setStatus('mandatory')
upsEnvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1))
upsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvTemperature.setStatus('mandatory')
upsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvHumidity.setStatus('mandatory')
upsEnvOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvOverTemperature.setStatus('mandatory')
upsEnvOverHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvOverHumidity.setStatus('mandatory')
upsEnvSecurity1 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity1.setStatus('mandatory')
upsEnvSecurity2 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity2.setStatus('mandatory')
upsEnvSecurity3 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity3.setStatus('mandatory')
upsEnvSecurity4 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity4.setStatus('mandatory')
upsEnvSecurity5 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity5.setStatus('mandatory')
upsEnvSecurity6 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity6.setStatus('mandatory')
upsEnvSecurity7 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity7.setStatus('mandatory')
upsEnvWater = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvWater.setStatus('mandatory')
upsEnvSmoke = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSmoke.setStatus('mandatory')
upsEnvSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2))
upsEnvUnderTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvUnderTemperature.setStatus('mandatory')
upsEnvUnderHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvUnderHumidity.setStatus('mandatory')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,1))
upsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,2))
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,3))
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,4))
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,5))
boostOn = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,6))
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,7))
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,8))
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,9))
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,10))
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,11))
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,12))
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,13))
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,14))
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,15))
envOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,16))
envTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,17))
envOverHumidity = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,18))
envHumidityNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,19))
envSmokeAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,20))
envWaterAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,21))
envSecurityAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,22))
envWaterNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,24))
envGasAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,26))
upsTemp = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,27))
upsLoadNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,28))
upsTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,29))
envUnderTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,30))
envUnderHumidity = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,31))
upsBypass = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,32))
envSecurity1 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,33))
envSecurity2 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,34))
envSecurity3 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,35))
envSecurity4 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,36))
envSecurity5 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,37))
envSecurity6 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,38))
envSecurity7 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,39))
upsRecroterror = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,47))
upsBypassFreFail = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,48))
upsBypassacnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,49))
upsBypassacabnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,50))
upsTest = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,51))
upsScheduleShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,52))
upsBypassReturn = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,53))
upsShortCircuitShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,54))
upsInverterOutputFailShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,55))
upsBypassBreadkerOnShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,56))
upsHighDCShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,57))
upsEmergencyStop = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,58))
upsInverterMode = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,59))
upsBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,60))
upsOverTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,61))
upsOverLoadShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,62))
upsCapacityUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,63))
upsCapacityNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,64))
upsLowBatteryShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,67))
buckOn = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,68))
returnFromBuck = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,69))
returnFromBoost = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,70))
mibBuilder.exportSymbols("XPPC-MIB", upsSmartTestDiagnosticSchedule=upsSmartTestDiagnosticSchedule, upsThreePhaseRatingOutputFrequency=upsThreePhaseRatingOutputFrequency, upsSmartBatteryFullChargeVoltage=upsSmartBatteryFullChargeVoltage, upsTestp=upsTestp, upsDiagnosticsFailed=upsDiagnosticsFailed, upsSmartControlSimulatePowerFail=upsSmartControlSimulatePowerFail, upsShortCircuitShutdown=upsShortCircuitShutdown, upsSmartControlFlashAndBeep=upsSmartControlFlashAndBeep, receiverCommunityString=receiverCommunityString, upsIdentp=upsIdentp, upsCapacityUnderrun=upsCapacityUnderrun, upsThreePhaseInputGrp=upsThreePhaseInputGrp, upsEnvSecurity4=upsEnvSecurity4, upsRecroterror=upsRecroterror, upsSmartInputLineFailCause=upsSmartInputLineFailCause, envHumidityNormal=envHumidityNormal, upsSmartConfigLowBatteryRunTime=upsSmartConfigLowBatteryRunTime, upsTempNormal=upsTempNormal, upsOutputp=upsOutputp, communicationEstablished=communicationEstablished, envSmokeAbnormal=envSmokeAbnormal, upsThreePhaseFaultStatusBypassBreaker=upsThreePhaseFaultStatusBypassBreaker, upsThreePhaseUPSStatusManualBypassBreaker=upsThreePhaseUPSStatusManualBypassBreaker, upsEnvSecurity3=upsEnvSecurity3, upsEnvSmoke=upsEnvSmoke, upsThreePhaseRatingPower=upsThreePhaseRatingPower, upsBypassacnormal=upsBypassacnormal, upsEnvHumidity=upsEnvHumidity, upsSmartBatteryCurrent=upsSmartBatteryCurrent, ppc=ppc, upsThreePhaseRatingBypassVoltage=upsThreePhaseRatingBypassVoltage, upsSmartConfigShutoffDelay=upsSmartConfigShutoffDelay, upsSmartBatteryReplaceIndicator=upsSmartBatteryReplaceIndicator, envWaterAbnormal=envWaterAbnormal, upsSmartConfigAlarm=upsSmartConfigAlarm, upsThreePhaseOutputLoadPercentageS=upsThreePhaseOutputLoadPercentageS, upsThreePhaseBatteryCapacityPercentage=upsThreePhaseBatteryCapacityPercentage, upsEnvSecurity5=upsEnvSecurity5, upsSmartTestDiagnostics=upsSmartTestDiagnostics, upsBypassacabnormal=upsBypassacabnormal, upsInverterMode=upsInverterMode, upsThreePhaseBypssSourceVoltageT=upsThreePhaseBypssSourceVoltageT, upsSmartConfigUpsSleepTime=upsSmartConfigUpsSleepTime, envSecurity7=envSecurity7, upsWokeUp=upsWokeUp, upsBaseTest=upsBaseTest, upsThreePhaseFaultStatusGrp=upsThreePhaseFaultStatusGrp, upsEmergencyStop=upsEmergencyStop, upsInputp=upsInputp, upsThreePhaseRatingRectifierVoltage=upsThreePhaseRatingRectifierVoltage, upsThreePhaseBatteryTemperature=upsThreePhaseBatteryTemperature, upsThreePhaseRatingBypassFrequency=upsThreePhaseRatingBypassFrequency, upsBaseIdentUpsName=upsBaseIdentUpsName, upsBypassBreadkerOnShutdown=upsBypassBreadkerOnShutdown, upsOnBattery=upsOnBattery, upsControlp=upsControlp, upsLoadNormal=upsLoadNormal, upsThreePhaseUPSStaticSwitchMode=upsThreePhaseUPSStaticSwitchMode, envUnderTemperature=envUnderTemperature, upsSmartInputMaxLineVoltage=upsSmartInputMaxLineVoltage, envSecurity4=envSecurity4, upsThreePhaseBatteryVoltage=upsThreePhaseBatteryVoltage, upsConfigp=upsConfigp, upsBaseOutputPhase=upsBaseOutputPhase, upsThreePhaseDCandRectifierStatusLowBatteryShutdown=upsThreePhaseDCandRectifierStatusLowBatteryShutdown, upsScheduleShutdown=upsScheduleShutdown, upsSmartControlTurnOnUpsLoad=upsSmartControlTurnOnUpsLoad, upsSmartInputLineVoltage=upsSmartInputLineVoltage, upsSmartInputMinLineVoltage=upsSmartInputMinLineVoltage, upsSmartOutputLoad=upsSmartOutputLoad, vaRatingOfDevice=vaRatingOfDevice, upsSmartControlUpsOff=upsSmartControlUpsOff, upsBaseConfig=upsBaseConfig, upsSmartConfigSensitivity=upsSmartConfigSensitivity, upsBaseInputPhase=upsBaseInputPhase, upsEnvSecurity7=upsEnvSecurity7, upsCapacityNormal=upsCapacityNormal, upsThreePhaseBatteryCurrent=upsThreePhaseBatteryCurrent, upsThreePhaseUPSStatusInverterOperating=upsThreePhaseUPSStatusInverterOperating, upsEnvUnderHumidity=upsEnvUnderHumidity, upsSmartControlRebootUps=upsSmartControlRebootUps, upsSmartTestLastDiagnosticsDate=upsSmartTestLastDiagnosticsDate, upsBaseControlConserveBattery=upsBaseControlConserveBattery, upsEnvStatus=upsEnvStatus, upsThreePhaseOutputFrequency=upsThreePhaseOutputFrequency, upsSmartTestCalibrationResults=upsSmartTestCalibrationResults, returnFromBuck=returnFromBuck, upsSmartInputFrequency=upsSmartInputFrequency, upsOverLoad=upsOverLoad, upsBatteryp=upsBatteryp, mconfigTrapsReceiversEntry=mconfigTrapsReceiversEntry, upsSmartBatteryCapacity=upsSmartBatteryCapacity, upsEnvOverHumidity=upsEnvOverHumidity, upsEnvSecurity6=upsEnvSecurity6, upsSmartOutput=upsSmartOutput, upsBaseConfigDeviceTable=upsBaseConfigDeviceTable, upsSmartConfigRatedOutputVoltage=upsSmartConfigRatedOutputVoltage, upsHighDCShutdown=upsHighDCShutdown, upsThreePhaseFaultStatusOverLoad=upsThreePhaseFaultStatusOverLoad, envOverTemperature=envOverTemperature, receiverAccept=receiverAccept, envOverHumidity=envOverHumidity, upsThreePhaseFaultStatusInverterOutputFail=upsThreePhaseFaultStatusInverterOutputFail, upsThreePhaseDCandRectifierStatusChargeStatus=upsThreePhaseDCandRectifierStatusChargeStatus, nameOfDevice=nameOfDevice, upsThreePhaseOutputVoltageS=upsThreePhaseOutputVoltageS, upsSmartOutputVoltage=upsSmartOutputVoltage, upsSmartConfigLowTransferVolt=upsSmartConfigLowTransferVolt, upsInverterOutputFailShutdown=upsInverterOutputFailShutdown, upsBaseConfigDeviceEntry=upsBaseConfigDeviceEntry, upsSmartControl=upsSmartControl, upsSmartBatteryRunTimeRemaining=upsSmartBatteryRunTimeRemaining, mconfig=mconfig, upsSmartTestIndicators=upsSmartTestIndicators, trapsReceiverAddr=trapsReceiverAddr, upsSmartBattery=upsSmartBattery, upsDischarged=upsDischarged, upsThreePhaseFaultStatusHighDCShutdown=upsThreePhaseFaultStatusHighDCShutdown, upsEnvTemperature=upsEnvTemperature, envTemperatureNormal=envTemperatureNormal, upsThreePhaseBypssSourceVoltageR=upsThreePhaseBypssSourceVoltageR, upsTurnedOff=upsTurnedOff, upsThreePhaseDCandRectifierStatusInAndOut=upsThreePhaseDCandRectifierStatusInAndOut, indexOfDevice=indexOfDevice, upsBypassFreFail=upsBypassFreFail, upsThreePhaseDCandRectifierStatusGrp=upsThreePhaseDCandRectifierStatusGrp, upsThreePhaseOutputVoltageT=upsThreePhaseOutputVoltageT, upsSmartControlUpsSleep=upsSmartControlUpsSleep, upsThreePhaseUPSStatusBypassFreqFail=upsThreePhaseUPSStatusBypassFreqFail, upsSmartInput=upsSmartInput, upsBypassMode=upsBypassMode, upsBaseConfigNumDevices=upsBaseConfigNumDevices, upsThreePhaseOutputLoadPercentageR=upsThreePhaseOutputLoadPercentageR, products=products, upsBaseIdent=upsBaseIdent, upsSmartTest=upsSmartTest, upsSmartIdentFirmwareRevision=upsSmartIdentFirmwareRevision, upsThreePhaseRatingBatteryVoltage=upsThreePhaseRatingBatteryVoltage, upsThreePhaseRatingGrp=upsThreePhaseRatingGrp, upsSmartOutputFrequency=upsSmartOutputFrequency, envSecurityAbnormal=envSecurityAbnormal, upsDiagnosticsPassed=upsDiagnosticsPassed, envSecurity2=envSecurity2, upsEnvUnderTemperature=upsEnvUnderTemperature, upsSmartIdentUpsSerialNumber=upsSmartIdentUpsSerialNumber, upsTemp=upsTemp, lowBattery=lowBattery, powerRestored=powerRestored, upsEnvSecurity1=upsEnvSecurity1, envGasAbnormal=envGasAbnormal, upsThreePhaseFaultStatusEmergencyStop=upsThreePhaseFaultStatusEmergencyStop, upsLowBatteryShutdown=upsLowBatteryShutdown, deviceAccept=deviceAccept, upsThreePhaseInputFrequency=upsThreePhaseInputFrequency, upsThreePhaseDCandRectifierStatusRecRotError=upsThreePhaseDCandRectifierStatusRecRotError, upsThreePhaseInputVoltageS=upsThreePhaseInputVoltageS, upsThreePhaseUPSStatusACStatus=upsThreePhaseUPSStatusACStatus, upsThreePhaseBatteryTimeRemain=upsThreePhaseBatteryTimeRemain, upsBypassReturn=upsBypassReturn, hardware=hardware, envWaterNormal=envWaterNormal, upsEnvSetting=upsEnvSetting, envSecurity3=envSecurity3, upsThreePhaseInputVoltageT=upsThreePhaseInputVoltageT, upsSmartBatteryVoltage=upsSmartBatteryVoltage, upsThreePhaseBatteryGrp=upsThreePhaseBatteryGrp, upsSmartIdent=upsSmartIdent, ups=ups, upsBaseBattery=upsBaseBattery, communicationLost=communicationLost, upsSmartTestCalibrationDate=upsSmartTestCalibrationDate, upsThreePhaseBypassGrp=upsThreePhaseBypassGrp, upsSmartTestRuntimeCalibration=upsSmartTestRuntimeCalibration, envSecurity6=envSecurity6, upsEnvSecurity2=upsEnvSecurity2, upsEnvironment=upsEnvironment, upsSmartTestDiagnosticsResults=upsSmartTestDiagnosticsResults, boostOn=boostOn, upsThreePhaseBypassSourceFrequency=upsThreePhaseBypassSourceFrequency, upsThreePhaseOutputLoadPercentageT=upsThreePhaseOutputLoadPercentageT, upsThreePhaseRatingRectifierFrequency=upsThreePhaseRatingRectifierFrequency, upsThreePhaseInputVoltageR=upsThreePhaseInputVoltageR, upsEnvWater=upsEnvWater, upsRebootStarted=upsRebootStarted, upsBaseBatteryStatus=upsBaseBatteryStatus, upsBaseIdentModel=upsBaseIdentModel, upsSmartConfigMinReturnCapacity=upsSmartConfigMinReturnCapacity, envSecurity1=envSecurity1, trapsIndex=trapsIndex, upsSmartConfigReturnDelay=upsSmartConfigReturnDelay, upsSmartBatteryTemperature=upsSmartBatteryTemperature, upsThreePhaseDCandRectifierStatusRecOperating=upsThreePhaseDCandRectifierStatusRecOperating, buckOn=buckOn, envUnderHumidity=envUnderHumidity, returnFromLowBattery=returnFromLowBattery, upsEnvOverTemperature=upsEnvOverTemperature, upsBaseBatteryLastReplaceDate=upsBaseBatteryLastReplaceDate, upsOverTemperatureShutdown=upsOverTemperatureShutdown, envSecurity5=envSecurity5, upsOverLoadShutdown=upsOverLoadShutdown, upsSmartConfigSetEEPROMDefaults=upsSmartConfigSetEEPROMDefaults, upsBaseInput=upsBaseInput, upsSmartConfigAlarmTimer=upsSmartConfigAlarmTimer, mconfigTrapsReceiversTable=mconfigTrapsReceiversTable, upsBaseControl=upsBaseControl, upsBypass=upsBypass, mconfigTrapsReceiversNum=mconfigTrapsReceiversNum, upsSmartIdentDateOfManufacture=upsSmartIdentDateOfManufacture, upsTest=upsTest, upsSmartConfigHighTransferVolt=upsSmartConfigHighTransferVolt, severityLevel=severityLevel, upsThreePhaseFaultStatusOverTemperature=upsThreePhaseFaultStatusOverTemperature, upsSleeping=upsSleeping, ppcmgmt=ppcmgmt, upsThreePhaseUPSStatusGrp=upsThreePhaseUPSStatusGrp, upsThreePhaseOutputGrp=upsThreePhaseOutputGrp, upsThreePhaseBypssSourceVoltageS=upsThreePhaseBypssSourceVoltageS, upsThreePhase=upsThreePhase, returnFromBoost=returnFromBoost, upsBaseOutput=upsBaseOutput, upsSmartConfig=upsSmartConfig, upsBaseBatteryTimeOnBattery=upsBaseBatteryTimeOnBattery, upsThreePhaseDCandRectifierStatusLowBattery=upsThreePhaseDCandRectifierStatusLowBattery, upsThreePhaseRatingOutputVoltage=upsThreePhaseRatingOutputVoltage, upsSmartIdentAgentFirmwareRevision=upsSmartIdentAgentFirmwareRevision, upsThreePhaseDCandRectifierStatusBatteryStatus=upsThreePhaseDCandRectifierStatusBatteryStatus, upsBaseOutputStatus=upsBaseOutputStatus, upsThreePhaseOutputVoltageR=upsThreePhaseOutputVoltageR, upsThreePhaseFaultStatusShortCircuit=upsThreePhaseFaultStatusShortCircuit)
