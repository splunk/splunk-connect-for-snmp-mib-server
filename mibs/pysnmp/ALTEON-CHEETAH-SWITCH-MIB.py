#
# PySNMP MIB module ALTEON-CHEETAH-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-CHEETAH-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:05:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, IpAddress, Bits, Counter64, Counter32, NotificationType, Unsigned32, TimeTicks, iso, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "IpAddress", "Bits", "Counter64", "Counter32", "NotificationType", "Unsigned32", "TimeTicks", "iso", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
agent = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1))
agent.setRevisions(('2004-09-01 00:00',))
if mibBuilder.loadTexts: agent.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: agent.setOrganization('Nortel Networks')
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1))
agentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3))
agentOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4))
agSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2))
agRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3))
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4))
agSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5))
agTrapHost = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6))
agTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7))
agApply = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8))
agMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9))
agSslproc = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10))
agTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11))
agMgmtNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12))
agBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13))
agSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14))
agSonmp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 15))
agPortAccessCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16))
agSave = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17))
agFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18))
agPgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1))
ipAclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3))
udpBlastCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4))
secGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5))
dosAttackPrevCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6))
ipDstAclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7))
symantecCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2))
portStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3))
spStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4))
mgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5))
securityStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6))
agClearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 7))
mpMemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8))
ntpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9))
portMirrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1))
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2))
swKeyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3))
agDiff = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4))
agCfgDump = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5))
mgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6))
securityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7))
capacityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9))
agNTPOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 2))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('current')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('current')
hwTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("exceed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureStatus.setStatus('current')
hwFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFanStatus.setStatus('current')
switchCapL2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1))
switchCapL3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2))
switchCapSlbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3))
switchCapSlbPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4))
switchCapBwmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5))
switchCapSecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6))
switchCapGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7))
switchCapFDBMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFDBMaxEnt.setStatus('current')
switchCapFDBCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFDBCurrEnt.setStatus('current')
switchCapFDBPerSPMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFDBPerSPMaxEnt.setStatus('current')
switchCapVlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVlanMaxEnt.setStatus('current')
switchCapVlanCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVlanCurrEnt.setStatus('current')
switchCapStaticTrunkGrpsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapStaticTrunkGrpsMaxEnt.setStatus('current')
switchCapStaticTrunkGrpsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapStaticTrunkGrpsCurrEnt.setStatus('current')
switchCapLACPTrunkGRs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLACPTrunkGRs.setStatus('current')
switchCapTrunksperTrunkGR = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapTrunksperTrunkGR.setStatus('current')
switchCapSTGsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSTGsMaxEnt.setStatus('current')
switchCapSTGsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSTGsCurrEnt.setStatus('current')
switchCapPortTeamsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPortTeamsMaxEnt.setStatus('current')
switchCapPortTeamsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPortTeamsCurrEnt.setStatus('current')
switchCapMonitorPorts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapMonitorPorts.setStatus('current')
switchCapIpIntfMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpIntfMaxEnt.setStatus('current')
switchCapIpIntfCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpIntfCurrEnt.setStatus('current')
switchCapIpGWMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpGWMaxEnt.setStatus('current')
switchCapIpGWCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpGWCurrEnt.setStatus('current')
switchCapIpRoutesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpRoutesMaxEnt.setStatus('current')
switchCapIpRoutesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpRoutesCurrEnt.setStatus('current')
switchCapIpStaticRoutesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticRoutesMaxEnt.setStatus('current')
switchCapIpStaticRoutesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticRoutesCurrEnt.setStatus('current')
switchCapIpARPMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpARPMaxEnt.setStatus('current')
switchCapIpARPCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpARPCurrEnt.setStatus('current')
switchCapIpStaticARPMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticARPMaxEnt.setStatus('current')
switchCapIpStaticARPCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticARPCurrEnt.setStatus('current')
switchCapLocNetsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLocNetsMaxEnt.setStatus('current')
switchCapLocNetsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLocNetsCurrEnt.setStatus('current')
switchCapDNSSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDNSSerMaxEnt.setStatus('current')
switchCapDNSSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDNSSerCurrEnt.setStatus('current')
switchCapBootpSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBootpSerMaxEnt.setStatus('current')
switchCapBootpSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBootpSerCurrEnt.setStatus('current')
switchCapRIPIntfMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRIPIntfMaxEnt.setStatus('current')
switchCapRIPIntfCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRIPIntfCurrEnt.setStatus('current')
switchCapOSPFIntfMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFIntfMaxEnt.setStatus('current')
switchCapOSPFIntfCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFIntfCurrEnt.setStatus('current')
switchCapOSPFAreasMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFAreasMaxEnt.setStatus('current')
switchCapOSPFAreasCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFAreasCurrEnt.setStatus('current')
switchCapOSPFSummaryRangesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFSummaryRangesMaxEnt.setStatus('current')
switchCapOSPFSummaryRangesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFSummaryRangesCurrEnt.setStatus('current')
switchCapOSPFVirtLinksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFVirtLinksMaxEnt.setStatus('current')
switchCapOSPFVirtLinksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFVirtLinksCurrEnt.setStatus('current')
switchCapOSPFHostsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFHostsMaxEnt.setStatus('current')
switchCapOSPFHostsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFHostsCurrEnt.setStatus('current')
switchCapLSDBLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLSDBLimit.setStatus('current')
switchCapBGPPeersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPPeersMaxEnt.setStatus('current')
switchCapBGPPeersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPPeersCurrEnt.setStatus('current')
switchCapBGPRouteAggrsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPRouteAggrsMaxEnt.setStatus('current')
switchCapBGPRouteAggrsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPRouteAggrsCurrEnt.setStatus('current')
switchCapRouteMapsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRouteMapsMaxEnt.setStatus('current')
switchCapRouteMapsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRouteMapsCurrEnt.setStatus('current')
switchCapNwkFltsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapNwkFltsMaxEnt.setStatus('current')
switchCapNwkFltsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapNwkFltsCurrEnt.setStatus('current')
switchCapASFlts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapASFlts.setStatus('current')
switchCapVRRPRtrsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrsMaxEnt.setStatus('current')
switchCapVRRPRtrsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrsCurrEnt.setStatus('current')
switchCapVRRPRtrGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrGRsMaxEnt.setStatus('current')
switchCapVRRPRtrGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrGRsCurrEnt.setStatus('current')
switchCapVRRPIntfsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPIntfsMaxEnt.setStatus('current')
switchCapVRRPIntfsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPIntfsCurrEnt.setStatus('current')
switchCapRealSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealSersMaxEnt.setStatus('current')
switchCapRealSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealSersCurrEnt.setStatus('current')
switchCapSerGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSerGRsMaxEnt.setStatus('current')
switchCapSerGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSerGRsCurrEnt.setStatus('current')
switchCapVirtSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVirtSersMaxEnt.setStatus('current')
switchCapVirtSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVirtSersCurrEnt.setStatus('current')
switchCapVirtServicesEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVirtServicesEnt.setStatus('current')
switchCapRealServicesEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealServicesEnt.setStatus('current')
switchCapRealIDSSer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealIDSSer.setStatus('current')
switchCapIDSSerGRs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIDSSerGRs.setStatus('current')
switchCapGSLBDomainsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDomainsMaxEnt.setStatus('current')
switchCapGSLBDomainsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDomainsCurrEnt.setStatus('current')
switchCapGSLBServicesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBServicesMaxEnt.setStatus('current')
switchCapGSLBServicesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBServicesCurrEnt.setStatus('current')
switchCapGSLBLocSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBLocSersMaxEnt.setStatus('current')
switchCapGSLBLocSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBLocSersCurrEnt.setStatus('current')
switchCapGSLBRemSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSersMaxEnt.setStatus('current')
switchCapGSLBRemSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSersCurrEnt.setStatus('current')
switchCapGSLBRemSitesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSitesMaxEnt.setStatus('current')
switchCapGSLBRemSitesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSitesCurrEnt.setStatus('current')
switchCapGSLBFailoversPerRemSiteMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBFailoversPerRemSiteMaxEnt.setStatus('current')
switchCapGSLBFailoversPerRemSiteCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBFailoversPerRemSiteCurrEnt.setStatus('current')
switchCapGSLBNetworksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBNetworksMaxEnt.setStatus('current')
switchCapGSLBNetworksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBNetworksCurrEnt.setStatus('current')
switchCapGSLBGeographicalRegionsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBGeographicalRegionsMaxEnt.setStatus('current')
switchCapGSLBGeographicalRegionsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBGeographicalRegionsCurrEnt.setStatus('current')
switchCapGSLBRulesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRulesMaxEnt.setStatus('current')
switchCapGSLBRulesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRulesCurrEnt.setStatus('current')
switchCapGSLBMetricsPerRuleMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBMetricsPerRuleMaxEnt.setStatus('current')
switchCapGSLBMetricPerRuleCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBMetricPerRuleCurrEnt.setStatus('current')
switchCapGSLBDNSPersCacheMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDNSPersCacheMaxEnt.setStatus('current')
switchCapGSLBDNSPersCacheCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDNSPersCacheCurrEnt.setStatus('current')
switchCapFltsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFltsMaxEnt.setStatus('current')
switchCapFltsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFltsCurrEnt.setStatus('current')
switchCapPIPsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPIPsMaxEnt.setStatus('current')
switchCapPIPsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPIPsCurrEnt.setStatus('current')
switchCapScriptHealthChecksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapScriptHealthChecksMaxEnt.setStatus('current')
switchCapScriptHealthChecksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapScriptHealthChecksCurrEnt.setStatus('current')
switchCapSNMPHealthChecksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSNMPHealthChecksMaxEnt.setStatus('current')
switchCapSNMPHealthChecksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSNMPHealthChecksCurrEnt.setStatus('current')
switchCapRulesforURLParsingMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRulesforURLParsingMaxEnt.setStatus('current')
switchCapRulesforURLParsingCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRulesforURLParsingCurrEnt.setStatus('current')
switchCapSLBSessionsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSLBSessionsMaxEnt.setStatus('current')
switchCapSLBSessionsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSLBSessionsCurrEnt.setStatus('current')
switchCapNumofRportstoVport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapNumofRportstoVport.setStatus('current')
switchCapDomianRecordsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDomianRecordsMaxEnt.setStatus('current')
switchCapDomainRecordsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDomainRecordsCurrEnt.setStatus('current')
switchCapMappingPerDomainrecord = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapMappingPerDomainrecord.setStatus('current')
switchCapSlbPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1), )
if mibBuilder.loadTexts: switchCapSlbPortInfoTable.setStatus('current')
switchCapSlbPortInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "switchCapSlbPortInfoIndx"))
if mibBuilder.loadTexts: switchCapSlbPortInfoTableEntry.setStatus('current')
switchCapSlbPortInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortInfoIndx.setStatus('current')
switchCapSlbPortClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortClientState.setStatus('current')
switchCapSlbPortSerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortSerState.setStatus('current')
switchCapSlbPortFltState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortFltState.setStatus('current')
switchCapSlbPortRTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortRTSState.setStatus('current')
bwmPoliciesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPoliciesMaxEnt.setStatus('current')
bwmPoliciesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPoliciesCurrEnt.setStatus('current')
bwmContsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContsMaxEnt.setStatus('current')
bwmContsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContsCurrEnt.setStatus('current')
bwmGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmGRsMaxEnt.setStatus('current')
bwmGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmGRsCurrEnt.setStatus('current')
bwmContsPerGRs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContsPerGRs.setStatus('current')
bwmTimePoliciesPerCont = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmTimePoliciesPerCont.setStatus('current')
configSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSrcIPACLsMaxEnt.setStatus('current')
configSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSrcIPACLsCurrEnt.setStatus('current')
bogonSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bogonSrcIPACLsMaxEnt.setStatus('current')
bogonSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bogonSrcIPACLsCurrEnt.setStatus('current')
operSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSrcIPACLsMaxEnt.setStatus('current')
operSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSrcIPACLsCurrEnt.setStatus('current')
totalSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSrcIPACLsMaxEnt.setStatus('current')
totalSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSrcIPACLsCurrEnt.setStatus('current')
configDstIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDstIPACLsMaxEnt.setStatus('current')
configDstIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDstIPACLsCurrEnt.setStatus('current')
operDstIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operDstIPACLsMaxEnt.setStatus('current')
operDstIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operDstIPACLsCurrEnt.setStatus('current')
totalDstIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDstIPACLsMaxEnt.setStatus('current')
totalDstIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDstIPACLsCurrEnt.setStatus('current')
ipDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDosAtkPrevention.setStatus('current')
tcpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDosAtkPrevention.setStatus('current')
udpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpDosAtkPrevention.setStatus('current')
icmpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpDosAtkPrevention.setStatus('current')
igmpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpDosAtkPrevention.setStatus('current')
arpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpDosAtkPrevention.setStatus('current')
ipv6DosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6DosAtkPrevention.setStatus('current')
totalDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDosAtkPrevention.setStatus('current')
udpBlastProtection = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastProtection.setStatus('current')
syslogHostMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogHostMaxEnt.setStatus('current')
syslogHostCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogHostCurrEnt.setStatus('current')
radiusSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSerMaxEnt.setStatus('current')
radiusSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSerCurrEnt.setStatus('current')
tacacsSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacsSerMaxEnt.setStatus('current')
tacacsSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacsSerCurrEnt.setStatus('current')
ntpSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSerMaxEnt.setStatus('current')
ntpSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSerCurrEnt.setStatus('current')
smtpHostsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpHostsMaxEnt.setStatus('current')
smtpHostsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpHostsCurrEnt.setStatus('current')
mgmtNetworksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtNetworksMaxEnt.setStatus('current')
mgmtNetworksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtNetworksCurrEnt.setStatus('current')
endUsers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUsers.setStatus('current')
panicDumps = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panicDumps.setStatus('current')
mpMemory = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemory.setStatus('current')
spMemory = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemory.setStatus('current')
snmpv3UsersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3UsersMaxEnt.setStatus('current')
snmpv3UsersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3UsersCurrEnt.setStatus('current')
snmpv3ViewsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3ViewsMaxEnt.setStatus('current')
snmpv3ViewsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3ViewsCurrEnt.setStatus('current')
snmpv3AccessGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3AccessGRsMaxEnt.setStatus('current')
snmpv3AccessGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3AccessGRsCurrEnt.setStatus('current')
snmpv3TargetAddrMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetAddrMaxEnt.setStatus('current')
snmpv3TargetAddrCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetAddrCurrEnt.setStatus('current')
snmpv3TargetParamsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetParamsMaxEnt.setStatus('current')
snmpv3TargetParamsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetParamsCurrEnt.setStatus('current')
agPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1), )
if mibBuilder.loadTexts: agPortOperTable.setStatus('current')
agPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portOperIdx"))
if mibBuilder.loadTexts: agPortOperTableEntry.setStatus('current')
portOperIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperIdx.setStatus('current')
portOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperState.setStatus('current')
portOperRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperRmon.setStatus('current')
ntpOperSendReq = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpOperSendReq.setStatus('current')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('current')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('current')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('current')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('current')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('current')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('current')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('current')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('current')
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('current')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('current')
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('current')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('current')
portInfoPhyConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("feCopper", 1), ("geCopper", 2), ("geSFP", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyConnType.setStatus('current')
portInfoPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("copper", 2), ("sfp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPreferred.setStatus('current')
portInfoBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("none", 2), ("copper", 3), ("sfp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoBackup.setStatus('current')
portInfoSFPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSFPName.setStatus('current')
portInfoSFPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("sfpTypeSX", 2), ("sfpTypeLX", 3), ("sfpTypeCX", 4), ("sfpTypeCopper", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSFPType.setStatus('current')
agEnabledSwFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSwFeatures.setStatus('current')
agEnabledGslbKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledGslbKey.setStatus('current')
agEnabledBwmKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledBwmKey.setStatus('current')
agEnabledSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSecurityKey.setStatus('current')
agEnabledLinklbKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledLinklbKey.setStatus('current')
agSymantecSwKeyInfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("expired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSymantecSwKeyInfo.setStatus('current')
agSymantecSwKeyRemainingDays = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSymantecSwKeyRemainingDays.setStatus('current')
agSymLicenseSwKeyRenewalPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSymLicenseSwKeyRenewalPending.setStatus('current')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('current')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('current')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('current')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('current')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('current')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('current')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('current')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('current')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('current')
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('current')
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('current')
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('current')
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('current')
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('current')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('current')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('current')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('current')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('current')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('current')
agCurCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSmtpHost.setStatus('current')
agNewCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSmtpHost.setStatus('current')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('current')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('current')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('current')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('current')
agCurCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setStatus('current')
agNewCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setStatus('current')
agCurCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setStatus('current')
agNewCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setStatus('current')
agClearFlashDump = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClearFlashDump.setStatus('current')
agCurCfgNortelMultipleStgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNortelMultipleStgMode.setStatus('current')
agNewCfgNortelMultipleStgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNortelMultipleStgMode.setStatus('current')
agCurCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapSrcIf.setStatus('current')
agNewCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapSrcIf.setStatus('current')
agCurCfgARPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgARPMaxRate.setStatus('current')
agNewCfgARPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgARPMaxRate.setStatus('current')
agCurCfgICMPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgICMPMaxRate.setStatus('current')
agNewCfgICMPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgICMPMaxRate.setStatus('current')
agCurCfgTCPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTCPMaxRate.setStatus('current')
agNewCfgTCPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTCPMaxRate.setStatus('current')
agCurCfgUDPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgUDPMaxRate.setStatus('current')
agNewCfgUDPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgUDPMaxRate.setStatus('current')
agCurCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setStatus('current')
agNewCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setStatus('current')
agCurDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOcean-WallisAndFutuna", 420)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurDaylightSavings.setStatus('current')
agNewDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOceanWallisAndFutuna", 420)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewDaylightSavings.setStatus('current')
agCurCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setStatus('current')
agNewCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setStatus('current')
agCurCfgXMLCfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgXMLCfgServerPort.setStatus('current')
agNewCfgXMLCfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgXMLCfgServerPort.setStatus('current')
agSymantecGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSymantecGlobalState.setStatus('current')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('current')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('current')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('current')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('current')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('current')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('current')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('current')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('current')
agCurCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSev.setStatus('current')
agNewCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSev.setStatus('current')
agCurCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setStatus('current')
agNewCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setStatus('current')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('current')
agSyslogMsgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setStatus('current')
agSyslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11), )
if mibBuilder.loadTexts: agSyslogMsgTable.setStatus('current')
agSyslogMsgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSyslogMsgIndex"))
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setStatus('current')
agSyslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgIndex.setStatus('current')
agSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMessage.setStatus('current')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('current')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('current')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('current')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('current')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('current')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('current')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('current')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('current')
agNewCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStp.setStatus('current')
agCurCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStp.setStatus('current')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('current')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('current')
agNewCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlb.setStatus('current')
agCurCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlb.setStatus('current')
agNewCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapGslb.setStatus('current')
agCurCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapGslb.setStatus('current')
agNewCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapFilter.setStatus('current')
agCurCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapFilter.setStatus('current')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('current')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('current')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('current')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('current')
agNewCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setStatus('current')
agCurCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setStatus('current')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('current')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('current')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('current')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('current')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('current')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('current')
agNewCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSynAtk.setStatus('current')
agCurCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSynAtk.setStatus('current')
agNewCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapTcpLim.setStatus('current')
agCurCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapTcpLim.setStatus('current')
agNewCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setStatus('current')
agCurCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setStatus('current')
agNewCfgSyslogTrapSecurity = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSecurity.setStatus('current')
agCurCfgSyslogTrapSecurity = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSecurity.setStatus('current')
agNewCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setStatus('current')
agCurCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setStatus('current')
agNewCfgSyslogTrapSlbAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlbAtk.setStatus('current')
agCurCfgSyslogTrapSlbAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlbAtk.setStatus('current')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('current')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('current')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('current')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('current')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('current')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('current')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('current')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('current')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('current')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('current')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('current')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('current')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3), ("boot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('current')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('current')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('current')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('current')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5), ("bkpdump-put", 6), ("img-put", 7), ("tsdump-put", 8), ("bogon-get", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('current')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('current')
agTftpPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpPort.setStatus('current')
agTftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpUserName.setStatus('current')
agTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpPassword.setStatus('current')
agTftpTSDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpTSDumpFileName.setStatus('current')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('current')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('current')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('current')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('current')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('current')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('current')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('current')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('current')
agPortCurCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setStatus('current')
agPortCurCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setStatus('current')
agPortCurCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setStatus('current')
agPortCurCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setStatus('current')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('current')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('current')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('current')
agPortCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setStatus('current')
agPortCurCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setStatus('current')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('current')
agPortCurCfgPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("sfp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPreferred.setStatus('current')
agPortCurCfgBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("none", 2), ("copper", 3), ("sfp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBackup.setStatus('current')
agPortCurCfgEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgEgressBW.setStatus('current')
agPortCurCfgNonIPBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgNonIPBwmContract.setStatus('current')
agPortCurCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setStatus('current')
agPortCurCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setStatus('current')
agPortCurCfgPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortAlias.setStatus('current')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('current')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('current')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('current')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('current')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('current')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('current')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('current')
agPortNewCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setStatus('current')
agPortNewCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setStatus('current')
agPortNewCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setStatus('current')
agPortNewCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setStatus('current')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('current')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('current')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('current')
agPortNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setStatus('current')
agPortNewCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setStatus('current')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('current')
agPortNewCfgPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("sfp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPreferred.setStatus('current')
agPortNewCfgBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copper", 2), ("sfp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBackup.setStatus('current')
agPortNewCfgEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgEgressBW.setStatus('current')
agPortNewCfgNonIPBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgNonIPBwmContract.setStatus('current')
agPortNewCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setStatus('current')
agPortNewCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setStatus('current')
agPortNewCfgPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortAlias.setStatus('current')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('current')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('current')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('current')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('current')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('current')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('current')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('current')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('current')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('current')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('current')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('current')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('current')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('current')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('current')
radCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTelnet.setStatus('current')
radNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTelnet.setStatus('current')
radCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setStatus('current')
radNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setStatus('current')
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('current')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('current')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('current')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('current')
agCurCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPTzoneHHMM.setStatus('current')
agNewCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPTzoneHHMM.setStatus('current')
agCurCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPDlight.setStatus('current')
agNewCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPDlight.setStatus('current')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('current')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('current')
agCurCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setStatus('current')
agNewCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setStatus('current')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('current')
agApplyConfig = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("apply", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfig.setStatus('current')
agApplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyTableSize.setStatus('current')
agApplyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5), )
if mibBuilder.loadTexts: agApplyTable.setStatus('current')
agApplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agApplyIndex"))
if mibBuilder.loadTexts: agApplyTableEntry.setStatus('current')
agApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyIndex.setStatus('current')
agApplyString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyString.setStatus('current')
agMgmtCurCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgIpAddr.setStatus('current')
agMgmtNewCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgIpAddr.setStatus('current')
agMgmtCurCfgMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgMask.setStatus('current')
agMgmtNewCfgMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgMask.setStatus('current')
agMgmtCurCfgGateway = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgGateway.setStatus('current')
agMgmtNewCfgGateway = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgGateway.setStatus('current')
agMgmtCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgState.setStatus('current')
agMgmtNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgState.setStatus('current')
agMgmtCurCfgNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgNtp.setStatus('current')
agMgmtNewCfgNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgNtp.setStatus('current')
agMgmtCurCfgRadius = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgRadius.setStatus('current')
agMgmtNewCfgRadius = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgRadius.setStatus('current')
agMgmtCurCfgSmtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSmtp.setStatus('current')
agMgmtNewCfgSmtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSmtp.setStatus('current')
agMgmtCurCfgSnmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSnmp.setStatus('current')
agMgmtNewCfgSnmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSnmp.setStatus('current')
agMgmtCurCfgSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSyslog.setStatus('current')
agMgmtNewCfgSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSyslog.setStatus('current')
agMgmtCurCfgTftp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgTftp.setStatus('current')
agMgmtNewCfgTftp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgTftp.setStatus('current')
agMgmtCurCfgDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgDns.setStatus('current')
agMgmtNewCfgDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgDns.setStatus('current')
agMgmtCurCfgTacacs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgTacacs.setStatus('current')
agMgmtNewCfgTacacs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgTacacs.setStatus('current')
agMgmtCurCfgIntr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgIntr.setStatus('current')
agMgmtNewCfgIntr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgIntr.setStatus('current')
agMgmtCurCfgRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgRetry.setStatus('current')
agMgmtNewCfgRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgRetry.setStatus('current')
agMgmtCurCfgSonmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSonmp.setStatus('current')
agMgmtNewCfgSonmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSonmp.setStatus('current')
agMgmtCurCfgWlm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgWlm.setStatus('current')
agMgmtNewCfgWlm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgWlm.setStatus('current')
agMgmtCurCfgReport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgReport.setStatus('current')
agMgmtNewCfgReport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgReport.setStatus('current')
agMgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23))
agMgmtPortCurCfgSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbs10", 1), ("mbs100", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtPortCurCfgSpeed.setStatus('current')
agMgmtPortNewCfgSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbs10", 1), ("mbs100", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtPortNewCfgSpeed.setStatus('current')
agMgmtPortCurCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtPortCurCfgMode.setStatus('current')
agMgmtPortNewCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtPortNewCfgMode.setStatus('current')
agMgmtPortCurCfgAuto = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtPortCurCfgAuto.setStatus('current')
agMgmtPortNewCfgAuto = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtPortNewCfgAuto.setStatus('current')
agSslprocCurCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgIpAddr.setStatus('current')
agSslprocNewCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgIpAddr.setStatus('current')
agSslprocCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgPort.setStatus('current')
agSslprocNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgPort.setStatus('current')
agSslprocCurCfgRts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgRts.setStatus('current')
agSslprocNewCfgRts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgRts.setStatus('current')
agSslprocCurCfgFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgFilt.setStatus('current')
agSslprocNewCfgFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgFilt.setStatus('current')
agCurCfgSonmpSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSonmpSrcIf.setStatus('current')
agNewCfgSonmpSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSonmpSrcIf.setStatus('current')
tacCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPrimaryIpAddr.setStatus('current')
tacNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPrimaryIpAddr.setStatus('current')
tacCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecondaryIpAddr.setStatus('current')
tacNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecondaryIpAddr.setStatus('current')
tacCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPort.setStatus('current')
tacNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPort.setStatus('current')
tacCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTimeout.setStatus('current')
tacNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTimeout.setStatus('current')
tacCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgRetries.setStatus('current')
tacNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgRetries.setStatus('current')
tacCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgState.setStatus('current')
tacNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgState.setStatus('current')
tacCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenString.setStatus('current')
tacNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenString.setStatus('current')
tacCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTelnet.setStatus('current')
tacNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTelnet.setStatus('current')
tacCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setStatus('current')
tacNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setStatus('current')
tacCurCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmap.setStatus('current')
tacNewCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmap.setStatus('current')
agMgmtNetTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setStatus('current')
agCurCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2), )
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setStatus('current')
agCurCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setStatus('current')
agCurCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setStatus('current')
agCurCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setStatus('current')
agCurCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setStatus('current')
agNewCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3), )
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setStatus('current')
agNewCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setStatus('current')
agNewCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setStatus('current')
agNewCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setStatus('current')
agNewCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setStatus('current')
agNewCfgMgmtNetDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setStatus('current')
agPgrpMatchTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPgrpMatchTableMaxSize.setStatus('current')
agCurCfgPgrpMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2), )
if mibBuilder.loadTexts: agCurCfgPgrpMatchTable.setStatus('current')
agCurCfgPgrpMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgPgrpMatchIndex"))
if mibBuilder.loadTexts: agCurCfgPgrpMatchEntry.setStatus('current')
agCurCfgPgrpMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPgrpMatchIndex.setStatus('current')
agCurCfgPgrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPgrpName.setStatus('current')
agCurCfgPgrpMatchBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPgrpMatchBmap.setStatus('current')
agNewCfgPgrpMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3), )
if mibBuilder.loadTexts: agNewCfgPgrpMatchTable.setStatus('current')
agNewCfgPgrpMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgPgrpMatchIndex"))
if mibBuilder.loadTexts: agNewCfgPgrpMatchEntry.setStatus('current')
agNewCfgPgrpMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgPgrpMatchIndex.setStatus('current')
agNewCfgPgrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpName.setStatus('current')
agNewCfgPgrpMatchAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpMatchAdd.setStatus('current')
agNewCfgPgrpMatchRem = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpMatchRem.setStatus('current')
agNewCfgPgrpMatchBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgPgrpMatchBmap.setStatus('current')
agNewCfgPgrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpDelete.setStatus('current')
agCfgSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2), )
if mibBuilder.loadTexts: agCfgSecurityPortTable.setStatus('current')
agCfgSecurityPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCfgSecurityPortIndx"))
if mibBuilder.loadTexts: agCfgSecurityPortTableEntry.setStatus('current')
agCfgSecurityPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgSecurityPortIndx.setStatus('current')
agCurCfgSecurityDosState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityDosState.setStatus('current')
agNewCfgSecurityDosState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityDosState.setStatus('current')
agCurCfgSecurityIpAclState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityIpAclState.setStatus('current')
agNewCfgSecurityIpAclState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityIpAclState.setStatus('current')
agCurCfgSecurityUbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityUbState.setStatus('current')
agNewCfgSecurityUbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityUbState.setStatus('current')
agCurCfgSecurityBogonState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityBogonState.setStatus('current')
agNewCfgSecurityBogonState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityBogonState.setStatus('current')
agCurCfgSecurityAttacksBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityAttacksBmap.setStatus('current')
agNewCfgSecurityAttacksBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgSecurityAttacksBmap.setStatus('current')
agNewCfgSecurityAddAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("iplen", 1), ("ipversion", 2), ("broadcast", 3), ("loopback", 4), ("land", 5), ("ipreserved", 6), ("ipttl", 7), ("ipprot", 8), ("ipoptlen", 9), ("fragmoredont", 10), ("fragdata", 11), ("fragboundary", 12), ("fraglast", 13), ("fragdontoff", 14), ("fragopt", 15), ("fragoff", 16), ("fragoversize", 17), ("tcplen", 18), ("tcpportzero", 19), ("blat", 20), ("tcpreserved", 21), ("nullscan", 22), ("fullxmasscan", 23), ("finscan", 24), ("vecnascan", 25), ("xmassscan", 26), ("synfinscan", 27), ("flagabnormal", 28), ("syndata", 29), ("synfrag", 30), ("ftpport", 31), ("dnsport", 32), ("seqzero", 33), ("ackzero", 34), ("tcpoptlen", 35), ("udplen", 36), ("udpportzero", 37), ("fraggle", 38), ("pepsi", 39), ("rc8", 40), ("snmpnull", 41), ("icmplen", 42), ("smurf", 43), ("icmpdata", 44), ("icmpoff", 45), ("icmptype", 46), ("igmplen", 47), ("igmpfrag", 48), ("igmptype", 49), ("arplen", 50), ("arpnbcast", 51), ("arpnucast", 52), ("arpspoof", 53), ("garp", 54), ("ip6len", 55), ("ip6version", 56)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityAddAttack.setStatus('current')
agNewCfgSecurityRemAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("iplen", 1), ("ipversion", 2), ("broadcast", 3), ("loopback", 4), ("land", 5), ("ipreserved", 6), ("ipttl", 7), ("ipprot", 8), ("ipoptlen", 9), ("fragmoredont", 10), ("fragdata", 11), ("fragboundary", 12), ("fraglast", 13), ("fragdontoff", 14), ("fragopt", 15), ("fragoff", 16), ("fragoversize", 17), ("tcplen", 18), ("tcpportzero", 19), ("blat", 20), ("tcpreserved", 21), ("nullscan", 22), ("fullxmasscan", 23), ("finscan", 24), ("vecnascan", 25), ("xmassscan", 26), ("synfinscan", 27), ("flagabnormal", 28), ("syndata", 29), ("synfrag", 30), ("ftpport", 31), ("dnsport", 32), ("seqzero", 33), ("ackzero", 34), ("tcpoptlen", 35), ("udplen", 36), ("udpportzero", 37), ("fraggle", 38), ("pepsi", 39), ("rc8", 40), ("snmpnull", 41), ("icmplen", 42), ("smurf", 43), ("icmpdata", 44), ("icmpoff", 45), ("icmptype", 46), ("igmplen", 47), ("igmpfrag", 48), ("igmptype", 49), ("arplen", 50), ("arpnbcast", 51), ("arpnucast", 52), ("arpspoof", 53), ("garp", 54), ("ip6len", 55), ("ip6version", 56)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityRemAttack.setStatus('current')
agNewCfgSecurityDoSAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("addall", 2), ("remall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityDoSAttacks.setStatus('current')
agCurCfgSecuritySymantecState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecuritySymantecState.setStatus('current')
agNewCfgSecuritySymantecState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecuritySymantecState.setStatus('current')
ipAclTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclTableMaxSize.setStatus('current')
ipAclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2), )
if mibBuilder.loadTexts: ipAclCurCfgTable.setStatus('current')
ipAclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipAclCurCfgIndx"))
if mibBuilder.loadTexts: ipAclCurCfgEntry.setStatus('current')
ipAclCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclCurCfgIndx.setStatus('current')
ipAclCurCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclCurCfgIp.setStatus('current')
ipAclCurCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclCurCfgMask.setStatus('current')
ipAclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3), )
if mibBuilder.loadTexts: ipAclNewCfgTable.setStatus('current')
ipAclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipAclNewCfgIndx"))
if mibBuilder.loadTexts: ipAclNewCfgEntry.setStatus('current')
ipAclNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclNewCfgIndx.setStatus('current')
ipAclNewCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclNewCfgIp.setStatus('current')
ipAclNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclNewCfgAction.setStatus('current')
ipAclNewCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclNewCfgMask.setStatus('current')
udpBlastudpPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastudpPortTableMaxSize.setStatus('current')
udpBlastCurCfgudpPortPacketLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortPacketLimit.setStatus('current')
udpBlastCurCfgudpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3), )
if mibBuilder.loadTexts: udpBlastCurCfgudpPortTable.setStatus('current')
udpBlastCurCfgudpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastCurCfgudpPortLowIndx"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastCurCfgudpPortHighIndx"))
if mibBuilder.loadTexts: udpBlastCurCfgudpPortEntry.setStatus('current')
udpBlastCurCfgudpPortLowIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortLowIndx.setStatus('current')
udpBlastCurCfgudpPortHighIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortHighIndx.setStatus('current')
udpBlastCurCfgudpPortEntryPacketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortEntryPacketLimit.setStatus('current')
udpBlastNewCfgudpPortPacketLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortPacketLimit.setStatus('current')
udpBlastNewCfgudpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5), )
if mibBuilder.loadTexts: udpBlastNewCfgudpPortTable.setStatus('current')
udpBlastNewCfgudpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastNewCfgudpPortLowIndx"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastNewCfgudpPortHighIndx"))
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntry.setStatus('current')
udpBlastNewCfgudpPortLowIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortLowIndx.setStatus('current')
udpBlastNewCfgudpPortHighIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortHighIndx.setStatus('current')
udpBlastNewCfgudpPortEntryDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntryDelete.setStatus('current')
udpBlastNewCfgudpPortEntryPacketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntryPacketLimit.setStatus('current')
secCurCfgSecurityLogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgSecurityLogThreshold.setStatus('current')
secNewCfgSecurityLogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgSecurityLogThreshold.setStatus('current')
secCurCfgPacketDepth = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgPacketDepth.setStatus('current')
secNewCfgPacketDepth = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgPacketDepth.setStatus('current')
secCurCfgIpAclSyslogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgIpAclSyslogThreshold.setStatus('current')
secNewCfgIpAclSyslogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgIpAclSyslogThreshold.setStatus('current')
secCurCfgIpAclSyslogTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgIpAclSyslogTime.setStatus('current')
secNewCfgIpAclSyslogTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgIpAclSyslogTime.setStatus('current')
dosCurCfgIPTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgIPTTL.setStatus('current')
dosNewCfgIPTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgIPTTL.setStatus('current')
dosCurCfgIPProt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgIPProt.setStatus('current')
dosNewCfgIPProt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgIPProt.setStatus('current')
dosCurCfgFragdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgFragdata.setStatus('current')
dosNewCfgFragdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgFragdata.setStatus('current')
dosCurCfgFragoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgFragoff.setStatus('current')
dosNewCfgFragoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgFragoff.setStatus('current')
dosCurCfgSYNdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgSYNdata.setStatus('current')
dosNewCfgSYNdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgSYNdata.setStatus('current')
dosCurCfgICMPdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9026))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgICMPdata.setStatus('current')
dosNewCfgICMPdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9026))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgICMPdata.setStatus('current')
dosCurCfgICMPoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8190))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgICMPoff.setStatus('current')
dosNewCfgICMPoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8190))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgICMPoff.setStatus('current')
ipDstAclTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclTableMaxSize.setStatus('current')
ipDstAclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2), )
if mibBuilder.loadTexts: ipDstAclCurCfgTable.setStatus('current')
ipDstAclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipDstAclCurCfgIndx"))
if mibBuilder.loadTexts: ipDstAclCurCfgEntry.setStatus('current')
ipDstAclCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclCurCfgIndx.setStatus('current')
ipDstAclCurCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclCurCfgIp.setStatus('current')
ipDstAclCurCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclCurCfgMask.setStatus('current')
ipDstAclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3), )
if mibBuilder.loadTexts: ipDstAclNewCfgTable.setStatus('current')
ipDstAclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipDstAclNewCfgIndx"))
if mibBuilder.loadTexts: ipDstAclNewCfgEntry.setStatus('current')
ipDstAclNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclNewCfgIndx.setStatus('current')
ipDstAclNewCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDstAclNewCfgIp.setStatus('current')
ipDstAclNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDstAclNewCfgAction.setStatus('current')
ipDstAclNewCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDstAclNewCfgMask.setStatus('current')
symSigBwmMappingTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symSigBwmMappingTableMaxSize.setStatus('current')
symCurCfgSigBwmMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2), )
if mibBuilder.loadTexts: symCurCfgSigBwmMappingTable.setStatus('current')
symCurCfgSigBwmMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symCurCfgTblIndex"))
if mibBuilder.loadTexts: symCurCfgSigBwmMappingTableEntry.setStatus('current')
symCurCfgTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgTblIndex.setStatus('current')
symCurCfgSignatureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgSignatureID.setStatus('current')
symCurCfgInContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgInContractID.setStatus('current')
symCurCfgOutContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgOutContractID.setStatus('current')
symNewCfgSigBwmMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3), )
if mibBuilder.loadTexts: symNewCfgSigBwmMappingTable.setStatus('current')
symNewCfgSigBwmMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symNewCfgTblIndex"))
if mibBuilder.loadTexts: symNewCfgSigBwmMappingTableEntry.setStatus('current')
symNewCfgTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symNewCfgTblIndex.setStatus('current')
symNewCfgSignatureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgSignatureID.setStatus('current')
symNewCfgInContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgInContractID.setStatus('current')
symNewCfgOutContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgOutContractID.setStatus('current')
symNewCfgDeleteEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("others", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgDeleteEntry.setStatus('current')
symNewCfgDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgDefaultAction.setStatus('current')
symCurCfgDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgDefaultAction.setStatus('current')
symSigFileVersionSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symSigFileVersionSeqNumber.setStatus('current')
agDosPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1), )
if mibBuilder.loadTexts: agDosPortStatsTable.setStatus('current')
agDosPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agDosPortStatsIndx"))
if mibBuilder.loadTexts: agDosPortStatsTableEntry.setStatus('current')
agDosPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIndx.setStatus('current')
agDosPortStatsIPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPLen.setStatus('current')
agDosPortStatsIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPVersion.setStatus('current')
agDosPortStatsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsBroadcast.setStatus('current')
agDosPortStatsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsLoopback.setStatus('current')
agDosPortStatsLand = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsLand.setStatus('current')
agDosPortStatsIPReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPReserved.setStatus('current')
agDosPortStatsIPTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPTTL.setStatus('current')
agDosPortStatsIPProt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPProt.setStatus('current')
agDosPortStatsIPOptLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPOptLen.setStatus('current')
agDosPortStatsFragMoreDont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragMoreDont.setStatus('current')
agDosPortStatsFragData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragData.setStatus('current')
agDosPortStatsFragBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragBoundary.setStatus('current')
agDosPortStatsFragLast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragLast.setStatus('current')
agDosPortStatsFragDontOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragDontOff.setStatus('current')
agDosPortStatsFragOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragOpt.setStatus('current')
agDosPortStatsFragOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragOff.setStatus('current')
agDosPortStatsFragOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragOversize.setStatus('current')
agDosPortStatsTCPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPLen.setStatus('current')
agDosPortStatsTCPPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPPortZero.setStatus('current')
agDosPortStatsBlatAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsBlatAttack.setStatus('current')
agDosPortStatsTCPReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPReserved.setStatus('current')
agDosPortStatsNullScanAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsNullScanAttack.setStatus('current')
agDosPortStatsFullXmasScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFullXmasScan.setStatus('current')
agDosPortStatsFinScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFinScan.setStatus('current')
agDosPortStatsVecnaScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsVecnaScan.setStatus('current')
agDosPortStatsXmasScanAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsXmasScanAttack.setStatus('current')
agDosPortStatsSynFinScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSynFinScan.setStatus('current')
agDosPortStatsFlagAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFlagAbnormal.setStatus('current')
agDosPortStatsSYNData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSYNData.setStatus('current')
agDosPortStatsSYNFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSYNFrag.setStatus('current')
agDosPortStatsFTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFTPPort.setStatus('current')
agDosPortStatsDNSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsDNSPort.setStatus('current')
agDosPortStatsSeqZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSeqZero.setStatus('current')
agDosPortStatsAckZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsAckZero.setStatus('current')
agDosPortStatsTCPOptLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPOptLen.setStatus('current')
agDosPortStatsUDPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsUDPLen.setStatus('current')
agDosPortStatsUDPPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsUDPPortZero.setStatus('current')
agDosPortStatsFraggleAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFraggleAttack.setStatus('current')
agDosPortStatsPepsi = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsPepsi.setStatus('current')
agDosPortStatsRc8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsRc8.setStatus('current')
agDosPortStatsSNMPNull = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSNMPNull.setStatus('current')
agDosPortStatsICMPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPLen.setStatus('current')
agDosPortStatsSmurfAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSmurfAttack.setStatus('current')
agDosPortStatsICMPData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPData.setStatus('current')
agDosPortStatsICMPOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPOff.setStatus('current')
agDosPortStatsICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPType.setStatus('current')
agDosPortStatsIGMPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIGMPLen.setStatus('current')
agDosPortStatsIGMPFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIGMPFrag.setStatus('current')
agDosPortStatsIGMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIGMPType.setStatus('current')
agDosPortStatsARPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPLen.setStatus('current')
agDosPortStatsARPNbCast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPNbCast.setStatus('current')
agDosPortStatsARPNuCast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPNuCast.setStatus('current')
agDosPortStatsARPSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPSpoof.setStatus('current')
agDosPortStatsGARP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsGARP.setStatus('current')
agDosPortStatsIP6Len = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIP6Len.setStatus('current')
agDosPortStatsIP6Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIP6Version.setStatus('current')
agSecurityPgrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agSecurityPgrpStatsTable.setStatus('current')
agSecurityPgrpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityPgrpStatsIndx"))
if mibBuilder.loadTexts: agSecurityPgrpStatsTableEntry.setStatus('current')
agSecurityPgrpStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityPgrpStatsIndx.setStatus('current')
agSecurityPgrpStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityPgrpStatsName.setStatus('current')
agSecurityPgrpStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityPgrpStatsHits.setStatus('current')
agSecurityUbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3), )
if mibBuilder.loadTexts: agSecurityUbStatsTable.setStatus('current')
agSecurityUbStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityUbStatsIndx"))
if mibBuilder.loadTexts: agSecurityUbStatsTableEntry.setStatus('current')
agSecurityUbStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsIndx.setStatus('current')
agSecurityUbStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsPort.setStatus('current')
agSecurityUbStatsBlockedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsBlockedPacket.setStatus('current')
agSecurityUbStatsPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsPacketRate.setStatus('current')
agSecurityIpAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4), )
if mibBuilder.loadTexts: agSecurityIpAclStatsTable.setStatus('current')
agSecurityIpAclStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityIpAclStatsIndx"))
if mibBuilder.loadTexts: agSecurityIpAclStatsTableEntry.setStatus('current')
agSecurityIpAclStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpAclStatsIndx.setStatus('current')
agSecurityIpAclStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpAclStatsAddress.setStatus('current')
agSecurityIpAclStatsBlockedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpAclStatsBlockedPacket.setStatus('current')
agSecurityIpDstAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5), )
if mibBuilder.loadTexts: agSecurityIpDstAclStatsTable.setStatus('current')
agSecurityIpDstAclStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityIpDstAclStatsIndx"))
if mibBuilder.loadTexts: agSecurityIpDstAclStatsTableEntry.setStatus('current')
agSecurityIpDstAclStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpDstAclStatsIndx.setStatus('current')
agSecurityIpDstAclStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpDstAclStatsAddress.setStatus('current')
agSecurityIpDstAclStatsBlockedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpDstAclStatsBlockedPacket.setStatus('current')
symantecStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6))
symStatsTotalHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsTotalHits.setStatus('current')
symStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: symStatsClear.setStatus('current')
symStatsSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsSourceIp.setStatus('current')
symStatsSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsSourcePort.setStatus('current')
symStatsDestIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsDestIp.setStatus('current')
symStatsDestPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsDestPort.setStatus('current')
symStatsProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsProtocol.setStatus('current')
symStatsLastHitId = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsLastHitId.setStatus('current')
symStatsConfiguredHitsMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsMax.setStatus('current')
symStatsConfiguredHitsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10), )
if mibBuilder.loadTexts: symStatsConfiguredHitsTable.setStatus('current')
symStatsConfiguredHitsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsConfiguredHitsTblIndex"))
if mibBuilder.loadTexts: symStatsConfiguredHitsTableEntry.setStatus('current')
symStatsConfiguredHitsTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsTblIndex.setStatus('current')
symStatsConfiguredHitsSigId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsSigId.setStatus('current')
symStatsConfiguredHitsTotalSpHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsTotalSpHCount.setStatus('current')
symStatsConfiguredHitsInCont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsInCont.setStatus('current')
symStatsConfiguredHitsOutCont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsOutCont.setStatus('current')
symStatsConfiguredHitsLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsLastHitTime.setStatus('current')
symStatsConfiguredHitsCountOnSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11), )
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTable.setStatus('current')
symStatsConfiguredHitsCountOnSpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsConfiguredHitsCountOnSpTblIndex"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsConfiguredHitsCountOnSpTblSpIndex"))
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTableEntry.setStatus('current')
symStatsConfiguredHitsCountOnSpTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblIndex.setStatus('current')
symStatsConfiguredHitsCountOnSpTblSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblSpIndex.setStatus('current')
symStatsConfiguredHitsCountOnSpTblHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblHitCount.setStatus('current')
symStatsUnconfiguredHitsMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsMax.setStatus('current')
symStatsUnconfiguredHitsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13), )
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTable.setStatus('current')
symStatsUnconfiguredHitsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsUnconfiguredHitsTblIndex"))
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTableEntry.setStatus('current')
symStatsUnconfiguredHitsTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTblIndex.setStatus('current')
symStatsUnconfiguredHitsSigId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsSigId.setStatus('current')
symStatsUnconfiguredHitsTotalSpHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTotalSpHCount.setStatus('current')
symStatsUnconfiguredHitsLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsLastHitTime.setStatus('current')
symStatsUnconfiguredHitsCountOnSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14), )
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTable.setStatus('current')
symStatsUnconfiguredHitsCountOnSpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsUnconfiguredHitsCountOnSpTblIndex"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsUnconfiguredHitsCountOnSpTblSpIndex"))
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTableEntry.setStatus('current')
symStatsUnconfiguredHitsCountOnSpTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblIndex.setStatus('current')
symStatsUnconfiguredHitsCountOnSpTblSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblSpIndex.setStatus('current')
symStatsUnconfiguredHitsCountOnSpTblHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblHitCount.setStatus('current')
agCfgBootWeekday = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootWeekday.setStatus('current')
agCfgBootHour = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootHour.setStatus('current')
agCfgBootMin = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootMin.setStatus('current')
agCfgBootReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootReset.setStatus('current')
agCfgBootNxtResetTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgBootNxtResetTime.setStatus('current')
agPortAccessTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortAccessTableMaxSize.setStatus('current')
agCurCfgPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2), )
if mibBuilder.loadTexts: agCurCfgPortAccessTable.setStatus('current')
agCurCfgPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgPortAccessIndex"))
if mibBuilder.loadTexts: agCurCfgPortAccessEntry.setStatus('current')
agCurCfgPortAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPortAccessIndex.setStatus('current')
agCurCfgPortAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPortAccessState.setStatus('current')
agNewCfgPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3), )
if mibBuilder.loadTexts: agNewCfgPortAccessTable.setStatus('current')
agNewCfgPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgPortAccessIndex"))
if mibBuilder.loadTexts: agNewCfgPortAccessEntry.setStatus('current')
agNewCfgPortAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgPortAccessIndex.setStatus('current')
agNewCfgPortAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgPortAccessState.setStatus('current')
agSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("save", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5), ("saveNoBackup", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfig.setStatus('current')
agSaveTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSaveTableSize.setStatus('current')
agSaveTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3), )
if mibBuilder.loadTexts: agSaveTable.setStatus('current')
agSaveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSaveIndex"))
if mibBuilder.loadTexts: agSaveTableEntry.setStatus('current')
agSaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSaveIndex.setStatus('current')
agSaveString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSaveString.setStatus('current')
agFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileSize.setStatus('current')
agFileTransferState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("transfer", 2), ("inprogress", 3), ("missingrows", 4), ("complete", 5), ("error", 6), ("endoftransfer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileTransferState.setStatus('current')
agFileTableMissingRows = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileTableMissingRows.setStatus('current')
agFileType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bogon", 1), ("symantecSignature", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileType.setStatus('current')
agFileTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileTableSize.setStatus('current')
agFileTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6), )
if mibBuilder.loadTexts: agFileTable.setStatus('current')
agFileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agFileIndex"))
if mibBuilder.loadTexts: agFileTableEntry.setStatus('current')
agFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileIndex.setStatus('current')
agFileString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileString.setStatus('current')
agFileErrorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileErrorTableSize.setStatus('current')
agFileErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8), )
if mibBuilder.loadTexts: agFileErrorTable.setStatus('current')
agFileErrorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agFileErrorIndex"))
if mibBuilder.loadTexts: agFileErrorTableEntry.setStatus('current')
agFileErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileErrorIndex.setStatus('current')
agFileErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileErrorString.setStatus('current')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('current')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('current')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('current')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('current')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('current')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('current')
pktStatsMediumsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setStatus('current')
pktStatsJumbosHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setStatus('current')
pktStatsSmallsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setStatus('current')
pktStatsDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsDiscards.setStatus('current')
mpCpuStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setStatus('current')
mpCpuStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setStatus('current')
mpCpuStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setStatus('current')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('current')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('current')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('current')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('current')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('current')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('current')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('current')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('current')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('current')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('current')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('current')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('current')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('current')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('current')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('current')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('current')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
portStatsPhyIfInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInMcastPkts.setStatus('current')
portStatsPhyIfOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutMcastPkts.setStatus('current')
portMirrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1), )
if mibBuilder.loadTexts: portMirrorStatsTable.setStatus('current')
portMirrorStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portMirrorStatsIndx"))
if mibBuilder.loadTexts: portMirrorStatsTableEntry.setStatus('current')
portMirrorStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorStatsIndx.setStatus('current')
portMirrorStatsIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorStatsIngress.setStatus('current')
portMirrorStatsEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorStatsEgress.setStatus('current')
portMirrorClear = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 2))
portMirrorStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMirrorStatsClear.setStatus('current')
mpMemStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsTotal.setStatus('current')
mpMemStatsUsed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsUsed.setStatus('current')
mpMemStatsFree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsFree.setStatus('current')
mpMemStatsLowFree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsLowFree.setStatus('current')
ntpPrimaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setStatus('current')
ntpPrimaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setStatus('current')
ntpPrimaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setStatus('current')
ntpSecondaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setStatus('current')
ntpSecondaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setStatus('current')
ntpSecondaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setStatus('current')
ntpLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateServer.setStatus('current')
ntpLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateTime.setStatus('current')
ntpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClearStats.setStatus('current')
ntpSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSystemCurrentTime.setStatus('current')
snmpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpClearStats.setStatus('current')
agDiffState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diff", 1), ("flashdiff", 2), ("idle", 3), ("inprogress", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agDiffState.setStatus('current')
agDiffTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffTableSize.setStatus('current')
agDiffTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4), )
if mibBuilder.loadTexts: agDiffTable.setStatus('current')
agDiffTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agDiffIndex"))
if mibBuilder.loadTexts: agDiffTableEntry.setStatus('current')
agDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffIndex.setStatus('current')
agDiffString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffString.setStatus('current')
agCfgDumpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dump", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgDumpState.setStatus('current')
agCfgDumpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpTableSize.setStatus('current')
agCfgDumpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4), )
if mibBuilder.loadTexts: agCfgDumpTable.setStatus('current')
agCfgDumpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCfgDumpIndex"))
if mibBuilder.loadTexts: agCfgDumpTableEntry.setStatus('current')
agCfgDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpIndex.setStatus('current')
agCfgDumpString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpString.setStatus('current')
spStatsCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1), )
if mibBuilder.loadTexts: spStatsCpuUtilTable.setStatus('current')
spStatsCpuUtilTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "spStatsCpuUtilSpIndex"))
if mibBuilder.loadTexts: spStatsCpuUtilTableEntry.setStatus('current')
spStatsCpuUtilSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtilSpIndex.setStatus('current')
spStatsCpuUtil1Second = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtil1Second.setStatus('current')
spStatsCpuUtil4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtil4Seconds.setStatus('current')
spStatsCpuUtil64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtil64Seconds.setStatus('current')
spMaintStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2), )
if mibBuilder.loadTexts: spMaintStatsTable.setStatus('current')
spMaintStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "spMaintStatsSpIndex"))
if mibBuilder.loadTexts: spMaintStatsTableEntry.setStatus('current')
spMaintStatsSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSpIndex.setStatus('current')
spMaintStatsPfdbFreeEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsPfdbFreeEmpty.setStatus('current')
spMaintStatsResolveErrNoddw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsResolveErrNoddw.setStatus('current')
spMaintStatsLearnErrNoddw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsLearnErrNoddw.setStatus('current')
spMaintStatsAgeMPNoddw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsAgeMPNoddw.setStatus('current')
spMaintStatsDeleteMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsDeleteMiss.setStatus('current')
spMaintStatsRecvLetErrorsMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsMP.setStatus('current')
spMaintStatsRecvLetErrorsSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP1.setStatus('current')
spMaintStatsRecvLetErrorsSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP2.setStatus('current')
spMaintStatsRecvLetErrorsSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP3.setStatus('current')
spMaintStatsRecvLetErrorsSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP4.setStatus('current')
spMaintStatsSendLetFailsMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsMP.setStatus('current')
spMaintStatsSendLetFailsSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP1.setStatus('current')
spMaintStatsSendLetFailsSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP2.setStatus('current')
spMaintStatsSendLetFailsSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP3.setStatus('current')
spMaintStatsSendLetFailsSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP4.setStatus('current')
spMaintStatsRecvLetSuccessMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessMP.setStatus('current')
spMaintStatsRecvLetSuccessSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP1.setStatus('current')
spMaintStatsRecvLetSuccessSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP2.setStatus('current')
spMaintStatsRecvLetSuccessSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP3.setStatus('current')
spMaintStatsRecvLetSuccessSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP4.setStatus('current')
spMaintStatsSendLetSuccessMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessMP.setStatus('current')
spMaintStatsSendLetSuccessSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP1.setStatus('current')
spMaintStatsSendLetSuccessSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP2.setStatus('current')
spMaintStatsSendLetSuccessSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP3.setStatus('current')
spMaintStatsSendLetSuccessSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP4.setStatus('current')
spMaintStatsRateLimitArpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitArpDrops.setStatus('current')
spMaintStatsRateLimitIcmpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitIcmpDrops.setStatus('current')
spMaintStatsRateLimitTcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitTcpDrops.setStatus('current')
spMaintStatsRateLimitUdpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitUdpDrops.setStatus('current')
spMemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3), )
if mibBuilder.loadTexts: spMemStatsTable.setStatus('current')
spMemStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "spMemStatsIndex"))
if mibBuilder.loadTexts: spMemStatsTableEntry.setStatus('current')
spMemStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsIndex.setStatus('current')
spMemStatsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsTotal.setStatus('current')
spMemStatsCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsCurr.setStatus('current')
spMemStatsAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsAllocs.setStatus('current')
spMemStatsFrees = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsFrees.setStatus('current')
spMemStatsAllocsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsAllocsFailures.setStatus('current')
spMemStatsHiWat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsHiWat.setStatus('current')
mgmtStatsRxpackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxpackets.setStatus('current')
mgmtStatsRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxErrors.setStatus('current')
mgmtStatsRxDropped = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxDropped.setStatus('current')
mgmtStatsRxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxOverruns.setStatus('current')
mgmtStatsRxFrame = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxFrame.setStatus('current')
mgmtStatsTxpackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxpackets.setStatus('current')
mgmtStatsTxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxErrors.setStatus('current')
mgmtStatsTxDropped = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxDropped.setStatus('current')
mgmtStatsTxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxOverruns.setStatus('current')
mgmtStatsTxCarrier = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxCarrier.setStatus('current')
mgmtStatsTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxCollisions.setStatus('current')
mgmtStatsTxQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxQueueLen.setStatus('current')
mgmtStatsRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxBytes.setStatus('current')
mgmtStatsRxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxMulticast.setStatus('current')
mgmtStatsTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxBytes.setStatus('current')
ipAclBogonInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1))
ipAclBogonInfoTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoTableMaxSize.setStatus('current')
ipAclBogonInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2), )
if mibBuilder.loadTexts: ipAclBogonInfoTable.setStatus('current')
ipAclBogonInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipAclBogonInfoIndex"))
if mibBuilder.loadTexts: ipAclBogonInfoTableEntry.setStatus('current')
ipAclBogonInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoIndex.setStatus('current')
ipAclBogonInfoIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoIp.setStatus('current')
ipAclBogonInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoMask.setStatus('current')
symantecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2))
symIpsEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symIpsEngineVersion.setStatus('current')
symMatchInfoSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2), )
if mibBuilder.loadTexts: symMatchInfoSpTable.setStatus('current')
symMatchInfoSpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symMatchInfoSpTableIndex"))
if mibBuilder.loadTexts: symMatchInfoSpTableEntry.setStatus('current')
symMatchInfoSpTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpTableIndex.setStatus('current')
symMatchInfoSpClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpClientIp.setStatus('current')
symMatchInfoSpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpServerIp.setStatus('current')
symMatchInfoSpClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpClientPort.setStatus('current')
symMatchInfoSpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpServerPort.setStatus('current')
symMatchInfoSpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpProtocol.setStatus('current')
symMatchInfoSpNumOfMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpNumOfMatches.setStatus('current')
symMatchInfoSpSigActTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3), )
if mibBuilder.loadTexts: symMatchInfoSpSigActTable.setStatus('current')
symMatchInfoSpSigActTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symMatchInfoSpSigActTblSpIndex"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "symMatchInfoSpSigActTblIndex"))
if mibBuilder.loadTexts: symMatchInfoSpSigActTableEntry.setStatus('current')
symMatchInfoSpSigActTblSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblSpIndex.setStatus('current')
symMatchInfoSpSigActTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblIndex.setStatus('current')
symMatchInfoSpSigActTblSigId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblSigId.setStatus('current')
symMatchInfoSpSigActTblAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblAction.setStatus('current')
mgmtPortInfoSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbs10", 1), ("mbs100", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortInfoSpeed.setStatus('current')
mgmtPortInfoMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortInfoMode.setStatus('current')
mgmtPortInfoLink = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortInfoLink.setStatus('current')
hwOrderNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOrderNumber.setStatus('current')
hwMainBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMainBoardNumber.setStatus('current')
hwMainBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMainBoardRevision.setStatus('current')
hwEthernetBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetBoardNumber.setStatus('current')
hwEthernetBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetBoardRevision.setStatus('current')
hwChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChassisSerialNumber.setStatus('current')
hwChassisRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChassisRevision.setStatus('current')
hwPower = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPower.setStatus('current')
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", agDosPortStatsFragDontOff=agDosPortStatsFragDontOff, agDosPortStatsSYNFrag=agDosPortStatsSYNFrag, agDosPortStatsFraggleAttack=agDosPortStatsFraggleAttack, spMaintStatsSendLetFailsMP=spMaintStatsSendLetFailsMP, hwChassisSerialNumber=hwChassisSerialNumber, agEnabledSwFeatures=agEnabledSwFeatures, agCurCfgSyslogTrapFilter=agCurCfgSyslogTrapFilter, agMgmtCurCfgState=agMgmtCurCfgState, agDosPortStatsICMPType=agDosPortStatsICMPType, agMgmtPortCurCfgMode=agMgmtPortCurCfgMode, switchCapScriptHealthChecksMaxEnt=switchCapScriptHealthChecksMaxEnt, agCfgSecurityPortIndx=agCfgSecurityPortIndx, spMaintStatsRecvLetErrorsSP1=spMaintStatsRecvLetErrorsSP1, agMgmtNewCfgGateway=agMgmtNewCfgGateway, agDosPortStatsFragOpt=agDosPortStatsFragOpt, agDosPortStatsIPOptLen=agDosPortStatsIPOptLen, agPortCurCfgPVID=agPortCurCfgPVID, bwmPoliciesMaxEnt=bwmPoliciesMaxEnt, portInfoMode=portInfoMode, agPortNewCfgFastEthFctl=agPortNewCfgFastEthFctl, securityStats=securityStats, switchCapGSLBGeographicalRegionsMaxEnt=switchCapGSLBGeographicalRegionsMaxEnt, agCurCfgNTPSecServer=agCurCfgNTPSecServer, switchCapGSLBMetricsPerRuleMaxEnt=switchCapGSLBMetricsPerRuleMaxEnt, agMgmtNewCfgDns=agMgmtNewCfgDns, switchCapGSLBRemSersCurrEnt=switchCapGSLBRemSersCurrEnt, switchCapLocNetsCurrEnt=switchCapLocNetsCurrEnt, mgmtInfo=mgmtInfo, agCurCfgSyslogTrapSlb=agCurCfgSyslogTrapSlb, agSyslogMsgIndex=agSyslogMsgIndex, agNewCfgSecurityRemAttack=agNewCfgSecurityRemAttack, agRadiusConfig=agRadiusConfig, switchCapIpStaticRoutesCurrEnt=switchCapIpStaticRoutesCurrEnt, mpCpuStatsUtil64Seconds=mpCpuStatsUtil64Seconds, mpCpuStatsUtil4Seconds=mpCpuStatsUtil4Seconds, agCfgBootHour=agCfgBootHour, agMgmtNewCfgSnmp=agMgmtNewCfgSnmp, agCurCfgXMLCfgServerPort=agCurCfgXMLCfgServerPort, symMatchInfoSpTableEntry=symMatchInfoSpTableEntry, agFileIndex=agFileIndex, portInfoPreferred=portInfoPreferred, snmpv3TargetAddrMaxEnt=snmpv3TargetAddrMaxEnt, switchCapASFlts=switchCapASFlts, mgmtStatsTxDropped=mgmtStatsTxDropped, agCfgBootNxtResetTime=agCfgBootNxtResetTime, udpBlastCfg=udpBlastCfg, ntpSecondaryServerRespRcvd=ntpSecondaryServerRespRcvd, mgmtStatsTxErrors=mgmtStatsTxErrors, symStatsConfiguredHitsMax=symStatsConfiguredHitsMax, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, dosNewCfgIPProt=dosNewCfgIPProt, agSecurityPgrpStatsName=agSecurityPgrpStatsName, agApply=agApply, agNewCfgSnmpTimeout=agNewCfgSnmpTimeout, agDosPortStatsSYNData=agDosPortStatsSYNData, agSecurityIpAclStatsAddress=agSecurityIpAclStatsAddress, portMirrorStatsTableEntry=portMirrorStatsTableEntry, radNewCfgPort=radNewCfgPort, agMgmtCurCfgRadius=agMgmtCurCfgRadius, agMgmtNewCfgSmtp=agMgmtNewCfgSmtp, spMaintStatsSendLetFailsSP2=spMaintStatsSendLetFailsSP2, portInfoTable=portInfoTable, agMgmtNewCfgState=agMgmtNewCfgState, switchCapGSLBRemSersMaxEnt=switchCapGSLBRemSersMaxEnt, agDosPortStatsTCPOptLen=agDosPortStatsTCPOptLen, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, agMgmtNewCfgTftp=agMgmtNewCfgTftp, udpBlastNewCfgudpPortHighIndx=udpBlastNewCfgudpPortHighIndx, agSecurityIpDstAclStatsIndx=agSecurityIpDstAclStatsIndx, agCurCfgPortAccessTable=agCurCfgPortAccessTable, switchCapMappingPerDomainrecord=switchCapMappingPerDomainrecord, portStatsPhyIfOutMcastPkts=portStatsPhyIfOutMcastPkts, spMaintStatsRecvLetErrorsSP2=spMaintStatsRecvLetErrorsSP2, switchCapGSLBDNSPersCacheCurrEnt=switchCapGSLBDNSPersCacheCurrEnt, agPortNewCfgBwmContract=agPortNewCfgBwmContract, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, agMgmtCurCfgMask=agMgmtCurCfgMask, agSaveTableSize=agSaveTableSize, agNewCfgNTPTzoneHHMM=agNewCfgNTPTzoneHHMM, agNewCfgSonmpSrcIf=agNewCfgSonmpSrcIf, ntpLastUpdateServer=ntpLastUpdateServer, ntpSystemCurrentTime=ntpSystemCurrentTime, agMgmtPortNewCfgAuto=agMgmtPortNewCfgAuto, agDosPortStatsIPProt=agDosPortStatsIPProt, tacCurCfgCmap=tacCurCfgCmap, switchCapSerGRsCurrEnt=switchCapSerGRsCurrEnt, agDiff=agDiff, agentInfo=agentInfo, switchCapBootpSerMaxEnt=switchCapBootpSerMaxEnt, agDosPortStatsFullXmasScan=agDosPortStatsFullXmasScan, switchCapBGPPeersCurrEnt=switchCapBGPPeersCurrEnt, switchCapPIPsMaxEnt=switchCapPIPsMaxEnt, agNewCfgHttpServerPort=agNewCfgHttpServerPort, agMgmtNewCfgTacacs=agMgmtNewCfgTacacs, symantecStats=symantecStats, switchCapSTGsCurrEnt=switchCapSTGsCurrEnt, dosCurCfgIPTTL=dosCurCfgIPTTL, ntpSecondaryServerReqSent=ntpSecondaryServerReqSent, agRevert=agRevert, portOperIdx=portOperIdx, bogonSrcIPACLsCurrEnt=bogonSrcIPACLsCurrEnt, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, ipAclCurCfgMask=ipAclCurCfgMask, agCfgBootReset=agCfgBootReset, switchCapMonitorPorts=switchCapMonitorPorts, agNewCfgLoginBanner=agNewCfgLoginBanner, agPortNewCfgIndx=agPortNewCfgIndx, agSecurityUbStatsTable=agSecurityUbStatsTable, agConfigForNxtReset=agConfigForNxtReset, symCurCfgSignatureID=symCurCfgSignatureID, symStatsUnconfiguredHitsCountOnSpTblIndex=symStatsUnconfiguredHitsCountOnSpTblIndex, agFileErrorTableEntry=agFileErrorTableEntry, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, mpMemStatsUsed=mpMemStatsUsed, tacCurCfgState=tacCurCfgState, switchCapLACPTrunkGRs=switchCapLACPTrunkGRs, switchCapSlbPortFltState=switchCapSlbPortFltState, ntpPrimaryServerRespRcvd=ntpPrimaryServerRespRcvd, switchCapLSDBLimit=switchCapLSDBLimit, agCurCfgSyslogTrapOspf=agCurCfgSyslogTrapOspf, configSrcIPACLsMaxEnt=configSrcIPACLsMaxEnt, ipDstAclCurCfgEntry=ipDstAclCurCfgEntry, ipDstAclNewCfgIndx=ipDstAclNewCfgIndx, agTftpCfgFileName=agTftpCfgFileName, agMgmtCurCfgTacacs=agMgmtCurCfgTacacs, agTftp=agTftp, agCurCfgTrapSrcIf=agCurCfgTrapSrcIf, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, agCurCfgTCPMaxRate=agCurCfgTCPMaxRate, radNewCfgAuthenSecondString=radNewCfgAuthenSecondString, dosCurCfgIPProt=dosCurCfgIPProt, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, spMaintStatsTableEntry=spMaintStatsTableEntry, agBootVer=agBootVer, agDosPortStatsXmasScanAttack=agDosPortStatsXmasScanAttack, agCurDaylightSavings=agCurDaylightSavings, tacNewCfgTelnet=tacNewCfgTelnet, bwmGRsCurrEnt=bwmGRsCurrEnt, udpBlastCurCfgudpPortTable=udpBlastCurCfgudpPortTable, agDosPortStatsFragMoreDont=agDosPortStatsFragMoreDont, tcpDosAtkPrevention=tcpDosAtkPrevention, symMatchInfoSpSigActTblAction=symMatchInfoSpSigActTblAction, agPortNewCfgTable=agPortNewCfgTable, agPortCurCfgPortAlias=agPortCurCfgPortAlias, agNewCfgPgrpMatchIndex=agNewCfgPgrpMatchIndex, agDosPortStatsIPTTL=agDosPortStatsIPTTL, agNewCfgSecurityDoSAttacks=agNewCfgSecurityDoSAttacks, agCurCfgSyslogHost=agCurCfgSyslogHost, agSecurityUbStatsPacketRate=agSecurityUbStatsPacketRate, spMemStatsIndex=spMemStatsIndex, symStatsUnconfiguredHitsTblIndex=symStatsUnconfiguredHitsTblIndex, agCurCfgMgmtNetMask=agCurCfgMgmtNetMask, totalDstIPACLsCurrEnt=totalDstIPACLsCurrEnt, tacacsSerMaxEnt=tacacsSerMaxEnt, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, agClearStats=agClearStats, switchCapStaticTrunkGrpsMaxEnt=switchCapStaticTrunkGrpsMaxEnt, agPortCurCfgFastEthAutoNeg=agPortCurCfgFastEthAutoNeg, ipAclNewCfgEntry=ipAclNewCfgEntry, switchCapOSPFHostsMaxEnt=switchCapOSPFHostsMaxEnt, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, agPortNewCfgFastEthSpeed=agPortNewCfgFastEthSpeed, agPortCurCfgBackup=agPortCurCfgBackup, agCurCfgSyslogTrapRmon=agCurCfgSyslogTrapRmon, agTftpImageFileName=agTftpImageFileName, agPortCurCfgPortName=agPortCurCfgPortName, ipDstAclCurCfgMask=ipDstAclCurCfgMask, mpMemory=mpMemory, spMaintStatsAgeMPNoddw=spMaintStatsAgeMPNoddw, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, agPortCurCfgEgressBW=agPortCurCfgEgressBW, dosNewCfgICMPdata=dosNewCfgICMPdata, agFileTableMissingRows=agFileTableMissingRows, switchCapSlbPortSerState=switchCapSlbPortSerState, agDosPortStatsARPSpoof=agDosPortStatsARPSpoof, agMgmtCurCfgDns=agMgmtCurCfgDns, agNewCfgSecurityDosState=agNewCfgSecurityDosState, spMemStatsAllocsFailures=spMemStatsAllocsFailures, agDosPortStatsSeqZero=agDosPortStatsSeqZero, switchCapGSLBDNSPersCacheMaxEnt=switchCapGSLBDNSPersCacheMaxEnt, ipAclBogonInfoTableMaxSize=ipAclBogonInfoTableMaxSize, agNewCfgTelnetServerPort=agNewCfgTelnetServerPort, switchCapDNSSerCurrEnt=switchCapDNSSerCurrEnt, agNewCfgSyslogTrapSlbAtk=agNewCfgSyslogTrapSlbAtk, agPortNewCfgPortName=agPortNewCfgPortName, spMaintStatsSpIndex=spMaintStatsSpIndex, secGeneralCfg=secGeneralCfg, bwmPoliciesCurrEnt=bwmPoliciesCurrEnt, agNewCfgSyslogTrapGslb=agNewCfgSyslogTrapGslb, agNewCfgTCPMaxRate=agNewCfgTCPMaxRate, radCurCfgAuthenString=radCurCfgAuthenString, agMgmtCurCfgWlm=agMgmtCurCfgWlm, symStatsSourceIp=symStatsSourceIp, symStatsUnconfiguredHitsCountOnSpTable=symStatsUnconfiguredHitsCountOnSpTable, symStatsUnconfiguredHitsCountOnSpTableEntry=symStatsUnconfiguredHitsCountOnSpTableEntry, agFileTransferState=agFileTransferState, hwTemperatureStatus=hwTemperatureStatus, symStatsUnconfiguredHitsSigId=symStatsUnconfiguredHitsSigId, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, symantecCfg=symantecCfg, agCurCfgSecuritySymantecState=agCurCfgSecuritySymantecState, udpBlastudpPortTableMaxSize=udpBlastudpPortTableMaxSize, udpBlastNewCfgudpPortEntryPacketLimit=udpBlastNewCfgudpPortEntryPacketLimit, spMaintStatsRateLimitArpDrops=spMaintStatsRateLimitArpDrops, portStatsPhyIfInMcastPkts=portStatsPhyIfInMcastPkts, agSecurityIpDstAclStatsAddress=agSecurityIpDstAclStatsAddress, switchCapRulesforURLParsingCurrEnt=switchCapRulesforURLParsingCurrEnt, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, portInfoSFPType=portInfoSFPType, agCurCfgICMPMaxRate=agCurCfgICMPMaxRate, agSyslogMsgTableMaxSize=agSyslogMsgTableMaxSize, agDosPortStatsTableEntry=agDosPortStatsTableEntry, mgmtNetworksCurrEnt=mgmtNetworksCurrEnt, secCurCfgSecurityLogThreshold=secCurCfgSecurityLogThreshold, agDosPortStatsIP6Version=agDosPortStatsIP6Version, portInfoPhyConnType=portInfoPhyConnType, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, agDosPortStatsICMPOff=agDosPortStatsICMPOff, totalDosAtkPrevention=totalDosAtkPrevention, portStatsTableEntry=portStatsTableEntry, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, symStatsConfiguredHitsTblIndex=symStatsConfiguredHitsTblIndex, switchCapGSLBLocSersMaxEnt=switchCapGSLBLocSersMaxEnt, switchCapVlanMaxEnt=switchCapVlanMaxEnt, PYSNMP_MODULE_ID=agent, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, secCurCfgPacketDepth=secCurCfgPacketDepth, agCurCfgMgmtNetSubnet=agCurCfgMgmtNetSubnet, switchCapVRRPRtrGRsMaxEnt=switchCapVRRPRtrGRsMaxEnt, agCurCfgNTPTzoneHHMM=agCurCfgNTPTzoneHHMM, switchCapIDSSerGRs=switchCapIDSSerGRs, agDosPortStatsIPVersion=agDosPortStatsIPVersion, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, agCurCfgNTPService=agCurCfgNTPService, tacCurCfgAuthenSecondString=tacCurCfgAuthenSecondString, agDosPortStatsIP6Len=agDosPortStatsIP6Len, agSecurityPgrpStatsHits=agSecurityPgrpStatsHits, agPortNewCfgRmon=agPortNewCfgRmon, agNewCfgSecurityAttacksBmap=agNewCfgSecurityAttacksBmap, ipAclNewCfgTable=ipAclNewCfgTable, switchCapSlbInfo=switchCapSlbInfo, switchCapIpIntfMaxEnt=switchCapIpIntfMaxEnt, hwEthernetBoardRevision=hwEthernetBoardRevision, switchCapSecInfo=switchCapSecInfo, pktStatsMediumsHiWatermark=pktStatsMediumsHiWatermark, agCurCfgPgrpMatchIndex=agCurCfgPgrpMatchIndex, switchCapOSPFVirtLinksCurrEnt=switchCapOSPFVirtLinksCurrEnt, switchCapStaticTrunkGrpsCurrEnt=switchCapStaticTrunkGrpsCurrEnt, agCfgBootWeekday=agCfgBootWeekday, agCfgDumpTable=agCfgDumpTable, agSslprocNewCfgPort=agSslprocNewCfgPort, agSecurityIpDstAclStatsTableEntry=agSecurityIpDstAclStatsTableEntry, agDosPortStatsVecnaScan=agDosPortStatsVecnaScan, symMatchInfoSpTable=symMatchInfoSpTable)
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", agCurCfgSyslog2Sev=agCurCfgSyslog2Sev, agNewCfgSyslogTrapBgp=agNewCfgSyslogTrapBgp, switchCapIpIntfCurrEnt=switchCapIpIntfCurrEnt, switchCapGSLBDomainsCurrEnt=switchCapGSLBDomainsCurrEnt, portInfoBackup=portInfoBackup, spMaintStatsDeleteMiss=spMaintStatsDeleteMiss, spMaintStatsRateLimitIcmpDrops=spMaintStatsRateLimitIcmpDrops, snmpv3UsersCurrEnt=snmpv3UsersCurrEnt, spMemStatsTable=spMemStatsTable, agCurCfgSonmpSrcIf=agCurCfgSonmpSrcIf, agFileErrorTableSize=agFileErrorTableSize, mgmtStatsRxDropped=mgmtStatsRxDropped, symCurCfgInContractID=symCurCfgInContractID, switchCapVirtServicesEnt=switchCapVirtServicesEnt, switchCapSlbPortInfoTableEntry=switchCapSlbPortInfoTableEntry, igmpDosAtkPrevention=igmpDosAtkPrevention, agTftpPort=agTftpPort, tacacsSerCurrEnt=tacacsSerCurrEnt, agNewCfgPortAccessEntry=agNewCfgPortAccessEntry, hwMainBoardNumber=hwMainBoardNumber, spMemory=spMemory, switchCapNwkFltsCurrEnt=switchCapNwkFltsCurrEnt, agSyslogMessage=agSyslogMessage, ipAclBogonInfoIndex=ipAclBogonInfoIndex, agSecurityUbStatsBlockedPacket=agSecurityUbStatsBlockedPacket, agSonmp=agSonmp, mgmtStatsTxCarrier=mgmtStatsTxCarrier, agPortCurCfgState=agPortCurCfgState, symStatsConfiguredHitsLastHitTime=symStatsConfiguredHitsLastHitTime, spMaintStatsRecvLetErrorsSP3=spMaintStatsRecvLetErrorsSP3, snmpv3AccessGRsCurrEnt=snmpv3AccessGRsCurrEnt, ipDstAclCurCfgIndx=ipDstAclCurCfgIndx, agNewCfgSyslogTrapTcpLim=agNewCfgSyslogTrapTcpLim, switchCapVRRPRtrsCurrEnt=switchCapVRRPRtrsCurrEnt, switchCapOSPFAreasCurrEnt=switchCapOSPFAreasCurrEnt, ntpOperSendReq=ntpOperSendReq, agCurCfgPgrpMatchBmap=agCurCfgPgrpMatchBmap, agMgmtNetConfig=agMgmtNetConfig, ipDstAclNewCfgEntry=ipDstAclNewCfgEntry, agNewCfgConsole=agNewCfgConsole, agPortCurCfgRmon=agPortCurCfgRmon, agSecurityIpAclStatsIndx=agSecurityIpAclStatsIndx, symStatsSourcePort=symStatsSourcePort, agNewCfgMgmtNetDelete=agNewCfgMgmtNetDelete, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, agDosPortStatsSynFinScan=agDosPortStatsSynFinScan, symMatchInfoSpTableIndex=symMatchInfoSpTableIndex, switchCapPortTeamsCurrEnt=switchCapPortTeamsCurrEnt, agNewCfgICMPMaxRate=agNewCfgICMPMaxRate, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, symStatsUnconfiguredHitsTableEntry=symStatsUnconfiguredHitsTableEntry, udpBlastCurCfgudpPortLowIndx=udpBlastCurCfgudpPortLowIndx, spMaintStatsPfdbFreeEmpty=spMaintStatsPfdbFreeEmpty, agNewCfgPortAccessIndex=agNewCfgPortAccessIndex, agCurCfgMgmtNetEntry=agCurCfgMgmtNetEntry, agMgmtCurCfgSmtp=agMgmtCurCfgSmtp, agDosPortStatsPepsi=agDosPortStatsPepsi, mgmtStatsTxCollisions=mgmtStatsTxCollisions, portMirrorStats=portMirrorStats, dosAttackPrevCfg=dosAttackPrevCfg, switchCapBootpSerCurrEnt=switchCapBootpSerCurrEnt, portInfoIndx=portInfoIndx, agTftpTSDumpFileName=agTftpTSDumpFileName, ipAclCurCfgTable=ipAclCurCfgTable, agSecurityUbStatsIndx=agSecurityUbStatsIndx, agPortOperTable=agPortOperTable, agCurCfgSecurityAttacksBmap=agCurCfgSecurityAttacksBmap, agSecurityIpDstAclStatsBlockedPacket=agSecurityIpDstAclStatsBlockedPacket, symStatsUnconfiguredHitsCountOnSpTblSpIndex=symStatsUnconfiguredHitsCountOnSpTblSpIndex, agDosPortStatsBlatAttack=agDosPortStatsBlatAttack, agTftpImage=agTftpImage, tacNewCfgPrimaryIpAddr=tacNewCfgPrimaryIpAddr, radCurCfgTelnet=radCurCfgTelnet, mpCpuStatsUtil1Second=mpCpuStatsUtil1Second, tacCurCfgPrimaryIpAddr=tacCurCfgPrimaryIpAddr, agNewCfgSecurityUbState=agNewCfgSecurityUbState, symStatsConfiguredHitsCountOnSpTableEntry=symStatsConfiguredHitsCountOnSpTableEntry, switchCapVRRPRtrsMaxEnt=switchCapVRRPRtrsMaxEnt, ipDstAclNewCfgIp=ipDstAclNewCfgIp, symMatchInfoSpSigActTblSigId=symMatchInfoSpSigActTblSigId, symNewCfgInContractID=symNewCfgInContractID, snmpClearStats=snmpClearStats, agSaveTable=agSaveTable, symMatchInfoSpServerIp=symMatchInfoSpServerIp, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, spStatsCpuUtilTableEntry=spStatsCpuUtilTableEntry, agCurCfgSyslogTrapSecurity=agCurCfgSyslogTrapSecurity, ipAclBogonInfoTableEntry=ipAclBogonInfoTableEntry, pktStatsAllocs=pktStatsAllocs, portInfo=portInfo, mpMemStatsFree=mpMemStatsFree, agDosPortStatsNullScanAttack=agDosPortStatsNullScanAttack, agSystem=agSystem, agCurCfgPgrpMatchEntry=agCurCfgPgrpMatchEntry, agSslprocCurCfgFilt=agSslprocCurCfgFilt, spMaintStatsResolveErrNoddw=spMaintStatsResolveErrNoddw, radCurCfgState=radCurCfgState, spMaintStatsSendLetSuccessSP4=spMaintStatsSendLetSuccessSP4, agNewCfgBootp=agNewCfgBootp, swKeyInfo=swKeyInfo, portInfoPhyIfType=portInfoPhyIfType, spStatsCpuUtil1Second=spStatsCpuUtil1Second, radNewCfgState=radNewCfgState, syslogHostMaxEnt=syslogHostMaxEnt, agentOper=agentOper, agSymantecSwKeyInfo=agSymantecSwKeyInfo, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, agCfgDumpString=agCfgDumpString, agNewCfgMgmtNetMask=agNewCfgMgmtNetMask, switchCapScriptHealthChecksCurrEnt=switchCapScriptHealthChecksCurrEnt, agApplyString=agApplyString, agNewCfgSyslog2Host=agNewCfgSyslog2Host, agTftpDumpFileName=agTftpDumpFileName, syslogHostCurrEnt=syslogHostCurrEnt, agDosPortStatsFragBoundary=agDosPortStatsFragBoundary, spMaintStatsSendLetSuccessSP3=spMaintStatsSendLetSuccessSP3, agPortOperTableEntry=agPortOperTableEntry, agDosPortStatsTable=agDosPortStatsTable, symStatsLastHitId=symStatsLastHitId, agDiffIndex=agDiffIndex, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, symMatchInfoSpNumOfMatches=symMatchInfoSpNumOfMatches, switchCapRulesforURLParsingMaxEnt=switchCapRulesforURLParsingMaxEnt, snmpv3TargetParamsMaxEnt=snmpv3TargetParamsMaxEnt, agMgmtNewCfgSyslog=agMgmtNewCfgSyslog, symStatsConfiguredHitsTotalSpHCount=symStatsConfiguredHitsTotalSpHCount, agDosPortStatsUDPPortZero=agDosPortStatsUDPPortZero, agNewCfgXMLCfgServerPort=agNewCfgXMLCfgServerPort, hwPartNumber=hwPartNumber, switchCapVRRPIntfsCurrEnt=switchCapVRRPIntfsCurrEnt, agNewCfgTrapSrcIf=agNewCfgTrapSrcIf, agSyslog=agSyslog, icmpDosAtkPrevention=icmpDosAtkPrevention, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, agNewCfgNTPServer=agNewCfgNTPServer, agPortNewCfgPVID=agPortNewCfgPVID, agMgmtCurCfgReport=agMgmtCurCfgReport, agNewCfgSecurityAddAttack=agNewCfgSecurityAddAttack, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, switchCapFltsCurrEnt=switchCapFltsCurrEnt, agDiffTableEntry=agDiffTableEntry, agPortNewCfgFastEthAutoNeg=agPortNewCfgFastEthAutoNeg, agCurCfgNortelMultipleStgMode=agCurCfgNortelMultipleStgMode, radCurCfgRetries=radCurCfgRetries, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, agRtcDate=agRtcDate, udpBlastNewCfgudpPortEntryDelete=udpBlastNewCfgudpPortEntryDelete, symNewCfgTblIndex=symNewCfgTblIndex, agMgmtCurCfgRetry=agMgmtCurCfgRetry, agDosPortStatsSNMPNull=agDosPortStatsSNMPNull, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, agTftpLastActionStatus=agTftpLastActionStatus, ntpStats=ntpStats, switchCapDomianRecordsMaxEnt=switchCapDomianRecordsMaxEnt, agPgrpMatchTableMaxSize=agPgrpMatchTableMaxSize, switchCapSerGRsMaxEnt=switchCapSerGRsMaxEnt, udpBlastNewCfgudpPortTable=udpBlastNewCfgudpPortTable, agClrSyslogMsgs=agClrSyslogMsgs, agNewCfgSyslogTrapSecurity=agNewCfgSyslogTrapSecurity, agFileTransfer=agFileTransfer, agPortNewCfgFastEthMode=agPortNewCfgFastEthMode, spMaintStatsRecvLetErrorsSP4=spMaintStatsRecvLetErrorsSP4, agSslprocCurCfgRts=agSslprocCurCfgRts, mpCpuStats=mpCpuStats, portInfoTableEntry=portInfoTableEntry, symIpsEngineVersion=symIpsEngineVersion, secCurCfgIpAclSyslogThreshold=secCurCfgIpAclSyslogThreshold, agPortCurCfgFastEthFctl=agPortCurCfgFastEthFctl, tacCurCfgRetries=tacCurCfgRetries, agDiffTableSize=agDiffTableSize, mpMemStatsLowFree=mpMemStatsLowFree, agDiffState=agDiffState, agNewCfgSyslogTrapStp=agNewCfgSyslogTrapStp, snmpv3TargetParamsCurrEnt=snmpv3TargetParamsCurrEnt, agPortCurCfgTableEntry=agPortCurCfgTableEntry, agNewCfgSyslogSev=agNewCfgSyslogSev, symCurCfgDefaultAction=symCurCfgDefaultAction, agMgmtNewCfgRadius=agMgmtNewCfgRadius, symStatsDestPort=symStatsDestPort, agNTPOper=agNTPOper, agTftpPassword=agTftpPassword, switchCapGSLBGeographicalRegionsCurrEnt=switchCapGSLBGeographicalRegionsCurrEnt, switchCapGSLBFailoversPerRemSiteMaxEnt=switchCapGSLBFailoversPerRemSiteMaxEnt, agSslprocNewCfgFilt=agSslprocNewCfgFilt, spStatsCpuUtil4Seconds=spStatsCpuUtil4Seconds, totalDstIPACLsMaxEnt=totalDstIPACLsMaxEnt, ipAclNewCfgIndx=ipAclNewCfgIndx, agReset=agReset, tacCurCfgSecondaryIpAddr=tacCurCfgSecondaryIpAddr, agCurCfgARPMaxRate=agCurCfgARPMaxRate, radNewCfgTelnet=radNewCfgTelnet, totalSrcIPACLsCurrEnt=totalSrcIPACLsCurrEnt, agMgmtCurCfgGateway=agMgmtCurCfgGateway, agDosPortStatsFlagAbnormal=agDosPortStatsFlagAbnormal, agCfgDumpState=agCfgDumpState, spMaintStatsRateLimitUdpDrops=spMaintStatsRateLimitUdpDrops, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, portInfoLink=portInfoLink, agPortNewCfgGigEthSpeed=agPortNewCfgGigEthSpeed, udpBlastProtection=udpBlastProtection, agDosPortStatsIPReserved=agDosPortStatsIPReserved, hardware=hardware, switchCapFDBPerSPMaxEnt=switchCapFDBPerSPMaxEnt, switchCapDomainRecordsCurrEnt=switchCapDomainRecordsCurrEnt, agMgmtNetTableMaxSize=agMgmtNetTableMaxSize, udpBlastCurCfgudpPortEntry=udpBlastCurCfgudpPortEntry, symNewCfgOutContractID=symNewCfgOutContractID, agDosPortStatsLoopback=agDosPortStatsLoopback, agPortCurCfgGigEthSpeed=agPortCurCfgGigEthSpeed, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, totalSrcIPACLsMaxEnt=totalSrcIPACLsMaxEnt, ipv6DosAtkPrevention=ipv6DosAtkPrevention, ntpPrimaryServerUpdates=ntpPrimaryServerUpdates, hwChassisRevision=hwChassisRevision, agTrapHost=agTrapHost, arpDosAtkPrevention=arpDosAtkPrevention, dosCurCfgSYNdata=dosCurCfgSYNdata, agImageForNxtReset=agImageForNxtReset, agCurCfgConsole=agCurCfgConsole, pktStatsFrees=pktStatsFrees, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, spMaintStatsRecvLetErrorsMP=spMaintStatsRecvLetErrorsMP, spMemStatsTableEntry=spMemStatsTableEntry, operDstIPACLsMaxEnt=operDstIPACLsMaxEnt, secCurCfgIpAclSyslogTime=secCurCfgIpAclSyslogTime, agDosPortStatsGARP=agDosPortStatsGARP, agSecurityIpAclStatsTable=agSecurityIpAclStatsTable, symantecInfo=symantecInfo, tacNewCfgRetries=tacNewCfgRetries, agMgmtCurCfgIpAddr=agMgmtCurCfgIpAddr, agApplyTable=agApplyTable, hwEthernetBoardNumber=hwEthernetBoardNumber, agCurCfgSyslogTrapStp=agCurCfgSyslogTrapStp, switchCapIpARPMaxEnt=switchCapIpARPMaxEnt, agPortCurCfgNonIPBwmContract=agPortCurCfgNonIPBwmContract, spMaintStatsRecvLetSuccessSP2=spMaintStatsRecvLetSuccessSP2, spMemStatsTotal=spMemStatsTotal, agApplyPending=agApplyPending, agSaveIndex=agSaveIndex, agPortCurCfgDiscardNonIPs=agPortCurCfgDiscardNonIPs, spMaintStatsRecvLetSuccessSP4=spMaintStatsRecvLetSuccessSP4, agEnabledLinklbKey=agEnabledLinklbKey, mgmtNetworksMaxEnt=mgmtNetworksMaxEnt, symMatchInfoSpServerPort=symMatchInfoSpServerPort, switchCapSLBSessionsMaxEnt=switchCapSLBSessionsMaxEnt, agMgmtCurCfgSnmp=agMgmtCurCfgSnmp, securityInfo=securityInfo, ipAclNewCfgIp=ipAclNewCfgIp, dosCurCfgFragoff=dosCurCfgFragoff, pktStatsSmalls=pktStatsSmalls, agCurCfgSecurityDosState=agCurCfgSecurityDosState, agTftpServer=agTftpServer, secNewCfgIpAclSyslogThreshold=secNewCfgIpAclSyslogThreshold)
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", switchCapNwkFltsMaxEnt=switchCapNwkFltsMaxEnt, agDosPortStatsICMPData=agDosPortStatsICMPData, agNewCfgSecurityIpAclState=agNewCfgSecurityIpAclState, agDosPortStatsFragData=agDosPortStatsFragData, switchCapIpRoutesMaxEnt=switchCapIpRoutesMaxEnt, hwPower=hwPower, symStatsConfiguredHitsCountOnSpTblHitCount=symStatsConfiguredHitsCountOnSpTblHitCount, switchCapSNMPHealthChecksMaxEnt=switchCapSNMPHealthChecksMaxEnt, agSymantecSwKeyRemainingDays=agSymantecSwKeyRemainingDays, symCurCfgSigBwmMappingTable=symCurCfgSigBwmMappingTable, switchCapFltsMaxEnt=switchCapFltsMaxEnt, agNewCfgNTPDlight=agNewCfgNTPDlight, tacCurCfgAuthenString=tacCurCfgAuthenString, agMgmtNewCfgMask=agMgmtNewCfgMask, agCurCfgSyslogTrapGslb=agCurCfgSyslogTrapGslb, agNewCfgSyslogHost=agNewCfgSyslogHost, symSigFileVersionSeqNumber=symSigFileVersionSeqNumber, agCfgBootMin=agCfgBootMin, agFileTableSize=agFileTableSize, agDosPortStatsIGMPLen=agDosPortStatsIGMPLen, agSaveTableEntry=agSaveTableEntry, agTacacsConfig=agTacacsConfig, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, mgmtStatsTxOverruns=mgmtStatsTxOverruns, agSslprocCurCfgIpAddr=agSslprocCurCfgIpAddr, agCurCfgSnmpTimeout=agCurCfgSnmpTimeout, switchCapIpStaticARPMaxEnt=switchCapIpStaticARPMaxEnt, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, udpBlastCurCfgudpPortEntryPacketLimit=udpBlastCurCfgudpPortEntryPacketLimit, agImage1Ver=agImage1Ver, tacCurCfgPort=tacCurCfgPort, agNewCfgHttpsServerPort=agNewCfgHttpsServerPort, agNewCfgSyslogTrapSynAtk=agNewCfgSyslogTrapSynAtk, ipAclCfg=ipAclCfg, portInfoSpeed=portInfoSpeed, ipDstAclCurCfgIp=ipDstAclCurCfgIp, agCfgSecurityPortTable=agCfgSecurityPortTable, switchCapLocNetsMaxEnt=switchCapLocNetsMaxEnt, switchCapRIPIntfMaxEnt=switchCapRIPIntfMaxEnt, agMgmtPort=agMgmtPort, agSecurityIpAclStatsTableEntry=agSecurityIpAclStatsTableEntry, symStatsConfiguredHitsTableEntry=symStatsConfiguredHitsTableEntry, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, switchCapBGPPeersMaxEnt=switchCapBGPPeersMaxEnt, agFileErrorString=agFileErrorString, agDosPortStatsRc8=agDosPortStatsRc8, agPortNewCfgBackup=agPortNewCfgBackup, switchCapIpARPCurrEnt=switchCapIpARPCurrEnt, tacNewCfgSecondaryIpAddr=tacNewCfgSecondaryIpAddr, agNewCfgPgrpMatchEntry=agNewCfgPgrpMatchEntry, agNewCfgTrapHostTable=agNewCfgTrapHostTable, agFileTable=agFileTable, switchCapGSLBRulesMaxEnt=switchCapGSLBRulesMaxEnt, spStatsCpuUtilTable=spStatsCpuUtilTable, bwmContsCurrEnt=bwmContsCurrEnt, agNewCfgSyslog2Sev=agNewCfgSyslog2Sev, tacNewCfgState=tacNewCfgState, agNewCfgPgrpMatchAdd=agNewCfgPgrpMatchAdd, agDosPortStatsUDPLen=agDosPortStatsUDPLen, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, symStatsUnconfiguredHitsTotalSpHCount=symStatsUnconfiguredHitsTotalSpHCount, mgmtStatsRxMulticast=mgmtStatsRxMulticast, mgmtStatsRxOverruns=mgmtStatsRxOverruns, agCurCfgSyslog2Host=agCurCfgSyslog2Host, agSecurityUbStatsPort=agSecurityUbStatsPort, switchCapFDBMaxEnt=switchCapFDBMaxEnt, agMgmt=agMgmt, portMirrorStatsEgress=portMirrorStatsEgress, agCurCfgTelnetServerPort=agCurCfgTelnetServerPort, ipAclCurCfgIp=ipAclCurCfgIp, dosNewCfgICMPoff=dosNewCfgICMPoff, agDosPortStatsLand=agDosPortStatsLand, agSaveConfig=agSaveConfig, spMaintStatsRecvLetSuccessSP3=spMaintStatsRecvLetSuccessSP3, switchCapGSLBRulesCurrEnt=switchCapGSLBRulesCurrEnt, switchCapPIPsCurrEnt=switchCapPIPsCurrEnt, configSrcIPACLsCurrEnt=configSrcIPACLsCurrEnt, symCurCfgSigBwmMappingTableEntry=symCurCfgSigBwmMappingTableEntry, operSrcIPACLsMaxEnt=operSrcIPACLsMaxEnt, agApplyTableSize=agApplyTableSize, ntpSerMaxEnt=ntpSerMaxEnt, spMaintStatsRateLimitTcpDrops=spMaintStatsRateLimitTcpDrops, agSslprocNewCfgRts=agSslprocNewCfgRts, dosNewCfgSYNdata=dosNewCfgSYNdata, bwmTimePoliciesPerCont=bwmTimePoliciesPerCont, mgmtStatsTxQueueLen=mgmtStatsTxQueueLen, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, udpBlastNewCfgudpPortEntry=udpBlastNewCfgudpPortEntry, ntpLastUpdateTime=ntpLastUpdateTime, agDosPortStatsBroadcast=agDosPortStatsBroadcast, switchCapGSLBLocSersCurrEnt=switchCapGSLBLocSersCurrEnt, ipDstAclNewCfgMask=ipDstAclNewCfgMask, switchCapGeneralInfo=switchCapGeneralInfo, agNewCfgUDPMaxRate=agNewCfgUDPMaxRate, agDosPortStatsARPNbCast=agDosPortStatsARPNbCast, agNewCfgPortAccessState=agNewCfgPortAccessState, switchCapOSPFSummaryRangesMaxEnt=switchCapOSPFSummaryRangesMaxEnt, agNewDaylightSavings=agNewDaylightSavings, snmpv3ViewsMaxEnt=snmpv3ViewsMaxEnt, symCurCfgOutContractID=symCurCfgOutContractID, ipDosAtkPrevention=ipDosAtkPrevention, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, pktStats=pktStats, agCurCfgTrapHostTable=agCurCfgTrapHostTable, spMemStatsFrees=spMemStatsFrees, dosNewCfgIPTTL=dosNewCfgIPTTL, bwmContsMaxEnt=bwmContsMaxEnt, portStatsTable=portStatsTable, bwmContsPerGRs=bwmContsPerGRs, switchCapFDBCurrEnt=switchCapFDBCurrEnt, switchCapSTGsMaxEnt=switchCapSTGsMaxEnt, agMgmtPortNewCfgSpeed=agMgmtPortNewCfgSpeed, spMaintStatsTable=spMaintStatsTable, switchCapIpRoutesCurrEnt=switchCapIpRoutesCurrEnt, agNewCfgSyslogTrapRmon=agNewCfgSyslogTrapRmon, agNewCfgNTPService=agNewCfgNTPService, agSslprocNewCfgIpAddr=agSslprocNewCfgIpAddr, tacNewCfgAuthenSecondString=tacNewCfgAuthenSecondString, agCurCfgSyslogFac=agCurCfgSyslogFac, agCurCfgNTPDlight=agCurCfgNTPDlight, spMaintStatsSendLetSuccessSP1=spMaintStatsSendLetSuccessSP1, operSrcIPACLsCurrEnt=operSrcIPACLsCurrEnt, portInfoPhyIfMtu=portInfoPhyIfMtu, ipDstAclTableMaxSize=ipDstAclTableMaxSize, switchCapGSLBMetricPerRuleCurrEnt=switchCapGSLBMetricPerRuleCurrEnt, agCurCfgSyslogTrapSynAtk=agCurCfgSyslogTrapSynAtk, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, agFileString=agFileString, agSecurity=agSecurity, agPortNewCfgTableEntry=agPortNewCfgTableEntry, agMgmtPortNewCfgMode=agMgmtPortNewCfgMode, switchCapGSLBServicesMaxEnt=switchCapGSLBServicesMaxEnt, tacCurCfgTelnet=tacCurCfgTelnet, dosCurCfgICMPoff=dosCurCfgICMPoff, agDosPortStatsFinScan=agDosPortStatsFinScan, symNewCfgSignatureID=symNewCfgSignatureID, agTftpAction=agTftpAction, switchCapOSPFSummaryRangesCurrEnt=switchCapOSPFSummaryRangesCurrEnt, switchCapRIPIntfCurrEnt=switchCapRIPIntfCurrEnt, radNewCfgRetries=radNewCfgRetries, agSave=agSave, symNewCfgDeleteEntry=symNewCfgDeleteEntry, agBoot=agBoot, mgmtStatsRxErrors=mgmtStatsRxErrors, ipAclTableMaxSize=ipAclTableMaxSize, agNewCfgNTPSecServer=agNewCfgNTPSecServer, switchCapL2Info=switchCapL2Info, agPortCurCfgFastEthMode=agPortCurCfgFastEthMode, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, spMemStatsCurr=spMemStatsCurr, switchCapIpGWCurrEnt=switchCapIpGWCurrEnt, switchCapGSLBRemSitesCurrEnt=switchCapGSLBRemSitesCurrEnt, agPortConfig=agPortConfig, switchCapVirtSersCurrEnt=switchCapVirtSersCurrEnt, switchCapGSLBRemSitesMaxEnt=switchCapGSLBRemSitesMaxEnt, agPortNewCfgEgressBW=agPortNewCfgEgressBW, mgmtStats=mgmtStats, ntpSerCurrEnt=ntpSerCurrEnt, radCurCfgTimeout=radCurCfgTimeout, snmpv3TargetAddrCurrEnt=snmpv3TargetAddrCurrEnt, dosCurCfgFragdata=dosCurCfgFragdata, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, agCurCfgUDPMaxRate=agCurCfgUDPMaxRate, agPortCurCfgTable=agPortCurCfgTable, spStatsCpuUtil64Seconds=spStatsCpuUtil64Seconds, switchCapOSPFAreasMaxEnt=switchCapOSPFAreasMaxEnt, agNewCfgSecuritySymantecState=agNewCfgSecuritySymantecState, hwOrderNumber=hwOrderNumber, hwMainBoardRevision=hwMainBoardRevision, agCurCfgMgmtNetIndex=agCurCfgMgmtNetIndex, ipAclBogonInfoTable=ipAclBogonInfoTable, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, ntpSecondaryServerUpdates=ntpSecondaryServerUpdates, agDosPortStatsIPLen=agDosPortStatsIPLen, agSaveConfiguration=agSaveConfiguration, symStatsUnconfiguredHitsMax=symStatsUnconfiguredHitsMax, agMgmtNewCfgIntr=agMgmtNewCfgIntr, agNewCfgPgrpName=agNewCfgPgrpName, pktStatsMediums=pktStatsMediums, agMgmtCurCfgSyslog=agMgmtCurCfgSyslog, agCurCfgBootp=agCurCfgBootp, switchCapRouteMapsMaxEnt=switchCapRouteMapsMaxEnt, tacNewCfgCmap=tacNewCfgCmap, switchCapOSPFHostsCurrEnt=switchCapOSPFHostsCurrEnt, bwmGRsMaxEnt=bwmGRsMaxEnt, agPortNewCfgGigEthMode=agPortNewCfgGigEthMode, agMgmtCurCfgNtp=agMgmtCurCfgNtp, agNewCfgMgmtNetSubnet=agNewCfgMgmtNetSubnet, tacNewCfgPort=tacNewCfgPort, agNTP=agNTP, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, spMaintStatsRecvLetSuccessSP1=spMaintStatsRecvLetSuccessSP1, agSecurityIpAclStatsBlockedPacket=agSecurityIpAclStatsBlockedPacket, switchCapVRRPIntfsMaxEnt=switchCapVRRPIntfsMaxEnt, agTftpUserName=agTftpUserName, agCurCfgSmtpHost=agCurCfgSmtpHost, agRtcTime=agRtcTime, udpBlastNewCfgudpPortPacketLimit=udpBlastNewCfgudpPortPacketLimit, agDosPortStatsIndx=agDosPortStatsIndx, symNewCfgSigBwmMappingTable=symNewCfgSigBwmMappingTable, agSslproc=agSslproc, panicDumps=panicDumps, radCurCfgPort=radCurCfgPort, radCurCfgAuthenSecondString=radCurCfgAuthenSecondString, agSecurityUbStatsTableEntry=agSecurityUbStatsTableEntry, agSyslogMsgTableEntry=agSyslogMsgTableEntry, portMirrorStatsIndx=portMirrorStatsIndx, spMaintStatsSendLetSuccessMP=spMaintStatsSendLetSuccessMP, agNewCfgPgrpMatchBmap=agNewCfgPgrpMatchBmap, agEnabledGslbKey=agEnabledGslbKey, agSyslogMsgTable=agSyslogMsgTable, agMgmtNewCfgIpAddr=agMgmtNewCfgIpAddr, pktStatsJumbos=pktStatsJumbos, agCfgDump=agCfgDump, pktStatsJumbosHiWatermark=pktStatsJumbosHiWatermark, switchCapBGPRouteAggrsCurrEnt=switchCapBGPRouteAggrsCurrEnt, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, agDosPortStatsFragOff=agDosPortStatsFragOff, switchCapNumofRportstoVport=switchCapNumofRportstoVport, symMatchInfoSpSigActTblSpIndex=symMatchInfoSpSigActTblSpIndex, symStatsProtocol=symStatsProtocol, agMgmtNewCfgRetry=agMgmtNewCfgRetry, spStats=spStats, endUsers=endUsers, symStatsConfiguredHitsSigId=symStatsConfiguredHitsSigId, agDiffString=agDiffString, switchCapBGPRouteAggrsMaxEnt=switchCapBGPRouteAggrsMaxEnt, symCurCfgTblIndex=symCurCfgTblIndex, snmpv3ViewsCurrEnt=snmpv3ViewsCurrEnt, switchCapSLBSessionsCurrEnt=switchCapSLBSessionsCurrEnt, switchCapSlbPortInfoIndx=switchCapSlbPortInfoIndx, symNewCfgSigBwmMappingTableEntry=symNewCfgSigBwmMappingTableEntry, symStatsConfiguredHitsCountOnSpTable=symStatsConfiguredHitsCountOnSpTable, mgmtStatsRxBytes=mgmtStatsRxBytes, switchCapTrunksperTrunkGR=switchCapTrunksperTrunkGR, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, agSslprocCurCfgPort=agSslprocCurCfgPort, mgmtPortInfoMode=mgmtPortInfoMode, mgmtStatsTxBytes=mgmtStatsTxBytes, symMatchInfoSpProtocol=symMatchInfoSpProtocol, agNewCfgARPMaxRate=agNewCfgARPMaxRate, symMatchInfoSpSigActTblIndex=symMatchInfoSpSigActTblIndex, agDosPortStatsFTPPort=agDosPortStatsFTPPort, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, agPortNewCfgDiscardNonIPs=agPortNewCfgDiscardNonIPs, portInfoSFPName=portInfoSFPName, agCurCfgPgrpMatchTable=agCurCfgPgrpMatchTable, hwFanStatus=hwFanStatus, agApplyIndex=agApplyIndex, symStatsConfiguredHitsCountOnSpTblIndex=symStatsConfiguredHitsCountOnSpTblIndex, portStatsPhyIfInOctets=portStatsPhyIfInOctets)
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", agCurCfgSecurityBogonState=agCurCfgSecurityBogonState, switchCapGSLBNetworksCurrEnt=switchCapGSLBNetworksCurrEnt, capacityInfo=capacityInfo, agDosPortStatsDNSPort=agDosPortStatsDNSPort, mpMemStats=mpMemStats, mgmtPortInfoLink=mgmtPortInfoLink, portMirrorStatsIngress=portMirrorStatsIngress, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, agCurCfgSyslogTrapBgp=agCurCfgSyslogTrapBgp, ipAclBogonInfoMask=ipAclBogonInfoMask, agDosPortStatsTCPReserved=agDosPortStatsTCPReserved, spStatsCpuUtilSpIndex=spStatsCpuUtilSpIndex, switchCapRealSersMaxEnt=switchCapRealSersMaxEnt, agDiffTable=agDiffTable, agPortTableMaxEnt=agPortTableMaxEnt, tacNewCfgTimeout=tacNewCfgTimeout, agDosPortStatsAckZero=agDosPortStatsAckZero, switchCapVlanCurrEnt=switchCapVlanCurrEnt, switchCapGSLBServicesCurrEnt=switchCapGSLBServicesCurrEnt, agMgmtCurCfgSonmp=agMgmtCurCfgSonmp, agSoftwareVersion=agSoftwareVersion, switchCapBwmInfo=switchCapBwmInfo, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, agFileErrorTable=agFileErrorTable, agClearFlashDump=agClearFlashDump, agPgroup=agPgroup, spMaintStatsSendLetFailsSP4=spMaintStatsSendLetFailsSP4, agPortNewCfgNonIPBwmContract=agPortNewCfgNonIPBwmContract, ipAclBogonInfo=ipAclBogonInfo, agMgmtNewCfgSonmp=agMgmtNewCfgSonmp, spMaintStatsLearnErrNoddw=spMaintStatsLearnErrNoddw, agNewCfgPgrpMatchRem=agNewCfgPgrpMatchRem, ipDstAclNewCfgAction=ipDstAclNewCfgAction, portStatsClear=portStatsClear, agPortCurCfgFastEthSpeed=agPortCurCfgFastEthSpeed, agLastSetErrorReason=agLastSetErrorReason, radNewCfgAuthenString=radNewCfgAuthenString, agImage2Ver=agImage2Ver, ipAclNewCfgMask=ipAclNewCfgMask, agSecurityIpDstAclStatsTable=agSecurityIpDstAclStatsTable, switchCapSNMPHealthChecksCurrEnt=switchCapSNMPHealthChecksCurrEnt, agMgmtNewCfgNtp=agMgmtNewCfgNtp, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, udpBlastCurCfgudpPortHighIndx=udpBlastCurCfgudpPortHighIndx, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, agDosPortStatsIGMPType=agDosPortStatsIGMPType, dosCurCfgICMPdata=dosCurCfgICMPdata, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, ipAclCurCfgIndx=ipAclCurCfgIndx, agDosPortStatsARPLen=agDosPortStatsARPLen, udpDosAtkPrevention=udpDosAtkPrevention, agEnabledSecurityKey=agEnabledSecurityKey, spMemStatsHiWat=spMemStatsHiWat, radiusSerCurrEnt=radiusSerCurrEnt, symNewCfgDefaultAction=symNewCfgDefaultAction, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, agPortCurCfgBwmContract=agPortCurCfgBwmContract, agSecurityPgrpStatsIndx=agSecurityPgrpStatsIndx, agPortCurCfgVlanTag=agPortCurCfgVlanTag, switchCapOSPFVirtLinksMaxEnt=switchCapOSPFVirtLinksMaxEnt, tacCurCfgTimeout=tacCurCfgTimeout, symStatsConfiguredHitsInCont=symStatsConfiguredHitsInCont, pktStatsSmallsHiWatermark=pktStatsSmallsHiWatermark, agMgmtNewCfgReport=agMgmtNewCfgReport, portOperRmon=portOperRmon, agSavePending=agSavePending, agent=agent, agPortAccessCfg=agPortAccessCfg, agNewCfgSyslogTrapSlb=agNewCfgSyslogTrapSlb, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, secNewCfgPacketDepth=secNewCfgPacketDepth, switchCapSlbPortInfo=switchCapSlbPortInfo, switchCapRealIDSSer=switchCapRealIDSSer, secNewCfgIpAclSyslogTime=secNewCfgIpAclSyslogTime, agFileType=agFileType, agApplyTableEntry=agApplyTableEntry, symMatchInfoSpClientPort=symMatchInfoSpClientPort, agNewCfgSyslogTrapFilter=agNewCfgSyslogTrapFilter, agNewCfgMgmtNetIndex=agNewCfgMgmtNetIndex, symStatsConfiguredHitsTable=symStatsConfiguredHitsTable, symSigBwmMappingTableMaxSize=symSigBwmMappingTableMaxSize, agPortNewCfgPortAlias=agPortNewCfgPortAlias, agMgmtPortCurCfgSpeed=agMgmtPortCurCfgSpeed, smtpHostsMaxEnt=smtpHostsMaxEnt, ipAclCurCfgEntry=ipAclCurCfgEntry, agPortAccessTableMaxSize=agPortAccessTableMaxSize, portInfoPhyIfDescr=portInfoPhyIfDescr, agApplyConfiguration=agApplyConfiguration, agCurCfgSyslogTrapTcpLim=agCurCfgSyslogTrapTcpLim, agFileErrorIndex=agFileErrorIndex, spMemStatsAllocs=spMemStatsAllocs, switchCapRealServicesEnt=switchCapRealServicesEnt, agCurCfgIdleCLITimeout=agCurCfgIdleCLITimeout, udpBlastCurCfgudpPortPacketLimit=udpBlastCurCfgudpPortPacketLimit, portInfoPhyIfLastChange=portInfoPhyIfLastChange, agDosPortStatsIGMPFrag=agDosPortStatsIGMPFrag, symStatsTotalHits=symStatsTotalHits, agPortNewCfgState=agPortNewCfgState, symStatsConfiguredHitsOutCont=symStatsConfiguredHitsOutCont, agApplyConfig=agApplyConfig, bogonSrcIPACLsMaxEnt=bogonSrcIPACLsMaxEnt, symStatsUnconfiguredHitsCountOnSpTblHitCount=symStatsUnconfiguredHitsCountOnSpTblHitCount, agCurCfgLoginBanner=agCurCfgLoginBanner, agentStats=agentStats, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, agCfgSecurityPortTableEntry=agCfgSecurityPortTableEntry, secNewCfgSecurityLogThreshold=secNewCfgSecurityLogThreshold, agLog=agLog, agCurCfgSyslogTrapSlbAtk=agCurCfgSyslogTrapSlbAtk, switchCapIpStaticARPCurrEnt=switchCapIpStaticARPCurrEnt, symStatsClear=symStatsClear, agDosPortStatsFragLast=agDosPortStatsFragLast, mpMemStatsTotal=mpMemStatsTotal, agCurCfgSecurityUbState=agCurCfgSecurityUbState, agSecurityPgrpStatsTable=agSecurityPgrpStatsTable, dosNewCfgFragdata=dosNewCfgFragdata, agSymantecGlobalState=agSymantecGlobalState, agEnabledBwmKey=agEnabledBwmKey, pktStatsDiscards=pktStatsDiscards, radiusSerMaxEnt=radiusSerMaxEnt, agDosPortStatsICMPLen=agDosPortStatsICMPLen, symStatsConfiguredHitsCountOnSpTblSpIndex=symStatsConfiguredHitsCountOnSpTblSpIndex, switchCapVirtSersMaxEnt=switchCapVirtSersMaxEnt, agCurCfgHttpsServerPort=agCurCfgHttpsServerPort, agCfgDumpIndex=agCfgDumpIndex, radNewCfgTimeout=radNewCfgTimeout, switchCapGSLBFailoversPerRemSiteCurrEnt=switchCapGSLBFailoversPerRemSiteCurrEnt, agFileTableEntry=agFileTableEntry, agCfgDumpTableSize=agCfgDumpTableSize, agNewCfgSyslogTrapOspf=agNewCfgSyslogTrapOspf, agFileSize=agFileSize, portMirrorClear=portMirrorClear, switchCapRealSersCurrEnt=switchCapRealSersCurrEnt, agMgmtPortCurCfgAuto=agMgmtPortCurCfgAuto, switchCapIpGWMaxEnt=switchCapIpGWMaxEnt, symMatchInfoSpSigActTableEntry=symMatchInfoSpSigActTableEntry, operDstIPACLsCurrEnt=operDstIPACLsCurrEnt, agCurCfgPortAccessEntry=agCurCfgPortAccessEntry, agPortNewCfgVlanTag=agPortNewCfgVlanTag, agDosPortStatsSmurfAttack=agDosPortStatsSmurfAttack, agNewCfgIdleCLITimeout=agNewCfgIdleCLITimeout, agNewCfgPortAccessTable=agNewCfgPortAccessTable, agNewCfgSyslogFac=agNewCfgSyslogFac, ipDstAclCurCfgTable=ipDstAclCurCfgTable, agentConfig=agentConfig, agNewCfgMgmtNetTable=agNewCfgMgmtNetTable, symStatsDestIp=symStatsDestIp, agCurCfgHttpServerPort=agCurCfgHttpServerPort, ipDstAclNewCfgTable=ipDstAclNewCfgTable, configDstIPACLsMaxEnt=configDstIPACLsMaxEnt, agNewCfgSmtpHost=agNewCfgSmtpHost, agDosPortStatsTCPPortZero=agDosPortStatsTCPPortZero, snmpv3AccessGRsMaxEnt=snmpv3AccessGRsMaxEnt, agCurCfgPortAccessState=agCurCfgPortAccessState, tacNewCfgAuthenString=tacNewCfgAuthenString, agRevertApply=agRevertApply, agCurCfgMgmtNetTable=agCurCfgMgmtNetTable, portStats=portStats, agDosPortStatsARPNuCast=agDosPortStatsARPNuCast, symStatsUnconfiguredHitsLastHitTime=symStatsUnconfiguredHitsLastHitTime, switchCapPortTeamsMaxEnt=switchCapPortTeamsMaxEnt, mgmtStatsRxFrame=mgmtStatsRxFrame, spMaintStatsSendLetSuccessSP2=spMaintStatsSendLetSuccessSP2, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, agCurCfgSyslogSev=agCurCfgSyslogSev, symStatsUnconfiguredHitsTable=symStatsUnconfiguredHitsTable, ipAclNewCfgAction=ipAclNewCfgAction, symMatchInfoSpSigActTable=symMatchInfoSpSigActTable, agCurCfgPgrpName=agCurCfgPgrpName, switchCapOSPFIntfCurrEnt=switchCapOSPFIntfCurrEnt, switchCapIpStaticRoutesMaxEnt=switchCapIpStaticRoutesMaxEnt, agCurCfgSecurityIpAclState=agCurCfgSecurityIpAclState, switchCapSlbPortInfoTable=switchCapSlbPortInfoTable, agMgmtNewCfgWlm=agMgmtNewCfgWlm, agNewCfgPgrpMatchTable=agNewCfgPgrpMatchTable, agCfgDumpTableEntry=agCfgDumpTableEntry, mgmtPortInfoSpeed=mgmtPortInfoSpeed, agNewCfgNortelMultipleStgMode=agNewCfgNortelMultipleStgMode, agSecurityPgrpStatsTableEntry=agSecurityPgrpStatsTableEntry, dosNewCfgFragoff=dosNewCfgFragoff, hwRevision=hwRevision, agPortNewCfgPreferred=agPortNewCfgPreferred, spMaintStatsSendLetFailsSP1=spMaintStatsSendLetFailsSP1, switchCapGSLBNetworksMaxEnt=switchCapGSLBNetworksMaxEnt, agSymLicenseSwKeyRenewalPending=agSymLicenseSwKeyRenewalPending, portStatsIndx=portStatsIndx, spMaintStatsSendLetFailsSP3=spMaintStatsSendLetFailsSP3, portStatsPhyIfInErrors=portStatsPhyIfInErrors, mgmtStatsRxpackets=mgmtStatsRxpackets, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, ipAclBogonInfoIp=ipAclBogonInfoIp, pktStatsAllocFails=pktStatsAllocFails, agSaveString=agSaveString, portOperState=portOperState, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, agNewCfgMgmtNetEntry=agNewCfgMgmtNetEntry, agMgmtCurCfgTftp=agMgmtCurCfgTftp, agPortCurCfgIndx=agPortCurCfgIndx, switchCapSlbPortClientState=switchCapSlbPortClientState, agNewCfgSecurityBogonState=agNewCfgSecurityBogonState, ntpClearStats=ntpClearStats, mgmtStatsTxpackets=mgmtStatsTxpackets, switchCapSlbPortRTSState=switchCapSlbPortRTSState, agDosPortStatsTCPLen=agDosPortStatsTCPLen, switchCapVRRPRtrGRsCurrEnt=switchCapVRRPRtrGRsCurrEnt, ntpPrimaryServerReqSent=ntpPrimaryServerReqSent, udpBlastNewCfgudpPortLowIndx=udpBlastNewCfgudpPortLowIndx, switchCapDNSSerMaxEnt=switchCapDNSSerMaxEnt, switchCapGSLBDomainsMaxEnt=switchCapGSLBDomainsMaxEnt, smtpHostsCurrEnt=smtpHostsCurrEnt, ipDstAclCfg=ipDstAclCfg, switchCapL3Info=switchCapL3Info, snmpv3UsersMaxEnt=snmpv3UsersMaxEnt, agMgmtCurCfgIntr=agMgmtCurCfgIntr, portMirrorStatsTable=portMirrorStatsTable, agCurCfgPortAccessIndex=agCurCfgPortAccessIndex, agPortCurCfgPreferred=agPortCurCfgPreferred, agDosPortStatsFragOversize=agDosPortStatsFragOversize, portMirrorStatsClear=portMirrorStatsClear, switchCapRouteMapsCurrEnt=switchCapRouteMapsCurrEnt, agPortCurCfgGigEthMode=agPortCurCfgGigEthMode, symMatchInfoSpClientIp=symMatchInfoSpClientIp, agNewCfgPgrpDelete=agNewCfgPgrpDelete, switchCapOSPFIntfMaxEnt=switchCapOSPFIntfMaxEnt, configDstIPACLsCurrEnt=configDstIPACLsCurrEnt, spMaintStatsRecvLetSuccessMP=spMaintStatsRecvLetSuccessMP, agCurCfgNTPServer=agCurCfgNTPServer, portInfoFlowCtrl=portInfoFlowCtrl)
