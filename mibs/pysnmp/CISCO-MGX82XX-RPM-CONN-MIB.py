#
# PySNMP MIB module CISCO-MGX82XX-RPM-CONN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-RPM-CONN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:50:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
rpmChanGrp, = mibBuilder.importSymbols("BASIS-MIB", "rpmChanGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, Unsigned32, IpAddress, MibIdentifier, Integer32, iso, ObjectIdentity, ModuleIdentity, Bits, NotificationType, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "Integer32", "iso", "ObjectIdentity", "ModuleIdentity", "Bits", "NotificationType", "TimeTicks", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoMgx82xxRpmConnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 62))
ciscoMgx82xxRpmConnMIB.setRevisions(('2002-09-08 00:00',))
if mibBuilder.loadTexts: ciscoMgx82xxRpmConnMIB.setLastUpdated('200209080000Z')
if mibBuilder.loadTexts: ciscoMgx82xxRpmConnMIB.setOrganization('Cisco Systems, Inc.')
class RpmNsapAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

rpmChanGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1), )
if mibBuilder.loadTexts: rpmChanGrpTable.setStatus('current')
rpmChanGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanSlotNum"), (0, "CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanNum"))
if mibBuilder.loadTexts: rpmChanGrpEntry.setStatus('current')
rpmChanSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanSlotNum.setStatus('current')
rpmChanInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanInterface.setStatus('current')
rpmChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanNum.setStatus('current')
rpmChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRowStatus.setStatus('current')
rpmChanVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVcd.setStatus('current')
rpmChanVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVpi.setStatus('current')
rpmChanVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVci.setStatus('current')
rpmChanSubInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanSubInterface.setStatus('current')
rpmChanLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanLocalVpi.setStatus('current')
rpmChanLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanLocalVci.setStatus('current')
rpmChanLocalNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 11), RpmNsapAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanLocalNsap.setStatus('current')
rpmChanRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteVpi.setStatus('current')
rpmChanRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteVci.setStatus('current')
rpmChanRemoteNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 14), RpmNsapAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteNsap.setStatus('current')
rpmChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2), ("spvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanType.setStatus('current')
rpmChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanConnType.setStatus('current')
rpmChanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("atfr", 5), ("abrstd", 6), ("abrfst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanServiceType.setStatus('current')
rpmChanMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMastership.setStatus('current')
rpmChanRtePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRtePriority.setStatus('current')
rpmChanMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMaxCost.setStatus('current')
rpmChanRestrictTrkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRestriction", 1), ("terrestrialTrunk", 2), ("satelliteTrunk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRestrictTrkType.setStatus('current')
rpmChanPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanPCR.setStatus('current')
rpmChanRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemotePCR.setStatus('current')
rpmChanMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMCR.setStatus('current')
rpmChanRemoteMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteMCR.setStatus('current')
rpmChanPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanPercentUtil.setStatus('current')
rpmChanRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemotePercentUtil.setStatus('current')
rpmChanEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("aal5snap", 1), ("aal34smds", 2), ("aal5nlpid", 3), ("qsaal", 4), ("ilmi", 5), ("aal5muxXNS", 6), ("aal5muxIP", 7), ("aal5muxVINES", 8), ("aal5muxDECNET", 9), ("aal5muxNOVELL1", 10), ("ppp", 11), ("unknown", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanEncapType.setStatus('current')
rpmChanMidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMidLow.setStatus('current')
rpmChanMidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMidHigh.setStatus('current')
rpmChanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanBurstSize.setStatus('current')
rpmChanInArpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanInArpFreq.setStatus('current')
rpmChanOAMloopback = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanOAMloopback.setStatus('current')
rpmChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanState.setStatus('current')
rpmChanVirtualTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVirtualTemplate.setStatus('current')
rpmChanAbrRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanAbrRDF.setStatus('current')
rpmChanAbrRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanAbrRIF.setStatus('current')
cmrConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 62, 2))
cmrConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 62, 2, 1))
cmrConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 62, 2, 2))
cmrConnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 62, 2, 1, 1)).setObjects(("CISCO-MGX82XX-RPM-CONN-MIB", "cmrConnConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmrConnMIBCompliance = cmrConnMIBCompliance.setStatus('current')
cmrConnConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 62, 2, 2, 1)).setObjects(("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanSlotNum"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanInterface"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanNum"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRowStatus"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanVcd"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanVpi"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanVci"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanSubInterface"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanLocalVpi"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanLocalVci"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanLocalNsap"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRemoteVpi"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRemoteVci"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRemoteNsap"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanType"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanConnType"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanServiceType"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanMastership"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRtePriority"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanMaxCost"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRestrictTrkType"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanPCR"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRemotePCR"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanMCR"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRemoteMCR"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanPercentUtil"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanRemotePercentUtil"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanMidLow"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanMidHigh"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanBurstSize"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanEncapType"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanInArpFreq"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanOAMloopback"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanState"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanVirtualTemplate"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanAbrRDF"), ("CISCO-MGX82XX-RPM-CONN-MIB", "rpmChanAbrRIF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmrConnConfGroup = cmrConnConfGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-MGX82XX-RPM-CONN-MIB", PYSNMP_MODULE_ID=ciscoMgx82xxRpmConnMIB, rpmChanServiceType=rpmChanServiceType, rpmChanLocalVci=rpmChanLocalVci, rpmChanInterface=rpmChanInterface, rpmChanGrpTable=rpmChanGrpTable, rpmChanMidHigh=rpmChanMidHigh, rpmChanOAMloopback=rpmChanOAMloopback, rpmChanAbrRIF=rpmChanAbrRIF, RpmNsapAddress=RpmNsapAddress, rpmChanType=rpmChanType, rpmChanConnType=rpmChanConnType, cmrConnMIBCompliances=cmrConnMIBCompliances, rpmChanPercentUtil=rpmChanPercentUtil, rpmChanLocalNsap=rpmChanLocalNsap, rpmChanBurstSize=rpmChanBurstSize, rpmChanEncapType=rpmChanEncapType, rpmChanNum=rpmChanNum, rpmChanRowStatus=rpmChanRowStatus, rpmChanRemoteNsap=rpmChanRemoteNsap, rpmChanRtePriority=rpmChanRtePriority, cmrConnMIBCompliance=cmrConnMIBCompliance, cmrConnMIBConformance=cmrConnMIBConformance, rpmChanGrpEntry=rpmChanGrpEntry, rpmChanVpi=rpmChanVpi, rpmChanRestrictTrkType=rpmChanRestrictTrkType, rpmChanVci=rpmChanVci, rpmChanRemotePercentUtil=rpmChanRemotePercentUtil, rpmChanPCR=rpmChanPCR, cmrConnMIBGroups=cmrConnMIBGroups, rpmChanRemoteVpi=rpmChanRemoteVpi, rpmChanRemoteVci=rpmChanRemoteVci, rpmChanState=rpmChanState, rpmChanLocalVpi=rpmChanLocalVpi, ciscoMgx82xxRpmConnMIB=ciscoMgx82xxRpmConnMIB, cmrConnConfGroup=cmrConnConfGroup, rpmChanMidLow=rpmChanMidLow, rpmChanSubInterface=rpmChanSubInterface, rpmChanRemoteMCR=rpmChanRemoteMCR, rpmChanMastership=rpmChanMastership, rpmChanMCR=rpmChanMCR, rpmChanSlotNum=rpmChanSlotNum, rpmChanMaxCost=rpmChanMaxCost, rpmChanVcd=rpmChanVcd, rpmChanInArpFreq=rpmChanInArpFreq, rpmChanAbrRDF=rpmChanAbrRDF, rpmChanVirtualTemplate=rpmChanVirtualTemplate, rpmChanRemotePCR=rpmChanRemotePCR)
