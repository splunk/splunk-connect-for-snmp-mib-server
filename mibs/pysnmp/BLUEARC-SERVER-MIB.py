#
# PySNMP MIB module BLUEARC-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLUEARC-SERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
enterprises, TimeTicks, mib_2, IpAddress, ObjectIdentity, ModuleIdentity, Counter32, Unsigned32, Bits, NotificationType, Counter64, Integer32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "mib-2", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Counter32", "Unsigned32", "Bits", "NotificationType", "Counter64", "Integer32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
blueArcServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 11096, 6, 1))
blueArcServer.setRevisions(('2010-04-08 12:00', '2007-11-05 12:00', '2006-05-12 12:00', '2006-04-24 12:00', '2005-12-13 12:00', '2005-12-09 12:00', '2005-08-29 12:00', '2004-03-23 12:00', '2003-10-14 12:00', '2003-09-01 12:00', '2003-07-24 12:00', '2003-07-11 12:00', '2003-06-10 12:00', '2003-03-31 12:00', '2003-03-27 12:00', '2003-01-16 14:00', '2003-01-16 12:00', '2003-01-15 10:16', '2003-01-07 16:21', '2002-11-28 16:20', '2002-10-25 14:52', '2002-10-24 14:07', '2002-05-31 12:00', '2002-05-27 12:00', '2002-04-04 12:00', '2002-03-19 12:00', '2001-12-21 12:00',))
if mibBuilder.loadTexts: blueArcServer.setLastUpdated('201004081200Z')
if mibBuilder.loadTexts: blueArcServer.setOrganization('BlueArc UK Ltd.')
blueArc = MibIdentifier((1, 3, 6, 1, 4, 1, 11096))
blueArcPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6))
blueArcServerObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1))
powerUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1))
locale = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2))
failover = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3))
cache = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4))
sectorCache = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1))
fileSysCache = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2))
clustering = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5))
serialNumbers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3))
racks = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2))
controllers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1))
physicalDrives = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2))
enclosures = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3))
automount = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3))
systemDrives = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4))
volumes = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5))
fcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6))
virtualVolumes = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7))
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8))
nvramStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2))
etherStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1))
tcpipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2))
udpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3))
advipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4))
engipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5))
nameService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6))
wins = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 1))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2))
nsOrder = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3))
nis = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7))
fileProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 1))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2))
shares = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1))
shareAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3))
cifsService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 4))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3))
nfsExports = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1))
nfsUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2))
nfsUserMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3))
nfsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4))
nfsGroupMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5))
nfsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6))
nfsVersion2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1))
nfsVersion3 = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2))
nfsService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 7))
ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4))
ftpMountPoints = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2))
ftpUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3))
ftpLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5))
ftpService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 6))
ftpSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 7))
http = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5))
httpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1))
httpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2))
httpService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 3))
iScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6))
iScsiConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1))
iScsiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4))
ndmpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 1))
ndmpDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2))
ndmpSnapshotOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3))
mgmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5))
systemUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1))
license = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2))
access = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3))
web = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1))
sictrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2))
telnet = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3))
secureWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4))
lcd = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 5))
eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4))
alerts = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5))
mailAlertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1))
winAlertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2))
snmpAlertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7))
cron = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8))
mgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9))
webMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1))
sictrlMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2))
telnetMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3))
secureWebMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4))
hwFlowControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6))
utilization = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1))
systemDriveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2))
fileSystemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3))
spanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4))
cacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5))
protocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6))
clusterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7))
puConfigNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigNumber.setStatus('obsolete')
puConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: puConfigTable.setStatus('obsolete')
puConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puConfigIndex"))
if mibBuilder.loadTexts: puConfigEntry.setStatus('obsolete')
puConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigIndex.setStatus('obsolete')
puConfigShutdownEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigShutdownEnabled.setStatus('obsolete')
puConfigShutdownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("remainingLife", 1), ("immediately", 2), ("oneMinute", 3), ("twoMinutes", 4), ("threeMinutes", 5), ("fiveMinutes", 6), ("tenMinutes", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigShutdownInterval.setStatus('obsolete')
puConfigShutdownRemainingLife = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10))).clone(namedValues=NamedValues(("fiveMinutes", 5), ("tenMinutes", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigShutdownRemainingLife.setStatus('obsolete')
puConfigCommsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("communicating", 1), ("notCommunicating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigCommsOK.setStatus('obsolete')
puConfigCommsEverOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("communicated", 1), ("neverCommunicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigCommsEverOK.setStatus('obsolete')
puConfigurationCount = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationCount.setStatus('current')
puConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8), )
if mibBuilder.loadTexts: puConfigurationTable.setStatus('current')
puConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puConfigurationIndex"))
if mibBuilder.loadTexts: puConfigurationEntry.setStatus('current')
puConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationIndex.setStatus('current')
puConfigurationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationUserName.setStatus('current')
puConfigurationMonitoringEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationMonitoringEnabled.setStatus('current')
puConfigurationShutdownOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationShutdownOnBattery.setStatus('current')
puConfigurationShutdownOnRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationShutdownOnRuntime.setStatus('current')
puConfigurationShutdownOnLowBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationShutdownOnLowBattery.setStatus('current')
puConfigurationOnBatteryTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationOnBatteryTolerance.setStatus('current')
puConfigurationCommsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("communicating", 1), ("notCommunicating", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationCommsOK.setStatus('current')
puConfigurationCommsEverOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("communicated", 1), ("neverCommunicated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationCommsEverOK.setStatus('current')
puStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusNumber.setStatus('obsolete')
puStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: puStatusTable.setStatus('obsolete')
puStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puStatusIndex"))
if mibBuilder.loadTexts: puStatusEntry.setStatus('obsolete')
puStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusIndex.setStatus('obsolete')
puStatusModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusModel.setStatus('obsolete')
puStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusSerialNumber.setStatus('obsolete')
puStatusManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusManufactureDate.setStatus('obsolete')
puStatusBatteryReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusBatteryReplaceDate.setStatus('obsolete')
puStatusUpperTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusUpperTransferVoltage.setStatus('obsolete')
puStatusLowerTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusLowerTransferVoltage.setStatus('obsolete')
puStatusSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3), ("automatic", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusSensitivity.setStatus('obsolete')
puStatusLowBatteryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusLowBatteryInterval.setStatus('obsolete')
puStatusAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("immediately", 1), ("delayedUtilityFailure", 2), ("lowBatteryOnly", 3), ("never", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusAlarmSetting.setStatus('obsolete')
puStatusCalibrating = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calibrating", 1), ("notCalibrating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusCalibrating.setStatus('obsolete')
puStatusSleeping = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sleeping", 1), ("notSleeping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusSleeping.setStatus('obsolete')
puStatusOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusOnline.setStatus('obsolete')
puStatusOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onBattery", 1), ("onMains", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusOnBattery.setStatus('obsolete')
puStatusBatteryAlmostUsedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryAlmostUsedUp", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusBatteryAlmostUsedUp.setStatus('obsolete')
puStatusChangeBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changeBattery", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusChangeBattery.setStatus('obsolete')
puCurrentStatusCount = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusCount.setStatus('current')
puCurrentStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10), )
if mibBuilder.loadTexts: puCurrentStatusTable.setStatus('current')
puCurrentStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puCurrentStatusIndex"))
if mibBuilder.loadTexts: puCurrentStatusEntry.setStatus('current')
puCurrentStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusIndex.setStatus('current')
puCurrentStatusModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusModel.setStatus('current')
puCurrentStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSerialNumber.setStatus('current')
puCurrentStatusManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusManufactureDate.setStatus('current')
puCurrentStatusBatteryReplacedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusBatteryReplacedDate.setStatus('current')
puCurrentStatusUpperTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusUpperTransferVoltage.setStatus('current')
puCurrentStatusLowerTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusLowerTransferVoltage.setStatus('current')
puCurrentStatusSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3), ("automatic", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSensitivity.setStatus('current')
puCurrentStatusLowBatteryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusLowBatteryInterval.setStatus('current')
puCurrentStatusAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("immediately", 1), ("delayedUtilityFailure", 2), ("lowBatteryOnly", 3), ("never", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusAlarmSetting.setStatus('current')
puCurrentStatusCalibrating = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("calibrating", 1), ("notCalibrating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusCalibrating.setStatus('current')
puCurrentStatusSleeping = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("sleeping", 1), ("notSleeping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSleeping.setStatus('current')
puCurrentStatusSmartTrim = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSmartTrim.setStatus('current')
puCurrentStatusSmartBoost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSmartBoost.setStatus('current')
puCurrentStatusOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusOnline.setStatus('current')
puCurrentStatusOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("onBattery", 1), ("onMains", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusOnBattery.setStatus('current')
puCurrentStatusOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusOverload.setStatus('current')
puCurrentStatusBatteryAlmostUsedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("batteryAlmostUsedUp", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusBatteryAlmostUsedUp.setStatus('current')
puCurrentStatusChangeBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("changeBattery", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusChangeBattery.setStatus('current')
puStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsNumber.setStatus('obsolete')
puStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: puStatsTable.setStatus('obsolete')
puStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puStatsIndex"))
if mibBuilder.loadTexts: puStatsEntry.setStatus('obsolete')
puStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsIndex.setStatus('obsolete')
puStatsBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsBatteryCharge.setStatus('obsolete')
puStatsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLoad.setStatus('obsolete')
puStatsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsFrequency.setStatus('obsolete')
puStatsLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLineVoltage.setStatus('obsolete')
puStatsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsOutputVoltage.setStatus('obsolete')
puStatsBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsBatteryVoltage.setStatus('obsolete')
puStatsTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsTemperatureC.setStatus('obsolete')
puStatsTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsTemperatureF.setStatus('obsolete')
puStatsLineMininumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLineMininumVoltage.setStatus('obsolete')
puStatsLineMaximumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLineMaximumVoltage.setStatus('obsolete')
puStatsRemainingRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsRemainingRunTime.setStatus('obsolete')
puStatisticsCount = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsCount.setStatus('current')
puStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12), )
if mibBuilder.loadTexts: puStatisticsTable.setStatus('current')
puStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puStatisticsIndex"))
if mibBuilder.loadTexts: puStatisticsEntry.setStatus('current')
puStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsIndex.setStatus('current')
puStatisticsBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsBatteryCharge.setStatus('current')
puStatisticsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLoad.setStatus('current')
puStatisticsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsFrequency.setStatus('current')
puStatisticsLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLineVoltage.setStatus('current')
puStatisticsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsOutputVoltage.setStatus('current')
puStatisticsBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsBatteryVoltage.setStatus('current')
puStatisticsTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsTemperatureC.setStatus('current')
puStatisticsTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsTemperatureF.setStatus('current')
puStatisticsLineMininumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLineMininumVoltage.setStatus('current')
puStatisticsLineMaximumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLineMaximumVoltage.setStatus('current')
puStatisticsRemainingRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsRemainingRunTime.setStatus('current')
sensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorNumber.setStatus('obsolete')
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: sensorTable.setStatus('obsolete')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('obsolete')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIndex.setStatus('obsolete')
sensorSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("severe", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSpeedStatus.setStatus('obsolete')
sensorSpeedReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSpeedReading.setStatus('obsolete')
sensorTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("severe", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempStatus.setStatus('obsolete')
sensorTempCReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempCReading.setStatus('obsolete')
sensorTempFReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempFReading.setStatus('obsolete')
psuOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOneStatus.setStatus('obsolete')
psuTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuTwoStatus.setStatus('obsolete')
opsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsPerSecond.setStatus('current')
fileSystemLoadClient = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemLoadClient.setStatus('current')
fileSystemLoadSystem = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemLoadSystem.setStatus('current')
temperatureSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorNumber.setStatus('current')
temperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: temperatureSensorTable.setStatus('current')
temperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "temperatureSensorClusterNode"), (0, "BLUEARC-SERVER-MIB", "temperatureSensorIndex"))
if mibBuilder.loadTexts: temperatureSensorEntry.setStatus('current')
temperatureSensorClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorClusterNode.setStatus('current')
temperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorIndex.setStatus('current')
temperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("tempWarning", 2), ("tempSevere", 3), ("tempSensorFailed", 4), ("tempSensorWarning", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorStatus.setStatus('current')
temperatureSensorCReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorCReading.setStatus('current')
temperatureSensorFReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorFReading.setStatus('current')
fanNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('current')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fanClusterNode"), (0, "BLUEARC-SERVER-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanClusterNode.setStatus('current')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('current')
fanFittedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("okIdWrong", 2), ("notFitted", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFittedStatus.setStatus('current')
fanSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("severe", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedStatus.setStatus('current')
fanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeed.setStatus('current')
psuNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuNumber.setStatus('current')
psuTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13), )
if mibBuilder.loadTexts: psuTable.setStatus('current')
psuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "psuClusterNode"), (0, "BLUEARC-SERVER-MIB", "psuIndex"))
if mibBuilder.loadTexts: psuEntry.setStatus('current')
psuClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuClusterNode.setStatus('current')
psuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuIndex.setStatus('current')
psuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("notFitted", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuStatus.setStatus('current')
serverDate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDate.setStatus('current')
serverTime = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTime.setStatus('current')
utcOffset = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
daylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daylightSavings", 1), ("noDaylightSavings", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daylightSavings.setStatus('current')
ntpServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerNumber.setStatus('current')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "ntpServerHost"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
ntpServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerHost.setStatus('current')
failoverConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("notConfigured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverConfigStatus.setStatus('obsolete')
failoverPrimaryName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverPrimaryName.setStatus('obsolete')
failoverSystemName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSystemName.setStatus('obsolete')
failoverSecondaryName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSecondaryName.setStatus('obsolete')
failoverPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverPrimaryIpAddr.setStatus('obsolete')
failoverSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSystemIpAddr.setStatus('obsolete')
failoverSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSecondaryIpAddr.setStatus('obsolete')
failoverPrimaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("master", 2), ("standby", 3), ("notDetected", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverPrimaryStatus.setStatus('obsolete')
failoverSecondaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("master", 2), ("standby", 3), ("notDetected", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSecondaryStatus.setStatus('obsolete')
sectorCacheMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ramdisk", 1), ("writeThrough", 2), ("writeBack", 3), ("disabled", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheMode.setStatus('current')
sectorCacheDirtyPageWtmk = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheDirtyPageWtmk.setStatus('obsolete')
sectorCacheDirtyPageTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheDirtyPageTimeout.setStatus('current')
fileSysCacheMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysCacheMode.setStatus('obsolete')
fileSysTransactionLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysTransactionLogging.setStatus('obsolete')
fileSysCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 655))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysCacheTimeout.setStatus('obsolete')
fileSysUpdateLastAccess = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysUpdateLastAccess.setStatus('current')
clusterName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterName.setStatus('current')
clusterUuid = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterUuid.setStatus('current')
clusterConfig = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("singleNode", 1), ("activeStandby", 2), ("activeActive", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterConfig.setStatus('current')
clusterQuorumDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceName.setStatus('current')
clusterQuorumDeviceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceIpAddr.setStatus('current')
clusterQuorumDeviceOwnedByPNode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceOwnedByPNode.setStatus('current')
clusterQuorumDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("unconfigured", 1), ("offLine", 2), ("owned", 3), ("configured", 4), ("granted", 5), ("clusterNodeNotUp", 6), ("misconfigured", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceStatus.setStatus('current')
clusterPNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeNumber.setStatus('current')
clusterPNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9), )
if mibBuilder.loadTexts: clusterPNodeTable.setStatus('current')
clusterPNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterPNodeId"))
if mibBuilder.loadTexts: clusterPNodeEntry.setStatus('current')
clusterPNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeId.setStatus('current')
clusterPNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeName.setStatus('current')
clusterPNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeIpAddr.setStatus('current')
clusterPNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("notUp", 3), ("onLine", 4), ("dead", 5), ("dormant", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeStatus.setStatus('current')
clusterVNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeNumber.setStatus('current')
clusterVNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11), )
if mibBuilder.loadTexts: clusterVNodeTable.setStatus('current')
clusterVNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterVNodeId"))
if mibBuilder.loadTexts: clusterVNodeEntry.setStatus('current')
clusterVNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeId.setStatus('current')
clusterVNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeName.setStatus('current')
clusterVNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeIpAddr.setStatus('current')
clusterVNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("offLine", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeStatus.setStatus('current')
clusterVNodeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeAdmin.setStatus('current')
clusterVNodeHostedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeHostedBy.setStatus('current')
serialNumberTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: serialNumberTable.setStatus('current')
serialNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "componentType"), (0, "BLUEARC-SERVER-MIB", "subComponentType"), (0, "BLUEARC-SERVER-MIB", "clusterNode"))
if mibBuilder.loadTexts: serialNumberEntry.setStatus('current')
componentType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chassis", 1), ("blade", 2), ("psu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentType.setStatus('current')
subComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 0), ("nim1", 1), ("nim2", 2), ("nim3", 3), ("fsa17455", 4), ("fsa1", 5), ("fsa2", 6), ("fsx1", 7), ("fsb1", 8), ("fsb2", 9), ("sim1", 10), ("sim2", 11), ("chassis", 12), ("psu1", 13), ("psu2", 14), ("fsb3", 15), ("sim3", 16), ("mcp1", 17), ("mmb1", 18), ("mfb1", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subComponentType.setStatus('current')
clusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNode.setStatus('current')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
rackNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackNumber.setStatus('obsolete')
rackTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: rackTable.setStatus('obsolete')
rackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "rackIndex"))
if mibBuilder.loadTexts: rackEntry.setStatus('obsolete')
rackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackIndex.setStatus('obsolete')
rackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("storageFailed", 2), ("loopFailed", 3), ("otherFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackStatus.setStatus('obsolete')
rackNumberOfEnclosures = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackNumberOfEnclosures.setStatus('obsolete')
rackNumberOfPhysicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackNumberOfPhysicalDrives.setStatus('obsolete')
raidControllerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: raidControllerTable.setStatus('obsolete')
raidControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerRackIndex"))
if mibBuilder.loadTexts: raidControllerEntry.setStatus('obsolete')
raidControllerRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerRackIndex.setStatus('obsolete')
raidControllerWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerWWN.setStatus('obsolete')
raidControllerPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("online", 1), ("failed", 2), ("notPresent", 3), ("unknown", 4), ("inserted", 5), ("offline", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerPrimaryStatus.setStatus('obsolete')
raidControllerSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("failed", 2), ("notPresent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerSecondaryStatus.setStatus('obsolete')
raidControllerManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerManufacturer.setStatus('obsolete')
raidControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerModel.setStatus('obsolete')
raidControllerCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerCacheSize.setStatus('obsolete')
raidControllerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: raidControllerConfigTable.setStatus('obsolete')
raidControllerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerConfigRackIndex"))
if mibBuilder.loadTexts: raidControllerConfigEntry.setStatus('obsolete')
raidControllerConfigRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRackIndex.setStatus('obsolete')
raidControllerConfigDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigDRAMSize.setStatus('obsolete')
raidControllerConfigFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFlashSize.setStatus('obsolete')
raidControllerConfigNVRSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigNVRSize.setStatus('obsolete')
raidControllerConfigClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigClockSpeed.setStatus('obsolete')
raidControllerConfigMemAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMemAccess.setStatus('obsolete')
raidControllerConfigMemCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMemCycle.setStatus('obsolete')
raidControllerConfigPhysicalSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigPhysicalSectorSize.setStatus('obsolete')
raidControllerConfigLogicalSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigLogicalSectorSize.setStatus('obsolete')
raidControllerConfigMaxSystemDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaxSystemDrives.setStatus('obsolete')
raidControllerConfigMaxDrivesPerSystemDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaxDrivesPerSystemDrive.setStatus('obsolete')
raidControllerConfigMaxSpanPerVirtualDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaxSpanPerVirtualDrive.setStatus('obsolete')
raidControllerConfigFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareVersion.setStatus('obsolete')
raidControllerConfigFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareType.setStatus('obsolete')
raidControllerConfigFirmwareMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareMajor.setStatus('obsolete')
raidControllerConfigFirmwareMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareMinor.setStatus('obsolete')
raidControllerConfigMaximumCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaximumCommands.setStatus('obsolete')
raidControllerConfigFirmwareBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareBuild.setStatus('obsolete')
raidControllerConfigRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildRate.setStatus('obsolete')
raidControllerConfigRebuildUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildUnit.setStatus('obsolete')
raidControllerConfigRebuildOn = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildOn.setStatus('obsolete')
raidControllerConfigRebuildOff = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildOff.setStatus('obsolete')
raidControllerBatteryBackupTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: raidControllerBatteryBackupTable.setStatus('obsolete')
raidControllerBatteryBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerBatteryBackupRackIndex"))
if mibBuilder.loadTexts: raidControllerBatteryBackupEntry.setStatus('obsolete')
raidControllerBatteryBackupRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupRackIndex.setStatus('obsolete')
raidControllerBatteryBackupNoSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSync", 1), ("sync", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupNoSync.setStatus('obsolete')
raidControllerBatteryBackupOutOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfsync", 1), ("sync", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupOutOfSync.setStatus('obsolete')
raidControllerBatteryBackupFirstWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firstWarning", 1), ("noFirstWarning", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupFirstWarning.setStatus('obsolete')
raidControllerBatteryBackupSecondWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondWarning", 1), ("noSecondWarning", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupSecondWarning.setStatus('obsolete')
raidControllerBatteryBackupReconditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reconditioning", 1), ("notReconditioning", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupReconditioning.setStatus('obsolete')
raidControllerBatteryBackupDischarging = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discharging", 1), ("notDischarging", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupDischarging.setStatus('obsolete')
raidControllerBatteryBackupFastCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fastCharging", 1), ("notFastCharging", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupFastCharging.setStatus('obsolete')
raidControllerBatteryBackupLowPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lowPowerAlarm", 1), ("noLowPowerAlarm", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupLowPower.setStatus('obsolete')
raidControllerBatteryBackupChargePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupChargePercent.setStatus('obsolete')
raidControllerBatteryBackupHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupHardwareVersion.setStatus('obsolete')
raidControllerBatteryBackupBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("niCd", 1), ("none", 2), ("unknown", 3), ("niMH", 4), ("lion", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupBatteryType.setStatus('obsolete')
raidControllerBatteryBackupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupThreshold.setStatus('obsolete')
raidControllerActiveTaskNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskNumber.setStatus('obsolete')
raidControllerActiveTaskTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5), )
if mibBuilder.loadTexts: raidControllerActiveTaskTable.setStatus('obsolete')
raidControllerActiveTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerActiveTaskRackIndex"), (0, "BLUEARC-SERVER-MIB", "raidControllerActiveTaskIndex"))
if mibBuilder.loadTexts: raidControllerActiveTaskEntry.setStatus('obsolete')
raidControllerActiveTaskRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskRackIndex.setStatus('obsolete')
raidControllerActiveTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskIndex.setStatus('obsolete')
raidControllerActiveTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initializing", 1), ("checking", 2), ("checkingAndRestoring", 3), ("rebuilding", 4), ("reconditioningBattery", 5), ("chargingBattery", 6), ("unknown", 7), ("backgroundInitialising", 8), ("migrating", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskType.setStatus('obsolete')
raidControllerActiveTaskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskLUN.setStatus('obsolete')
raidControllerActiveTaskPercentageDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskPercentageDone.setStatus('obsolete')
physicalDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveNumber.setStatus('obsolete')
physicalDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2), )
if mibBuilder.loadTexts: physicalDriveTable.setStatus('obsolete')
physicalDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "physicalDriveRackIndex"), (0, "BLUEARC-SERVER-MIB", "physicalDriveEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "physicalDriveColumnIndex"), (0, "BLUEARC-SERVER-MIB", "physicalDriveRowIndex"))
if mibBuilder.loadTexts: physicalDriveEntry.setStatus('obsolete')
physicalDriveRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveRackIndex.setStatus('obsolete')
physicalDriveEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveEnclosureIndex.setStatus('obsolete')
physicalDriveColumnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveColumnIndex.setStatus('obsolete')
physicalDriveRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveRowIndex.setStatus('obsolete')
physicalDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notPresent", 1), ("online", 2), ("failed", 3), ("rebuilding", 6), ("hotspare", 7), ("notConfigured", 8), ("migrating", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveStatus.setStatus('obsolete')
physicalDriveVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seagate", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveVendor.setStatus('obsolete')
physicalDriveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveVersion.setStatus('obsolete')
physicalDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveCapacity.setStatus('obsolete')
enclosureFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanNumber.setStatus('obsolete')
enclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: enclosureFanTable.setStatus('obsolete')
enclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosureFanRackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureFanEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureFanFanIndex"))
if mibBuilder.loadTexts: enclosureFanEntry.setStatus('obsolete')
enclosureFanRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanRackIndex.setStatus('obsolete')
enclosureFanEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanEnclosureIndex.setStatus('obsolete')
enclosureFanFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanFanIndex.setStatus('obsolete')
enclosureFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanStatus.setStatus('obsolete')
enclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2), ("stoppedOrUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanSpeed.setStatus('obsolete')
enclosureTemperatureNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureNumber.setStatus('obsolete')
enclosureTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4), )
if mibBuilder.loadTexts: enclosureTemperatureTable.setStatus('obsolete')
enclosureTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosureTemperatureRackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureTemperatureEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureTemperatureTempIndex"))
if mibBuilder.loadTexts: enclosureTemperatureEntry.setStatus('obsolete')
enclosureTemperatureRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureRackIndex.setStatus('obsolete')
enclosureTemperatureEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureEnclosureIndex.setStatus('obsolete')
enclosureTemperatureTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureTempIndex.setStatus('obsolete')
enclosureTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureStatus.setStatus('obsolete')
enclosureTemperatureOverTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("overTemp", 1), ("noOverTemp", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureOverTemp.setStatus('obsolete')
enclosureTemperatureTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureTempC.setStatus('obsolete')
enclosureTemperatureTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureTempF.setStatus('obsolete')
enclosureTemperatureRange = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("warm", 2), ("hot", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureRange.setStatus('obsolete')
enclosurePSUNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUNumber.setStatus('obsolete')
enclosurePSUTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6), )
if mibBuilder.loadTexts: enclosurePSUTable.setStatus('obsolete')
enclosurePSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosurePSURackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosurePSUEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosurePSUPSUIndex"))
if mibBuilder.loadTexts: enclosurePSUEntry.setStatus('obsolete')
enclosurePSURackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSURackIndex.setStatus('obsolete')
enclosurePSUEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUEnclosureIndex.setStatus('obsolete')
enclosurePSUPSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUPSUIndex.setStatus('obsolete')
enclosurePSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUStatus.setStatus('obsolete')
enclosureAlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmNumber.setStatus('obsolete')
enclosureAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8), )
if mibBuilder.loadTexts: enclosureAlarmTable.setStatus('obsolete')
enclosureAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosureAlarmRackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureAlarmEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureAlarmAlarmIndex"))
if mibBuilder.loadTexts: enclosureAlarmEntry.setStatus('obsolete')
enclosureAlarmRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmRackIndex.setStatus('obsolete')
enclosureAlarmEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmEnclosureIndex.setStatus('obsolete')
enclosureAlarmAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmAlarmIndex.setStatus('obsolete')
enclosureAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmStatus.setStatus('obsolete')
enclosureAlarmBeeping = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("beeping", 1), ("notBeeping", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmBeeping.setStatus('obsolete')
automountNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountNumber.setStatus('obsolete')
automountTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2), )
if mibBuilder.loadTexts: automountTable.setStatus('obsolete')
automountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "automountIndex"), (0, "BLUEARC-SERVER-MIB", "automountPartitionIndex"))
if mibBuilder.loadTexts: automountEntry.setStatus('obsolete')
automountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountIndex.setStatus('obsolete')
automountPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountPartitionIndex.setStatus('obsolete')
automountWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountWWN.setStatus('obsolete')
automountLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountLUN.setStatus('obsolete')
sysDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveNumber.setStatus('current')
sysDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2), )
if mibBuilder.loadTexts: sysDriveTable.setStatus('current')
sysDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sysDriveIndex"))
if mibBuilder.loadTexts: sysDriveEntry.setStatus('current')
sysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveIndex.setStatus('current')
sysDriveWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveWWN.setStatus('current')
sysDriveLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveLUN.setStatus('current')
sysDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("online", 1), ("corrupt", 2), ("failed", 3), ("notPresent", 4), ("disconnected", 5), ("offline", 6), ("initializing", 7), ("formatting", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveStatus.setStatus('current')
sysDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveCapacity.setStatus('current')
sysDriveRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("raid0", 1), ("raid1", 2), ("raid3", 3), ("raid5", 4), ("raid10", 5), ("jBOD", 6), ("raid30", 7), ("raid50", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveRaidLevel.setStatus('current')
sysDriveCacheMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveCacheMode.setStatus('current')
volumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('current')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: volumeTable.setStatus('current')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "volumeSysDriveIndex"), (0, "BLUEARC-SERVER-MIB", "volumePartitionID"))
if mibBuilder.loadTexts: volumeEntry.setStatus('current')
volumeSysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSysDriveIndex.setStatus('current')
volumePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumePartitionID.setStatus('current')
volumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLabel.setStatus('current')
volumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unformatted", 1), ("mounted", 2), ("formatted", 3), ("needsChecking", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeStatus.setStatus('current')
volumeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeCapacity.setStatus('current')
volumeFreeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeCapacity.setStatus('current')
volumeEnterpriseVirtualServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeEnterpriseVirtualServer.setStatus('current')
fsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3), )
if mibBuilder.loadTexts: fsStatsTable.setStatus('current')
fsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsPermId"))
if mibBuilder.loadTexts: fsStatsEntry.setStatus('current')
fsPermId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsPermId.setStatus('current')
fsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsLabel.setStatus('current')
opsPerSecAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsPerSecAverage.setStatus('current')
fcRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRequests.setStatus('current')
fcResponses = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcResponses.setStatus('current')
fcReadReqs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcReadReqs.setStatus('current')
fcWriteReqs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWriteReqs.setStatus('current')
fcReadResps = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcReadResps.setStatus('current')
fcWriteResps = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWriteResps.setStatus('current')
fcInstInRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstInRate.setStatus('obsolete')
fcInstOutRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstOutRate.setStatus('obsolete')
fcPkInRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPkInRate.setStatus('obsolete')
fcPkOutRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPkOutRate.setStatus('obsolete')
fcCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCacheHits.setStatus('current')
fcCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCacheMisses.setStatus('current')
fcLossSignalErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSignalErrs.setStatus('obsolete')
fcBadRXCharErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadRXCharErrs.setStatus('obsolete')
fcLossSyncErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSyncErrs.setStatus('obsolete')
fcLinkFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLinkFailErrs.setStatus('obsolete')
fcRXEOFErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRXEOFErrs.setStatus('obsolete')
fcDiscardedFrameErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcDiscardedFrameErrs.setStatus('obsolete')
fcBadCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadCRCErrs.setStatus('obsolete')
fcProtErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProtErrs.setStatus('obsolete')
fcIOStatusResubs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIOStatusResubs.setStatus('current')
fcIOStatusFails = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIOStatusFails.setStatus('current')
fibreChannelInterfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibreChannelInterfaceNumber.setStatus('current')
fcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24), )
if mibBuilder.loadTexts: fcStatsTable.setStatus('obsolete')
fcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fcInterfaceIndex"))
if mibBuilder.loadTexts: fcStatsEntry.setStatus('obsolete')
fcInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInterfaceIndex.setStatus('obsolete')
fcInstantaneousInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstantaneousInRate.setStatus('obsolete')
fcInstantaneousOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstantaneousOutRate.setStatus('obsolete')
fcPeakInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPeakInRate.setStatus('obsolete')
fcPeakOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPeakOutRate.setStatus('obsolete')
fcSignalLossErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSignalLossErrors.setStatus('obsolete')
fcBadRXCharErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadRXCharErrors.setStatus('obsolete')
fcLossSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSyncErrors.setStatus('obsolete')
fcLinkFailErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLinkFailErrors.setStatus('obsolete')
fcRXEOFErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRXEOFErrors.setStatus('obsolete')
fcDiscardedFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcDiscardedFrameErrors.setStatus('obsolete')
fcBadCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadCRCErrors.setStatus('obsolete')
fcProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProtocolErrors.setStatus('obsolete')
fcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25), )
if mibBuilder.loadTexts: fcStatisticsTable.setStatus('current')
fcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fcStatsClusterNode"), (0, "BLUEARC-SERVER-MIB", "fcStatsInterfaceIndex"))
if mibBuilder.loadTexts: fcStatisticsEntry.setStatus('current')
fcStatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsClusterNode.setStatus('current')
fcStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceIndex.setStatus('current')
fcStatsInterfaceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceEnabled.setStatus('current')
fcStatsInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("isolated", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceStatus.setStatus('current')
fcStatsInterfaceLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceLinkSpeed.setStatus('current')
fcStatsInterfaceLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("n", 1), ("nl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceLinkType.setStatus('current')
fcStatsInstantaneousInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInstantaneousInRate.setStatus('current')
fcStatsInstantaneousOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInstantaneousOutRate.setStatus('current')
fcStatsPeakInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsPeakInRate.setStatus('current')
fcStatsPeakOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsPeakOutRate.setStatus('current')
fcStatsTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsTotalRxBytes.setStatus('current')
fcStatsTotalTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsTotalTxBytes.setStatus('current')
fcStatsSignalLossErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsSignalLossErrors.setStatus('current')
fcStatsBadRXCharErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsBadRXCharErrors.setStatus('current')
fcStatsLossSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsLossSyncErrors.setStatus('current')
fcStatsLinkFailErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsLinkFailErrors.setStatus('current')
fcStatsRXEOFErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsRXEOFErrors.setStatus('current')
fcStatsDiscardedFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsDiscardedFrameErrors.setStatus('current')
fcStatsBadCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsBadCRCErrors.setStatus('current')
fcStatsProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsProtocolErrors.setStatus('current')
virtualVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeNumber.setStatus('obsolete')
virtualVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2), )
if mibBuilder.loadTexts: virtualVolumeTable.setStatus('obsolete')
virtualVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "virtualVolumeSysDriveIndex"), (0, "BLUEARC-SERVER-MIB", "virtualVolumePartitionID"), (0, "BLUEARC-SERVER-MIB", "virtualVolumeLabel"))
if mibBuilder.loadTexts: virtualVolumeEntry.setStatus('obsolete')
virtualVolumeSysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeSysDriveIndex.setStatus('obsolete')
virtualVolumePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumePartitionID.setStatus('obsolete')
virtualVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeLabel.setStatus('obsolete')
virtualVolumeQuotaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeQuotaEnabled.setStatus('obsolete')
virtualVolumeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeLimit.setStatus('obsolete')
virtualVolumeWarningAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeWarningAlert.setStatus('obsolete')
virtualVolumeCriticalAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeCriticalAlert.setStatus('obsolete')
virtualVolumeHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeHardLimitEnabled.setStatus('obsolete')
virtualVolumeQuotaBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeQuotaBytesUsed.setStatus('obsolete')
virtualVolumeQuotaPercentageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeQuotaPercentageUsed.setStatus('obsolete')
memberListNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListNumber.setStatus('obsolete')
memberListTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4), )
if mibBuilder.loadTexts: memberListTable.setStatus('obsolete')
memberListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "memberListVolumeSysDriveIndex"), (0, "BLUEARC-SERVER-MIB", "memberListVolumePartitionID"), (0, "BLUEARC-SERVER-MIB", "memberListVirtualVolumeLabel"), (0, "BLUEARC-SERVER-MIB", "memberListIndex"))
if mibBuilder.loadTexts: memberListEntry.setStatus('obsolete')
memberListVolumeSysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListVolumeSysDriveIndex.setStatus('obsolete')
memberListVolumePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListVolumePartitionID.setStatus('obsolete')
memberListVirtualVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListVirtualVolumeLabel.setStatus('obsolete')
memberListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListIndex.setStatus('obsolete')
memberListPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListPath.setStatus('obsolete')
memberListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("done", 1), ("pending", 2), ("assigning", 3), ("reparenting", 4), ("deleting", 5), ("failed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListStatus.setStatus('obsolete')
snapshotRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleNumber.setStatus('current')
snapshotRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2), )
if mibBuilder.loadTexts: snapshotRuleTable.setStatus('obsolete')
snapshotRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotRuleName"))
if mibBuilder.loadTexts: snapshotRuleEntry.setStatus('obsolete')
snapshotRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleName.setStatus('obsolete')
snapshotRuleWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleWWN.setStatus('obsolete')
snapshotRuleLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleLUN.setStatus('obsolete')
snapshotRulePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulePartitionID.setStatus('obsolete')
snapshotRuleQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleQueueSize.setStatus('obsolete')
snapshotRuleVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleVolumeLabel.setStatus('obsolete')
snapshotScheduleNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleNumber.setStatus('current')
snapshotScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4), )
if mibBuilder.loadTexts: snapshotScheduleTable.setStatus('obsolete')
snapshotScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotScheduleRuleName"), (0, "BLUEARC-SERVER-MIB", "snapshotScheduleIndex"))
if mibBuilder.loadTexts: snapshotScheduleEntry.setStatus('obsolete')
snapshotScheduleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleRuleName.setStatus('obsolete')
snapshotScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleIndex.setStatus('obsolete')
snapshotScheduleDateTimeSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleDateTimeSpec.setStatus('obsolete')
snapshotRulesTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5), )
if mibBuilder.loadTexts: snapshotRulesTable.setStatus('current')
snapshotRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotRulesEVS"), (0, "BLUEARC-SERVER-MIB", "snapshotRulesName"))
if mibBuilder.loadTexts: snapshotRulesEntry.setStatus('current')
snapshotRulesEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesEVS.setStatus('current')
snapshotRulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesName.setStatus('current')
snapshotRulesQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesQueueSize.setStatus('current')
snapshotRulesVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesVolumeLabel.setStatus('current')
snapshotSchedulesTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6), )
if mibBuilder.loadTexts: snapshotSchedulesTable.setStatus('current')
snapshotSchedulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotSchedulesEVS"), (0, "BLUEARC-SERVER-MIB", "snapshotSchedulesRuleName"), (0, "BLUEARC-SERVER-MIB", "snapshotSchedulesIndex"))
if mibBuilder.loadTexts: snapshotSchedulesEntry.setStatus('current')
snapshotSchedulesEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesEVS.setStatus('current')
snapshotSchedulesRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesRuleName.setStatus('current')
snapshotSchedulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesIndex.setStatus('current')
snapshotSchedulesDateTimeSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesDateTimeSpec.setStatus('current')
nvramFsStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsNumber.setStatus('current')
nvramFsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2), )
if mibBuilder.loadTexts: nvramFsStatsTable.setStatus('current')
nvramFsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsId"))
if mibBuilder.loadTexts: nvramFsStatsEntry.setStatus('current')
fsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsId.setStatus('current')
nvramFsStatsCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsCurrentUsage.setStatus('current')
nvramFsStatsCheckpoints = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsCheckpoints.setStatus('current')
nvramFsStatsActivityCheckpoints = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsActivityCheckpoints.setStatus('current')
nvramFsStatsWaitedAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsWaitedAllocs.setStatus('current')
nvramFsStatsWaitingAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsWaitingAllocs.setStatus('current')
nvramPoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6), )
if mibBuilder.loadTexts: nvramPoolStatsTable.setStatus('current')
nvramPoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterNodeId"))
if mibBuilder.loadTexts: nvramPoolStatsEntry.setStatus('current')
clusterNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeId.setStatus('current')
nvramPoolStatsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsSize.setStatus('current')
nvramPoolStatsMaximumUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsMaximumUsed.setStatus('current')
nvramPoolStatsTotalCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsTotalCurrentUsage.setStatus('current')
nvramPoolStatsWaitedAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsWaitedAllocs.setStatus('current')
nvramPoolStatsWaitingAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsWaitingAllocs.setStatus('current')
ethOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutPkts.setStatus('obsolete')
ethInPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInPkts.setStatus('obsolete')
ethInstInOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInstInOctetRate.setStatus('obsolete')
ethInstOutOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInstOutOctetRate.setStatus('obsolete')
ethPkInOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPkInOctetRate.setStatus('obsolete')
ethPkOutOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPkOutOctetRate.setStatus('obsolete')
ethInFIFODrops = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInFIFODrops.setStatus('obsolete')
ethCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethCRCErrs.setStatus('obsolete')
ethOutFIFOUflows = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutFIFOUflows.setStatus('obsolete')
ethOutOneCollision = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutOneCollision.setStatus('obsolete')
ethOutTwoCollision = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutTwoCollision.setStatus('obsolete')
ethOutFifteenCollision = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutFifteenCollision.setStatus('obsolete')
ethInEvFIFOPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInEvFIFOPktDrop.setStatus('obsolete')
ethEvFIFOMaxEvents = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEvFIFOMaxEvents.setStatus('obsolete')
ethOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutPackets.setStatus('obsolete')
ethInPackets = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInPackets.setStatus('obsolete')
ethTotalPackets = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTotalPackets.setStatus('obsolete')
ethOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutBytes.setStatus('obsolete')
ethInBytes = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInBytes.setStatus('obsolete')
ethTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTotalBytes.setStatus('obsolete')
ethernetStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21), )
if mibBuilder.loadTexts: ethernetStatisticsTable.setStatus('current')
ethernetStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ethernetStatisticsEntry.setStatus('current')
ethernetInstInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInstInOctetRate.setStatus('current')
ethernetInstOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInstOutOctetRate.setStatus('current')
ethernetPkInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPkInOctetRate.setStatus('current')
ethernetPkOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPkOutOctetRate.setStatus('current')
ethernetInFIFODrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInFIFODrops.setStatus('current')
ethernetCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCRCErrs.setStatus('current')
ethernetOutFIFOUflows = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutFIFOUflows.setStatus('current')
ethernetOutOneCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutOneCollision.setStatus('current')
ethernetOutTwoCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutTwoCollision.setStatus('current')
ethernetOutFifteenCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutFifteenCollision.setStatus('current')
ethernetInEvFIFOPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInEvFIFOPktDrop.setStatus('current')
ethernetEvFIFOMaxEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetEvFIFOMaxEvents.setStatus('current')
ethernetOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutPackets.setStatus('current')
ethernetInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInPackets.setStatus('current')
ethernetTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetTotalPackets.setStatus('current')
ethernetOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutBytes.setStatus('current')
ethernetInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInBytes.setStatus('current')
ethernetTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetTotalBytes.setStatus('current')
pausedOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pausedOffTime.setStatus('current')
tcpOpenConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOpenConns.setStatus('current')
tcpMaxOpenConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxOpenConns.setStatus('current')
tcpTotalOpenConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotalOpenConns.setStatus('current')
tcpFailedInConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpFailedInConns.setStatus('current')
tcpFailedOutConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpFailedOutConns.setStatus('current')
tcpOutSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutSegments.setStatus('obsolete')
tcpInSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInSegments.setStatus('obsolete')
tcpReOutSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpReOutSegments.setStatus('obsolete')
tcpInvSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInvSegments.setStatus('obsolete')
tcpIPInPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInPkts.setStatus('obsolete')
tcpIPOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPOutPkts.setStatus('obsolete')
tcpIPInInvPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvPkts.setStatus('obsolete')
tcpIPInInvHdrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvHdrPkts.setStatus('obsolete')
tcpIPInInvChksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvChksumPkts.setStatus('obsolete')
tcpIPInInvNUcastAddrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvNUcastAddrPkts.setStatus('obsolete')
tcpIPInInvUcastAddrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvUcastAddrPkts.setStatus('obsolete')
tcpIPInInvSrcAddrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvSrcAddrPkts.setStatus('obsolete')
tcpIPInInvOptionPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvOptionPkts.setStatus('obsolete')
tcpInOversizeSegmentErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInOversizeSegmentErrs.setStatus('obsolete')
tcpInInvChksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInInvChksumPkts.setStatus('obsolete')
tcpLinkPktDrops = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLinkPktDrops.setStatus('obsolete')
tcpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22), )
if mibBuilder.loadTexts: tcpStatisticsTable.setStatus('current')
tcpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tcpStatisticsEntry.setStatus('current')
tcpTxSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTxSegments.setStatus('current')
tcpRxSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRxSegments.setStatus('current')
tcpReTxSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpReTxSegments.setStatus('current')
tcpInvalidSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInvalidSegments.setStatus('current')
tcpIPTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPTxPkts.setStatus('current')
tcpIPRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxPkts.setStatus('current')
tcpIPRxInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidPkts.setStatus('current')
tcpIPRxInvalidHdrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidHdrPkts.setStatus('current')
tcpIPRxInvalidChksumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidChksumPkts.setStatus('obsolete')
tcpIPRxInvalidNUcastAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidNUcastAddrPkts.setStatus('obsolete')
tcpIPRxInvalidUcastAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidUcastAddrPkts.setStatus('obsolete')
tcpIPRxInvalidSrcAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidSrcAddrPkts.setStatus('current')
tcpIPRxInvalidOptionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidOptionPkts.setStatus('obsolete')
tcpIPMiscBadSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPMiscBadSegments.setStatus('current')
tcpRxOversizeSegmentErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRxOversizeSegmentErrs.setStatus('obsolete')
tcpRxInvalidChksumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRxInvalidChksumPkts.setStatus('current')
tcpLinkPacketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLinkPacketDrops.setStatus('obsolete')
udpInShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInShortPkts.setStatus('obsolete')
udpInInvChksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInInvChksumPkts.setStatus('obsolete')
udpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3), )
if mibBuilder.loadTexts: udpStatisticsTable.setStatus('current')
udpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: udpStatisticsEntry.setStatus('current')
udpRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpRxShortPkts.setStatus('current')
udpRxInvChksumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpRxInvChksumPkts.setStatus('current')
tcpArpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpArpCacheTimeout.setStatus('current')
tcpBroadCastUsingZero = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpBroadCastUsingZero.setStatus('current')
tcpIgnoreICMPEcho = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIgnoreICMPEcho.setStatus('current')
tcpOffSubnetMTU = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOffSubnetMTU.setStatus('current')
tcpAllSubnetsMTU = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpAllSubnetsMTU.setStatus('current')
tcpKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpKeepAlive.setStatus('current')
tcpKeepAliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpKeepAliveTimeout.setStatus('current')
tcpDefWnd = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDefWnd.setStatus('current')
tcpDelayedAcks = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDelayedAcks.setStatus('current')
tcpSlowStartCA = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSlowStartCA.setStatus('current')
tcpSSRestartDoubleMSS = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSSRestartDoubleMSS.setStatus('current')
tcpNagle = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpNagle.setStatus('current')
tcpSillyWindowAvoid = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSillyWindowAvoid.setStatus('current')
tcpOldAckStrategy = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOldAckStrategy.setStatus('current')
tcpSlowStartOnIdle = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSlowStartOnIdle.setStatus('current')
tcpFastRetxFastRecovery = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpFastRetxFastRecovery.setStatus('current')
tcpOldPushStrategy = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOldPushStrategy.setStatus('current')
tcpOffSubnetSlowStart = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOffSubnetSlowStart.setStatus('current')
tcpUDPCheckSumGen = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpUDPCheckSumGen.setStatus('current')
tcpIntelliSeg = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIntelliSeg.setStatus('current')
winsPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsPrimaryIpAddr.setStatus('current')
winsSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSecondaryIpAddr.setStatus('current')
dnsServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerNumber.setStatus('current')
dnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2), )
if mibBuilder.loadTexts: dnsServerTable.setStatus('current')
dnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "dnsServerIndex"))
if mibBuilder.loadTexts: dnsServerEntry.setStatus('current')
dnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerIndex.setStatus('current')
dnsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerIpAddress.setStatus('current')
dnsSearchNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSearchNumber.setStatus('current')
dnsSearchTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4), )
if mibBuilder.loadTexts: dnsSearchTable.setStatus('current')
dnsSearchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "dnsSearchIndex"))
if mibBuilder.loadTexts: dnsSearchEntry.setStatus('current')
dnsSearchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSearchIndex.setStatus('current')
dnsSearchString = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSearchString.setStatus('current')
nameServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameServiceNumber.setStatus('current')
nameServiceTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2), )
if mibBuilder.loadTexts: nameServiceTable.setStatus('current')
nameServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nameServiceOrder"))
if mibBuilder.loadTexts: nameServiceEntry.setStatus('current')
nameServiceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameServiceOrder.setStatus('current')
nameServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dns", 1), ("wins", 2), ("nis", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameServiceType.setStatus('current')
nisEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisEnabled.setStatus('current')
nisDomain = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisDomain.setStatus('current')
nisCurrentMaster = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisCurrentMaster.setStatus('current')
nisServerBroadcastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerBroadcastEnabled.setStatus('current')
nisVerificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisVerificationEnabled.setStatus('current')
nisTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisTimeout.setStatus('current')
nisRebindInterval = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisRebindInterval.setStatus('current')
nisUserGroupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisUserGroupTimeout.setStatus('current')
nisServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerNumber.setStatus('current')
nisServerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10), )
if mibBuilder.loadTexts: nisServerTable.setStatus('current')
nisServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nisServerIndex"))
if mibBuilder.loadTexts: nisServerEntry.setStatus('current')
nisServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerIndex.setStatus('current')
nisServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerIpAddress.setStatus('current')
nisServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerPriority.setStatus('current')
securityMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mixed", 1), ("unix", 2), ("nosecurity", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityMode.setStatus('current')
securityDomain = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityDomain.setStatus('current')
shareNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNumber.setStatus('current')
shareTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: shareTable.setStatus('obsolete')
shareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "shareName"))
if mibBuilder.loadTexts: shareEntry.setStatus('obsolete')
shareName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareName.setStatus('obsolete')
sharePath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharePath.setStatus('obsolete')
shareComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareComment.setStatus('obsolete')
shareUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareUsers.setStatus('obsolete')
shareWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareWWN.setStatus('obsolete')
shareLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareLUN.setStatus('obsolete')
sharePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharePartitionID.setStatus('obsolete')
shareMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareMaxUsers.setStatus('obsolete')
cifsShareTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: cifsShareTable.setStatus('current')
cifsShareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cifsShareEvsId"), (0, "BLUEARC-SERVER-MIB", "cifsShareName"))
if mibBuilder.loadTexts: cifsShareEntry.setStatus('current')
cifsShareEvsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareEvsId.setStatus('current')
cifsShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareName.setStatus('current')
cifsSharePath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharePath.setStatus('current')
cifsShareComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareComment.setStatus('current')
cifsShareUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareUsers.setStatus('current')
cifsShareMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareMaxUsers.setStatus('current')
cifsShareSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareSpanId.setStatus('current')
shareAccessNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessNumber.setStatus('current')
shareAccessTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2), )
if mibBuilder.loadTexts: shareAccessTable.setStatus('current')
shareAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "shareAccessIndex"), (0, "BLUEARC-SERVER-MIB", "shareAccessShareName"))
if mibBuilder.loadTexts: shareAccessEntry.setStatus('current')
shareAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessIndex.setStatus('current')
shareAccessShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessShareName.setStatus('current')
shareAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessName.setStatus('current')
shareAccessPerms = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAccess", 1), ("read", 2), ("change", 3), ("fullControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessPerms.setStatus('current')
cifsClients = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClients.setStatus('obsolete')
cifsMkdirCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMkdirCalls.setStatus('obsolete')
cifsRmdirCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsRmdirCalls.setStatus('obsolete')
cifsOpenCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpenCalls.setStatus('obsolete')
cifsCreateCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCreateCalls.setStatus('obsolete')
cifsCloseCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCloseCalls.setStatus('obsolete')
cifsFlushCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsFlushCalls.setStatus('obsolete')
cifsUnlinkCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsUnlinkCalls.setStatus('obsolete')
cifsRenameCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsRenameCalls.setStatus('obsolete')
cifsGetatrCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetatrCalls.setStatus('obsolete')
cifsSetatrCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSetatrCalls.setStatus('obsolete')
cifsReadCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReadCalls.setStatus('obsolete')
cifsWriteCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteCalls.setStatus('obsolete')
cifsMknewCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMknewCalls.setStatus('obsolete')
cifsChkpthCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsChkpthCalls.setStatus('obsolete')
cifsLseekCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLseekCalls.setStatus('obsolete')
cifsReadBrawCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReadBrawCalls.setStatus('obsolete')
cifsWriteBrawCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteBrawCalls.setStatus('obsolete')
cifsLockingXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLockingXCalls.setStatus('obsolete')
cifsTransCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTransCalls.setStatus('obsolete')
cifsEchoCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsEchoCalls.setStatus('obsolete')
cifsWriteCloseCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteCloseCalls.setStatus('obsolete')
cifsOpenXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpenXCalls.setStatus('obsolete')
cifsReadXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReadXCalls.setStatus('obsolete')
cifsWriteXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteXCalls.setStatus('obsolete')
cifsTrans2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTrans2Calls.setStatus('obsolete')
cifsFindCloseCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsFindCloseCalls.setStatus('obsolete')
cifsTdisCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTdisCalls.setStatus('obsolete')
cifsNegProtCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNegProtCalls.setStatus('obsolete')
cifsSessSetupXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSessSetupXCalls.setStatus('obsolete')
cifsUlogoffXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsUlogoffXCalls.setStatus('obsolete')
cifsTconXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTconXCalls.setStatus('obsolete')
cifsDskattrCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDskattrCalls.setStatus('obsolete')
cifsSearchCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSearchCalls.setStatus('obsolete')
cifsNTtransCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTtransCalls.setStatus('obsolete')
cifsNTtranssCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTtranssCalls.setStatus('obsolete')
cifsNTcreateXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTcreateXCalls.setStatus('obsolete')
cifsNTcancelCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTcancelCalls.setStatus('obsolete')
cifsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39), )
if mibBuilder.loadTexts: cifsStatsTable.setStatus('current')
cifsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cifsStatsClusterNode"))
if mibBuilder.loadTexts: cifsStatsEntry.setStatus('current')
cifsStatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatsClusterNode.setStatus('current')
clients = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clients.setStatus('current')
mkdirCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkdirCalls.setStatus('current')
rmdirCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdirCalls.setStatus('current')
openCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openCalls.setStatus('current')
createCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: createCalls.setStatus('current')
closeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: closeCalls.setStatus('current')
flushCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flushCalls.setStatus('current')
unlinkCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unlinkCalls.setStatus('current')
renameCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: renameCalls.setStatus('current')
getatrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getatrCalls.setStatus('current')
setatrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setatrCalls.setStatus('current')
readCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCalls.setStatus('current')
writeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeCalls.setStatus('current')
mknewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mknewCalls.setStatus('current')
chkpthCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpthCalls.setStatus('current')
lseekCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseekCalls.setStatus('current')
readBrawCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readBrawCalls.setStatus('current')
writeBrawCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeBrawCalls.setStatus('current')
lockingXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockingXCalls.setStatus('current')
transCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transCalls.setStatus('current')
echoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: echoCalls.setStatus('current')
writeCloseCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeCloseCalls.setStatus('current')
openXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openXCalls.setStatus('current')
readXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readXCalls.setStatus('current')
writeXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeXCalls.setStatus('current')
trans2Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trans2Calls.setStatus('current')
findCloseCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: findCloseCalls.setStatus('current')
tdisCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdisCalls.setStatus('current')
negProtCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: negProtCalls.setStatus('current')
sessSetupXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessSetupXCalls.setStatus('current')
ulogoffXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulogoffXCalls.setStatus('current')
tconXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tconXCalls.setStatus('current')
dskattrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskattrCalls.setStatus('current')
searchCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchCalls.setStatus('current')
ntTransCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTransCalls.setStatus('current')
ntTranssCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTranssCalls.setStatus('current')
ntCreateXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCreateXCalls.setStatus('current')
ntCancelCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCancelCalls.setStatus('current')
cifsServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsServiceEnabled.setStatus('current')
cifsServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsServiceMaxUsers.setStatus('current')
nfsExportNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportNumber.setStatus('current')
nfsExportTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2), )
if mibBuilder.loadTexts: nfsExportTable.setStatus('obsolete')
nfsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsExportIndex"))
if mibBuilder.loadTexts: nfsExportEntry.setStatus('obsolete')
nfsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportIndex.setStatus('obsolete')
nfsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportName.setStatus('obsolete')
nfsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportPath.setStatus('obsolete')
nfsExportNumberMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportNumberMounts.setStatus('obsolete')
nfsExportWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportWWN.setStatus('obsolete')
nfsExportLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportLUN.setStatus('obsolete')
nfsExportPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportPartitionID.setStatus('obsolete')
nfsExportsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3), )
if mibBuilder.loadTexts: nfsExportsTable.setStatus('current')
nfsExportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsExportsEvs"), (0, "BLUEARC-SERVER-MIB", "nfsExportsName"))
if mibBuilder.loadTexts: nfsExportsEntry.setStatus('current')
nfsExportsEvs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsEvs.setStatus('current')
nfsExportsName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsName.setStatus('current')
nfsExportsPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsPath.setStatus('current')
nfsExportsDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsDeviceId.setStatus('current')
nfsUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserNumber.setStatus('obsolete')
nfsUserTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: nfsUserTable.setStatus('obsolete')
nfsUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsUserName"))
if mibBuilder.loadTexts: nfsUserEntry.setStatus('obsolete')
nfsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserName.setStatus('obsolete')
nfsUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserID.setStatus('obsolete')
nfsUserMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingNumber.setStatus('obsolete')
nfsUserMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: nfsUserMappingTable.setStatus('obsolete')
nfsUserMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsUserMappingUnixUserName"))
if mibBuilder.loadTexts: nfsUserMappingEntry.setStatus('obsolete')
nfsUserMappingUnixUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingUnixUserName.setStatus('obsolete')
nfsUserMappingUnixUserIDValid = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingUnixUserIDValid.setStatus('obsolete')
nfsUserMappingUnixUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingUnixUserID.setStatus('obsolete')
nfsUserMappingNtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingNtUserName.setStatus('obsolete')
nfsUserMappingNtUserDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingNtUserDomainName.setStatus('obsolete')
nfsGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupNumber.setStatus('obsolete')
nfsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: nfsGroupTable.setStatus('obsolete')
nfsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsGroupName"))
if mibBuilder.loadTexts: nfsGroupEntry.setStatus('obsolete')
nfsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupName.setStatus('obsolete')
nfsGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupID.setStatus('obsolete')
nfsGroupMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingNumber.setStatus('obsolete')
nfsGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2), )
if mibBuilder.loadTexts: nfsGroupMappingTable.setStatus('obsolete')
nfsGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsGroupMappingUnixGroupName"))
if mibBuilder.loadTexts: nfsGroupMappingEntry.setStatus('obsolete')
nfsGroupMappingUnixGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupName.setStatus('obsolete')
nfsGroupMappingUnixGroupIDValid = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupIDValid.setStatus('obsolete')
nfsGroupMappingUnixGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupID.setStatus('obsolete')
nfsGroupMappingNtGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingNtGroupName.setStatus('obsolete')
nfsGroupMappingNtGroupDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingNtGroupDomainName.setStatus('obsolete')
null2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: null2Calls.setStatus('obsolete')
getAttr2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getAttr2Calls.setStatus('obsolete')
setAttr2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAttr2Calls.setStatus('obsolete')
rootCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootCalls.setStatus('obsolete')
lookup2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lookup2Calls.setStatus('obsolete')
readLink2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readLink2.setStatus('obsolete')
read2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: read2.setStatus('obsolete')
writeCache = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeCache.setStatus('obsolete')
write2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: write2.setStatus('obsolete')
create2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: create2.setStatus('obsolete')
remove2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remove2.setStatus('obsolete')
rename2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rename2.setStatus('obsolete')
link2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2.setStatus('obsolete')
symLink2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symLink2.setStatus('obsolete')
mkDir2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkDir2.setStatus('obsolete')
rmDir2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDir2.setStatus('obsolete')
readDir2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readDir2.setStatus('obsolete')
statFS2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statFS2.setStatus('obsolete')
nfsV2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19), )
if mibBuilder.loadTexts: nfsV2StatsTable.setStatus('current')
nfsV2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsV2StatsClusterNode"))
if mibBuilder.loadTexts: nfsV2StatsEntry.setStatus('current')
nfsV2StatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2StatsClusterNode.setStatus('current')
nfsV2nullCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2nullCalls.setStatus('current')
nfsV2getAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2getAttrCalls.setStatus('current')
nfsV2setAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2setAttrCalls.setStatus('current')
nfsV2rootCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2rootCalls.setStatus('current')
nfsV2lookupCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2lookupCalls.setStatus('current')
nfsV2readLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2readLink.setStatus('current')
nfsV2read = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2read.setStatus('current')
nfsV2writeCache = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2writeCache.setStatus('current')
nfsV2write = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2write.setStatus('current')
nfsV2create = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2create.setStatus('current')
nfsV2remove = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2remove.setStatus('current')
nfsV2rename = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2rename.setStatus('current')
nfsV2link = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2link.setStatus('current')
nfsV2symLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2symLink.setStatus('current')
nfsV2mkDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2mkDir.setStatus('current')
nfsV2rmDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2rmDir.setStatus('current')
nfsV2readDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2readDir.setStatus('current')
nfsV2statFS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2statFS.setStatus('current')
null3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: null3Calls.setStatus('obsolete')
getAttr3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getAttr3Calls.setStatus('obsolete')
setAttr3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAttr3Calls.setStatus('obsolete')
lookup3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lookup3Calls.setStatus('obsolete')
access3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: access3Calls.setStatus('obsolete')
readLink3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readLink3.setStatus('obsolete')
read3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: read3.setStatus('obsolete')
write3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: write3.setStatus('obsolete')
create3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: create3.setStatus('obsolete')
mkdir3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkdir3.setStatus('obsolete')
symLink3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symLink3.setStatus('obsolete')
mkNod3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkNod3.setStatus('obsolete')
remove3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remove3.setStatus('obsolete')
rmDir3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDir3.setStatus('obsolete')
rename3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rename3.setStatus('obsolete')
link3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3.setStatus('obsolete')
readDir3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readDir3.setStatus('obsolete')
readDirPlus3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readDirPlus3.setStatus('obsolete')
fsStat3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStat3.setStatus('obsolete')
fsInfo3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsInfo3.setStatus('obsolete')
pathConf3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathConf3.setStatus('obsolete')
commit3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commit3.setStatus('obsolete')
nfsV3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23), )
if mibBuilder.loadTexts: nfsV3StatsTable.setStatus('current')
nfsV3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsV3StatsClusterNode"))
if mibBuilder.loadTexts: nfsV3StatsEntry.setStatus('current')
nfsV3StatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3StatsClusterNode.setStatus('current')
nfsV3nullCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3nullCalls.setStatus('current')
nfsV3getAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3getAttrCalls.setStatus('current')
nfsV3setAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3setAttrCalls.setStatus('current')
nfsV3lookupCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3lookupCalls.setStatus('current')
nfsV3accessCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3accessCalls.setStatus('current')
nfsV3readLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3readLink.setStatus('current')
nfsV3read = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3read.setStatus('current')
nfsV3write = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3write.setStatus('current')
nfsV3create = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3create.setStatus('current')
nfsV3mkdir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3mkdir.setStatus('current')
nfsV3symLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3symLink.setStatus('current')
nfsV3mkNod = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3mkNod.setStatus('current')
nfsV3remove = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3remove.setStatus('current')
nfsV3rmDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3rmDir.setStatus('current')
nfsV3rename = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3rename.setStatus('current')
nfsV3link = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3link.setStatus('current')
nfsV3readDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3readDir.setStatus('current')
nfsV3readDirPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3readDirPlus.setStatus('current')
nfsV3fsStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3fsStat.setStatus('current')
nfsV3fsInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3fsInfo.setStatus('current')
nfsV3pathConf = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3pathConf.setStatus('current')
nfsV3commit = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3commit.setStatus('current')
nfsMounts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsMounts.setStatus('obsolete')
nfsClients = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClients.setStatus('obsolete')
nfsServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServiceEnabled.setStatus('current')
nfsServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServiceMaxUsers.setStatus('current')
ftpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTimeout.setStatus('obsolete')
ftpMountNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountNumber.setStatus('obsolete')
ftpMountTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2), )
if mibBuilder.loadTexts: ftpMountTable.setStatus('obsolete')
ftpMountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "ftpMountName"))
if mibBuilder.loadTexts: ftpMountEntry.setStatus('obsolete')
ftpMountName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountName.setStatus('obsolete')
ftpMountNumberUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountNumberUsers.setStatus('obsolete')
ftpMountWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountWWN.setStatus('obsolete')
ftpMountLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountLUN.setStatus('obsolete')
ftpMountPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountPartitionID.setStatus('obsolete')
ftpUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserNumber.setStatus('obsolete')
ftpUserTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2), )
if mibBuilder.loadTexts: ftpUserTable.setStatus('obsolete')
ftpUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "ftpUserName"))
if mibBuilder.loadTexts: ftpUserEntry.setStatus('obsolete')
ftpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserName.setStatus('obsolete')
ftpUserMountPointExists = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exists", 1), ("doesnotExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserMountPointExists.setStatus('obsolete')
ftpUserMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserMountPoint.setStatus('obsolete')
ftpUserMountInitDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserMountInitDirectory.setStatus('obsolete')
ftpAuditLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogging.setStatus('obsolete')
ftpAuditLogVolumeWWN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogVolumeWWN.setStatus('obsolete')
ftpAuditLogVolumeLUN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogVolumeLUN.setStatus('obsolete')
ftpAuditLogVolumePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogVolumePartitionID.setStatus('obsolete')
ftpAuditLogDirectory = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogDirectory.setStatus('obsolete')
ftpAuditLogRecordsPerFile = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogRecordsPerFile.setStatus('obsolete')
ftpAuditMaximumLogFiles = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditMaximumLogFiles.setStatus('obsolete')
ftpTotalSess = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalSess.setStatus('obsolete')
ftpTotalFtpXferIn = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpXferIn.setStatus('obsolete')
ftpBytesTotalXferIn = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpBytesTotalXferIn.setStatus('obsolete')
ftpTotalFtpXferOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpXferOut.setStatus('obsolete')
ftpBytesTotalXferOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpBytesTotalXferOut.setStatus('obsolete')
ftpTotalFtpCommands = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpCommands.setStatus('obsolete')
ftpTotalFtpReplies = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpReplies.setStatus('obsolete')
ftpTotalBytesCommands = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalBytesCommands.setStatus('obsolete')
ftpTotalBytesReplies = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalBytesReplies.setStatus('obsolete')
ftpServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServiceEnabled.setStatus('obsolete')
ftpServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServiceMaxUsers.setStatus('obsolete')
ftpNTPasswordEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNTPasswordEnabled.setStatus('obsolete')
ftpNISPasswordEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNISPasswordEnabled.setStatus('obsolete')
httpHostVolumeWWN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHostVolumeWWN.setStatus('obsolete')
httpHostVolumeLUN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHostVolumeLUN.setStatus('obsolete')
httpHostVolumePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHostVolumePartitionID.setStatus('obsolete')
httpRoot = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpRoot.setStatus('obsolete')
httpProduct = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProduct.setStatus('obsolete')
httpMinTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMinTimeOut.setStatus('obsolete')
httpMaxTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaxTimeOut.setStatus('obsolete')
httpDecrTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpDecrTimeOut.setStatus('obsolete')
httpIncrTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpIncrTimeOut.setStatus('obsolete')
httpMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaxConnections.setStatus('obsolete')
httpListDirectories = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpListDirectories.setStatus('obsolete')
httpLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogging.setStatus('obsolete')
httpMaximalLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaximalLogging.setStatus('obsolete')
httpLogVolumeWWN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogVolumeWWN.setStatus('obsolete')
httpLogVolumeLUN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogVolumeLUN.setStatus('obsolete')
httpLogVolumePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogVolumePartitionID.setStatus('obsolete')
httpLogDirectory = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogDirectory.setStatus('obsolete')
httpLogRecordsPerFile = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogRecordsPerFile.setStatus('obsolete')
httpMaximumLogFiles = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaximumLogFiles.setStatus('obsolete')
httpMimeMapNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapNumber.setStatus('obsolete')
httpMimeMapTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21), )
if mibBuilder.loadTexts: httpMimeMapTable.setStatus('obsolete')
httpMimeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "httpMimeMapIndex"))
if mibBuilder.loadTexts: httpMimeMapEntry.setStatus('obsolete')
httpMimeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapIndex.setStatus('obsolete')
httpMimeMapExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapExtension.setStatus('obsolete')
httpMimeMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapType.setStatus('obsolete')
httpConnsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpConnsAccepted.setStatus('obsolete')
httpConnsRefused = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpConnsRefused.setStatus('obsolete')
httpBytesXferOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpBytesXferOut.setStatus('obsolete')
httpBytesXferIn = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpBytesXferIn.setStatus('obsolete')
httpGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpGetRequests.setStatus('obsolete')
httpHeadRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHeadRequests.setStatus('obsolete')
httpPutRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPutRequests.setStatus('obsolete')
httpPostRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPostRequests.setStatus('obsolete')
httpStatusOK = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusOK.setStatus('obsolete')
httpStatusNotModified = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusNotModified.setStatus('obsolete')
httpStatusPreconFailed = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusPreconFailed.setStatus('obsolete')
httpStatusBadRequest = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusBadRequest.setStatus('obsolete')
httpStatusForbidden = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusForbidden.setStatus('obsolete')
httpStatusNotFound = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusNotFound.setStatus('obsolete')
httpStatusURITooLong = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusURITooLong.setStatus('obsolete')
httpStatusServerError = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusServerError.setStatus('obsolete')
httpStatusNotImplemented = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusNotImplemented.setStatus('obsolete')
httpStatusServiceUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusServiceUnavailable.setStatus('obsolete')
httpStatusOtherErr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusOtherErr.setStatus('obsolete')
httpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTimeOut.setStatus('obsolete')
httpOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOpenConnections.setStatus('obsolete')
httpActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpActiveConnections.setStatus('obsolete')
httpServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceEnabled.setStatus('obsolete')
httpServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceMaxUsers.setStatus('obsolete')
iScsiServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiServiceEnabled.setStatus('current')
iScsiParameterTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2), )
if mibBuilder.loadTexts: iScsiParameterTable.setStatus('current')
iScsiParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiParameterEVS"), (0, "BLUEARC-SERVER-MIB", "iScsiParameterName"))
if mibBuilder.loadTexts: iScsiParameterEntry.setStatus('current')
iScsiParameterEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterEVS.setStatus('current')
iScsiParameterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterName.setStatus('current')
iScsiParameterIsBoolean = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boolean", 1), ("notBoolean", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterIsBoolean.setStatus('current')
iScsiParameterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterValue.setStatus('current')
iScsiTargetNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetNumber.setStatus('current')
iScsiTargetTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4), )
if mibBuilder.loadTexts: iScsiTargetTable.setStatus('current')
iScsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiGloballyUniqueName"))
if mibBuilder.loadTexts: iScsiTargetEntry.setStatus('current')
iScsiGloballyUniqueName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiGloballyUniqueName.setStatus('current')
iScsiTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetName.setStatus('current')
iScsiTargetComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetComment.setStatus('current')
iScsiTargetLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLogicalUnitNumber.setStatus('current')
iScsiTargetAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetAuthEnabled.setStatus('current')
iScsiLogicalUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLogicalUnitNumber.setStatus('current')
iScsiLogicalUnitTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6), )
if mibBuilder.loadTexts: iScsiLogicalUnitTable.setStatus('current')
iScsiLogicalUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiLUEvs"), (0, "BLUEARC-SERVER-MIB", "iScsiLUName"))
if mibBuilder.loadTexts: iScsiLogicalUnitEntry.setStatus('current')
iScsiLUEvs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUEvs.setStatus('current')
iScsiLUName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUName.setStatus('current')
iScsiLUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUStatus.setStatus('current')
iScsiLUComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUComment.setStatus('current')
iScsiLUDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUDeviceId.setStatus('current')
iScsiLUPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUPath.setStatus('current')
iScsiLUInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialized", 1), ("uninitialized", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUInitialized.setStatus('current')
iScsiLUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUSize.setStatus('current')
iScsiTargetLogicalUnitTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7), )
if mibBuilder.loadTexts: iScsiTargetLogicalUnitTable.setStatus('current')
iScsiTargetLogicalUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiTargetLUTargetName"), (0, "BLUEARC-SERVER-MIB", "iScsiTargetLULogicalUnitName"))
if mibBuilder.loadTexts: iScsiTargetLogicalUnitEntry.setStatus('current')
iScsiTargetLUTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLUTargetName.setStatus('current')
iScsiTargetLULogicalUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLULogicalUnitName.setStatus('current')
iScsiTargetLun = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLun.setStatus('current')
iSNSTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8), )
if mibBuilder.loadTexts: iSNSTable.setStatus('current')
iSNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iSNSIpAddress"))
if mibBuilder.loadTexts: iSNSEntry.setStatus('current')
iSNSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSNSIpAddress.setStatus('current')
iSNSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSNSPort.setStatus('current')
iScsiStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1), )
if mibBuilder.loadTexts: iScsiStatisticsTable.setStatus('current')
iScsiStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiStatisticsNodeId"), (0, "BLUEARC-SERVER-MIB", "iScsiStatisticsName"))
if mibBuilder.loadTexts: iScsiStatisticsEntry.setStatus('current')
iScsiStatisticsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiStatisticsNodeId.setStatus('current')
iScsiStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiStatisticsName.setStatus('current')
iScsiStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiStatisticsValue.setStatus('current')
ndmpCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("started", 1), ("stopped", 2), ("aborting", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpCurrentStatus.setStatus('current')
ndmpEnabledOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpEnabledOnBoot.setStatus('current')
autoChangerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerNumber.setStatus('current')
autoChangerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: autoChangerTable.setStatus('current')
autoChangerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "autoChangerIndex"))
if mibBuilder.loadTexts: autoChangerEntry.setStatus('current')
autoChangerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerIndex.setStatus('current')
autoChangerDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerDeviceName.setStatus('current')
autoChangerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerSerialNumber.setStatus('current')
autoChangerEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerEVS.setStatus('current')
tapeDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveNumber.setStatus('current')
tapeDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: tapeDriveTable.setStatus('current')
tapeDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "tapeDriveIndex"))
if mibBuilder.loadTexts: tapeDriveEntry.setStatus('current')
tapeDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveIndex.setStatus('current')
tapeDriveAutoChangerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveAutoChangerIndex.setStatus('current')
tapeDriveDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveDeviceName.setStatus('current')
tapeDriveSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveSerialNumber.setStatus('current')
tapeDriveLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveLocation.setStatus('current')
tapeDriveEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveEVS.setStatus('current')
ndmpAutoSnapCreateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpAutoSnapCreateEnabled.setStatus('current')
ndmpAutoSnapDeleteMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediately", 1), ("whenObsolete", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpAutoSnapDeleteMode.setStatus('current')
ndmpAutoSnapMaxRetention = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpAutoSnapMaxRetention.setStatus('current')
systemUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUserNumber.setStatus('current')
systemUserTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: systemUserTable.setStatus('current')
systemUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "systemUserName"))
if mibBuilder.loadTexts: systemUserEntry.setStatus('current')
systemUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUserName.setStatus('current')
systemUserAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUserAccessLevel.setStatus('current')
licenseKeyNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyNumber.setStatus('current')
licenseKeyTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: licenseKeyTable.setStatus('obsolete')
licenseKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "licenseKeyIndex"))
if mibBuilder.loadTexts: licenseKeyEntry.setStatus('obsolete')
licenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyIndex.setStatus('obsolete')
licenseKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyString.setStatus('obsolete')
licenseKeyValid = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyValid.setStatus('obsolete')
licenseCIFSService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCIFSService.setStatus('obsolete')
licenseNFSService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseNFSService.setStatus('obsolete')
licenseFTPService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFTPService.setStatus('obsolete')
licenseHTTPService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseHTTPService.setStatus('obsolete')
licenseFailoverService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFailoverService.setStatus('obsolete')
licenseRAIDService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRAIDService.setStatus('obsolete')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
licenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKey.setStatus('current')
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setStatus('current')
webAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessEnabled.setStatus('obsolete')
webAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessRestricted.setStatus('obsolete')
webAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessRestrictedNumber.setStatus('obsolete')
webAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 4), )
if mibBuilder.loadTexts: webAccessRestrictedTable.setStatus('obsolete')
webAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "webAccessRestrictedHost"))
if mibBuilder.loadTexts: webAccessRestrictedEntry.setStatus('obsolete')
webAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessRestrictedHost.setStatus('obsolete')
webAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessPortNumber.setStatus('obsolete')
webAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessMaxConnections.setStatus('obsolete')
sictrlAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessEnabled.setStatus('obsolete')
sictrlAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessRestricted.setStatus('obsolete')
sictrlAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessRestrictedNumber.setStatus('obsolete')
sictrlAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 4), )
if mibBuilder.loadTexts: sictrlAccessRestrictedTable.setStatus('obsolete')
sictrlAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sictrlAccessRestrictedHost"))
if mibBuilder.loadTexts: sictrlAccessRestrictedEntry.setStatus('obsolete')
sictrlAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessRestrictedHost.setStatus('obsolete')
sictrlAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessPortNumber.setStatus('obsolete')
sictrlAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessMaxConnections.setStatus('obsolete')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
telnetAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessRestricted.setStatus('current')
telnetAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessRestrictedNumber.setStatus('current')
telnetAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 4), )
if mibBuilder.loadTexts: telnetAccessRestrictedTable.setStatus('current')
telnetAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "telnetAccessRestrictedHost"))
if mibBuilder.loadTexts: telnetAccessRestrictedEntry.setStatus('current')
telnetAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessRestrictedHost.setStatus('current')
telnetAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessPortNumber.setStatus('current')
telnetAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessMaxConnections.setStatus('current')
secureWebAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessEnabled.setStatus('obsolete')
secureWebAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessRestricted.setStatus('obsolete')
secureWebAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessRestrictedNumber.setStatus('obsolete')
secureWebAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 4), )
if mibBuilder.loadTexts: secureWebAccessRestrictedTable.setStatus('obsolete')
secureWebAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "secureWebAccessRestrictedHost"))
if mibBuilder.loadTexts: secureWebAccessRestrictedEntry.setStatus('obsolete')
secureWebAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessRestrictedHost.setStatus('obsolete')
secureWebAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessPortNumber.setStatus('obsolete')
secureWebAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessMaxConnections.setStatus('obsolete')
lcdFrontPanelLocked = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unLocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcdFrontPanelLocked.setStatus('obsolete')
eventLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogNumber.setStatus('obsolete')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2), )
if mibBuilder.loadTexts: eventLogTable.setStatus('obsolete')
eventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "eventLogTimeStamp"), (0, "BLUEARC-SERVER-MIB", "eventLogHandle"))
if mibBuilder.loadTexts: eventLogEntry.setStatus('obsolete')
eventLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogTimeStamp.setStatus('obsolete')
eventLogHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogHandle.setStatus('obsolete')
eventLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogText.setStatus('obsolete')
smtpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpAddr.setStatus('current')
smtpCritFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpCritFreq.setStatus('current')
smtpSevFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("daily", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSevFreq.setStatus('current')
smtpWarnFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("daily", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpWarnFreq.setStatus('current')
smtpInfoFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("daily", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpInfoFreq.setStatus('current')
smtpRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipNumber.setStatus('current')
smtpRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7), )
if mibBuilder.loadTexts: smtpRecipTable.setStatus('obsolete')
smtpRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "smtpRecipIndex"))
if mibBuilder.loadTexts: smtpRecipEntry.setStatus('obsolete')
smtpRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipIndex.setStatus('obsolete')
smtpRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipName.setStatus('obsolete')
smtpDiagUUencEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpDiagUUencEnabled.setStatus('current')
smtpUndisclosedRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpUndisclosedRecipNumber.setStatus('obsolete')
smtpUndisclosedRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10), )
if mibBuilder.loadTexts: smtpUndisclosedRecipTable.setStatus('obsolete')
smtpUndisclosedRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "smtpUndisclosedRecipIndex"))
if mibBuilder.loadTexts: smtpUndisclosedRecipEntry.setStatus('obsolete')
smtpUndisclosedRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpUndisclosedRecipIndex.setStatus('obsolete')
smtpUndisclosedRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpUndisclosedRecipName.setStatus('obsolete')
smtpRecipientTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11), )
if mibBuilder.loadTexts: smtpRecipientTable.setStatus('current')
smtpRecipientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "smtpRecipientIndex"))
if mibBuilder.loadTexts: smtpRecipientEntry.setStatus('current')
smtpRecipientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientIndex.setStatus('current')
smtpRecipientName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientName.setStatus('current')
smtpRecipientDisclose = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientDisclose.setStatus('current')
smtpRecipientEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientEmpty.setStatus('current')
winCritFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winCritFreq.setStatus('obsolete')
winSevFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winSevFreq.setStatus('obsolete')
winWarnFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winWarnFreq.setStatus('obsolete')
winInfoFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winInfoFreq.setStatus('obsolete')
winRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winRecipNumber.setStatus('obsolete')
winRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6), )
if mibBuilder.loadTexts: winRecipTable.setStatus('obsolete')
winRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "winRecipIndex"))
if mibBuilder.loadTexts: winRecipEntry.setStatus('obsolete')
winRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winRecipIndex.setStatus('obsolete')
winRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winRecipName.setStatus('obsolete')
snmpCritFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCritFreq.setStatus('current')
snmpSevFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSevFreq.setStatus('current')
snmpWarnFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpWarnFreq.setStatus('current')
snmpInfoFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInfoFreq.setStatus('current')
snmpRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRecipNumber.setStatus('obsolete')
snmpRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6), )
if mibBuilder.loadTexts: snmpRecipTable.setStatus('obsolete')
snmpRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snmpRecipIndex"))
if mibBuilder.loadTexts: snmpRecipEntry.setStatus('obsolete')
snmpRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRecipIndex.setStatus('obsolete')
snmpRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRecipName.setStatus('obsolete')
snmpProtocolMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bilingual", 1), ("version1", 2), ("version2c", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpProtocolMode.setStatus('current')
snmpAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessRestricted.setStatus('current')
snmpAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessRestrictedNumber.setStatus('current')
snmpAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 4), )
if mibBuilder.loadTexts: snmpAccessRestrictedTable.setStatus('current')
snmpAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snmpAccessRestrictedHost"))
if mibBuilder.loadTexts: snmpAccessRestrictedEntry.setStatus('current')
snmpAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessRestrictedHost.setStatus('current')
snmpTrapHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHostNumber.setStatus('current')
snmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6), )
if mibBuilder.loadTexts: snmpTrapHostTable.setStatus('current')
snmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snmpTrapHostIndex"))
if mibBuilder.loadTexts: snmpTrapHostEntry.setStatus('current')
snmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHostIndex.setStatus('current')
snmpTrapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHost.setStatus('current')
verinfoSw = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verinfoSw.setStatus('current')
verinfoHw = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verinfoHw.setStatus('current')
verModNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModNumber.setStatus('current')
verModTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4), )
if mibBuilder.loadTexts: verModTable.setStatus('current')
verModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "verModIndex"))
if mibBuilder.loadTexts: verModEntry.setStatus('current')
verModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("fsb", 2), ("fcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModIndex.setStatus('current')
verModLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModLoader.setStatus('current')
verModKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModKernel.setStatus('current')
verModHw = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModHw.setStatus('current')
verModSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModSerial.setStatus('current')
verModBuildState = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModBuildState.setStatus('current')
verModUniq0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModUniq0.setStatus('current')
verModUniq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModUniq1.setStatus('current')
verModFirstDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModFirstDate.setStatus('current')
verModMTDSLastFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSLastFailure.setStatus('current')
verModMTDSFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSFailures.setStatus('current')
verModMTDSLastPass = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSLastPass.setStatus('current')
verModMTDSPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSPasses.setStatus('current')
verModCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModCardID.setStatus('current')
verModCardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModCardRev.setStatus('current')
verModGlueRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModGlueRev.setStatus('current')
cronJobNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobNumber.setStatus('current')
cronJobTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2), )
if mibBuilder.loadTexts: cronJobTable.setStatus('current')
cronJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cronJobIndex"))
if mibBuilder.loadTexts: cronJobEntry.setStatus('current')
cronJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobIndex.setStatus('current')
cronJobDateSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobDateSpec.setStatus('current')
cronJobCommandList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobCommandList.setStatus('current')
cronJobMailList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobMailList.setStatus('current')
cronJobAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobAccessLevel.setStatus('current')
atJobNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobNumber.setStatus('current')
atJobTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4), )
if mibBuilder.loadTexts: atJobTable.setStatus('current')
atJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "atJobIndex"))
if mibBuilder.loadTexts: atJobEntry.setStatus('current')
atJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobIndex.setStatus('current')
atJobRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobRunTime.setStatus('current')
atJobCommandList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobCommandList.setStatus('current')
atJobMailList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobMailList.setStatus('current')
atJobAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobAccessLevel.setStatus('current')
webCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCurrActiveSessions.setStatus('obsolete')
webMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webMaxSessions.setStatus('obsolete')
webTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalSessions.setStatus('obsolete')
webRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webRejectedSessions.setStatus('obsolete')
webTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalFramesTX.setStatus('obsolete')
webTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalFramesRX.setStatus('obsolete')
webTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalBytesTX.setStatus('obsolete')
webTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalBytesRX.setStatus('obsolete')
sictrlCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlCurrActiveSessions.setStatus('obsolete')
sictrlMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlMaxSessions.setStatus('obsolete')
sictrlTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalSessions.setStatus('obsolete')
sictrlRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlRejectedSessions.setStatus('obsolete')
sictrlTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalFramesTX.setStatus('obsolete')
sictrlTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalFramesRX.setStatus('obsolete')
sictrlTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalBytesTX.setStatus('obsolete')
sictrlTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalBytesRX.setStatus('obsolete')
telnetCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetCurrActiveSessions.setStatus('current')
telnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetMaxSessions.setStatus('current')
telnetTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalSessions.setStatus('current')
telnetRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetRejectedSessions.setStatus('current')
telnetTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalFramesTX.setStatus('current')
telnetTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalFramesRX.setStatus('current')
telnetTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalBytesTX.setStatus('current')
telnetTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalBytesRX.setStatus('current')
secureWebCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebCurrActiveSessions.setStatus('obsolete')
secureWebMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebMaxSessions.setStatus('obsolete')
secureWebTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalSessions.setStatus('obsolete')
secureWebRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebRejectedSessions.setStatus('obsolete')
secureWebTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalFramesTX.setStatus('obsolete')
secureWebTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalFramesRX.setStatus('obsolete')
secureWebTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalBytesTX.setStatus('obsolete')
secureWebTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalBytesRX.setStatus('obsolete')
hwFlowNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowNumber.setStatus('obsolete')
hwFlowTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2), )
if mibBuilder.loadTexts: hwFlowTable.setStatus('obsolete')
hwFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "hwFlowIndex"))
if mibBuilder.loadTexts: hwFlowEntry.setStatus('obsolete')
hwFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("fsb", 2), ("fcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowIndex.setStatus('obsolete')
hwFlowDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowDebug.setStatus('obsolete')
hwFlowConsole = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowConsole.setStatus('obsolete')
cpuUtilizationNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilizationNumber.setStatus('current')
cpuUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: cpuUtilizationTable.setStatus('current')
cpuUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cpuUtilizationCnIndex"), (0, "BLUEARC-SERVER-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuUtilizationEntry.setStatus('current')
cpuUtilizationCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilizationCnIndex.setStatus('current')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndex.setStatus('current')
cpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
fpgaUtilizationNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationNumber.setStatus('current')
fpgaUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4), )
if mibBuilder.loadTexts: fpgaUtilizationTable.setStatus('current')
fpgaUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fpgaUtilizationCnIndex"), (0, "BLUEARC-SERVER-MIB", "fpgaUtilizationFpgaIndex"))
if mibBuilder.loadTexts: fpgaUtilizationEntry.setStatus('current')
fpgaUtilizationCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationCnIndex.setStatus('current')
fpgaUtilizationFpgaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationFpgaIndex.setStatus('current')
fpgaUtilizationFpgaName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationFpgaName.setStatus('current')
fpgaUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilization.setStatus('current')
systemDriveStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDriveStatsNumber.setStatus('current')
systemDriveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: systemDriveStatsTable.setStatus('current')
systemDriveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "systemDriveStatsCnIndex"), (0, "BLUEARC-SERVER-MIB", "systemDriveStatsSdId"))
if mibBuilder.loadTexts: systemDriveStatsEntry.setStatus('current')
systemDriveStatsCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDriveStatsCnIndex.setStatus('current')
systemDriveStatsSdId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDriveStatsSdId.setStatus('current')
cumNonZeroQueuedReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumNonZeroQueuedReadTime.setStatus('current')
cumNonZeroQueuedWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumNonZeroQueuedWriteTime.setStatus('current')
readCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCount.setStatus('current')
singleBufferWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleBufferWriteCount.setStatus('current')
stripeWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stripeWriteCount.setStatus('current')
readCumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCumLatency.setStatus('current')
oneWriteCumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oneWriteCumLatency.setStatus('current')
stripeWriteCumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stripeWriteCumLatency.setStatus('current')
spanStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanStatsNumber.setStatus('current')
spanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: spanStatsTable.setStatus('current')
spanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "spanStatsSpanId"))
if mibBuilder.loadTexts: spanStatsEntry.setStatus('current')
spanStatsSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanStatsSpanId.setStatus('current')
spanLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanLabel.setStatus('current')
spanCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityTotalUpper.setStatus('current')
spanCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityTotalLower.setStatus('current')
spanCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityUsedUpper.setStatus('current')
spanCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityUsedLower.setStatus('current')
spanTierStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierStatsNumber.setStatus('current')
spanTierStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4), )
if mibBuilder.loadTexts: spanTierStatsTable.setStatus('current')
spanTierStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "spanTierStatsSpanId"), (0, "BLUEARC-SERVER-MIB", "spanTier"))
if mibBuilder.loadTexts: spanTierStatsEntry.setStatus('current')
spanTierStatsSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierStatsSpanId.setStatus('current')
spanTier = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTier.setStatus('current')
spanTierLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierLabel.setStatus('current')
spanTierCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityTotalUpper.setStatus('current')
spanTierCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityTotalLower.setStatus('current')
spanTierCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityUsedUpper.setStatus('current')
spanTierCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityUsedLower.setStatus('current')
fileSystemStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemStatsNumber.setStatus('current')
fileSystemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2), )
if mibBuilder.loadTexts: fileSystemStatsTable.setStatus('current')
fileSystemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsStatsFsId"))
if mibBuilder.loadTexts: fileSystemStatsEntry.setStatus('current')
fsStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatsFsId.setStatus('current')
fsStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatsFsLabel.setStatus('current')
fsCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityTotalUpper.setStatus('current')
fsCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityTotalLower.setStatus('current')
fsCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityUsedUpper.setStatus('current')
fsCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityUsedLower.setStatus('current')
fsCapacitySnapshotUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacitySnapshotUpper.setStatus('current')
fsCapacitySnapshotLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacitySnapshotLower.setStatus('current')
fsNvramWaitedAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsNvramWaitedAllocs.setStatus('current')
fsWriteSmoothing = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsWriteSmoothing.setStatus('current')
fileSystemTierStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemTierStatsNumber.setStatus('current')
fileSystemTierStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4), )
if mibBuilder.loadTexts: fileSystemTierStatsTable.setStatus('current')
fsTierStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsTierStatsFsId"), (0, "BLUEARC-SERVER-MIB", "fsTier"))
if mibBuilder.loadTexts: fsTierStatsEntry.setStatus('current')
fsTierStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierStatsFsId.setStatus('current')
fsTier = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTier.setStatus('current')
fsTierStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierStatsFsLabel.setStatus('current')
fsTierCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityTotalUpper.setStatus('current')
fsTierCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityTotalLower.setStatus('current')
fsTierCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityUsedUpper.setStatus('current')
fsTierCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityUsedLower.setStatus('current')
fsTierCapacitySnapshotUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacitySnapshotUpper.setStatus('current')
fsTierCapacitySnapshotLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacitySnapshotLower.setStatus('current')
metaDataCacheStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsNumber.setStatus('current')
metaDataCacheStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2), )
if mibBuilder.loadTexts: metaDataCacheStatsTable.setStatus('current')
metaDataCacheStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "metaDataCacheStatsFsId"), (0, "BLUEARC-SERVER-MIB", "metaDataCache"))
if mibBuilder.loadTexts: metaDataCacheStatsEntry.setStatus('current')
metaDataCacheStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsFsId.setStatus('current')
metaDataCache = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wfile", 1), ("wdir", 2), ("wtree", 3), ("objRoot", 4), ("objLeaf", 5), ("objIndirectionObject", 6), ("fsa", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCache.setStatus('current')
metaDataCacheStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsFsLabel.setStatus('current')
metaDataCacheStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsHits.setStatus('current')
metaDataCacheStatsMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsMisses.setStatus('current')
sectorCacheStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsNumber.setStatus('current')
sectorCacheStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4), )
if mibBuilder.loadTexts: sectorCacheStatsTable.setStatus('current')
sectorCacheStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sectorCacheStatsCnIndex"), (0, "BLUEARC-SERVER-MIB", "sectorCacheType"))
if mibBuilder.loadTexts: sectorCacheStatsEntry.setStatus('current')
sectorCacheStatsCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsCnIndex.setStatus('current')
sectorCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("readAhead", 2), ("write", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheType.setStatus('current')
sectorCacheStatsHitsPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsHitsPSI.setStatus('current')
sectorCacheStatsHitsSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsHitsSSI.setStatus('current')
sectorCacheStatsHitsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsHitsTotal.setStatus('current')
sectorCacheStatsMissesPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsMissesPSI.setStatus('current')
sectorCacheStatsMissesSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsMissesSSI.setStatus('current')
sectorCacheStatsMissesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsMissesTotal.setStatus('current')
protocolStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolStatsNumber.setStatus('current')
protocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2), )
if mibBuilder.loadTexts: protocolStatsTable.setStatus('current')
protocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "protStatsFsId"), (0, "BLUEARC-SERVER-MIB", "protStatsFlavor"), (0, "BLUEARC-SERVER-MIB", "protStatsOpCode"))
if mibBuilder.loadTexts: protocolStatsEntry.setStatus('current')
protStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsFsId.setStatus('current')
protStatsFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NFS", 0), ("CIFS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsFlavor.setStatus('current')
protStatsOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsOpCode.setStatus('current')
protStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsFsLabel.setStatus('current')
protStatsOpCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsOpCodeName.setStatus('current')
protOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protOpCount.setStatus('current')
protCumulativeLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protCumulativeLatency.setStatus('current')
protocolXferStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsNumber.setStatus('current')
protocolXferStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8), )
if mibBuilder.loadTexts: protocolXferStatsTable.setStatus('current')
protocolXferStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "protocolXferStatsFsId"), (0, "BLUEARC-SERVER-MIB", "protocolXferStatsFlavor"))
if mibBuilder.loadTexts: protocolXferStatsEntry.setStatus('current')
protocolXferStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsFsId.setStatus('current')
protocolXferStatsFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NFS", 0), ("CIFS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsFlavor.setStatus('current')
protocolXferStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsFsLabel.setStatus('current')
protocolXferStatsBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsBytesRead.setStatus('current')
protocolXferStatsBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsBytesWritten.setStatus('current')
intraClusterPortErrorNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraClusterPortErrorNumber.setStatus('current')
intraClusterPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2), )
if mibBuilder.loadTexts: intraClusterPortErrorTable.setStatus('current')
intraClusterPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "intraClusterPortErrsCnId"))
if mibBuilder.loadTexts: intraClusterPortErrorEntry.setStatus('current')
intraClusterPortErrsCnId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraClusterPortErrsCnId.setStatus('current')
mirroringRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirroringRetransmits.setStatus('current')
cnsRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsRetransmits.setStatus('current')
totalRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRetransmits.setStatus('current')
clusterNodeStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeStatsNumber.setStatus('current')
clusterNodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4), )
if mibBuilder.loadTexts: clusterNodeStatsTable.setStatus('current')
clusterNodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterNodeStatsCnId"))
if mibBuilder.loadTexts: clusterNodeStatsEntry.setStatus('current')
clusterNodeStatsCnId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeStatsCnId.setStatus('current')
runningBossockFibers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: runningBossockFibers.setStatus('current')
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", raidControllerBatteryBackupThreshold=raidControllerBatteryBackupThreshold, sictrlTotalBytesRX=sictrlTotalBytesRX, httpServiceMaxUsers=httpServiceMaxUsers, enclosureAlarmNumber=enclosureAlarmNumber, nfsV3nullCalls=nfsV3nullCalls, sictrlAccessRestrictedEntry=sictrlAccessRestrictedEntry, webAccessRestrictedTable=webAccessRestrictedTable, security=security, udpStats=udpStats, nfsGroupMappingEntry=nfsGroupMappingEntry, iScsiStatisticsName=iScsiStatisticsName, ethInstOutOctetRate=ethInstOutOctetRate, nvramPoolStatsTotalCurrentUsage=nvramPoolStatsTotalCurrentUsage, fsTierCapacityUsedLower=fsTierCapacityUsedLower, tcpRxSegments=tcpRxSegments, cronJobDateSpec=cronJobDateSpec, licenseTable=licenseTable, metaDataCacheStatsFsLabel=metaDataCacheStatsFsLabel, enclosureAlarmAlarmIndex=enclosureAlarmAlarmIndex, ethernetOutOneCollision=ethernetOutOneCollision, virtualVolumeCriticalAlert=virtualVolumeCriticalAlert, serialNumberEntry=serialNumberEntry, systemUserNumber=systemUserNumber, httpStats=httpStats, sectorCache=sectorCache, oneWriteCumLatency=oneWriteCumLatency, rackNumberOfPhysicalDrives=rackNumberOfPhysicalDrives, raidControllerBatteryBackupReconditioning=raidControllerBatteryBackupReconditioning, nfsV2create=nfsV2create, fcRXEOFErrs=fcRXEOFErrs, fpgaUtilizationEntry=fpgaUtilizationEntry, ftpNISPasswordEnabled=ftpNISPasswordEnabled, udpRxShortPkts=udpRxShortPkts, clusterNodeStatsCnId=clusterNodeStatsCnId, runningBossockFibers=runningBossockFibers, smtpRecipTable=smtpRecipTable, smtpUndisclosedRecipTable=smtpUndisclosedRecipTable, fcStatsInterfaceStatus=fcStatsInterfaceStatus, raidControllerRackIndex=raidControllerRackIndex, nfsUserMappingNumber=nfsUserMappingNumber, tcpIPRxInvalidNUcastAddrPkts=tcpIPRxInvalidNUcastAddrPkts, puStatsRemainingRunTime=puStatsRemainingRunTime, fcStatsInterfaceEnabled=fcStatsInterfaceEnabled, protocolStats=protocolStats, nisServerIndex=nisServerIndex, mkdirCalls=mkdirCalls, nfsService=nfsService, puStatsLineVoltage=puStatsLineVoltage, tcpFailedInConns=tcpFailedInConns, cifsSearchCalls=cifsSearchCalls, iScsiTargetAuthEnabled=iScsiTargetAuthEnabled, ethernetPkOutOctetRate=ethernetPkOutOctetRate, ntTransCalls=ntTransCalls, fpgaUtilizationFpgaIndex=fpgaUtilizationFpgaIndex, verModCardRev=verModCardRev, access=access, iScsiStatisticsNodeId=iScsiStatisticsNodeId, iScsiLUName=iScsiLUName, echoCalls=echoCalls, wins=wins, puStatsTemperatureC=puStatsTemperatureC, virtualVolumeSysDriveIndex=virtualVolumeSysDriveIndex, raidControllerConfigRebuildUnit=raidControllerConfigRebuildUnit, ftpMountLUN=ftpMountLUN, ethernetTotalPackets=ethernetTotalPackets, physicalDriveVendor=physicalDriveVendor, cifsEchoCalls=cifsEchoCalls, nfsV3fsInfo=nfsV3fsInfo, clusterVNodeName=clusterVNodeName, tcpIPMiscBadSegments=tcpIPMiscBadSegments, autoChangerIndex=autoChangerIndex, snapshotRuleWWN=snapshotRuleWWN, enclosures=enclosures, cifsShareName=cifsShareName, tcpIPInPkts=tcpIPInPkts, verModKernel=verModKernel, ftpMountNumberUsers=ftpMountNumberUsers, fsCapacityTotalUpper=fsCapacityTotalUpper, cifsClients=cifsClients, mknewCalls=mknewCalls, atJobTable=atJobTable, fsTierCapacitySnapshotUpper=fsTierCapacitySnapshotUpper, iScsiLogicalUnitNumber=iScsiLogicalUnitNumber, nisServerEntry=nisServerEntry, httpActiveConnections=httpActiveConnections, etherStats=etherStats, verModNumber=verModNumber, puCurrentStatusCalibrating=puCurrentStatusCalibrating, ethernetOutFifteenCollision=ethernetOutFifteenCollision, fcLossSyncErrs=fcLossSyncErrs, fcStatsPeakOutRate=fcStatsPeakOutRate, snapshotRulesName=snapshotRulesName, remove3=remove3, snmpProtocolMode=snmpProtocolMode, sectorCacheStatsNumber=sectorCacheStatsNumber, readCumLatency=readCumLatency, httpLogging=httpLogging, cpuUtilizationCnIndex=cpuUtilizationCnIndex, memberListVolumeSysDriveIndex=memberListVolumeSysDriveIndex, writeBrawCalls=writeBrawCalls, tapeDriveDeviceName=tapeDriveDeviceName, raidControllerConfigMaxSpanPerVirtualDrive=raidControllerConfigMaxSpanPerVirtualDrive, puStatsLineMininumVoltage=puStatsLineMininumVoltage, nvramFsStatsWaitingAllocs=nvramFsStatsWaitingAllocs, blueArcPrivate=blueArcPrivate, nfsExportPath=nfsExportPath, systemDriveStatsNumber=systemDriveStatsNumber, nfsGroupMappingUnixGroupName=nfsGroupMappingUnixGroupName, ethInPkts=ethInPkts, ftpServiceMaxUsers=ftpServiceMaxUsers, protocolXferStatsTable=protocolXferStatsTable, raid=raid, enclosureAlarmEntry=enclosureAlarmEntry, nfsV3rename=nfsV3rename, lookup2Calls=lookup2Calls, openXCalls=openXCalls, ethOutPkts=ethOutPkts, sictrlAccessRestrictedNumber=sictrlAccessRestrictedNumber, trans2Calls=trans2Calls, snmpAccessRestrictedNumber=snmpAccessRestrictedNumber, httpListDirectories=httpListDirectories, intraClusterPortErrorEntry=intraClusterPortErrorEntry, securityMode=securityMode, physicalDriveColumnIndex=physicalDriveColumnIndex, fcLinkFailErrs=fcLinkFailErrs, puConfigurationCount=puConfigurationCount, clusterNode=clusterNode, licenseNFSService=licenseNFSService, telnetAccessPortNumber=telnetAccessPortNumber, tcpBroadCastUsingZero=tcpBroadCastUsingZero, protocolStatsTable=protocolStatsTable, nfsGroupMappingNtGroupName=nfsGroupMappingNtGroupName, puConfigurationMonitoringEnabled=puConfigurationMonitoringEnabled, dnsServerNumber=dnsServerNumber, ftpUserEntry=ftpUserEntry, fcReadResps=fcReadResps, nfsClients=nfsClients, verModCardID=verModCardID, iScsiStatisticsEntry=iScsiStatisticsEntry, dnsSearchString=dnsSearchString, nfsV3StatsClusterNode=nfsV3StatsClusterNode, fsStatsFsLabel=fsStatsFsLabel, cacheStats=cacheStats, httpMaxConnections=httpMaxConnections, nfsGroupTable=nfsGroupTable, nameServiceOrder=nameServiceOrder, setAttr2Calls=setAttr2Calls, clusterNodeId=clusterNodeId, psuNumber=psuNumber, tcpDelayedAcks=tcpDelayedAcks, fcStatsInstantaneousOutRate=fcStatsInstantaneousOutRate, httpStatusBadRequest=httpStatusBadRequest, nvramPoolStatsWaitingAllocs=nvramPoolStatsWaitingAllocs, smtpCritFreq=smtpCritFreq, virtualVolumeEntry=virtualVolumeEntry, ftpUserMountInitDirectory=ftpUserMountInitDirectory, tcpFastRetxFastRecovery=tcpFastRetxFastRecovery, readLink3=readLink3, httpHeadRequests=httpHeadRequests, cronJobNumber=cronJobNumber, fsStat3=fsStat3, verModGlueRev=verModGlueRev, cifsServiceEnabled=cifsServiceEnabled, raidControllerCacheSize=raidControllerCacheSize, ethernetInstInOctetRate=ethernetInstInOctetRate, puConfigShutdownInterval=puConfigShutdownInterval, raidControllerConfigMemCycle=raidControllerConfigMemCycle, virtualVolumeWarningAlert=virtualVolumeWarningAlert, clusterNodeStatsNumber=clusterNodeStatsNumber, protStatsOpCode=protStatsOpCode, tcpIPRxInvalidPkts=tcpIPRxInvalidPkts, fpgaUtilizationTable=fpgaUtilizationTable, sensorTable=sensorTable, fanClusterNode=fanClusterNode, cifsNegProtCalls=cifsNegProtCalls, tcpIPInInvOptionPkts=tcpIPInInvOptionPkts, snmpAlertConfig=snmpAlertConfig, cifsServiceMaxUsers=cifsServiceMaxUsers, enclosureTemperatureRange=enclosureTemperatureRange, raidControllerPrimaryStatus=raidControllerPrimaryStatus, systemUserTable=systemUserTable, ftpUserMountPointExists=ftpUserMountPointExists, eventLogTable=eventLogTable, engipConfig=engipConfig, clusterQuorumDeviceStatus=clusterQuorumDeviceStatus, cifsOpenXCalls=cifsOpenXCalls, fcStatsInterfaceIndex=fcStatsInterfaceIndex, iSNSIpAddress=iSNSIpAddress, puConfigIndex=puConfigIndex, cifsGetatrCalls=cifsGetatrCalls, hwFlowControl=hwFlowControl, puStatusModel=puStatusModel, telnetTotalSessions=telnetTotalSessions, protStatsFlavor=protStatsFlavor, cron=cron, physicalDrives=physicalDrives, verModTable=verModTable, enclosureAlarmStatus=enclosureAlarmStatus, clusterPNodeName=clusterPNodeName, puStatusOnline=puStatusOnline, nfsV3StatsTable=nfsV3StatsTable, sectorCacheMode=sectorCacheMode, metaDataCacheStatsFsId=metaDataCacheStatsFsId, cifsTrans2Calls=cifsTrans2Calls, ftpTotalFtpXferOut=ftpTotalFtpXferOut, physicalDriveVersion=physicalDriveVersion, httpService=httpService, clusterQuorumDeviceIpAddr=clusterQuorumDeviceIpAddr, shareAccessShareName=shareAccessShareName, smtpInfoFreq=smtpInfoFreq, tcpInvalidSegments=tcpInvalidSegments, cifsMknewCalls=cifsMknewCalls, writeCalls=writeCalls, fpgaUtilizationCnIndex=fpgaUtilizationCnIndex, nfsVersion2=nfsVersion2, puStatsIndex=puStatsIndex, tcpOldPushStrategy=tcpOldPushStrategy, hwFlowNumber=hwFlowNumber, nameServiceTable=nameServiceTable, ethernetInPackets=ethernetInPackets, puCurrentStatusCount=puCurrentStatusCount, nfsV3commit=nfsV3commit, spanTierLabel=spanTierLabel, fcStatsLinkFailErrors=fcStatsLinkFailErrors, raidControllerConfigFlashSize=raidControllerConfigFlashSize, httpStatusOtherErr=httpStatusOtherErr, getAttr2Calls=getAttr2Calls, puConfigurationOnBatteryTolerance=puConfigurationOnBatteryTolerance, puStatusCalibrating=puStatusCalibrating, puCurrentStatusIndex=puCurrentStatusIndex, fsTierCapacityUsedUpper=fsTierCapacityUsedUpper, secureWebCurrActiveSessions=secureWebCurrActiveSessions, smtpDiagUUencEnabled=smtpDiagUUencEnabled, licenseCIFSService=licenseCIFSService, puCurrentStatusBatteryAlmostUsedUp=puCurrentStatusBatteryAlmostUsedUp, raidControllerModel=raidControllerModel, ftpMountNumber=ftpMountNumber, verModMTDSLastFailure=verModMTDSLastFailure, protocolXferStatsNumber=protocolXferStatsNumber, secureWebMaxSessions=secureWebMaxSessions, puStatusEntry=puStatusEntry, cifsWriteBrawCalls=cifsWriteBrawCalls, fileSysCache=fileSysCache, getatrCalls=getatrCalls, statFS2=statFS2, cifsShareSpanId=cifsShareSpanId, httpHostVolumeLUN=httpHostVolumeLUN, advipConfig=advipConfig, tcpStatisticsTable=tcpStatisticsTable, enclosureTemperatureEntry=enclosureTemperatureEntry, cronJobIndex=cronJobIndex, cifsCloseCalls=cifsCloseCalls, nvramStats=nvramStats, sensorTempFReading=sensorTempFReading)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", performance=performance, spanStatsEntry=spanStatsEntry, tcpInOversizeSegmentErrs=tcpInOversizeSegmentErrs, systemUserAccessLevel=systemUserAccessLevel, failoverSecondaryIpAddr=failoverSecondaryIpAddr, puStatusOnBattery=puStatusOnBattery, protCumulativeLatency=protCumulativeLatency, ftpStats=ftpStats, psuStatus=psuStatus, tapeDriveSerialNumber=tapeDriveSerialNumber, fsInfo3=fsInfo3, clusterPNodeId=clusterPNodeId, clusterQuorumDeviceOwnedByPNode=clusterQuorumDeviceOwnedByPNode, tcpLinkPktDrops=tcpLinkPktDrops, network=network, automountTable=automountTable, atJobCommandList=atJobCommandList, nvramPoolStatsTable=nvramPoolStatsTable, iScsiLUStatus=iScsiLUStatus, enclosurePSUEnclosureIndex=enclosurePSUEnclosureIndex, clusterNodeStatsTable=clusterNodeStatsTable, sysDriveWWN=sysDriveWWN, cifsLseekCalls=cifsLseekCalls, ethOutFifteenCollision=ethOutFifteenCollision, alerts=alerts, fcStatsTotalTxBytes=fcStatsTotalTxBytes, puStatisticsTemperatureF=puStatisticsTemperatureF, null3Calls=null3Calls, cifsRenameCalls=cifsRenameCalls, tapeDriveEVS=tapeDriveEVS, tcpIPRxPkts=tcpIPRxPkts, nfsV3readDir=nfsV3readDir, httpTimeOut=httpTimeOut, sictrlTotalFramesRX=sictrlTotalFramesRX, httpBytesXferOut=httpBytesXferOut, spanTierStatsNumber=spanTierStatsNumber, sysDriveLUN=sysDriveLUN, fcStatsPeakInRate=fcStatsPeakInRate, sensorTempCReading=sensorTempCReading, httpMaxTimeOut=httpMaxTimeOut, puStatsBatteryVoltage=puStatsBatteryVoltage, puStatsEntry=puStatsEntry, fcSignalLossErrors=fcSignalLossErrors, tcpInInvChksumPkts=tcpInInvChksumPkts, puCurrentStatusTable=puCurrentStatusTable, sictrlAccessRestrictedHost=sictrlAccessRestrictedHost, fsCapacitySnapshotUpper=fsCapacitySnapshotUpper, spanStatsTable=spanStatsTable, snapshotRulesEntry=snapshotRulesEntry, spanTierCapacityTotalLower=spanTierCapacityTotalLower, ndmpStatus=ndmpStatus, temperatureSensorFReading=temperatureSensorFReading, raidControllerConfigRebuildOn=raidControllerConfigRebuildOn, iScsiTargetComment=iScsiTargetComment, ethPkOutOctetRate=ethPkOutOctetRate, fanSpeedStatus=fanSpeedStatus, puConfigCommsOK=puConfigCommsOK, puCurrentStatusModel=puCurrentStatusModel, temperatureSensorClusterNode=temperatureSensorClusterNode, smtpRecipientDisclose=smtpRecipientDisclose, tcpRxOversizeSegmentErrs=tcpRxOversizeSegmentErrs, puConfigurationShutdownOnLowBattery=puConfigurationShutdownOnLowBattery, intraClusterPortErrorNumber=intraClusterPortErrorNumber, tcpSlowStartOnIdle=tcpSlowStartOnIdle, systemUserName=systemUserName, nfsV3readDirPlus=nfsV3readDirPlus, iScsiTargetLogicalUnitEntry=iScsiTargetLogicalUnitEntry, memberListIndex=memberListIndex, cifsReadBrawCalls=cifsReadBrawCalls, snmpAccessRestrictedHost=snmpAccessRestrictedHost, lseekCalls=lseekCalls, iScsi=iScsi, raidControllerConfigFirmwareMinor=raidControllerConfigFirmwareMinor, secureWebAccessRestrictedNumber=secureWebAccessRestrictedNumber, transCalls=transCalls, systemDriveStatsSdId=systemDriveStatsSdId, enclosureTemperatureTempF=enclosureTemperatureTempF, nfsV2readDir=nfsV2readDir, shareEntry=shareEntry, nfsV2rootCalls=nfsV2rootCalls, hwFlowConsole=hwFlowConsole, puStatusBatteryReplaceDate=puStatusBatteryReplaceDate, temperatureSensorTable=temperatureSensorTable, tcpReTxSegments=tcpReTxSegments, cifsShareEvsId=cifsShareEvsId, nisServerNumber=nisServerNumber, nfsV3symLink=nfsV3symLink, protocolXferStatsFsId=protocolXferStatsFsId, nfsExportWWN=nfsExportWWN, httpLogDirectory=httpLogDirectory, ethernetOutFIFOUflows=ethernetOutFIFOUflows, sictrlAccessRestrictedTable=sictrlAccessRestrictedTable, shareLUN=shareLUN, iScsiLUPath=iScsiLUPath, puCurrentStatusAlarmSetting=puCurrentStatusAlarmSetting, fileSysCacheMode=fileSysCacheMode, nfsUserMappingEntry=nfsUserMappingEntry, tcpFailedOutConns=tcpFailedOutConns, temperatureSensorNumber=temperatureSensorNumber, iScsiParameterTable=iScsiParameterTable, nfsUserMappingNtUserDomainName=nfsUserMappingNtUserDomainName, fcStatsInterfaceLinkSpeed=fcStatsInterfaceLinkSpeed, snmpCritFreq=snmpCritFreq, shares=shares, protocolXferStatsBytesWritten=protocolXferStatsBytesWritten, nfsGroupMappingNumber=nfsGroupMappingNumber, httpHostVolumeWWN=httpHostVolumeWWN, opsPerSecAverage=opsPerSecAverage, iScsiTargetLun=iScsiTargetLun, puStatusUpperTransferVoltage=puStatusUpperTransferVoltage, nfsV2statFS=nfsV2statFS, writeCache=writeCache, failoverSystemName=failoverSystemName, enclosureAlarmBeeping=enclosureAlarmBeeping, nfsExportName=nfsExportName, lookup3Calls=lookup3Calls, spanCapacityUsedUpper=spanCapacityUsedUpper, nfsGroupNumber=nfsGroupNumber, raidControllerBatteryBackupOutOfSync=raidControllerBatteryBackupOutOfSync, httpMaximumLogFiles=httpMaximumLogFiles, webMaxSessions=webMaxSessions, metaDataCacheStatsMisses=metaDataCacheStatsMisses, temperatureSensorStatus=temperatureSensorStatus, tconXCalls=tconXCalls, iScsiTargetLogicalUnitNumber=iScsiTargetLogicalUnitNumber, web=web, snapshotRuleVolumeLabel=snapshotRuleVolumeLabel, locale=locale, ethernetOutPackets=ethernetOutPackets, ethInstInOctetRate=ethInstInOctetRate, spanTier=spanTier, virtualVolumePartitionID=virtualVolumePartitionID, ftpBytesTotalXferIn=ftpBytesTotalXferIn, iSNSPort=iSNSPort, nfsGroupEntry=nfsGroupEntry, puConfigurationShutdownOnRuntime=puConfigurationShutdownOnRuntime, fcStatsLossSyncErrors=fcStatsLossSyncErrors, tcpIPTxPkts=tcpIPTxPkts, snapshotRulesQueueSize=snapshotRulesQueueSize, nvramFsStatsEntry=nvramFsStatsEntry, secureWebTotalBytesRX=secureWebTotalBytesRX, atJobEntry=atJobEntry, shareAccessNumber=shareAccessNumber, fsCapacitySnapshotLower=fsCapacitySnapshotLower, automountNumber=automountNumber, cronJobEntry=cronJobEntry, clusterPNodeStatus=clusterPNodeStatus, verModMTDSFailures=verModMTDSFailures, autoChangerEntry=autoChangerEntry, failoverPrimaryStatus=failoverPrimaryStatus, puStatsFrequency=puStatsFrequency, stripeWriteCumLatency=stripeWriteCumLatency, eventLogEntry=eventLogEntry, clusterNodeStatsEntry=clusterNodeStatsEntry, nvramPoolStatsWaitedAllocs=nvramPoolStatsWaitedAllocs, cifsUlogoffXCalls=cifsUlogoffXCalls, nvramPoolStatsEntry=nvramPoolStatsEntry, environment=environment, verModHw=verModHw, clusterVNodeTable=clusterVNodeTable, raidControllerManufacturer=raidControllerManufacturer, shareWWN=shareWWN, tcpIPRxInvalidChksumPkts=tcpIPRxInvalidChksumPkts, fcReadReqs=fcReadReqs, dnsServerEntry=dnsServerEntry, sictrlMgmntStats=sictrlMgmntStats, verModEntry=verModEntry, ethernetPkInOctetRate=ethernetPkInOctetRate, smtpRecipientEmpty=smtpRecipientEmpty, backup=backup, spanStatsNumber=spanStatsNumber, puStatusAlarmSetting=puStatusAlarmSetting, webAccessEnabled=webAccessEnabled, puConfigCommsEverOK=puConfigCommsEverOK, nfsExportNumberMounts=nfsExportNumberMounts, puStatsNumber=puStatsNumber, shareAccessPerms=shareAccessPerms, raidControllerConfigFirmwareBuild=raidControllerConfigFirmwareBuild, sysDriveStatus=sysDriveStatus, virtualVolumeQuotaEnabled=virtualVolumeQuotaEnabled, tcpOldAckStrategy=tcpOldAckStrategy, readDir2=readDir2, virtualVolumeTable=virtualVolumeTable, searchCalls=searchCalls, sictrlAccessRestricted=sictrlAccessRestricted, tcpKeepAliveTimeout=tcpKeepAliveTimeout, sictrlRejectedSessions=sictrlRejectedSessions, serialNumber=serialNumber, cifsNTtranssCalls=cifsNTtranssCalls, smtpRecipientEntry=smtpRecipientEntry, puStatisticsBatteryVoltage=puStatisticsBatteryVoltage, fsLabel=fsLabel, ethernetInstOutOctetRate=ethernetInstOutOctetRate, cronJobCommandList=cronJobCommandList, ndmpAutoSnapCreateEnabled=ndmpAutoSnapCreateEnabled, cifsFindCloseCalls=cifsFindCloseCalls, shareNumber=shareNumber, sectorCacheStatsCnIndex=sectorCacheStatsCnIndex, enclosurePSUNumber=enclosurePSUNumber, ethernetInEvFIFOPktDrop=ethernetInEvFIFOPktDrop, ftpLogging=ftpLogging, fcInstInRate=fcInstInRate, spanTierStatsEntry=spanTierStatsEntry, nfsUserMappingUnixUserIDValid=nfsUserMappingUnixUserIDValid, cumNonZeroQueuedReadTime=cumNonZeroQueuedReadTime, fpgaUtilizationNumber=fpgaUtilizationNumber, atJobRunTime=atJobRunTime, fcIOStatusFails=fcIOStatusFails, fileSystemStatsEntry=fileSystemStatsEntry, puConfigEntry=puConfigEntry, sictrlTotalSessions=sictrlTotalSessions, fcStatsRXEOFErrors=fcStatsRXEOFErrors, nfsV3write=nfsV3write, puCurrentStatusBatteryReplacedDate=puCurrentStatusBatteryReplacedDate, psuClusterNode=psuClusterNode, enclosureAlarmEnclosureIndex=enclosureAlarmEnclosureIndex, tapeDriveEntry=tapeDriveEntry, iScsiTargetNumber=iScsiTargetNumber, fcStatsTotalRxBytes=fcStatsTotalRxBytes, snapshotScheduleRuleName=snapshotScheduleRuleName, raidControllerConfigMaxDrivesPerSystemDrive=raidControllerConfigMaxDrivesPerSystemDrive, protStatsOpCodeName=protStatsOpCodeName, metaDataCacheStatsHits=metaDataCacheStatsHits, symLink3=symLink3, volumes=volumes, raidControllerActiveTaskPercentageDone=raidControllerActiveTaskPercentageDone, ftpTotalFtpXferIn=ftpTotalFtpXferIn, nfsServiceEnabled=nfsServiceEnabled, read2=read2, raidControllerBatteryBackupLowPower=raidControllerBatteryBackupLowPower, ethOutFIFOUflows=ethOutFIFOUflows, httpStatusForbidden=httpStatusForbidden, negProtCalls=negProtCalls, clusterPNodeIpAddr=clusterPNodeIpAddr, cifsStatsTable=cifsStatsTable, nfsExportsName=nfsExportsName, fcBadCRCErrors=fcBadCRCErrors, atJobAccessLevel=atJobAccessLevel, httpBytesXferIn=httpBytesXferIn, licenseFailoverService=licenseFailoverService, clusterPNodeNumber=clusterPNodeNumber, raidControllerConfigMaxSystemDrives=raidControllerConfigMaxSystemDrives, spanTierStatsTable=spanTierStatsTable, shareComment=shareComment, hwFlowTable=hwFlowTable, readLink2=readLink2, sensorIndex=sensorIndex, raidControllerBatteryBackupHardwareVersion=raidControllerBatteryBackupHardwareVersion, ftpTotalSess=ftpTotalSess, puConfigNumber=puConfigNumber, httpMimeMapType=httpMimeMapType, ethernetInBytes=ethernetInBytes, fcStatsInstantaneousInRate=fcStatsInstantaneousInRate, shareAccessName=shareAccessName)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", blueArc=blueArc, raidControllerBatteryBackupDischarging=raidControllerBatteryBackupDischarging, dnsServerTable=dnsServerTable, httpPutRequests=httpPutRequests, tcpIPOutPkts=tcpIPOutPkts, fcWriteResps=fcWriteResps, nfsV2StatsEntry=nfsV2StatsEntry, puStatsBatteryCharge=puStatsBatteryCharge, cifsShareMaxUsers=cifsShareMaxUsers, access3Calls=access3Calls, blueArcServerObjs=blueArcServerObjs, fcStats=fcStats, nfsGroupMappingTable=nfsGroupMappingTable, verModUniq1=verModUniq1, cumNonZeroQueuedWriteTime=cumNonZeroQueuedWriteTime, memberListTable=memberListTable, puCurrentStatusLowerTransferVoltage=puCurrentStatusLowerTransferVoltage, iScsiTargetLUTargetName=iScsiTargetLUTargetName, temperatureSensorCReading=temperatureSensorCReading, shareAccess=shareAccess, snapshotSchedulesEntry=snapshotSchedulesEntry, virtualVolumeLimit=virtualVolumeLimit, puStatisticsBatteryCharge=puStatisticsBatteryCharge, snapshotSchedulesRuleName=snapshotSchedulesRuleName, ethOutPackets=ethOutPackets, tcpIPRxInvalidUcastAddrPkts=tcpIPRxInvalidUcastAddrPkts, rmDir2=rmDir2, smtpWarnFreq=smtpWarnFreq, cifsOpenCalls=cifsOpenCalls, iScsiConfiguration=iScsiConfiguration, utcOffset=utcOffset, puCurrentStatusOverload=puCurrentStatusOverload, tcpIPInInvSrcAddrPkts=tcpIPInInvSrcAddrPkts, cifsShareUsers=cifsShareUsers, puCurrentStatusSmartBoost=puCurrentStatusSmartBoost, memberListVirtualVolumeLabel=memberListVirtualVolumeLabel, httpStatusOK=httpStatusOK, tcpIPInInvNUcastAddrPkts=tcpIPInInvNUcastAddrPkts, opsPerSecond=opsPerSecond, webCurrActiveSessions=webCurrActiveSessions, ftpUserName=ftpUserName, license=license, snapshotScheduleEntry=snapshotScheduleEntry, raidControllerConfigEntry=raidControllerConfigEntry, webAccessRestricted=webAccessRestricted, readDirPlus3=readDirPlus3, memberListPath=memberListPath, ndmpEnabledOnBoot=ndmpEnabledOnBoot, protOpCount=protOpCount, smtpRecipEntry=smtpRecipEntry, fileSystemTierStatsNumber=fileSystemTierStatsNumber, flushCalls=flushCalls, clusterConfig=clusterConfig, webAccessRestrictedEntry=webAccessRestrictedEntry, enclosureTemperatureTable=enclosureTemperatureTable, ethOutBytes=ethOutBytes, licenseKeyTable=licenseKeyTable, eventlog=eventlog, puStatsTemperatureF=puStatsTemperatureF, ethInBytes=ethInBytes, raidControllerConfigClockSpeed=raidControllerConfigClockSpeed, sharePartitionID=sharePartitionID, ftpUsers=ftpUsers, enclosureFanEntry=enclosureFanEntry, raidControllerConfigFirmwareVersion=raidControllerConfigFirmwareVersion, spanCapacityUsedLower=spanCapacityUsedLower, telnetAccessRestrictedEntry=telnetAccessRestrictedEntry, failoverSecondaryName=failoverSecondaryName, snmpTrapHost=snmpTrapHost, enclosureTemperatureOverTemp=enclosureTemperatureOverTemp, fanEntry=fanEntry, ftpMountName=ftpMountName, fcBadRXCharErrs=fcBadRXCharErrs, fsNvramWaitedAllocs=fsNvramWaitedAllocs, nfsV3accessCalls=nfsV3accessCalls, protocolXferStatsFlavor=protocolXferStatsFlavor, raidControllerSecondaryStatus=raidControllerSecondaryStatus, smtpSevFreq=smtpSevFreq, ethernetStatisticsEntry=ethernetStatisticsEntry, link2=link2, physicalDriveCapacity=physicalDriveCapacity, lockingXCalls=lockingXCalls, puStatusSleeping=puStatusSleeping, telnetAccessMaxConnections=telnetAccessMaxConnections, ethOutOneCollision=ethOutOneCollision, tapeDriveNumber=tapeDriveNumber, protocolStatsNumber=protocolStatsNumber, puStatusLowBatteryInterval=puStatusLowBatteryInterval, tcpTxSegments=tcpTxSegments, cifsShareTable=cifsShareTable, nfsV3getAttrCalls=nfsV3getAttrCalls, clusterVNodeEntry=clusterVNodeEntry, iSNSEntry=iSNSEntry, raidControllerConfigTable=raidControllerConfigTable, rootCalls=rootCalls, secureWebAccessMaxConnections=secureWebAccessMaxConnections, nisServerTable=nisServerTable, nfsUserNumber=nfsUserNumber, fcProtocolErrors=fcProtocolErrors, create2=create2, raidControllerActiveTaskRackIndex=raidControllerActiveTaskRackIndex, snmpTrapHostNumber=snmpTrapHostNumber, enclosureAlarmRackIndex=enclosureAlarmRackIndex, winWarnFreq=winWarnFreq, clusterVNodeIpAddr=clusterVNodeIpAddr, spanCapacityTotalLower=spanCapacityTotalLower, automountIndex=automountIndex, cronJobMailList=cronJobMailList, cifsReadCalls=cifsReadCalls, protStatsFsLabel=protStatsFsLabel, fcInterfaceIndex=fcInterfaceIndex, utilization=utilization, httpLogVolumeWWN=httpLogVolumeWWN, raidControllerConfigRebuildOff=raidControllerConfigRebuildOff, volumeLabel=volumeLabel, enclosureFanStatus=enclosureFanStatus, cifsWriteCalls=cifsWriteCalls, verModLoader=verModLoader, nfsUsers=nfsUsers, ftpUserNumber=ftpUserNumber, systemDriveStatsTable=systemDriveStatsTable, nfsExports=nfsExports, readXCalls=readXCalls, puConfigShutdownEnabled=puConfigShutdownEnabled, virtualVolumeQuotaBytesUsed=virtualVolumeQuotaBytesUsed, httpStatusURITooLong=httpStatusURITooLong, telnetAccessRestrictedNumber=telnetAccessRestrictedNumber, raidControllerBatteryBackupBatteryType=raidControllerBatteryBackupBatteryType, physicalDriveEntry=physicalDriveEntry, mgmnt=mgmnt, snapshotRuleNumber=snapshotRuleNumber, memberListStatus=memberListStatus, sictrlCurrActiveSessions=sictrlCurrActiveSessions, cifsRmdirCalls=cifsRmdirCalls, fcStatsEntry=fcStatsEntry, nfsV3rmDir=nfsV3rmDir, setatrCalls=setatrCalls, dns=dns, nfsV2readLink=nfsV2readLink, verModIndex=verModIndex, iScsiStatisticsTable=iScsiStatisticsTable, raidControllerActiveTaskType=raidControllerActiveTaskType, cifsNTcancelCalls=cifsNTcancelCalls, iScsiTargetLULogicalUnitName=iScsiTargetLULogicalUnitName, unlinkCalls=unlinkCalls, readBrawCalls=readBrawCalls, stripeWriteCount=stripeWriteCount, licenseRAIDService=licenseRAIDService, nfsUserTable=nfsUserTable, rmdirCalls=rmdirCalls, snmpTrapHostEntry=snmpTrapHostEntry, versions=versions, nvramFsStatsNumber=nvramFsStatsNumber, sys=sys, fileProtocol=fileProtocol, verinfoSw=verinfoSw, raidControllerTable=raidControllerTable, volumeCapacity=volumeCapacity, sictrlTotalFramesTX=sictrlTotalFramesTX, fsCapacityUsedUpper=fsCapacityUsedUpper, tcpIPInInvUcastAddrPkts=tcpIPInInvUcastAddrPkts, fcProtErrs=fcProtErrs, sysDriveRaidLevel=sysDriveRaidLevel, snmpRecipNumber=snmpRecipNumber, failover=failover, nfsV3readLink=nfsV3readLink, httpMinTimeOut=httpMinTimeOut, failoverPrimaryName=failoverPrimaryName, spanCapacityTotalUpper=spanCapacityTotalUpper, puCurrentStatusOnline=puCurrentStatusOnline, smtpUndisclosedRecipIndex=smtpUndisclosedRecipIndex, daylightSavings=daylightSavings, memberListNumber=memberListNumber, tcpOpenConns=tcpOpenConns, clients=clients, nvramPoolStatsMaximumUsed=nvramPoolStatsMaximumUsed, ethPkInOctetRate=ethPkInOctetRate, ndmpDevices=ndmpDevices, raidControllerActiveTaskEntry=raidControllerActiveTaskEntry, ftpAuditLogRecordsPerFile=ftpAuditLogRecordsPerFile, secureWebAccessRestrictedTable=secureWebAccessRestrictedTable, snapshotScheduleIndex=snapshotScheduleIndex, raidControllerActiveTaskTable=raidControllerActiveTaskTable, httpStatusNotImplemented=httpStatusNotImplemented, nfsGroupMappingUnixGroupIDValid=nfsGroupMappingUnixGroupIDValid, shareUsers=shareUsers, puStatusChangeBattery=puStatusChangeBattery, sictrlAccessEnabled=sictrlAccessEnabled, fcPkOutRate=fcPkOutRate, tcpInvSegments=tcpInvSegments, sictrlTotalBytesTX=sictrlTotalBytesTX, dnsSearchEntry=dnsSearchEntry, storage=storage, httpStatusNotModified=httpStatusNotModified, enclosureFanTable=enclosureFanTable, snmpAccessRestrictedTable=snmpAccessRestrictedTable, fsTierStatsFsLabel=fsTierStatsFsLabel, fsTierCapacitySnapshotLower=fsTierCapacitySnapshotLower, webTotalBytesRX=webTotalBytesRX, ethInEvFIFOPktDrop=ethInEvFIFOPktDrop, httpConfig=httpConfig, snapshotScheduleTable=snapshotScheduleTable, nfsUserMapping=nfsUserMapping, nfsV2getAttrCalls=nfsV2getAttrCalls, udpInShortPkts=udpInShortPkts, fsStatsEntry=fsStatsEntry, secureWebAccessRestricted=secureWebAccessRestricted, ftpNTPasswordEnabled=ftpNTPasswordEnabled, clusterUuid=clusterUuid, nameServiceType=nameServiceType, iScsiLUSize=iScsiLUSize, snapshotRuleLUN=snapshotRuleLUN, ethernetOutTwoCollision=ethernetOutTwoCollision, psuOneStatus=psuOneStatus, protocolXferStatsEntry=protocolXferStatsEntry, ftpTotalBytesReplies=ftpTotalBytesReplies, puStatisticsFrequency=puStatisticsFrequency, licenseKeyNumber=licenseKeyNumber, snmpTrapHostIndex=snmpTrapHostIndex, fcDiscardedFrameErrors=fcDiscardedFrameErrors, nfsV2lookupCalls=nfsV2lookupCalls, smtpRecipNumber=smtpRecipNumber, snapshotRuleName=snapshotRuleName, autoChangerEVS=autoChangerEVS, nfsGroupName=nfsGroupName, sectorCacheDirtyPageWtmk=sectorCacheDirtyPageWtmk, puStatusBatteryAlmostUsedUp=puStatusBatteryAlmostUsedUp, puCurrentStatusUpperTransferVoltage=puCurrentStatusUpperTransferVoltage, httpConnsAccepted=httpConnsAccepted, ethTotalPackets=ethTotalPackets, raidControllerBatteryBackupFirstWarning=raidControllerBatteryBackupFirstWarning, volumeEntry=volumeEntry, ftpTotalBytesCommands=ftpTotalBytesCommands, virtualVolumes=virtualVolumes, puStatisticsLineVoltage=puStatisticsLineVoltage, nfsV2rmDir=nfsV2rmDir, enclosureFanEnclosureIndex=enclosureFanEnclosureIndex, systemDriveStatsCnIndex=systemDriveStatsCnIndex, sessSetupXCalls=sessSetupXCalls, cpuUtilizationNumber=cpuUtilizationNumber, iScsiTargetLogicalUnitTable=iScsiTargetLogicalUnitTable, enclosurePSURackIndex=enclosurePSURackIndex, cpuUtilizationEntry=cpuUtilizationEntry, protocolXferStatsBytesRead=protocolXferStatsBytesRead, ntCancelCalls=ntCancelCalls, shareMaxUsers=shareMaxUsers, nameService=nameService, nfsGroupID=nfsGroupID, pathConf3=pathConf3, snapshotSchedulesDateTimeSpec=snapshotSchedulesDateTimeSpec, sictrlMaxSessions=sictrlMaxSessions, nameServiceEntry=nameServiceEntry, smtpUndisclosedRecipNumber=smtpUndisclosedRecipNumber, fcStatsTable=fcStatsTable)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", ethernetEvFIFOMaxEvents=ethernetEvFIFOMaxEvents, fsStatsFsId=fsStatsFsId, secureWebTotalFramesRX=secureWebTotalFramesRX, ftpServiceEnabled=ftpServiceEnabled, ulogoffXCalls=ulogoffXCalls, nfsV3remove=nfsV3remove, httpStatusServiceUnavailable=httpStatusServiceUnavailable, puStatusTable=puStatusTable, metaDataCacheStatsNumber=metaDataCacheStatsNumber, httpStatusServerError=httpStatusServerError, mgmntStats=mgmntStats, fcStatsDiscardedFrameErrors=fcStatsDiscardedFrameErrors, clustering=clustering, fileSysUpdateLastAccess=fileSysUpdateLastAccess, nisEnabled=nisEnabled, metaDataCacheStatsTable=metaDataCacheStatsTable, tcpIPInInvHdrPkts=tcpIPInInvHdrPkts, telnetTotalBytesTX=telnetTotalBytesTX, nfsGroupMappingUnixGroupID=nfsGroupMappingUnixGroupID, fsCapacityTotalLower=fsCapacityTotalLower, nfsV3mkNod=nfsV3mkNod, eventLogText=eventLogText, tapeDriveIndex=tapeDriveIndex, sectorCacheDirtyPageTimeout=sectorCacheDirtyPageTimeout, dskattrCalls=dskattrCalls, secureWebAccessEnabled=secureWebAccessEnabled, sysDriveCapacity=sysDriveCapacity, snmpInfoFreq=snmpInfoFreq, winRecipNumber=winRecipNumber, tcpInSegments=tcpInSegments, raidControllerConfigDRAMSize=raidControllerConfigDRAMSize, cifsDskattrCalls=cifsDskattrCalls, winAlertConfig=winAlertConfig, blueArcServer=blueArcServer, fcStatsProtocolErrors=fcStatsProtocolErrors, winRecipIndex=winRecipIndex, verModMTDSLastPass=verModMTDSLastPass, enclosureTemperatureTempC=enclosureTemperatureTempC, nisUserGroupTimeout=nisUserGroupTimeout, secureWebAccessRestrictedHost=secureWebAccessRestrictedHost, rackNumber=rackNumber, puCurrentStatusChangeBattery=puCurrentStatusChangeBattery, nfsV3lookupCalls=nfsV3lookupCalls, enclosureTemperatureEnclosureIndex=enclosureTemperatureEnclosureIndex, volumeEnterpriseVirtualServer=volumeEnterpriseVirtualServer, nisCurrentMaster=nisCurrentMaster, raidControllerWWN=raidControllerWWN, fcLossSignalErrs=fcLossSignalErrs, fcIOStatusResubs=fcIOStatusResubs, nfsV2setAttrCalls=nfsV2setAttrCalls, nfsGroupMapping=nfsGroupMapping, nisVerificationEnabled=nisVerificationEnabled, snmpRecipEntry=snmpRecipEntry, nisDomain=nisDomain, puCurrentStatusManufactureDate=puCurrentStatusManufactureDate, puStatisticsOutputVoltage=puStatisticsOutputVoltage, nfsExportsEntry=nfsExportsEntry, createCalls=createCalls, puStatsOutputVoltage=puStatsOutputVoltage, automountWWN=automountWWN, httpLogRecordsPerFile=httpLogRecordsPerFile, ftpMountWWN=ftpMountWWN, fcStatisticsEntry=fcStatisticsEntry, enclosureTemperatureTempIndex=enclosureTemperatureTempIndex, server=server, puStatisticsIndex=puStatisticsIndex, sysDriveNumber=sysDriveNumber, physicalDriveRowIndex=physicalDriveRowIndex, raidControllerActiveTaskLUN=raidControllerActiveTaskLUN, sectorCacheStatsHitsPSI=sectorCacheStatsHitsPSI, raidControllerBatteryBackupSecondWarning=raidControllerBatteryBackupSecondWarning, httpIncrTimeOut=httpIncrTimeOut, webTotalFramesTX=webTotalFramesTX, nfsUserMappingNtUserName=nfsUserMappingNtUserName, snapshotSchedulesIndex=snapshotSchedulesIndex, enclosurePSUEntry=enclosurePSUEntry, fileSystemTierStatsTable=fileSystemTierStatsTable, nfsV2StatsTable=nfsV2StatsTable, fanNumber=fanNumber, puStatisticsTable=puStatisticsTable, sensorSpeedStatus=sensorSpeedStatus, rename3=rename3, cifsChkpthCalls=cifsChkpthCalls, cifsService=cifsService, raidControllerBatteryBackupFastCharging=raidControllerBatteryBackupFastCharging, atJobMailList=atJobMailList, fcRequests=fcRequests, nvramPoolStatsSize=nvramPoolStatsSize, psuIndex=psuIndex, fcPeakInRate=fcPeakInRate, serverDate=serverDate, winRecipTable=winRecipTable, nfsExportsTable=nfsExportsTable, iScsiTargetName=iScsiTargetName, smtpUndisclosedRecipEntry=smtpUndisclosedRecipEntry, mkdir3=mkdir3, ftpSecurity=ftpSecurity, licenseHTTPService=licenseHTTPService, tcpMaxOpenConns=tcpMaxOpenConns, tcpSSRestartDoubleMSS=tcpSSRestartDoubleMSS, physicalDriveTable=physicalDriveTable, nfsV2writeCache=nfsV2writeCache, clusterVNodeId=clusterVNodeId, mkDir2=mkDir2, nfsV3read=nfsV3read, sysDriveIndex=sysDriveIndex, iScsiServiceEnabled=iScsiServiceEnabled, nfsVersion3=nfsVersion3, ethernetStatisticsTable=ethernetStatisticsTable, snmpRecipIndex=snmpRecipIndex, securityDomain=securityDomain, rackTable=rackTable, snapshotSchedulesTable=snapshotSchedulesTable, automount=automount, puStatisticsLoad=puStatisticsLoad, powerUnits=powerUnits, fileSystemStatsTable=fileSystemStatsTable, sectorCacheStatsHitsSSI=sectorCacheStatsHitsSSI, verModBuildState=verModBuildState, nfsV3fsStat=nfsV3fsStat, physicalDriveEnclosureIndex=physicalDriveEnclosureIndex, webTotalSessions=webTotalSessions, webMgmntStats=webMgmntStats, puCurrentStatusLowBatteryInterval=puCurrentStatusLowBatteryInterval, PYSNMP_MODULE_ID=blueArcServer, secureWebAccessPortNumber=secureWebAccessPortNumber, spanTierCapacityTotalUpper=spanTierCapacityTotalUpper, findCloseCalls=findCloseCalls, fcPeakOutRate=fcPeakOutRate, iScsiParameterIsBoolean=iScsiParameterIsBoolean, fanSpeed=fanSpeed, fileSysTransactionLogging=fileSysTransactionLogging, totalRetransmits=totalRetransmits, telnetMaxSessions=telnetMaxSessions, nisServerPriority=nisServerPriority, link3=link3, cifsMkdirCalls=cifsMkdirCalls, udpStatisticsTable=udpStatisticsTable, raidControllerConfigRebuildRate=raidControllerConfigRebuildRate, httpLogVolumeLUN=httpLogVolumeLUN, nisServerBroadcastEnabled=nisServerBroadcastEnabled, fanTable=fanTable, fanFittedStatus=fanFittedStatus, cnsRetransmits=cnsRetransmits, iScsiTargetTable=iScsiTargetTable, fcRXEOFErrors=fcRXEOFErrors, telnetMgmntStats=telnetMgmntStats, cifsSharePath=cifsSharePath, puStatusLowerTransferVoltage=puStatusLowerTransferVoltage, httpStatusNotFound=httpStatusNotFound, ntpServerHost=ntpServerHost, ethernetCRCErrs=ethernetCRCErrs, puCurrentStatusOnBattery=puCurrentStatusOnBattery, cifsShareComment=cifsShareComment, cifsTransCalls=cifsTransCalls, httpStatusPreconFailed=httpStatusPreconFailed, clusterQuorumDeviceName=clusterQuorumDeviceName, snapshotRuleQueueSize=snapshotRuleQueueSize, cifsStatsClusterNode=cifsStatsClusterNode, sectorCacheStatsMissesPSI=sectorCacheStatsMissesPSI, hwFlowEntry=hwFlowEntry, nfsExportPartitionID=nfsExportPartitionID, fcBadRXCharErrors=fcBadRXCharErrors, tcpArpCacheTimeout=tcpArpCacheTimeout, nfsExportsPath=nfsExportsPath, ftpAuditLogVolumeLUN=ftpAuditLogVolumeLUN, snmpAccessRestricted=snmpAccessRestricted, fsStatsTable=fsStatsTable, licenseIndex=licenseIndex, renameCalls=renameCalls, snapshotRulePartitionID=snapshotRulePartitionID, verinfoHw=verinfoHw, iScsiLogicalUnitTable=iScsiLogicalUnitTable, iScsiLUInitialized=iScsiLUInitialized, serverTime=serverTime, nfsUserEntry=nfsUserEntry, memberListVolumePartitionID=memberListVolumePartitionID, clusterVNodeHostedBy=clusterVNodeHostedBy, ftpAuditLogging=ftpAuditLogging, sensorTempStatus=sensorTempStatus, systemDrives=systemDrives, volumeTable=volumeTable, readCount=readCount, fsPermId=fsPermId, webRejectedSessions=webRejectedSessions, snmpSevFreq=snmpSevFreq, ftpTimeout=ftpTimeout, cronJobAccessLevel=cronJobAccessLevel, puConfigurationEntry=puConfigurationEntry, webAccessMaxConnections=webAccessMaxConnections, ftpTotalFtpCommands=ftpTotalFtpCommands, fcInstantaneousInRate=fcInstantaneousInRate, nameServiceNumber=nameServiceNumber, nfsV3setAttrCalls=nfsV3setAttrCalls, fpgaUtilization=fpgaUtilization, iScsiParameterEVS=iScsiParameterEVS, metaDataCache=metaDataCache, puConfigurationUserName=puConfigurationUserName, fcCacheMisses=fcCacheMisses, telnetAccessRestricted=telnetAccessRestricted, subComponentType=subComponentType, telnetAccessRestrictedHost=telnetAccessRestrictedHost, webTotalFramesRX=webTotalFramesRX, volumeSysDriveIndex=volumeSysDriveIndex, nisTimeout=nisTimeout, nfsV3link=nfsV3link, ndmpSnapshotOptions=ndmpSnapshotOptions, rackEntry=rackEntry, fileSystemStats=fileSystemStats, snapshotRulesTable=snapshotRulesTable, nfsUserName=nfsUserName, snmpAgent=snmpAgent, iScsiLUEvs=iScsiLUEvs, httpMimeMapEntry=httpMimeMapEntry, cifsSetatrCalls=cifsSetatrCalls, cronJobTable=cronJobTable, puCurrentStatusSerialNumber=puCurrentStatusSerialNumber, failoverConfigStatus=failoverConfigStatus, fcBadCRCErrs=fcBadCRCErrs, volumePartitionID=volumePartitionID, tcpIPRxInvalidSrcAddrPkts=tcpIPRxInvalidSrcAddrPkts, rename2=rename2, enclosureFanRackIndex=enclosureFanRackIndex, shareTable=shareTable, physicalDriveStatus=physicalDriveStatus, secureWebMgmntStats=secureWebMgmntStats, telnetRejectedSessions=telnetRejectedSessions, autoChangerDeviceName=autoChangerDeviceName, temperatureSensorEntry=temperatureSensorEntry, httpRoot=httpRoot, snapshotScheduleNumber=snapshotScheduleNumber, puConfigurationCommsOK=puConfigurationCommsOK, cifsCreateCalls=cifsCreateCalls, tdisCalls=tdisCalls, symLink2=symLink2, ethCRCErrs=ethCRCErrs, httpPostRequests=httpPostRequests, smtpRecipIndex=smtpRecipIndex, cifsNTcreateXCalls=cifsNTcreateXCalls, iScsiLUComment=iScsiLUComment, spanTierStatsSpanId=spanTierStatsSpanId, licenseKeyValid=licenseKeyValid, nsOrder=nsOrder, ntTranssCalls=ntTranssCalls, nfsGroupMappingNtGroupDomainName=nfsGroupMappingNtGroupDomainName, enclosureTemperatureRackIndex=enclosureTemperatureRackIndex, nfsUserMappingUnixUserName=nfsUserMappingUnixUserName, cifsFlushCalls=cifsFlushCalls, fsCapacityUsedLower=fsCapacityUsedLower, clusterPNodeEntry=clusterPNodeEntry, raidControllerConfigMemAccess=raidControllerConfigMemAccess, ftp=ftp, mailAlertConfig=mailAlertConfig, raidControllerActiveTaskIndex=raidControllerActiveTaskIndex)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", tcpOffSubnetMTU=tcpOffSubnetMTU, nfsExportTable=nfsExportTable, sictrlAccessMaxConnections=sictrlAccessMaxConnections, nfsExportsDeviceId=nfsExportsDeviceId, iScsiTargetEntry=iScsiTargetEntry, tcpIPInInvPkts=tcpIPInInvPkts, ftpAuditLogVolumePartitionID=ftpAuditLogVolumePartitionID, winInfoFreq=winInfoFreq, tcpOutSegments=tcpOutSegments, httpConnsRefused=httpConnsRefused, raidControllerBatteryBackupTable=raidControllerBatteryBackupTable, httpServiceEnabled=httpServiceEnabled, sysDriveEntry=sysDriveEntry, nfsV2link=nfsV2link, httpMimeMapIndex=httpMimeMapIndex, puCurrentStatusSleeping=puCurrentStatusSleeping, licenseFTPService=licenseFTPService, enclosurePSUStatus=enclosurePSUStatus, virtualVolumeHardLimitEnabled=virtualVolumeHardLimitEnabled, snapshotRuleEntry=snapshotRuleEntry, smtpRecipientIndex=smtpRecipientIndex, dnsSearchNumber=dnsSearchNumber, readCalls=readCalls, fcStatsBadCRCErrors=fcStatsBadCRCErrors, telnetTotalBytesRX=telnetTotalBytesRX, cpuUtilizationTable=cpuUtilizationTable, snapshotRuleTable=snapshotRuleTable, ethInPackets=ethInPackets, sectorCacheStatsEntry=sectorCacheStatsEntry, puStatusSensitivity=puStatusSensitivity, psuTable=psuTable, spanLabel=spanLabel, fcInstOutRate=fcInstOutRate, sictrl=sictrl, cifsStatsEntry=cifsStatsEntry, puStatisticsLineMaximumVoltage=puStatisticsLineMaximumVoltage, clusterVNodeNumber=clusterVNodeNumber, enclosureFanSpeed=enclosureFanSpeed, snapshot=snapshot, sictrlAccessPortNumber=sictrlAccessPortNumber, ndmpAutoSnapMaxRetention=ndmpAutoSnapMaxRetention, lcd=lcd, spanStats=spanStats, raidControllerBatteryBackupRackIndex=raidControllerBatteryBackupRackIndex, fpgaUtilizationFpgaName=fpgaUtilizationFpgaName, nfsExportIndex=nfsExportIndex, sectorCacheType=sectorCacheType, tcpUDPCheckSumGen=tcpUDPCheckSumGen, winRecipName=winRecipName, nfsV2symLink=nfsV2symLink, sysDriveCacheMode=sysDriveCacheMode, nfsMounts=nfsMounts, failoverSecondaryStatus=failoverSecondaryStatus, fanIndex=fanIndex, tcpSlowStartCA=tcpSlowStartCA, clusterName=clusterName, puConfigurationIndex=puConfigurationIndex, ftpUserTable=ftpUserTable, fcLossSyncErrors=fcLossSyncErrors, ethernetTotalBytes=ethernetTotalBytes, ethEvFIFOMaxEvents=ethEvFIFOMaxEvents, puStatsLineMaximumVoltage=puStatsLineMaximumVoltage, systemUserEntry=systemUserEntry, clusterStats=clusterStats, fsTierStatsEntry=fsTierStatsEntry, webTotalBytesTX=webTotalBytesTX, fibreChannelInterfaceNumber=fibreChannelInterfaceNumber, httpDecrTimeOut=httpDecrTimeOut, cifsLockingXCalls=cifsLockingXCalls, nfsV3pathConf=nfsV3pathConf, licenseKeyIndex=licenseKeyIndex, raidControllerConfigLogicalSectorSize=raidControllerConfigLogicalSectorSize, nfsV2mkDir=nfsV2mkDir, tcpIPInInvChksumPkts=tcpIPInInvChksumPkts, enclosureTemperatureNumber=enclosureTemperatureNumber, nfsStats=nfsStats, iScsiParameterValue=iScsiParameterValue, puStatsTable=puStatsTable, nfsUserID=nfsUserID, snmpAccessRestrictedEntry=snmpAccessRestrictedEntry, nfsGroups=nfsGroups, rackNumberOfEnclosures=rackNumberOfEnclosures, cifsNTtransCalls=cifsNTtransCalls, snmpRecipTable=snmpRecipTable, smtpAddr=smtpAddr, intraClusterPortErrorTable=intraClusterPortErrorTable, httpMimeMapNumber=httpMimeMapNumber, nvramFsStatsCheckpoints=nvramFsStatsCheckpoints, ftpMountTable=ftpMountTable, readDir3=readDir3, fcStatsClusterNode=fcStatsClusterNode, raidControllerConfigNVRSize=raidControllerConfigNVRSize, secureWebTotalFramesTX=secureWebTotalFramesTX, verModSerial=verModSerial, fileSystemStatsNumber=fileSystemStatsNumber, mirroringRetransmits=mirroringRetransmits, raidControllerConfigFirmwareMajor=raidControllerConfigFirmwareMajor, enclosureAlarmTable=enclosureAlarmTable, iScsiLUDeviceId=iScsiLUDeviceId, getAttr3Calls=getAttr3Calls, fcLinkFailErrors=fcLinkFailErrors, fileSystemLoadClient=fileSystemLoadClient, sectorCacheStatsMissesTotal=sectorCacheStatsMissesTotal, ndmpAutoSnapDeleteMode=ndmpAutoSnapDeleteMode, udpInInvChksumPkts=udpInInvChksumPkts, closeCalls=closeCalls, read3=read3, memberListEntry=memberListEntry, tcpOffSubnetSlowStart=tcpOffSubnetSlowStart, sharePath=sharePath, ftpUserMountPoint=ftpUserMountPoint, systemUsers=systemUsers, puStatsLoad=puStatsLoad, failoverPrimaryIpAddr=failoverPrimaryIpAddr, null2Calls=null2Calls, fcResponses=fcResponses, puConfigurationShutdownOnBattery=puConfigurationShutdownOnBattery, shareAccessIndex=shareAccessIndex, automountPartitionIndex=automountPartitionIndex, ftpBytesTotalXferOut=ftpBytesTotalXferOut, metaDataCacheStatsEntry=metaDataCacheStatsEntry, fcPkInRate=fcPkInRate, racks=racks, webAccessRestrictedHost=webAccessRestrictedHost, systemDriveStatsEntry=systemDriveStatsEntry, enclosureFanFanIndex=enclosureFanFanIndex, secureWebAccessRestrictedEntry=secureWebAccessRestrictedEntry, verModMTDSPasses=verModMTDSPasses, iScsiGloballyUniqueName=iScsiGloballyUniqueName, lcdFrontPanelLocked=lcdFrontPanelLocked, udpRxInvChksumPkts=udpRxInvChksumPkts, rmDir3=rmDir3, winsPrimaryIpAddr=winsPrimaryIpAddr, fsTierCapacityTotalLower=fsTierCapacityTotalLower, spanTierCapacityUsedLower=spanTierCapacityUsedLower, ftpAuditLogDirectory=ftpAuditLogDirectory, sensorEntry=sensorEntry, snmpRecipName=snmpRecipName, httpLogVolumePartitionID=httpLogVolumePartitionID, winsSecondaryIpAddr=winsSecondaryIpAddr, iSNSTable=iSNSTable, nfsV2read=nfsV2read, ethernetOutBytes=ethernetOutBytes, ntCreateXCalls=ntCreateXCalls, sensorNumber=sensorNumber, secureWeb=secureWeb, nfsV3create=nfsV3create, physicalDriveNumber=physicalDriveNumber, write2=write2, tcpipStats=tcpipStats, snapshotRulesVolumeLabel=snapshotRulesVolumeLabel, smtpRecipientName=smtpRecipientName, cifsWriteXCalls=cifsWriteXCalls, fileSystemLoadSystem=fileSystemLoadSystem, fcInstantaneousOutRate=fcInstantaneousOutRate, telnetAccessEnabled=telnetAccessEnabled, nfs=nfs, nfsV2rename=nfsV2rename, raidControllerActiveTaskNumber=raidControllerActiveTaskNumber, commit3=commit3, puStatisticsEntry=puStatisticsEntry, httpProduct=httpProduct, snapshotRulesEVS=snapshotRulesEVS, eventLogTimeStamp=eventLogTimeStamp, ftpService=ftpService, puCurrentStatusEntry=puCurrentStatusEntry, licenseKeyString=licenseKeyString, puStatusManufactureDate=puStatusManufactureDate, dnsServerIpAddress=dnsServerIpAddress, chkpthCalls=chkpthCalls, ndmpCurrentStatus=ndmpCurrentStatus, fcDiscardedFrameErrs=fcDiscardedFrameErrs, nvramFsStatsTable=nvramFsStatsTable, nfsUserMappingUnixUserID=nfsUserMappingUnixUserID, singleBufferWriteCount=singleBufferWriteCount, clusterVNodeStatus=clusterVNodeStatus, nfsV2nullCalls=nfsV2nullCalls, raidControllerConfigRackIndex=raidControllerConfigRackIndex, telnetCurrActiveSessions=telnetCurrActiveSessions, hwFlowIndex=hwFlowIndex, serialNumberTable=serialNumberTable, eventLogNumber=eventLogNumber, nfsV2remove=nfsV2remove, tcpReOutSegments=tcpReOutSegments, httpGetRequests=httpGetRequests, clusterPNodeTable=clusterPNodeTable, write3=write3, enclosureFanNumber=enclosureFanNumber, rackIndex=rackIndex, iScsiParameterEntry=iScsiParameterEntry, httpOpenConnections=httpOpenConnections, ftpMountPartitionID=ftpMountPartitionID, fcCacheHits=fcCacheHits, protocolStatsEntry=protocolStatsEntry, enclosurePSUTable=enclosurePSUTable, volumeFreeCapacity=volumeFreeCapacity, fcStatsSignalLossErrors=fcStatsSignalLossErrors, tcpIPRxInvalidHdrPkts=tcpIPRxInvalidHdrPkts, ntpServerEntry=ntpServerEntry, httpHostVolumePartitionID=httpHostVolumePartitionID, mkNod3=mkNod3, nvramFsStatsActivityCheckpoints=nvramFsStatsActivityCheckpoints, clusterVNodeAdmin=clusterVNodeAdmin, cpuUtilization=cpuUtilization, componentType=componentType, secureWebRejectedSessions=secureWebRejectedSessions, failoverSystemIpAddr=failoverSystemIpAddr, nfsExportNumber=nfsExportNumber, writeCloseCalls=writeCloseCalls, iScsiStatisticsValue=iScsiStatisticsValue, ntpServerNumber=ntpServerNumber, iScsiLogicalUnitEntry=iScsiLogicalUnitEntry, puStatusNumber=puStatusNumber, telnet=telnet, shareName=shareName, fsTierCapacityTotalUpper=fsTierCapacityTotalUpper, ethOutTwoCollision=ethOutTwoCollision, dnsSearchTable=dnsSearchTable, nfsUserMappingTable=nfsUserMappingTable, nfsV3StatsEntry=nfsV3StatsEntry, eventLogHandle=eventLogHandle, create3=create3, tcpIPRxInvalidOptionPkts=tcpIPRxInvalidOptionPkts, raidControllerConfigMaximumCommands=raidControllerConfigMaximumCommands, tcpIgnoreICMPEcho=tcpIgnoreICMPEcho, tapeDriveLocation=tapeDriveLocation, cifsTdisCalls=cifsTdisCalls, systemDriveStats=systemDriveStats, ethTotalBytes=ethTotalBytes, smtpUndisclosedRecipName=smtpUndisclosedRecipName, ftpAuditLogVolumeWWN=ftpAuditLogVolumeWWN, enclosurePSUPSUIndex=enclosurePSUPSUIndex, nvramFsStatsWaitedAllocs=nvramFsStatsWaitedAllocs, spanStatsSpanId=spanStatsSpanId, sensorSpeedReading=sensorSpeedReading, tcpRxInvalidChksumPkts=tcpRxInvalidChksumPkts, ntpServerTable=ntpServerTable, tapeDriveTable=tapeDriveTable, nfsV2StatsClusterNode=nfsV2StatsClusterNode, raidControllerConfigPhysicalSectorSize=raidControllerConfigPhysicalSectorSize, fsTier=fsTier, cifsUnlinkCalls=cifsUnlinkCalls, sysDriveTable=sysDriveTable, telnetTotalFramesRX=telnetTotalFramesRX, dnsSearchIndex=dnsSearchIndex, psuTwoStatus=psuTwoStatus, tcpStatisticsEntry=tcpStatisticsEntry, raidControllerBatteryBackupNoSync=raidControllerBatteryBackupNoSync, puConfigTable=puConfigTable, psuEntry=psuEntry, winRecipEntry=winRecipEntry, puCurrentStatusSensitivity=puCurrentStatusSensitivity, smtpRecipName=smtpRecipName, puStatisticsRemainingRunTime=puStatisticsRemainingRunTime)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", puStatisticsCount=puStatisticsCount, httpMaximalLogging=httpMaximalLogging, licenseService=licenseService, autoChangerSerialNumber=autoChangerSerialNumber, secureWebTotalSessions=secureWebTotalSessions, intraClusterPortErrsCnId=intraClusterPortErrsCnId, tcpAllSubnetsMTU=tcpAllSubnetsMTU, cifsTconXCalls=cifsTconXCalls, tcpNagle=tcpNagle, cache=cache, cifsWriteCloseCalls=cifsWriteCloseCalls, spanTierCapacityUsedUpper=spanTierCapacityUsedUpper, cpuIndex=cpuIndex, raidControllerEntry=raidControllerEntry, nisServerIpAddress=nisServerIpAddress, physicalDriveRackIndex=physicalDriveRackIndex, raidControllerConfigFirmwareType=raidControllerConfigFirmwareType, webAccessRestrictedNumber=webAccessRestrictedNumber, pausedOffTime=pausedOffTime, ftpMountEntry=ftpMountEntry, puStatisticsTemperatureC=puStatisticsTemperatureC, volumeStatus=volumeStatus, fcStatsBadRXCharErrors=fcStatsBadRXCharErrors, puStatusSerialNumber=puStatusSerialNumber, winSevFreq=winSevFreq, shareAccessTable=shareAccessTable, writeXCalls=writeXCalls, autoChangerNumber=autoChangerNumber, nfsExportsEvs=nfsExportsEvs, licenseEntry=licenseEntry, cifsSessSetupXCalls=cifsSessSetupXCalls, licenseKeyEntry=licenseKeyEntry, virtualVolumeNumber=virtualVolumeNumber, tcpIntelliSeg=tcpIntelliSeg, nfsExportLUN=nfsExportLUN, snmpTrapHostTable=snmpTrapHostTable, httpMimeMapExtension=httpMimeMapExtension, verModUniq0=verModUniq0, snapshotSchedulesEVS=snapshotSchedulesEVS, sectorCacheStatsHitsTotal=sectorCacheStatsHitsTotal, snmpWarnFreq=snmpWarnFreq, fcStatsInterfaceLinkType=fcStatsInterfaceLinkType, protStatsFsId=protStatsFsId, fcWriteReqs=fcWriteReqs, remove2=remove2, telnetAccessRestrictedTable=telnetAccessRestrictedTable, nfsServiceMaxUsers=nfsServiceMaxUsers, cifsReadXCalls=cifsReadXCalls, fsTierStatsFsId=fsTierStatsFsId, setAttr3Calls=setAttr3Calls, shareAccessEntry=shareAccessEntry, nfsV3mkdir=nfsV3mkdir, volumeNumber=volumeNumber, secureWebTotalBytesTX=secureWebTotalBytesTX, winCritFreq=winCritFreq, puConfigurationCommsEverOK=puConfigurationCommsEverOK, virtualVolumeQuotaPercentageUsed=virtualVolumeQuotaPercentageUsed, telnetTotalFramesTX=telnetTotalFramesTX, fcStatisticsTable=fcStatisticsTable, smtpRecipientTable=smtpRecipientTable, temperatureSensorIndex=temperatureSensorIndex, dnsServerIndex=dnsServerIndex, automountEntry=automountEntry, tcpTotalOpenConns=tcpTotalOpenConns, http=http, fsId=fsId, tcpSillyWindowAvoid=tcpSillyWindowAvoid, ftpMountPoints=ftpMountPoints, puConfigurationTable=puConfigurationTable, automountLUN=automountLUN, controllers=controllers, nfsV2write=nfsV2write, protocolXferStatsFsLabel=protocolXferStatsFsLabel, rackStatus=rackStatus, cifs=cifs, sectorCacheStatsTable=sectorCacheStatsTable, puStatisticsLineMininumVoltage=puStatisticsLineMininumVoltage, puCurrentStatusSmartTrim=puCurrentStatusSmartTrim, atJobIndex=atJobIndex, ftpAuditMaximumLogFiles=ftpAuditMaximumLogFiles, raidControllerBatteryBackupChargePercent=raidControllerBatteryBackupChargePercent, virtualVolumeLabel=virtualVolumeLabel, fsWriteSmoothing=fsWriteSmoothing, ftpTotalFtpReplies=ftpTotalFtpReplies, ethInFIFODrops=ethInFIFODrops, tapeDriveAutoChangerIndex=tapeDriveAutoChangerIndex, nvramFsStatsCurrentUsage=nvramFsStatsCurrentUsage, tcpDefWnd=tcpDefWnd, iScsiStatistics=iScsiStatistics, ethernetInFIFODrops=ethernetInFIFODrops, tcpLinkPacketDrops=tcpLinkPacketDrops, udpStatisticsEntry=udpStatisticsEntry, openCalls=openCalls, tcpKeepAlive=tcpKeepAlive, puConfigShutdownRemainingLife=puConfigShutdownRemainingLife, fileSysCacheTimeout=fileSysCacheTimeout, cifsStats=cifsStats, enclosureTemperatureStatus=enclosureTemperatureStatus, nis=nis, serialNumbers=serialNumbers, cifsShareEntry=cifsShareEntry, licenseKey=licenseKey, snapshotScheduleDateTimeSpec=snapshotScheduleDateTimeSpec, httpMimeMapTable=httpMimeMapTable, iScsiParameterName=iScsiParameterName, raidControllerBatteryBackupEntry=raidControllerBatteryBackupEntry, webAccessPortNumber=webAccessPortNumber, nfsExportEntry=nfsExportEntry, sectorCacheStatsMissesSSI=sectorCacheStatsMissesSSI, hwFlowDebug=hwFlowDebug, verModFirstDate=verModFirstDate, atJobNumber=atJobNumber, puStatusIndex=puStatusIndex, nisRebindInterval=nisRebindInterval, autoChangerTable=autoChangerTable)
