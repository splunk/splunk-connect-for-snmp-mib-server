#
# PySNMP MIB module SFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SFLOW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:03:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
enterprises, Integer32, Gauge32, TimeTicks, IpAddress, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, NotificationType, ObjectIdentity, Bits, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "Gauge32", "TimeTicks", "IpAddress", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Bits", "Unsigned32", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
sFlowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 36))
if mibBuilder.loadTexts: sFlowMIB.setLastUpdated('0810300000Z')
if mibBuilder.loadTexts: sFlowMIB.setOrganization('D-Link Corp.')
sFlowAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 36, 1))
class SFlowDataSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class SFlowReceiver(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4)

sFlowVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 1), SnmpAdminString().clone('1.00')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFlowVersion.setStatus('current')
sFlowAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFlowAgentAddress.setStatus('current')
sFlowAgentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowAgentState.setStatus('current')
sFlowRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4), )
if mibBuilder.loadTexts: sFlowRcvrTable.setStatus('current')
sFlowRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1), ).setIndexNames((0, "SFLOW-MIB", "sFlowRcvrIndex"), (0, "SFLOW-MIB", "sFlowRcvrOwner"))
if mibBuilder.loadTexts: sFlowRcvrEntry.setStatus('current')
sFlowRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: sFlowRcvrIndex.setStatus('current')
sFlowRcvrOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: sFlowRcvrOwner.setStatus('current')
sFlowRcvrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowRcvrTimeout.setStatus('current')
sFlowRcvrMaximumDatagramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1400)).clone(1400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowRcvrMaximumDatagramSize.setStatus('current')
sFlowRcvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowRcvrAddress.setStatus('current')
sFlowRcvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(6343)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowRcvrPort.setStatus('current')
sFlowRcvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sFlowRcvrRowStatus.setStatus('current')
sFlowFsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5), )
if mibBuilder.loadTexts: sFlowFsTable.setStatus('current')
sFlowFsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5, 1), ).setIndexNames((0, "SFLOW-MIB", "sFlowFsDataSource"), (0, "SFLOW-MIB", "sFlowFsReceiver"))
if mibBuilder.loadTexts: sFlowFsEntry.setStatus('current')
sFlowFsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5, 1, 1), SFlowDataSource())
if mibBuilder.loadTexts: sFlowFsDataSource.setStatus('current')
sFlowFsReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5, 1, 3), SFlowReceiver())
if mibBuilder.loadTexts: sFlowFsReceiver.setStatus('current')
sFlowFsPacketSamplingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowFsPacketSamplingRate.setStatus('current')
sFlowFsMaximumHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 256)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowFsMaximumHeaderSize.setStatus('current')
sFlowFsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sFlowFsRowStatus.setStatus('current')
sFlowCpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 6), )
if mibBuilder.loadTexts: sFlowCpTable.setStatus('current')
sFlowCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 6, 1), ).setIndexNames((0, "SFLOW-MIB", "sFlowCpDataSource"), (0, "SFLOW-MIB", "sFlowCpReceiver"))
if mibBuilder.loadTexts: sFlowCpEntry.setStatus('current')
sFlowCpDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 6, 1, 1), SFlowDataSource())
if mibBuilder.loadTexts: sFlowCpDataSource.setStatus('current')
sFlowCpReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 6, 1, 3), SFlowReceiver())
if mibBuilder.loadTexts: sFlowCpReceiver.setStatus('current')
sFlowCpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sFlowCpInterval.setStatus('current')
sFlowCpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 36, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sFlowCpRowStatus.setStatus('current')
mibBuilder.exportSymbols("SFLOW-MIB", sFlowCpReceiver=sFlowCpReceiver, sFlowRcvrOwner=sFlowRcvrOwner, sFlowFsRowStatus=sFlowFsRowStatus, sFlowCpTable=sFlowCpTable, SFlowReceiver=SFlowReceiver, sFlowFsTable=sFlowFsTable, sFlowVersion=sFlowVersion, sFlowMIB=sFlowMIB, sFlowCpInterval=sFlowCpInterval, sFlowFsMaximumHeaderSize=sFlowFsMaximumHeaderSize, sFlowFsPacketSamplingRate=sFlowFsPacketSamplingRate, SFlowDataSource=SFlowDataSource, sFlowRcvrIndex=sFlowRcvrIndex, sFlowAgent=sFlowAgent, sFlowFsDataSource=sFlowFsDataSource, sFlowFsReceiver=sFlowFsReceiver, sFlowCpEntry=sFlowCpEntry, sFlowCpDataSource=sFlowCpDataSource, sFlowRcvrPort=sFlowRcvrPort, sFlowFsEntry=sFlowFsEntry, sFlowRcvrRowStatus=sFlowRcvrRowStatus, sFlowRcvrTimeout=sFlowRcvrTimeout, PYSNMP_MODULE_ID=sFlowMIB, sFlowRcvrEntry=sFlowRcvrEntry, sFlowAgentState=sFlowAgentState, sFlowCpRowStatus=sFlowCpRowStatus, sFlowAgentAddress=sFlowAgentAddress, sFlowRcvrAddress=sFlowRcvrAddress, sFlowRcvrMaximumDatagramSize=sFlowRcvrMaximumDatagramSize, sFlowRcvrTable=sFlowRcvrTable)
