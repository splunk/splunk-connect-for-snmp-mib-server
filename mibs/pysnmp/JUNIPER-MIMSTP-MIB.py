#
# PySNMP MIB module JUNIPER-MIMSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-MIMSTP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:49:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
jnxXstpMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxXstpMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Unsigned32, Counter32, ModuleIdentity, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, NotificationType, iso, TimeTicks, Gauge32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "NotificationType", "iso", "TimeTicks", "Gauge32", "enterprises")
TruthValue, MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
jnxMIMstMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1))
jnxMIMstMIB.setRevisions(('2007-05-03 00:00', '2007-05-24 00:00', '2007-12-18 00:00',))
if mibBuilder.loadTexts: jnxMIMstMIB.setLastUpdated('200705030000Z')
if mibBuilder.loadTexts: jnxMIMstMIB.setOrganization('Juniper Networks, Inc.')
class VlanId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

jnxMIDot1sJuniperMst = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1))
jnxMIDot1sJnxMstTrapsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2))
jnxMIDot1sJuniperMstTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3))
jnxMIMstGlobalTrace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGlobalTrace.setStatus('current')
jnxMIMstGlobalDebug = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGlobalDebug.setStatus('current')
jnxMIDot1sJuniperMstTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3), )
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstTable.setStatus('current')
jnxMIDot1sJuniperMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"))
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstEntry.setStatus('current')
jnxMIDot1sJuniperMstContextId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstContextId.setStatus('current')
jnxMIMstSystemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstSystemControl.setStatus('current')
jnxMIMstModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 3), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstModuleStatus.setStatus('current')
jnxMIMstMaxMstInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMaxMstInstanceNumber.setStatus('current')
jnxMIMstNoOfMstiSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstNoOfMstiSupported.setStatus('current')
jnxMIMstMaxHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMaxHopCount.setStatus('current')
jnxMIMstBrgAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstBrgAddress.setStatus('current')
jnxMIMstCistRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRoot.setStatus('current')
jnxMIMstCistRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRegionalRoot.setStatus('current')
jnxMIMstCistRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRootCost.setStatus('current')
jnxMIMstCistRegionalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRegionalRootCost.setStatus('current')
jnxMIMstCistRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRootPort.setStatus('current')
jnxMIMstCistBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgePriority.setStatus('current')
jnxMIMstCistBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeMaxAge.setStatus('current')
jnxMIMstCistBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeForwardDelay.setStatus('current')
jnxMIMstCistHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistHoldTime.setStatus('current')
jnxMIMstCistMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 17), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistMaxAge.setStatus('current')
jnxMIMstCistForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 18), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistForwardDelay.setStatus('current')
jnxMIMstMstpUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstpUpCount.setStatus('current')
jnxMIMstMstpDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstpDownCount.setStatus('current')
jnxMIMstPathCostDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPathCostDefaultType.setStatus('current')
jnxMIMstTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstTrace.setStatus('current')
jnxMIMstDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstDebug.setStatus('current')
jnxMIMstForceProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstForceProtocolVersion.setStatus('current')
jnxMIMstTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstTxHoldCount.setStatus('current')
jnxMIMstMstiConfigIdSel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiConfigIdSel.setStatus('current')
jnxMIMstMstiRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRegionName.setStatus('current')
jnxMIMstMstiRegionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRegionVersion.setStatus('current')
jnxMIMstMstiConfigDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiConfigDigest.setStatus('current')
jnxMIMstBufferOverFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstBufferOverFlowCount.setStatus('current')
jnxMIMstMemAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMemAllocFailureCount.setStatus('current')
jnxMIMstRegionConfigChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstRegionConfigChangeCount.setStatus('current')
jnxMIMstCistBridgeRoleSelectionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeRoleSelectionSemState.setStatus('current')
jnxMIMstCistTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 34), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistTimeSinceTopologyChange.setStatus('current')
jnxMIMstCistTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistTopChanges.setStatus('current')
jnxMIMstCistNewRootBridgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistNewRootBridgeCount.setStatus('current')
jnxMIMstCistHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 37), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistHelloTime.setStatus('current')
jnxMIMstCistBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 38), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeHelloTime.setStatus('current')
jnxMIMstCistDynamicPathcostCalculation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 39), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistDynamicPathcostCalculation.setStatus('current')
jnxMIMstMstiBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4), )
if mibBuilder.loadTexts: jnxMIMstMstiBridgeTable.setStatus('current')
jnxMIMstMstiBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"), (0, "JUNIPER-MIMSTP-MIB", "jnxMIMstMstiInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstMstiBridgeEntry.setStatus('current')
jnxMIMstMstiInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiInstanceIndex.setStatus('current')
jnxMIMstMstiBridgeRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiBridgeRegionalRoot.setStatus('current')
jnxMIMstMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiBridgePriority.setStatus('current')
jnxMIMstMstiRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRootCost.setStatus('current')
jnxMIMstMstiRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRootPort.setStatus('current')
jnxMIMstMstiTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiTimeSinceTopologyChange.setStatus('current')
jnxMIMstMstiTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiTopChanges.setStatus('current')
jnxMIMstMstiNewRootBridgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiNewRootBridgeCount.setStatus('current')
jnxMIMstMstiBridgeRoleSelectionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiBridgeRoleSelectionSemState.setStatus('current')
jnxMIMstInstanceUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceUpCount.setStatus('current')
jnxMIMstInstanceDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceDownCount.setStatus('current')
jnxMIMstOldDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 12), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstOldDesignatedRoot.setStatus('current')
jnxMIMstVlanInstanceMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5), )
if mibBuilder.loadTexts: jnxMIMstVlanInstanceMappingTable.setStatus('current')
jnxMIMstVlanInstanceMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"), (0, "JUNIPER-MIMSTP-MIB", "jnxMIMstInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstVlanInstanceMappingEntry.setStatus('current')
jnxMIMstInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxMIMstInstanceIndex.setStatus('current')
jnxMIMstMapVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMapVlanIndex.setStatus('current')
jnxMIMstUnMapVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstUnMapVlanIndex.setStatus('current')
jnxMIMstSetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstSetVlanList.setStatus('current')
jnxMIMstResetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstResetVlanList.setStatus('current')
jnxMIMstInstanceVlanMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped.setStatus('current')
jnxMIMstInstanceVlanMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped2k.setStatus('current')
jnxMIMstInstanceVlanMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped3k.setStatus('current')
jnxMIMstInstanceVlanMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped4k.setStatus('current')
jnxMIMstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6), )
if mibBuilder.loadTexts: jnxMIMstCistPortTable.setStatus('current')
jnxMIMstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIMstCistPort"))
if mibBuilder.loadTexts: jnxMIMstCistPortEntry.setStatus('current')
jnxMIMstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxMIMstCistPort.setStatus('current')
jnxMIMstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortPathCost.setStatus('current')
jnxMIMstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortPriority.setStatus('current')
jnxMIMstCistPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedRoot.setStatus('current')
jnxMIMstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedBridge.setStatus('current')
jnxMIMstCistPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedPort.setStatus('current')
jnxMIMstCistPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortAdminP2P.setStatus('current')
jnxMIMstCistPortOperP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortOperP2P.setStatus('current')
jnxMIMstCistPortAdminEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortAdminEdgeStatus.setStatus('current')
jnxMIMstCistPortOperEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortOperEdgeStatus.setStatus('current')
jnxMIMstCistPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortProtocolMigration.setStatus('current')
jnxMIMstCistPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortState.setStatus('current')
jnxMIMstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistForcePortState.setStatus('current')
jnxMIMstCistPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortForwardTransitions.setStatus('current')
jnxMIMstCistPortRxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxMstBpduCount.setStatus('current')
jnxMIMstCistPortRxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxRstBpduCount.setStatus('current')
jnxMIMstCistPortRxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxConfigBpduCount.setStatus('current')
jnxMIMstCistPortRxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxTcnBpduCount.setStatus('current')
jnxMIMstCistPortTxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxMstBpduCount.setStatus('current')
jnxMIMstCistPortTxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxRstBpduCount.setStatus('current')
jnxMIMstCistPortTxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxConfigBpduCount.setStatus('current')
jnxMIMstCistPortTxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxTcnBpduCount.setStatus('current')
jnxMIMstCistPortInvalidMstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidMstBpduRxCount.setStatus('current')
jnxMIMstCistPortInvalidRstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidRstBpduRxCount.setStatus('current')
jnxMIMstCistPortInvalidConfigBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidConfigBpduRxCount.setStatus('current')
jnxMIMstCistPortInvalidTcnBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidTcnBpduRxCount.setStatus('current')
jnxMIMstCistPortTransmitSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("transmitinit", 0), ("transmitperiodic", 1), ("transmitconfig", 2), ("transmittcn", 3), ("transmitrstp", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTransmitSemState.setStatus('current')
jnxMIMstCistPortReceiveSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("discard", 0), ("receive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortReceiveSemState.setStatus('current')
jnxMIMstCistPortProtMigrationSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("sendrstp", 1), ("sendingrstp", 2), ("sendstp", 3), ("sendingstp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortProtMigrationSemState.setStatus('current')
jnxMIMstCistProtocolMigrationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistProtocolMigrationCount.setStatus('current')
jnxMIMstCistPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedCost.setStatus('current')
jnxMIMstCistPortRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 32), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRegionalRoot.setStatus('current')
jnxMIMstCistPortRegionalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRegionalPathCost.setStatus('current')
jnxMIMstCistSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistSelectedPortRole.setStatus('current')
jnxMIMstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistCurrentPortRole.setStatus('current')
jnxMIMstCistPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInfoSemState.setStatus('current')
jnxMIMstCistPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRoleTransitionSemState.setStatus('current')
jnxMIMstCistPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortStateTransitionSemState.setStatus('current')
jnxMIMstCistPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTopologyChangeSemState.setStatus('current')
jnxMIMstCistPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 40), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortHelloTime.setStatus('current')
jnxMIMstCistPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortOperVersion.setStatus('current')
jnxMIMstCistPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortEffectivePortState.setStatus('current')
jnxMIMstCistPortAutoEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 43), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortAutoEdgeStatus.setStatus('current')
jnxMIMstMstiPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7), )
if mibBuilder.loadTexts: jnxMIMstMstiPortTable.setStatus('current')
jnxMIMstMstiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPort"), (0, "JUNIPER-MIMSTP-MIB", "jnxMIMstInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstMstiPortEntry.setStatus('current')
jnxMIMstMstiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxMIMstMstiPort.setStatus('current')
jnxMIMstMstiPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortPathCost.setStatus('current')
jnxMIMstMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortPriority.setStatus('current')
jnxMIMstMstiPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedRoot.setStatus('current')
jnxMIMstMstiPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedBridge.setStatus('current')
jnxMIMstMstiPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedPort.setStatus('current')
jnxMIMstMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortState.setStatus('current')
jnxMIMstMstiForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiForcePortState.setStatus('current')
jnxMIMstMstiPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortForwardTransitions.setStatus('current')
jnxMIMstMstiPortReceivedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortReceivedBPDUs.setStatus('current')
jnxMIMstMstiPortTransmittedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortTransmittedBPDUs.setStatus('current')
jnxMIMstMstiPortInvalidBPDUsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortInvalidBPDUsRcvd.setStatus('current')
jnxMIMstMstiPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedCost.setStatus('current')
jnxMIMstMstiSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiSelectedPortRole.setStatus('current')
jnxMIMstMstiCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiCurrentPortRole.setStatus('current')
jnxMIMstMstiPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortInfoSemState.setStatus('current')
jnxMIMstMstiPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortRoleTransitionSemState.setStatus('current')
jnxMIMstMstiPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortStateTransitionSemState.setStatus('current')
jnxMIMstMstiPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortTopologyChangeSemState.setStatus('current')
jnxMIMstMstiPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortEffectivePortState.setStatus('current')
jnxMIMstCistPortProtectTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8), )
if mibBuilder.loadTexts: jnxMIMstCistPortProtectTable.setStatus('current')
jnxMIMstCistPortProtectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1), )
jnxMIMstCistPortEntry.registerAugmentions(("JUNIPER-MIMSTP-MIB", "jnxMIMstCistPortProtectEntry"))
jnxMIMstCistPortProtectEntry.setIndexNames(*jnxMIMstCistPortEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMIMstCistPortProtectEntry.setStatus('current')
jnxMIMstCistPortRootProtectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectEnabled.setStatus('current')
jnxMIMstCistPortRootProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("root-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectState.setStatus('current')
jnxMIMstCistPortLoopProtectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectEnabled.setStatus('current')
jnxMIMstCistPortLoopProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("loop-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectState.setStatus('current')
jnxMIMstMstiPortProtectTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9), )
if mibBuilder.loadTexts: jnxMIMstMstiPortProtectTable.setStatus('current')
jnxMIMstMstiPortProtectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9, 1), )
jnxMIMstMstiPortEntry.registerAugmentions(("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPortProtectEntry"))
jnxMIMstMstiPortProtectEntry.setIndexNames(*jnxMIMstMstiPortEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMIMstMstiPortProtectEntry.setStatus('current')
jnxMIMstMstiPortRootProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("root-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortRootProtectState.setStatus('current')
jnxMIMstMstiPortLoopProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("loop-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortLoopProtectState.setStatus('current')
jnxMIDot1sJnxMstSetGlobalTrapOption = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIDot1sJnxMstSetGlobalTrapOption.setStatus('current')
jnxMIMstGlobalErrTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("memfail", 1), ("bufffail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGlobalErrTrapType.setStatus('current')
jnxMIDot1sJnxMstTrapsControlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3), )
if mibBuilder.loadTexts: jnxMIDot1sJnxMstTrapsControlTable.setStatus('current')
jnxMIDot1sJnxMstTrapsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"))
if mibBuilder.loadTexts: jnxMIDot1sJnxMstTrapsControlEntry.setStatus('current')
jnxMIMstSetTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstSetTraps.setStatus('current')
jnxMIMstGenTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGenTrapType.setStatus('current')
jnxMIMstPortTrapNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4), )
if mibBuilder.loadTexts: jnxMIMstPortTrapNotificationTable.setStatus('current')
jnxMIMstPortTrapNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIMstPortTrapIndex"))
if mibBuilder.loadTexts: jnxMIMstPortTrapNotificationEntry.setStatus('current')
jnxMIMstPortTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPortTrapIndex.setStatus('current')
jnxMIMstPortMigrationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sendstp", 0), ("sendrstp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPortMigrationType.setStatus('current')
jnxMIMstPktErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("protocolIdErr", 0), ("invalidBpdu", 1), ("configLengthErr", 2), ("tcnLengthErr", 3), ("rstpLengthErr", 4), ("maxAgeErr", 5), ("fwdDelayErr", 6), ("helloTimeErr", 7), ("mstpLengthErr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPktErrType.setStatus('current')
jnxMIMstPktErrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPktErrVal.setStatus('current')
jnxMIMstTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0))
jnxMIMstGenTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 1)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstGenTrapType"))
if mibBuilder.loadTexts: jnxMIMstGenTrap.setStatus('current')
jnxMIMstErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 2)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstGlobalErrTrapType"))
if mibBuilder.loadTexts: jnxMIMstErrTrap.setStatus('current')
jnxMIMstNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 3)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstOldDesignatedRoot"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiBridgeRegionalRoot"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstNewRootTrap.setStatus('current')
jnxMIMstTopologyChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 4)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstTopologyChgTrap.setStatus('current')
jnxMIMstProtocolMigrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 5)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPortTrapIndex"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstForceProtocolVersion"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPortMigrationType"))
if mibBuilder.loadTexts: jnxMIMstProtocolMigrationTrap.setStatus('current')
jnxMIMstInvalidBpduRxdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 6)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPortTrapIndex"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPktErrType"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPktErrVal"))
if mibBuilder.loadTexts: jnxMIMstInvalidBpduRxdTrap.setStatus('current')
jnxMIMstRegionConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 7)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiConfigIdSel"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiRegionName"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiRegionVersion"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiConfigDigest"))
if mibBuilder.loadTexts: jnxMIMstRegionConfigChangeTrap.setStatus('current')
jnxMIMstCistPortRootProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 8)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstCistPortRootProtectState"))
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectStateChangeTrap.setStatus('current')
jnxMIMstMstiPortRootProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 9)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPortRootProtectState"))
if mibBuilder.loadTexts: jnxMIMstMstiPortRootProtectStateChangeTrap.setStatus('current')
jnxMIMstCistPortLoopProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 10)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstCistPortLoopProtectState"))
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectStateChangeTrap.setStatus('current')
jnxMIMstMstiPortLoopProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 11)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPortLoopProtectState"))
if mibBuilder.loadTexts: jnxMIMstMstiPortLoopProtectStateChangeTrap.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-MIMSTP-MIB", jnxMIMstCistPortRxMstBpduCount=jnxMIMstCistPortRxMstBpduCount, jnxMIMstRegionConfigChangeTrap=jnxMIMstRegionConfigChangeTrap, jnxMIMstCistDynamicPathcostCalculation=jnxMIMstCistDynamicPathcostCalculation, jnxMIMstCistForwardDelay=jnxMIMstCistForwardDelay, jnxMIMstCistPortRootProtectStateChangeTrap=jnxMIMstCistPortRootProtectStateChangeTrap, jnxMIMstCistTimeSinceTopologyChange=jnxMIMstCistTimeSinceTopologyChange, Timeout=Timeout, jnxMIMstSetVlanList=jnxMIMstSetVlanList, jnxMIMstMstiPortDesignatedRoot=jnxMIMstMstiPortDesignatedRoot, jnxMIMstMstiSelectedPortRole=jnxMIMstMstiSelectedPortRole, jnxMIMstCistHelloTime=jnxMIMstCistHelloTime, jnxMIMstCistPortRxConfigBpduCount=jnxMIMstCistPortRxConfigBpduCount, jnxMIMstCistPortForwardTransitions=jnxMIMstCistPortForwardTransitions, jnxMIMstGlobalDebug=jnxMIMstGlobalDebug, jnxMIMstCistRegionalRootCost=jnxMIMstCistRegionalRootCost, jnxMIMstCistPortProtocolMigration=jnxMIMstCistPortProtocolMigration, jnxMIMstMstiPortRootProtectStateChangeTrap=jnxMIMstMstiPortRootProtectStateChangeTrap, jnxMIMstCistPortDesignatedCost=jnxMIMstCistPortDesignatedCost, jnxMIMstSystemControl=jnxMIMstSystemControl, jnxMIMstBrgAddress=jnxMIMstBrgAddress, jnxMIMstCistPortHelloTime=jnxMIMstCistPortHelloTime, jnxMIMstMstiPortTransmittedBPDUs=jnxMIMstMstiPortTransmittedBPDUs, EnabledStatus=EnabledStatus, jnxMIMstPortTrapNotificationTable=jnxMIMstPortTrapNotificationTable, jnxMIMstMstiBridgeRegionalRoot=jnxMIMstMstiBridgeRegionalRoot, jnxMIMstTxHoldCount=jnxMIMstTxHoldCount, jnxMIMstMstiPortDesignatedCost=jnxMIMstMstiPortDesignatedCost, jnxMIMstInstanceDownCount=jnxMIMstInstanceDownCount, jnxMIMstCistSelectedPortRole=jnxMIMstCistSelectedPortRole, jnxMIMstVlanInstanceMappingTable=jnxMIMstVlanInstanceMappingTable, jnxMIMstCistPortDesignatedPort=jnxMIMstCistPortDesignatedPort, jnxMIMstCistPortRegionalRoot=jnxMIMstCistPortRegionalRoot, jnxMIMstMstiPortProtectEntry=jnxMIMstMstiPortProtectEntry, jnxMIMstCistPortPriority=jnxMIMstCistPortPriority, jnxMIMstCistPortOperP2P=jnxMIMstCistPortOperP2P, jnxMIMstMstiPortInfoSemState=jnxMIMstMstiPortInfoSemState, jnxMIMstCistPortTable=jnxMIMstCistPortTable, jnxMIMstMstiPortEffectivePortState=jnxMIMstMstiPortEffectivePortState, jnxMIMstCistRoot=jnxMIMstCistRoot, jnxMIMstCistBridgeHelloTime=jnxMIMstCistBridgeHelloTime, jnxMIDot1sJuniperMst=jnxMIDot1sJuniperMst, jnxMIDot1sJnxMstTrapsControlEntry=jnxMIDot1sJnxMstTrapsControlEntry, jnxMIMstMstiBridgePriority=jnxMIMstMstiBridgePriority, jnxMIMstPortTrapIndex=jnxMIMstPortTrapIndex, jnxMIMstProtocolMigrationTrap=jnxMIMstProtocolMigrationTrap, jnxMIMstMstiRegionName=jnxMIMstMstiRegionName, jnxMIMstMstiInstanceIndex=jnxMIMstMstiInstanceIndex, jnxMIMstMstiPort=jnxMIMstMstiPort, jnxMIMstMaxMstInstanceNumber=jnxMIMstMaxMstInstanceNumber, jnxMIMstMstiConfigIdSel=jnxMIMstMstiConfigIdSel, jnxMIMstMstiPortLoopProtectState=jnxMIMstMstiPortLoopProtectState, jnxMIMstCistBridgeMaxAge=jnxMIMstCistBridgeMaxAge, jnxMIMstCistPortStateTransitionSemState=jnxMIMstCistPortStateTransitionSemState, jnxMIMstInstanceUpCount=jnxMIMstInstanceUpCount, jnxMIMstCistPortInvalidConfigBpduRxCount=jnxMIMstCistPortInvalidConfigBpduRxCount, jnxMIMstCistPortLoopProtectStateChangeTrap=jnxMIMstCistPortLoopProtectStateChangeTrap, jnxMIMstCistTopChanges=jnxMIMstCistTopChanges, jnxMIMstMstiPortLoopProtectStateChangeTrap=jnxMIMstMstiPortLoopProtectStateChangeTrap, jnxMIMstPortTrapNotificationEntry=jnxMIMstPortTrapNotificationEntry, jnxMIDot1sJuniperMstEntry=jnxMIDot1sJuniperMstEntry, jnxMIMstCistPortProtectEntry=jnxMIMstCistPortProtectEntry, jnxMIMstCistPortRootProtectState=jnxMIMstCistPortRootProtectState, jnxMIMstMstiPortRoleTransitionSemState=jnxMIMstMstiPortRoleTransitionSemState, jnxMIMstCistBridgePriority=jnxMIMstCistBridgePriority, jnxMIMstUnMapVlanIndex=jnxMIMstUnMapVlanIndex, jnxMIMstCistPortDesignatedRoot=jnxMIMstCistPortDesignatedRoot, jnxMIMstMIB=jnxMIMstMIB, jnxMIDot1sJnxMstTrapsControlTable=jnxMIDot1sJnxMstTrapsControlTable, jnxMIDot1sJuniperMstTraps=jnxMIDot1sJuniperMstTraps, jnxMIMstMstiPortTable=jnxMIMstMstiPortTable, jnxMIMstMstiPortEntry=jnxMIMstMstiPortEntry, jnxMIMstGlobalTrace=jnxMIMstGlobalTrace, jnxMIMstCistPortInvalidTcnBpduRxCount=jnxMIMstCistPortInvalidTcnBpduRxCount, jnxMIMstErrTrap=jnxMIMstErrTrap, jnxMIMstCistBridgeRoleSelectionSemState=jnxMIMstCistBridgeRoleSelectionSemState, jnxMIMstMstiRegionVersion=jnxMIMstMstiRegionVersion, jnxMIMstBufferOverFlowCount=jnxMIMstBufferOverFlowCount, jnxMIDot1sJnxMstSetGlobalTrapOption=jnxMIDot1sJnxMstSetGlobalTrapOption, jnxMIMstMstiConfigDigest=jnxMIMstMstiConfigDigest, jnxMIMstMemAllocFailureCount=jnxMIMstMemAllocFailureCount, jnxMIMstMstiNewRootBridgeCount=jnxMIMstMstiNewRootBridgeCount, jnxMIMstMstiBridgeTable=jnxMIMstMstiBridgeTable, jnxMIMstMstiRootPort=jnxMIMstMstiRootPort, jnxMIMstCistCurrentPortRole=jnxMIMstCistCurrentPortRole, jnxMIMstCistPortRoleTransitionSemState=jnxMIMstCistPortRoleTransitionSemState, jnxMIMstGlobalErrTrapType=jnxMIMstGlobalErrTrapType, jnxMIMstInstanceIndex=jnxMIMstInstanceIndex, jnxMIMstCistPortTxRstBpduCount=jnxMIMstCistPortTxRstBpduCount, jnxMIMstPktErrType=jnxMIMstPktErrType, jnxMIMstMapVlanIndex=jnxMIMstMapVlanIndex, jnxMIDot1sJuniperMstContextId=jnxMIDot1sJuniperMstContextId, jnxMIMstCistPortEntry=jnxMIMstCistPortEntry, jnxMIMstMstiPortPathCost=jnxMIMstMstiPortPathCost, jnxMIMstMstiCurrentPortRole=jnxMIMstMstiCurrentPortRole, jnxMIMstCistPortInfoSemState=jnxMIMstCistPortInfoSemState, jnxMIMstPktErrVal=jnxMIMstPktErrVal, jnxMIMstTopologyChgTrap=jnxMIMstTopologyChgTrap, jnxMIDot1sJnxMstTrapsControl=jnxMIDot1sJnxMstTrapsControl, jnxMIMstNoOfMstiSupported=jnxMIMstNoOfMstiSupported, jnxMIMstCistPortRegionalPathCost=jnxMIMstCistPortRegionalPathCost, jnxMIMstMaxHopCount=jnxMIMstMaxHopCount, jnxMIMstCistPortTransmitSemState=jnxMIMstCistPortTransmitSemState, jnxMIMstCistPort=jnxMIMstCistPort, jnxMIMstMstiTopChanges=jnxMIMstMstiTopChanges, BridgeId=BridgeId, jnxMIMstMstiForcePortState=jnxMIMstMstiForcePortState, jnxMIMstTrace=jnxMIMstTrace, jnxMIMstVlanInstanceMappingEntry=jnxMIMstVlanInstanceMappingEntry, jnxMIMstInstanceVlanMapped3k=jnxMIMstInstanceVlanMapped3k, jnxMIMstInstanceVlanMapped=jnxMIMstInstanceVlanMapped, jnxMIMstMstiPortStateTransitionSemState=jnxMIMstMstiPortStateTransitionSemState, jnxMIMstCistPortEffectivePortState=jnxMIMstCistPortEffectivePortState, jnxMIMstMstiTimeSinceTopologyChange=jnxMIMstMstiTimeSinceTopologyChange, PYSNMP_MODULE_ID=jnxMIMstMIB, jnxMIMstCistPortOperEdgeStatus=jnxMIMstCistPortOperEdgeStatus, jnxMIMstMstiPortTopologyChangeSemState=jnxMIMstMstiPortTopologyChangeSemState, jnxMIMstMstiPortProtectTable=jnxMIMstMstiPortProtectTable, jnxMIMstInvalidBpduRxdTrap=jnxMIMstInvalidBpduRxdTrap, jnxMIMstCistBridgeForwardDelay=jnxMIMstCistBridgeForwardDelay, jnxMIMstCistPortRxTcnBpduCount=jnxMIMstCistPortRxTcnBpduCount, jnxMIMstCistPortTxMstBpduCount=jnxMIMstCistPortTxMstBpduCount, jnxMIMstDebug=jnxMIMstDebug, jnxMIMstCistPortProtMigrationSemState=jnxMIMstCistPortProtMigrationSemState, jnxMIMstMstiPortRootProtectState=jnxMIMstMstiPortRootProtectState, jnxMIMstTraps=jnxMIMstTraps, jnxMIMstCistPortState=jnxMIMstCistPortState, jnxMIMstMstiBridgeEntry=jnxMIMstMstiBridgeEntry, jnxMIMstInstanceVlanMapped2k=jnxMIMstInstanceVlanMapped2k, jnxMIMstCistMaxAge=jnxMIMstCistMaxAge, jnxMIMstMstiRootCost=jnxMIMstMstiRootCost, jnxMIMstCistPortDesignatedBridge=jnxMIMstCistPortDesignatedBridge, jnxMIMstCistRootPort=jnxMIMstCistRootPort, jnxMIMstForceProtocolVersion=jnxMIMstForceProtocolVersion, jnxMIMstCistForcePortState=jnxMIMstCistForcePortState, VlanId=VlanId, jnxMIMstCistPortOperVersion=jnxMIMstCistPortOperVersion, jnxMIMstCistPortInvalidRstBpduRxCount=jnxMIMstCistPortInvalidRstBpduRxCount, jnxMIMstSetTraps=jnxMIMstSetTraps, jnxMIMstGenTrapType=jnxMIMstGenTrapType, jnxMIDot1sJuniperMstTable=jnxMIDot1sJuniperMstTable, jnxMIMstCistPortPathCost=jnxMIMstCistPortPathCost, jnxMIMstCistPortTopologyChangeSemState=jnxMIMstCistPortTopologyChangeSemState, jnxMIMstCistPortReceiveSemState=jnxMIMstCistPortReceiveSemState, jnxMIMstMstpUpCount=jnxMIMstMstpUpCount, jnxMIMstInstanceVlanMapped4k=jnxMIMstInstanceVlanMapped4k, jnxMIMstPathCostDefaultType=jnxMIMstPathCostDefaultType, jnxMIMstCistNewRootBridgeCount=jnxMIMstCistNewRootBridgeCount, jnxMIMstCistProtocolMigrationCount=jnxMIMstCistProtocolMigrationCount, jnxMIMstCistRootCost=jnxMIMstCistRootCost, jnxMIMstCistPortLoopProtectEnabled=jnxMIMstCistPortLoopProtectEnabled, jnxMIMstCistPortTxTcnBpduCount=jnxMIMstCistPortTxTcnBpduCount, jnxMIMstCistPortAutoEdgeStatus=jnxMIMstCistPortAutoEdgeStatus, jnxMIMstCistPortRootProtectEnabled=jnxMIMstCistPortRootProtectEnabled, jnxMIMstCistPortRxRstBpduCount=jnxMIMstCistPortRxRstBpduCount, jnxMIMstRegionConfigChangeCount=jnxMIMstRegionConfigChangeCount, jnxMIMstCistPortInvalidMstBpduRxCount=jnxMIMstCistPortInvalidMstBpduRxCount, jnxMIMstModuleStatus=jnxMIMstModuleStatus, jnxMIMstMstiPortState=jnxMIMstMstiPortState, jnxMIMstCistRegionalRoot=jnxMIMstCistRegionalRoot, jnxMIMstPortMigrationType=jnxMIMstPortMigrationType, jnxMIMstMstiPortReceivedBPDUs=jnxMIMstMstiPortReceivedBPDUs, jnxMIMstResetVlanList=jnxMIMstResetVlanList, jnxMIMstCistPortTxConfigBpduCount=jnxMIMstCistPortTxConfigBpduCount, jnxMIMstGenTrap=jnxMIMstGenTrap, jnxMIMstCistPortLoopProtectState=jnxMIMstCistPortLoopProtectState, jnxMIMstMstpDownCount=jnxMIMstMstpDownCount, jnxMIMstCistPortAdminP2P=jnxMIMstCistPortAdminP2P, jnxMIMstNewRootTrap=jnxMIMstNewRootTrap, jnxMIMstMstiPortDesignatedPort=jnxMIMstMstiPortDesignatedPort, jnxMIMstMstiPortForwardTransitions=jnxMIMstMstiPortForwardTransitions, jnxMIMstCistPortAdminEdgeStatus=jnxMIMstCistPortAdminEdgeStatus, jnxMIMstCistPortProtectTable=jnxMIMstCistPortProtectTable, jnxMIMstMstiPortInvalidBPDUsRcvd=jnxMIMstMstiPortInvalidBPDUsRcvd, jnxMIMstMstiBridgeRoleSelectionSemState=jnxMIMstMstiBridgeRoleSelectionSemState, jnxMIMstMstiPortPriority=jnxMIMstMstiPortPriority, jnxMIMstCistHoldTime=jnxMIMstCistHoldTime, jnxMIMstMstiPortDesignatedBridge=jnxMIMstMstiPortDesignatedBridge, jnxMIMstOldDesignatedRoot=jnxMIMstOldDesignatedRoot)
