#
# PySNMP MIB module CHASSISMGREXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHASSISMGREXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
chassisMgrExt, = mibBuilder.importSymbols("APENT-MIB", "chassisMgrExt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, ModuleIdentity, Counter32, Integer32, Unsigned32, iso, TimeTicks, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "Integer32", "Unsigned32", "iso", "TimeTicks", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chassisMgrExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 34, 1))
if mibBuilder.loadTexts: chassisMgrExtMib.setLastUpdated('9707202000Z')
if mibBuilder.loadTexts: chassisMgrExtMib.setOrganization('ArrowPoint Communications Inc.')
apChassisMgrExtChassisType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ws100", 0), ("ws800", 1), ("ws150", 2), ("ws50", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtChassisType.setStatus('current')
apChassisMgrExtChassisName = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtChassisName.setStatus('current')
apChassisMgrExtChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtChassisSerialNumber.setStatus('current')
apChassisMgrExtNumberSlots = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberSlots.setStatus('current')
apChassisMgrExtNumberModules = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberModules.setStatus('current')
apChassisMgrExtNumberPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberPowerSupplies.setStatus('current')
apChassisMgrExtNumberFans = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtNumberFans.setStatus('current')
apChassisMgrExtSoftwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSoftwareVersionNumber.setStatus('current')
apChassisMgrExtBootpState = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bootp-disabled", 0), ("bootp-enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtBootpState.setStatus('current')
apChassisMgrExtMgmtPortIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtMgmtPortIpAddress.setStatus('current')
apChassisMgrExtBaseEthernetAddress = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtBaseEthernetAddress.setStatus('current')
apChassisMgrExtCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtCpuUtilization.setStatus('current')
apChassisMgrExtMajorHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtMajorHwVersion.setStatus('current')
apChassisMgrExtMinorHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 34, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtMinorHwVersion.setStatus('current')
apChassisMgrExtModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16), )
if mibBuilder.loadTexts: apChassisMgrExtModuleTable.setStatus('current')
apChassisMgrExtModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1), ).setIndexNames((0, "CHASSISMGREXT-MIB", "apChassisMgrExtModuleSlotNumber"))
if mibBuilder.loadTexts: apChassisMgrExtModuleEntry.setStatus('current')
apChassisMgrExtModuleSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleSlotNumber.setStatus('current')
apChassisMgrExtModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("scm", 0), ("sfm", 1), ("scfm", 2), ("fem-t1", 3), ("dual-hssi", 4), ("fem", 5), ("fenic", 6), ("genic", 7), ("gem", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleType.setStatus('current')
apChassisMgrExtModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleName.setStatus('current')
apChassisMgrExtModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleSerialNumber.setStatus('current')
apChassisMgrExtModuleOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powered-off", 0), ("powered-on", 1), ("primary", 2), ("backup", 3), ("bad", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleOpStatus.setStatus('current')
apChassisMgrExtModuleNumSubModules = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleNumSubModules.setStatus('current')
apChassisMgrExtModuleMajorHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleMajorHwVersion.setStatus('current')
apChassisMgrExtModuleMinorHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 16, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtModuleMinorHwVersion.setStatus('current')
apChassisMgrExtSubModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17), )
if mibBuilder.loadTexts: apChassisMgrExtSubModuleTable.setStatus('current')
apChassisMgrExtSubModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1), ).setIndexNames((0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleSlot"), (0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleSubSlot"))
if mibBuilder.loadTexts: apChassisMgrExtSubModuleEntry.setStatus('current')
apChassisMgrExtSubModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSlot.setStatus('current')
apChassisMgrExtSubModuleSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSubSlot.setStatus('current')
apChassisMgrExtSubModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("scm-submodule", 0), ("sfm-submodule", 1), ("scfm-submodule", 2), ("t1-submodule", 3), ("hssi-submodule", 4), ("epif-submodule", 5), ("v35-submodule", 6), ("xpif-submodule", 7), ("sfm2-submodule", 8), ("scfm2-submodule", 9), ("genic-2port-submodule", 10), ("genic-1port-submodule", 11), ("unknown-submodule", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleType.setStatus('current')
apChassisMgrExtSubModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleName.setStatus('current')
apChassisMgrExtSubModuleOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("offline-ok", 0), ("offline-bad", 1), ("online", 2), ("bad", 3), ("going-online", 4), ("going-offline", 5), ("inserted", 6), ("post", 7), ("post-ok", 8), ("post-fail", 9), ("post-bad-comm", 10), ("any", 11), ("unknown-state", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleOpStatus.setStatus('current')
apChassisMgrExtSubModuleSsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hifen-t1", 0), ("hifen-hssi", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSsCardType.setStatus('current')
apChassisMgrExtSubModuleSsCardOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("offline-ok", 0), ("offline-bad", 1), ("online", 2), ("unknown-state", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSsCardOpStatus.setStatus('current')
apChassisMgrExtSubModulePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModulePortName.setStatus('current')
apChassisMgrExtSubModulePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModulePortNumber.setStatus('current')
apChassisMgrExtSubModuleSystemHeapFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSystemHeapFree.setStatus('current')
apChassisMgrExtSubModuleSystemHeapChainDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleSystemHeapChainDepth.setStatus('current')
apChassisMgrExtSubModuleInstalledMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleInstalledMemory.setStatus('current')
apChassisMgrExtSubModuleCPUInstantaneous = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleCPUInstantaneous.setStatus('current')
apChassisMgrExtSubModuleCPUAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleCPUAverage.setStatus('current')
apChassisMgrExtSubModuleBufferTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18), )
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferTable.setStatus('current')
apChassisMgrExtSubModuleBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1), ).setIndexNames((0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleBufferPool"), (0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleBufferSlot"), (0, "CHASSISMGREXT-MIB", "apChassisMgrExtSubModuleBufferSubSlot"))
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferEntry.setStatus('current')
apChassisMgrExtSubModuleBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferPool.setStatus('current')
apChassisMgrExtSubModuleBufferSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSlot.setStatus('current')
apChassisMgrExtSubModuleBufferSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSubSlot.setStatus('current')
apChassisMgrExtSubModuleBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferSize.setStatus('current')
apChassisMgrExtSubModuleBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferCount.setStatus('current')
apChassisMgrExtSubModuleBufferAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferAvailable.setStatus('current')
apChassisMgrExtSubModuleBufferFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferFailures.setStatus('current')
apChassisMgrExtSubModuleBufferLowBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 34, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apChassisMgrExtSubModuleBufferLowBufferCount.setStatus('current')
mibBuilder.exportSymbols("CHASSISMGREXT-MIB", apChassisMgrExtSubModuleTable=apChassisMgrExtSubModuleTable, apChassisMgrExtSubModuleName=apChassisMgrExtSubModuleName, apChassisMgrExtNumberPowerSupplies=apChassisMgrExtNumberPowerSupplies, apChassisMgrExtModuleEntry=apChassisMgrExtModuleEntry, apChassisMgrExtSubModuleCPUAverage=apChassisMgrExtSubModuleCPUAverage, apChassisMgrExtBaseEthernetAddress=apChassisMgrExtBaseEthernetAddress, apChassisMgrExtModuleNumSubModules=apChassisMgrExtModuleNumSubModules, apChassisMgrExtNumberFans=apChassisMgrExtNumberFans, apChassisMgrExtMgmtPortIpAddress=apChassisMgrExtMgmtPortIpAddress, apChassisMgrExtChassisType=apChassisMgrExtChassisType, apChassisMgrExtSubModuleSubSlot=apChassisMgrExtSubModuleSubSlot, apChassisMgrExtSubModuleCPUInstantaneous=apChassisMgrExtSubModuleCPUInstantaneous, apChassisMgrExtSubModuleBufferEntry=apChassisMgrExtSubModuleBufferEntry, apChassisMgrExtModuleSerialNumber=apChassisMgrExtModuleSerialNumber, apChassisMgrExtSubModuleBufferSlot=apChassisMgrExtSubModuleBufferSlot, apChassisMgrExtSubModuleBufferSize=apChassisMgrExtSubModuleBufferSize, apChassisMgrExtSoftwareVersionNumber=apChassisMgrExtSoftwareVersionNumber, apChassisMgrExtModuleMajorHwVersion=apChassisMgrExtModuleMajorHwVersion, apChassisMgrExtSubModulePortName=apChassisMgrExtSubModulePortName, apChassisMgrExtSubModuleInstalledMemory=apChassisMgrExtSubModuleInstalledMemory, apChassisMgrExtSubModuleBufferSubSlot=apChassisMgrExtSubModuleBufferSubSlot, apChassisMgrExtSubModuleEntry=apChassisMgrExtSubModuleEntry, apChassisMgrExtChassisName=apChassisMgrExtChassisName, apChassisMgrExtCpuUtilization=apChassisMgrExtCpuUtilization, apChassisMgrExtSubModuleSlot=apChassisMgrExtSubModuleSlot, apChassisMgrExtSubModuleBufferPool=apChassisMgrExtSubModuleBufferPool, apChassisMgrExtSubModuleOpStatus=apChassisMgrExtSubModuleOpStatus, apChassisMgrExtSubModuleSsCardType=apChassisMgrExtSubModuleSsCardType, apChassisMgrExtSubModuleBufferAvailable=apChassisMgrExtSubModuleBufferAvailable, apChassisMgrExtSubModuleBufferLowBufferCount=apChassisMgrExtSubModuleBufferLowBufferCount, apChassisMgrExtSubModuleBufferFailures=apChassisMgrExtSubModuleBufferFailures, apChassisMgrExtModuleSlotNumber=apChassisMgrExtModuleSlotNumber, apChassisMgrExtSubModuleSystemHeapFree=apChassisMgrExtSubModuleSystemHeapFree, chassisMgrExtMib=chassisMgrExtMib, apChassisMgrExtChassisSerialNumber=apChassisMgrExtChassisSerialNumber, apChassisMgrExtModuleMinorHwVersion=apChassisMgrExtModuleMinorHwVersion, apChassisMgrExtBootpState=apChassisMgrExtBootpState, apChassisMgrExtNumberModules=apChassisMgrExtNumberModules, apChassisMgrExtModuleType=apChassisMgrExtModuleType, apChassisMgrExtSubModulePortNumber=apChassisMgrExtSubModulePortNumber, apChassisMgrExtModuleName=apChassisMgrExtModuleName, apChassisMgrExtSubModuleBufferCount=apChassisMgrExtSubModuleBufferCount, apChassisMgrExtSubModuleSystemHeapChainDepth=apChassisMgrExtSubModuleSystemHeapChainDepth, apChassisMgrExtMajorHwVersion=apChassisMgrExtMajorHwVersion, apChassisMgrExtMinorHwVersion=apChassisMgrExtMinorHwVersion, apChassisMgrExtSubModuleSsCardOpStatus=apChassisMgrExtSubModuleSsCardOpStatus, apChassisMgrExtModuleOpStatus=apChassisMgrExtModuleOpStatus, PYSNMP_MODULE_ID=chassisMgrExtMib, apChassisMgrExtNumberSlots=apChassisMgrExtNumberSlots, apChassisMgrExtSubModuleType=apChassisMgrExtSubModuleType, apChassisMgrExtSubModuleBufferTable=apChassisMgrExtSubModuleBufferTable, apChassisMgrExtModuleTable=apChassisMgrExtModuleTable)
