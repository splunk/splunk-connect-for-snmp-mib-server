#
# PySNMP MIB module ArrayManager-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ArrayManager-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, Bits, NotificationType, Unsigned32, ModuleIdentity, IpAddress, Integer32, enterprises, iso, TimeTicks, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Bits", "NotificationType", "Unsigned32", "ModuleIdentity", "IpAddress", "Integer32", "enterprises", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1))
arrayManager = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1))
arrayMgrSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareVersion.setStatus('mandatory')
arrayMgrGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("normal", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrGlobalStatus.setStatus('mandatory')
arrayMgrSoftwareManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareManufacturer.setStatus('mandatory')
arrayMgrSoftwareProduct = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareProduct.setStatus('mandatory')
arrayMgrSoftwareDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareDescription.setStatus('mandatory')
arrayMgrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100))
arrayMgrDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrDisplayName.setStatus('mandatory')
arrayMgrDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrDescription.setStatus('mandatory')
arrayMgrAgentVendor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrAgentVendor.setStatus('mandatory')
arrayMgrAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrAgentVersion.setStatus('mandatory')
globalData = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110))
agentSystemGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("nonCriticalError", 3), ("failure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSystemGlobalStatus.setStatus('mandatory')
agentLastGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("nonCriticalError", 3), ("failure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLastGlobalStatus.setStatus('mandatory')
agentTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTimeStamp.setStatus('mandatory')
agentGetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGetTimeout.setStatus('mandatory')
agentModifiers = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentModifiers.setStatus('mandatory')
agentRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRefreshRate.setStatus('mandatory')
agentHostname = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHostname.setStatus('mandatory')
agentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPAddress.setStatus('mandatory')
agentSoftwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databaseUp", 1), ("databaseDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSoftwareStatus.setStatus('mandatory')
agentAmSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAmSnmpVersion.setStatus('mandatory')
agentAmMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAmMibVersion.setStatus('mandatory')
providerData = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120))
providerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1), )
if mibBuilder.loadTexts: providerTable.setStatus('mandatory')
providerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1), ).setIndexNames((0, "ArrayManager-MIB", "providerNumber"))
if mibBuilder.loadTexts: providerEntry.setStatus('mandatory')
providerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerNumber.setStatus('mandatory')
providerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerName.setStatus('mandatory')
providerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerStatus.setStatus('mandatory')
providerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerVersion.setStatus('mandatory')
physicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130))
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
controllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1), ).setIndexNames((0, "ArrayManager-MIB", "controllerNumber"))
if mibBuilder.loadTexts: controllerEntry.setStatus('mandatory')
controllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNumber.setStatus('mandatory')
controllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
controllerVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerVendor.setStatus('mandatory')
controllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("scsi", 1), ("pv660F", 2), ("pv662F", 3), ("ide", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerType.setStatus('mandatory')
controllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerState.setStatus('mandatory')
controllerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSeverity.setStatus('mandatory')
controllerRebuildRateInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRebuildRateInPercent.setStatus('mandatory')
controllerFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFWVersion.setStatus('mandatory')
controllerCacheSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInMB.setStatus('mandatory')
controllerCacheSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInBytes.setStatus('mandatory')
controllerPhysicalDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPhysicalDeviceCount.setStatus('mandatory')
controllerLogicalDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerLogicalDeviceCount.setStatus('mandatory')
controllerPartnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPartnerStatus.setStatus('mandatory')
controllerHostPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerHostPortCount.setStatus('mandatory')
controllerMemorySizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMemorySizeInMB.setStatus('mandatory')
controllerMemorySizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMemorySizeInBytes.setStatus('mandatory')
controllerDriveChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriveChannelCount.setStatus('mandatory')
controllerFaultTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFaultTolerant.setStatus('mandatory')
controllerC0Port0WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0WWN.setStatus('mandatory')
controllerC0Port0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0Name.setStatus('mandatory')
controllerC0Port0ID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0ID.setStatus('mandatory')
controllerC0Target = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Target.setStatus('mandatory')
controllerC0Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Channel.setStatus('mandatory')
controllerC0OSController = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0OSController.setStatus('mandatory')
controllerC0BatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 9, 10, 12, 21))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0BatteryState.setStatus('mandatory')
controllerC1Port0WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0WWN.setStatus('mandatory')
controllerC1Port0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0Name.setStatus('mandatory')
controllerC1Port0ID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0ID.setStatus('mandatory')
controllerC1Target = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Target.setStatus('mandatory')
controllerC1Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Channel.setStatus('mandatory')
controllerC1OSController = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1OSController.setStatus('mandatory')
controllerC1BatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 9, 10, 12, 21))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1BatteryState.setStatus('mandatory')
controllerNodeWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNodeWWN.setStatus('mandatory')
controllerC0Port1WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port1WWN.setStatus('mandatory')
controllerC1Port1WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port1WWN.setStatus('mandatory')
controllerBatteryChargeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBatteryChargeCount.setStatus('mandatory')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2), )
if mibBuilder.loadTexts: channelTable.setStatus('mandatory')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1), ).setIndexNames((0, "ArrayManager-MIB", "channelNumber"))
if mibBuilder.loadTexts: channelEntry.setStatus('mandatory')
channelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumber.setStatus('mandatory')
channelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelName.setStatus('mandatory')
channelState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelState.setStatus('mandatory')
channelSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSeverity.setStatus('mandatory')
channelTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("notTerminated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTermination.setStatus('mandatory')
channelSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSCSIID.setStatus('mandatory')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3), )
if mibBuilder.loadTexts: enclosureTable.setStatus('mandatory')
enclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1), ).setIndexNames((0, "ArrayManager-MIB", "enclosureNumber"))
if mibBuilder.loadTexts: enclosureEntry.setStatus('mandatory')
enclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumber.setStatus('mandatory')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('mandatory')
enclosureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureVendor.setStatus('mandatory')
enclosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureState.setStatus('mandatory')
enclosureSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warining", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSeverity.setStatus('mandatory')
enclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureID.setStatus('mandatory')
enclosureProcessorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProcessorVersion.setStatus('mandatory')
enclosureServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureServiceTag.setStatus('mandatory')
enclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetTag.setStatus('mandatory')
enclosureAssetName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetName.setStatus('mandatory')
enclosureSplitBusPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSplitBusPartNumber.setStatus('mandatory')
enclosureProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProductID.setStatus('mandatory')
enclosureKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureKernelVersion.setStatus('mandatory')
enclosureESM1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureESM1PartNumber.setStatus('mandatory')
enclosureESM2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureESM2PartNumber.setStatus('mandatory')
enclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("internal", 1), ("dELLPV200SPV201S", 2), ("dELLPV210SPV211S", 3), ("dELLPV220SPV221S", 4), ("dELLPV660F", 5), ("dELLPV224F", 6), ("dELLPV660F224F", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureType.setStatus('mandatory')
enclosureProcessor2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProcessor2Version.setStatus('mandatory')
enclosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("joined", 1), ("splitBus", 2), ("clustered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureConfig.setStatus('mandatory')
enclosureChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureChannelNumber.setStatus('mandatory')
enclosureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarm.setStatus('mandatory')
enclosureBackplanePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureBackplanePartNumber.setStatus('mandatory')
enclosureSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSCSIID.setStatus('mandatory')
arrayDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4), )
if mibBuilder.loadTexts: arrayDiskTable.setStatus('mandatory')
arrayDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskNumber"))
if mibBuilder.loadTexts: arrayDiskEntry.setStatus('mandatory')
arrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNumber.setStatus('mandatory')
arrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskName.setStatus('mandatory')
arrayDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskVendor.setStatus('mandatory')
arrayDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 11, 15, 24, 25, 26, 28, 35))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("recovering", 7), ("removed", 11), ("resynching", 15), ("rebuild", 24), ("noMedia", 25), ("formatting", 26), ("diagnostics", 28), ("initializing", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskState.setStatus('mandatory')
arrayDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSeverity.setStatus('mandatory')
arrayDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskProductID.setStatus('mandatory')
arrayDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSerialNo.setStatus('mandatory')
arrayDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskRevision.setStatus('mandatory')
arrayDiskEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureID.setStatus('mandatory')
arrayDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannel.setStatus('mandatory')
arrayDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLengthInMB.setStatus('mandatory')
arrayDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLengthInBytes.setStatus('mandatory')
arrayDiskLargestContiguousFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInMB.setStatus('mandatory')
arrayDiskLargestContiguousFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInBytes.setStatus('mandatory')
arrayDiskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskTargetID.setStatus('mandatory')
arrayDiskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLunID.setStatus('mandatory')
arrayDiskUsedSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskUsedSpaceInMB.setStatus('mandatory')
arrayDiskUsedSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskUsedSpaceInBytes.setStatus('mandatory')
arrayDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskFreeSpaceInMB.setStatus('mandatory')
arrayDiskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arrayDiskFreeSpaceInBytes.setStatus('mandatory')
arrayDiskBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("scsi", 1), ("ide", 2), ("fibre", 3), ("ssa", 4), ("usb", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskBusType.setStatus('mandatory')
arrayDiskSpareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("memberVD", 1), ("memberDG", 2), ("globalHotSpare", 3), ("dedicatedHotSpare", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arrayDiskSpareState.setStatus('mandatory')
arrayDiskEnclosureConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5), )
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionTable.setStatus('mandatory')
arrayDiskEnclosureConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskEnclosureConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEntry.setStatus('mandatory')
arrayDiskEnclosureConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionNumber.setStatus('mandatory')
arrayDiskEnclosureConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskName.setStatus('mandatory')
arrayDiskEnclosureConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskNumber.setStatus('mandatory')
arrayDiskEnclosureConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureName.setStatus('mandatory')
arrayDiskEnclosureConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureNumber.setStatus('mandatory')
arrayDiskEnclosureConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerName.setStatus('mandatory')
arrayDiskEnclosureConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerNumber.setStatus('mandatory')
arrayDiskChannelConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6), )
if mibBuilder.loadTexts: arrayDiskChannelConnectionTable.setStatus('mandatory')
arrayDiskChannelConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskChannelConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskChannelConnectionEntry.setStatus('mandatory')
arrayDiskChannelConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionNumber.setStatus('mandatory')
arrayDiskChannelConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskName.setStatus('mandatory')
arrayDiskChannelConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskNumber.setStatus('mandatory')
arrayDiskChannelConnectionChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelName.setStatus('mandatory')
arrayDiskChannelConnectionChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelNumber.setStatus('mandatory')
arrayDiskChannelConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerName.setStatus('mandatory')
arrayDiskChannelConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerNumber.setStatus('mandatory')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7), )
if mibBuilder.loadTexts: fanTable.setStatus('mandatory')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1), ).setIndexNames((0, "ArrayManager-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('mandatory')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
fanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanName.setStatus('mandatory')
fanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanVendor.setStatus('mandatory')
fanState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 11, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("degraded", 6), ("removed", 11), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanState.setStatus('mandatory')
fanSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSeverity.setStatus('mandatory')
fanProbeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeUnit.setStatus('mandatory')
fanProbeMinWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMinWarning.setStatus('mandatory')
fanProbeMinCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMinCritical.setStatus('mandatory')
fanProbeMaxWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMaxWarning.setStatus('mandatory')
fanProbeMaxCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMaxCritical.setStatus('mandatory')
fanProbeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeCurrValue.setStatus('mandatory')
fan1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1PartNumber.setStatus('mandatory')
fan2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2PartNumber.setStatus('mandatory')
fanConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8), )
if mibBuilder.loadTexts: fanConnectionTable.setStatus('mandatory')
fanConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1), ).setIndexNames((0, "ArrayManager-MIB", "fanConnectionNumber"))
if mibBuilder.loadTexts: fanConnectionEntry.setStatus('mandatory')
fanConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionNumber.setStatus('mandatory')
fanConnectionFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionFanName.setStatus('mandatory')
fanConnectionFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionFanNumber.setStatus('mandatory')
fanConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionEnclosureName.setStatus('mandatory')
fanConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionEnclosureNumber.setStatus('mandatory')
powersupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9), )
if mibBuilder.loadTexts: powersupplyTable.setStatus('mandatory')
powersupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1), ).setIndexNames((0, "ArrayManager-MIB", "powersupplyNumber"))
if mibBuilder.loadTexts: powersupplyEntry.setStatus('mandatory')
powersupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyNumber.setStatus('mandatory')
powersupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyName.setStatus('mandatory')
powersupplyVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyVendor.setStatus('mandatory')
powersupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyState.setStatus('mandatory')
powersupplySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplySeverity.setStatus('mandatory')
powersupply1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupply1PartNumber.setStatus('mandatory')
powersupply2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupply2PartNumber.setStatus('mandatory')
powersupplyConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10), )
if mibBuilder.loadTexts: powersupplyConnectionTable.setStatus('mandatory')
powersupplyConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1), ).setIndexNames((0, "ArrayManager-MIB", "powersupplyConnectionNumber"))
if mibBuilder.loadTexts: powersupplyConnectionEntry.setStatus('mandatory')
powersupplyConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionNumber.setStatus('mandatory')
powersupplyConnectionPowersupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionPowersupplyName.setStatus('mandatory')
powersupplyConnectionPowersupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionPowersupplyNumber.setStatus('mandatory')
powersupplyConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionEnclosureName.setStatus('mandatory')
powersupplyConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powersupplyConnectionEnclosureNumber.setStatus('mandatory')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1), ).setIndexNames((0, "ArrayManager-MIB", "temperatureNumber"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureNumber.setStatus('mandatory')
temperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureName.setStatus('mandatory')
temperatureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureVendor.setStatus('mandatory')
temperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("offline", 4), ("degraded", 6), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureState.setStatus('mandatory')
temperatureSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSeverity.setStatus('mandatory')
temperatureProbeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUnit.setStatus('mandatory')
temperatureProbeMinWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinWarning.setStatus('mandatory')
temperatureProbeMinCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinCritical.setStatus('mandatory')
temperatureProbeMaxWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaxWarning.setStatus('mandatory')
temperatureProbeMaxCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaxCritical.setStatus('mandatory')
temperatureProbeCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeCurValue.setStatus('mandatory')
temperatureConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12), )
if mibBuilder.loadTexts: temperatureConnectionTable.setStatus('mandatory')
temperatureConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1), ).setIndexNames((0, "ArrayManager-MIB", "temperatureConnectionNumber"))
if mibBuilder.loadTexts: temperatureConnectionEntry.setStatus('mandatory')
temperatureConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionNumber.setStatus('mandatory')
temperatureConnectionTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionTemperatureName.setStatus('mandatory')
temperatureConnectionTemperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionTemperatureNumber.setStatus('mandatory')
temperatureConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionEnclosureName.setStatus('mandatory')
temperatureConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionEnclosureNumber.setStatus('mandatory')
enclosureManagementModuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13), )
if mibBuilder.loadTexts: enclosureManagementModuleTable.setStatus('mandatory')
enclosureManagementModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1), ).setIndexNames((0, "ArrayManager-MIB", "enclosureManagementModuleNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleEntry.setStatus('mandatory')
enclosureManagementModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setStatus('mandatory')
enclosureManagementModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleName.setStatus('mandatory')
enclosureManagementModuleVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleVendor.setStatus('mandatory')
enclosureManagementModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleState.setStatus('mandatory')
enclosureManagementModuleSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleSeverity.setStatus('mandatory')
enclosureManagementModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setStatus('mandatory')
enclosureManagementModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eMM", 1), ("terminationCard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleType.setStatus('mandatory')
enclosureManagementModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setStatus('mandatory')
enclosureManagementModuleMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleMaxSpeed.setStatus('mandatory')
enclosureManagementModuleConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14), )
if mibBuilder.loadTexts: enclosureManagementModuleConnectionTable.setStatus('mandatory')
enclosureManagementModuleConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1), ).setIndexNames((0, "ArrayManager-MIB", "enclosureManagementModuleConnectionNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEntry.setStatus('mandatory')
enclosureManagementModuleConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionNumber.setStatus('mandatory')
enclosureManagementModuleConnectionEMMName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMName.setStatus('mandatory')
enclosureManagementModuleConnectionEMMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMNumber.setStatus('mandatory')
enclosureManagementModuleConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureName.setStatus('mandatory')
enclosureManagementModuleConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureNumber.setStatus('mandatory')
logicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140))
virtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1), )
if mibBuilder.loadTexts: virtualDiskTable.setStatus('mandatory')
virtualDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1), ).setIndexNames((0, "ArrayManager-MIB", "virtualDiskNumber"))
if mibBuilder.loadTexts: virtualDiskEntry.setStatus('mandatory')
virtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNumber.setStatus('mandatory')
virtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskName.setStatus('mandatory')
virtualDiskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDeviceName.setStatus('mandatory')
virtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 15, 18, 24, 26, 35))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("verifying", 7), ("resynching", 15), ("failedRedundancy", 18), ("rebuilding", 24), ("formatting", 26), ("initializing", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskState.setStatus('mandatory')
virtualDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSeverity.setStatus('mandatory')
virtualDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLengthInMB.setStatus('mandatory')
virtualDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLengthInBytes.setStatus('mandatory')
virtualDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFreeSpaceInMB.setStatus('mandatory')
virtualDiskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFreeSpaceInBytes.setStatus('mandatory')
virtualDiskWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskWritePolicy.setStatus('mandatory')
virtualDiskReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("adaptiveReadAhead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskReadPolicy.setStatus('mandatory')
virtualDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("directIO", 1), ("cachedIO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCachePolicy.setStatus('mandatory')
virtualDiskLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18))).clone(namedValues=NamedValues(("concatenated", 1), ("raid-0", 2), ("raid-1", 3), ("raid-2", 4), ("raid-3", 5), ("raid-4", 6), ("raid-5", 7), ("raid-6", 8), ("raid-7", 9), ("raid-10", 10), ("raid-30", 11), ("raid-50", 12), ("addSpares", 13), ("deleteLogical", 14), ("transformLogical", 15), ("raid-0-plus-1", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLayout.setStatus('mandatory')
virtualDiskCurStripeSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInMB.setStatus('mandatory')
virtualDiskCurStripeSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInBytes.setStatus('mandatory')
virtualDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskChannel.setStatus('mandatory')
virtualDiskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskTargetID.setStatus('mandatory')
virtualDiskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLunID.setStatus('mandatory')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1), ).setIndexNames((0, "ArrayManager-MIB", "diskNumber"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
diskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('mandatory')
diskVirtualDiskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVirtualDiskDeviceName.setStatus('mandatory')
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 24, 25, 40))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("rebuild", 24), ("noMedia", 25), ("notReady", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('mandatory')
diskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSeverity.setStatus('mandatory')
diskLdmDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dynamic", 1), ("removable", 2), ("cd-rom", 3), ("basic", 4), ("basicNoSignature", 5), ("oem", 6), ("dvd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLdmDeviceType.setStatus('mandatory')
diskDgName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDgName.setStatus('mandatory')
diskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLengthInMB.setStatus('mandatory')
diskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLengthInBytes.setStatus('mandatory')
diskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeSpaceInMB.setStatus('mandatory')
diskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeSpaceInBytes.setStatus('mandatory')
diskAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAdapter.setStatus('mandatory')
diskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPort.setStatus('mandatory')
diskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTargetID.setStatus('mandatory')
diskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLunID.setStatus('mandatory')
diskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVendor.setStatus('mandatory')
arrayDiskLogicalConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3), )
if mibBuilder.loadTexts: arrayDiskLogicalConnectionTable.setStatus('mandatory')
arrayDiskLogicalConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskLogicalConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskLogicalConnectionEntry.setStatus('mandatory')
arrayDiskLogicalConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionNumber.setStatus('mandatory')
arrayDiskLogicalConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskName.setStatus('mandatory')
arrayDiskLogicalConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskNumber.setStatus('mandatory')
arrayDiskLogicalConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskName.setStatus('mandatory')
arrayDiskLogicalConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskNumber.setStatus('mandatory')
arrayDiskLogicalConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskName.setStatus('mandatory')
arrayDiskLogicalConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskNumber.setStatus('mandatory')
subDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4), )
if mibBuilder.loadTexts: subDiskTable.setStatus('mandatory')
subDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1), ).setIndexNames((0, "ArrayManager-MIB", "subDiskNumber"))
if mibBuilder.loadTexts: subDiskEntry.setStatus('mandatory')
subDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskNumber.setStatus('mandatory')
subDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskName.setStatus('mandatory')
subDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskState.setStatus('mandatory')
subDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskSeverity.setStatus('mandatory')
subDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskLengthInMB.setStatus('mandatory')
subDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskLengthInBytes.setStatus('mandatory')
partitionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5), )
if mibBuilder.loadTexts: partitionTable.setStatus('mandatory')
partitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1), ).setIndexNames((0, "ArrayManager-MIB", "partitionNumber"))
if mibBuilder.loadTexts: partitionEntry.setStatus('mandatory')
partitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionNumber.setStatus('mandatory')
partitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
partitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionState.setStatus('mandatory')
partitionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSeverity.setStatus('mandatory')
partitionLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLengthInMB.setStatus('mandatory')
partitionLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLengthInBytes.setStatus('mandatory')
partitionLdmVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2), ("logical", 3), ("cdrom", 4), ("simple", 5), ("stripe", 6), ("mirror", 7), ("raid5", 8), ("span", 9), ("dynamic", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLdmVolumeType.setStatus('mandatory')
extendedPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6), )
if mibBuilder.loadTexts: extendedPartitionTable.setStatus('mandatory')
extendedPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1), ).setIndexNames((0, "ArrayManager-MIB", "extendedPartitionNumber"))
if mibBuilder.loadTexts: extendedPartitionEntry.setStatus('mandatory')
extendedPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionNumber.setStatus('mandatory')
extendedPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionName.setStatus('mandatory')
extendedPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionState.setStatus('mandatory')
extendedPartitionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionSeverity.setStatus('mandatory')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7), )
if mibBuilder.loadTexts: volumeTable.setStatus('mandatory')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1), ).setIndexNames((0, "ArrayManager-MIB", "volumeNumber"))
if mibBuilder.loadTexts: volumeEntry.setStatus('mandatory')
volumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('mandatory')
volumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeDriveLetter.setStatus('mandatory')
volumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 18, 25, 26))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("failedRedundancy", 18), ("noMedia", 25), ("formatting", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeState.setStatus('mandatory')
volumeSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failrue", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSeverity.setStatus('mandatory')
volumeLdmVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2), ("logical", 3), ("cd-rom", 4), ("simple", 5), ("stripe", 6), ("mirrror", 7), ("raid5", 8), ("span", 9), ("dynamic", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLdmVolumeType.setStatus('mandatory')
volumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLabel.setStatus('mandatory')
volumeFSType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFSType.setStatus('mandatory')
volumeLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLengthInMB.setStatus('mandatory')
volumeLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLengthInBytes.setStatus('mandatory')
volumeFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpaceInMB.setStatus('mandatory')
volumeFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpaceInBytes.setStatus('mandatory')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8), )
if mibBuilder.loadTexts: plexTable.setStatus('mandatory')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1), ).setIndexNames((0, "ArrayManager-MIB", "plexNumber"))
if mibBuilder.loadTexts: plexEntry.setStatus('mandatory')
plexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexNumber.setStatus('mandatory')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('mandatory')
plexStripeWidthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStripeWidthInMB.setStatus('mandatory')
plexStripeWidthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStripeWidthInBytes.setStatus('mandatory')
plexColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexColumns.setStatus('mandatory')
plexLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stripedSubdisks", 1), ("concatenatedSubdisks", 2), ("raidLayout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexLayout.setStatus('mandatory')
basicDiskExtendedConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9), )
if mibBuilder.loadTexts: basicDiskExtendedConnectionTable.setStatus('mandatory')
basicDiskExtendedConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1), ).setIndexNames((0, "ArrayManager-MIB", "basicDiskExtendedConnectionNumber"))
if mibBuilder.loadTexts: basicDiskExtendedConnectionEntry.setStatus('mandatory')
basicDiskExtendedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionNumber.setStatus('mandatory')
basicDiskExtendedConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionArrayDiskName.setStatus('mandatory')
basicDiskExtendedConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionArrayDiskNumber.setStatus('mandatory')
basicDiskExtendedConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVirtualDiskName.setStatus('mandatory')
basicDiskExtendedConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVirtualDiskNumber.setStatus('mandatory')
basicDiskExtendedConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionDiskName.setStatus('mandatory')
basicDiskExtendedConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionDiskNumber.setStatus('mandatory')
basicDiskExtendedConnectionExtendedPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionExtendedPartitionName.setStatus('mandatory')
basicDiskExtendedConnectionExtendedPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionExtendedPartitionNumber.setStatus('mandatory')
basicDiskExtendedConnectionPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionPartitionName.setStatus('mandatory')
basicDiskExtendedConnectionPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionPartitionNumber.setStatus('mandatory')
basicDiskExtendedConnectionVolumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVolumeDriveLetter.setStatus('mandatory')
basicDiskExtendedConnectionVolumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVolumeNumber.setStatus('mandatory')
basicDiskNonExtendedConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10), )
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionTable.setStatus('mandatory')
basicDiskNonExtendedConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1), ).setIndexNames((0, "ArrayManager-MIB", "basicDiskNonExtendedConnectionNumber"))
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionEntry.setStatus('mandatory')
basicDiskNonExtendedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionNumber.setStatus('mandatory')
basicDiskNonExtendedConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionArrayDiskName.setStatus('mandatory')
basicDiskNonExtendedConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionArrayDiskNumber.setStatus('mandatory')
basicDiskNonExtendedConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVirtualDiskName.setStatus('mandatory')
basicDiskNonExtendedConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVirtualDiskNumber.setStatus('mandatory')
basicDiskNonExtendedConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionDiskName.setStatus('mandatory')
basicDiskNonExtendedConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionDiskNumber.setStatus('mandatory')
basicDiskNonExtendedConnectionPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionPartitionName.setStatus('mandatory')
basicDiskNonExtendedConnectionPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionPartitionNumber.setStatus('mandatory')
basicDiskNonExtendedConnectionVolumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVolumeDriveLetter.setStatus('mandatory')
basicDiskNonExtendedConnectionVolumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVolumeNumber.setStatus('mandatory')
dynamicDiskConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11), )
if mibBuilder.loadTexts: dynamicDiskConnectionTable.setStatus('mandatory')
dynamicDiskConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1), ).setIndexNames((0, "ArrayManager-MIB", "dynamicDiskConnectionNumber"))
if mibBuilder.loadTexts: dynamicDiskConnectionEntry.setStatus('mandatory')
dynamicDiskConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionNumber.setStatus('mandatory')
dynamicDiskConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionArrayDiskName.setStatus('mandatory')
dynamicDiskConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionArrayDiskNumber.setStatus('mandatory')
dynamicDiskConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVirtualDiskName.setStatus('mandatory')
dynamicDiskConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVirtualDiskNumber.setStatus('mandatory')
dynamicDiskConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionDiskName.setStatus('mandatory')
dynamicDiskConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionDiskNumber.setStatus('mandatory')
dynamicDiskConnectionSubDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionSubDiskName.setStatus('mandatory')
dynamicDiskConnectionSubDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionSubDiskNumber.setStatus('mandatory')
dynamicDiskConnectionPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionPlexName.setStatus('mandatory')
dynamicDiskConnectionPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDiskConnectionPlexNumber.setStatus('mandatory')
dynamicDiskConnectionVolumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVolumeDriveLetter.setStatus('mandatory')
dynamicDiskConnectionVolumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVolumeNumber.setStatus('mandatory')
aryMgrEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200))
controllerNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 201), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNameEv.setStatus('mandatory')
channelNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumberEv.setStatus('mandatory')
targetIDEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIDEv.setStatus('mandatory')
virtualDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 204), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameEv.setStatus('mandatory')
arrayDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 205), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNameEv.setStatus('mandatory')
oldVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 206), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldVDConfigEv.setStatus('mandatory')
newVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 207), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newVDConfigEv.setStatus('mandatory')
enclosureNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumberEv.setStatus('mandatory')
unitNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNumberEv.setStatus('mandatory')
enclosureNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 210), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNameEv.setStatus('mandatory')
unitNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 211), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNameEv.setStatus('mandatory')
timeEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeEv.setStatus('mandatory')
volumeNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 213), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNameEv.setStatus('mandatory')
enclosureUnitNamesEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 214), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureUnitNamesEv.setStatus('mandatory')
virtualDiskNameNewEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 215), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameNewEv.setStatus('mandatory')
device1NameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device1NameEv.setStatus('mandatory')
senseKeyEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 217), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: senseKeyEv.setStatus('mandatory')
senseCodeEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 218), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: senseCodeEv.setStatus('mandatory')
senseQualifierEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 219), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: senseQualifierEv.setStatus('mandatory')
eMMFWVersion0Ev = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 220), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMMFWVersion0Ev.setStatus('mandatory')
eMMFWVersion1Ev = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 221), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMMFWVersion1Ev.setStatus('mandatory')
rebuildRateEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 222), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rebuildRateEv.setStatus('mandatory')
arrayDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,500)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
arrayDiskRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,501)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
arrayDiskOffline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,502)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
arrayDiskDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,503)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
arrayDiskInserted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,504)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
virtualDiskCreated = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,505)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
virtualDiskDeleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,506)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
virtualDiskConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,507)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"), ("ArrayManager-MIB", "oldVDConfigEv"), ("ArrayManager-MIB", "newVDConfigEv"))
virtualDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,508)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
virtualDiskDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,509)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdFailedRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,510)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
checkConsistencyStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,520)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdFormatStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,521)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adFormatStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,522)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,523)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,524)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdReconfigStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,525)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"), ("ArrayManager-MIB", "oldVDConfigEv"), ("ArrayManager-MIB", "newVDConfigEv"))
vdRebuildStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,526)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adRebuildStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,527)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
adDiagStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,528)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
checkConsistencyCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,529)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdFormatCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,530)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adFormatCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,531)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdInitializeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,532)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adInitializeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,533)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdReconfigCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,534)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdRebuildCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,535)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adRebuildCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,536)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
adDiagCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,537)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
checkConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,538)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdFormatFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,539)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adFormatFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,540)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,541)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,542)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdReconfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,543)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdRebuildFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,544)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adRebuildFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,545)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
adDiagFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,546)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
checkConsistencyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,547)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdFormatCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,548)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adFormatCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,549)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,550)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,551)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
vdReconfigCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,552)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
vdRebuildCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,553)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
adRebuildCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,554)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
adDiagCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,555)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
percPredictiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,570)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
percSCSISenseData = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,571)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
percPauseIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,572)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "timeEv"))
percResumeIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,573)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
percHotSpareAssign = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,574)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
percHotSpareUnAssign = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,575)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
cntrlBatteryNeedsReconditioning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,579)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
cntrlBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,580)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
cntrlBatteryRecondition = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,581)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
cntrlBatteryReconComplete = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,582)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
cntrlPauseIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,583)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
cntrlResumeIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,584)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
perc2SmartFPTExceeded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,585)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
perc2SmartConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,586)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
perc2SmartWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,587)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
perc2SmartWarningTemp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,588)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
perc2SmartWarningDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,589)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
perc2SmartFPTExceededTest = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,590)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
enclosureAlertTempWarnMax = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,591)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureAlertTempWarnMin = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,592)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureAlertTempErrMax = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,593)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureAlertTempErrMin = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,594)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureGenericFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,595)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureGenericOffline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,596)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureGenericUnknown = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,597)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureGenericWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,598)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
enclosureGenericDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,600)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureUnitNamesEv"))
alertShutdownEnclosure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,602)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
alertShutdownServer = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,603)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
alertPausedCheckConsistency = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,604)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertResumedCheckConsistency = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,605)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertVirtualDiskSplitMirror = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,606)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertVirtualDiskUnmirror = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,607)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertRenameVirtualDisk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,608)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"), ("ArrayManager-MIB", "virtualDiskNameNewEv"))
alertGenericReady = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,609)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
alertCommTimeout = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,610)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
alertCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,611)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
alertCommRestored = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,612)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
genericEvent_DATABASE_UP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,650))
genericEvent_DATABASE_DOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,651))
alertMegalibTimeout = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,668)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
alertScsiSenseFormatFail = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,670)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"), ("ArrayManager-MIB", "senseKeyEv"), ("ArrayManager-MIB", "senseCodeEv"), ("ArrayManager-MIB", "senseQualifierEv"))
alertScsiSenseSectorReassign = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,671)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"), ("ArrayManager-MIB", "senseKeyEv"), ("ArrayManager-MIB", "senseCodeEv"), ("ArrayManager-MIB", "senseQualifierEv"))
alertEmmFwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,672)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "eMMFWVersion0Ev"), ("ArrayManager-MIB", "eMMFWVersion1Ev"))
alertConserveCacheModeEnable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,673)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
alertConserveCacheModeDisable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,674)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
alertEnclosureFwDownload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,675)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "eMMFWVersion0Ev"))
alertEnclosureAlarmEnable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,676)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
alertEnclosureAlarmDisable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,677)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
alertControllerAlarmEnable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,678)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
alertControllerAlarmDisable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,679)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
alertControllerRebuildRate = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,680)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "rebuildRateEv"))
alertArrayDiskForcedOnline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,681)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
alertArrayDiskForcedOffline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,682)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
alertTaskBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,683)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertCancelBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,684)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertFailBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,685)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
alertCompleteBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,686)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
enclosureGenericNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,687)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureUnitNamesEv"))
pv660fEvent_PHYSDEV_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,700)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_HOTSPARE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,701)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_HARD_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,702)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_PFA = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,703)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_AUTO_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,704)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_MANUAL_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,705)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,706)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,707)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,708)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,709)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,710)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,711)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,712)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_GONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,713)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_UNCONFIGURED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,714)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_EXPANDCAPACITY_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,715)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,716)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,717)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_COMMAND_TIMEOUT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,718)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_COMMAND_ABORT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,719)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_COMMAND_RETRIED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,720)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_PARITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,721)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_SOFT_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,722)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_MISC_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,723)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_RESET = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,724)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_ACTIVESPARE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,725)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_WARMSPARE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,726)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REQSENSE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,727)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_INIT_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,728)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_INIT_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,729)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_INIT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,730)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_INIT_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,731)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_WRITEREC_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,732)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_RESET_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,733)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_DBLCC_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,734)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REMOVED_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,735)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_GROSSERR_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,736)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_BADTAG_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,737)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_SCSITMO_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,738)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_SYSRESET_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,739)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_BSYPAR_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,740)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_BYCMD_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,741)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_SELTMO_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,742)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_SEQERR_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,743)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,744)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_NOTRDY_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,745)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_MISSING_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,746)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_CODWRFAIL_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,747)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,748)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,749)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_STANDBY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,750)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,751)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_ID_MISMATCH = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,752)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_FAILED_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,753)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_OFFSET_SET = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,754)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_SET_BUS_WIDTH = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,755)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_MISSING_ONSTARTUP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,756)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_REBUILD_START_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,757)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,758)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,759)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_PHYSDEV_STANDBY_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,760)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,761)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_SYSDEV_CHECK_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,762)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_CHECK_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,763)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_CHECK_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,764)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_CHECK_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,765)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,766)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,767)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,768)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,769)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,770)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_AUTO_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,771)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_MANUAL_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,772)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_REBUILD_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,773)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_REBUILD_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,774)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_REBUILD_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,775)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,776)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,777)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_INIT_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,778)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_INIT_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,779)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_INIT_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,780)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_INIT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,781)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,782)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_GONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,783)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_EXPANDCAPACITY_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,784)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,785)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,786)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BADBLOCK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,787)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_SIZECHANGED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,788)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_TYPECHANGED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,789)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BADDATABLOCK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,790)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_WR_LUN_MAP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,791)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,792)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,793)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,794)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,795)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_STANDBY_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,796)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_FMTFAN_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,797)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMTFAN_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,798)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_AEMI_FAN_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,799)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_FMTFAN_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,800)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
pv660fEvent_FMTPOWER_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,801)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMTPOWER_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,802)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_AEMI_PWR_SUPPLY_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,803)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_FMTPOWER_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,804)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
pv660fEvent_FMTHEAT_BAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,805)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_FMTHEAT_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,806)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMTHEAT_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,807)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_AEMI_OVER_TEMPERATURE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,808)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_FMTHEAT_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,809)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
pv660fEvent_FMTSTWK_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,810)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_FMTSTWK_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,811)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_FMTSTWK_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,812)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_FMT_UPS_DISABLED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,813)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMT_UPS_AC_FAIL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,814)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMT_UPS_BAT_LOW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,815)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMT_UPS_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,816)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FMT_UPS_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,817)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_ENCLFAN_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,818)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLFAN_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,819)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLFAN_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,820)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLPOWER_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,821)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLPOWER_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,822)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLPOWER_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,823)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLHEAT_BAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,824)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLHEAT_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,825)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLHEAT_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,826)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLHEAT_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,827)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLACCESS_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,828)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
pv660fEvent_ENCLACCESS_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,829)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
pv660fEvent_ENCLACCESS_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,830)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLSES_SOFTADDR_OCCURRED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,831)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
pv660fEvent_ENCLACCESS_READY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,832)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_ENCLHEAT_UNKNOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,833)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLPOWER_UNKNOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,834)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_ENCLFAN_UNKNOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,835)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
pv660fEvent_SYSTEM_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,836))
pv660fEvent_CTLDEV_WRITEBACK_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,837)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_STATE_TABLE_FULL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,838)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,839)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_RESET = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,840)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,841)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_GONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,842)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,843)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_POWER_LOW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,844)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_POWER_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,845)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_POWER_OFF = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,846)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_POWER_ON = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,847)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,848)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,849)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,850)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_RECOND_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,851)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_RECOND_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,852)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_RECOND_ABORT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,853)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_INSTALLATION_ABORTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,854)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_FIRMWARE_MISMATCH = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,855)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_CTLDEV_BBU_NORESPONSE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,856)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_WARM_BOOT_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,857)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_CONSERV_CACHE_MODE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,858)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NORMAL_CACHE_MODE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,859)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_DEV_START_CMPLT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,860)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,861)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_HARD_ECC_CORRECTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,862)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_CTLDEV_BBU_RECOND_NEEDED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,863)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_REMOVED_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,864)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,865)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,866)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_RELINQUISH_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,867)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_INSERTED_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,868)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_DUAL_ENABLED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,869)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_KILL_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,870)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEXUS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,871)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,872)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BAD_MAC_ADDRESS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,873)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,874)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,875)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_SYSTEM_STARTED_NEW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,876))
pv660fEvent_SYSTEM_SIZE_TABLE_FULL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,877))
pv660fEvent_SYSTEM_USER_LOGGED_IN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,878))
pv660fEvent_SYSTEM_USER_LOGGED_OUT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,879))
pv660fEvent_SYSTEM_ALIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,880))
pv660fEvent_SYSTEM_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,881))
pv660fEvent_AUTOBOOT_CHANGED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,882)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CHANNEL_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,883)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_CHANNEL_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,884)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_CHANNEL_SCSI_BUS_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,885)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_CHANNEL_SCSI_BUS_ALIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,886)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_CHANNEL_FIBER_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,887)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_CHANNEL_FIBER_ALIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,888)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_LOG_EMPTY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,889)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_LOG_OUT_SYNC = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,890)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_LOG_REQUEST_SENSE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,891)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_LOG_SET_RTC = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,892)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
pv660fEvent_CFG_NEW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,893)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CFG_CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,894)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CFG_INVALID = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,895)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CFG_COD_ACCESS_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,896)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CFG_COD_CONVERTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,897)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CFG_COD_IMPORT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,898)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_DEBUG_DUMP_GENERATED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,899)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,900)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_FATAL_HANG = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,901))
pv660fEvent_FATAL_BRKP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,902))
pv660fEvent_I960_HW_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,903))
pv660fEvent_SARM_HW_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,904))
pv660fEvent_SYSDEV_BG_INIT_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,905)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BG_INIT_STOPPED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,906)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BG_INIT_PAUSED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,907)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BG_INIT_RESTARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,908)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BG_INIT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,909)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_SYSDEV_BG_INIT_COMPLETED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,910)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_CTLDEV_BBU_CALIBRATE_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,911)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,912)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,913)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_BBU_NO_BATTERY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,914)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,915)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_CTLDEV_IN_CLUSTER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,916))
pv660fEvent_CTLDEV_NOT_IN_CLUSTER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,917))
pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,918)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,919)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,920)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,921)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,922)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,923)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,924)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,925)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,926)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,927)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
pv660fEvent_SES_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,980)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
pv660fEvent_ENC_SES_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,981)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
fsysPro_DISK_CAPACITY_WARNING = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,10804)).setObjects(("ArrayManager-MIB", "volumeNameEv"))
fsysPro_DISK_CAPACITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,10805)).setObjects(("ArrayManager-MIB", "volumeNameEv"))
mibBuilder.exportSymbols("ArrayManager-MIB", subDiskLengthInBytes=subDiskLengthInBytes, alertConserveCacheModeEnable=alertConserveCacheModeEnable, volumeLdmVolumeType=volumeLdmVolumeType, arrayDiskBusType=arrayDiskBusType, pv660fEvent_ENCLACCESS_OK=pv660fEvent_ENCLACCESS_OK, pv660fEvent_CTLDEV_FOUND=pv660fEvent_CTLDEV_FOUND, alertScsiSenseSectorReassign=alertScsiSenseSectorReassign, agentGetTimeout=agentGetTimeout, checkConsistencyFailed=checkConsistencyFailed, alertShutdownServer=alertShutdownServer, channelTable=channelTable, controllerDriveChannelCount=controllerDriveChannelCount, extendedPartitionNumber=extendedPartitionNumber, enclosureProcessorVersion=enclosureProcessorVersion, pv660fEvent_CTLDEV_GONE=pv660fEvent_CTLDEV_GONE, enclosureManagementModuleVendor=enclosureManagementModuleVendor, fanName=fanName, channelTermination=channelTermination, diskEntry=diskEntry, pv660fEvent_SYSDEV_INIT_DONE=pv660fEvent_SYSDEV_INIT_DONE, temperatureProbeMaxCritical=temperatureProbeMaxCritical, diskLengthInBytes=diskLengthInBytes, vdFormatCancelled=vdFormatCancelled, alertCommTimeout=alertCommTimeout, arrayDiskEnclosureConnectionNumber=arrayDiskEnclosureConnectionNumber, agentHostname=agentHostname, powersupply2PartNumber=powersupply2PartNumber, basicDiskNonExtendedConnectionTable=basicDiskNonExtendedConnectionTable, eMMFWVersion1Ev=eMMFWVersion1Ev, pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE=pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE, pv660fEvent_ENCLACCESS_CRITICAL=pv660fEvent_ENCLACCESS_CRITICAL, pv660fEvent_PHYSDEV_REQSENSE=pv660fEvent_PHYSDEV_REQSENSE, enclosureChannelNumber=enclosureChannelNumber, arrayDiskFailed=arrayDiskFailed, alertConserveCacheModeDisable=alertConserveCacheModeDisable, pv660fEvent_LOG_SET_RTC=pv660fEvent_LOG_SET_RTC, percPredictiveFailure=percPredictiveFailure, subDiskState=subDiskState, adFormatStarted=adFormatStarted, channelNumberEv=channelNumberEv, volumeNumber=volumeNumber, pv660fEvent_CTLDEV_WRITEBACK_ERROR=pv660fEvent_CTLDEV_WRITEBACK_ERROR, plexLayout=plexLayout, pv660fEvent_PHYSDEV_EXPANDCAPACITY_START=pv660fEvent_PHYSDEV_EXPANDCAPACITY_START, pv660fEvent_PHYSDEV_FAILED_START=pv660fEvent_PHYSDEV_FAILED_START, vdFailedRedundancy=vdFailedRedundancy, pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE=pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE, pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR=pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR, volumeNameEv=volumeNameEv, providerData=providerData, enclosureState=enclosureState, temperatureConnectionNumber=temperatureConnectionNumber, pv660fEvent_SYSTEM_ALIVE=pv660fEvent_SYSTEM_ALIVE, basicDiskNonExtendedConnectionVirtualDiskNumber=basicDiskNonExtendedConnectionVirtualDiskNumber, arrayDiskFreeSpaceInBytes=arrayDiskFreeSpaceInBytes, alertRenameVirtualDisk=alertRenameVirtualDisk, genericEvent_DATABASE_UP=genericEvent_DATABASE_UP, pv660fEvent_SYSDEV_SIZECHANGED=pv660fEvent_SYSDEV_SIZECHANGED, fanProbeUnit=fanProbeUnit, plexStripeWidthInBytes=plexStripeWidthInBytes, pv660fEvent_FMTPOWER_FAILED=pv660fEvent_FMTPOWER_FAILED, pv660fEvent_SYSDEV_FOUND=pv660fEvent_SYSDEV_FOUND, pv660fEvent_SYSDEV_AUTO_REBUILD_START=pv660fEvent_SYSDEV_AUTO_REBUILD_START, pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED=pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED, targetIDEv=targetIDEv, adDiagCompleted=adDiagCompleted, fanEntry=fanEntry, volumeDriveLetter=volumeDriveLetter, basicDiskExtendedConnectionNumber=basicDiskExtendedConnectionNumber, pv660fEvent_CTLDEV_INSTALLATION_ABORTED=pv660fEvent_CTLDEV_INSTALLATION_ABORTED, virtualDiskNameEv=virtualDiskNameEv, arrayDiskEnclosureConnectionTable=arrayDiskEnclosureConnectionTable, basicDiskExtendedConnectionVolumeNumber=basicDiskExtendedConnectionVolumeNumber, controllerC0BatteryState=controllerC0BatteryState, pv660fEvent_CTLDEV_DEV_START_CMPLT=pv660fEvent_CTLDEV_DEV_START_CMPLT, enclosureManagementModuleState=enclosureManagementModuleState, fanConnectionEnclosureName=fanConnectionEnclosureName, enclosureManagementModuleConnectionEnclosureNumber=enclosureManagementModuleConnectionEnclosureNumber, pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT=pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT, pv660fEvent_AEMI_OVER_TEMPERATURE=pv660fEvent_AEMI_OVER_TEMPERATURE, alertCompleteBGI=alertCompleteBGI, pv660fEvent_PHYSDEV_SCSITMO_DEAD=pv660fEvent_PHYSDEV_SCSITMO_DEAD, perc2SmartConfigChange=perc2SmartConfigChange, enclosureManagementModulePartNumber=enclosureManagementModulePartNumber, pv660fEvent_PHYSDEV_SET_BUS_WIDTH=pv660fEvent_PHYSDEV_SET_BUS_WIDTH, agentSystemGlobalStatus=agentSystemGlobalStatus, fan1PartNumber=fan1PartNumber, globalData=globalData, pv660fEvent_PHYSDEV_COMMAND_ABORT=pv660fEvent_PHYSDEV_COMMAND_ABORT, pv660fEvent_PHYSDEV_BSYPAR_DEAD=pv660fEvent_PHYSDEV_BSYPAR_DEAD, pv660fEvent_CTLDEV_ONLINE=pv660fEvent_CTLDEV_ONLINE, adDiagFailed=adDiagFailed, virtualDiskLunID=virtualDiskLunID, cntrlBatteryRecondition=cntrlBatteryRecondition, fanProbeMinCritical=fanProbeMinCritical, basicDiskNonExtendedConnectionEntry=basicDiskNonExtendedConnectionEntry, arrayDiskEnclosureID=arrayDiskEnclosureID, controllerC1Channel=controllerC1Channel, vdRebuildCompleted=vdRebuildCompleted, diskPort=diskPort, pv660fEvent_CTLDEV_BBU_RECOND_ABORT=pv660fEvent_CTLDEV_BBU_RECOND_ABORT, dell=dell, pv660fEvent_SYSDEV_CHECK_DONE=pv660fEvent_SYSDEV_CHECK_DONE, enclosureESM1PartNumber=enclosureESM1PartNumber, arrayDiskLengthInMB=arrayDiskLengthInMB, pv660fEvent_PHYSDEV_REBUILD_ERROR=pv660fEvent_PHYSDEV_REBUILD_ERROR, pv660fEvent_FATAL_BRKP=pv660fEvent_FATAL_BRKP, temperatureEntry=temperatureEntry, pv660fEvent_SES_ERR=pv660fEvent_SES_ERR, pv660fEvent_FMT_UPS_DISABLED=pv660fEvent_FMT_UPS_DISABLED, controllerC1Port1WWN=controllerC1Port1WWN, pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE=pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE, agentIPAddress=agentIPAddress, arrayDiskTargetID=arrayDiskTargetID, temperatureConnectionEntry=temperatureConnectionEntry, temperatureConnectionTemperatureName=temperatureConnectionTemperatureName, pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS=pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS, adInitializeFailed=adInitializeFailed, controllerC0Port1WWN=controllerC0Port1WWN, fanNumber=fanNumber, pv660fEvent_CTLDEV_BBU_POWER_LOW=pv660fEvent_CTLDEV_BBU_POWER_LOW, alertVirtualDiskSplitMirror=alertVirtualDiskSplitMirror, adInitializeCompleted=adInitializeCompleted, enclosureAlertTempWarnMin=enclosureAlertTempWarnMin, pv660fEvent_FMTFAN_OK=pv660fEvent_FMTFAN_OK, fanConnectionNumber=fanConnectionNumber, basicDiskExtendedConnectionDiskNumber=basicDiskExtendedConnectionDiskNumber, controllerBatteryChargeCount=controllerBatteryChargeCount, basicDiskNonExtendedConnectionNumber=basicDiskNonExtendedConnectionNumber, checkConsistencyCompleted=checkConsistencyCompleted, enclosureSCSIID=enclosureSCSIID, adFormatCancelled=adFormatCancelled, powersupplyVendor=powersupplyVendor, pv660fEvent_PHYSDEV_OFFLINE=pv660fEvent_PHYSDEV_OFFLINE, pv660fEvent_PHYSDEV_CODWRFAIL_DEAD=pv660fEvent_PHYSDEV_CODWRFAIL_DEAD, fanProbeCurrValue=fanProbeCurrValue, channelName=channelName, providerStatus=providerStatus, virtualDiskReadPolicy=virtualDiskReadPolicy, vdInitializeFailed=vdInitializeFailed, subDiskTable=subDiskTable, basicDiskNonExtendedConnectionDiskNumber=basicDiskNonExtendedConnectionDiskNumber, virtualDiskFailed=virtualDiskFailed, cntrlBatteryLow=cntrlBatteryLow, perc2SmartWarningDegraded=perc2SmartWarningDegraded, pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST=pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST, fanProbeMaxCritical=fanProbeMaxCritical, pv660fEvent_FMTSTWK_FAILED=pv660fEvent_FMTSTWK_FAILED, providerVersion=providerVersion, arrayDiskLunID=arrayDiskLunID, pv660fEvent_ENCLPOWER_OK=pv660fEvent_ENCLPOWER_OK, providerName=providerName, arrayDiskChannelConnectionControllerName=arrayDiskChannelConnectionControllerName, pv660fEvent_SYSDEV_REBUILD_DONE=pv660fEvent_SYSDEV_REBUILD_DONE, alertEnclosureAlarmDisable=alertEnclosureAlarmDisable, providerEntry=providerEntry, powersupplyConnectionPowersupplyNumber=powersupplyConnectionPowersupplyNumber, pv660fEvent_SYSDEV_BADBLOCK=pv660fEvent_SYSDEV_BADBLOCK, arrayMgrAgentVendor=arrayMgrAgentVendor, percResumeIO=percResumeIO, pv660fEvent_SYSDEV_BG_INIT_STOPPED=pv660fEvent_SYSDEV_BG_INIT_STOPPED, alertShutdownEnclosure=alertShutdownEnclosure, percHotSpareUnAssign=percHotSpareUnAssign, virtualDiskConfigChanged=virtualDiskConfigChanged, dynamicDiskConnectionVirtualDiskNumber=dynamicDiskConnectionVirtualDiskNumber, cntrlBatteryNeedsReconditioning=cntrlBatteryNeedsReconditioning, arrayDiskEnclosureConnectionEntry=arrayDiskEnclosureConnectionEntry, pv660fEvent_PHYSDEV_HARD_ERROR=pv660fEvent_PHYSDEV_HARD_ERROR, pv660fEvent_FMTHEAT_NOTPRESENT=pv660fEvent_FMTHEAT_NOTPRESENT, virtualDiskCurStripeSizeInMB=virtualDiskCurStripeSizeInMB, controllerTable=controllerTable, subDiskLengthInMB=subDiskLengthInMB, pv660fEvent_LOG_EMPTY=pv660fEvent_LOG_EMPTY, pv660fEvent_ENCLFAN_FAILED=pv660fEvent_ENCLFAN_FAILED, pv660fEvent_SYSDEV_WR_LUN_MAP=pv660fEvent_SYSDEV_WR_LUN_MAP, arrayMgrSoftwareDescription=arrayMgrSoftwareDescription, volumeLengthInBytes=volumeLengthInBytes, plexTable=plexTable, pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED=pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED, basicDiskExtendedConnectionVolumeDriveLetter=basicDiskExtendedConnectionVolumeDriveLetter, pv660fEvent_CTLDEV_DEAD=pv660fEvent_CTLDEV_DEAD, pv660fEvent_CTLDEV_OFFLINE=pv660fEvent_CTLDEV_OFFLINE, vdFormatCompleted=vdFormatCompleted, pv660fEvent_SYSDEV_INIT_STARTED=pv660fEvent_SYSDEV_INIT_STARTED, vdReconfigCancelled=vdReconfigCancelled, fanSeverity=fanSeverity, pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED=pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED, pv660fEvent_PHYSDEV_REBUILD=pv660fEvent_PHYSDEV_REBUILD, enclosureAlarm=enclosureAlarm, pv660fEvent_ENCLHEAT_BAD=pv660fEvent_ENCLHEAT_BAD, timeEv=timeEv, arrayDiskTable=arrayDiskTable, senseKeyEv=senseKeyEv, pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN=pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN, pv660fEvent_CFG_COD_IMPORT_FAILED=pv660fEvent_CFG_COD_IMPORT_FAILED, diskTable=diskTable, pv660fEvent_CTLDEV_CONSERV_CACHE_MODE=pv660fEvent_CTLDEV_CONSERV_CACHE_MODE, temperatureProbeMinCritical=temperatureProbeMinCritical, diskName=diskName, powersupplyTable=powersupplyTable, adRebuildCancelled=adRebuildCancelled, pv660fEvent_PHYSDEV_REBUILD_CANCELED=pv660fEvent_PHYSDEV_REBUILD_CANCELED, eMMFWVersion0Ev=eMMFWVersion0Ev, arrayDiskUsedSpaceInMB=arrayDiskUsedSpaceInMB, pv660fEvent_SYSDEV_REBUILD_ERROR=pv660fEvent_SYSDEV_REBUILD_ERROR, extendedPartitionState=extendedPartitionState, partitionEntry=partitionEntry, powersupplyEntry=powersupplyEntry, arrayDiskLogicalConnectionEntry=arrayDiskLogicalConnectionEntry, pv660fEvent_FMTPOWER_OK=pv660fEvent_FMTPOWER_OK, partitionLengthInBytes=partitionLengthInBytes, pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID=pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID, pv660fEvent_SYSTEM_STARTED_NEW=pv660fEvent_SYSTEM_STARTED_NEW, pv660fEvent_PHYSDEV_WRITEREC_DEAD=pv660fEvent_PHYSDEV_WRITEREC_DEAD, arrayDiskRemoved=arrayDiskRemoved, pv660fEvent_ENCLHEAT_CRITICAL=pv660fEvent_ENCLHEAT_CRITICAL, diskLunID=diskLunID, arrayDiskProductID=arrayDiskProductID, pv660fEvent_CTLDEV_HARD_ECC_CORRECTED=pv660fEvent_CTLDEV_HARD_ECC_CORRECTED, temperatureProbeMaxWarning=temperatureProbeMaxWarning, temperatureProbeUnit=temperatureProbeUnit, virtualDiskDegraded=virtualDiskDegraded, enclosureName=enclosureName, pv660fEvent_SYSDEV_BADDATABLOCK=pv660fEvent_SYSDEV_BADDATABLOCK, pv660fEvent_SYSTEM_USER_LOGGED_OUT=pv660fEvent_SYSTEM_USER_LOGGED_OUT, pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS=pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS, virtualDiskTargetID=virtualDiskTargetID, arrayDiskState=arrayDiskState, pv660fEvent_SYSDEV_STANDBY_REBUILD_START=pv660fEvent_SYSDEV_STANDBY_REBUILD_START, temperatureProbeMinWarning=temperatureProbeMinWarning, controllerRebuildRateInPercent=controllerRebuildRateInPercent, basicDiskExtendedConnectionPartitionName=basicDiskExtendedConnectionPartitionName, device1NameEv=device1NameEv, alertControllerAlarmDisable=alertControllerAlarmDisable, pv660fEvent_PHYSDEV_SOFT_ERROR=pv660fEvent_PHYSDEV_SOFT_ERROR, pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED=pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED, pv660fEvent_AEMI_PWR_SUPPLY_FAILED=pv660fEvent_AEMI_PWR_SUPPLY_FAILED, virtualDiskSeverity=virtualDiskSeverity, virtualDiskCurStripeSizeInBytes=virtualDiskCurStripeSizeInBytes, controllerCacheSizeInMB=controllerCacheSizeInMB, arrayDiskLengthInBytes=arrayDiskLengthInBytes, enclosureConfig=enclosureConfig, virtualDiskCachePolicy=virtualDiskCachePolicy, diskLengthInMB=diskLengthInMB, virtualDiskDeviceName=virtualDiskDeviceName, extendedPartitionName=extendedPartitionName, plexNumber=plexNumber, enclosureAssetTag=enclosureAssetTag, diskTargetID=diskTargetID, pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN=pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN, pv660fEvent_PHYSDEV_GONE=pv660fEvent_PHYSDEV_GONE, controllerC1BatteryState=controllerC1BatteryState, controllerSeverity=controllerSeverity, diskSeverity=diskSeverity)
mibBuilder.exportSymbols("ArrayManager-MIB", arrayDiskOffline=arrayDiskOffline, unitNameEv=unitNameEv, enclosureManagementModuleConnectionEMMName=enclosureManagementModuleConnectionEMMName, pv660fEvent_SYSDEV_REBUILD_CANCELED=pv660fEvent_SYSDEV_REBUILD_CANCELED, pv660fEvent_SYSDEV_BG_INIT_RESTARTED=pv660fEvent_SYSDEV_BG_INIT_RESTARTED, pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD=pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD, pv660fEvent_PHYSDEV_DBLCC_DEAD=pv660fEvent_PHYSDEV_DBLCC_DEAD, pv660fEvent_PHYSDEV_INIT_FAILED=pv660fEvent_PHYSDEV_INIT_FAILED, alertCommRestored=alertCommRestored, arrayDiskEnclosureConnectionArrayDiskName=arrayDiskEnclosureConnectionArrayDiskName, partitionName=partitionName, pv660fEvent_CTLDEV_BBU_CALIBRATE_START=pv660fEvent_CTLDEV_BBU_CALIBRATE_START, software=software, logicalDevices=logicalDevices, arrayDiskVendor=arrayDiskVendor, enclosureManagementModuleEntry=enclosureManagementModuleEntry, virtualDiskLengthInBytes=virtualDiskLengthInBytes, enclosureServiceTag=enclosureServiceTag, alertCommFailure=alertCommFailure, agentLastGlobalStatus=agentLastGlobalStatus, volumeFreeSpaceInBytes=volumeFreeSpaceInBytes, arrayDiskChannelConnectionChannelName=arrayDiskChannelConnectionChannelName, arrayDiskName=arrayDiskName, arrayDiskSpareState=arrayDiskSpareState, pv660fEvent_SYSTEM_STARTED=pv660fEvent_SYSTEM_STARTED, basicDiskExtendedConnectionExtendedPartitionNumber=basicDiskExtendedConnectionExtendedPartitionNumber, basicDiskNonExtendedConnectionVolumeNumber=basicDiskNonExtendedConnectionVolumeNumber, controllerNumber=controllerNumber, alertEnclosureFwDownload=alertEnclosureFwDownload, partitionTable=partitionTable, pv660fEvent_ENCLFAN_NOTPRESENT=pv660fEvent_ENCLFAN_NOTPRESENT, plexEntry=plexEntry, pv660fEvent_CHANNEL_OK=pv660fEvent_CHANNEL_OK, dynamicDiskConnectionVolumeNumber=dynamicDiskConnectionVolumeNumber, agentRefreshRate=agentRefreshRate, pv660fEvent_PHYSDEV_HOTSPARE=pv660fEvent_PHYSDEV_HOTSPARE, controllerPhysicalDeviceCount=controllerPhysicalDeviceCount, alertControllerRebuildRate=alertControllerRebuildRate, temperatureConnectionTemperatureNumber=temperatureConnectionTemperatureNumber, temperatureSeverity=temperatureSeverity, plexName=plexName, enclosureGenericFailed=enclosureGenericFailed, pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE=pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE, dynamicDiskConnectionVirtualDiskName=dynamicDiskConnectionVirtualDiskName, controllerNodeWWN=controllerNodeWWN, unitNumberEv=unitNumberEv, pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED=pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED, senseCodeEv=senseCodeEv, pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED=pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED, basicDiskExtendedConnectionArrayDiskName=basicDiskExtendedConnectionArrayDiskName, dynamicDiskConnectionArrayDiskName=dynamicDiskConnectionArrayDiskName, pv660fEvent_SARM_HW_ERR=pv660fEvent_SARM_HW_ERR, pv660fEvent_CTLDEV_CRITICAL=pv660fEvent_CTLDEV_CRITICAL, controllerC0OSController=controllerC0OSController, checkConsistencyStarted=checkConsistencyStarted, newVDConfigEv=newVDConfigEv, vdInitializeCompleted=vdInitializeCompleted, pv660fEvent_ENCLHEAT_OK=pv660fEvent_ENCLHEAT_OK, powersupplyConnectionEnclosureNumber=powersupplyConnectionEnclosureNumber, pv660fEvent_SYSTEM_DEAD=pv660fEvent_SYSTEM_DEAD, enclosureManagementModuleConnectionTable=enclosureManagementModuleConnectionTable, channelNumber=channelNumber, vdRebuildFailed=vdRebuildFailed, pv660fEvent_SYSDEV_CHECK_ERROR=pv660fEvent_SYSDEV_CHECK_ERROR, pv660fEvent_PHYSDEV_COMMAND_TIMEOUT=pv660fEvent_PHYSDEV_COMMAND_TIMEOUT, pv660fEvent_FMT_UPS_FAILED=pv660fEvent_FMT_UPS_FAILED, pv660fEvent_CTLDEV_POWER_ON=pv660fEvent_CTLDEV_POWER_ON, arrayMgrAgentVersion=arrayMgrAgentVersion, subDiskNumber=subDiskNumber, pv660fEvent_CFG_INVALID=pv660fEvent_CFG_INVALID, pv660fEvent_PHYSDEV_REBUILD_DONE=pv660fEvent_PHYSDEV_REBUILD_DONE, arrayDiskLogicalConnectionVirtualDiskNumber=arrayDiskLogicalConnectionVirtualDiskNumber, diskNumber=diskNumber, basicDiskExtendedConnectionVirtualDiskNumber=basicDiskExtendedConnectionVirtualDiskNumber, adInitializeStarted=adInitializeStarted, pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED=pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED, pv660fEvent_PHYSDEV_PFA=pv660fEvent_PHYSDEV_PFA, pv660fEvent_CTLDEV_DUAL_ENABLED=pv660fEvent_CTLDEV_DUAL_ENABLED, pv660fEvent_FMTHEAT_BAD=pv660fEvent_FMTHEAT_BAD, pv660fEvent_ENCLFAN_OK=pv660fEvent_ENCLFAN_OK, arrayDiskChannelConnectionArrayDiskName=arrayDiskChannelConnectionArrayDiskName, arrayDiskLogicalConnectionDiskName=arrayDiskLogicalConnectionDiskName, diskState=diskState, enclosureNameEv=enclosureNameEv, virtualDiskNameNewEv=virtualDiskNameNewEv, pv660fEvent_PHYSDEV_INIT_DONE=pv660fEvent_PHYSDEV_INIT_DONE, volumeSeverity=volumeSeverity, pv660fEvent_PHYSDEV_SELTMO_DEAD=pv660fEvent_PHYSDEV_SELTMO_DEAD, enclosureProcessor2Version=enclosureProcessor2Version, pv660fEvent_SYSDEV_CRITICAL=pv660fEvent_SYSDEV_CRITICAL, volumeTable=volumeTable, pv660fEvent_SYSTEM_SIZE_TABLE_FULL=pv660fEvent_SYSTEM_SIZE_TABLE_FULL, enclosureTable=enclosureTable, partitionState=partitionState, arrayDiskChannelConnectionTable=arrayDiskChannelConnectionTable, virtualDiskLengthInMB=virtualDiskLengthInMB, virtualDiskNumber=virtualDiskNumber, vdFormatStarted=vdFormatStarted, adRebuildCompleted=adRebuildCompleted, arrayMgrDisplayName=arrayMgrDisplayName, vdInitializeStarted=vdInitializeStarted, controllerC0Channel=controllerC0Channel, pv660fEvent_PHYSDEV_BADTAG_DEAD=pv660fEvent_PHYSDEV_BADTAG_DEAD, pv660fEvent_CTLDEV_BBU_NO_BATTERY=pv660fEvent_CTLDEV_BBU_NO_BATTERY, pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE=pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE, partitionLengthInMB=partitionLengthInMB, powersupplyNumber=powersupplyNumber, fan2PartNumber=fan2PartNumber, volumeFSType=volumeFSType, alertArrayDiskForcedOffline=alertArrayDiskForcedOffline, powersupplyState=powersupplyState, arrayMgrSoftwareVersion=arrayMgrSoftwareVersion, pv660fEvent_CTLDEV_RESET=pv660fEvent_CTLDEV_RESET, pv660fEvent_SYSDEV_BG_INIT_FAILED=pv660fEvent_SYSDEV_BG_INIT_FAILED, senseQualifierEv=senseQualifierEv, percHotSpareAssign=percHotSpareAssign, pv660fEvent_ENCLHEAT_NOTPRESENT=pv660fEvent_ENCLHEAT_NOTPRESENT, dynamicDiskConnectionDiskNumber=dynamicDiskConnectionDiskNumber, arrayDiskChannelConnectionEntry=arrayDiskChannelConnectionEntry, arrayDiskLogicalConnectionArrayDiskName=arrayDiskLogicalConnectionArrayDiskName, cntrlResumeIO=cntrlResumeIO, basicDiskNonExtendedConnectionVirtualDiskName=basicDiskNonExtendedConnectionVirtualDiskName, percPauseIO=percPauseIO, enclosureGenericOffline=enclosureGenericOffline, arrayDiskUsedSpaceInBytes=arrayDiskUsedSpaceInBytes, alertResumedCheckConsistency=alertResumedCheckConsistency, arrayDiskLogicalConnectionDiskNumber=arrayDiskLogicalConnectionDiskNumber, fanConnectionFanNumber=fanConnectionFanNumber, pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT=pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT, alertTaskBGI=alertTaskBGI, enclosureManagementModuleName=enclosureManagementModuleName, pv660fEvent_CFG_COD_CONVERTED=pv660fEvent_CFG_COD_CONVERTED, pv660fEvent_SYSDEV_TYPECHANGED=pv660fEvent_SYSDEV_TYPECHANGED, pv660fEvent_CTLDEV_STATE_TABLE_FULL=pv660fEvent_CTLDEV_STATE_TABLE_FULL, arrayMgrDescription=arrayMgrDescription, enclosureEntry=enclosureEntry, powersupplySeverity=powersupplySeverity, perc2SmartWarning=perc2SmartWarning, partitionNumber=partitionNumber, arrayDiskLargestContiguousFreeSpaceInBytes=arrayDiskLargestContiguousFreeSpaceInBytes, agentAmSnmpVersion=agentAmSnmpVersion, controllerC1OSController=controllerC1OSController, arrayDiskFreeSpaceInMB=arrayDiskFreeSpaceInMB, alertCancelBGI=alertCancelBGI, pv660fEvent_ENC_SES_ERR=pv660fEvent_ENC_SES_ERR, pv660fEvent_CHANNEL_FAILED=pv660fEvent_CHANNEL_FAILED, enclosureManagementModuleType=enclosureManagementModuleType, enclosureNumberEv=enclosureNumberEv, pv660fEvent_ENCLACCESS_READY=pv660fEvent_ENCLACCESS_READY, pv660fEvent_CTLDEV_IN_CLUSTER=pv660fEvent_CTLDEV_IN_CLUSTER, enclosureManagementModuleConnectionEMMNumber=enclosureManagementModuleConnectionEMMNumber, providerNumber=providerNumber, pv660fEvent_CTLDEV_BBU_NORESPONSE=pv660fEvent_CTLDEV_BBU_NORESPONSE, vdRebuildStarted=vdRebuildStarted, enclosureGenericNotInstalled=enclosureGenericNotInstalled, pv660fEvent_SYSDEV_CHECK_START=pv660fEvent_SYSDEV_CHECK_START, pv660fEvent_PHYSDEV_ID_MISMATCH=pv660fEvent_PHYSDEV_ID_MISMATCH, pv660fEvent_CFG_CLEAR=pv660fEvent_CFG_CLEAR, temperatureConnectionEnclosureNumber=temperatureConnectionEnclosureNumber, pv660fEvent_CTLDEV_NOT_IN_CLUSTER=pv660fEvent_CTLDEV_NOT_IN_CLUSTER, arrayDiskSeverity=arrayDiskSeverity, plexColumns=plexColumns, arrayDiskLogicalConnectionTable=arrayDiskLogicalConnectionTable, pv660fEvent_CFG_COD_ACCESS_ERROR=pv660fEvent_CFG_COD_ACCESS_ERROR, enclosureManagementModuleMaxSpeed=enclosureManagementModuleMaxSpeed, dynamicDiskConnectionPlexName=dynamicDiskConnectionPlexName, diskAdapter=diskAdapter, diskVendor=diskVendor, enclosureESM2PartNumber=enclosureESM2PartNumber, volumeFreeSpaceInMB=volumeFreeSpaceInMB, arrayMgrGlobalStatus=arrayMgrGlobalStatus, arrayMgrInfo=arrayMgrInfo, pv660fEvent_SYSDEV_EXPANDCAPACITY_START=pv660fEvent_SYSDEV_EXPANDCAPACITY_START, powersupplyConnectionTable=powersupplyConnectionTable, controllerCacheSizeInBytes=controllerCacheSizeInBytes, pv660fEvent_PHYSDEV_RESET=pv660fEvent_PHYSDEV_RESET, temperatureConnectionTable=temperatureConnectionTable, channelSeverity=channelSeverity, alertControllerAlarmEnable=alertControllerAlarmEnable, enclosureManagementModuleTable=enclosureManagementModuleTable, perc2SmartFPTExceeded=perc2SmartFPTExceeded, channelEntry=channelEntry, arrayDiskLogicalConnectionNumber=arrayDiskLogicalConnectionNumber, extendedPartitionEntry=extendedPartitionEntry, fanConnectionFanName=fanConnectionFanName, pv660fEvent_CTLDEV_BBU_FOUND=pv660fEvent_CTLDEV_BBU_FOUND, arrayDiskEnclosureConnectionEnclosureNumber=arrayDiskEnclosureConnectionEnclosureNumber, plexStripeWidthInMB=plexStripeWidthInMB, enclosureKernelVersion=enclosureKernelVersion, pv660fEvent_CTLDEV_BBU_POWER_OK=pv660fEvent_CTLDEV_BBU_POWER_OK, pv660fEvent_PHYSDEV_SEQERR_DEAD=pv660fEvent_PHYSDEV_SEQERR_DEAD, fanConnectionEnclosureNumber=fanConnectionEnclosureNumber, arrayDiskLogicalConnectionArrayDiskNumber=arrayDiskLogicalConnectionArrayDiskNumber, pv660fEvent_PHYSDEV_STANDBY_REBUILD_START=pv660fEvent_PHYSDEV_STANDBY_REBUILD_START, controllerFWVersion=controllerFWVersion, adDiagStarted=adDiagStarted, pv660fEvent_FMTHEAT_CRITICAL=pv660fEvent_FMTHEAT_CRITICAL, pv660fEvent_AUTOBOOT_CHANGED=pv660fEvent_AUTOBOOT_CHANGED, pv660fEvent_PHYSDEV_ACTIVESPARE=pv660fEvent_PHYSDEV_ACTIVESPARE, temperatureVendor=temperatureVendor, pv660fEvent_FMTHEAT_OK=pv660fEvent_FMTHEAT_OK, enclosureManagementModuleConnectionEnclosureName=enclosureManagementModuleConnectionEnclosureName, basicDiskExtendedConnectionTable=basicDiskExtendedConnectionTable, volumeLabel=volumeLabel, pv660fEvent_SYSDEV_GONE=pv660fEvent_SYSDEV_GONE, pv660fEvent_PHYSDEV_FOUND=pv660fEvent_PHYSDEV_FOUND, adRebuildFailed=adRebuildFailed, providerTable=providerTable, basicDiskExtendedConnectionPartitionNumber=basicDiskExtendedConnectionPartitionNumber, enclosureAlertTempWarnMax=enclosureAlertTempWarnMax, pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD=pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD, storage=storage, pv660fEvent_PHYSDEV_MANUAL_REBUILD_START=pv660fEvent_PHYSDEV_MANUAL_REBUILD_START, pv660fEvent_CTLDEV_INSERTED_PTNR=pv660fEvent_CTLDEV_INSERTED_PTNR, extendedPartitionSeverity=extendedPartitionSeverity, dynamicDiskConnectionPlexNumber=dynamicDiskConnectionPlexNumber, pv660fEvent_SYSDEV_ONLINE=pv660fEvent_SYSDEV_ONLINE, agentModifiers=agentModifiers, alertMegalibTimeout=alertMegalibTimeout, controllerNameEv=controllerNameEv, adFormatFailed=adFormatFailed, enclosureSplitBusPartNumber=enclosureSplitBusPartNumber, fanProbeMinWarning=fanProbeMinWarning, pv660fEvent_PHYSDEV_COMMAND_RETRIED=pv660fEvent_PHYSDEV_COMMAND_RETRIED, pv660fEvent_CTLDEV_BAD_MAC_ADDRESS=pv660fEvent_CTLDEV_BAD_MAC_ADDRESS, pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE=pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE, enclosureVendor=enclosureVendor, dynamicDiskConnectionSubDiskName=dynamicDiskConnectionSubDiskName, enclosureGenericUnknown=enclosureGenericUnknown, alertVirtualDiskUnmirror=alertVirtualDiskUnmirror, controllerEntry=controllerEntry, virtualDiskWritePolicy=virtualDiskWritePolicy, enclosureType=enclosureType, vdReconfigCompleted=vdReconfigCompleted, pv660fEvent_PHYSDEV_NOTRDY_DEAD=pv660fEvent_PHYSDEV_NOTRDY_DEAD, pv660fEvent_PHYSDEV_OFFSET_SET=pv660fEvent_PHYSDEV_OFFSET_SET, temperatureState=temperatureState, arrayDiskEnclosureConnectionArrayDiskNumber=arrayDiskEnclosureConnectionArrayDiskNumber, volumeState=volumeState, pv660fEvent_PHYSDEV_MISSING_ONSTARTUP=pv660fEvent_PHYSDEV_MISSING_ONSTARTUP, arrayDiskLargestContiguousFreeSpaceInMB=arrayDiskLargestContiguousFreeSpaceInMB, pv660fEvent_CHANNEL_SCSI_BUS_ALIVE=pv660fEvent_CHANNEL_SCSI_BUS_ALIVE, virtualDiskCreated=virtualDiskCreated, arrayManager=arrayManager, pv660fEvent_PHYSDEV_PARITY_ERROR=pv660fEvent_PHYSDEV_PARITY_ERROR, pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED=pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED, adDiagCancelled=adDiagCancelled, pv660fEvent_SYSDEV_BG_INIT_STARTED=pv660fEvent_SYSDEV_BG_INIT_STARTED, pv660fEvent_FMTSTWK_CRITICAL=pv660fEvent_FMTSTWK_CRITICAL, pv660fEvent_SYSDEV_CHECK_CANCELED=pv660fEvent_SYSDEV_CHECK_CANCELED, controllerC0Port0ID=controllerC0Port0ID, dynamicDiskConnectionVolumeDriveLetter=dynamicDiskConnectionVolumeDriveLetter, physicalDevices=physicalDevices, controllerC1Target=controllerC1Target)
mibBuilder.exportSymbols("ArrayManager-MIB", pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED=pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED, temperatureProbeCurValue=temperatureProbeCurValue, pv660fEvent_DEBUG_DUMP_GENERATED=pv660fEvent_DEBUG_DUMP_GENERATED, virtualDiskState=virtualDiskState, fanProbeMaxWarning=fanProbeMaxWarning, pv660fEvent_ENCLACCESS_OFFLINE=pv660fEvent_ENCLACCESS_OFFLINE, controllerState=controllerState, controllerVendor=controllerVendor, fanVendor=fanVendor, basicDiskNonExtendedConnectionVolumeDriveLetter=basicDiskNonExtendedConnectionVolumeDriveLetter, cntrlBatteryReconComplete=cntrlBatteryReconComplete, diskFreeSpaceInMB=diskFreeSpaceInMB, pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE=pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE, pv660fEvent_SYSTEM_USER_LOGGED_IN=pv660fEvent_SYSTEM_USER_LOGGED_IN, vdRebuildCancelled=vdRebuildCancelled, controllerLogicalDeviceCount=controllerLogicalDeviceCount, volumeLengthInMB=volumeLengthInMB, enclosureAlertTempErrMin=enclosureAlertTempErrMin, adInitializeCancelled=adInitializeCancelled, enclosureUnitNamesEv=enclosureUnitNamesEv, aryMgrEvts=aryMgrEvts, adRebuildStarted=adRebuildStarted, virtualDiskTable=virtualDiskTable, diskVirtualDiskDeviceName=diskVirtualDiskDeviceName, enclosureAlertTempErrMax=enclosureAlertTempErrMax, dynamicDiskConnectionArrayDiskNumber=dynamicDiskConnectionArrayDiskNumber, pv660fEvent_PHYSDEV_MISC_ERROR=pv660fEvent_PHYSDEV_MISC_ERROR, pv660fEvent_CHANNEL_FIBER_DEAD=pv660fEvent_CHANNEL_FIBER_DEAD, subDiskName=subDiskName, pv660fEvent_FMT_UPS_AC_FAIL=pv660fEvent_FMT_UPS_AC_FAIL, enclosureGenericDegraded=enclosureGenericDegraded, basicDiskExtendedConnectionDiskName=basicDiskExtendedConnectionDiskName, dynamicDiskConnectionDiskName=dynamicDiskConnectionDiskName, controllerC1Port0WWN=controllerC1Port0WWN, pv660fEvent_PHYSDEV_MISSING_DEAD=pv660fEvent_PHYSDEV_MISSING_DEAD, vdInitializeCancelled=vdInitializeCancelled, pv660fEvent_FMTPOWER_NOTPRESENT=pv660fEvent_FMTPOWER_NOTPRESENT, arrayDiskChannelConnectionNumber=arrayDiskChannelConnectionNumber, alertFailBGI=alertFailBGI, arrayDiskChannel=arrayDiskChannel, pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE=pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE, pv660fEvent_SYSDEV_BG_INIT_PAUSED=pv660fEvent_SYSDEV_BG_INIT_PAUSED, enclosureAssetName=enclosureAssetName, virtualDiskChannel=virtualDiskChannel, arrayDiskSerialNo=arrayDiskSerialNo, pv660fEvent_CTLDEV_KILL_PTNR=pv660fEvent_CTLDEV_KILL_PTNR, extendedPartitionTable=extendedPartitionTable, diskDgName=diskDgName, pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS=pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS, controllerPartnerStatus=controllerPartnerStatus, percSCSISenseData=percSCSISenseData, temperatureName=temperatureName, enclosureManagementModuleConnectionEntry=enclosureManagementModuleConnectionEntry, pv660fEvent_CTLDEV_REMOVED_PTNR=pv660fEvent_CTLDEV_REMOVED_PTNR, pv660fEvent_SYSDEV_MANUAL_REBUILD_START=pv660fEvent_SYSDEV_MANUAL_REBUILD_START, vdReconfigFailed=vdReconfigFailed, alertGenericReady=alertGenericReady, pv660fEvent_ENCLPOWER_FAILED=pv660fEvent_ENCLPOWER_FAILED, pv660fEvent_CTLDEV_BBU_RECOND_NEEDED=pv660fEvent_CTLDEV_BBU_RECOND_NEEDED, virtualDiskFreeSpaceInMB=virtualDiskFreeSpaceInMB, alertPausedCheckConsistency=alertPausedCheckConsistency, temperatureConnectionEnclosureName=temperatureConnectionEnclosureName, fanState=fanState, alertArrayDiskForcedOnline=alertArrayDiskForcedOnline, fsysPro_DISK_CAPACITY_ERROR=fsysPro_DISK_CAPACITY_ERROR, basicDiskNonExtendedConnectionDiskName=basicDiskNonExtendedConnectionDiskName, pv660fEvent_PHYSDEV_WARMSPARE=pv660fEvent_PHYSDEV_WARMSPARE, agentSoftwareStatus=agentSoftwareStatus, pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS=pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS, perc2SmartFPTExceededTest=perc2SmartFPTExceededTest, pv660fEvent_PHYSDEV_BYCMD_DEAD=pv660fEvent_PHYSDEV_BYCMD_DEAD, controllerType=controllerType, agentTimeStamp=agentTimeStamp, pv660fEvent_ENCLFAN_UNKNOWN=pv660fEvent_ENCLFAN_UNKNOWN, pv660fEvent_I960_HW_ERR=pv660fEvent_I960_HW_ERR, basicDiskExtendedConnectionExtendedPartitionName=basicDiskExtendedConnectionExtendedPartitionName, pv660fEvent_PHYSDEV_GROSSERR_DEAD=pv660fEvent_PHYSDEV_GROSSERR_DEAD, pv660fEvent_CHANNEL_FIBER_ALIVE=pv660fEvent_CHANNEL_FIBER_ALIVE, subDiskEntry=subDiskEntry, partitionLdmVolumeType=partitionLdmVolumeType, powersupply1PartNumber=powersupply1PartNumber, pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE=pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE, pv660fEvent_ENCLHEAT_UNKNOWN=pv660fEvent_ENCLHEAT_UNKNOWN, basicDiskExtendedConnectionVirtualDiskName=basicDiskExtendedConnectionVirtualDiskName, pv660fEvent_FMT_UPS_OK=pv660fEvent_FMT_UPS_OK, dynamicDiskConnectionTable=dynamicDiskConnectionTable, pv660fEvent_FATAL_HANG=pv660fEvent_FATAL_HANG, controllerMemorySizeInBytes=controllerMemorySizeInBytes, pv660fEvent_PHYSDEV_RESET_DEAD=pv660fEvent_PHYSDEV_RESET_DEAD, controllerC0Target=controllerC0Target, pv660fEvent_AEMI_FAN_FAILED=pv660fEvent_AEMI_FAN_FAILED, pv660fEvent_PHYSDEV_INIT_STARTED=pv660fEvent_PHYSDEV_INIT_STARTED, arrayDiskChannelConnectionChannelNumber=arrayDiskChannelConnectionChannelNumber, basicDiskNonExtendedConnectionPartitionNumber=basicDiskNonExtendedConnectionPartitionNumber, cntrlPauseIO=cntrlPauseIO, arrayDiskNameEv=arrayDiskNameEv, pv660fEvent_CTLDEV_BBU_RECOND_START=pv660fEvent_CTLDEV_BBU_RECOND_START, pv660fEvent_PHYSDEV_INIT_CANCELED=pv660fEvent_PHYSDEV_INIT_CANCELED, powersupplyName=powersupplyName, virtualDiskEntry=virtualDiskEntry, powersupplyConnectionPowersupplyName=powersupplyConnectionPowersupplyName, temperatureTable=temperatureTable, pv660fEvent_PHYSDEV_REMOVED_DEAD=pv660fEvent_PHYSDEV_REMOVED_DEAD, pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER=pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER, rebuildRateEv=rebuildRateEv, pv660fEvent_SYSDEV_OFFLINE=pv660fEvent_SYSDEV_OFFLINE, checkConsistencyCancelled=checkConsistencyCancelled, enclosureProductID=enclosureProductID, diskFreeSpaceInBytes=diskFreeSpaceInBytes, basicDiskExtendedConnectionEntry=basicDiskExtendedConnectionEntry, pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE=pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE, pv660fEvent_PHYSDEV_DEAD=pv660fEvent_PHYSDEV_DEAD, perc2SmartWarningTemp=perc2SmartWarningTemp, pv660fEvent_LOG_OUT_SYNC=pv660fEvent_LOG_OUT_SYNC, enclosureManagementModuleNumber=enclosureManagementModuleNumber, alertEnclosureAlarmEnable=alertEnclosureAlarmEnable, diskLdmDeviceType=diskLdmDeviceType, subDiskSeverity=subDiskSeverity, pv660fEvent_FMT_UPS_BAT_LOW=pv660fEvent_FMT_UPS_BAT_LOW, pv660fEvent_CTLDEV_WARM_BOOT_ERROR=pv660fEvent_CTLDEV_WARM_BOOT_ERROR, basicDiskNonExtendedConnectionArrayDiskNumber=basicDiskNonExtendedConnectionArrayDiskNumber, arrayDiskEntry=arrayDiskEntry, virtualDiskDeleted=virtualDiskDeleted, fanConnectionTable=fanConnectionTable, pv660fEvent_CTLDEV_NORMAL_CACHE_MODE=pv660fEvent_CTLDEV_NORMAL_CACHE_MODE, arrayDiskRevision=arrayDiskRevision, controllerName=controllerName, vdReconfigStarted=vdReconfigStarted, controllerC1Port0Name=controllerC1Port0Name, pv660fEvent_CFG_NEW=pv660fEvent_CFG_NEW, enclosureManagementModuleConnectionNumber=enclosureManagementModuleConnectionNumber, pv660fEvent_PHYSDEV_SYSRESET_DEAD=pv660fEvent_PHYSDEV_SYSRESET_DEAD, alertScsiSenseFormatFail=alertScsiSenseFormatFail, powersupplyConnectionEnclosureName=powersupplyConnectionEnclosureName, arrayDiskChannelConnectionArrayDiskNumber=arrayDiskChannelConnectionArrayDiskNumber, controllerC0Port0Name=controllerC0Port0Name, pv660fEvent_ENCLPOWER_NOTPRESENT=pv660fEvent_ENCLPOWER_NOTPRESENT, pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED=pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED, pv660fEvent_CTLDEV_RELINQUISH_PTNR=pv660fEvent_CTLDEV_RELINQUISH_PTNR, volumeEntry=volumeEntry, arrayDiskNumber=arrayDiskNumber, pv660fEvent_PHYSDEV_ONLINE=pv660fEvent_PHYSDEV_ONLINE, pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS=pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS, partitionSeverity=partitionSeverity, fanConnectionEntry=fanConnectionEntry, enclosureManagementModuleSeverity=enclosureManagementModuleSeverity, arrayDiskChannelConnectionControllerNumber=arrayDiskChannelConnectionControllerNumber, pv660fEvent_PHYSDEV_REBUILD_START_FAILED=pv660fEvent_PHYSDEV_REBUILD_START_FAILED, basicDiskNonExtendedConnectionPartitionName=basicDiskNonExtendedConnectionPartitionName, pv660fEvent_PHYSDEV_STANDBY=pv660fEvent_PHYSDEV_STANDBY, dynamicDiskConnectionSubDiskNumber=dynamicDiskConnectionSubDiskNumber, temperatureNumber=temperatureNumber, pv660fEvent_SYSDEV_INIT_CANCELED=pv660fEvent_SYSDEV_INIT_CANCELED, virtualDiskFreeSpaceInBytes=virtualDiskFreeSpaceInBytes, pv660fEvent_CTLDEV_POWER_OFF=pv660fEvent_CTLDEV_POWER_OFF, powersupplyConnectionEntry=powersupplyConnectionEntry, basicDiskNonExtendedConnectionArrayDiskName=basicDiskNonExtendedConnectionArrayDiskName, pv660fEvent_CHANNEL_SCSI_BUS_DEAD=pv660fEvent_CHANNEL_SCSI_BUS_DEAD, controllerC0Port0WWN=controllerC0Port0WWN, controllerC1Port0ID=controllerC1Port0ID, channelState=channelState, pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR=pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR, controllerFaultTolerant=controllerFaultTolerant, arrayDiskEnclosureConnectionControllerNumber=arrayDiskEnclosureConnectionControllerNumber, pv660fEvent_PHYSDEV_UNCONFIGURED=pv660fEvent_PHYSDEV_UNCONFIGURED, enclosureManagementModuleFWVersion=enclosureManagementModuleFWVersion, arrayMgrSoftwareManufacturer=arrayMgrSoftwareManufacturer, pv660fEvent_SYSDEV_INIT_FAILED=pv660fEvent_SYSDEV_INIT_FAILED, pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS=pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS, fanTable=fanTable, oldVDConfigEv=oldVDConfigEv, pv660fEvent_PHYSDEV_AUTO_REBUILD_START=pv660fEvent_PHYSDEV_AUTO_REBUILD_START, enclosureBackplanePartNumber=enclosureBackplanePartNumber, pv660fEvent_LOG_REQUEST_SENSE=pv660fEvent_LOG_REQUEST_SENSE, genericEvent_DATABASE_DOWN=genericEvent_DATABASE_DOWN, pv660fEvent_SYSDEV_BG_INIT_COMPLETED=pv660fEvent_SYSDEV_BG_INIT_COMPLETED, virtualDiskLayout=virtualDiskLayout, enclosureGenericWarning=enclosureGenericWarning, arrayMgrSoftwareProduct=arrayMgrSoftwareProduct, enclosureSeverity=enclosureSeverity, vdFormatFailed=vdFormatFailed, pv660fEvent_ENCLSES_SOFTADDR_OCCURRED=pv660fEvent_ENCLSES_SOFTADDR_OCCURRED, fsysPro_DISK_CAPACITY_WARNING=fsysPro_DISK_CAPACITY_WARNING, dynamicDiskConnectionEntry=dynamicDiskConnectionEntry, dynamicDiskConnectionNumber=dynamicDiskConnectionNumber, pv660fEvent_CTLDEV_FIRMWARE_MISMATCH=pv660fEvent_CTLDEV_FIRMWARE_MISMATCH, channelSCSIID=channelSCSIID, pv660fEvent_ENCLPOWER_UNKNOWN=pv660fEvent_ENCLPOWER_UNKNOWN, pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER=pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER, arrayDiskInserted=arrayDiskInserted, arrayDiskEnclosureConnectionControllerName=arrayDiskEnclosureConnectionControllerName, arrayDiskEnclosureConnectionEnclosureName=arrayDiskEnclosureConnectionEnclosureName, enclosureNumber=enclosureNumber, alertEmmFwMismatch=alertEmmFwMismatch, arrayDiskLogicalConnectionVirtualDiskName=arrayDiskLogicalConnectionVirtualDiskName, powersupplyConnectionNumber=powersupplyConnectionNumber, pv660fEvent_FMTFAN_NOTPRESENT=pv660fEvent_FMTFAN_NOTPRESENT, controllerHostPortCount=controllerHostPortCount, adFormatCompleted=adFormatCompleted, pv660fEvent_CTLDEV_NEXUS=pv660fEvent_CTLDEV_NEXUS, arrayDiskDegraded=arrayDiskDegraded, enclosureID=enclosureID, pv660fEvent_CTLDEV_BBU_RECOND_DONE=pv660fEvent_CTLDEV_BBU_RECOND_DONE, controllerMemorySizeInMB=controllerMemorySizeInMB, agentAmMibVersion=agentAmMibVersion, pv660fEvent_FMTFAN_FAILED=pv660fEvent_FMTFAN_FAILED, basicDiskExtendedConnectionArrayDiskNumber=basicDiskExtendedConnectionArrayDiskNumber, pv660fEvent_FMTSTWK_OK=pv660fEvent_FMTSTWK_OK, pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE=pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE, virtualDiskName=virtualDiskName)
