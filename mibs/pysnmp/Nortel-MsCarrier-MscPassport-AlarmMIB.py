#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-AlarmMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-AlarmMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
DateAndTime, DisplayString, Unsigned32, RowPointer = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DateAndTime", "DisplayString", "Unsigned32", "RowPointer")
HexString, Hex, DigitString, AsciiString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "HexString", "Hex", "DigitString", "AsciiString")
mscPassportMIBs, mscPassportTraps = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscPassportTraps")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, TimeTicks, MibIdentifier, Counter32, NotificationType, Unsigned32, Gauge32, Counter64, iso, Integer32, ModuleIdentity, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "TimeTicks", "MibIdentifier", "Counter32", "NotificationType", "Unsigned32", "Gauge32", "Counter64", "iso", "Integer32", "ModuleIdentity", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alarmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4))
mscAlarmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2))
mscMandatoryAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7))
mscComponentRowPointer = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 1), RowPointer())
if mibBuilder.loadTexts: mscComponentRowPointer.setStatus('mandatory')
mscComponentName = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 2), DisplayString())
if mibBuilder.loadTexts: mscComponentName.setStatus('mandatory')
mscEventTime = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 3), DateAndTime())
if mibBuilder.loadTexts: mscEventTime.setStatus('mandatory')
mscActiveListStatus = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("message", 0), ("set", 1), ("clear", 2))))
if mibBuilder.loadTexts: mscActiveListStatus.setStatus('mandatory')
mscSeverity = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("cleared", 5))))
if mibBuilder.loadTexts: mscSeverity.setStatus('mandatory')
mscAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("communications", 0), ("qualityOfService", 1), ("processing", 2), ("equipment", 3), ("environmental", 4), ("security", 5), ("operator", 6), ("debug", 7), ("unknown", 8))))
if mibBuilder.loadTexts: mscAlarmType.setStatus('mandatory')
mscProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 90, 91, 92, 93, 100, 101, 102, 110, 111, 112, 113, 114, 120, 121, 122, 200, 201, 202, 203, 204))).clone(namedValues=NamedValues(("lossOfSignal", 0), ("lossOfFrame", 1), ("framingError", 2), ("localTransmissionError", 3), ("remoteTransmissionError", 4), ("callEstablishmentError", 5), ("degradedSignal", 6), ("commSubsystemFailure", 7), ("commProtocolError", 8), ("lanError", 9), ("dteDceInterfaceError", 10), ("responseTimeExcessive", 20), ("queueSizeExceeded", 21), ("bandwidthReduced", 22), ("retransmissionRateReduced", 23), ("thresholdCrossed", 24), ("performanceDegraded", 25), ("congestion", 26), ("atOrNearCapacity", 27), ("storageCapacityProblem", 40), ("versionMismatch", 41), ("corruptData", 42), ("cpuCyclesLimitExceeded", 43), ("softwareError", 44), ("softwareProgramError", 45), ("softwareProgramTermination", 46), ("fileError", 47), ("outOfMemory", 48), ("underlyingResourceUnavail", 49), ("applicationSubsystemFailure", 50), ("configurationError", 51), ("powerProblem", 60), ("timingProblem", 61), ("processorProblem", 62), ("datasetModemError", 63), ("multiplexorProblem", 64), ("receiverFailure", 65), ("transmitterFailure", 66), ("outputDeviceError", 67), ("inputDeviceError", 68), ("ioDeviceError", 69), ("equipmentFailure", 70), ("adapterError", 71), ("duplicateInfo", 80), ("infoMissing", 81), ("infoModification", 82), ("infoOutOfSequence", 83), ("unexpectedInfo", 84), ("denialOfService", 90), ("outOfService", 91), ("proceduralError", 92), ("otherOperational", 93), ("cableTamper", 100), ("intrusionDetection", 101), ("otherPhysical", 102), ("authenticationFailure", 110), ("breachOfConfidence", 111), ("nonRepudiationFailure", 112), ("unauthorizedAccess", 113), ("otherSecurityService", 114), ("delayedInfo", 120), ("keyExpired", 121), ("outOfHoursActivity", 122), ("operationalCondition", 200), ("debugging", 201), ("unknown", 202), ("inactiveVirtualCircuit", 203), ("networkServerIntervention", 204))))
if mibBuilder.loadTexts: mscProbableCause.setStatus('mandatory')
mscNtpIndex = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 8), DigitString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: mscNtpIndex.setStatus('mandatory')
mscCommentData = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 7, 9), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)))
if mibBuilder.loadTexts: mscCommentData.setStatus('mandatory')
mscOptionalAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8))
mscNotificationID = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 1), Hex())
if mibBuilder.loadTexts: mscNotificationID.setStatus('mandatory')
mscLpForHierClear = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 2), RowPointer())
if mibBuilder.loadTexts: mscLpForHierClear.setStatus('mandatory')
mscOperatorData = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)))
if mibBuilder.loadTexts: mscOperatorData.setStatus('mandatory')
mscPid = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)))
if mibBuilder.loadTexts: mscPid.setStatus('mandatory')
mscFileName = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 5), DisplayString())
if mibBuilder.loadTexts: mscFileName.setStatus('mandatory')
mscFileLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 6), Unsigned32())
if mibBuilder.loadTexts: mscFileLineNumber.setStatus('mandatory')
mscFileVersion = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 7), DisplayString())
if mibBuilder.loadTexts: mscFileVersion.setStatus('mandatory')
mscInternalData = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 8, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)))
if mibBuilder.loadTexts: mscInternalData.setStatus('mandatory')
mscProvisionalAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 9))
mscCid = MibScalar((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2, 9, 1), Unsigned32())
if mibBuilder.loadTexts: mscCid.setStatus('mandatory')
mscCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,1)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
mscMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,2)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
mscMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,3)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
mscWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,4)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
mscClearedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,5)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
mscIndeterminateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 3, 2) + (0,6)).setObjects(("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentRowPointer"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscComponentName"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscEventTime"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscActiveListStatus"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscSeverity"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscAlarmType"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscProbableCause"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscNtpIndex"), ("Nortel-MsCarrier-MscPassport-AlarmMIB", "mscCommentData"))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1))
alarmGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1, 1))
alarmGroupCA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1, 1, 2))
alarmGroupCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 1, 1, 2, 2))
alarmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 2))
alarmNotificationsGroupCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 2, 1))
alarmCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3))
alarmCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3, 1))
alarmCapabilitiesCA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3, 1, 2))
alarmCapabilitiesCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 4, 3, 1, 2, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AlarmMIB", mscCommentData=mscCommentData, alarmCapabilitiesCA01=alarmCapabilitiesCA01, alarmCapabilitiesCA01A=alarmCapabilitiesCA01A, alarmCapabilities=alarmCapabilities, mscOptionalAlarmInfo=mscOptionalAlarmInfo, alarmNotificationsGroupCA01A=alarmNotificationsGroupCA01A, mscProvisionalAlarmInfo=mscProvisionalAlarmInfo, mscWarningAlarm=mscWarningAlarm, mscAlarmTrap=mscAlarmTrap, alarmCapabilitiesCA=alarmCapabilitiesCA, mscMandatoryAlarmInfo=mscMandatoryAlarmInfo, mscComponentRowPointer=mscComponentRowPointer, mscNtpIndex=mscNtpIndex, alarmGroup=alarmGroup, alarmNotifications=alarmNotifications, mscProbableCause=mscProbableCause, mscMinorAlarm=mscMinorAlarm, mscActiveListStatus=mscActiveListStatus, mscLpForHierClear=mscLpForHierClear, alarmGroupCA01A=alarmGroupCA01A, mscAlarmType=mscAlarmType, mscNotificationID=mscNotificationID, mscFileLineNumber=mscFileLineNumber, mscClearedAlarm=mscClearedAlarm, alarmGroupCA01=alarmGroupCA01, mscFileVersion=mscFileVersion, mscOperatorData=mscOperatorData, mscMajorAlarm=mscMajorAlarm, alarmGroupCA=alarmGroupCA, mscSeverity=mscSeverity, mscComponentName=mscComponentName, mscIndeterminateAlarm=mscIndeterminateAlarm, mscFileName=mscFileName, mscInternalData=mscInternalData, alarmMIB=alarmMIB, mscPid=mscPid, mscCriticalAlarm=mscCriticalAlarm, mscCid=mscCid, mscEventTime=mscEventTime)
