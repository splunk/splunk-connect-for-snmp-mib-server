#
# PySNMP MIB module PAD-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAD-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:27:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, enterprises, Counter32, Bits, Unsigned32, ObjectIdentity, NotificationType, Gauge32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "enterprises", "Counter32", "Bits", "Unsigned32", "ObjectIdentity", "NotificationType", "Gauge32", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PPCTPadPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1), )
if mibBuilder.loadTexts: cdx6500PPCTPadPortTable.setStatus('mandatory')
cdx6500PPCTPadPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1), ).setIndexNames((0, "PAD-OPT-MIB", "cdx6500padpCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCTPadPortEntry.setStatus('mandatory')
cdx6500padpCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpCfgPortNum.setStatus('mandatory')
cdx6500padpCfgConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 21, 50))).clone(namedValues=NamedValues(("simp", 0), ("dtr", 1), ("dtrd", 2), ("emri", 3), ("emdc", 4), ("dimo", 5), ("dimoa", 6), ("dimob", 7), ("dtrp", 8), ("emdcio", 21), ("newvalSimp", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgConnectionType.setStatus('mandatory')
cdx6500padpCfgPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgPortControl.setStatus('mandatory')
cdx6500padpCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 98, 99, 50))).clone(namedValues=NamedValues(("speed110", 0), ("speed134", 1), ("speed300", 2), ("speed1200", 3), ("speed600", 4), ("speed75", 5), ("speed150", 6), ("speed1800", 7), ("speed200", 8), ("speed100", 9), ("speed50", 10), ("speed75to1200", 11), ("speed2400", 12), ("speed4800", 13), ("speed9600", 14), ("speed19200", 15), ("speed38400", 16), ("speed115200", 17), ("speed57600", 18), ("speed14400", 19), ("speed28800", 20), ("speed12000", 21), ("speed16800", 22), ("speed21600", 23), ("speed24000", 24), ("speed26400", 25), ("speed33400", 26), ("speed7200", 98), ("speedAuto", 99), ("newvalSpeed110", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgPortSpeed.setStatus('mandatory')
cdx6500padpCfgAutoBaudSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 50))).clone(namedValues=NamedValues(("crOnly", 0), ("crDotCr", 1), ("tymnet", 2), ("telenet", 3), ("dotDotCr", 4), ("spacePCr", 5), ("newvalCrOnly", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgAutoBaudSeq.setStatus('mandatory')
cdx6500padpCfgDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgDataBits.setStatus('mandatory')
cdx6500padpCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 50))).clone(namedValues=NamedValues(("none", 0), ("space", 1), ("mark", 2), ("even", 3), ("odd", 4), ("auto", 5), ("autoA", 6), ("newvalNone", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgParity.setStatus('mandatory')
cdx6500padpCfgStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("stopBit1", 0), ("stopBit1p5", 1), ("stopBit2", 2), ("newvalStopBit1", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgStopBits.setStatus('mandatory')
cdx6500padpCfgProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgProfileName.setStatus('mandatory')
cdx6500padpCfgCallControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCallControl.setStatus('mandatory')
cdx6500padpCfgTermControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgTermControl.setStatus('mandatory')
cdx6500padpCfgPadPromptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgPadPromptNum.setStatus('mandatory')
cdx6500padpCfgRemoteParamNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgRemoteParamNum.setStatus('mandatory')
cdx6500padpCfgAutoCallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgAutoCallMnem.setStatus('mandatory')
cdx6500padpCfgAutoCallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgAutoCallTimeout.setStatus('mandatory')
cdx6500padpCfgMaxAutoCall = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgMaxAutoCall.setStatus('mandatory')
cdx6500padpCfgSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgSubAddress.setStatus('mandatory')
cdx6500padpCfgGroupSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpCfgGroupSubaddress.setStatus('mandatory')
cdx6500padpCfgCugMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCugMembership.setStatus('mandatory')
cdx6500padpCfgBillingRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgBillingRecord.setStatus('mandatory')
cdx6500padpCfgInviteToClr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("clrwo", 1), ("clrwd", 2), ("newvalNone", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgInviteToClr.setStatus('mandatory')
cdx6500padpCfgCallAcceptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCallAcceptTime.setStatus('mandatory')
cdx6500padpCfgProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("cpOnly", 1), ("fullDcp", 2), ("newvalNone", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgProtectionLevel.setStatus('mandatory')
cdx6500padpCfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgReconnectTimeout.setStatus('mandatory')
cdx6500padpCfgReconnectTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgReconnectTries.setStatus('mandatory')
cdx6500padpCfgMaxRcvBufLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgMaxRcvBufLength.setStatus('mandatory')
cdx6500padpCfgCommandLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("ccitt", 1), ("dpn", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCommandLanguage.setStatus('mandatory')
cdx6500padpCfgNUIFacilityFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 100))).clone(namedValues=NamedValues(("odpn", 2), ("ndpn", 3), ("dpn1992", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgNUIFacilityFormat.setStatus('mandatory')
cdx6500padpCfgNUIVerifyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgNUIVerifyTimer.setStatus('mandatory')
cdx6500padpCfgMaxNUIViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgMaxNUIViolations.setStatus('mandatory')
cdx6500padpCfgActionTypeNUIV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("none", 1), ("degr", 2), ("lock", 3), ("disc", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgActionTypeNUIV.setStatus('mandatory')
cdx6500padpCfgCalledDTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCalledDTEAddress.setStatus('mandatory')
cdx6500padpCfgCallingDTEIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCallingDTEIdent.setStatus('mandatory')
cdx6500padpCfgCallingDTEPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgCallingDTEPasswd.setStatus('mandatory')
cdx6500padpCfgX28ResetService = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgX28ResetService.setStatus('mandatory')
cdx6500padpCfgX28ClearService = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgX28ClearService.setStatus('mandatory')
cdx6500padpCfgMAXMNEMFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgMAXMNEMFailures.setStatus('mandatory')
cdx6500padpCfgActionTypeMNEMFail = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("none", 1), ("degr", 2), ("lock", 3), ("disc", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgActionTypeMNEMFail.setStatus('mandatory')
cdx6500padpCfgActiveLineMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgActiveLineMessage.setStatus('mandatory')
cdx6500padpCfgDelayActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgDelayActiveLine.setStatus('mandatory')
cdx6500padpCfgInterCharTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgInterCharTimer.setStatus('mandatory')
cdx6500padpCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgElectricalInterfaceType.setStatus('mandatory')
cdx6500padpCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500padpCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500padpCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTPadPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: cdx6500PPSTPadPortTable.setStatus('mandatory')
cdx6500PPSTPadPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "PAD-OPT-MIB", "cdx6500padpStatPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTPadPortEntry.setStatus('mandatory')
cdx6500padpStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPortNum.setStatus('mandatory')
cdx6500padpStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 50))).clone(namedValues=NamedValues(("disabled", 0), ("busyout", 2), ("up", 3), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPortStatus.setStatus('mandatory')
cdx6500padpStatUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatUtilizationIn.setStatus('mandatory')
cdx6500padpStatUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatUtilizationOut.setStatus('mandatory')
cdx6500padpStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPortSpeed.setStatus('mandatory')
cdx6500padpStatCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatCharInTotal.setStatus('mandatory')
cdx6500padpStatCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatCharOutTotal.setStatus('mandatory')
cdx6500padpStatCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatCharsInPerSec.setStatus('mandatory')
cdx6500padpStatCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatCharsOutPerSec.setStatus('mandatory')
cdx6500padpStatPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPktInTotal.setStatus('mandatory')
cdx6500padpStatPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPktOutTotal.setStatus('mandatory')
cdx6500padpStatPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPktsInPerSec.setStatus('mandatory')
cdx6500padpStatPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPktsOutPerSec.setStatus('mandatory')
cdx6500padpStatPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPktsQueued.setStatus('mandatory')
cdx6500padpStatOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatOverrunErrors.setStatus('mandatory')
cdx6500padpStatParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatParityErrors.setStatus('mandatory')
cdx6500padpStatFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 17), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatFramingErrors.setStatus('mandatory')
cdx6500padpStatCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatCurrentStatus.setStatus('mandatory')
cdx6500padpStatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 50, 100))).clone(namedValues=NamedValues(("pad", 0), ("x28", 1), ("account", 3), ("password", 5), ("newvalPad", 50), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpStatPortState.setStatus('mandatory')
cdx6500CfgPadPromptTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 4), )
if mibBuilder.loadTexts: cdx6500CfgPadPromptTable.setStatus('mandatory')
cdx6500CfgPadPromptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 4, 1), ).setIndexNames((0, "PAD-OPT-MIB", "cdx6500padpromptEntryNum"))
if mibBuilder.loadTexts: cdx6500CfgPadPromptEntry.setStatus('mandatory')
cdx6500padpromptEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpromptEntryNum.setStatus('mandatory')
cdx6500padpromptPromptText = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padpromptPromptText.setStatus('mandatory')
cdx6500CfgPadProfileTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8), )
if mibBuilder.loadTexts: cdx6500CfgPadProfileTable.setStatus('mandatory')
cdx6500CfgPadProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1), ).setIndexNames((0, "PAD-OPT-MIB", "cdx6500padprofProfileNum"))
if mibBuilder.loadTexts: cdx6500CfgPadProfileEntry.setStatus('mandatory')
cdx6500padprofProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofProfileNum.setStatus('mandatory')
cdx6500padprofProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofProfileName.setStatus('mandatory')
cdx6500padprofPar1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar1.setStatus('mandatory')
cdx6500padprofPar2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar2.setStatus('mandatory')
cdx6500padprofPar3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar3.setStatus('mandatory')
cdx6500padprofPar4 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar4.setStatus('mandatory')
cdx6500padprofPar5 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar5.setStatus('mandatory')
cdx6500padprofPar6 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar6.setStatus('mandatory')
cdx6500padprofPar7 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar7.setStatus('mandatory')
cdx6500padprofPar9 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar9.setStatus('mandatory')
cdx6500padprofPar10 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar10.setStatus('mandatory')
cdx6500padprofPar12 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar12.setStatus('mandatory')
cdx6500padprofPar13 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar13.setStatus('mandatory')
cdx6500padprofPar14 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar14.setStatus('mandatory')
cdx6500padprofPar15 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar15.setStatus('mandatory')
cdx6500padprofPar16 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar16.setStatus('mandatory')
cdx6500padprofPar17 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar17.setStatus('mandatory')
cdx6500padprofPar18 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar18.setStatus('mandatory')
cdx6500padprofPar19 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar19.setStatus('mandatory')
cdx6500padprofPar20 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar20.setStatus('mandatory')
cdx6500padprofPar21 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar21.setStatus('mandatory')
cdx6500padprofPar22 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar22.setStatus('mandatory')
cdx6500padprofPar100 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar100.setStatus('mandatory')
cdx6500padprofPar101 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar101.setStatus('mandatory')
cdx6500padprofPar102 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar102.setStatus('mandatory')
cdx6500padprofPar103 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar103.setStatus('mandatory')
cdx6500padprofPar104 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar104.setStatus('mandatory')
cdx6500padprofPar105 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar105.setStatus('mandatory')
cdx6500padprofPar106 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar106.setStatus('mandatory')
cdx6500padprofPar107 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar107.setStatus('mandatory')
cdx6500padprofPar108 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar108.setStatus('mandatory')
cdx6500padprofPar109 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar109.setStatus('mandatory')
cdx6500padprofPar110 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar110.setStatus('mandatory')
cdx6500padprofPar111 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar111.setStatus('mandatory')
cdx6500padprofPar112 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar112.setStatus('mandatory')
cdx6500padprofPar113 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar113.setStatus('mandatory')
cdx6500padprofPar114 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar114.setStatus('mandatory')
cdx6500padprofPar115 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar115.setStatus('mandatory')
cdx6500padprofPar116 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar116.setStatus('mandatory')
cdx6500padprofPar117 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar117.setStatus('mandatory')
cdx6500padprofPar118 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar118.setStatus('mandatory')
cdx6500padprofPar119 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 8, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500padprofPar119.setStatus('mandatory')
cdx6500CfgRemotePadTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9), )
if mibBuilder.loadTexts: cdx6500CfgRemotePadTable.setStatus('mandatory')
cdx6500CfgRemotePadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1), ).setIndexNames((0, "PAD-OPT-MIB", "cdx6500remotepadEntryNum"))
if mibBuilder.loadTexts: cdx6500CfgRemotePadEntry.setStatus('mandatory')
cdx6500remotepadEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadEntryNum.setStatus('mandatory')
cdx6500remotepadParamNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum1.setStatus('mandatory')
cdx6500remotepadParamVal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal1.setStatus('mandatory')
cdx6500remotepadParamNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum2.setStatus('mandatory')
cdx6500remotepadParamVal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal2.setStatus('mandatory')
cdx6500remotepadParamNum3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum3.setStatus('mandatory')
cdx6500remotepadParamVal3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal3.setStatus('mandatory')
cdx6500remotepadParamNum4 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum4.setStatus('mandatory')
cdx6500remotepadParamVal4 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal4.setStatus('mandatory')
cdx6500remotepadParamNum5 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum5.setStatus('mandatory')
cdx6500remotepadParamVal5 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal5.setStatus('mandatory')
cdx6500remotepadParamNum6 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum6.setStatus('mandatory')
cdx6500remotepadParamVal6 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal6.setStatus('mandatory')
cdx6500remotepadParamNum7 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum7.setStatus('mandatory')
cdx6500remotepadParamVal7 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal7.setStatus('mandatory')
cdx6500remotepadParamNum8 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum8.setStatus('mandatory')
cdx6500remotepadParamVal8 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal8.setStatus('mandatory')
cdx6500remotepadParamNum9 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum9.setStatus('mandatory')
cdx6500remotepadParamVal9 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal9.setStatus('mandatory')
cdx6500remotepadParamNum10 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum10.setStatus('mandatory')
cdx6500remotepadParamVal10 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal10.setStatus('mandatory')
cdx6500remotepadParamNum11 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum11.setStatus('mandatory')
cdx6500remotepadParamVal11 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal11.setStatus('mandatory')
cdx6500remotepadParamNum12 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum12.setStatus('mandatory')
cdx6500remotepadParamVal12 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal12.setStatus('mandatory')
cdx6500remotepadParamNum13 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum13.setStatus('mandatory')
cdx6500remotepadParamVal13 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal13.setStatus('mandatory')
cdx6500remotepadParamNum14 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum14.setStatus('mandatory')
cdx6500remotepadParamVal14 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal14.setStatus('mandatory')
cdx6500remotepadParamNum15 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum15.setStatus('mandatory')
cdx6500remotepadParamVal15 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal15.setStatus('mandatory')
cdx6500remotepadParamNum16 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum16.setStatus('mandatory')
cdx6500remotepadParamVal16 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal16.setStatus('mandatory')
cdx6500remotepadParamNum17 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum17.setStatus('mandatory')
cdx6500remotepadParamVal17 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal17.setStatus('mandatory')
cdx6500remotepadParamNum18 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum18.setStatus('mandatory')
cdx6500remotepadParamVal18 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal18.setStatus('mandatory')
cdx6500remotepadParamNum19 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum19.setStatus('mandatory')
cdx6500remotepadParamVal19 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal19.setStatus('mandatory')
cdx6500remotepadParamNum20 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum20.setStatus('mandatory')
cdx6500remotepadParamVal20 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal20.setStatus('mandatory')
cdx6500remotepadParamNum21 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum21.setStatus('mandatory')
cdx6500remotepadParamVal21 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal21.setStatus('mandatory')
cdx6500remotepadParamNum22 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamNum22.setStatus('mandatory')
cdx6500remotepadParamVal22 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 9, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500remotepadParamVal22.setStatus('mandatory')
mibBuilder.exportSymbols("PAD-OPT-MIB", cdx6500remotepadParamVal9=cdx6500remotepadParamVal9, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500padprofPar7=cdx6500padprofPar7, DisplayString=DisplayString, cdx6500remotepadParamVal2=cdx6500remotepadParamVal2, cdx6500remotepadParamNum15=cdx6500remotepadParamNum15, cdx6500remotepadParamNum19=cdx6500remotepadParamNum19, cdx6500padpStatFramingErrors=cdx6500padpStatFramingErrors, cdx6500padprofPar20=cdx6500padprofPar20, cdx6500padpCfgStopBits=cdx6500padpCfgStopBits, cdx6500CfgPadProfileTable=cdx6500CfgPadProfileTable, cdx6500padprofPar13=cdx6500padprofPar13, cdx6500remotepadParamNum20=cdx6500remotepadParamNum20, cdx6500Controls=cdx6500Controls, cdx6500padpStatPktOutTotal=cdx6500padpStatPktOutTotal, cdx6500padpCfgCallingDTEPasswd=cdx6500padpCfgCallingDTEPasswd, cdx6500padpCfgConnectionType=cdx6500padpCfgConnectionType, cdx6500padpCfgCallingDTEIdent=cdx6500padpCfgCallingDTEIdent, cdx6500PPCTPadPortTable=cdx6500PPCTPadPortTable, cdx6500padpCfgCallAcceptTime=cdx6500padpCfgCallAcceptTime, cdx6500padprofPar105=cdx6500padprofPar105, cdx6500padprofPar111=cdx6500padprofPar111, cdx6500padprofProfileNum=cdx6500padprofProfileNum, cdx6500padprofPar1=cdx6500padprofPar1, cdx6500padpCfgBillingRecord=cdx6500padpCfgBillingRecord, cdx6500padpCfgActionTypeNUIV=cdx6500padpCfgActionTypeNUIV, cdx6500padprofPar4=cdx6500padprofPar4, cdx6500padpCfgCallControl=cdx6500padpCfgCallControl, cdx6500padpCfgAutoCallTimeout=cdx6500padpCfgAutoCallTimeout, cdx6500remotepadParamVal7=cdx6500remotepadParamVal7, cdx6500padpCfgReconnectTimeout=cdx6500padpCfgReconnectTimeout, cdx6500remotepadParamVal11=cdx6500remotepadParamVal11, cdx6500remotepadParamNum8=cdx6500remotepadParamNum8, cdx6500remotepadParamVal1=cdx6500remotepadParamVal1, cdx6500padpCfgPortControl=cdx6500padpCfgPortControl, cdx6500remotepadParamNum9=cdx6500remotepadParamNum9, cdx6500CfgPadPromptTable=cdx6500CfgPadPromptTable, cdx6500remotepadParamVal19=cdx6500remotepadParamVal19, cdx6500remotepadParamVal10=cdx6500remotepadParamVal10, cdx6500remotepadParamNum11=cdx6500remotepadParamNum11, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500remotepadParamVal8=cdx6500remotepadParamVal8, cdx6500remotepadParamVal21=cdx6500remotepadParamVal21, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500padprofPar116=cdx6500padprofPar116, cdx6500padpCfgMaxNUIViolations=cdx6500padpCfgMaxNUIViolations, cdx6500padprofPar109=cdx6500padprofPar109, cdx6500padpStatUtilizationOut=cdx6500padpStatUtilizationOut, cdx6500padprofPar102=cdx6500padprofPar102, cdx6500padpStatParityErrors=cdx6500padpStatParityErrors, cdx6500remotepadParamNum13=cdx6500remotepadParamNum13, cdx6500remotepadParamNum7=cdx6500remotepadParamNum7, cdx6500padprofPar3=cdx6500padprofPar3, cdx6500padpCfgReconnectTries=cdx6500padpCfgReconnectTries, cdx6500padprofPar6=cdx6500padprofPar6, cdx6500padpCfgMaxRcvBufLength=cdx6500padpCfgMaxRcvBufLength, cdx6500remotepadParamNum12=cdx6500remotepadParamNum12, cdx6500padpCfgV24ElectricalInterfaceOption=cdx6500padpCfgV24ElectricalInterfaceOption, cdx6500padpromptEntryNum=cdx6500padpromptEntryNum, cdx6500padpCfgPortSpeed=cdx6500padpCfgPortSpeed, cdx6500padprofPar119=cdx6500padprofPar119, cdx6500padprofPar106=cdx6500padprofPar106, cdx6500padpCfgMaxAutoCall=cdx6500padpCfgMaxAutoCall, cdx6500padpCfgElectricalInterfaceType=cdx6500padpCfgElectricalInterfaceType, cdx6500padpCfgMAXMNEMFailures=cdx6500padpCfgMAXMNEMFailures, cdx6500PPCTPadPortEntry=cdx6500PPCTPadPortEntry, cdx6500padprofPar17=cdx6500padprofPar17, cdx6500padprofPar110=cdx6500padprofPar110, cdx6500remotepadParamNum5=cdx6500remotepadParamNum5, cdx6500padpCfgTermControl=cdx6500padpCfgTermControl, cdx6500remotepadParamNum6=cdx6500remotepadParamNum6, cdx6500padpCfgX28ResetService=cdx6500padpCfgX28ResetService, cdx6500padpCfgProfileName=cdx6500padpCfgProfileName, cdx6500padpStatCharInTotal=cdx6500padpStatCharInTotal, cdx6500padpCfgProtectionLevel=cdx6500padpCfgProtectionLevel, cdx6500CfgRemotePadTable=cdx6500CfgRemotePadTable, cdx6500padpStatCharsInPerSec=cdx6500padpStatCharsInPerSec, cdx6500CfgRemotePadEntry=cdx6500CfgRemotePadEntry, cdx6500remotepadParamVal4=cdx6500remotepadParamVal4, cdx6500padprofPar108=cdx6500padprofPar108, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500padprofPar118=cdx6500padprofPar118, cdx6500padprofPar22=cdx6500padprofPar22, cdx6500padpCfgParity=cdx6500padpCfgParity, cdx6500padpCfgInterCharTimer=cdx6500padpCfgInterCharTimer, cdx6500padprofPar18=cdx6500padprofPar18, cdx6500Statistics=cdx6500Statistics, cdx6500padprofPar115=cdx6500padprofPar115, cdx6500remotepadParamNum2=cdx6500remotepadParamNum2, cdx6500padpCfgX28ClearService=cdx6500padpCfgX28ClearService, cdx6500remotepadParamVal20=cdx6500remotepadParamVal20, cdx6500padpCfgPadPromptNum=cdx6500padpCfgPadPromptNum, cdx6500remotepadEntryNum=cdx6500remotepadEntryNum, cdx6500padpStatPortState=cdx6500padpStatPortState, cdx6500remotepadParamNum17=cdx6500remotepadParamNum17, cdx6500remotepadParamNum3=cdx6500remotepadParamNum3, cdx6500remotepadParamVal14=cdx6500remotepadParamVal14, cdx6500remotepadParamVal6=cdx6500remotepadParamVal6, codex=codex, cdx6500padprofPar100=cdx6500padprofPar100, cdx6500padpCfgCommandLanguage=cdx6500padpCfgCommandLanguage, Counter16=Counter16, cdxProductSpecific=cdxProductSpecific, cdx6500padprofPar15=cdx6500padprofPar15, cdx6500padpCfgActiveLineMessage=cdx6500padpCfgActiveLineMessage, cdx6500padpCfgPortNum=cdx6500padpCfgPortNum, cdx6500remotepadParamNum21=cdx6500remotepadParamNum21, cdx6500padpStatPortNum=cdx6500padpStatPortNum, cdx6500padpStatCharOutTotal=cdx6500padpStatCharOutTotal, cdx6500remotepadParamNum18=cdx6500remotepadParamNum18, cdx6500padpCfgDelayActiveLine=cdx6500padpCfgDelayActiveLine, cdx6500=cdx6500, cdx6500padprofPar101=cdx6500padprofPar101, cdx6500remotepadParamVal15=cdx6500remotepadParamVal15, cdx6500padpCfgCalledDTEAddress=cdx6500padpCfgCalledDTEAddress, cdx6500CfgPadProfileEntry=cdx6500CfgPadProfileEntry, cdx6500padpCfgNUIFacilityFormat=cdx6500padpCfgNUIFacilityFormat, cdx6500padpStatPktsQueued=cdx6500padpStatPktsQueued, cdx6500remotepadParamNum16=cdx6500remotepadParamNum16, cdx6500PPSTPadPortEntry=cdx6500PPSTPadPortEntry, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500padprofPar16=cdx6500padprofPar16, cdx6500padpCfgDataBits=cdx6500padpCfgDataBits, cdx6500padpCfgCugMembership=cdx6500padpCfgCugMembership, cdx6500padprofPar19=cdx6500padprofPar19, cdx6500PPSTPadPortTable=cdx6500PPSTPadPortTable, cdx6500padprofPar112=cdx6500padprofPar112, cdx6500remotepadParamVal16=cdx6500remotepadParamVal16, cdx6500remotepadParamNum14=cdx6500remotepadParamNum14, cdx6500padpCfgSubAddress=cdx6500padpCfgSubAddress, cdx6500padprofPar9=cdx6500padprofPar9, cdx6500padprofPar14=cdx6500padprofPar14, cdx6500padprofProfileName=cdx6500padprofProfileName, cdx6500padprofPar117=cdx6500padprofPar117, cdx6500padpStatCharsOutPerSec=cdx6500padpStatCharsOutPerSec, cdx6500padpCfgHighSpeedElectricalInterfaceOption=cdx6500padpCfgHighSpeedElectricalInterfaceOption, cdx6500padpromptPromptText=cdx6500padpromptPromptText, cdx6500padprofPar104=cdx6500padprofPar104, cdx6500padpCfgRemoteParamNum=cdx6500padpCfgRemoteParamNum, cdx6500padprofPar114=cdx6500padprofPar114, cdx6500padpStatUtilizationIn=cdx6500padpStatUtilizationIn, cdx6500padprofPar113=cdx6500padprofPar113, cdx6500remotepadParamNum4=cdx6500remotepadParamNum4, cdx6500padpCfgActionTypeMNEMFail=cdx6500padpCfgActionTypeMNEMFail, cdx6500remotepadParamVal3=cdx6500remotepadParamVal3, cdx6500padpStatPktsInPerSec=cdx6500padpStatPktsInPerSec, cdx6500padpStatPktsOutPerSec=cdx6500padpStatPktsOutPerSec, cdx6500padprofPar12=cdx6500padprofPar12, cdx6500remotepadParamNum10=cdx6500remotepadParamNum10, cdx6500remotepadParamVal12=cdx6500remotepadParamVal12, cdx6500CfgPadPromptEntry=cdx6500CfgPadPromptEntry, cdx6500padpCfgAutoBaudSeq=cdx6500padpCfgAutoBaudSeq, cdx6500remotepadParamNum22=cdx6500remotepadParamNum22, cdx6500padpStatPortStatus=cdx6500padpStatPortStatus, cdx6500padprofPar5=cdx6500padprofPar5, cdx6500padprofPar21=cdx6500padprofPar21, cdx6500remotepadParamVal13=cdx6500remotepadParamVal13, cdx6500padpCfgGroupSubaddress=cdx6500padpCfgGroupSubaddress, cdx6500remotepadParamVal5=cdx6500remotepadParamVal5, cdx6500padpStatPktInTotal=cdx6500padpStatPktInTotal, cdx6500padpCfgNUIVerifyTimer=cdx6500padpCfgNUIVerifyTimer, cdx6500padpStatPortSpeed=cdx6500padpStatPortSpeed, cdx6500remotepadParamNum1=cdx6500remotepadParamNum1, cdx6500padprofPar2=cdx6500padprofPar2, cdx6500remotepadParamVal18=cdx6500remotepadParamVal18, cdx6500padprofPar10=cdx6500padprofPar10, cdx6500padprofPar103=cdx6500padprofPar103, cdx6500padpStatCurrentStatus=cdx6500padpStatCurrentStatus, cdx6500padpCfgInviteToClr=cdx6500padpCfgInviteToClr, cdx6500remotepadParamVal17=cdx6500remotepadParamVal17, cdx6500remotepadParamVal22=cdx6500remotepadParamVal22, cdx6500padpStatOverrunErrors=cdx6500padpStatOverrunErrors, cdx6500padpCfgAutoCallMnem=cdx6500padpCfgAutoCallMnem, cdx6500Configuration=cdx6500Configuration, cdx6500padprofPar107=cdx6500padprofPar107)
