#
# PySNMP MIB module NORTEL-WLAN-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NORTEL-WLAN-AP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, InterfaceIndex, ifPhysAddress = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "ifPhysAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, Unsigned32, ObjectIdentity, iso, IpAddress, NotificationType, TimeTicks, MibIdentifier, Bits, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Unsigned32", "ObjectIdentity", "iso", "IpAddress", "NotificationType", "TimeTicks", "MibIdentifier", "Bits", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TruthValue, MacAddress, PhysAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "PhysAddress", "TextualConvention", "RowStatus", "DisplayString")
wlan2200, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "wlan2200")
nortelWlanApMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 11, 1))
nortelWlanApMib.setRevisions(('2003-07-16 00:00', '2003-09-11 00:00', '2004-04-12 00:00',))
if mibBuilder.loadTexts: nortelWlanApMib.setLastUpdated('200404120000Z')
if mibBuilder.loadTexts: nortelWlanApMib.setOrganization('Nortel Networks')
ntWlanApSys = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1))
ntWlanApLineMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2))
ntWlanApPortMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3))
ntWlanApFileTransferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4))
ntWlanApResetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 5))
ntWlanApIpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6))
ntWlanApDot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7))
ntWlanApTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8))
ntWlanApLID = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9))
ntWlanApRateSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10))
ntWlanApSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11))
ntWlanApQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12))
ntWlanApVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13))
ntWlanApStats = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14))
class NtWlanApDataRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(2, 127)

class NtWlanApWEPKey(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), )
ntWlanSwHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwHardwareVer.setStatus('current')
ntWlanSwBootRomVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwBootRomVer.setStatus('current')
ntWlanSwOpCodeVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwOpCodeVer.setStatus('current')
ntWlanSwCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanSwCountryCode.setStatus('current')
ntWlanSwNNDataFileVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwNNDataFileVer.setStatus('current')
ntWlanLineTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1), )
if mibBuilder.loadTexts: ntWlanLineTable.setStatus('current')
ntWlanLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanLineIndex"))
if mibBuilder.loadTexts: ntWlanLineEntry.setStatus('current')
ntWlanLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanLineIndex.setStatus('current')
ntWlanLineDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineDataBits.setStatus('current')
ntWlanLineParity = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineParity.setStatus('current')
ntWlanLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineSpeed.setStatus('current')
ntWlanLineStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineStopBits.setStatus('current')
ntWlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1), )
if mibBuilder.loadTexts: ntWlanPortTable.setStatus('current')
ntWlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanPortIndex"))
if mibBuilder.loadTexts: ntWlanPortEntry.setStatus('current')
ntWlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanPortIndex.setStatus('current')
ntWlanPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortName.setStatus('current')
ntWlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseMiniGBIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortType.setStatus('current')
ntWlanPortSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortSpeedDpxCfg.setStatus('current')
ntWlanPortFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortFlowCtrlCfg.setStatus('current')
ntWlanPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("portCap10half", 99), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortCapabilities.setStatus('current')
ntWlanPortAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortAutonegotiation.setStatus('current')
ntWlanPortSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortSpeedDpxStatus.setStatus('current')
ntWlanPortFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortFlowCtrlStatus.setStatus('current')
ntWlanTransferStart = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("nogo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanTransferStart.setStatus('current')
ntWlanTransferType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ftpDownload", 1), ("tftpDownload", 2), ("ftpUpload", 3), ("tftpUpload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanTransferType.setStatus('current')
ntWlanFileType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firmware", 1), ("config", 2), ("nortelConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanFileType.setStatus('current')
ntWlanSrcFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanSrcFile.setStatus('current')
ntWlanDestFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDestFile.setStatus('current')
ntWlanFileServer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanFileServer.setStatus('current')
ntWlanUserName = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanUserName.setStatus('current')
ntWlanPassword = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanPassword.setStatus('current')
ntWlanFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("fail", 4), ("invalidSource", 5), ("invalidDestination", 6), ("outOfMemory", 7), ("outOfSpace", 8), ("fileNotFound", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanFileTransferStatus.setStatus('current')
ntWlanRestartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanRestartOpCodeFile.setStatus('current')
ntWlanRestartControl = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanRestartControl.setStatus('current')
ntWlanNetConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanNetConfigIPAddress.setStatus('current')
ntWlanNetConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanNetConfigSubnetMask.setStatus('current')
ntWlanNetDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanNetDefaultGateway.setStatus('current')
ntWlanIpHttpState = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanIpHttpState.setStatus('current')
ntWlanIpHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanIpHttpPort.setStatus('current')
ntWlanDot11Phy = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4))
ntWlanDot11PhyOperationTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1), )
if mibBuilder.loadTexts: ntWlanDot11PhyOperationTable.setStatus('current')
ntWlanDot11PhyOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11Index"))
if mibBuilder.loadTexts: ntWlanDot11PhyOperationEntry.setStatus('current')
ntWlanDot11Index = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11Index.setStatus('current')
ntWlanDot11TurboModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11TurboModeEnabled.setStatus('current')
ntWlanDot11PreambleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("twelveSymbols", 99), ("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11PreambleLength.setStatus('current')
ntWlanDot11dWorldModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11dWorldModeEnabled.setStatus('current')
ntWlanDot11ClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11ClosedSystem.setStatus('current')
ntWlanDot11AuthenticationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5))
ntWlanDot118021xSupport = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xSupport.setStatus('current')
ntWlanDot118021xRequired = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xRequired.setStatus('current')
ntWlanDot118021xBcastKeyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xBcastKeyRefresh.setStatus('current')
ntWlanDot118021xSessKeyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xSessKeyRefresh.setStatus('current')
ntWlanDot118021xReAuthRefresh = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xReAuthRefresh.setStatus('current')
ntWlanDot11AuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6), )
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServerTable.setStatus('current')
ntWlanDot11AuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11ServerIndex"))
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServerEntry.setStatus('current')
ntWlanDot11ServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11ServerIndex.setStatus('current')
ntWlanDot11AuthenticationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServer.setStatus('current')
ntWlanDot11AuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationPort.setStatus('current')
ntWlanDot11AuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationKey.setStatus('current')
ntWlanDot11AuthenticationRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationRetransmit.setStatus('current')
ntWlanDot11AuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationTimeout.setStatus('current')
ntWlanDot11SecondaryAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthServer.setStatus('current')
ntWlanDot11SecondaryAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthPort.setStatus('current')
ntWlanDot11SecondaryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthKey.setStatus('current')
ntWlanDot11SecondaryAuthRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthRetransmit.setStatus('current')
ntWlanDot11SecondaryAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthTimeout.setStatus('current')
ntWlanDot11FilterTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7), )
if mibBuilder.loadTexts: ntWlanDot11FilterTable.setStatus('current')
ntWlanDot11FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11FilterIndex"))
if mibBuilder.loadTexts: ntWlanDot11FilterEntry.setStatus('current')
ntWlanDot11FilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11FilterIndex.setStatus('current')
ntWlanDot11FilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11FilterAddress.setStatus('current')
ntWlanDot11FilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 31))).clone(namedValues=NamedValues(("allowed", 30), ("denied", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11FilterStatus.setStatus('current')
ntWlanDot11TrapTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9), )
if mibBuilder.loadTexts: ntWlanDot11TrapTable.setStatus('current')
ntWlanDot11TrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11InterfaceIndex"))
if mibBuilder.loadTexts: ntWlanDot11TrapEntry.setStatus('current')
ntWlanDot11InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11InterfaceIndex.setStatus('current')
ntWlanDot11AssociationStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11AssociationStationAddress.setStatus('current')
ntWlanDot11DisassociationStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11DisassociationStationAddress.setStatus('current')
ntWlanDot11AssociationMU = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11AssociationMU.setStatus('current')
ntWlanApTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0))
ntWlanApDot1xAuthenticationFail = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 101)).setObjects(("IF-MIB", "ifPhysAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"))
if mibBuilder.loadTexts: ntWlanApDot1xAuthenticationFail.setStatus('current')
ntWlanApMuAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 111)).setObjects(("IF-MIB", "ifPhysAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationMU"))
if mibBuilder.loadTexts: ntWlanApMuAssocTrap.setStatus('current')
ntWlanApMuDisAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 112)).setObjects(("IF-MIB", "ifPhysAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11DisassociationStationAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationMU"))
if mibBuilder.loadTexts: ntWlanApMuDisAssocTrap.setStatus('current')
ntWlanApMuWEPAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 113)).setObjects(("IF-MIB", "ifIndex"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"))
if mibBuilder.loadTexts: ntWlanApMuWEPAuthFail.setStatus('current')
ntWlanApMuWPAAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 114)).setObjects(("IF-MIB", "ifIndex"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"))
if mibBuilder.loadTexts: ntWlanApMuWPAAuthFail.setStatus('current')
ntWlanApMuAssocTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApMuAssocTrapEnabled.setStatus('current')
ntWlanApMuDisAssocTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApMuDisAssocTrapEnabled.setStatus('current')
ntWlanApLIDCheckEtherLinkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApLIDCheckEtherLinkEnabled.setStatus('current')
ntWlanApLIDCheckIPLinkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApLIDCheckIPLinkEnabled.setStatus('current')
ntWlanApLIDCheckIpLinkAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApLIDCheckIpLinkAddress.setStatus('current')
ntWlanApRateSupportTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1), )
if mibBuilder.loadTexts: ntWlanApRateSupportTable.setStatus('current')
ntWlanApRateSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApRateSupportIfIndex"), (0, "NORTEL-WLAN-AP-MIB", "ntWlanApRateSupportSpeed"))
if mibBuilder.loadTexts: ntWlanApRateSupportEntry.setStatus('current')
ntWlanApRateSupportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanApRateSupportIfIndex.setStatus('current')
ntWlanApRateSupportSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1, 2), NtWlanApDataRate())
if mibBuilder.loadTexts: ntWlanApRateSupportSpeed.setStatus('current')
ntWlanApRateSupportLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("supported", 1), ("supportedBasic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApRateSupportLevel.setStatus('current')
ntWlanApSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1), )
if mibBuilder.loadTexts: ntWlanApSecurityTable.setStatus('current')
ntWlanApSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApSecurityIfIndex"))
if mibBuilder.loadTexts: ntWlanApSecurityEntry.setStatus('current')
ntWlanApSecurityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanApSecurityIfIndex.setStatus('current')
ntWlanApSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityEnabled.setStatus('current')
ntWlanApSecurityWEPAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("openSystem", 0), ("sharedKey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPAuthType.setStatus('current')
ntWlanApSecurityWEPKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wepKey64", 0), ("wepKey128", 1), ("wepKey152", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKeyLength.setStatus('current')
ntWlanApSecurityWEPActiveKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPActiveKey.setStatus('current')
ntWlanApSecurityWEPKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 6), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey1.setStatus('current')
ntWlanApSecurityWEPKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 7), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey2.setStatus('current')
ntWlanApSecurityWEPKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 8), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey3.setStatus('current')
ntWlanApSecurityWEPKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 9), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey4.setStatus('current')
ntWlanApSecurityWPASupport = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("supported", 1), ("required", 2), ("wepOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPASupport.setStatus('current')
ntWlanApSecurityWPAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("preSharedKey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPAMode.setStatus('current')
ntWlanApSecurityWPAPreSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(63, 63)).setFixedLength(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPAPreSharedKey.setStatus('current')
ntWlanApSecurityWPAMcastCypherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wep", 0), ("tkip", 1), ("aes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPAMcastCypherMode.setStatus('current')
ntWlanApQoSMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("etherSrc", 1), ("etherDst", 2), ("ethertype", 3), ("directPriorityMap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSMode.setStatus('current')
ntWlanApQoSEtherTypeToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2), )
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueTable.setStatus('current')
ntWlanApQoSEtherTypeToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApQoSEtherTypeToQueueIndex"))
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueEntry.setStatus('current')
ntWlanApQoSEtherTypeToQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueIndex.setStatus('current')
ntWlanApQoSEtherTypeToQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueNumber.setStatus('current')
ntWlanApQoSEtherTypeToQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueRowStatus.setStatus('current')
ntWlanApQoSMACToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3), )
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueTable.setStatus('current')
ntWlanApQoSMACToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApQoSMACToQueueAddress"))
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueEntry.setStatus('current')
ntWlanApQoSMACToQueueAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueAddress.setStatus('current')
ntWlanApQoSMACToQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueNumber.setStatus('current')
ntWlanApQoSMACToQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueRowStatus.setStatus('current')
ntWlanApVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApVlanEnabled.setStatus('current')
ntWlanApVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2), )
if mibBuilder.loadTexts: ntWlanApVlanTable.setStatus('current')
ntWlanApVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApVlanIfIndex"))
if mibBuilder.loadTexts: ntWlanApVlanEntry.setStatus('current')
ntWlanApVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanApVlanIfIndex.setStatus('current')
ntWlanApVlanDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApVlanDefaultVid.setStatus('current')
ntWlanApVlanMUMACToVidTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3), )
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidTable.setStatus('current')
ntWlanApVlanMUMACToVidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApVlanMUMACToVidAddress"))
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidEntry.setStatus('current')
ntWlanApVlanMUMACToVidAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidAddress.setStatus('current')
ntWlanApVlanMUMACToVidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidNumber.setStatus('current')
ntWlanApMUStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1), )
if mibBuilder.loadTexts: ntWlanApMUStatsTable.setStatus('current')
ntWlanApMUStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApMUStatsMUAddress"))
if mibBuilder.loadTexts: ntWlanApMUStatsEntry.setStatus('current')
ntWlanApMUStatsMUAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntWlanApMUStatsMUAddress.setStatus('current')
ntWlanApMUStatsPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsPacketsIn.setStatus('current')
ntWlanApMUStatsPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsPacketsOut.setStatus('current')
ntWlanApMUStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsOctetsIn.setStatus('current')
ntWlanApMUStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsOctetsOut.setStatus('current')
mibBuilder.exportSymbols("NORTEL-WLAN-AP-MIB", ntWlanDot11PreambleLength=ntWlanDot11PreambleLength, ntWlanNetDefaultGateway=ntWlanNetDefaultGateway, ntWlanDot118021xRequired=ntWlanDot118021xRequired, ntWlanApLIDCheckEtherLinkEnabled=ntWlanApLIDCheckEtherLinkEnabled, ntWlanApQoSMACToQueueEntry=ntWlanApQoSMACToQueueEntry, ntWlanApQoSMACToQueueRowStatus=ntWlanApQoSMACToQueueRowStatus, ntWlanDot11AuthenticationEntry=ntWlanDot11AuthenticationEntry, ntWlanApMuDisAssocTrapEnabled=ntWlanApMuDisAssocTrapEnabled, ntWlanPortIndex=ntWlanPortIndex, ntWlanDot11DisassociationStationAddress=ntWlanDot11DisassociationStationAddress, ntWlanLineEntry=ntWlanLineEntry, ntWlanPortSpeedDpxCfg=ntWlanPortSpeedDpxCfg, ntWlanApQoS=ntWlanApQoS, ntWlanDot11ServerIndex=ntWlanDot11ServerIndex, ntWlanRestartControl=ntWlanRestartControl, ntWlanApLIDCheckIPLinkEnabled=ntWlanApLIDCheckIPLinkEnabled, ntWlanSwCountryCode=ntWlanSwCountryCode, ntWlanDot11Phy=ntWlanDot11Phy, ntWlanDot11AuthenticationPort=ntWlanDot11AuthenticationPort, ntWlanApSys=ntWlanApSys, ntWlanApVlanIfIndex=ntWlanApVlanIfIndex, ntWlanApRateSupport=ntWlanApRateSupport, ntWlanDot11AuthenticationServerTable=ntWlanDot11AuthenticationServerTable, ntWlanApMUStatsPacketsOut=ntWlanApMUStatsPacketsOut, ntWlanTransferStart=ntWlanTransferStart, ntWlanDot11TurboModeEnabled=ntWlanDot11TurboModeEnabled, NtWlanApWEPKey=NtWlanApWEPKey, ntWlanDot11AuthenticationServerEntry=ntWlanDot11AuthenticationServerEntry, ntWlanDot11AuthenticationRetransmit=ntWlanDot11AuthenticationRetransmit, ntWlanApMuWEPAuthFail=ntWlanApMuWEPAuthFail, ntWlanApSecurityWEPKey3=ntWlanApSecurityWEPKey3, ntWlanApVlanEntry=ntWlanApVlanEntry, ntWlanApMUStatsPacketsIn=ntWlanApMUStatsPacketsIn, ntWlanNetConfigSubnetMask=ntWlanNetConfigSubnetMask, ntWlanLineParity=ntWlanLineParity, ntWlanDot11FilterStatus=ntWlanDot11FilterStatus, ntWlanApMUStatsOctetsOut=ntWlanApMUStatsOctetsOut, ntWlanApSecurityEnabled=ntWlanApSecurityEnabled, ntWlanPortFlowCtrlCfg=ntWlanPortFlowCtrlCfg, ntWlanDot11AuthenticationKey=ntWlanDot11AuthenticationKey, ntWlanApQoSEtherTypeToQueueRowStatus=ntWlanApQoSEtherTypeToQueueRowStatus, ntWlanApSecurity=ntWlanApSecurity, ntWlanApRateSupportIfIndex=ntWlanApRateSupportIfIndex, ntWlanApSecurityIfIndex=ntWlanApSecurityIfIndex, ntWlanApVlanMUMACToVidEntry=ntWlanApVlanMUMACToVidEntry, nortelWlanApMib=nortelWlanApMib, ntWlanApVlanDefaultVid=ntWlanApVlanDefaultVid, ntWlanPortCapabilities=ntWlanPortCapabilities, ntWlanFileTransferStatus=ntWlanFileTransferStatus, ntWlanApVlanMUMACToVidAddress=ntWlanApVlanMUMACToVidAddress, ntWlanApMUStatsTable=ntWlanApMUStatsTable, ntWlanApDot11=ntWlanApDot11, ntWlanApSecurityWEPActiveKey=ntWlanApSecurityWEPActiveKey, ntWlanApMuWPAAuthFail=ntWlanApMuWPAAuthFail, ntWlanIpHttpState=ntWlanIpHttpState, ntWlanApQoSEtherTypeToQueueIndex=ntWlanApQoSEtherTypeToQueueIndex, ntWlanLineDataBits=ntWlanLineDataBits, ntWlanApSecurityWEPKey4=ntWlanApSecurityWEPKey4, ntWlanSwNNDataFileVer=ntWlanSwNNDataFileVer, ntWlanDot11FilterTable=ntWlanDot11FilterTable, ntWlanRestartOpCodeFile=ntWlanRestartOpCodeFile, ntWlanDot11SecondaryAuthTimeout=ntWlanDot11SecondaryAuthTimeout, ntWlanSwOpCodeVer=ntWlanSwOpCodeVer, ntWlanSwHardwareVer=ntWlanSwHardwareVer, ntWlanApLIDCheckIpLinkAddress=ntWlanApLIDCheckIpLinkAddress, ntWlanFileType=ntWlanFileType, ntWlanApSecurityWPAMode=ntWlanApSecurityWPAMode, ntWlanDot11ClosedSystem=ntWlanDot11ClosedSystem, ntWlanDot118021xSupport=ntWlanDot118021xSupport, ntWlanLineTable=ntWlanLineTable, ntWlanApVlanMUMACToVidTable=ntWlanApVlanMUMACToVidTable, ntWlanPortName=ntWlanPortName, ntWlanApSecurityTable=ntWlanApSecurityTable, ntWlanApIpMgt=ntWlanApIpMgt, ntWlanApVlanEnabled=ntWlanApVlanEnabled, ntWlanApFileTransferMgt=ntWlanApFileTransferMgt, ntWlanApVlanMUMACToVidNumber=ntWlanApVlanMUMACToVidNumber, ntWlanApRateSupportLevel=ntWlanApRateSupportLevel, ntWlanPortSpeedDpxStatus=ntWlanPortSpeedDpxStatus, ntWlanApTraps=ntWlanApTraps, ntWlanApVlanTable=ntWlanApVlanTable, NtWlanApDataRate=NtWlanApDataRate, ntWlanApSecurityWPAPreSharedKey=ntWlanApSecurityWPAPreSharedKey, ntWlanDot11FilterEntry=ntWlanDot11FilterEntry, ntWlanApQoSEtherTypeToQueueNumber=ntWlanApQoSEtherTypeToQueueNumber, ntWlanDot11SecondaryAuthRetransmit=ntWlanDot11SecondaryAuthRetransmit, ntWlanApSecurityWPAMcastCypherMode=ntWlanApSecurityWPAMcastCypherMode, ntWlanApTraps0=ntWlanApTraps0, ntWlanLineSpeed=ntWlanLineSpeed, ntWlanPortAutonegotiation=ntWlanPortAutonegotiation, ntWlanDot11Index=ntWlanDot11Index, ntWlanApRateSupportEntry=ntWlanApRateSupportEntry, ntWlanTransferType=ntWlanTransferType, ntWlanApSecurityWEPKeyLength=ntWlanApSecurityWEPKeyLength, ntWlanApMuDisAssocTrap=ntWlanApMuDisAssocTrap, ntWlanApQoSEtherTypeToQueueEntry=ntWlanApQoSEtherTypeToQueueEntry, ntWlanDot11InterfaceIndex=ntWlanDot11InterfaceIndex, ntWlanApQoSMACToQueueNumber=ntWlanApQoSMACToQueueNumber, ntWlanFileServer=ntWlanFileServer, ntWlanPortType=ntWlanPortType, ntWlanDot11SecondaryAuthKey=ntWlanDot11SecondaryAuthKey, PYSNMP_MODULE_ID=nortelWlanApMib, ntWlanDot11PhyOperationTable=ntWlanDot11PhyOperationTable, ntWlanApSecurityEntry=ntWlanApSecurityEntry, ntWlanApMuAssocTrapEnabled=ntWlanApMuAssocTrapEnabled, ntWlanApMUStatsOctetsIn=ntWlanApMUStatsOctetsIn, ntWlanLineIndex=ntWlanLineIndex, ntWlanApDot1xAuthenticationFail=ntWlanApDot1xAuthenticationFail, ntWlanPortFlowCtrlStatus=ntWlanPortFlowCtrlStatus, ntWlanNetConfigIPAddress=ntWlanNetConfigIPAddress, ntWlanApSecurityWEPKey2=ntWlanApSecurityWEPKey2, ntWlanDot11TrapTable=ntWlanDot11TrapTable, ntWlanApSecurityWEPKey1=ntWlanApSecurityWEPKey1, ntWlanDot118021xSessKeyRefresh=ntWlanDot118021xSessKeyRefresh, ntWlanApQoSEtherTypeToQueueTable=ntWlanApQoSEtherTypeToQueueTable, ntWlanApMUStatsMUAddress=ntWlanApMUStatsMUAddress, ntWlanDot11AuthenticationServer=ntWlanDot11AuthenticationServer, ntWlanApStats=ntWlanApStats, ntWlanUserName=ntWlanUserName, ntWlanDot11SecondaryAuthServer=ntWlanDot11SecondaryAuthServer, ntWlanApLineMgnt=ntWlanApLineMgnt, ntWlanApLID=ntWlanApLID, ntWlanApQoSMACToQueueTable=ntWlanApQoSMACToQueueTable, ntWlanDot11TrapEntry=ntWlanDot11TrapEntry, ntWlanApQoSMode=ntWlanApQoSMode, ntWlanApVlan=ntWlanApVlan, ntWlanApRateSupportTable=ntWlanApRateSupportTable, ntWlanDot118021xBcastKeyRefresh=ntWlanDot118021xBcastKeyRefresh, ntWlanSrcFile=ntWlanSrcFile, ntWlanSwBootRomVer=ntWlanSwBootRomVer, ntWlanIpHttpPort=ntWlanIpHttpPort, ntWlanApSecurityWEPAuthType=ntWlanApSecurityWEPAuthType, ntWlanDot11FilterAddress=ntWlanDot11FilterAddress, ntWlanDot11AssociationStationAddress=ntWlanDot11AssociationStationAddress, ntWlanDot11SecondaryAuthPort=ntWlanDot11SecondaryAuthPort, ntWlanLineStopBits=ntWlanLineStopBits, ntWlanDot11AuthenticationTimeout=ntWlanDot11AuthenticationTimeout, ntWlanApMuAssocTrap=ntWlanApMuAssocTrap, ntWlanApQoSMACToQueueAddress=ntWlanApQoSMACToQueueAddress, ntWlanPortTable=ntWlanPortTable, ntWlanPortEntry=ntWlanPortEntry, ntWlanApPortMgnt=ntWlanApPortMgnt, ntWlanDestFile=ntWlanDestFile, ntWlanPassword=ntWlanPassword, ntWlanDot11FilterIndex=ntWlanDot11FilterIndex, ntWlanDot118021xReAuthRefresh=ntWlanDot118021xReAuthRefresh, ntWlanDot11PhyOperationEntry=ntWlanDot11PhyOperationEntry, ntWlanDot11dWorldModeEnabled=ntWlanDot11dWorldModeEnabled, ntWlanApResetMgt=ntWlanApResetMgt, ntWlanDot11AssociationMU=ntWlanDot11AssociationMU, ntWlanApMUStatsEntry=ntWlanApMUStatsEntry, ntWlanApRateSupportSpeed=ntWlanApRateSupportSpeed, ntWlanApSecurityWPASupport=ntWlanApSecurityWPASupport)
