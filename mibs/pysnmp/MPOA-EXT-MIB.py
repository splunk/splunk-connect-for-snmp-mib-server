#
# PySNMP MIB module MPOA-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPOA-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:04:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
extensions, Boolean = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "extensions", "Boolean")
mpcIndex, = mibBuilder.importSymbols("MPOA-MIB", "mpcIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, MibIdentifier, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, TimeTicks, Counter64, Counter32, ObjectIdentity, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "MibIdentifier", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter64", "Counter32", "ObjectIdentity", "Gauge32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC-v1", "TruthValue", "RowStatus")
cnMpoaExt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 7))
cnMpcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 7, 2), )
if mibBuilder.loadTexts: cnMpcConfigTable.setStatus('mandatory')
cnMpcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 7, 2, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIndex"))
if mibBuilder.loadTexts: cnMpcConfigEntry.setStatus('mandatory')
cnMpcShareControlVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpcShareControlVccs.setStatus('mandatory')
cnMpcShareDataVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpcShareDataVccs.setStatus('mandatory')
cnMpcValidEntryCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpcValidEntryCheckInterval.setStatus('mandatory')
cnMpcMinFlowPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpcMinFlowPacketCount.setStatus('mandatory')
cnMpoaIpVerification = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 7, 3))
cnMpoaIpVerificationTableType = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("exclusion", 2), ("inclusion", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpoaIpVerificationTableType.setStatus('mandatory')
cnMpoaIpVerificationTableStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpoaIpVerificationTableStatus.setStatus('mandatory')
cnMpoaIpVerificationTableDownload = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 3), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpoaIpVerificationTableDownload.setStatus('mandatory')
cnMpoaIpVerificationTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 4), )
if mibBuilder.loadTexts: cnMpoaIpVerificationTable.setStatus('mandatory')
cnMpoaIpVerificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 4, 1), ).setIndexNames((0, "MPOA-EXT-MIB", "cnMpoaIpVerificationAddress"), (0, "MPOA-EXT-MIB", "cnMpoaIpVerificationMask"))
if mibBuilder.loadTexts: cnMpoaIpVerificationEntry.setStatus('mandatory')
cnMpoaIpVerificationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnMpoaIpVerificationAddress.setStatus('mandatory')
cnMpoaIpVerificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnMpoaIpVerificationMask.setStatus('mandatory')
cnMpoaIpVerificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 7, 3, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMpoaIpVerificationStatus.setStatus('mandatory')
mibBuilder.exportSymbols("MPOA-EXT-MIB", cnMpoaIpVerificationTableStatus=cnMpoaIpVerificationTableStatus, cnMpoaIpVerificationTableType=cnMpoaIpVerificationTableType, cnMpcConfigTable=cnMpcConfigTable, cnMpoaIpVerificationTable=cnMpoaIpVerificationTable, cnMpcMinFlowPacketCount=cnMpcMinFlowPacketCount, cnMpoaIpVerificationTableDownload=cnMpoaIpVerificationTableDownload, cnMpoaIpVerificationAddress=cnMpoaIpVerificationAddress, cnMpcShareControlVccs=cnMpcShareControlVccs, cnMpcShareDataVccs=cnMpcShareDataVccs, cnMpoaIpVerificationStatus=cnMpoaIpVerificationStatus, cnMpcConfigEntry=cnMpcConfigEntry, cnMpoaIpVerificationMask=cnMpoaIpVerificationMask, cnMpoaExt=cnMpoaExt, cnMpoaIpVerification=cnMpoaIpVerification, cnMpcValidEntryCheckInterval=cnMpcValidEntryCheckInterval, cnMpoaIpVerificationEntry=cnMpoaIpVerificationEntry)
