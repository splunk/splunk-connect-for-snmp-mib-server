#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
regModule, groups = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "regModule", "groups")
FaultLedStates, PowerLedStates, Presence, PresenceLedStates, INT32withException, Index, IdromBinary16, Power = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "FaultLedStates", "PowerLedStates", "Presence", "PresenceLedStates", "INT32withException", "Index", "IdromBinary16", "Power")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, Gauge32, ObjectIdentity, Bits, MibIdentifier, Unsigned32, ModuleIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Gauge32", "ObjectIdentity", "Bits", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "TimeTicks")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
multiFlexServerBladesMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 12))
multiFlexServerBladesMibModule.setRevisions(('2008-05-19 20:28', '2008-05-07 02:40', '2007-09-19 15:40', '2007-08-31 09:30', '2007-08-29 19:30', '2007-08-29 14:30', '2007-08-27 16:00', '2007-08-22 15:45', '2007-08-20 15:30', '2007-08-16 13:30', '2007-07-27 15:30', '2007-07-09 12:30', '2007-07-05 16:00', '2007-05-21 14:00', '2007-05-21 14:00', '2007-04-09 10:30', '2007-03-14 11:00', '2007-03-13 18:00', '2007-03-06 10:30', '2007-02-22 17:00', '2006-11-07 07:01', '2006-10-01 18:00',))
if mibBuilder.loadTexts: multiFlexServerBladesMibModule.setLastUpdated('200805192028Z')
if mibBuilder.loadTexts: multiFlexServerBladesMibModule.setOrganization('Intel Corporation')
maxBlades = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlades.setStatus('current')
numOfBlades = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfBlades.setStatus('current')
bladePresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePresenceMask.setStatus('current')
blades = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202))
if mibBuilder.loadTexts: blades.setStatus('current')
bladeTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1), )
if mibBuilder.loadTexts: bladeTable.setStatus('current')
bladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"))
if mibBuilder.loadTexts: bladeEntry.setStatus('current')
bladeSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeSlotId.setStatus('current')
bladePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladePresence.setStatus('current')
maxFrus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 3), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxFrus.setStatus('current')
numOfFrus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 4), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfFrus.setStatus('current')
bladeFruPresenceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruPresenceMask.setStatus('current')
bladePowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 6), PowerLedStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePowerLed.setStatus('current')
bladeFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 7), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFaultLed.setStatus('current')
bladePresenceLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 8), PresenceLedStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bladePresenceLed.setStatus('current')
bladeBmcFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBmcFirmwareVersion.setStatus('current')
bladeBootBlockVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBootBlockVersion.setStatus('current')
bladeBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBiosVersion.setStatus('current')
bladeConsoleRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("disabled", 0), ("networkSerialPort", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeConsoleRedirection.setStatus('current')
bladeLegacyOsRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("noLegacyOsRedirection", 0), ("legacyOsRedirection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeLegacyOsRedirection.setStatus('current')
bladeBootCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeBootCount.setStatus('current')
bladeFruTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2), )
if mibBuilder.loadTexts: bladeFruTable.setStatus('current')
bladeFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruType"))
if mibBuilder.loadTexts: bladeFruEntry.setStatus('current')
bladeFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blade", 1), ("mezzanine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruType.setStatus('current')
bladeFruPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruPresence.setStatus('current')
bladeFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruVendor.setStatus('current')
bladeFruMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruMfgDate.setStatus('current')
bladeFruDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruDeviceName.setStatus('current')
bladeFruPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruPart.setStatus('current')
bladeFruSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruSerialNo.setStatus('current')
bladeFruMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruMaximumPower.setStatus('current')
bladeFruNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruNominalPower.setStatus('current')
bladeFruAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 2, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeFruAssetTag.setStatus('current')
bladeNicTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 3), )
if mibBuilder.loadTexts: bladeNicTable.setStatus('current')
bladeNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 3, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeNic"))
if mibBuilder.loadTexts: bladeNicEntry.setStatus('current')
bladeNic = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeNic.setStatus('current')
bladeProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4), )
if mibBuilder.loadTexts: bladeProcessorTable.setStatus('current')
bladeProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "handle"))
if mibBuilder.loadTexts: bladeProcessorEntry.setStatus('current')
handle = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 1), Index())
if mibBuilder.loadTexts: handle.setStatus('current')
bladeProcessorSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorSocket.setStatus('current')
bladeProcessorPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 3), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorPresence.setStatus('current')
bladeProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorType.setStatus('current')
bladeProcessorFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorFamily.setStatus('current')
bladeProcessorManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorManufacturer.setStatus('current')
bladeProcessorID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorID.setStatus('current')
bladeProcessorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorVersion.setStatus('current')
bladeProcessorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorVoltage.setStatus('current')
bladeProcessorExtClock = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorExtClock.setStatus('current')
bladeProcessorMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorMaxSpeed.setStatus('current')
bladeProcessorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorStatus.setStatus('current')
bladeProcessorUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorUpgrade.setStatus('current')
bladeProcessorSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorSerialNo.setStatus('current')
bladeProcessorAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorAssetTag.setStatus('current')
bladeProcessorPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeProcessorPartNo.setStatus('current')
bladeMemorySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5), )
if mibBuilder.loadTexts: bladeMemorySummaryTable.setStatus('current')
bladeMemorySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1), )
bladeEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemorySummaryEntry"))
bladeMemorySummaryEntry.setIndexNames(*bladeEntry.getIndexNames())
if mibBuilder.loadTexts: bladeMemorySummaryEntry.setStatus('current')
bladeMSMaxDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSMaxDevices.setStatus('current')
bladeMSNumOfDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSNumOfDevices.setStatus('current')
bladeMSCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSCapacity.setStatus('current')
bladeMSTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSTotalSize.setStatus('current')
bladeMSEffectiveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSEffectiveSize.setStatus('current')
bladeMSNumFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSNumFailed.setStatus('current')
bladeMSDisabledSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSDisabledSize.setStatus('current')
bladeMSSpareSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSSpareSize.setStatus('current')
bladeMSRasPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("supportsMirroring", 1), ("supportsSparing", 2), ("supportsBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSRasPossible.setStatus('current')
bladeMSRasConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mirroring", 1), ("sparing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSRasConfiguration.setStatus('current')
bladeMSErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitEcc", 5), ("multiBitEcc", 6), ("crc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMSErrorCorrection.setStatus('current')
bladeMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6), )
if mibBuilder.loadTexts: bladeMemoryTable.setStatus('current')
bladeMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "handle"))
if mibBuilder.loadTexts: bladeMemoryEntry.setStatus('current')
bladeMemTotalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemTotalWidth.setStatus('current')
bladeMemDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemDataWidth.setStatus('current')
bladeMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0))).clone(namedValues=NamedValues(("unknown", -1), ("notInstalled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemSize.setStatus('current')
bladeMemGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unknown", -1), ("megabytes", 0), ("kilobytes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemGranularity.setStatus('current')
bladeMemFormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("simm", 3), ("sip", 4), ("chip", 5), ("dip", 6), ("zip", 7), ("proprietaryCard", 8), ("dimm", 9), ("tsop", 10), ("rowOfChips", 11), ("rimm", 12), ("sodimm", 13), ("srimm", 14), ("fbdimm", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemFormFactor.setStatus('current')
bladeMemDeviceSet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0))).clone(namedValues=NamedValues(("unknown", -1), ("noSet", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemDeviceSet.setStatus('current')
bladeMemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemLocation.setStatus('current')
bladeMemBank = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemBank.setStatus('current')
bladeMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dram", 3), ("edram", 4), ("vram", 5), ("sram", 6), ("ram", 7), ("rom", 8), ("flash", 9), ("eeprom", 10), ("feprom", 11), ("eprom", 12), ("cdram", 13), ("dram3", 14), ("sdram", 15), ("sgram", 16), ("rdram", 17), ("ddr", 18), ("ddr2", 19), ("ddr2fbdimm", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemType.setStatus('current')
bladeMemTypeDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 10), Bits().clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("fastPaged", 3), ("staticColumn", 4), ("pseudoStatic", 5), ("rambus", 6), ("synchronous", 7), ("cmos", 8), ("edo", 9), ("windowDram", 10), ("cacheDram", 11), ("nonVolatile", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemTypeDetail.setStatus('current')
bladeMemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemSpeed.setStatus('current')
bladeMemManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemManufacturer.setStatus('current')
bladeMemSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemSerialNo.setStatus('current')
bladeMemAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemAssetTag.setStatus('current')
bladeMemPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 202, 6, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bladeMemPart.setStatus('current')
bladeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 12)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "maxBlades"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "numOfBlades"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladePresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "maxFrus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "numOfFrus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladePresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladePowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladePresenceLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeBmcFirmwareVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeBootBlockVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeBiosVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeConsoleRedirection"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeLegacyOsRedirection"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeBootCount"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeFruAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeNic"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorSocket"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorFamily"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorManufacturer"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorID"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorVoltage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorExtClock"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorMaxSpeed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorUpgrade"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeProcessorPartNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSMaxDevices"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSNumOfDevices"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSErrorCorrection"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSTotalSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSNumFailed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSDisabledSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSSpareSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSEffectiveSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSRasPossible"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMSRasConfiguration"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemTotalWidth"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemDataWidth"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemGranularity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemFormFactor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemDeviceSet"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemLocation"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemBank"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemTypeDetail"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemSpeed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemManufacturer"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeMemPart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bladeGroup = bladeGroup.setStatus('current')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", bladeProcessorManufacturer=bladeProcessorManufacturer, maxBlades=maxBlades, bladeMemFormFactor=bladeMemFormFactor, bladeMSSpareSize=bladeMSSpareSize, bladeEntry=bladeEntry, bladeMemTypeDetail=bladeMemTypeDetail, bladeMemType=bladeMemType, blades=blades, bladeNicEntry=bladeNicEntry, handle=handle, bladeTable=bladeTable, bladeMSDisabledSize=bladeMSDisabledSize, bladeLegacyOsRedirection=bladeLegacyOsRedirection, bladeProcessorExtClock=bladeProcessorExtClock, bladeMemGranularity=bladeMemGranularity, bladeFruAssetTag=bladeFruAssetTag, bladeProcessorID=bladeProcessorID, bladeMemAssetTag=bladeMemAssetTag, bladeProcessorFamily=bladeProcessorFamily, bladeFruSerialNo=bladeFruSerialNo, bladeMemDataWidth=bladeMemDataWidth, bladeSlotId=bladeSlotId, bladeFruMfgDate=bladeFruMfgDate, bladeMemSize=bladeMemSize, bladeMemorySummaryTable=bladeMemorySummaryTable, bladeMSTotalSize=bladeMSTotalSize, bladeMSErrorCorrection=bladeMSErrorCorrection, bladePresenceMask=bladePresenceMask, bladeBiosVersion=bladeBiosVersion, numOfFrus=numOfFrus, bladeFruType=bladeFruType, bladeFaultLed=bladeFaultLed, maxFrus=maxFrus, bladeMSCapacity=bladeMSCapacity, bladeFruPart=bladeFruPart, bladeProcessorUpgrade=bladeProcessorUpgrade, bladeBootBlockVersion=bladeBootBlockVersion, bladeProcessorPartNo=bladeProcessorPartNo, bladeFruPresence=bladeFruPresence, bladeFruDeviceName=bladeFruDeviceName, bladeFruTable=bladeFruTable, bladePresenceLed=bladePresenceLed, bladeMemSpeed=bladeMemSpeed, bladeProcessorPresence=bladeProcessorPresence, bladeBmcFirmwareVersion=bladeBmcFirmwareVersion, bladeMSNumFailed=bladeMSNumFailed, bladeProcessorVoltage=bladeProcessorVoltage, bladeConsoleRedirection=bladeConsoleRedirection, bladeProcessorMaxSpeed=bladeProcessorMaxSpeed, bladeMemBank=bladeMemBank, bladeMSMaxDevices=bladeMSMaxDevices, bladeMSNumOfDevices=bladeMSNumOfDevices, bladeFruPresenceMask=bladeFruPresenceMask, bladeMemTotalWidth=bladeMemTotalWidth, bladeProcessorSocket=bladeProcessorSocket, bladeMemorySummaryEntry=bladeMemorySummaryEntry, bladeGroup=bladeGroup, bladeBootCount=bladeBootCount, bladeMemDeviceSet=bladeMemDeviceSet, bladeProcessorVersion=bladeProcessorVersion, bladeMemPart=bladeMemPart, bladeFruNominalPower=bladeFruNominalPower, bladeNicTable=bladeNicTable, bladeProcessorTable=bladeProcessorTable, multiFlexServerBladesMibModule=multiFlexServerBladesMibModule, bladePowerLed=bladePowerLed, bladeMemLocation=bladeMemLocation, bladeFruMaximumPower=bladeFruMaximumPower, numOfBlades=numOfBlades, bladeProcessorSerialNo=bladeProcessorSerialNo, bladeProcessorAssetTag=bladeProcessorAssetTag, bladeProcessorEntry=bladeProcessorEntry, bladeProcessorStatus=bladeProcessorStatus, bladeNic=bladeNic, bladeFruVendor=bladeFruVendor, bladeProcessorType=bladeProcessorType, bladeMSRasPossible=bladeMSRasPossible, bladeMemoryEntry=bladeMemoryEntry, bladeMemManufacturer=bladeMemManufacturer, bladeMSRasConfiguration=bladeMSRasConfiguration, bladeMemSerialNo=bladeMemSerialNo, bladeFruEntry=bladeFruEntry, bladePresence=bladePresence, bladeMSEffectiveSize=bladeMSEffectiveSize, PYSNMP_MODULE_ID=multiFlexServerBladesMibModule, bladeMemoryTable=bladeMemoryTable)
