#
# PySNMP MIB module CABLETRON-TRAPS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CABLETRON-TRAPS
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
atmInterfaceMyNeighborIpAddress, atmVpCrossConnectRowStatus, atmInterfaceMyNeighborIfName, atmVcCrossConnectRowStatus = mibBuilder.importSymbols("ATM-MIB", "atmInterfaceMyNeighborIpAddress", "atmVpCrossConnectRowStatus", "atmInterfaceMyNeighborIfName", "atmVcCrossConnectRowStatus")
chSlotModuleType, chSlotID = mibBuilder.importSymbols("CHASSIS-MIB", "chSlotModuleType", "chSlotID")
ctBroadcastCtlSlotID, ctBroadcastCtlInterface, ctBroadcastDesiredBroadcastThreshold = mibBuilder.importSymbols("CT-BROADCAST-MIB", "ctBroadcastCtlSlotID", "ctBroadcastCtlInterface", "ctBroadcastDesiredBroadcastThreshold")
contTypeLogicalChanges, contTypePhysicalChanges, contPhysicalEntryID = mibBuilder.importSymbols("CT-CONTAINER-MIB", "contTypeLogicalChanges", "contTypePhysicalChanges", "contPhysicalEntryID")
ctATMPhyRedundIfIndex, = mibBuilder.importSymbols("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex")
ctIfPortPortNumber, ctIfNumber, ctIfPortType = mibBuilder.importSymbols("CTIF-EXT-MIB", "ctIfPortPortNumber", "ctIfNumber", "ctIfPortType")
nwAppnFwdLsAdjCpType, nwAppnEventTextString, nwAppnFwdLsName, nwAppnFwdLsAdjCpName = mibBuilder.importSymbols("CTRON-APPN-MIB", "nwAppnFwdLsAdjCpType", "nwAppnEventTextString", "nwAppnFwdLsName", "nwAppnFwdLsAdjCpName")
nwAtEventTextString, = mibBuilder.importSymbols("CTRON-AppleTalk-ROUTER-MIB", "nwAtEventTextString")
bdgdeviceStatus, = mibBuilder.importSymbols("CTRON-BDG-MIB", "bdgdeviceStatus")
ctChasPowerSupplyNum, ctChasPowerSupplyType = mibBuilder.importSymbols("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum", "ctChasPowerSupplyType")
powerSupplyNum, deviceType = mibBuilder.importSymbols("CTRON-COMMON-MIB", "powerSupplyNum", "deviceType")
nwDecIVEventTextString, = mibBuilder.importSymbols("CTRON-DECIV-ROUTER-MIB", "nwDecIVEventTextString")
chEnvFanID, boardEnvTempRelStatus, psEnvSlotID, chEnvAmbientStatus, psEnvFanSpeed, psEnvFanStatus, chEnvFanSpeed, chEnvHumidityStatus, chEnvHumidity, boardEnvSlotID, boardEnvTemp, boardEnvTempStatus, psEnvTempStatus, chEnvAmbientTemp, chEnvFanStatus, psEnvTemp = mibBuilder.importSymbols("CTRON-ENVIRONMENT-MIB", "chEnvFanID", "boardEnvTempRelStatus", "psEnvSlotID", "chEnvAmbientStatus", "psEnvFanSpeed", "psEnvFanStatus", "chEnvFanSpeed", "chEnvHumidityStatus", "chEnvHumidity", "boardEnvSlotID", "boardEnvTemp", "boardEnvTempStatus", "psEnvTempStatus", "chEnvAmbientTemp", "chEnvFanStatus", "psEnvTemp")
ctFpRedundActivePort, = mibBuilder.importSymbols("CTRON-FRONTPANEL-MIB", "ctFpRedundActivePort")
nwIpEventTextString, = mibBuilder.importSymbols("CTRON-IP-ROUTER-MIB", "nwIpEventTextString")
nwIpxEventTextString, = mibBuilder.importSymbols("CTRON-IPX-ROUTER-MIB", "nwIpxEventTextString")
cabletron, = mibBuilder.importSymbols("CTRON-OIDS", "cabletron")
psPowerVoltage, boardPowerLocalAdminStatus, chPowerMainVoltageStatus, termPowerVoltage, psPowerOperationalStatus, termPowerModule2Status, psPowerID, boardPowerSlotStatusID, chPowerMainVoltage, psPowerCurrent, psPowerStatus, boardPowerOperationalStatus, psPowerSlotID, boardPowerLocalStatus, chPowerLineMaxSupply, chPowerLineTotalSupply, termPowerModule1Status, psPowerSlotStatusID, boardPowerStatus, boardPowerVoltage, chPowerDiagVoltage, boardPowerCurrent, psPowerAdmin, boardPowerSlotID, termPowerStatus, chPowerDiagVoltageStatus, boardPowerID = mibBuilder.importSymbols("CTRON-POWER-SUPPLY-MIB", "psPowerVoltage", "boardPowerLocalAdminStatus", "chPowerMainVoltageStatus", "termPowerVoltage", "psPowerOperationalStatus", "termPowerModule2Status", "psPowerID", "boardPowerSlotStatusID", "chPowerMainVoltage", "psPowerCurrent", "psPowerStatus", "boardPowerOperationalStatus", "psPowerSlotID", "boardPowerLocalStatus", "chPowerLineMaxSupply", "chPowerLineTotalSupply", "termPowerModule1Status", "psPowerSlotStatusID", "boardPowerStatus", "boardPowerVoltage", "chPowerDiagVoltage", "boardPowerCurrent", "psPowerAdmin", "boardPowerSlotID", "termPowerStatus", "chPowerDiagVoltageStatus", "boardPowerID")
sfpsBlockSourceMAC, = mibBuilder.importSymbols("CTRON-SFPS-BASE-MIB", "sfpsBlockSourceMAC")
sfpsNodeTablePort, sfpsNodeTableBaseAddress = mibBuilder.importSymbols("CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTablePort", "sfpsNodeTableBaseAddress")
sfpsInPortConfigPort, sfpsInPortConfigType = mibBuilder.importSymbols("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigPort", "sfpsInPortConfigType")
sfpsBlockResolveTableAOValue, = mibBuilder.importSymbols("CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableAOValue")
sfpsDirViolationAOValue, sfpsDirViolationType = mibBuilder.importSymbols("CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationAOValue", "sfpsDirViolationType")
ctsmtmibRingSmtIndex, ctsmtmibRingMacAddr, ctsmtmibRingMacIndex, ctsmtmibRingTopology, ctsmtmibRingNodeIndex = mibBuilder.importSymbols("CTSMTMIB-MIB", "ctsmtmibRingSmtIndex", "ctsmtmibRingMacAddr", "ctsmtmibRingMacIndex", "ctsmtmibRingTopology", "ctsmtmibRingNodeIndex")
snmpOIDObject, snmpOIDDestination, snmpPollOwner, snmpOIDOwner, snmpPollDestination, snmpOIDSequence = mibBuilder.importSymbols("DLM-MIB", "snmpOIDObject", "snmpOIDDestination", "snmpPollOwner", "snmpOIDOwner", "snmpPollDestination", "snmpOIDSequence")
tRingMgmtStnPort, tRingAlarmsRingTimebase, tRingMgmtSecurityAddressAdd, tRingMgmtStnAddress, tRingStatsRingLastBeaconType, tRingAlarmsRingBeaconStateThreshold, tRingMgmtStnDNA, tRingAlarmsRingTokenErrsThreshold, tRingMgmtStnUNA, tRingMgmtStnName, tRingAlarmsStnThrshLineErrsThreshold, tRingPortGrpId, tRingAlarmsStnThrshAddress, tRingAlarmsRingLostFramesThreshold, tRingMgmtStnBoard, tRingStatsRingLastBeacon, tRingMgmtSecurityAddressRemove, tRingAlarmsRingClaimTknThreshold, tRingAlarmsRingRingPurgesThreshold, tRingAlarmsStnThrshBurstErrsThreshold, tRingAlarmsStnThrshRcvrCongestThreshold, tRingPortMgmtPortId, tRingAlarmsStnThrshInternalErrsThreshold, tRingAlarmsRingAMPErrsThreshold, tRingAlarmsStnThrshACErrsThreshold, tRingAlarmsRingFrameCountThreshold = mibBuilder.importSymbols("DOT5-LOG-MIB", "tRingMgmtStnPort", "tRingAlarmsRingTimebase", "tRingMgmtSecurityAddressAdd", "tRingMgmtStnAddress", "tRingStatsRingLastBeaconType", "tRingAlarmsRingBeaconStateThreshold", "tRingMgmtStnDNA", "tRingAlarmsRingTokenErrsThreshold", "tRingMgmtStnUNA", "tRingMgmtStnName", "tRingAlarmsStnThrshLineErrsThreshold", "tRingPortGrpId", "tRingAlarmsStnThrshAddress", "tRingAlarmsRingLostFramesThreshold", "tRingMgmtStnBoard", "tRingStatsRingLastBeacon", "tRingMgmtSecurityAddressRemove", "tRingAlarmsRingClaimTknThreshold", "tRingAlarmsRingRingPurgesThreshold", "tRingAlarmsStnThrshBurstErrsThreshold", "tRingAlarmsStnThrshRcvrCongestThreshold", "tRingPortMgmtPortId", "tRingAlarmsStnThrshInternalErrsThreshold", "tRingAlarmsRingAMPErrsThreshold", "tRingAlarmsStnThrshACErrsThreshold", "tRingAlarmsRingFrameCountThreshold")
fddimibPORTIndex, fddimibMACCurrentPath, fddimibPORTAction, fddimibMACFrameErrorRatio, fddimibSMTIndex, fddimibSMTCFState, fddimibMACRMTState, fddimibPORTLerEstimate, fddimibSMTMasterCts, fddimibMACIndex, fddimibPORTConnectState = mibBuilder.importSymbols("FDDI-SMT73-MIB", "fddimibPORTIndex", "fddimibMACCurrentPath", "fddimibPORTAction", "fddimibMACFrameErrorRatio", "fddimibSMTIndex", "fddimibSMTCFState", "fddimibMACRMTState", "fddimibPORTLerEstimate", "fddimibSMTMasterCts", "fddimibMACIndex", "fddimibPORTConnectState")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
lecRowStatus, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "lecRowStatus")
rptrAlarmsTrafThreshold, rptrPortGrpAlarmErrThreshold, rptrPortSecurityPortGrpId, rptrPortGrpMgmtGrpId, rptrPortGrpAlarmErrSource, rptrPortSecurityLockStatus, rptrSecurityLearnState, rptrPortSecurityLearnMode, rptrSrcAddrMgmtPortLock, rptrSecurityLearnMode, rptrMgmtInterfaceNum, rptrPortSecurityLearnState, rptrPortMgmtPortType, rptrPortAlarmTrafThreshold, rptrPortAlarmErrThreshold, rptrPortSecuritySecureState, rptrPortGrpSrcAddrLockGrpId, rptrPortSrcAddrTopoState, rptrPortGrpAlarmCollThreshold, rptrPortGrpAlarmTrafThreshold, rptrPortAlarmBroadThreshold, rptrAlarmsCollThreshold, rptrPortAlarmCollThreshold, rptrAlarmsBroadThreshold, rptrPortGrpSASecurityLearnMode, rptrPortAlarmErrSource, rptrPortMgmtPortId, rptrPortSrcAddrAddressList, rptrPortGrpSASecurityLearnState, rptrPortSecurityPortId, rptrAlarmsAlarmTimebase, rptrPortGrpAlarmBroadThreshold, rptrAlarmsErrSource, rptrPortRedundCrctNum, rptrAlarmsErrThreshold = mibBuilder.importSymbols("REPEATER-REV4-MIB", "rptrAlarmsTrafThreshold", "rptrPortGrpAlarmErrThreshold", "rptrPortSecurityPortGrpId", "rptrPortGrpMgmtGrpId", "rptrPortGrpAlarmErrSource", "rptrPortSecurityLockStatus", "rptrSecurityLearnState", "rptrPortSecurityLearnMode", "rptrSrcAddrMgmtPortLock", "rptrSecurityLearnMode", "rptrMgmtInterfaceNum", "rptrPortSecurityLearnState", "rptrPortMgmtPortType", "rptrPortAlarmTrafThreshold", "rptrPortAlarmErrThreshold", "rptrPortSecuritySecureState", "rptrPortGrpSrcAddrLockGrpId", "rptrPortSrcAddrTopoState", "rptrPortGrpAlarmCollThreshold", "rptrPortGrpAlarmTrafThreshold", "rptrPortAlarmBroadThreshold", "rptrAlarmsCollThreshold", "rptrPortAlarmCollThreshold", "rptrAlarmsBroadThreshold", "rptrPortGrpSASecurityLearnMode", "rptrPortAlarmErrSource", "rptrPortMgmtPortId", "rptrPortSrcAddrAddressList", "rptrPortGrpSASecurityLearnState", "rptrPortSecurityPortId", "rptrAlarmsAlarmTimebase", "rptrPortGrpAlarmBroadThreshold", "rptrAlarmsErrSource", "rptrPortRedundCrctNum", "rptrAlarmsErrThreshold")
logTime, logDescription, logIndex, logEventIndex = mibBuilder.importSymbols("RFC1271-MIB", "logTime", "logDescription", "logIndex", "logEventIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32, Gauge32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
upsIndex, upsStatusFault, upsAddlFuncsStatusFault, upsExtMeasAlarmStatus = mibBuilder.importSymbols("UPS2-MIB", "upsIndex", "upsStatusFault", "upsAddlFuncsStatusFault", "upsExtMeasAlarmStatus")
ctdlswTConnUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1))
ctdlswTConnDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,2))
portSegmenting = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,257)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
portUnsegementing = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,258)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
portLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,259)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
portLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,260)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
srcaddrNew = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,261)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrAddressList"))
srcaddrTimeout = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,262)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrAddressList"))
boardRemoval = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,263)).setObjects(("CHASSIS-MIB", "chSlotID"))
boardInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,264)).setObjects(("CHASSIS-MIB", "chSlotID"), ("CTRON-COMMON-MIB", "deviceType"))
redundActivePortInCircuitFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,265)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortRedundCrctNum"))
redundPortActivated = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,266)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortRedundCrctNum"))
redundPortTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,267)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortRedundCrctNum"))
boardTrafficThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,271)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmTrafThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
boardErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,272)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmErrThreshold"), ("REPEATER-REV4-MIB", "rptrPortGrpAlarmErrSource"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
boardCollsionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,273)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmCollThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
portTrafficThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,274)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmTrafThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
portErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,275)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmErrThreshold"), ("REPEATER-REV4-MIB", "rptrPortAlarmErrSource"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
portCollsionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,276)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmCollThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
portTypeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,277)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrTopoState"))
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,279)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrAddressList"))
portViolationReset = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,280)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
envTempWarm = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,281)).setObjects(("CHASSIS-MIB", "chSlotID"))
envTempHot = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,282)).setObjects(("CHASSIS-MIB", "chSlotID"))
envVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,283)).setObjects(("CTRON-COMMON-MIB", "powerSupplyNum"))
envTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,284)).setObjects(("CHASSIS-MIB", "chSlotID"))
envVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,285))
fanFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,286))
fanNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,287))
boardBroadcastThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,289)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmBroadThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
portBroadcastThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,290)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmBroadThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
systemVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,293))
systemVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,294))
epimRemoval = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,295)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
epimInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,296)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortType"))
rptrTrafficThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,297)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsTrafThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
rptrErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,304)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsErrThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsErrSource"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
rptrCollsionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,305)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsCollThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
rptrLockStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,306)).setObjects(("REPEATER-REV4-MIB", "rptrSrcAddrMgmtPortLock"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
rptrBroadcastThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,307)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsBroadThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
srcAddressPortLockStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,309)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSecurityLockStatus"))
chBoardInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,310)).setObjects(("CHASSIS-MIB", "chSlotID"), ("CHASSIS-MIB", "chSlotModuleType"))
portSecureStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,313)).setObjects(("REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), ("REPEATER-REV4-MIB", "rptrPortSecurityPortId"), ("REPEATER-REV4-MIB", "rptrPortSecuritySecureState"))
rptrLearnStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,314)).setObjects(("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"), ("REPEATER-REV4-MIB", "rptrSecurityLearnState"))
rptrPortGrpLearnStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,315)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpSrcAddrLockGrpId"), ("REPEATER-REV4-MIB", "rptrPortGrpSASecurityLearnState"))
rptrPortLearnStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,316)).setObjects(("REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), ("REPEATER-REV4-MIB", "rptrPortSecurityPortId"), ("REPEATER-REV4-MIB", "rptrPortSecurityLearnState"))
rptrLearnModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,317)).setObjects(("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"), ("REPEATER-REV4-MIB", "rptrSecurityLearnMode"))
portGrpLearnModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,318)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpSrcAddrLockGrpId"), ("REPEATER-REV4-MIB", "rptrPortGrpSASecurityLearnMode"))
portLearnModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,319)).setObjects(("REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), ("REPEATER-REV4-MIB", "rptrPortSecurityPortId"), ("REPEATER-REV4-MIB", "rptrPortSecurityLearnMode"))
fpportActivated = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,400)).setObjects(("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
interfacePortInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,416)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"), ("CTIF-EXT-MIB", "ctIfPortType"))
interfacePortRemoval = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,417)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"))
interfacePortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,418)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"))
interfacePortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,419)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"))
portInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,513)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
portDeInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,514)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
ringSpeedFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,515)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"))
ringSpeedFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,516)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"))
ringPortFaulted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,517)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
ringPortFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,518)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
beaconState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,519)).setObjects(("DOT5-LOG-MIB", "tRingStatsRingLastBeaconType"), ("DOT5-LOG-MIB", "tRingMgmtStnName"), ("DOT5-LOG-MIB", "tRingMgmtStnUNA"), ("DOT5-LOG-MIB", "tRingMgmtStnBoard"), ("DOT5-LOG-MIB", "tRingMgmtStnPort"))
beaconStateCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,520)).setObjects(("DOT5-LOG-MIB", "tRingStatsRingLastBeacon"))
stationAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,521)).setObjects(("DOT5-LOG-MIB", "tRingMgmtSecurityAddressAdd"))
stationRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,522)).setObjects(("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
ringConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,523))
faultRecoveryPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,524)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
faultRecoveryBoardBypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,525)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"))
portViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,526)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
portViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,527)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
faultRecoveryOscillation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,528))
ringPurgeThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,529)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingRingPurgesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
amErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,530)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingAMPErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
tokenErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,531)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingTokenErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
claimTokenThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,532)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingClaimTknThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
lostFramesThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,533)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingLostFramesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
beaconStateThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,534)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingBeaconStateThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
frameCountThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,535)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingFrameCountThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
lineErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,536)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshLineErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
internalErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,537)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshInternalErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
burstErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,538)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshBurstErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
acErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,539)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshACErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
receiverCongestionThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,540)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshRcvrCongestThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
removeStationFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,541)).setObjects(("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
ringSpeedPortFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,542)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
ringSpeedPortFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,543)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
stnPortInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,544)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
stnPortDeInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,545)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
boardRingSpeedFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,546)).setObjects(("CHASSIS-MIB", "chSlotID"))
boardRingSpeedFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,547)).setObjects(("CHASSIS-MIB", "chSlotID"))
ringPortWrapped = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,548)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
ringPortWrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,549)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
beaconingState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,550)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtStnName"), ("DOT5-LOG-MIB", "tRingMgmtStnAddress"), ("DOT5-LOG-MIB", "tRingMgmtStnUNA"), ("DOT5-LOG-MIB", "tRingMgmtStnBoard"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingMgmtStnPort"), ("DOT5-LOG-MIB", "tRingStatsRingLastBeaconType"))
beaconingStateCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,551)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingStatsRingLastBeacon"))
stnAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,552)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtSecurityAddressAdd"))
stnRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,553)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
removeStnFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,554)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
ringSecurityPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,555)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
beaconRecoveryPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,556)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
beaconRecoveryPortGroupBypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,557)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"))
beaconRecoveryBoardBypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,558)).setObjects(("CHASSIS-MIB", "chSlotID"))
portLinkViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,559)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
portLinkViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,560)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
ringPurgeTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,561)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingRingPurgesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
amErrorsTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,562)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingAMPErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
tokenErrorsTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,563)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingTokenErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
claimTokenTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,564)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingClaimTknThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
lostFramesTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,565)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingLostFramesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
frameCountTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,566)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingFrameCountThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
lineErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,567)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshLineErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
internalErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,568)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshInternalErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
burstErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,569)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshBurstErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
acErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,570)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshACErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
receiverCongestionStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,571)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshRcvrCongestThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
ringSpeedPortFaulted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,572)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
ringSpeedPortFaultedCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,573)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
tpimInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,574)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
tpimRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,575)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
neighborNotificationInc = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,576)).setObjects(("IF-MIB", "ifIndex"))
fltRecoveryOscillation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,577)).setObjects(("IF-MIB", "ifIndex"))
ringPollFailureEventCorrected = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,578)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtStnAddress"), ("DOT5-LOG-MIB", "tRingMgmtStnDNA"), ("DOT5-LOG-MIB", "tRingMgmtStnBoard"), ("DOT5-LOG-MIB", "tRingMgmtStnPort"))
ringPollFailureEventNotCorrected = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,579)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtStnAddress"))
sPVP = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,580))
sPVC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,581))
deviceDiagnosticMessage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,703))
bridgeStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,769)).setObjects(("CTRON-BDG-MIB", "bdgdeviceStatus"))
aquiredDatabaseFull = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,770))
boardPortActivate = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,849)).setObjects(("CTRON-FRONTPANEL-MIB", "ctFpRedundActivePort"))
boardNightVision = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,900))
snmpLostContact = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1000)).setObjects(("DLM-MIB", "snmpPollDestination"), ("DLM-MIB", "snmpPollOwner"))
snmpThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1001)).setObjects(("DLM-MIB", "snmpOIDDestination"), ("DLM-MIB", "snmpOIDOwner"), ("DLM-MIB", "snmpOIDSequence"), ("DLM-MIB", "snmpOIDObject"))
snmpReestabContact = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1002)).setObjects(("DLM-MIB", "snmpPollDestination"), ("DLM-MIB", "snmpPollOwner"))
ctBroadcastThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1003)).setObjects(("CT-BROADCAST-MIB", "ctBroadcastDesiredBroadcastThreshold"), ("CT-BROADCAST-MIB", "ctBroadcastCtlSlotID"), ("CT-BROADCAST-MIB", "ctBroadcastCtlInterface"))
ctLecStatus = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1004)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecRowStatus"))
fddiPortConnectStateChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1024)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTConnectState"))
fddiSMTMasterPortIncrease = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1025)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTMasterCts"))
fddiSMTMasterPortDecrease = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1026)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTMasterCts"))
fddiPortAction = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1027)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTAction"))
fddiPortLerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1028)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTLerEstimate"))
fddiModuleFNBbypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1030)).setObjects(("CHASSIS-MIB", "chSlotID"))
fddiModuleFNBinserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1031)).setObjects(("CHASSIS-MIB", "chSlotID"))
fddiMACRMTState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1032)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"), ("FDDI-SMT73-MIB", "fddimibMACRMTState"))
fddiMACCurrentPath = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1033)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"), ("FDDI-SMT73-MIB", "fddimibMACCurrentPath"))
fddiSMTCFState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1034)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTCFState"))
fddiRingTopology = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1035)).setObjects(("CTSMTMIB-MIB", "ctsmtmibRingSmtIndex"), ("CTSMTMIB-MIB", "ctsmtmibRingMacIndex"), ("CTSMTMIB-MIB", "ctsmtmibRingNodeIndex"), ("CTSMTMIB-MIB", "ctsmtmibRingMacAddr"), ("CTSMTMIB-MIB", "ctsmtmibRingTopology"))
fddiMACFrameErrorRatio = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1036)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"), ("FDDI-SMT73-MIB", "fddimibMACFrameErrorRatio"))
fddiMACDuplicateMACAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1037)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"))
contLogicalChangesTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1200)).setObjects(("CT-CONTAINER-MIB", "contTypeLogicalChanges"))
contPhysicalChangesTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1201)).setObjects(("CT-CONTAINER-MIB", "contTypePhysicalChanges"))
rtrIpEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1280)).setObjects(("CTRON-IP-ROUTER-MIB", "nwIpEventTextString"))
rtrIPXEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1281)).setObjects(("CTRON-IPX-ROUTER-MIB", "nwIpxEventTextString"))
rtrDecIVEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1282)).setObjects(("CTRON-DECIV-ROUTER-MIB", "nwDecIVEventTextString"))
rtrAppleEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1283)).setObjects(("CTRON-AppleTalk-ROUTER-MIB", "nwAtEventTextString"))
rtrAppnEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1284)).setObjects(("CTRON-APPN-MIB", "nwAppnEventTextString"))
nwAppnLsUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1285)).setObjects(("CTRON-APPN-MIB", "nwAppnFwdLsName"))
nwAppnLsDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1286)).setObjects(("CTRON-APPN-MIB", "nwAppnFwdLsName"), ("CTRON-APPN-MIB", "nwAppnFwdLsAdjCpName"), ("CTRON-APPN-MIB", "nwAppnFwdLsAdjCpType"))
sfpsNewUser = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1400)).setObjects(("CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTablePort"), ("CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTableBaseAddress"))
sfpsDirectoryViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1401)).setObjects(("CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationType"), ("CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationAOValue"))
sfpsSourceBlocked = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1402)).setObjects(("CTRON-SFPS-BASE-MIB", "sfpsBlockSourceMAC"))
sfpsFloodSurpressed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1403)).setObjects(("CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableAOValue"))
sfpsPortToStandby = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1404)).setObjects(("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigPort"), ("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigType"))
sfpsPortFromStandby = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1405)).setObjects(("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigPort"), ("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigType"))
nmsMapAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1536)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsMapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1537)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsMapChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1538)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsMapOpened = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1539)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsMapClosed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1540)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsElementAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1541)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsElementDeleted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1542)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsElementChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1543)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsSymbolAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1544)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsSymbolDeleted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1545)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
nmsSymbolChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1546)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
wgPsInstalled = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1800)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"), ("CTRON-CHASSIS-MIB", "ctChasPowerSupplyType"))
wgPsRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1801)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
wgPsNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1802)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
wgPsFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1803)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
wgPsRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1804)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
wgPsNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1805)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
wgBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1806)).setObjects(("CT-CONTAINER-MIB", "contPhysicalEntryID"))
wgBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1807)).setObjects(("CT-CONTAINER-MIB", "contPhysicalEntryID"))
aPCLineFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4353))
aPCLineFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4354))
aPCLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4355))
aPCLowBatteryRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4356))
aPCAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4357))
aPCAbnormConditionRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4358))
aPCShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4359))
emTermOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11001))
emTermUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11002))
emTermNormalVoltage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11003))
chHotTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11004))
chWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11005))
chCoolTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11006))
chColdTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11007))
chTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11008))
chTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11009))
chHumidityStaticRisk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11010))
chHumidityNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11011))
chHumidityMoist = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11012))
chHumiditySensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11013))
chMod1INBInstalled = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11014))
chMod1INBFaulty = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11015))
chMod1INBRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11016))
chMod1INBNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11017))
chMod2INBInstalled = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11018))
chMod2INBFaulty = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11019))
chMod2INBRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11020))
chMod2INBNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11021))
emFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11022))
boardHotTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11023)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11024)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardCoolTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11025)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardColdTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11026)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11027)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11028)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardTempHotNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11029)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11030)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11031)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelTempHotNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11032)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelTempHotShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11033)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelWarmTempMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11034)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelTempOKMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11035)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelTempHotNoAdminMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11036)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRelTempHotShutdownMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11037)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardInputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11038)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardInputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11039)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardInputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11040)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardOutputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11041)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardOutputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11042)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardOutputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11043)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardAuxVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11044)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardAuxVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11045)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardAuxVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11046)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardInputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11047)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardOutputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11048)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardInputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11049)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardOutputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11050)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemotePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11051)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemotePowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11052)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemotePowerReset = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11053)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11054)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11055)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardPowerReset = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11056)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemOverCurrentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11057)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemPowerConservationShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11058)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11059)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardReqFPDisableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11060)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardFPDisableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11061)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardReqFPEnableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11062)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardFPEnableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11063)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardReqFPResetDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11064)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardFPResetDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11065)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11066)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardPICFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11067)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardPICOk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11068)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11069)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardMailboxFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11070)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardMailboxOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11071)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
psACHotTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11072)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11073)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11074)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTempOKNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11075)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11076)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTempHot = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11077)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACInputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11078)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACInputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11079)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACInputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11080)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11081)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11082)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11083)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11084)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11085)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11086)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11087)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11088)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11089)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11090)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11091)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACInputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11092)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11093)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11094)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11095)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11096)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11097)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACInputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11098)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11099)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11100)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11101)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACRemotePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11102)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11103)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACSystemPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11104)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11105)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLogicPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11106)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11107)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACTermPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11108)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACRemOverCurrentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11109)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACRemPowerConservationShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11110)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11111)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACPICFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11112)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACPICOk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11113)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11114)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11115)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psACFanOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11116)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCHotTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11117)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11118)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11119)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTempOKNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11120)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11121)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTempHot = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11122)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCInputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11123)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCInputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11124)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCInputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11125)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11126)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11127)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11128)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11129)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11130)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11131)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11132)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11133)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11134)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11135)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11136)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCInputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11137)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11138)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11139)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11140)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11141)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11142)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCInputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11143)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11144)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11145)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11146)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCRemotePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11147)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11148)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCSystemPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11149)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11150)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCLogicPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11151)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11152)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCTermPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11153)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCRemOverCurrentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11154)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCRemPowerConservationShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11155)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11156)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psADPICFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11157)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psADPICOk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11158)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psADLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11159)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psADFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11160)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psDCFanOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11161)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11162)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
psPicFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11163)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
psPICok = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11164)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
psLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11165)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
chEnvAmbientTempChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11166)).setObjects(("CTRON-ENVIRONMENT-MIB", "chEnvAmbientStatus"), ("CTRON-ENVIRONMENT-MIB", "chEnvAmbientTemp"))
chEnvHumidityChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11167)).setObjects(("CTRON-ENVIRONMENT-MIB", "chEnvHumidityStatus"), ("CTRON-ENVIRONMENT-MIB", "chEnvHumidity"))
boardEnvTempChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11168)).setObjects(("CTRON-ENVIRONMENT-MIB", "boardEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTemp"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTempStatus"))
boardEnvTempRelChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11169)).setObjects(("CTRON-ENVIRONMENT-MIB", "boardEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTempRelStatus"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTemp"), ("CTRON-ENVIRONMENT-MIB", "chEnvAmbientTemp"))
boardEnvTempMaxFanRelChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11170)).setObjects(("CTRON-ENVIRONMENT-MIB", "boardEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTempRelStatus"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTemp"), ("CTRON-ENVIRONMENT-MIB", "chEnvAmbientTemp"))
chPowerMainVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11171)).setObjects(("CTRON-POWER-SUPPLY-MIB", "chPowerMainVoltageStatus"), ("CTRON-POWER-SUPPLY-MIB", "chPowerMainVoltage"))
chPowerDiagVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11172)).setObjects(("CTRON-POWER-SUPPLY-MIB", "chPowerDiagVoltageStatus"), ("CTRON-POWER-SUPPLY-MIB", "chPowerDiagVoltage"))
termPowerVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11173)).setObjects(("CTRON-POWER-SUPPLY-MIB", "termPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "termPowerVoltage"))
boardPowerVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11174)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerVoltage"))
termPowerModule1Changes = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11175)).setObjects(("CTRON-POWER-SUPPLY-MIB", "termPowerModule1Status"))
termPowerModule2Changes = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11176)).setObjects(("CTRON-POWER-SUPPLY-MIB", "termPowerModule2Status"))
chEnvFanChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11177)).setObjects(("CTRON-ENVIRONMENT-MIB", "chEnvFanID"), ("CTRON-ENVIRONMENT-MIB", "chEnvFanStatus"), ("CTRON-ENVIRONMENT-MIB", "chEnvFanSpeed"))
boardPowerCurrentChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11182)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerCurrent"))
boardPowerFrontPanelChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11183)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerLocalAdminStatus"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerLocalStatus"))
boardPowerOperationalChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11184)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerOperationalStatus"))
psEnvTempChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11185)).setObjects(("CTRON-ENVIRONMENT-MIB", "psEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "psEnvTempStatus"), ("CTRON-ENVIRONMENT-MIB", "psEnvTemp"))
psEnvFanChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11186)).setObjects(("CTRON-ENVIRONMENT-MIB", "psEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "psEnvFanStatus"), ("CTRON-ENVIRONMENT-MIB", "psEnvFanSpeed"))
psPowerVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11187)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "psPowerVoltage"))
psPowerCurrentChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11188)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "psPowerCurrent"))
psPowerAdminChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11189)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerAdmin"))
psPowerOperationalChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11190)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerOperationalStatus"))
boardInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11191)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
boardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11192)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
psInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11193)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11194)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11195)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11196)).setObjects(("CTRON-POWER-SUPPLY-MIB", "chPowerLineMaxSupply"), ("CTRON-POWER-SUPPLY-MIB", "chPowerLineTotalSupply"))
psNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11197)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
psFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11198)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
upsLineFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11200)).setObjects(("UPS2-MIB", "upsIndex"))
upsLineFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11201)).setObjects(("UPS2-MIB", "upsIndex"))
upsLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11202)).setObjects(("UPS2-MIB", "upsIndex"))
upsLowBatteryRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11203)).setObjects(("UPS2-MIB", "upsIndex"))
upsAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11204)).setObjects(("UPS2-MIB", "upsIndex"), ("UPS2-MIB", "upsStatusFault"), ("UPS2-MIB", "upsAddlFuncsStatusFault"))
upsAbnormalConditionRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11205)).setObjects(("UPS2-MIB", "upsIndex"))
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11206)).setObjects(("UPS2-MIB", "upsIndex"))
upsReplaceBattery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11207)).setObjects(("UPS2-MIB", "upsIndex"))
upsExtMeasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11208)).setObjects(("UPS2-MIB", "upsIndex"), ("UPS2-MIB", "upsExtMeasAlarmStatus"))
nvmpUdefTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11999))
activePortInATMRedundancyFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12000)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
aTMRedundantPortActivated = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12001)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
aTMRedundanctPortTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12002)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
aTMRedundPrimaryPortSkipped = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12003)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
atmCTMUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12006))
atmCTMDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12007))
atmVcCrossConnectOperChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12008)).setObjects(("ATM-MIB", "atmVcCrossConnectRowStatus"))
atmVpCrossConnectOperChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12009)).setObjects(("ATM-MIB", "atmVpCrossConnectRowStatus"))
atmNeighborSwitchUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12010)).setObjects(("ATM-MIB", "atmInterfaceMyNeighborIpAddress"), ("ATM-MIB", "atmInterfaceMyNeighborIfName"))
atmNeighborSwitchDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12011)).setObjects(("ATM-MIB", "atmInterfaceMyNeighborIpAddress"), ("ATM-MIB", "atmInterfaceMyNeighborIfName"))
callFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12012)).setObjects(("IF-MIB", "ifIndex"))
allocBwHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12013)).setObjects(("IF-MIB", "ifIndex"))
allocBwHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12014)).setObjects(("IF-MIB", "ifIndex"))
allocBwLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12015)).setObjects(("IF-MIB", "ifIndex"))
allocBwLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12016)).setObjects(("IF-MIB", "ifIndex"))
aggPcrFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12017)).setObjects(("IF-MIB", "ifIndex"))
aggPcrRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12018)).setObjects(("IF-MIB", "ifIndex"))
peakFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12019)).setObjects(("IF-MIB", "ifIndex"))
peakRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12020)).setObjects(("IF-MIB", "ifIndex"))
cbrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12021)).setObjects(("IF-MIB", "ifIndex"))
cbrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12022)).setObjects(("IF-MIB", "ifIndex"))
cbrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12023)).setObjects(("IF-MIB", "ifIndex"))
cbrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12024)).setObjects(("IF-MIB", "ifIndex"))
cbrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12025)).setObjects(("IF-MIB", "ifIndex"))
cbrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12026)).setObjects(("IF-MIB", "ifIndex"))
cbrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12027)).setObjects(("IF-MIB", "ifIndex"))
cbrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12028)).setObjects(("IF-MIB", "ifIndex"))
vbrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12029)).setObjects(("IF-MIB", "ifIndex"))
vbrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12030)).setObjects(("IF-MIB", "ifIndex"))
vbrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12031)).setObjects(("IF-MIB", "ifIndex"))
vbrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12032)).setObjects(("IF-MIB", "ifIndex"))
vbrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12033)).setObjects(("IF-MIB", "ifIndex"))
vbrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12034)).setObjects(("IF-MIB", "ifIndex"))
vbrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12035)).setObjects(("IF-MIB", "ifIndex"))
vbrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12036)).setObjects(("IF-MIB", "ifIndex"))
abrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12037)).setObjects(("IF-MIB", "ifIndex"))
abrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12038)).setObjects(("IF-MIB", "ifIndex"))
abrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12039)).setObjects(("IF-MIB", "ifIndex"))
abrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12040)).setObjects(("IF-MIB", "ifIndex"))
abrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12041)).setObjects(("IF-MIB", "ifIndex"))
abrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12042)).setObjects(("IF-MIB", "ifIndex"))
abrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12043)).setObjects(("IF-MIB", "ifIndex"))
abrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12044)).setObjects(("IF-MIB", "ifIndex"))
ubrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12045)).setObjects(("IF-MIB", "ifIndex"))
ubrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12046)).setObjects(("IF-MIB", "ifIndex"))
ubrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12047)).setObjects(("IF-MIB", "ifIndex"))
ubrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12048)).setObjects(("IF-MIB", "ifIndex"))
ubrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12049)).setObjects(("IF-MIB", "ifIndex"))
ubrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12051)).setObjects(("IF-MIB", "ifIndex"))
ubrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12052)).setObjects(("IF-MIB", "ifIndex"))
ubrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12053)).setObjects(("IF-MIB", "ifIndex"))
atmLecStatus = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12050)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecRowStatus"))
boardOperational = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,13000)).setObjects(("CHASSIS-MIB", "chSlotID"), ("CTRON-COMMON-MIB", "deviceType"))
boardNonOperational = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,13001)).setObjects(("CHASSIS-MIB", "chSlotID"))
mibBuilder.exportSymbols("CABLETRON-TRAPS", upsReplaceBattery=upsReplaceBattery, claimTokenTotalThreshold=claimTokenTotalThreshold, boardRemotePowerOn=boardRemotePowerOn, ctBroadcastThresholdReached=ctBroadcastThresholdReached, psACTermSenseCurrentOverMax=psACTermSenseCurrentOverMax, boardRelWarmTemp=boardRelWarmTemp, boardTempOK=boardTempOK, abrConnCountTholdHiFwd=abrConnCountTholdHiFwd, psDCTermVoltageOverMax=psDCTermVoltageOverMax, abrAllocBwTholdLoRev=abrAllocBwTholdLoRev, psACRemOverCurrentShutdown=psACRemOverCurrentShutdown, ringPortFaultCleared=ringPortFaultCleared, psACWarmTemp=psACWarmTemp, psACLogicSenseCurrentOverMax=psACLogicSenseCurrentOverMax, psACLogicPowerOn=psACLogicPowerOn, boardRelWarmTempMaxFans=boardRelWarmTempMaxFans, redundActivePortInCircuitFailed=redundActivePortInCircuitFailed, ringConfigurationChanged=ringConfigurationChanged, fddiModuleFNBbypassed=fddiModuleFNBbypassed, amErrorsThreshold=amErrorsThreshold, ringSpeedFault=ringSpeedFault, boardInsertion=boardInsertion, atmNeighborSwitchUp=atmNeighborSwitchUp, abrAllocBwTholdLoFwd=abrAllocBwTholdLoFwd, envTempNormal=envTempNormal, portDeInserted=portDeInserted, portLinkViolation=portLinkViolation, psACSystemVoltageOverMax=psACSystemVoltageOverMax, psDCTermSenseCurrentOverMax=psDCTermSenseCurrentOverMax, boardRelTempOK=boardRelTempOK, boardOutputCurrentOverMaxShutdown=boardOutputCurrentOverMaxShutdown, abrConnCountTholdLoFwd=abrConnCountTholdLoFwd, termPowerModule1Changes=termPowerModule1Changes, chEnvFanChanges=chEnvFanChanges, fddiSMTCFState=fddiSMTCFState, chHotTemp=chHotTemp, redundPortActivated=redundPortActivated, psDCLogicSenseCurrentOverMax=psDCLogicSenseCurrentOverMax, faultRecoveryOscillation=faultRecoveryOscillation, ringSecurityPortRemoved=ringSecurityPortRemoved, removeStationFailure=removeStationFailure, psDCTermCurrentOverMaxShutdown=psDCTermCurrentOverMaxShutdown, nmsMapChanged=nmsMapChanged, beaconRecoveryPortGroupBypassed=beaconRecoveryPortGroupBypassed, psACTempOK=psACTempOK, deviceDiagnosticMessage=deviceDiagnosticMessage, ubrConnCountTholdHiFwd=ubrConnCountTholdHiFwd, aggPcrRev=aggPcrRev, boardMailboxFailure=boardMailboxFailure, psACTermVoltageUnderMin=psACTermVoltageUnderMin, portSecureStateChanged=portSecureStateChanged, portViolationReset=portViolationReset, boardReqFPEnableDCDC=boardReqFPEnableDCDC, chCoolTemp=chCoolTemp, psDCInputVoltageOverMax=psDCInputVoltageOverMax, psACSystemPowerOn=psACSystemPowerOn, atmCTMUp=atmCTMUp, vbrAllocBwTholdLoRev=vbrAllocBwTholdLoRev, cbrAllocBwTholdLoRev=cbrAllocBwTholdLoRev, ringSpeedFaultCleared=ringSpeedFaultCleared, psPicFailure=psPicFailure, rptrLockStatusChanged=rptrLockStatusChanged, atmLecStatus=atmLecStatus, envVoltageNormal=envVoltageNormal, psACTermSenseCurrentOverMaxShutdown=psACTermSenseCurrentOverMaxShutdown, psDCTempOKNoAdmin=psDCTempOKNoAdmin, rptrTrafficThresholdExceeded=rptrTrafficThresholdExceeded, fltRecoveryOscillation=fltRecoveryOscillation, boardPowerFrontPanelChanges=boardPowerFrontPanelChanges, nmsMapDeleted=nmsMapDeleted, stnAdded=stnAdded, portCollsionThresholdExceeded=portCollsionThresholdExceeded, psPowerAdminChanges=psPowerAdminChanges, lineErrorsThreshold=lineErrorsThreshold, psDCLogicSenseCurrentOverMaxShutdown=psDCLogicSenseCurrentOverMaxShutdown, psDCInputVoltageOK=psDCInputVoltageOK, fddiMACDuplicateMACAddress=fddiMACDuplicateMACAddress, nmsMapOpened=nmsMapOpened, ctLecStatus=ctLecStatus, beaconRecoveryPortRemoved=beaconRecoveryPortRemoved, aPCShuttingDown=aPCShuttingDown, psACHotTempShutdown=psACHotTempShutdown, psACLogicSenseCurrentOverMaxShutdown=psACLogicSenseCurrentOverMaxShutdown, portTypeChanged=portTypeChanged, psDCTempSensorBroken=psDCTempSensorBroken, psACTempOKNoAdmin=psACTempOKNoAdmin, atmCTMDown=atmCTMDown, boardTrafficThresholdExceeded=boardTrafficThresholdExceeded, interfacePortInsertion=interfacePortInsertion, nvmpUdefTrap=nvmpUdefTrap, psACSystemVoltageUnderMin=psACSystemVoltageUnderMin, boardOutputVoltageOK=boardOutputVoltageOK, tokenErrorsTotalThreshold=tokenErrorsTotalThreshold, psACTempSensorBroken=psACTempSensorBroken, wgPsNormal=wgPsNormal, upsExtMeasAlarm=upsExtMeasAlarm, boardRingSpeedFaultCleared=boardRingSpeedFaultCleared, psDCLogicVoltageOK=psDCLogicVoltageOK, cbrAllocBwTholdLoFwd=cbrAllocBwTholdLoFwd, psDCTermSenseCurrentOverMaxShutdown=psDCTermSenseCurrentOverMaxShutdown, boardRemoved=boardRemoved, burstErrorsThreshold=burstErrorsThreshold, psDCRemotePowerOff=psDCRemotePowerOff, srcaddrTimeout=srcaddrTimeout, boardPICFailure=boardPICFailure, lostFramesThreshold=lostFramesThreshold, boardRelTempHotNoAdmin=boardRelTempHotNoAdmin, boardHotTempShutdown=boardHotTempShutdown, atmVpCrossConnectOperChange=atmVpCrossConnectOperChange, portLearnModeChanged=portLearnModeChanged, psPowerOperationalChanges=psPowerOperationalChanges, wgPsInstalled=wgPsInstalled, boardRemotePowerOff=boardRemotePowerOff, psACSystemCurrentOverMaxShutdown=psACSystemCurrentOverMaxShutdown, chTempOK=chTempOK, vbrAllocBwTholdHiFwd=vbrAllocBwTholdHiFwd, sfpsPortFromStandby=sfpsPortFromStandby, activePortInATMRedundancyFailed=activePortInATMRedundancyFailed, boardReqFPResetDCDC=boardReqFPResetDCDC, psInserted=psInserted, boardBroadcastThresholdExceeded=boardBroadcastThresholdExceeded, chBoardInsertion=chBoardInsertion, boardPowerVoltageChanges=boardPowerVoltageChanges, allocBwLoFwd=allocBwLoFwd, chMod1INBNormal=chMod1INBNormal, cbrConnCountTholdLoRev=cbrConnCountTholdLoRev, vbrConnCountTholdHiRev=vbrConnCountTholdHiRev, internalErrorsThreshold=internalErrorsThreshold, chMod2INBRemoved=chMod2INBRemoved, psDCTermVoltageOK=psDCTermVoltageOK, boardEnvTempMaxFanRelChanges=boardEnvTempMaxFanRelChanges, systemVoltageLow=systemVoltageLow, upsShuttingDown=upsShuttingDown, sPVP=sPVP, psDCInputCurrentOverMaxShutdown=psDCInputCurrentOverMaxShutdown, chColdTemp=chColdTemp, allocBwLoRev=allocBwLoRev, aTMRedundantPortActivated=aTMRedundantPortActivated, chMod1INBFaulty=chMod1INBFaulty, beaconStateCleared=beaconStateCleared, chMod1INBRemoved=chMod1INBRemoved, boardInserted=boardInserted, fddiPortAction=fddiPortAction, acErrorsStnThreshold=acErrorsStnThreshold, ubrAllocBwTholdLoRev=ubrAllocBwTholdLoRev, boardOperational=boardOperational, emTermNormalVoltage=emTermNormalVoltage, upsAbnormalCondition=upsAbnormalCondition, boardRelTempHotShutdown=boardRelTempHotShutdown, contPhysicalChangesTrap=contPhysicalChangesTrap, nmsElementChanged=nmsElementChanged, boardOutputVoltageUnderMin=boardOutputVoltageUnderMin, upsAbnormalConditionRecovery=upsAbnormalConditionRecovery, sfpsNewUser=sfpsNewUser, sfpsFloodSurpressed=sfpsFloodSurpressed, boardEnvTempRelChanges=boardEnvTempRelChanges, boardMailboxOK=boardMailboxOK, portSegmenting=portSegmenting, sfpsSourceBlocked=sfpsSourceBlocked, nmsMapAdded=nmsMapAdded, boardAuxVoltageOverMax=boardAuxVoltageOverMax, psDCLogicCurrentOverMax=psDCLogicCurrentOverMax, psACSystemVoltageOK=psACSystemVoltageOK, chEnvAmbientTempChanges=chEnvAmbientTempChanges, boardAuxVoltageUnderMin=boardAuxVoltageUnderMin, chHumidityMoist=chHumidityMoist, ringSpeedPortFaultedCleared=ringSpeedPortFaultedCleared, boardInputVoltageUnderMin=boardInputVoltageUnderMin, psACLLAPDupAddress=psACLLAPDupAddress, psACTermPowerOn=psACTermPowerOn, psACLogicVoltageOverMax=psACLogicVoltageOverMax, aquiredDatabaseFull=aquiredDatabaseFull, portSecurityViolation=portSecurityViolation, aTMRedundanctPortTestFailed=aTMRedundanctPortTestFailed, boardPowerOff=boardPowerOff, upsLineFailRecovery=upsLineFailRecovery, psDCFanOK=psDCFanOK, acErrorsThreshold=acErrorsThreshold, psDCHotTempShutdown=psDCHotTempShutdown, contLogicalChangesTrap=contLogicalChangesTrap, psACPICOk=psACPICOk, boardRelTempHotShutdownMaxFans=boardRelTempHotShutdownMaxFans, boardNightVision=boardNightVision, nmsElementAdded=nmsElementAdded, boardRemPowerConservationShutdown=boardRemPowerConservationShutdown, psNotRedundant=psNotRedundant, stnPortDeInserted=stnPortDeInserted, aPCLowBatteryRecovery=aPCLowBatteryRecovery, boardInputVoltageOK=boardInputVoltageOK, bridgeStatusChanged=bridgeStatusChanged, ubrAllocBwTholdHiFwd=ubrAllocBwTholdHiFwd, boardColdTemp=boardColdTemp, aPCAbnormalCondition=aPCAbnormalCondition, psNormal=psNormal, cbrConnCountTholdLoFwd=cbrConnCountTholdLoFwd, psACTermCurrentOverMax=psACTermCurrentOverMax, fanNormal=fanNormal, fddiPortLerAlarm=fddiPortLerAlarm, epimRemoval=epimRemoval, receiverCongestionThreshold=receiverCongestionThreshold, upsLowBatteryRecovery=upsLowBatteryRecovery, psACPICFailure=psACPICFailure, psDCLogicPowerOn=psDCLogicPowerOn, psACLogicPowerOff=psACLogicPowerOff, vbrConnCountTholdHiFwd=vbrConnCountTholdHiFwd, psFault=psFault, psACLogicVoltageUnderMin=psACLogicVoltageUnderMin, ubrConnCountTholdLoFwd=ubrConnCountTholdLoFwd, aPCLineFail=aPCLineFail, chMod2INBFaulty=chMod2INBFaulty, tokenErrorsThreshold=tokenErrorsThreshold, vbrConnCountTholdLoRev=vbrConnCountTholdLoRev, fpportActivated=fpportActivated, boardTempHotNoAdmin=boardTempHotNoAdmin, psACInputCurrentOverMaxShutdown=psACInputCurrentOverMaxShutdown, envVoltageLow=envVoltageLow, psDCInputCurrentOverMax=psDCInputCurrentOverMax, envTempWarm=envTempWarm, rptrBroadcastThresholdExceeded=rptrBroadcastThresholdExceeded, psRedundant=psRedundant, frameCountTotalThreshold=frameCountTotalThreshold, psACInputVoltageOK=psACInputVoltageOK, portTrafficThresholdExceeded=portTrafficThresholdExceeded, boardEnvTempChanges=boardEnvTempChanges, rtrIPXEventLogChange=rtrIPXEventLogChange, rptrPortLearnStateChanged=rptrPortLearnStateChanged, vbrAllocBwTholdLoFwd=vbrAllocBwTholdLoFwd, neighborNotificationInc=neighborNotificationInc, wgPsFail=wgPsFail, fddiRingTopology=fddiRingTopology, ringSpeedPortFault=ringSpeedPortFault, boardOutputVoltageOverMax=boardOutputVoltageOverMax, boardFPResetDCDC=boardFPResetDCDC, psACTermPowerOff=psACTermPowerOff, ringSpeedPortFaulted=ringSpeedPortFaulted, faultRecoveryPortRemoved=faultRecoveryPortRemoved, ubrConnCountTholdLoRev=ubrConnCountTholdLoRev, boardCoolTemp=boardCoolTemp, psACSystemPowerOff=psACSystemPowerOff, chPowerMainVoltageChanges=chPowerMainVoltageChanges, fddiModuleFNBinserted=fddiModuleFNBinserted, removeStnFailure=removeStnFailure, lineErrorsStnThreshold=lineErrorsStnThreshold, psACTermVoltageOK=psACTermVoltageOK, atmVcCrossConnectOperChange=atmVcCrossConnectOperChange, psDCTermPowerOff=psDCTermPowerOff, boardInputCurrentOverMax=boardInputCurrentOverMax, boardReqFPDisableDCDC=boardReqFPDisableDCDC, boardCollsionThresholdExceeded=boardCollsionThresholdExceeded, psDCSystemVoltageOK=psDCSystemVoltageOK, systemVoltageNormal=systemVoltageNormal, fddiMACRMTState=fddiMACRMTState, chHumidityNormal=chHumidityNormal, psPICok=psPICok)
mibBuilder.exportSymbols("CABLETRON-TRAPS", emFanFailure=emFanFailure, stationRemoved=stationRemoved, rtrAppnEventLogChange=rtrAppnEventLogChange, psADFanFailure=psADFanFailure, cbrAllocBwTholdHiFwd=cbrAllocBwTholdHiFwd, portLinkUp=portLinkUp, lostFramesTotalThreshold=lostFramesTotalThreshold, emTermOverVoltage=emTermOverVoltage, cbrConnCountTholdHiRev=cbrConnCountTholdHiRev, rtrIpEventLogChange=rtrIpEventLogChange, rptrPortGrpLearnStateChanged=rptrPortGrpLearnStateChanged, boardPowerCurrentChanges=boardPowerCurrentChanges, ubrAllocBwTholdHiRev=ubrAllocBwTholdHiRev, callFailure=callFailure, psACRemPowerConservationShutdown=psACRemPowerConservationShutdown, psDCTempHot=psDCTempHot, portLinkDown=portLinkDown, ringPortWrapped=ringPortWrapped, boardWarmTemp=boardWarmTemp, psACTempHot=psACTempHot, srcaddrNew=srcaddrNew, claimTokenThreshold=claimTokenThreshold, nmsMapClosed=nmsMapClosed, upsLineFail=upsLineFail, psACFanOK=psACFanOK, snmpReestabContact=snmpReestabContact, portErrorThresholdExceeded=portErrorThresholdExceeded, interfacePortLinkDown=interfacePortLinkDown, psDCLogicVoltageOverMax=psDCLogicVoltageOverMax, psACLogicVoltageOK=psACLogicVoltageOK, rtrAppleEventLogChange=rtrAppleEventLogChange, srcAddressPortLockStatusChange=srcAddressPortLockStatusChange, chHumiditySensorBroken=chHumiditySensorBroken, fddiPortConnectStateChange=fddiPortConnectStateChange, fddiSMTMasterPortIncrease=fddiSMTMasterPortIncrease, psDCADConvertorFailure=psDCADConvertorFailure, boardADConvertorFailure=boardADConvertorFailure, psDCSystemPowerOn=psDCSystemPowerOn, chMod2INBNormal=chMod2INBNormal, aPCLowBattery=aPCLowBattery, abrConnCountTholdLoRev=abrConnCountTholdLoRev, snmpThresholdTrap=snmpThresholdTrap, allocBwHiRev=allocBwHiRev, portGrpLearnModeChanged=portGrpLearnModeChanged, abrAllocBwTholdHiFwd=abrAllocBwTholdHiFwd, boardTempSensorBroken=boardTempSensorBroken, sfpsDirectoryViolation=sfpsDirectoryViolation, psADPICOk=psADPICOk, psACTermCurrentOverMaxShutdown=psACTermCurrentOverMaxShutdown, psDCSystemVoltageOverMax=psDCSystemVoltageOverMax, termPowerVoltageChanges=termPowerVoltageChanges, psDCSystemVoltageUnderMin=psDCSystemVoltageUnderMin, nwAppnLsDown=nwAppnLsDown, portInserted=portInserted, psDCInputVoltageUnderMin=psDCInputVoltageUnderMin, psDCRemPowerConservationShutdown=psDCRemPowerConservationShutdown, psADConvertorFailure=psADConvertorFailure, beaconRecoveryBoardBypassed=beaconRecoveryBoardBypassed, boardRelTempOKMaxFans=boardRelTempOKMaxFans, psDCTermVoltageUnderMin=psDCTermVoltageUnderMin, boardFPEnableDCDC=boardFPEnableDCDC, beaconingState=beaconingState, boardInputCurrentOverMaxShutdown=boardInputCurrentOverMaxShutdown, vbrAllocBwTholdHiRev=vbrAllocBwTholdHiRev, interfacePortLinkUp=interfacePortLinkUp, psACInputCurrentOverMax=psACInputCurrentOverMax, rptrLearnModeChanged=rptrLearnModeChanged, ringPurgeThreshold=ringPurgeThreshold, fddiSMTMasterPortDecrease=fddiSMTMasterPortDecrease, boardPortActivate=boardPortActivate, nmsSymbolChanged=nmsSymbolChanged, chTempSensorBroken=chTempSensorBroken, boardAuxVoltageOK=boardAuxVoltageOK, tpimRemoved=tpimRemoved, termPowerModule2Changes=termPowerModule2Changes, wgPsRemoved=wgPsRemoved, psACInputVoltageUnderMin=psACInputVoltageUnderMin, ringPurgeTotalThreshold=ringPurgeTotalThreshold, chEnvHumidityChanges=chEnvHumidityChanges, internalErrorsStnThreshold=internalErrorsStnThreshold, ringPollFailureEventCorrected=ringPollFailureEventCorrected, cbrAllocBwTholdHiRev=cbrAllocBwTholdHiRev, psDCLogicVoltageUnderMin=psDCLogicVoltageUnderMin, psDCSystemPowerOff=psDCSystemPowerOff, psACSystemCurrentOverMax=psACSystemCurrentOverMax, psDCTermPowerOn=psDCTermPowerOn, abrConnCountTholdHiRev=abrConnCountTholdHiRev, psDCSystemCurrentOverMax=psDCSystemCurrentOverMax, beaconState=beaconState, psACInputVoltageOverMax=psACInputVoltageOverMax, psACADConvertorFailure=psACADConvertorFailure, redundPortTestFailed=redundPortTestFailed, aPCAbnormConditionRecovery=aPCAbnormConditionRecovery, nmsSymbolDeleted=nmsSymbolDeleted, psDCTempOK=psDCTempOK, ringSpeedPortFaultCleared=ringSpeedPortFaultCleared, sPVC=sPVC, psLLAPDupAddress=psLLAPDupAddress, wgPsNotRedundant=wgPsNotRedundant, boardLLAPDupAddress=boardLLAPDupAddress, snmpLostContact=snmpLostContact, wgBoardInserted=wgBoardInserted, portViolation=portViolation, rtrDecIVEventLogChange=rtrDecIVEventLogChange, boardNonOperational=boardNonOperational, abrAllocBwTholdHiRev=abrAllocBwTholdHiRev, chHumidityStaticRisk=chHumidityStaticRisk, faultRecoveryBoardBypassed=faultRecoveryBoardBypassed, epimInsertion=epimInsertion, portLinkViolationCleared=portLinkViolationCleared, chMod2INBInstalled=chMod2INBInstalled, upsLowBattery=upsLowBattery, psACRemotePowerOff=psACRemotePowerOff, boardRemotePowerReset=boardRemotePowerReset, psACTermVoltageOverMax=psACTermVoltageOverMax, stnPortInserted=stnPortInserted, portBroadcastThresholdExceeded=portBroadcastThresholdExceeded, nmsSymbolAdded=nmsSymbolAdded, psACLogicCurrentOverMax=psACLogicCurrentOverMax, boardPowerOn=boardPowerOn, psADLLAPDupAddress=psADLLAPDupAddress, fanFail=fanFail, amErrorsTotalThreshold=amErrorsTotalThreshold, portUnsegementing=portUnsegementing, ctdlswTConnUp=ctdlswTConnUp, peakRev=peakRev, beaconingStateCleared=beaconingStateCleared, rptrCollsionThresholdExceeded=rptrCollsionThresholdExceeded, boardPowerOperationalChanges=boardPowerOperationalChanges, chWarmTemp=chWarmTemp, wgPsRedundant=wgPsRedundant, burstErrorsStnThreshold=burstErrorsStnThreshold, fddiMACCurrentPath=fddiMACCurrentPath, boardRemTemperatureShutdown=boardRemTemperatureShutdown, portViolationCleared=portViolationCleared, atmNeighborSwitchDown=atmNeighborSwitchDown, boardFPDisableDCDC=boardFPDisableDCDC, frameCountThreshold=frameCountThreshold, psPowerVoltageChanges=psPowerVoltageChanges, fddiMACFrameErrorRatio=fddiMACFrameErrorRatio, psDCRemOverCurrentShutdown=psDCRemOverCurrentShutdown, psADPICFailure=psADPICFailure, wgBoardRemoved=wgBoardRemoved, psDCLogicCurrentOverMaxShutdown=psDCLogicCurrentOverMaxShutdown, rptrLearnStateChanged=rptrLearnStateChanged, ubrConnCountTholdHiRev=ubrConnCountTholdHiRev, aggPcrFwd=aggPcrFwd, nmsElementDeleted=nmsElementDeleted, psPowerCurrentChanges=psPowerCurrentChanges, vbrConnCountTholdLoFwd=vbrConnCountTholdLoFwd, chMod1INBInstalled=chMod1INBInstalled, aPCLineFailRecovery=aPCLineFailRecovery, aTMRedundPrimaryPortSkipped=aTMRedundPrimaryPortSkipped, cbrConnCountTholdHiFwd=cbrConnCountTholdHiFwd, interfacePortRemoval=interfacePortRemoval, psDCSystemCurrentOverMaxShutdown=psDCSystemCurrentOverMaxShutdown, boardPowerReset=boardPowerReset, boardErrorThresholdExceeded=boardErrorThresholdExceeded, chPowerDiagVoltageChanges=chPowerDiagVoltageChanges, boardRemoval=boardRemoval, boardPICOk=boardPICOk, ctdlswTConnDown=ctdlswTConnDown, peakFwd=peakFwd, envTempHot=envTempHot, boardRemOverCurrentShutdown=boardRemOverCurrentShutdown, receiverCongestionStnThreshold=receiverCongestionStnThreshold, boardRingSpeedFault=boardRingSpeedFault, stnRemoved=stnRemoved, psACFanFailure=psACFanFailure, psDCLogicPowerOff=psDCLogicPowerOff, psRemoved=psRemoved, psDCTermCurrentOverMax=psDCTermCurrentOverMax, boardInputVoltageOverMax=boardInputVoltageOverMax, nwAppnLsUp=nwAppnLsUp, boardOutputCurrentOverMax=boardOutputCurrentOverMax, ringPortFaulted=ringPortFaulted, psEnvTempChanges=psEnvTempChanges, stationAdded=stationAdded, psACLogicCurrentOverMaxShutdown=psACLogicCurrentOverMaxShutdown, rptrErrorThresholdExceeded=rptrErrorThresholdExceeded, ringPollFailureEventNotCorrected=ringPollFailureEventNotCorrected, psEnvFanChanges=psEnvFanChanges, boardRelTempHotNoAdminMaxFans=boardRelTempHotNoAdminMaxFans, psDCWarmTemp=psDCWarmTemp, tpimInserted=tpimInserted, ubrAllocBwTholdLoFwd=ubrAllocBwTholdLoFwd, emTermUnderVoltage=emTermUnderVoltage, sfpsPortToStandby=sfpsPortToStandby, allocBwHiFwd=allocBwHiFwd, beaconStateThreshold=beaconStateThreshold, ringPortWrapCleared=ringPortWrapCleared)
