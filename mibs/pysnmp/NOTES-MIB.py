#
# PySNMP MIB module NOTES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOTES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, enterprises, TimeTicks, Integer32, Bits, NotificationType, Gauge32, Counter64, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, NotificationType, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "enterprises", "TimeTicks", "Integer32", "Bits", "NotificationType", "Gauge32", "Counter64", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "NotificationType", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lotus = MibIdentifier((1, 3, 6, 1, 4, 1, 334))
notes = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72))
notesPump = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 73))
lnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1))
lnControl = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 2))
lnInterceptor = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 3))
lnUnix = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 4))
mapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 100))
lnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1))
lnMail = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4))
lnReplica = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5))
lnServer = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6))
lnComm = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7))
lnDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8))
lnMem = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9))
lnDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10))
lnAgentMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11))
lnMTA = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12))
lnWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13))
lnObject = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14))
lnDomino = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15))
lnCalendar = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16))
lnCollector = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 17))
lnServerTask = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1))
lnServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2))
lnServerStats = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3))
lnCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4))
lnOpenRedirects = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8))
lnOpenRequest = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9))
lnClusterTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10))
lnReplicaCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6))
lnMainProxyAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMainProxyAgentVersion.setStatus('mandatory')
lnAllStatsTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1), )
if mibBuilder.loadTexts: lnAllStatsTable.setStatus('mandatory')
lnAllStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1, 1), ).setIndexNames((0, "NOTES-MIB", "lnStatisticIndex"))
if mibBuilder.loadTexts: lnAllStatsEntry.setStatus('mandatory')
lnStatisticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatisticIndex.setStatus('mandatory')
lnStatisticString = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatisticString.setStatus('mandatory')
lnStatsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatsStartTime.setStatus('mandatory')
lnStatsCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatsCurrentTime.setStatus('mandatory')
lnDeadMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDeadMail.setStatus('optional')
lnDeliveredMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDeliveredMail.setStatus('optional')
lnTotalMailFailures = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalMailFailures.setStatus('optional')
lnTotalRoutedMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalRoutedMail.setStatus('optional')
lnTransferredMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTransferredMail.setStatus('optional')
lnWaitingMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWaitingMail.setStatus('optional')
lnNumWaitingRecipients = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNumWaitingRecipients.setStatus('optional')
lnMailDomain = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMailDomain.setStatus('optional')
lnAverageMailDeliverTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAverageMailDeliverTime.setStatus('optional')
lnAverageMailServerHops = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAverageMailServerHops.setStatus('optional')
lnAverageMailSizeDelivered = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAverageMailSizeDelivered.setStatus('optional')
lnMaximumMailDeliverTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMaximumMailDeliverTime.setStatus('optional')
lnMaximumMailServerHops = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMaximumMailServerHops.setStatus('optional')
lnMaximumMailSizeDelivered = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMaximumMailSizeDelivered.setStatus('optional')
lnMinimumMailDeliverTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMinimumMailDeliverTime.setStatus('optional')
lnMinimumMailServerHops = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMinimumMailServerHops.setStatus('optional')
lnMinimumMailSizeDelivered = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMinimumMailSizeDelivered.setStatus('optional')
lnTotalKBTransferred = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalKBTransferred.setStatus('optional')
lnMailTransferFailures = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMailTransferFailures.setStatus('optional')
lnRepDocsAdded = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepDocsAdded.setStatus('optional')
lnRepDocsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepDocsDeleted.setStatus('optional')
lnRepDocsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepDocsUpdated.setStatus('optional')
lnRepFailed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepFailed.setStatus('optional')
lnRepSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepSuccessful.setStatus('optional')
lnRepClusterDocsAdded = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterDocsAdded.setStatus('optional')
lnRepClusterDocsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterDocsDeleted.setStatus('optional')
lnRepClusterDocsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterDocsUpdated.setStatus('optional')
lnRepClusterFailed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterFailed.setStatus('optional')
lnRepClusterFilesLocal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterFilesLocal.setStatus('optional')
lnRepClusterFilesRemote = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterFilesRemote.setStatus('optional')
lnRepClusterRetrySkipped = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterRetrySkipped.setStatus('optional')
lnRepClusterRetryWaiting = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterRetryWaiting.setStatus('optional')
lnRepClusterSecondsOnQueue = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueue.setStatus('optional')
lnRepClusterSecondsOnQueueAvg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueueAvg.setStatus('optional')
lnRepClusterSecondsOnQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueueMax.setStatus('optional')
lnRepClusterServers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterServers.setStatus('optional')
lnRepClusterSessionBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSessionBytesIn.setStatus('optional')
lnRepClusterSessionBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSessionBytesOut.setStatus('optional')
lnRepClusterSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSuccessful.setStatus('optional')
lnRepClusterWorkQueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepth.setStatus('optional')
lnRepClusterWorkQueueDepthAvg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepthAvg.setStatus('optional')
lnRepClusterWorkQueueDepthMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepthMax.setStatus('optional')
lnTaskCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskCount.setStatus('mandatory')
lnTaskTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: lnTaskTable.setStatus('mandatory')
lnTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "NOTES-MIB", "lnTaskIndex"))
if mibBuilder.loadTexts: lnTaskEntry.setStatus('mandatory')
lnTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskIndex.setStatus('mandatory')
lnTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("databaseserver", 1), ("event", 2), ("reporter", 3), ("replicator", 4), ("indexer", 5), ("router", 6), ("eventinterceptor", 7), ("querysethandler", 8), ("reflectoragent", 9), ("webretriever", 10), ("calendarconnector", 11), ("schedulemanager", 12), ("unknownaddin", 13), ("adminprocess", 14), ("httpwebserver", 15), ("chronos", 16), ("collector", 17), ("inotes", 18), ("billing", 19), ("clusterreplicator", 20), ("clusterdbdirmgr", 21), ("clusteradmin", 22), ("agentmanager", 23), ("cataloger", 24), ("databasecompactor", 25), ("designer", 26), ("objectstoremgr", 27), ("pop3server", 28), ("statistics", 29), ("stats", 30), ("databasefixup", 31), ("innews", 32), ("webpublisher", 33), ("ccmailmta", 34), ("smtpmta", 35), ("x400mta", 36), ("ldapserver", 37), ("nntpserver", 38), ("imapserver", 39), ("imap4server", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskType.setStatus('mandatory')
lnTaskData = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskData.setStatus('mandatory')
lnTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskName.setStatus('mandatory')
lnReplicatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnReplicatorStatus.setStatus('mandatory')
lnRouterStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRouterStatus.setStatus('mandatory')
lnEventStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEventStatus.setStatus('mandatory')
lnServerName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerName.setStatus('mandatory')
lnServerTitle = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTitle.setStatus('optional')
lnServerAdministrators = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerAdministrators.setStatus('mandatory')
lnServerNotesVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerNotesVersion.setStatus('mandatory')
lnServerSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerSystemVersion.setStatus('mandatory')
lnServerBootID = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerBootID.setStatus('mandatory')
lnServerDataPath = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerDataPath.setStatus('optional')
lnServerSwapPath = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerSwapPath.setStatus('optional')
lnServerRS232Ports = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerRS232Ports.setStatus('optional')
lnServerCoprocessor = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerCoprocessor.setStatus('optional')
lnServerOS = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("os2", 1), ("netware", 2), ("windowsnt", 3), ("unix", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOS.setStatus('mandatory')
lnServerCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerCPUCount.setStatus('mandatory')
lnServerCPUType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerCPUType.setStatus('optional')
lnServerUsersTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14), )
if mibBuilder.loadTexts: lnServerUsersTable.setStatus('optional')
lnServerPorts = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerPorts.setStatus('optional')
lnServerPoweredBy = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerPoweredBy.setStatus('optional')
lnServerUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1), ).setIndexNames((0, "NOTES-MIB", "lnServerUsersIndex"))
if mibBuilder.loadTexts: lnServerUsersEntry.setStatus('mandatory')
lnServerUsersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsersIndex.setStatus('mandatory')
lnServerUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUserName.setStatus('mandatory')
lnServerUserSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUserSessionID.setStatus('mandatory')
lnServerUserAccessedDBs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUserAccessedDBs.setStatus('mandatory')
lnServerDroppedSessions = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerDroppedSessions.setStatus('optional')
lnServerTransPerMin = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransPerMin.setStatus('optional')
lnServerTransPerMinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransPerMinPeak.setStatus('optional')
lnServerTransPerMinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransPerMinPeakTime.setStatus('optional')
lnServerTransTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransTotal.setStatus('optional')
lnServerUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers.setStatus('optional')
lnServerUsers1MinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers1MinPeak.setStatus('optional')
lnServerUsers1MinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers1MinPeakTime.setStatus('optional')
lnServerUsers5MinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers5MinPeak.setStatus('optional')
lnServerUsers5MinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers5MinPeakTime.setStatus('optional')
lnServerUsersPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsersPeak.setStatus('optional')
lnServerUsersPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsersPeakTime.setStatus('optional')
lnServerOpenReqMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqMaxUsers.setStatus('optional')
lnServerOpenReqPreV4Client = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqPreV4Client.setStatus('optional')
lnServerOpenReqRestricted = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqRestricted.setStatus('optional')
lnServerOpenReqV4Client = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqV4Client.setStatus('optional')
lnServerBusyTimeQueryReceivedCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerBusyTimeQueryReceivedCount.setStatus('optional')
lnServerBusyTimeQueryRetObjSched = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerBusyTimeQueryRetObjSched.setStatus('optional')
lnNumClosedOldSessions = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNumClosedOldSessions.setStatus('optional')
lnNetbiosTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2), )
if mibBuilder.loadTexts: lnNetbiosTable.setStatus('mandatory')
lnNetbiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1), ).setIndexNames((0, "NOTES-MIB", "lnNBIndex"))
if mibBuilder.loadTexts: lnNetbiosEntry.setStatus('mandatory')
lnNBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBIndex.setStatus('mandatory')
lnNBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBPort.setStatus('mandatory')
lnNBUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBUnitNumber.setStatus('mandatory')
lnNBMajVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBMajVersion.setStatus('mandatory')
lnNMMinVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNMMinVersion.setStatus('mandatory')
lnNBReportPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBReportPeriod.setStatus('mandatory')
lnNBInUseSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBInUseSessions.setStatus('mandatory')
lnNBMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBMaxSessions.setStatus('mandatory')
lnNBAvailCmdBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBAvailCmdBlocks.setStatus('mandatory')
lnNBTotalCmdBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBTotalCmdBlocks.setStatus('mandatory')
lnNBPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBPacketSize.setStatus('mandatory')
lnNBReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBReceivedPackets.setStatus('mandatory')
lnNBSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBSentPackets.setStatus('mandatory')
lnNBAbortedTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBAbortedTransmissions.setStatus('mandatory')
lnNBRetriedTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBRetriedTransmissions.setStatus('mandatory')
lnNBAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBAlignmentErrors.setStatus('mandatory')
lnNBCollisionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBCollisionErrors.setStatus('mandatory')
lnNBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBCRCErrors.setStatus('mandatory')
lnXPCTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3), )
if mibBuilder.loadTexts: lnXPCTable.setStatus('mandatory')
lnXPCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1), ).setIndexNames((0, "NOTES-MIB", "lnXPCIndex"))
if mibBuilder.loadTexts: lnXPCEntry.setStatus('mandatory')
lnXPCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCIndex.setStatus('mandatory')
lnXPCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCPort.setStatus('mandatory')
lnXPCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCStatus.setStatus('mandatory')
lnXPCCarrierSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCCarrierSpeed.setStatus('mandatory')
lnXPCPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCPortSpeed.setStatus('mandatory')
lnXPCActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCActiveSessions.setStatus('mandatory')
lnXPCKiloBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCKiloBytesReceived.setStatus('mandatory')
lnXPCKiloBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCKiloBytesSent.setStatus('mandatory')
lnXPCMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCMsgsReceived.setStatus('mandatory')
lnXPCMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCMsgsSent.setStatus('mandatory')
lnXPCCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCCRCErrors.setStatus('mandatory')
lnXPCPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCPortErrors.setStatus('mandatory')
lnXPCRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCRetransmissions.setStatus('mandatory')
lnAppleTalkStatsLogged = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAppleTalkStatsLogged.setStatus('optional')
lnNetWareSPXIIStatsLogged = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetWareSPXIIStatsLogged.setStatus('optional')
lnNetPortTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6), )
if mibBuilder.loadTexts: lnNetPortTable.setStatus('mandatory')
lnNetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1), ).setIndexNames((0, "NOTES-MIB", "lnNetPortIndex"))
if mibBuilder.loadTexts: lnNetPortEntry.setStatus('mandatory')
lnNetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortIndex.setStatus('mandatory')
lnNetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortName.setStatus('mandatory')
lnNetPortKBytesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortKBytesRec.setStatus('mandatory')
lnNetPortKBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortKBytesSent.setStatus('mandatory')
lnNetPortSessEstIn = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessEstIn.setStatus('mandatory')
lnNetPortSessEstOut = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessEstOut.setStatus('mandatory')
lnNetPortSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessLimit.setStatus('mandatory')
lnNetPortSessLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessLimitMax.setStatus('mandatory')
lnNetPortSessLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessLimitMin.setStatus('mandatory')
lnNetPortSessPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessPeak.setStatus('mandatory')
lnNetPortSessRecycled = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessRecycled.setStatus('mandatory')
lnNetPortSessRecycling = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessRecycling.setStatus('mandatory')
lnSNARemoteLU = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNARemoteLU.setStatus('optional')
lnSNALocalLU = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNALocalLU.setStatus('optional')
lnSNALNCVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNALNCVersion.setStatus('optional')
lnSNAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAVersion.setStatus('optional')
lnSNAMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAMaxSessions.setStatus('optional')
lnSNAActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAActiveSessions.setStatus('optional')
lnSNATPType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNATPType.setStatus('optional')
lnSNATPState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNATPState.setStatus('optional')
lnSNAConversationId = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAConversationId.setStatus('optional')
lnSNAMaxSendRUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAMaxSendRUSize.setStatus('optional')
lnSNAMaxRcvRUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAMaxRcvRUSize.setStatus('optional')
lnSNASendPacingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNASendPacingSize.setStatus('optional')
lnSNARcvPacingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNARcvPacingSize.setStatus('optional')
lnSNAPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAPacingType.setStatus('optional')
lnX25LocalResets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25LocalResets.setStatus('optional')
lnX25RemoteResets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25RemoteResets.setStatus('optional')
lnX25WindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25WindowSize.setStatus('optional')
lnX25FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25FrameSize.setStatus('optional')
lnX25PktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25PktSize.setStatus('optional')
lnX25UnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25UnderRuns.setStatus('optional')
lnX25OverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25OverRuns.setStatus('optional')
lnX25REJTran = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25REJTran.setStatus('optional')
lnX25REJRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25REJRcv.setStatus('optional')
lnX25VCCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25VCCfg.setStatus('optional')
lnX25VCInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25VCInUse.setStatus('optional')
lnX25CRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25CRCErrors.setStatus('optional')
lnX25LocalDTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25LocalDTEAddress.setStatus('optional')
lnDiskFixed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDiskFixed.setStatus('mandatory')
lnDiskFreeSwap = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDiskFreeSwap.setStatus('optional')
lnDriveTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3), )
if mibBuilder.loadTexts: lnDriveTable.setStatus('mandatory')
lnDiskRemote = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDiskRemote.setStatus('optional')
lnDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1), ).setIndexNames((0, "NOTES-MIB", "lnDriveIndex"))
if mibBuilder.loadTexts: lnDriveEntry.setStatus('mandatory')
lnDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveIndex.setStatus('mandatory')
lnDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveLetter.setStatus('mandatory')
lnDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveSize.setStatus('mandatory')
lnDriveFree = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveFree.setStatus('mandatory')
lnMemAllocTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAllocTotal.setStatus('mandatory')
lnMemAllocProcess = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAllocProcess.setStatus('mandatory')
lnMemAllocShared = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAllocShared.setStatus('mandatory')
lnMemAvailability = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAvailability.setStatus('mandatory')
lnMemFree = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemFree.setStatus('mandatory')
lnMemSwapSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemSwapSize.setStatus('optional')
lnMemPhysicalRAM = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemPhysicalRAM.setStatus('optional')
lnDBBufferControlPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferControlPoolSize.setStatus('optional')
lnDBBufferControlPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferControlPoolUsed.setStatus('optional')
lnDBBufferPoolAllocated = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolAllocated.setStatus('optional')
lnDBBufferPoolMaximum = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolMaximum.setStatus('optional')
lnDBBufferPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolUsed.setStatus('optional')
lnDBNSFPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNSFPoolSize.setStatus('optional')
lnDBNSFPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNSFPoolUsed.setStatus('optional')
lnDBBufferPoolPercentReadsInBuffer = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolPercentReadsInBuffer.setStatus('optional')
lnDBBufferPoolReads = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolReads.setStatus('optional')
lnDBBufferPoolWrites = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolWrites.setStatus('optional')
lnDBNIFPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNIFPoolSize.setStatus('optional')
lnDBNIFPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNIFPoolUsed.setStatus('optional')
lnDBNIFPoolPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNIFPoolPeak.setStatus('optional')
lnDBNSFPoolPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNSFPoolPeak.setStatus('optional')
lnDBCacheCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheCurrentEntries.setStatus('optional')
lnDBCacheHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheHighWaterMark.setStatus('optional')
lnDBCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheHits.setStatus('optional')
lnDBCacheInitialDbOpens = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheInitialDbOpens.setStatus('optional')
lnDBCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheLookups.setStatus('optional')
lnDBCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheMaxEntries.setStatus('optional')
lnDBCacheOvercrowdingRejections = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheOvercrowdingRejections.setStatus('optional')
lnDBBufferControlPoolPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferControlPoolPeak.setStatus('optional')
lnDailyAccessDenials = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyAccessDenials.setStatus('optional')
lnDailyScheduledRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyScheduledRuns.setStatus('optional')
lnDailyTriggeredRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyTriggeredRuns.setStatus('optional')
lnDailyUnsuccessfulRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyUnsuccessfulRuns.setStatus('optional')
lnDailyUsedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyUsedRunTime.setStatus('optional')
lnHourlyAccessDenials = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyAccessDenials.setStatus('optional')
lnHourlyScheduledRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyScheduledRuns.setStatus('optional')
lnHourlyTriggeredRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyTriggeredRuns.setStatus('optional')
lnHourlyUnsuccessfulRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyUnsuccessfulRuns.setStatus('optional')
lnHourlyUsedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyUsedRunTime.setStatus('optional')
lnMTATable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1), )
if mibBuilder.loadTexts: lnMTATable.setStatus('mandatory')
lnMTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1), ).setIndexNames((0, "NOTES-MIB", "lnMTAIndex"))
if mibBuilder.loadTexts: lnMTAEntry.setStatus('mandatory')
lnMTAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAIndex.setStatus('mandatory')
lnMTAName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAName.setStatus('mandatory')
lnMTADeadMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTADeadMsgs.setStatus('optional')
lnMTAWaitingRecp = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAWaitingRecp.setStatus('optional')
lnMTAWaitingMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAWaitingMsgs.setStatus('optional')
lnMTATransferFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATransferFailures.setStatus('optional')
lnMTATotalKBTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATotalKBTransferred.setStatus('optional')
lnMTATransferredMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATransferredMsgs.setStatus('optional')
lnMTATotalRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATotalRouted.setStatus('optional')
lnWebAccessFtp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebAccessFtp.setStatus('optional')
lnWebAccessGopher = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebAccessGopher.setStatus('optional')
lnWebAccessHttp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebAccessHttp.setStatus('optional')
lnWebKBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebKBytesReceived.setStatus('optional')
lnWebKBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebKBytesSent.setStatus('optional')
lnWebImageCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebImageCacheHits.setStatus('optional')
lnWebImageCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebImageCacheMisses.setStatus('optional')
lnWebLogMessages = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebLogMessages.setStatus('optional')
lnWebActiveProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebActiveProcesses.setStatus('optional')
lnWebBusyProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebBusyProcesses.setStatus('optional')
lnWebIdleProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebIdleProcesses.setStatus('optional')
lnWebMaxProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebMaxProcesses.setStatus('optional')
lnWebProcessState = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcessState.setStatus('optional')
lnWebTimeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebTimeCurrent.setStatus('optional')
lnWebTimeDuration = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebTimeDuration.setStatus('optional')
lnWebTimeStart = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebTimeStart.setStatus('optional')
lnWebUrlFail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebUrlFail.setStatus('optional')
lnWebUrlRequested = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebUrlRequested.setStatus('optional')
lnWebUrlSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebUrlSucceeded.setStatus('optional')
lnWebRetrieverVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebRetrieverVersion.setStatus('optional')
lnWebVpoolMaxBuf = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxBuf.setStatus('optional')
lnWebVpoolMaxElement = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxElement.setStatus('optional')
lnWebVpoolMaxMarker = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxMarker.setStatus('optional')
lnWebVpoolMaxText = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxText.setStatus('optional')
lnWebVpoolMaxUrl = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxUrl.setStatus('optional')
lnWebProcessTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26), )
if mibBuilder.loadTexts: lnWebProcessTable.setStatus('optional')
lnWebProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1), ).setIndexNames((0, "NOTES-MIB", "lnWebProcIndex"))
if mibBuilder.loadTexts: lnWebProcEntry.setStatus('optional')
lnWebProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcIndex.setStatus('mandatory')
lnWebProcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcNumber.setStatus('mandatory')
lnWebProcAccFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcAccFtp.setStatus('mandatory')
lnWebProcAccGopher = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcAccGopher.setStatus('mandatory')
lnWebProcAccHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcAccHttp.setStatus('mandatory')
lnWebProcKBytesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcKBytesRec.setStatus('mandatory')
lnWebProcKBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcKBytesSent.setStatus('mandatory')
lnWebProcCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcCacheHits.setStatus('mandatory')
lnWebProcCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcCacheMisses.setStatus('mandatory')
lnWebProcPid = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcPid.setStatus('mandatory')
lnWebProcUrlFail = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcUrlFail.setStatus('mandatory')
lnWebProcUrlReq = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcUrlReq.setStatus('mandatory')
lnWebProcUrlSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcUrlSucc.setStatus('mandatory')
lnWebProcVpoolCurBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurBuf.setStatus('mandatory')
lnWebProcVpoolCurElement = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurElement.setStatus('mandatory')
lnWebProcVpoolCurMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurMarker.setStatus('mandatory')
lnWebProcVpoolCurText = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurText.setStatus('mandatory')
lnWebProcVpoolCurUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurUrl.setStatus('mandatory')
lnWebProcVpoolMaxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxBuf.setStatus('mandatory')
lnWebProcVpoolMaxElement = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxElement.setStatus('mandatory')
lnWebProcVpoolMaxMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxMarker.setStatus('mandatory')
lnWebProcVpoolMaxText = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxText.setStatus('mandatory')
lnWebProcVpoolMaxUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxUrl.setStatus('mandatory')
lnObjectFileName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectFileName.setStatus('optional')
lnObjectTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2), )
if mibBuilder.loadTexts: lnObjectTable.setStatus('optional')
lnObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1), )
if mibBuilder.loadTexts: lnObjectEntry.setStatus('mandatory')
lnObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectIndex.setStatus('optional')
lnObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectName.setStatus('optional')
lnObjectSharedBy01 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy01.setStatus('optional')
lnObjectSharedBy02 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy02.setStatus('optional')
lnObjectSharedBy03 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy03.setStatus('optional')
lnObjectSharedBy04 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy04.setStatus('optional')
lnObjectSharedBy05 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy05.setStatus('optional')
lnObjectSharedBy06 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy06.setStatus('optional')
lnObjectSharedBy07 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy07.setStatus('optional')
lnObjectSharedBy08 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy08.setStatus('optional')
lnObjectSharedBy09 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy09.setStatus('optional')
lnObjectSharedBy10 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy10.setStatus('optional')
lnObjectSharedBy11 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy11.setStatus('optional')
lnObjectSharedBy12 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy12.setStatus('optional')
lnObjectSharedBy13 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy13.setStatus('optional')
lnObjectSharedBy14 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy14.setStatus('optional')
lnObjectSharedBy15 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy15.setStatus('optional')
lnObjectSharedBy16 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy16.setStatus('optional')
lnObjectSharedBy17 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy17.setStatus('optional')
lnObjectSharedBy18 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy18.setStatus('optional')
lnObjectSharedBy19 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy19.setStatus('optional')
lnObjectSharedBy20 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy20.setStatus('optional')
lnObjectSharedByGreater = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedByGreater.setStatus('optional')
lnObjectSharedByTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedByTotal.setStatus('optional')
lnDominoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1))
lnDominoCmdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2))
lnDominoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3))
lnDominoBuildName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildName.setStatus('optional')
lnDominoBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildNumber.setStatus('optional')
lnDominoBuildPlatform = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildPlatform.setStatus('optional')
lnDominoBuildVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildVersion.setStatus('optional')
lnDominoThreadsActivePeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsActivePeak.setStatus('optional')
lnDominoThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsTotal.setStatus('optional')
lnDominoThreadsPeakTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsPeakTotal.setStatus('optional')
lnDominoThreadsPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsPeakTime.setStatus('optional')
lnDominoStartTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoStartTime.setStatus('optional')
lnDominoReqPerMinTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerMinTotal.setStatus('optional')
lnDominoReqPerMinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerMinPeak.setStatus('optional')
lnDominoReqPerMinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerMinPeakTime.setStatus('optional')
lnDominoReqPer5MinsTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPer5MinsTotal.setStatus('optional')
lnDominoReqPer5MinsPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPer5MinsPeak.setStatus('optional')
lnDominoReqPer5MinsPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPer5MinsPeakTime.setStatus('optional')
lnDominoReqPerHourTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerHourTotal.setStatus('optional')
lnDominoReqPerHourPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerHourPeak.setStatus('optional')
lnDominoReqPerHourPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerHourPeakTime.setStatus('optional')
lnDominoReqPerDayTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerDayTotal.setStatus('optional')
lnDominoReqPerDayPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerDayPeak.setStatus('optional')
lnDominoReqPerDayPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerDayPeakTime.setStatus('optional')
lnDominoRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoRequestsTotal.setStatus('optional')
lnDominoCacheCommandDisplaceRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheCommandDisplaceRate.setStatus('optional')
lnDominoCacheCommandHitRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheCommandHitRate.setStatus('optional')
lnDominoCacheDatabaseDisplaceRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheDatabaseDisplaceRate.setStatus('optional')
lnDominoCacheDatabaseHitRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheDatabaseHitRate.setStatus('optional')
lnDominoCmdInfoEditDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoEditDocument.setStatus('optional')
lnDominoCmdInfoOpenServer = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenServer.setStatus('optional')
lnDominoCmdInfoOpenDatabase = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenDatabase.setStatus('optional')
lnDominoCmdInfoOpenView = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenView.setStatus('optional')
lnDominoCmdInfoOpenDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenDocument.setStatus('optional')
lnDominoCmdInfoOpenElement = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenElement.setStatus('optional')
lnDominoCmdInfoOpenIcon = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenIcon.setStatus('optional')
lnDominoCmdInfoOpenForm = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenForm.setStatus('optional')
lnDominoCmdInfoOpenAgent = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenAgent.setStatus('optional')
lnDominoCmdInfoOpenNavigator = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenNavigator.setStatus('optional')
lnDominoCmdInfoOpenAbout = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenAbout.setStatus('optional')
lnDominoCmdInfoOpenHelp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenHelp.setStatus('optional')
lnDominoCmdInfoCreateDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoCreateDocument.setStatus('optional')
lnDominoCmdInfoSaveDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoSaveDocument.setStatus('optional')
lnDominoCmdInfoDeleteDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoDeleteDocument.setStatus('optional')
lnDominoCmdInfoSearchSite = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoSearchSite.setStatus('optional')
lnDominoCmdInfoSearchView = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoSearchView.setStatus('optional')
lnDominoCmdInfoUnknown = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoUnknown.setStatus('optional')
lnDominoCmdInfoLogin = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoLogin.setStatus('optional')
lnDominoCmdInfoNavigate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoNavigate.setStatus('optional')
lnDominoCmdInfoReadForm = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoReadForm.setStatus('optional')
lnDominoCmdInfoTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoTotal.setStatus('optional')
lnDominoCfgPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgPortNumber.setStatus('optional')
lnDominoCfgPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgPortStatus.setStatus('optional')
lnDominoCfgHostName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgHostName.setStatus('optional')
lnDominoCfgDNSLookup = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDNSLookup.setStatus('optional')
lnDominoCfgHomeURL = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgHomeURL.setStatus('optional')
lnDominoCfgWelcomePage = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgWelcomePage.setStatus('optional')
lnDominoCfgActiveThreadsMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgActiveThreadsMax.setStatus('optional')
lnDominoCfgActiveThreadsMin = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgActiveThreadsMin.setStatus('optional')
lnDominoCfgSSLPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgSSLPortNumber.setStatus('optional')
lnDominoCfgSSLStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgSSLStatus.setStatus('optional')
lnDominoCfgSSLKeyFile = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgSSLKeyFile.setStatus('optional')
lnDominoCfgCacheDirectory = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgCacheDirectory.setStatus('optional')
lnDominoCfgCacheSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgCacheSizeMax.setStatus('optional')
lnDominoCfgCacheDelete = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgCacheDelete.setStatus('optional')
lnDominoCfgGarbageCollectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgGarbageCollectionStatus.setStatus('optional')
lnDominoCfgGarbageCollectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgGarbageCollectionInterval.setStatus('optional')
lnDominoCfgImageFormat = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgImageFormat.setStatus('optional')
lnDominoCfgImageInterlaced = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgImageInterlaced.setStatus('optional')
lnDominoCfgViewLines = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgViewLines.setStatus('optional')
lnDominoCfgDirectoryHTML = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryHTML.setStatus('optional')
lnDominoCfgDirectoryURLPathCGI = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryURLPathCGI.setStatus('optional')
lnDominoCfgDirectoryCGI = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryCGI.setStatus('optional')
lnDominoCfgDirectoryURLPathIcons = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryURLPathIcons.setStatus('optional')
lnDominoCfgDirectoryIcons = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryIcons.setStatus('optional')
lnDominoCfgLogAccess = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogAccess.setStatus('optional')
lnDominoCfgLogError = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogError.setStatus('optional')
lnDominoCfgLogTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogTimeStamp.setStatus('optional')
lnDominoCfgLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogFilter.setStatus('optional')
lnDominoCfgTimeoutIdleThread = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutIdleThread.setStatus('optional')
lnDominoCfgTimeoutInput = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutInput.setStatus('optional')
lnDominoCfgTimeoutOutput = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutOutput.setStatus('optional')
lnDominoCfgTimeoutCGI = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutCGI.setStatus('optional')
lnCalTotalAllApptsResources = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalAllApptsResources.setStatus('optional')
lnCalTotalAllUsersResources = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalAllUsersResources.setStatus('optional')
lnCalTotalAppointments = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalAppointments.setStatus('optional')
lnCalTotalReservations = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalReservations.setStatus('optional')
lnCalTotalResources = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalResources.setStatus('optional')
lnCalTotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalUsers.setStatus('optional')
lnCollectorTimeCollected = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCollectorTimeCollected.setStatus('mandatory')
lnCollectorTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 17, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCollectorTimeElapsed.setStatus('mandatory')
lnMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMIBVersion.setStatus('mandatory')
lnQSBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnQSBuildNumber.setStatus('mandatory')
lnClusterName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterName.setStatus('optional')
lnClusterAvailIndex = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterAvailIndex.setStatus('optional')
lnClusterAvailThreshold = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterAvailThreshold.setStatus('optional')
lnClusterPortName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterPortName.setStatus('optional')
lnClusterProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterProbeCount.setStatus('optional')
lnClusterProbeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterProbeTimeout.setStatus('optional')
lnClusterTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTable.setStatus('optional')
lnClusterProbeError = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterProbeError.setStatus('optional')
lnClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1), ).setMaxAccess("readonly").setIndexNames((0, "NOTES-MIB", "lnClusterTableIndex"))
if mibBuilder.loadTexts: lnClusterEntry.setStatus('optional')
lnClusterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTableIndex.setStatus('optional')
lnClusterMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterMemberName.setStatus('optional')
lnClusterMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterMemberIndex.setStatus('optional')
lnClusterFailoverByPathSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverByPathSucc.setStatus('optional')
lnClusterFailoverByPathUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverByPathUnsucc.setStatus('optional')
lnClusterFailoverSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverSucc.setStatus('optional')
lnClusterFailoverUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverUnsucc.setStatus('optional')
lnClusterLoadBalByPathSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalByPathSucc.setStatus('optional')
lnClusterLoadBalByPathUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalByPathUnsucc.setStatus('optional')
lnClusterLoadBalSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalSucc.setStatus('optional')
lnClusterLoadBalUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalUnsucc.setStatus('optional')
lnClusterOpenReqClustBusy = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterOpenReqClustBusy.setStatus('optional')
lnClusterOpenReqDBOutofServ = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterOpenReqDBOutofServ.setStatus('optional')
lnClusterOpenReqLoadBalanced = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterOpenReqLoadBalanced.setStatus('optional')
lnClusterTransIntAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransIntAvgTime.setStatus('optional')
lnClusterTransIntInSec = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransIntInSec.setStatus('optional')
lnClusterTransIntUsedInAvg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransIntUsedInAvg.setStatus('optional')
lnClusterTransLastIntAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransLastIntAvgTime.setStatus('optional')
lnClusterTransNormValue = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransNormValue.setStatus('optional')
lnNotesServerSetState = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnNotesServerSetState.setStatus('mandatory')
lnNotesServerState = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("not-responding", 3), ("crashed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNotesServerState.setStatus('mandatory')
lnLastTrapSeq = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnLastTrapSeq.setStatus('mandatory')
lnRecentTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 2, 4), )
if mibBuilder.loadTexts: lnRecentTrapsTable.setStatus('mandatory')
lnRecentTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 2, 4, 1), ).setIndexNames((0, "NOTES-MIB", "lnTrapSeq"))
if mibBuilder.loadTexts: lnRecentTrapsEntry.setStatus('mandatory')
lnTrapSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTrapSeq.setStatus('mandatory')
lnTrapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTrapInfo.setStatus('mandatory')
lnRemoteReboot = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnRemoteReboot.setStatus('mandatory')
lnServerTbl = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 2, 6), )
if mibBuilder.loadTexts: lnServerTbl.setStatus('optional')
lnTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalPartitions.setStatus('mandatory')
lnMPAIniFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMPAIniFileLocation.setStatus('mandatory')
lnServerTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1), ).setIndexNames((0, "NOTES-MIB", "lnServerTblIndex"))
if mibBuilder.loadTexts: lnServerTblEntry.setStatus('optional')
lnServerTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblIndex.setStatus('optional')
lnServerTblName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblName.setStatus('optional')
lnServerTblNotesPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblNotesPartition.setStatus('optional')
lnServerTblDataDir = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblDataDir.setStatus('optional')
lnServerTblDataDirValid = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblDataDirValid.setStatus('optional')
lnServerTblState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblState.setStatus('optional')
lnServerIdentifiedItself = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerIdentifiedItself.setStatus('optional')
lnServerTblSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnServerTblSetState.setStatus('optional')
lnEvtServer = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtServer.setStatus('mandatory')
lnEvtType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("communications", 1), ("security", 2), ("mail", 3), ("replication", 4), ("resource", 5), ("miscellaneous", 6), ("server", 7), ("alarm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtType.setStatus('mandatory')
lnEvtSeverity = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("fatal", 1), ("failure", 2), ("warning1", 3), ("warning2", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtSeverity.setStatus('mandatory')
lnEvtWhen = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtWhen.setStatus('mandatory')
lnEvtData = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtData.setStatus('mandatory')
lnEvtSeq = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtSeq.setStatus('mandatory')
lnAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 4, 1))
lnSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 4, 2))
lnAlarmServerHandle = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmServerHandle.setStatus('optional')
lnAlarmTargetHandle = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmTargetHandle.setStatus('optional')
lnAlarmDate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmDate.setStatus('optional')
lnAlarmTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmTime.setStatus('optional')
lnAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("normal", 0), ("informational", 1), ("disabled", 2), ("unmanaged", 3), ("unknown", 4), ("marginal", 5), ("warning", 6), ("minor", 7), ("major", 8), ("critical", 9))))
if mibBuilder.loadTexts: lnAlarmSeverity.setStatus('optional')
lnAlarmIntArg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: lnAlarmIntArg.setStatus('optional')
lnAlarmLongArg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmLongArg.setStatus('optional')
lnAlarmDoubleArg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 8), OctetString())
if mibBuilder.loadTexts: lnAlarmDoubleArg.setStatus('optional')
lnAlarmTextArg1 = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 9), OctetString())
if mibBuilder.loadTexts: lnAlarmTextArg1.setStatus('optional')
lnAlarmTextArg2 = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 10), OctetString())
if mibBuilder.loadTexts: lnAlarmTextArg2.setStatus('optional')
lnAlarmSeverityStr = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 11), DisplayString())
if mibBuilder.loadTexts: lnAlarmSeverityStr.setStatus('optional')
lnAlarmTypeStr = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 12), DisplayString())
if mibBuilder.loadTexts: lnAlarmTypeStr.setStatus('optional')
lnAlarmMessage = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 13), DisplayString())
if mibBuilder.loadTexts: lnAlarmMessage.setStatus('optional')
lnAlarmMessageExt = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 14), DisplayString())
if mibBuilder.loadTexts: lnAlarmMessageExt.setStatus('optional')
lnAlarmServerName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 15), DisplayString())
if mibBuilder.loadTexts: lnAlarmServerName.setStatus('optional')
lnSignalServerId = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalServerId.setStatus('optional')
lnSignalOldServerType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalOldServerType.setStatus('optional')
lnSignalNewServerType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalNewServerType.setStatus('optional')
lnSignalWhatHasChanged = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalWhatHasChanged.setStatus('optional')
lnSignalServerName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 5), DisplayString())
if mibBuilder.loadTexts: lnSignalServerName.setStatus('optional')
lnUnknownEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,0)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
lnFatalEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,1)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
lnFailureEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,2)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
lnWarning1EventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,3)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
lnWarning2EventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,4)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
lnNormalEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,5)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
lnServerUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,11)).setObjects(("NOTES-MIB", "lnEvtServer"))
lnServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,12)).setObjects(("NOTES-MIB", "lnEvtServer"))
lnServerPulseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,13)).setObjects(("NOTES-MIB", "lnEvtServer"))
lnServerPulseRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,14)).setObjects(("NOTES-MIB", "lnEvtServer"))
lnSystemRebootingTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,15))
lnServerNotRespondingTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,16)).setObjects(("NOTES-MIB", "lnEvtServer"))
lnServerNowRespondingTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,17)).setObjects(("NOTES-MIB", "lnEvtServer"))
lnAlarmStatisticThreshold = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,30)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,31)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,32)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmTaskStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,33)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmNVStatClear = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,34)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmAutoDiscovery = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,35)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmServerNotesEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,36)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmServerCfgChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,37)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmMailProbeEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,38)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmNSFRemoteConsoleEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,40)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmMailBoxEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,41)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmServerSNMPEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,39)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
lnAlarmClearAll = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,50))
lnAlarmClearServers = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,51)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"))
lnSignalAutodiscoveryStart = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,52))
lnSignalAutodiscoveryFinished = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,53))
lnSignalServerConfigChg = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,54)).setObjects(("NOTES-MIB", "lnSignalServerId"), ("NOTES-MIB", "lnSignalOldServerType"), ("NOTES-MIB", "lnSignalNewServerType"), ("NOTES-MIB", "lnSignalWhatHasChanged"))
lnTrapRequestMostSevereStatus = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,55)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"))
lnTrapDisplayAlarmClearServers = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,60)).setObjects(("NOTES-MIB", "lnSignalServerId"), ("NOTES-MIB", "lnSignalServerName"))
lnTrapDisplayClearedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,70)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
lnTrapDisplayIndeterminateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,71)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
lnTrapDisplayWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,72)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
lnTrapDisplayMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,73)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
lnTrapDisplayCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,74)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
lnTrapDisplayMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,75)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
mibBuilder.exportSymbols("NOTES-MIB", lnServerTblSetState=lnServerTblSetState, lnDominoThreadsActivePeak=lnDominoThreadsActivePeak, lnTotalMailFailures=lnTotalMailFailures, lnSignalServerId=lnSignalServerId, lnServerUserName=lnServerUserName, lnWebProcKBytesRec=lnWebProcKBytesRec, lnReplicatorStatus=lnReplicatorStatus, lnDominoCfgCacheSizeMax=lnDominoCfgCacheSizeMax, lnCalTotalAllUsersResources=lnCalTotalAllUsersResources, lnAlarmTextArg2=lnAlarmTextArg2, lnCalTotalResources=lnCalTotalResources, lnDBBufferPoolMaximum=lnDBBufferPoolMaximum, lnSNAMaxRcvRUSize=lnSNAMaxRcvRUSize, lnTotalKBTransferred=lnTotalKBTransferred, lnNetPortKBytesRec=lnNetPortKBytesRec, lnDominoReqPerHourTotal=lnDominoReqPerHourTotal, lnServerPorts=lnServerPorts, lnFailureEventTrap=lnFailureEventTrap, lnServerUsers1MinPeakTime=lnServerUsers1MinPeakTime, lnClusterTrans=lnClusterTrans, lnDominoCmdInfoOpenAgent=lnDominoCmdInfoOpenAgent, lnDominoCacheCommandDisplaceRate=lnDominoCacheCommandDisplaceRate, lnMail=lnMail, lnX25RemoteResets=lnX25RemoteResets, lnXPCMsgsSent=lnXPCMsgsSent, lnClusterName=lnClusterName, lnClusterLoadBalUnsucc=lnClusterLoadBalUnsucc, lnStatsCurrentTime=lnStatsCurrentTime, lnDriveLetter=lnDriveLetter, lnRepClusterWorkQueueDepth=lnRepClusterWorkQueueDepth, lnMemFree=lnMemFree, lnServerOpenReqV4Client=lnServerOpenReqV4Client, lnWebAccessFtp=lnWebAccessFtp, lnDriveSize=lnDriveSize, lnObjectSharedBy04=lnObjectSharedBy04, lnTrapDisplayMajorAlarm=lnTrapDisplayMajorAlarm, lnObjectSharedBy14=lnObjectSharedBy14, lnDominoCacheDatabaseDisplaceRate=lnDominoCacheDatabaseDisplaceRate, lnUnknownEventTrap=lnUnknownEventTrap, lnDominoCfgPortStatus=lnDominoCfgPortStatus, lnSNAMaxSessions=lnSNAMaxSessions, lnNBInUseSessions=lnNBInUseSessions, lnDominoCfgDirectoryCGI=lnDominoCfgDirectoryCGI, lnServerAdministrators=lnServerAdministrators, lnWebVpoolMaxUrl=lnWebVpoolMaxUrl, lnClusterProbeCount=lnClusterProbeCount, lnAlarmServerCfgChangeEvent=lnAlarmServerCfgChangeEvent, lnDominoCfgGarbageCollectionInterval=lnDominoCfgGarbageCollectionInterval, lnWebBusyProcesses=lnWebBusyProcesses, lnAlarmServerName=lnAlarmServerName, lnNBMajVersion=lnNBMajVersion, lnDominoConfig=lnDominoConfig, lnServerDataPath=lnServerDataPath, lnDBNSFPoolUsed=lnDBNSFPoolUsed, lnXPCPortErrors=lnXPCPortErrors, lnTrapInfo=lnTrapInfo, lnDBBufferControlPoolPeak=lnDBBufferControlPoolPeak, lnTrapDisplayMinorAlarm=lnTrapDisplayMinorAlarm, lnDominoBuildVersion=lnDominoBuildVersion, lnObjectIndex=lnObjectIndex, lnAlarmTargetHandle=lnAlarmTargetHandle, lnNumClosedOldSessions=lnNumClosedOldSessions, lnDBNSFPoolPeak=lnDBNSFPoolPeak, lnWebProcUrlSucc=lnWebProcUrlSucc, lnNetWareSPXIIStatsLogged=lnNetWareSPXIIStatsLogged, lnServerInfo=lnServerInfo, lnClusterLoadBalByPathUnsucc=lnClusterLoadBalByPathUnsucc, lnDominoCmdInfoOpenAbout=lnDominoCmdInfoOpenAbout, lnRepClusterSessionBytesOut=lnRepClusterSessionBytesOut, lnHourlyUsedRunTime=lnHourlyUsedRunTime, lnWebProcCacheMisses=lnWebProcCacheMisses, lnOpenRedirects=lnOpenRedirects, lnNetPortSessRecycled=lnNetPortSessRecycled, lnMemAllocProcess=lnMemAllocProcess, lnClusterFailoverByPathUnsucc=lnClusterFailoverByPathUnsucc, lnCalTotalAppointments=lnCalTotalAppointments, lnAlarmPortStatusChange=lnAlarmPortStatusChange, lnDominoCfgViewLines=lnDominoCfgViewLines, lnWebProcAccFtp=lnWebProcAccFtp, lnNBCRCErrors=lnNBCRCErrors, lnX25UnderRuns=lnX25UnderRuns, lnMaximumMailServerHops=lnMaximumMailServerHops, lnAlarmServerHandle=lnAlarmServerHandle, lnNBTotalCmdBlocks=lnNBTotalCmdBlocks, lnServerBusyTimeQueryRetObjSched=lnServerBusyTimeQueryRetObjSched, lnDominoCfgLogError=lnDominoCfgLogError, lnDailyScheduledRuns=lnDailyScheduledRuns, lnDominoCmdInfoOpenForm=lnDominoCmdInfoOpenForm, lnCalTotalUsers=lnCalTotalUsers, lnSignalOldServerType=lnSignalOldServerType, lnDominoCfgDirectoryURLPathIcons=lnDominoCfgDirectoryURLPathIcons, lnMinimumMailSizeDelivered=lnMinimumMailSizeDelivered, lnXPCStatus=lnXPCStatus, lnServerUsersTable=lnServerUsersTable, lnWebProcPid=lnWebProcPid, lnDominoCfgPortNumber=lnDominoCfgPortNumber, lnDominoCmdInfoOpenDocument=lnDominoCmdInfoOpenDocument, lnServerOpenReqPreV4Client=lnServerOpenReqPreV4Client, lnDominoCfgWelcomePage=lnDominoCfgWelcomePage, lnNormalEventTrap=lnNormalEventTrap, lnStatsStartTime=lnStatsStartTime, lnX25CRCErrors=lnX25CRCErrors, lnDominoThreadsPeakTime=lnDominoThreadsPeakTime, lnClusterAvailThreshold=lnClusterAvailThreshold, lnWebProcCacheHits=lnWebProcCacheHits, lnTaskCount=lnTaskCount, lnServerTblDataDir=lnServerTblDataDir, lnDominoThreadsTotal=lnDominoThreadsTotal, lnObjectSharedBy10=lnObjectSharedBy10, lnStatisticString=lnStatisticString, lnNetPortSessPeak=lnNetPortSessPeak, lnClusterProbeTimeout=lnClusterProbeTimeout, lnTaskData=lnTaskData, lnDBCacheCurrentEntries=lnDBCacheCurrentEntries, lnAlarmIntArg=lnAlarmIntArg, lnNBIndex=lnNBIndex, lnServerTblName=lnServerTblName, lnAlarmDoubleArg=lnAlarmDoubleArg, lnDailyUsedRunTime=lnDailyUsedRunTime, lnDriveEntry=lnDriveEntry, lnClusterOpenReqDBOutofServ=lnClusterOpenReqDBOutofServ, lnServerNowRespondingTrap=lnServerNowRespondingTrap, lnDominoCfgTimeoutIdleThread=lnDominoCfgTimeoutIdleThread, lnObjectSharedBy16=lnObjectSharedBy16, lnDBBufferPoolReads=lnDBBufferPoolReads, lnMemAllocShared=lnMemAllocShared, lnObjectSharedBy05=lnObjectSharedBy05, lnServerNotRespondingTrap=lnServerNotRespondingTrap, lnObjectSharedBy19=lnObjectSharedBy19, lnClusterTable=lnClusterTable, lnDominoCfgActiveThreadsMax=lnDominoCfgActiveThreadsMax, lnObjectSharedBy07=lnObjectSharedBy07, lnAverageMailServerHops=lnAverageMailServerHops, lnWebKBytesReceived=lnWebKBytesReceived, lnDominoCfgCacheDirectory=lnDominoCfgCacheDirectory, lnServerTblState=lnServerTblState, lnServerTask=lnServerTask, lnAlarmStatisticThreshold=lnAlarmStatisticThreshold, lnTotalRoutedMail=lnTotalRoutedMail, lnDominoCfgTimeoutOutput=lnDominoCfgTimeoutOutput, lnDominoCfgActiveThreadsMin=lnDominoCfgActiveThreadsMin, lnNetPortEntry=lnNetPortEntry, lnAlarmLongArg=lnAlarmLongArg, lnDominoCmdInfoSearchSite=lnDominoCmdInfoSearchSite, lnNotesServerSetState=lnNotesServerSetState, lnServer=lnServer, lnDominoCfgDNSLookup=lnDominoCfgDNSLookup, lnWebLogMessages=lnWebLogMessages, lnNotesServerState=lnNotesServerState, lnServerName=lnServerName, lnWebProcVpoolMaxBuf=lnWebProcVpoolMaxBuf, lnDominoCmdInfoOpenView=lnDominoCmdInfoOpenView, lnWarning2EventTrap=lnWarning2EventTrap, lnWebProcAccHttp=lnWebProcAccHttp, lnServerUsers5MinPeakTime=lnServerUsers5MinPeakTime, lnDailyTriggeredRuns=lnDailyTriggeredRuns, lnServerOS=lnServerOS, notesPump=notesPump, lnWaitingMail=lnWaitingMail, lnWebMaxProcesses=lnWebMaxProcesses, lnObjectSharedBy17=lnObjectSharedBy17, lnDatabase=lnDatabase, lnTaskEntry=lnTaskEntry, lnServerTransPerMinPeakTime=lnServerTransPerMinPeakTime, lnAlarmMailBoxEvent=lnAlarmMailBoxEvent, lnObjectSharedByTotal=lnObjectSharedByTotal, lnXPCCRCErrors=lnXPCCRCErrors, lnDBCacheLookups=lnDBCacheLookups, lnAlarmClearAll=lnAlarmClearAll, lnXPCPort=lnXPCPort, lnXPCMsgsReceived=lnXPCMsgsReceived, lnWebProcessState=lnWebProcessState, lnServerUsersPeak=lnServerUsersPeak, lnServerDownTrap=lnServerDownTrap, lnClusterEntry=lnClusterEntry, lnDominoReqPer5MinsPeak=lnDominoReqPer5MinsPeak, lnClusterTableIndex=lnClusterTableIndex, lnAlarmServerStatusChange=lnAlarmServerStatusChange, lnControl=lnControl, lnDisk=lnDisk, lnServerUsers=lnServerUsers, lnWebProcVpoolMaxMarker=lnWebProcVpoolMaxMarker, lnDominoReqPerHourPeak=lnDominoReqPerHourPeak, lnServerRS232Ports=lnServerRS232Ports, lnSNAMaxSendRUSize=lnSNAMaxSendRUSize, notes=notes, lnRepClusterRetrySkipped=lnRepClusterRetrySkipped, lnNetPortSessRecycling=lnNetPortSessRecycling, lnXPCRetransmissions=lnXPCRetransmissions, lnEvtType=lnEvtType, lnWebVpoolMaxBuf=lnWebVpoolMaxBuf, lnServerUpTrap=lnServerUpTrap, lnX25PktSize=lnX25PktSize, lnDominoReqPerDayTotal=lnDominoReqPerDayTotal, lnServerPulseFailedTrap=lnServerPulseFailedTrap, lnObjectSharedBy02=lnObjectSharedBy02, lnServerUserSessionID=lnServerUserSessionID, lnWebProcIndex=lnWebProcIndex, lnWebProcVpoolCurMarker=lnWebProcVpoolCurMarker, lnObjectSharedBy06=lnObjectSharedBy06, lnClusterPortName=lnClusterPortName, lnDBBufferPoolUsed=lnDBBufferPoolUsed, lnDominoCfgGarbageCollectionStatus=lnDominoCfgGarbageCollectionStatus, lnEvtSeverity=lnEvtSeverity, lnRouterStatus=lnRouterStatus, lnNBReportPeriod=lnNBReportPeriod, lnDriveTable=lnDriveTable, lnDominoCmdInfoOpenNavigator=lnDominoCmdInfoOpenNavigator, lnServerTbl=lnServerTbl, lnMailDomain=lnMailDomain, lnDominoBuildName=lnDominoBuildName, lnCollectorTimeCollected=lnCollectorTimeCollected, lnServerTblDataDirValid=lnServerTblDataDirValid, lnSignalServerName=lnSignalServerName, lnObjectSharedBy03=lnObjectSharedBy03, lnXPCActiveSessions=lnXPCActiveSessions, lnObjectName=lnObjectName, lnMaximumMailSizeDelivered=lnMaximumMailSizeDelivered, lnXPCIndex=lnXPCIndex, lnServerSwapPath=lnServerSwapPath, lnRemoteReboot=lnRemoteReboot, lnAllStatsEntry=lnAllStatsEntry, lnServerCPUCount=lnServerCPUCount, lnDominoCfgTimeoutInput=lnDominoCfgTimeoutInput, lnAlarmServerNotesEvent=lnAlarmServerNotesEvent, lnInfo=lnInfo, lnMinimumMailServerHops=lnMinimumMailServerHops, lnWebProcessTable=lnWebProcessTable, lnServerIdentifiedItself=lnServerIdentifiedItself, lnClusterTransIntUsedInAvg=lnClusterTransIntUsedInAvg, lnMPAIniFileLocation=lnMPAIniFileLocation, lnObjectFileName=lnObjectFileName, lnDiskFreeSwap=lnDiskFreeSwap, lnDominoCfgLogAccess=lnDominoCfgLogAccess, lnDominoCmdInfoLogin=lnDominoCmdInfoLogin, lnNumWaitingRecipients=lnNumWaitingRecipients, lnRepClusterSessionBytesIn=lnRepClusterSessionBytesIn, lnServerTransTotal=lnServerTransTotal, lnRepClusterSecondsOnQueue=lnRepClusterSecondsOnQueue, lnHourlyAccessDenials=lnHourlyAccessDenials, lnRepClusterServers=lnRepClusterServers, lnAlarmNSFRemoteConsoleEvent=lnAlarmNSFRemoteConsoleEvent, lnServerTransPerMinPeak=lnServerTransPerMinPeak, lnDominoReqPerDayPeakTime=lnDominoReqPerDayPeakTime, lotus=lotus, lnTotalPartitions=lnTotalPartitions, lnNMMinVersion=lnNMMinVersion, lnNetPortSessEstOut=lnNetPortSessEstOut, lnWebVpoolMaxMarker=lnWebVpoolMaxMarker, lnMTA=lnMTA, lnXPCPortSpeed=lnXPCPortSpeed, lnCalTotalReservations=lnCalTotalReservations, lnRepClusterDocsUpdated=lnRepClusterDocsUpdated, lnSNASendPacingSize=lnSNASendPacingSize)
mibBuilder.exportSymbols("NOTES-MIB", lnX25REJRcv=lnX25REJRcv, lnWebProcAccGopher=lnWebProcAccGopher, lnMIBVersion=lnMIBVersion, lnObjectSharedBy18=lnObjectSharedBy18, lnNBReceivedPackets=lnNBReceivedPackets, lnNBRetriedTransmissions=lnNBRetriedTransmissions, lnServerTblEntry=lnServerTblEntry, lnDominoReqPerMinPeakTime=lnDominoReqPerMinPeakTime, lnServerOpenReqRestricted=lnServerOpenReqRestricted, lnClusterFailoverByPathSucc=lnClusterFailoverByPathSucc, lnClusterFailoverUnsucc=lnClusterFailoverUnsucc, lnDominoReqPer5MinsPeakTime=lnDominoReqPer5MinsPeakTime, lnAlarmTime=lnAlarmTime, lnMTATotalKBTransferred=lnMTATotalKBTransferred, lnDominoReqPerMinTotal=lnDominoReqPerMinTotal, lnSNALNCVersion=lnSNALNCVersion, lnServerTblNotesPartition=lnServerTblNotesPartition, lnSNATPState=lnSNATPState, lnDominoBuildPlatform=lnDominoBuildPlatform, lnXPCTable=lnXPCTable, lnServerOpenReqMaxUsers=lnServerOpenReqMaxUsers, lnDBNSFPoolSize=lnDBNSFPoolSize, lnDominoCmdInfoOpenServer=lnDominoCmdInfoOpenServer, lnServerUsers1MinPeak=lnServerUsers1MinPeak, lnSNAActiveSessions=lnSNAActiveSessions, lnClusterTransLastIntAvgTime=lnClusterTransLastIntAvgTime, lnDBCacheHighWaterMark=lnDBCacheHighWaterMark, lnX25LocalResets=lnX25LocalResets, lnServerBootID=lnServerBootID, lnWebAccessHttp=lnWebAccessHttp, lnSNARcvPacingSize=lnSNARcvPacingSize, lnWebProcVpoolCurBuf=lnWebProcVpoolCurBuf, lnServerTransPerMin=lnServerTransPerMin, lnNetPortKBytesSent=lnNetPortKBytesSent, lnSNARemoteLU=lnSNARemoteLU, lnWebProcKBytesSent=lnWebProcKBytesSent, lnDominoCmdInfoDeleteDocument=lnDominoCmdInfoDeleteDocument, lnCalendar=lnCalendar, lnServerUsers5MinPeak=lnServerUsers5MinPeak, lnRepClusterRetryWaiting=lnRepClusterRetryWaiting, lnHourlyScheduledRuns=lnHourlyScheduledRuns, lnDBBufferPoolPercentReadsInBuffer=lnDBBufferPoolPercentReadsInBuffer, lnNBPort=lnNBPort, lnClusterFailoverSucc=lnClusterFailoverSucc, lnDeadMail=lnDeadMail, lnTrapRequestMostSevereStatus=lnTrapRequestMostSevereStatus, lnNBAbortedTransmissions=lnNBAbortedTransmissions, lnObjectSharedBy01=lnObjectSharedBy01, lnMem=lnMem, lnWebProcVpoolCurUrl=lnWebProcVpoolCurUrl, lnWebProcNumber=lnWebProcNumber, lnObjectTable=lnObjectTable, lnNBAlignmentErrors=lnNBAlignmentErrors, lnMTAWaitingMsgs=lnMTAWaitingMsgs, lnXPCKiloBytesSent=lnXPCKiloBytesSent, lnServerUsersEntry=lnServerUsersEntry, lnEvtSeq=lnEvtSeq, lnUnix=lnUnix, lnStatisticIndex=lnStatisticIndex, lnDeliveredMail=lnDeliveredMail, lnServerUsersIndex=lnServerUsersIndex, lnXPCKiloBytesReceived=lnXPCKiloBytesReceived, lnTrapDisplayAlarmClearServers=lnTrapDisplayAlarmClearServers, lnWebKBytesSent=lnWebKBytesSent, lnDominoCmdInfoTotal=lnDominoCmdInfoTotal, lnQSBuildNumber=lnQSBuildNumber, lnReplica=lnReplica, lnEvtServer=lnEvtServer, lnEvtData=lnEvtData, lnNetbiosEntry=lnNetbiosEntry, lnAlarmTextArg1=lnAlarmTextArg1, lnAlarmMailProbeEvent=lnAlarmMailProbeEvent, lnCollector=lnCollector, lnWebAccessGopher=lnWebAccessGopher, lnStats=lnStats, lnRepClusterFailed=lnRepClusterFailed, lnDominoCfgDirectoryURLPathCGI=lnDominoCfgDirectoryURLPathCGI, lnWebImageCacheMisses=lnWebImageCacheMisses, lnDBBufferPoolWrites=lnDBBufferPoolWrites, lnWebRetrieverVersion=lnWebRetrieverVersion, lnNBSentPackets=lnNBSentPackets, lnSignalAutodiscoveryFinished=lnSignalAutodiscoveryFinished, lnSNAConversationId=lnSNAConversationId, lnNetPortSessLimitMax=lnNetPortSessLimitMax, lnDominoInfo=lnDominoInfo, lnTrapDisplayCriticalAlarm=lnTrapDisplayCriticalAlarm, lnClusterMemberName=lnClusterMemberName, lnRepClusterWorkQueueDepthMax=lnRepClusterWorkQueueDepthMax, lnServerTitle=lnServerTitle, lnServerUserAccessedDBs=lnServerUserAccessedDBs, lnDBCacheOvercrowdingRejections=lnDBCacheOvercrowdingRejections, lnDBBufferPoolAllocated=lnDBBufferPoolAllocated, lnComm=lnComm, lnAlarmServerSNMPEvent=lnAlarmServerSNMPEvent, lnDriveFree=lnDriveFree, lnDominoCfgImageFormat=lnDominoCfgImageFormat, lnSignalAutodiscoveryStart=lnSignalAutodiscoveryStart, lnRepClusterSuccessful=lnRepClusterSuccessful, lnRepClusterSecondsOnQueueMax=lnRepClusterSecondsOnQueueMax, lnDominoCfgSSLKeyFile=lnDominoCfgSSLKeyFile, lnRepFailed=lnRepFailed, lnDomino=lnDomino, lnOpenRequest=lnOpenRequest, lnMTATable=lnMTATable, lnFatalEventTrap=lnFatalEventTrap, lnWebProcUrlReq=lnWebProcUrlReq, lnObjectEntry=lnObjectEntry, lnSignal=lnSignal, lnMailTransferFailures=lnMailTransferFailures, lnSNAVersion=lnSNAVersion, lnDominoCmdInfoUnknown=lnDominoCmdInfoUnknown, lnMaximumMailDeliverTime=lnMaximumMailDeliverTime, lnInterceptor=lnInterceptor, lnLastTrapSeq=lnLastTrapSeq, lnDominoCmdInfoOpenIcon=lnDominoCmdInfoOpenIcon, lnAgentMgr=lnAgentMgr, lnEventStatus=lnEventStatus, lnRepDocsAdded=lnRepDocsAdded, lnWarning1EventTrap=lnWarning1EventTrap, lnTaskIndex=lnTaskIndex, lnClusterOpenReqLoadBalanced=lnClusterOpenReqLoadBalanced, lnNBPacketSize=lnNBPacketSize, lnServerSystemVersion=lnServerSystemVersion, lnClusterAvailIndex=lnClusterAvailIndex, lnDominoCmdInfoCreateDocument=lnDominoCmdInfoCreateDocument, lnDominoStartTime=lnDominoStartTime, lnMTAEntry=lnMTAEntry, lnXPCEntry=lnXPCEntry, lnTrapDisplayWarningAlarm=lnTrapDisplayWarningAlarm, lnWebTimeDuration=lnWebTimeDuration, mapInfo=mapInfo, lnRepClusterSecondsOnQueueAvg=lnRepClusterSecondsOnQueueAvg, lnClusterTransIntInSec=lnClusterTransIntInSec, lnMTAWaitingRecp=lnMTAWaitingRecp, lnDominoCfgTimeoutCGI=lnDominoCfgTimeoutCGI, lnSNATPType=lnSNATPType, lnWebProcVpoolCurText=lnWebProcVpoolCurText, lnMinimumMailDeliverTime=lnMinimumMailDeliverTime, lnServerDroppedSessions=lnServerDroppedSessions, lnWebProcVpoolMaxElement=lnWebProcVpoolMaxElement, lnDominoBuildNumber=lnDominoBuildNumber, lnWebActiveProcesses=lnWebActiveProcesses, lnMTATotalRouted=lnMTATotalRouted, lnHourlyUnsuccessfulRuns=lnHourlyUnsuccessfulRuns, lnX25FrameSize=lnX25FrameSize, lnAllStatsTable=lnAllStatsTable, lnX25WindowSize=lnX25WindowSize, lnServerNotesVersion=lnServerNotesVersion, lnNetPortName=lnNetPortName, lnDominoCmdInfoReadForm=lnDominoCmdInfoReadForm, lnDiskRemote=lnDiskRemote, lnX25LocalDTEAddress=lnX25LocalDTEAddress, lnWebProcEntry=lnWebProcEntry, lnDBNIFPoolUsed=lnDBNIFPoolUsed, lnAlarmSeverityStr=lnAlarmSeverityStr, lnDailyAccessDenials=lnDailyAccessDenials, lnWebUrlSucceeded=lnWebUrlSucceeded, lnNetPortSessEstIn=lnNetPortSessEstIn, lnDominoReqPerMinPeak=lnDominoReqPerMinPeak, lnDBNIFPoolSize=lnDBNIFPoolSize, lnNBUnitNumber=lnNBUnitNumber, lnAlarmMessageExt=lnAlarmMessageExt, lnNetPortSessLimitMin=lnNetPortSessLimitMin, lnServerCPUType=lnServerCPUType, lnDominoCfgLogTimeStamp=lnDominoCfgLogTimeStamp, lnDominoCfgDirectoryIcons=lnDominoCfgDirectoryIcons, lnNetbiosTable=lnNetbiosTable, lnNBMaxSessions=lnNBMaxSessions, lnMTAIndex=lnMTAIndex, lnClusterOpenReqClustBusy=lnClusterOpenReqClustBusy, lnClusterTransIntAvgTime=lnClusterTransIntAvgTime, lnClusterLoadBalByPathSucc=lnClusterLoadBalByPathSucc, lnSNALocalLU=lnSNALocalLU, lnWebProcVpoolMaxText=lnWebProcVpoolMaxText, lnSignalNewServerType=lnSignalNewServerType, lnMemAvailability=lnMemAvailability, lnDominoCmdInfoOpenHelp=lnDominoCmdInfoOpenHelp, lnDominoCacheCommandHitRate=lnDominoCacheCommandHitRate, lnDominoCfgLogFilter=lnDominoCfgLogFilter, lnWebVpoolMaxText=lnWebVpoolMaxText, lnXPCCarrierSpeed=lnXPCCarrierSpeed, lnRepClusterDocsDeleted=lnRepClusterDocsDeleted, lnWebProcVpoolCurElement=lnWebProcVpoolCurElement, lnDailyUnsuccessfulRuns=lnDailyUnsuccessfulRuns, lnDominoCmdInfoOpenElement=lnDominoCmdInfoOpenElement, lnAlarmClearServers=lnAlarmClearServers, lnRepDocsUpdated=lnRepDocsUpdated, lnDominoCfgSSLPortNumber=lnDominoCfgSSLPortNumber, lnDominoReqPerDayPeak=lnDominoReqPerDayPeak, lnDominoCfgHostName=lnDominoCfgHostName, lnX25VCInUse=lnX25VCInUse, lnAlarm=lnAlarm, lnAlarmTypeStr=lnAlarmTypeStr, lnEvtWhen=lnEvtWhen, lnServerStats=lnServerStats, lnRecentTrapsEntry=lnRecentTrapsEntry, lnAlarmMessage=lnAlarmMessage, lnDBNIFPoolPeak=lnDBNIFPoolPeak, lnMemPhysicalRAM=lnMemPhysicalRAM, lnDominoRequestsTotal=lnDominoRequestsTotal, lnTrapSeq=lnTrapSeq, lnObjectSharedBy11=lnObjectSharedBy11, lnDominoCmdInfoOpenDatabase=lnDominoCmdInfoOpenDatabase, lnTaskName=lnTaskName, lnWebImageCacheHits=lnWebImageCacheHits, lnRepClusterDocsAdded=lnRepClusterDocsAdded, lnDBBufferControlPoolSize=lnDBBufferControlPoolSize, lnDominoCmdInfo=lnDominoCmdInfo, lnX25VCCfg=lnX25VCCfg, lnMTAName=lnMTAName, lnSystemRebootingTrap=lnSystemRebootingTrap, lnNBAvailCmdBlocks=lnNBAvailCmdBlocks, lnWebUrlFail=lnWebUrlFail, lnObjectSharedBy12=lnObjectSharedBy12, lnWebProcUrlFail=lnWebProcUrlFail, lnDominoThreadsPeakTotal=lnDominoThreadsPeakTotal, lnServerPulseRestoredTrap=lnServerPulseRestoredTrap, lnWebTimeCurrent=lnWebTimeCurrent, lnDominoCmdInfoEditDocument=lnDominoCmdInfoEditDocument, lnMTADeadMsgs=lnMTADeadMsgs, lnDominoCfgImageInterlaced=lnDominoCfgImageInterlaced, lnTransferredMail=lnTransferredMail, lnNBCollisionErrors=lnNBCollisionErrors, lnDBCacheHits=lnDBCacheHits, lnObjectSharedBy08=lnObjectSharedBy08, lnReplicaCluster=lnReplicaCluster, lnMainProxyAgentVersion=lnMainProxyAgentVersion, lnServerTblIndex=lnServerTblIndex, lnDominoCfgSSLStatus=lnDominoCfgSSLStatus, lnTaskType=lnTaskType, lnRepClusterFilesRemote=lnRepClusterFilesRemote, lnCalTotalAllApptsResources=lnCalTotalAllApptsResources, lnWebTimeStart=lnWebTimeStart, lnObjectSharedBy13=lnObjectSharedBy13, lnWeb=lnWeb, lnRecentTrapsTable=lnRecentTrapsTable, lnServerBusyTimeQueryReceivedCount=lnServerBusyTimeQueryReceivedCount, lnAlarmDate=lnAlarmDate, lnClusterTransNormValue=lnClusterTransNormValue, lnDominoCacheDatabaseHitRate=lnDominoCacheDatabaseHitRate, lnAppleTalkStatsLogged=lnAppleTalkStatsLogged, lnMemSwapSize=lnMemSwapSize, lnAlarmTaskStatusChange=lnAlarmTaskStatusChange, lnObjectSharedBy15=lnObjectSharedBy15, lnDBCacheMaxEntries=lnDBCacheMaxEntries, lnServerCoprocessor=lnServerCoprocessor, lnDominoReqPerHourPeakTime=lnDominoReqPerHourPeakTime, lnRepClusterFilesLocal=lnRepClusterFilesLocal, lnClusterLoadBalSucc=lnClusterLoadBalSucc, lnRepDocsDeleted=lnRepDocsDeleted, lnHourlyTriggeredRuns=lnHourlyTriggeredRuns, lnAlarmSeverity=lnAlarmSeverity, lnSignalWhatHasChanged=lnSignalWhatHasChanged, lnDominoCmdInfoSaveDocument=lnDominoCmdInfoSaveDocument)
mibBuilder.exportSymbols("NOTES-MIB", lnNetPortIndex=lnNetPortIndex, lnDominoCmdInfoNavigate=lnDominoCmdInfoNavigate, lnMTATransferredMsgs=lnMTATransferredMsgs, lnMemAllocTotal=lnMemAllocTotal, lnNetPortSessLimit=lnNetPortSessLimit, lnClusterProbeError=lnClusterProbeError, lnDiskFixed=lnDiskFixed, lnSignalServerConfigChg=lnSignalServerConfigChg, lnMTATransferFailures=lnMTATransferFailures, lnClusterMemberIndex=lnClusterMemberIndex, lnServerUsersPeakTime=lnServerUsersPeakTime, lnServerPoweredBy=lnServerPoweredBy, lnTaskTable=lnTaskTable, lnDBBufferControlPoolUsed=lnDBBufferControlPoolUsed, lnDominoCfgDirectoryHTML=lnDominoCfgDirectoryHTML, lnSNAPacingType=lnSNAPacingType, lnDominoReqPer5MinsTotal=lnDominoReqPer5MinsTotal, lnX25OverRuns=lnX25OverRuns, lnAlarmAutoDiscovery=lnAlarmAutoDiscovery, lnX25REJTran=lnX25REJTran, lnWebVpoolMaxElement=lnWebVpoolMaxElement, lnObjectSharedByGreater=lnObjectSharedByGreater, lnDominoCmdInfoSearchView=lnDominoCmdInfoSearchView, lnDriveIndex=lnDriveIndex, lnNetPortTable=lnNetPortTable, lnCluster=lnCluster, lnAlarmNVStatClear=lnAlarmNVStatClear, lnRepSuccessful=lnRepSuccessful, lnAverageMailSizeDelivered=lnAverageMailSizeDelivered, lnAverageMailDeliverTime=lnAverageMailDeliverTime, lnWebIdleProcesses=lnWebIdleProcesses, lnObjectSharedBy09=lnObjectSharedBy09, lnObject=lnObject, lnDominoCfgHomeURL=lnDominoCfgHomeURL, lnTrapDisplayIndeterminateAlarm=lnTrapDisplayIndeterminateAlarm, lnWebProcVpoolMaxUrl=lnWebProcVpoolMaxUrl, lnCollectorTimeElapsed=lnCollectorTimeElapsed, lnDominoCfgCacheDelete=lnDominoCfgCacheDelete, lnTrapDisplayClearedAlarm=lnTrapDisplayClearedAlarm, lnDBCacheInitialDbOpens=lnDBCacheInitialDbOpens, lnObjectSharedBy20=lnObjectSharedBy20, lnWebUrlRequested=lnWebUrlRequested, lnRepClusterWorkQueueDepthAvg=lnRepClusterWorkQueueDepthAvg)
