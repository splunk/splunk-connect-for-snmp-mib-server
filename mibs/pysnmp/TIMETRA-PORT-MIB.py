#
# PySNMP MIB module TIMETRA-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:09:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
AtmVpIdentifier, AtmTrafficDescrParamIndex = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmTrafficDescrParamIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, Counter32, iso, NotificationType, TimeTicks, Unsigned32, Integer32, Bits, Gauge32, ModuleIdentity, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "iso", "NotificationType", "TimeTicks", "Unsigned32", "Integer32", "Bits", "Gauge32", "ModuleIdentity", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TruthValue, TimeInterval, DateAndTime, MacAddress, TextualConvention, DisplayString, RowPointer, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeInterval", "DateAndTime", "MacAddress", "TextualConvention", "DisplayString", "RowPointer", "TimeStamp", "RowStatus")
tmnxHwNotification, TmnxAlarmState, tmnxChassisNotifyChassisId, tmnxChassisIndex, tmnxHwObjs, tmnxHwConformance, TmnxMDAChanType, TmnxPortAdminStatus, tmnxMdaNotifyType = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxHwNotification", "TmnxAlarmState", "tmnxChassisNotifyChassisId", "tmnxChassisIndex", "tmnxHwObjs", "tmnxHwConformance", "TmnxMDAChanType", "TmnxPortAdminStatus", "tmnxMdaNotifyType")
timetraSRMIBModules, = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
TmnxSubIdentStringOrEmpty, TmnxOperState, TBurstPercentOrDefaultOverride, TBurstSizeBytesOverride, TmnxSubMgtOrgStrOrZero, TNamedItem, TFCName, TExpSecondaryShaperPIRRate, TmnxEgrPolicerStatMode, TPortSchedulerCIR, TmnxEnabledDisabled, TExpSecondaryShaperClassRate, TMcFrQoSProfileId, TItemLongDescription, TPortSchedulerPIR, THsmdaWeightOverride, TClassBurstLimit, TMlpppQoSProfileId, TNamedItemOrEmpty, TQueueId, TAdaptationRuleOverride, TCIRPercentOverride, TPIRRateOverride, TSecondaryShaper10GPIRRate, TBurstSizeOverride, TmnxPortID, TItemDescription, TPIRPercentOverride, TEgressQueueId, TIngressQueueId, TmnxActionType, TmnxSubMgtIntDestId, TEgrPolicerId, TCIRRateOverride, TPortSchedulerPIRRate, THsmdaPIRMRateOverride, TRateType = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxSubIdentStringOrEmpty", "TmnxOperState", "TBurstPercentOrDefaultOverride", "TBurstSizeBytesOverride", "TmnxSubMgtOrgStrOrZero", "TNamedItem", "TFCName", "TExpSecondaryShaperPIRRate", "TmnxEgrPolicerStatMode", "TPortSchedulerCIR", "TmnxEnabledDisabled", "TExpSecondaryShaperClassRate", "TMcFrQoSProfileId", "TItemLongDescription", "TPortSchedulerPIR", "THsmdaWeightOverride", "TClassBurstLimit", "TMlpppQoSProfileId", "TNamedItemOrEmpty", "TQueueId", "TAdaptationRuleOverride", "TCIRPercentOverride", "TPIRRateOverride", "TSecondaryShaper10GPIRRate", "TBurstSizeOverride", "TmnxPortID", "TItemDescription", "TPIRPercentOverride", "TEgressQueueId", "TIngressQueueId", "TmnxActionType", "TmnxSubMgtIntDestId", "TEgrPolicerId", "TCIRRateOverride", "TPortSchedulerPIRRate", "THsmdaPIRMRateOverride", "TRateType")
tmnxPortMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 25))
tmnxPortMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-03-01 00:00',))
if mibBuilder.loadTexts: tmnxPortMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: tmnxPortMIBModule.setOrganization('Alcatel-Lucent')
tmnxPortObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4))
tmnxPortNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7))
tmnxFRObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9))
tmnxQosAppObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10))
tmnxATMObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11))
tmnxPortStatsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12))
tmnxPortNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2))
tmnxPortNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0))
tmnxPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2))
tmnxPortPlcyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67))
class TmnxPortOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5))

class TmnxPortEtherReportValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notUsed", 0), ("signalFailure", 1), ("remoteFault", 2), ("localFault", 3), ("noFrameLock", 4), ("highBer", 5), ("noBlockLock", 6), ("noAmLock", 7), ("duplicateLane", 8))

class TmnxPortEtherReportStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("signalFailure", 1), ("remoteFault", 2), ("localFault", 3), ("noFrameLock", 4), ("highBer", 5), ("noBlockLock", 6), ("noAmLock", 7), ("duplicateLane", 8))

class TmnxPortEtherCrcMonReportValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noFault", 0), ("sdThresholdExceeded", 1), ("sfThresholdExceeded", 2))

class TmnxPortEtherCrcMonReportStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("sdThresholdExceeded", 0), ("sfThresholdExceeded", 1))

class TmnxPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("none", 1), ("faste", 2), ("gige", 3), ("xgige", 4), ("sonet", 5), ("vport", 6), ("unused", 7), ("xcme", 8), ("tdm", 9), ("xlgige", 10), ("cgige", 11), ("vsme", 12))

class TmnxPortConnectorType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxPortState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("ghost", 2), ("linkDown", 3), ("linkUp", 4), ("up", 5), ("diagnose", 6))

class TmnxPortType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxPortEncapType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("mplsEncap", 3), ("bcpNullEncap", 4), ("bcpDot1qEncap", 5), ("ipcpEncap", 6), ("frEncap", 7), ("pppAutoEncap", 8), ("atmEncap", 9), ("qinqEncap", 10), ("wanMirrorEncap", 11), ("ciscoHDLCEncap", 12), ("cemEncap", 13))

class TmnxDs0ChannelList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 4)

class TmnxBundleID(TextualConvention, Unsigned32):
    status = 'current'

class TmnxDSXBertPattern(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("ones", 1), ("zeros", 2), ("alternating", 3), ("twoexp3", 4), ("twoexp9", 5), ("twoexp15", 6), ("twoexp20", 7), ("twoexp11", 8), ("twoexp20q", 9), ("twoexp23", 10))

class TmnxDSXBertOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("active", 1), ("idle", 2), ("noMdaResources", 3))

class TmnxDSXIdleCycleFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("flags", 1), ("ones", 2))

class TmnxDSXIdleFillType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("allOnes", 1), ("userDefinedPattern", 2))

class TmnxDSXLoopback(TextualConvention, Integer32):
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("remote", 3))

class TmnxDSXReportAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5), ("berSd", 6), ("berSf", 7))

class TmnxDSXClockSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("loopTimed", 1), ("nodeTimed", 2), ("adaptive", 3), ("differential", 4))

class TmnxDSXClockSyncState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("normal", 1), ("holdOver", 2), ("freeRun", 3), ("phaseTracking", 4), ("freqTracking", 5))

class TmnxDS1Loopback(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("fdlAnsi", 3), ("fdlBellcore", 4), ("payloadAnsi", 5), ("inbandAnsi", 6), ("inbandBellcore", 7))

class TmnxDS3Loopback(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("remote", 3))

class TmnxImaGrpState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("invalid", 0), ("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class TmnxImaGrpFailState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class TmnxImaLnkState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class TmnxImaLnkFailState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class TmnxImaTestState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("operating", 2), ("failed", 3))

class TmnxImaGrpClockModes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class TmnxImaGrpVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("oneDotZero", 1), ("oneDotOne", 2))

class TmnxMcMlpppClassIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 15)

class TmnxMlpppEndpointIdClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("nullClass", 0), ("localAddress", 1), ("ipAddress", 2), ("ieee802dot1GlobalMacAddress", 3), ("pppMagicNumberBlock", 4), ("publicSwitchedNetworkDirNumber", 5))

class TmnxMlfrLinkDownReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7, 8, 9))
    namedValues = NamedValues(("none", 0), ("outOfService", 1), ("redDiffDelayExceeded", 2), ("loopback", 3), ("negotiating", 4), ("noRxHelloAck", 5), ("rxCause", 7), ("txCause", 8), ("linkReset", 9))

class TmnxWaveTrackerAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("encFail", 0), ("encDegr", 1), ("pwrFail", 2), ("pwrDegr", 3), ("pwrHigh", 4), ("pwrLow", 5))

class TmnxOpticalAmpAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("ampIld", 0), ("ampTmp", 1), ("ampMth", 2), ("ampMtl", 3), ("ampLos", 4), ("ampLop", 5), ("ampCom", 6))

class TmnxOpticalTdcmAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("tdcmNotRdy", 0), ("tdcmMth", 1), ("tdcmMtl", 2), ("tdcmUnLck", 3), ("tdcmTmpLim", 4), ("tdcmEprInv", 5), ("tdcmCom", 6))

class TmnxOpticalTdcmCtrlMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("automatic", 0), ("manual", 1))

class TmnxOpticalAmpCtrlState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("lossOfsignal", 1), ("adjusting", 2), ("paused", 3), ("converged", 4))

class TmnxOpticalTdcmCtrlState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("disabled", 1), ("waiting", 2), ("sweeping", 3), ("zoneIn", 4), ("fineTuning", 5), ("converged", 6))

class TmnxOpticalDwdmChannel(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(17, 61), ValueRangeConstraint(170, 610), )
class TmnxDigitalDiagnosticFailureBits(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("unknown", 0), ("temperature-low-warning", 1), ("temperature-low-alarm", 2), ("temperature-high-warning", 3), ("temperature-high-alarm", 4), ("supplyVoltage-low-warning", 5), ("supplyVoltage-low-alarm", 6), ("supplyVoltage-high-warning", 7), ("supplyVoltage-high-alarm", 8), ("txBiasCurrent-low-warning", 9), ("txBiasCurrent-low-alarm", 10), ("txBiasCurrent-high-warning", 11), ("txBiasCurrent-high-alarm", 12), ("txOutputPower-low-warning", 13), ("txOutputPower-low-alarm", 14), ("txOutputPower-high-warning", 15), ("txOutputPower-high-alarm", 16), ("rxOpticalPower-low-warning", 17), ("rxOpticalPower-low-alarm", 18), ("rxOpticalPower-high-warning", 19), ("rxOpticalPower-high-alarm", 20), ("aux1-low-warning", 21), ("aux1-low-alarm", 22), ("aux1-high-warning", 23), ("aux1-high-alarm", 24), ("aux2-low-warning", 25), ("aux2-low-alarm", 26), ("aux2-high-warning", 27), ("aux2-high-alarm", 28))

tmnxPortTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTableLastChange.setStatus('current')
tmnxPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2), )
if mibBuilder.loadTexts: tmnxPortTable.setStatus('current')
tmnxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortEntry.setStatus('current')
tmnxPortPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: tmnxPortPortID.setStatus('current')
tmnxPortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastChangeTime.setStatus('current')
tmnxPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 3), TmnxPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortType.setStatus('current')
tmnxPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 4), TmnxPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortClass.setStatus('current')
tmnxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 5), TItemLongDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDescription.setStatus('current')
tmnxPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortName.setStatus('current')
tmnxPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAlias.setStatus('current')
tmnxPortUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortUserAssignedMac.setStatus('current')
tmnxPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMacAddress.setStatus('current')
tmnxPortHwMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortHwMacAddress.setStatus('current')
tmnxPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("access", 1), ("network", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMode.setStatus('current')
tmnxPortEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 12), TmnxPortEncapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEncapType.setStatus('current')
tmnxPortLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLagId.setStatus('current')
tmnxPortHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeUp.setStatus('current')
tmnxPortHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeDown.setStatus('current')
tmnxPortUpProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 16), Bits().clone(namedValues=NamedValues(("portUpIpv4", 0), ("portUpMpls", 1), ("portUpBcp", 2), ("portUpIso", 3), ("portUpFr", 4), ("portUpAtm", 5), ("portUpChdlc", 6), ("portUpIma", 7), ("portUpIpv6", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortUpProtocols.setStatus('current')
tmnxPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 17), TmnxPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectorType.setStatus('current')
tmnxPortTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 0), ("gbic", 1), ("moduleConnectorSolderedToMotherboard", 2), ("sfpTransceiver", 3), ("xbiTransceiver", 4), ("xenpakTransceiver", 5), ("xfpTransceiver", 6), ("xffTransceiver", 7), ("xfpeTransceiver", 8), ("xpakTransceiver", 9), ("x2Transceiver", 10), ("dwdmSfpTransceiver", 11), ("qsfpTransceiver", 12), ("qsfpPlusTransceiver", 13), ("cfpTransceiver", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverType.setStatus('current')
tmnxPortTransceiverCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 26), Bits().clone(namedValues=NamedValues(("unknown", 0), ("oc48-longreach", 1), ("oc48-intermediatereach", 2), ("oc48-shortreach", 3), ("oc12-singlemodelongreach", 4), ("oc12-singlemodeinterreach", 5), ("oc12-multimodeshortreach", 6), ("oc3-singlemodelongreach", 7), ("oc3-singlemodeinterreach", 8), ("oc3-multi-modeshortreach", 9), ("gige-1000base-t", 10), ("gige-1000base-cx", 11), ("gige-1000base-lx", 12), ("gige-1000base-sx", 13), ("faste-100base-mm-fx", 14), ("faste-100base-sm-fx", 15), ("xgige-10gbase-sr", 16), ("xgige-10gbase-lr", 17), ("xgige-10gbase-er", 18), ("xgige-10gbase-sw", 19), ("xgige-10gbase-lw", 20), ("xgige-10gbase-ew", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverCode.setStatus('obsolete')
tmnxPortTransceiverLaserWaveLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverLaserWaveLen.setStatus('current')
tmnxPortTransceiverDiagCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverDiagCapable.setStatus('current')
tmnxPortTransceiverModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 29), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverModelNumber.setStatus('current')
tmnxPortSFPConnectorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 128))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("fiberChannel-Style1-CopperConnector", 2), ("fiberChannel-Style2-CopperConnector", 3), ("bncortnc", 4), ("fiberChannelCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcII", 32), ("copperPigtail", 33), ("copperGigE", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPConnectorCode.setStatus('current')
tmnxPortSFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorOUI.setStatus('current')
tmnxPortSFPVendorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorManufactureDate.setStatus('current')
tmnxPortSFPMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("ethernet", 1), ("sonetsdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPMedia.setStatus('current')
tmnxPortSFPEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPEquipped.setStatus('current')
tmnxPortEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEquipped.setStatus('current')
tmnxPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLinkStatus.setStatus('current')
tmnxPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 37), TmnxPortAdminStatus().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAdminStatus.setStatus('current')
tmnxPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 38), TmnxPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOperStatus.setStatus('current')
tmnxPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 39), TmnxPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortState.setStatus('current')
tmnxPortPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 40), TmnxPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPrevState.setStatus('current')
tmnxPortNumAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNumAlarms.setStatus('current')
tmnxPortAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 42), TmnxAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAlarmState.setStatus('current')
tmnxPortLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 43), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastAlarmEvent.setStatus('current')
tmnxPortClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 44), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortClearAlarms.setStatus('current')
tmnxPortSFPVendorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 45), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorSerialNum.setStatus('current')
tmnxPortSFPVendorPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 46), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorPartNum.setStatus('current')
tmnxPortLastStateChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 48), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastStateChanged.setStatus('current')
tmnxPortNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNumChannels.setStatus('current')
tmnxPortNetworkEgrQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 50), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortNetworkEgrQueues.setStatus('current')
tmnxPortBundleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortBundleNumber.setStatus('current')
tmnxPortIsLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIsLeaf.setStatus('current')
tmnxPortChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 53), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortChanType.setStatus('current')
tmnxPortParentPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 54), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortParentPortID.setStatus('current')
tmnxPortOpticalCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOpticalCompliance.setStatus('current')
tmnxPortLoadBalanceAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("default", 1), ("includeL4", 2), ("excludeL4", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoadBalanceAlgorithm.setStatus('current')
tmnxPortEgrPortSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 57), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrPortSchedPlcy.setStatus('current')
tmnxPortLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 58), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastClearedTime.setStatus('current')
tmnxPortEgrHsmdaSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 59), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrHsmdaSchedPlcy.setStatus('current')
tmnxPortIngNamedPoolPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 60), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortIngNamedPoolPlcy.setStatus('current')
tmnxPortEgrNamedPoolPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 61), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrNamedPoolPlcy.setStatus('current')
tmnxPortIngPoolPercentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortIngPoolPercentRate.setStatus('current')
tmnxPortEgrPoolPercentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrPoolPercentRate.setStatus('current')
tmnxPortDDMEventSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 64), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDDMEventSuppression.setStatus('current')
tmnxPortSFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-equipped", 0), ("operational", 1), ("read-error", 2), ("data-corrupt", 3), ("ddm-corrupt", 4), ("unsupported", 5))).clone('not-equipped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPStatus.setStatus('current')
tmnxPortReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 66), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1), ("lagMemberPortStandby", 2), ("ethCfmFault", 3), ("opticalTuning", 4), ("channelOutOfRange", 5), ("channelNotConfigured", 6), ("crcError", 7), ("internalMacTxError", 8), ("noServicePort", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortReasonDownFlags.setStatus('current')
tmnxPortSSMRxQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("st3", 6), ("smc", 7), ("st4", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("sec", 13), ("dnu", 14), ("inv", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("failed", 19))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSSMRxQualityLevel.setStatus('current')
tmnxPortDwdmLaserChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 68), TmnxOpticalDwdmChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDwdmLaserChannel.setStatus('current')
tmnxPortOtuCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 69), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOtuCapable.setStatus('current')
tmnxPortWaveTrackerCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 70), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortWaveTrackerCapable.setStatus('current')
tmnxPortHybridIngAccessWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridIngAccessWeight.setStatus('current')
tmnxPortHybridIngNetworkWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 72), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridIngNetworkWeight.setStatus('current')
tmnxPortHybridEgrAccessWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 73), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridEgrAccessWeight.setStatus('current')
tmnxPortHybridEgrNetworkWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridEgrNetworkWeight.setStatus('current')
tmnxPortDwdmRxDtvAdjustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 75), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDwdmRxDtvAdjustEnable.setStatus('current')
tmnxPortDwdmRxDtvDacPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 76), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(5000)).setUnits('Hundredths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortDwdmRxDtvDacPercent.setStatus('current')
tmnxPortInterfaceGroupHandlerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortInterfaceGroupHandlerIdx.setStatus('current')
tmnxPortHoldTimeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("centiseconds", 1))).clone('seconds')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeUnits.setStatus('current')
tmnxPortLinkLengthInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLinkLengthInfo.setStatus('current')
tmnxPortSFPNumLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPNumLanes.setStatus('current')
tmnxPortPhysStateChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPhysStateChangeCount.setStatus('current')
tmnxPortTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3), )
if mibBuilder.loadTexts: tmnxPortTestTable.setStatus('current')
tmnxPortTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1), )
tmnxPortEntry.registerAugmentions(("TIMETRA-PORT-MIB", "tmnxPortTestEntry"))
tmnxPortTestEntry.setIndexNames(*tmnxPortEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxPortTestEntry.setStatus('current')
tmnxPortTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInTest", 1), ("inTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestState.setStatus('current')
tmnxPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("loopback1", 1), ("loopback2", 2), ("loopback3", 3), ("singalInsertion", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestMode.setStatus('current')
tmnxPortTestParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestParameter.setStatus('current')
tmnxPortTestLastResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("success", 1), ("failure", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestLastResult.setStatus('current')
tmnxPortTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestStartTime.setStatus('current')
tmnxPortTestEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestEndTime.setStatus('current')
tmnxPortTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestDuration.setStatus('current')
tmnxPortTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("startTest", 2), ("stopTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestAction.setStatus('current')
tmnxPortEtherTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4), )
if mibBuilder.loadTexts: tmnxPortEtherTable.setStatus('current')
tmnxPortEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortEtherEntry.setStatus('current')
tmnxPortEtherMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9212), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherMTU.setStatus('current')
tmnxPortEtherDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("fullDuplex", 1), ("halfDuplex", 2))).clone('fullDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDuplex.setStatus('current')
tmnxPortEtherSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("speed10", 1), ("speed100", 2), ("speed1000", 3), ("speed10000", 4), ("speed40000", 5), ("speed100000", 6), ("speed25000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSpeed.setStatus('current')
tmnxPortEtherAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("true", 1), ("false", 2), ("limited", 3))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherAutoNegotiate.setStatus('current')
tmnxPortEtherOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherOperDuplex.setStatus('current')
tmnxPortEtherOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 6), Unsigned32()).setUnits('mega-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherOperSpeed.setStatus('current')
tmnxPortEtherAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherAcctPolicyId.setStatus('current')
tmnxPortEtherCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCollectStats.setStatus('current')
tmnxPortEtherMDIMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherMDIMDIX.setStatus('current')
tmnxPortEtherXGigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("lan", 1), ("wan", 2))).clone('lan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherXGigMode.setStatus('current')
tmnxPortEtherEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100000000), )).clone(-1)).setUnits('kilo-bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherEgressRate.setStatus('current')
tmnxPortEtherDot1qEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDot1qEtype.setStatus('current')
tmnxPortEtherQinqEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherQinqEtype.setStatus('current')
tmnxPortEtherIngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100000), )).clone(-1)).setUnits('mega-bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherIngressRate.setStatus('current')
tmnxPortEtherReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 15), TmnxPortEtherReportStatus().clone(namedValues=NamedValues(("remoteFault", 2), ("localFault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherReportAlarm.setStatus('current')
tmnxPortEtherReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 16), TmnxPortEtherReportStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherReportAlarmStatus.setStatus('current')
tmnxPortEtherPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherPkts1519toMax.setStatus('current')
tmnxPortEtherHCOverPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherHCOverPkts1519toMax.setStatus('current')
tmnxPortEtherHCPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherHCPkts1519toMax.setStatus('current')
tmnxPortEtherLacpTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherLacpTunnel.setStatus('current')
tmnxPortEtherDownWhenLoopedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedEnabled.setStatus('current')
tmnxPortEtherDownWhenLoopedKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedKeepAlive.setStatus('current')
tmnxPortEtherDownWhenLoopedRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 160), )).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedRetry.setStatus('current')
tmnxPortEtherDownWhenLoopedState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoopDetected", 1), ("loopDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedState.setStatus('current')
tmnxPortEtherPBBEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(35047)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherPBBEtype.setStatus('current')
tmnxPortEtherReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 26), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1), ("lagMemberPortStandby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherReasonDownFlags.setStatus('obsolete')
tmnxPortEtherSingleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSingleFiber.setStatus('current')
tmnxPortEtherSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSSM.setStatus('current')
tmnxPortEtherDWLUseBroadcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDWLUseBroadcastAddr.setStatus('current')
tmnxPortEtherSSMCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sonet", 2), ("sdh", 3))).clone('sdh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSSMCodeType.setStatus('current')
tmnxPortEtherSSMTxDus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSSMTxDus.setStatus('current')
tmnxPortEtherSSMRxEsmc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherSSMRxEsmc.setStatus('current')
tmnxPortEtherSSMTxQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("reserved0", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("reserved6", 6), ("smc", 7), ("reserved8", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("reserved13", 13), ("dnu", 14), ("reserved15", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("reserved19", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherSSMTxQualityLevel.setStatus('current')
tmnxPortEtherCrcMonSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSdThreshold.setStatus('current')
tmnxPortEtherCrcMonSdTMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSdTMultiplier.setStatus('current')
tmnxPortEtherCrcMonSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSfThreshold.setStatus('current')
tmnxPortEtherCrcMonSfTMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSfTMultiplier.setStatus('current')
tmnxPortEtherCrcMonWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonWindowSize.setStatus('current')
tmnxPortEtherCrcAlarmReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 39), TmnxPortEtherCrcMonReportStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherCrcAlarmReason.setStatus('current')
tmnxPortEtherDownOnInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 40), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownOnInternalError.setStatus('current')
tmnxPortEtherMinFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 41), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), )).clone(64)).setUnits('Bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherMinFrameLength.setStatus('current')
tmnxSonetTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5), )
if mibBuilder.loadTexts: tmnxSonetTable.setStatus('current')
tmnxSonetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetEntry.setStatus('current')
tmnxSonetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oc3", 1), ("oc12", 2), ("oc48", 3), ("oc192", 4), ("oc768", 5), ("oc1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSpeed.setStatus('current')
tmnxSonetClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTimed", 1), ("nodeTimed", 2))).clone('loopTimed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetClockSource.setStatus('current')
tmnxSonetFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sonet", 2), ("sdh", 3))).clone('sonet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetFraming.setStatus('current')
tmnxSonetReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 4), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12))).clone(namedValues=NamedValues(("loc", 1), ("lrdi", 3), ("lb2erSf", 7), ("slof", 8), ("slos", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetReportAlarm.setStatus('current')
tmnxSonetBerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetBerSdThreshold.setStatus('current')
tmnxSonetBerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 6)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetBerSfThreshold.setStatus('current')
tmnxSonetAps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetAps.setStatus('obsolete')
tmnxSonetApsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 8), TmnxPortAdminStatus().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAdminStatus.setStatus('obsolete')
tmnxSonetApsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 9), TmnxPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsOperStatus.setStatus('obsolete')
tmnxSonetApsAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAuthKey.setStatus('obsolete')
tmnxSonetApsNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsNeighborAddr.setStatus('obsolete')
tmnxSonetApsAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 12), TimeInterval().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseInterval.setStatus('obsolete')
tmnxSonetApsAdvertiseTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 13), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseTimeLeft.setStatus('obsolete')
tmnxSonetApsHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 14), TimeInterval().clone(3000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsHoldTime.setStatus('obsolete')
tmnxSonetApsHoldTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 15), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsHoldTimeLeft.setStatus('obsolete')
tmnxSonetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("line", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetLoopback.setStatus('current')
tmnxSonetReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 17), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetReportAlarmStatus.setStatus('current')
tmnxSonetSectionTraceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("increment-z0", 1), ("byte", 2), ("string", 3))).clone('byte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSectionTraceMode.setStatus('current')
tmnxSonetJ0String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="01")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetJ0String.setStatus('current')
tmnxSonetMonS1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(204)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonS1Byte.setStatus('current')
tmnxSonetMonJ0String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonJ0String.setStatus('current')
tmnxSonetMonK1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonK1Byte.setStatus('current')
tmnxSonetMonK2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonK2Byte.setStatus('current')
tmnxSonetSingleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSingleFiber.setStatus('current')
tmnxSonetHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetHoldTimeUp.setStatus('current')
tmnxSonetHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetHoldTimeDown.setStatus('current')
tmnxSonetSuppressLoOrderAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSuppressLoOrderAlarm.setStatus('current')
tmnxSonetTxDus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetTxDus.setStatus('current')
tmnxSonetTxS1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetTxS1Byte.setStatus('current')
tmnxSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6), )
if mibBuilder.loadTexts: tmnxSonetPathTable.setStatus('current')
tmnxSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetPathEntry.setStatus('current')
tmnxSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathRowStatus.setStatus('current')
tmnxSonetPathLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathLastChangeTime.setStatus('current')
tmnxSonetPathMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathMTU.setStatus('current')
tmnxSonetPathScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathScramble.setStatus('current')
tmnxSonetPathC2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathC2Byte.setStatus('current')
tmnxSonetPathJ1String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathJ1String.setStatus('current')
tmnxSonetPathCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathCRC.setStatus('current')
tmnxSonetPathOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathOperMTU.setStatus('current')
tmnxSonetPathOperMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathOperMRU.setStatus('current')
tmnxSonetPathReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 10), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8))).clone(namedValues=NamedValues(("plop", 2), ("pplm", 5), ("puneq", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathReportAlarm.setStatus('current')
tmnxSonetPathAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathAcctPolicyId.setStatus('current')
tmnxSonetPathCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathCollectStats.setStatus('current')
tmnxSonetPathReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 13), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathReportAlarmStatus.setStatus('current')
tmnxSonetPathMonC2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathMonC2Byte.setStatus('current')
tmnxSonetPathMonJ1String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathMonJ1String.setStatus('current')
tmnxSonetPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2), ("vtg", 3), ("tug-2", 4), ("tug-3", 5))).clone('ds3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathType.setStatus('obsolete')
tmnxSonetPathChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 17), TmnxMDAChanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathChildType.setStatus('current')
tmnxPortTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7), )
if mibBuilder.loadTexts: tmnxPortTypeTable.setStatus('current')
tmnxPortTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxPortTypeIndex"))
if mibBuilder.loadTexts: tmnxPortTypeEntry.setStatus('current')
tmnxPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 1), TmnxPortType())
if mibBuilder.loadTexts: tmnxPortTypeIndex.setStatus('current')
tmnxPortTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeName.setStatus('current')
tmnxPortTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeDescription.setStatus('current')
tmnxPortTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeStatus.setStatus('current')
tmnxPortConnectTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8), )
if mibBuilder.loadTexts: tmnxPortConnectTypeTable.setStatus('current')
tmnxPortConnectTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxPortConnectTypeIndex"))
if mibBuilder.loadTexts: tmnxPortConnectTypeEntry.setStatus('current')
tmnxPortConnectTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 1), TmnxPortConnectorType())
if mibBuilder.loadTexts: tmnxPortConnectTypeIndex.setStatus('current')
tmnxPortConnectTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeName.setStatus('current')
tmnxPortConnectTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeDescription.setStatus('current')
tmnxPortConnectTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeStatus.setStatus('current')
tmnxPortFCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9), )
if mibBuilder.loadTexts: tmnxPortFCStatsTable.setStatus('obsolete')
tmnxPortFCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortFCStatsIndex"))
if mibBuilder.loadTexts: tmnxPortFCStatsEntry.setStatus('obsolete')
tmnxPortFCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 1), TFCName())
if mibBuilder.loadTexts: tmnxPortFCStatsIndex.setStatus('obsolete')
tmnxPortFCStatsIngFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfOcts.setStatus('obsolete')
tmnxPortFCStatsIngFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfOcts.setStatus('obsolete')
tmnxPortFCStatsIngDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsIngDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfOcts.setStatus('obsolete')
tmnxPortFCStatsIngDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfPkts.setStatus('obsolete')
tmnxPortFCStatsEgrDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfOcts.setStatus('obsolete')
tmnxPortFCStatsEgrDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfOcts.setStatus('obsolete')
tmnxDS3Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10), )
if mibBuilder.loadTexts: tmnxDS3Table.setStatus('current')
tmnxDS3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS3Entry.setStatus('current')
tmnxDS3Buildout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3Buildout.setStatus('current')
tmnxDS3LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3LastChangeTime.setStatus('current')
tmnxDS3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2))).clone('ds3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3Type.setStatus('current')
tmnxDS3ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11), )
if mibBuilder.loadTexts: tmnxDS3ChannelTable.setStatus('current')
tmnxDS3ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS3ChannelEntry.setStatus('current')
tmnxDS3ChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelRowStatus.setStatus('current')
tmnxDS3ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelType.setStatus('current')
tmnxDS3ChannelFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("g751", 3), ("g832", 4), ("e3-unframed", 5), ("ds3-unframed", 6))).clone('cbit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelFraming.setStatus('current')
tmnxDS3ChannelClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 4), TmnxDSXClockSource().clone('loopTimed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelClockSource.setStatus('current')
tmnxDS3ChannelChannelized = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ds1", 2), ("e1", 3), ("j1", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelChannelized.setStatus('current')
tmnxDS3ChannelSubrateCSUMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUsed", 0), ("digital-link", 1))).clone('notUsed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelSubrateCSUMode.setStatus('current')
tmnxDS3ChannelSubrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelSubrate.setStatus('current')
tmnxDS3ChannelIdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 8), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelIdleCycleFlags.setStatus('current')
tmnxDS3ChannelLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 9), TmnxDS3Loopback().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelLoopback.setStatus('current')
tmnxDS3ChannelBitErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBitErrorInsertionRate.setStatus('current')
tmnxDS3ChannelBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 11), TmnxDSXBertPattern().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTPattern.setStatus('current')
tmnxDS3ChannelBERTDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTDuration.setStatus('current')
tmnxDS3ChannelMDLEicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLEicString.setStatus('current')
tmnxDS3ChannelMDLLicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLLicString.setStatus('current')
tmnxDS3ChannelMDLFicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLFicString.setStatus('current')
tmnxDS3ChannelMDLUnitString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLUnitString.setStatus('current')
tmnxDS3ChannelMDLPfiString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPfiString.setStatus('current')
tmnxDS3ChannelMDLPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPortString.setStatus('current')
tmnxDS3ChannelMDLGenString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLGenString.setStatus('current')
tmnxDS3ChannelMDLMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 20), Bits().clone(namedValues=NamedValues(("none", 0), ("ds3Path", 1), ("idleSignal", 2), ("testSignal", 3))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMessageType.setStatus('current')
tmnxDS3ChannelFEACLoopRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelFEACLoopRespond.setStatus('current')
tmnxDS3ChannelCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelCRC.setStatus('current')
tmnxDS3ChannelMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMTU.setStatus('current')
tmnxDS3ChannelOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 24), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelOperMTU.setStatus('current')
tmnxDS3ChannelReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 25), TmnxDSXReportAlarm().clone(namedValues=NamedValues(("ais", 1), ("los", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarm.setStatus('current')
tmnxDS3ChannelReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 26), TmnxDSXReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarmStatus.setStatus('current')
tmnxDS3ChannelLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelLastChangeTime.setStatus('current')
tmnxDS3ChannelInFEACLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelInFEACLoop.setStatus('current')
tmnxDS3ChannelMDLMonPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonPortString.setStatus('current')
tmnxDS3ChannelMDLMonGenString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonGenString.setStatus('current')
tmnxDS3ChannelBERTOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 31), TmnxDSXBertOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTOperStatus.setStatus('current')
tmnxDS3ChannelBERTSynched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 32), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTSynched.setStatus('current')
tmnxDS3ChannelBERTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTErrors.setStatus('current')
tmnxDS3ChannelBERTTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTTotalBits.setStatus('current')
tmnxDS3ChannelScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 35), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelScramble.setStatus('current')
tmnxDS3ChannelAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelAcctPolicyId.setStatus('current')
tmnxDS3ChannelCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 37), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelCollectStats.setStatus('current')
tmnxDS3ChannelClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 38), TmnxDSXClockSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelClockSyncState.setStatus('current')
tmnxDS3ChannelClockMasterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 39), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelClockMasterPortId.setStatus('current')
tmnxDS1Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12), )
if mibBuilder.loadTexts: tmnxDS1Table.setStatus('current')
tmnxDS1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS1Entry.setStatus('current')
tmnxDS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1RowStatus.setStatus('current')
tmnxDS1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("j1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1Type.setStatus('current')
tmnxDS1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2), ("g704-no-crc", 3), ("g704", 4), ("e1-unframed", 5), ("ds1-unframed", 6))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1Framing.setStatus('current')
tmnxDS1IdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 4), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1IdleCycleFlags.setStatus('obsolete')
tmnxDS1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 5), TmnxDS1Loopback().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1Loopback.setStatus('current')
tmnxDS1InvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1InvertData.setStatus('current')
tmnxDS1BitErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BitErrorInsertionRate.setStatus('current')
tmnxDS1BERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 8), TmnxDSXBertPattern().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BERTPattern.setStatus('current')
tmnxDS1BERTDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BERTDuration.setStatus('current')
tmnxDS1ReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 10), TmnxDSXReportAlarm().clone(namedValues=NamedValues(("ais", 1), ("los", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1ReportAlarm.setStatus('current')
tmnxDS1ReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 11), TmnxDSXReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ReportAlarmStatus.setStatus('current')
tmnxDS1LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1LastChangeTime.setStatus('current')
tmnxDS1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 13), TmnxDSXClockSource().clone('loopTimed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1ClockSource.setStatus('current')
tmnxDS1BERTOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 14), TmnxDSXBertOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTOperStatus.setStatus('current')
tmnxDS1BERTSynched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTSynched.setStatus('current')
tmnxDS1BERTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTErrors.setStatus('current')
tmnxDS1BERTTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTTotalBits.setStatus('current')
tmnxDS1RemoteLoopRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1RemoteLoopRespond.setStatus('current')
tmnxDS1InRemoteLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1InRemoteLoop.setStatus('current')
tmnxDS1InsertSingleBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 20), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1InsertSingleBitError.setStatus('current')
tmnxDS1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cas", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1SignalMode.setStatus('current')
tmnxDS1ClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 22), TmnxDSXClockSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ClockSyncState.setStatus('current')
tmnxDS1ClockMasterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 23), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ClockMasterPortId.setStatus('current')
tmnxDS1BerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), )).clone(5)).setUnits('error bits in million bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BerSdThreshold.setStatus('current')
tmnxDS1BerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), )).clone(50)).setUnits('error bits in million bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BerSfThreshold.setStatus('current')
tmnxDS1NationalUseBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 26), Bits().clone(namedValues=NamedValues(("sa4", 0), ("sa5", 1), ("sa6", 2), ("sa7", 3), ("sa8", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1NationalUseBits.setStatus('current')
tmnxDS0ChanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13), )
if mibBuilder.loadTexts: tmnxDS0ChanGroupTable.setStatus('current')
tmnxDS0ChanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS0ChanGroupEntry.setStatus('current')
tmnxDS0ChanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupRowStatus.setStatus('current')
tmnxDS0ChanGroupTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 2), TmnxDs0ChannelList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupTimeSlots.setStatus('current')
tmnxDS0ChanGroupSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-56", 1), ("speed-64", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSpeed.setStatus('current')
tmnxDS0ChanGroupCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupCRC.setStatus('current')
tmnxDS0ChanGroupMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupMTU.setStatus('current')
tmnxDS0ChanGroupOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 6), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS0ChanGroupOperMTU.setStatus('current')
tmnxDS0ChanGroupLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS0ChanGroupLastChangeTime.setStatus('current')
tmnxDS0ChanGroupIdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 8), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupIdleCycleFlags.setStatus('current')
tmnxDS0ChanGroupScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupScramble.setStatus('current')
tmnxDS0ChanGroupAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupAcctPolicyId.setStatus('current')
tmnxDS0ChanGroupCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupCollectStats.setStatus('current')
tmnxDS0ChanGroupPayloadFillType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 12), TmnxDSXIdleFillType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadFillType.setStatus('current')
tmnxDS0ChanGroupPayloadPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadPattern.setStatus('current')
tmnxDS0ChanGroupSignalFillType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 14), TmnxDSXIdleFillType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalFillType.setStatus('current')
tmnxDS0ChanGroupSignalPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalPattern.setStatus('current')
tmnxDS0ChanGroupBerSfLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupBerSfLinkDown.setStatus('current')
tmnxBundleTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14), )
if mibBuilder.loadTexts: tmnxBundleTable.setStatus('current')
tmnxBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleEntry.setStatus('current')
tmnxBundleBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 1), TmnxBundleID())
if mibBuilder.loadTexts: tmnxBundleBundleID.setStatus('current')
tmnxBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRowStatus.setStatus('current')
tmnxBundleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mlppp", 1), ("mlfr", 2), ("imagrp", 3))).clone('mlppp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleType.setStatus('current')
tmnxBundleMinimumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMinimumLinks.setStatus('current')
tmnxBundleNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleNumLinks.setStatus('current')
tmnxBundleNumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleNumActiveLinks.setStatus('current')
tmnxBundleMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1500, 9206), )).clone(1524)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMRRU.setStatus('current')
tmnxBundleOperMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleOperMRRU.setStatus('current')
tmnxBundlePeerMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundlePeerMRRU.setStatus('current')
tmnxBundleOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 10), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleOperMTU.setStatus('current')
tmnxBundleRedDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25), ValueRangeConstraint(0, 50), ))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRedDiffDelay.setStatus('current')
tmnxBundleRedDiffDelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("down", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRedDiffDelayAction.setStatus('current')
tmnxBundleYellowDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleYellowDiffDelay.setStatus('current')
tmnxBundleShortSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleShortSequence.setStatus('current')
tmnxBundleLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleLastChangeTime.setStatus('current')
tmnxBundleFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 512), )).clone(128)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleFragmentThreshold.setStatus('current')
tmnxBundleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleUpTime.setStatus('current')
tmnxBundleInputDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleInputDiscards.setStatus('current')
tmnxBundlePrimaryMemberPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 19), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundlePrimaryMemberPortID.setStatus('current')
tmnxBundleLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleLFI.setStatus('current')
tmnxBundleProtectedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("working", 1), ("protection", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleProtectedType.setStatus('current')
tmnxBundleParentBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 22), TmnxBundleID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleParentBundle.setStatus('current')
tmnxBundleMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15), )
if mibBuilder.loadTexts: tmnxBundleMemberTable.setStatus('current')
tmnxBundleMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberEntry.setStatus('current')
tmnxBundleMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMemberRowStatus.setStatus('current')
tmnxBundleMemberActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberActive.setStatus('current')
tmnxBundleMemberDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("outOfService", 1), ("redDiffDelayExceeded", 2), ("mismatchEndPtDiscriminator", 3), ("peerNotBundleMember", 4), ("underNegotiation", 5), ("peerInvalidMlHdrFmt", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberDownReason.setStatus('current')
tmnxBundleMemberUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberUpTime.setStatus('current')
tmnxPortToChannelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16), )
if mibBuilder.loadTexts: tmnxPortToChannelTable.setStatus('current')
tmnxPortToChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxChannelIdxString"))
if mibBuilder.loadTexts: tmnxPortToChannelEntry.setStatus('current')
tmnxChannelIdxString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1, 1), DisplayString())
if mibBuilder.loadTexts: tmnxChannelIdxString.setStatus('current')
tmnxChannelPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChannelPortID.setStatus('current')
tmnxPortIngrMdaQosStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17), )
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatTable.setStatus('current')
tmnxPortIngrMdaQosStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatEntry.setStatus('current')
tmnxPortIngrMdaQos00StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos00StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos01StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos01StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos02StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos02StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos03StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos03StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos04StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos04StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos05StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos05StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos06StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos06StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos07StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos07StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos08StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos08StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos09StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos09StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos10StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos10StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos11StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos11StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos12StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos12StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos13StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos13StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos14StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos14StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropOcts.setStatus('current')
tmnxPortIngrMdaQos15StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropPkts.setStatus('current')
tmnxPortIngrMdaQos15StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropOcts.setStatus('current')
tmnxSonetGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18), )
if mibBuilder.loadTexts: tmnxSonetGroupTable.setStatus('current')
tmnxSonetGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetGroupEntry.setStatus('current')
tmnxSonetGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 1), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupType.setStatus('current')
tmnxSonetGroupParentPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupParentPortID.setStatus('current')
tmnxSonetGroupChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 3), TmnxMDAChanType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetGroupChildType.setStatus('current')
tmnxSonetGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupName.setStatus('current')
tmnxCiscoHDLCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20), )
if mibBuilder.loadTexts: tmnxCiscoHDLCTable.setStatus('current')
tmnxCiscoHDLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxCiscoHDLCEntry.setStatus('current')
tmnxCiscoHDLCKeepAliveInt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCKeepAliveInt.setStatus('current')
tmnxCiscoHDLCUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCUpCount.setStatus('current')
tmnxCiscoHDLCDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCDownCount.setStatus('current')
tmnxCiscoHDLCOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 4), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCOperState.setStatus('current')
tmnxCiscoHDLCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3), )
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsTable.setStatus('current')
tmnxCiscoHDLCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1), )
tmnxCiscoHDLCEntry.registerAugmentions(("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatsEntry"))
tmnxCiscoHDLCStatsEntry.setIndexNames(*tmnxCiscoHDLCEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsEntry.setStatus('current')
tmnxCiscoHDLCDiscardStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatInPkts.setStatus('current')
tmnxCiscoHDLCDiscardStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatOutPkts.setStatus('current')
tmnxCiscoHDLCStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInPkts.setStatus('current')
tmnxCiscoHDLCStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutPkts.setStatus('current')
tmnxCiscoHDLCStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInOctets.setStatus('current')
tmnxCiscoHDLCStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutOctets.setStatus('current')
tmnxFRDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1), )
if mibBuilder.loadTexts: tmnxFRDlcmiTable.setStatus('current')
tmnxFRDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFRDlcmiEntry.setStatus('current')
tmnxFRDlcmiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("bidir", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiMode.setStatus('current')
tmnxFRDlcmiN392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiN392Dce.setStatus('current')
tmnxFRDlcmiN393Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiN393Dce.setStatus('current')
tmnxFRDlcmiT392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiT392Dce.setStatus('current')
tmnxFRDlcmiTxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusEnqMsgs.setStatus('current')
tmnxFRDlcmiRxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusEnqMsgs.setStatus('current')
tmnxFRDlcmiStatusEnqMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiStatusEnqMsgTimeouts.setStatus('current')
tmnxFRDlcmiTxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusMsgs.setStatus('current')
tmnxFRDlcmiRxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusMsgs.setStatus('current')
tmnxFRDlcmiStatusMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiStatusMsgTimeouts.setStatus('current')
tmnxFRDlcmiDiscardedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiDiscardedMsgs.setStatus('current')
tmnxFRDlcmiInvRxSeqNumMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiInvRxSeqNumMsgs.setStatus('current')
tmnxQosPoolAppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2), )
if mibBuilder.loadTexts: tmnxQosPoolAppTable.setStatus('current')
tmnxQosPoolAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxObjectType"), (0, "TIMETRA-PORT-MIB", "tmnxObjectId"), (0, "TIMETRA-PORT-MIB", "tmnxObjectAppType"), (0, "TIMETRA-PORT-MIB", "tmnxObjectAppPool"))
if mibBuilder.loadTexts: tmnxQosPoolAppEntry.setStatus('current')
tmnxObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 51))).clone(namedValues=NamedValues(("mda", 1), ("port", 2), ("unused", 3), ("bundle", 4), ("mpointQueues", 51))))
if mibBuilder.loadTexts: tmnxObjectType.setStatus('current')
tmnxObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: tmnxObjectId.setStatus('current')
tmnxObjectAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 51))).clone(namedValues=NamedValues(("accessIngress", 1), ("accessEgress", 2), ("networkIngress", 3), ("networkEgress", 4), ("system", 51))))
if mibBuilder.loadTexts: tmnxObjectAppType.setStatus('current')
tmnxObjectAppPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 4), TNamedItem())
if mibBuilder.loadTexts: tmnxObjectAppPool.setStatus('current')
tmnxObjectAppPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppPoolRowStatus.setStatus('current')
tmnxObjectAppResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppResvCbs.setStatus('current')
tmnxObjectAppSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 7), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppSlopePolicy.setStatus('current')
tmnxObjectAppPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppPoolSize.setStatus('current')
tmnxObjectAppResvCbsAmbrAlrmStep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppResvCbsAmbrAlrmStep.setStatus('current')
tmnxObjectAppResvCbsAmbrAlrmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppResvCbsAmbrAlrmMax.setStatus('current')
tmnxObjectAppAmbrAlrmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppAmbrAlrmThresh.setStatus('current')
tmnxObjectAppRedAlrmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppRedAlrmThresh.setStatus('current')
tmnxATMIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1), )
if mibBuilder.loadTexts: tmnxATMIntfTable.setStatus('current')
tmnxATMIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxATMIntfEntry.setStatus('current')
tmnxATMIntfCellFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2))).clone('uni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfCellFormat.setStatus('current')
tmnxATMIntfMinVpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfMinVpValue.setStatus('current')
tmnxATMIntfMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("plcp", 2))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfMapping.setStatus('current')
tmnxATMIntfCustomBufferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfCustomBufferMode.setStatus('current')
tmnxATMIntfBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfBufferPool.setStatus('current')
tmnxATMIntfVcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(190, 117000)).clone(190)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfVcThreshold.setStatus('current')
tmnxPortATMVpShaperTblLastCh = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortATMVpShaperTblLastCh.setStatus('current')
tmnxPortATMVpShaperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3), )
if mibBuilder.loadTexts: tmnxPortATMVpShaperTable.setStatus('current')
tmnxPortATMVpShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortATMVpShaperVpi"))
if mibBuilder.loadTexts: tmnxPortATMVpShaperEntry.setStatus('current')
tmnxPortATMVpShaperVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: tmnxPortATMVpShaperVpi.setStatus('current')
tmnxPortATMVpShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortATMVpShaperRowStatus.setStatus('current')
tmnxPortATMVpShaperLastMgmtCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortATMVpShaperLastMgmtCh.setStatus('current')
tmnxPortATMVpShaperEgrAtd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 4), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortATMVpShaperEgrAtd.setStatus('current')
tmnxPortNetIngressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1), )
if mibBuilder.loadTexts: tmnxPortNetIngressStatsTable.setStatus('current')
tmnxPortNetIngressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortNetIngressQueueIndex"))
if mibBuilder.loadTexts: tmnxPortNetIngressStatsEntry.setStatus('current')
tmnxPortNetIngressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxPortNetIngressQueueIndex.setStatus('current')
tmnxPortNetIngressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfPkts.setStatus('current')
tmnxPortNetIngressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfPkts.setStatus('current')
tmnxPortNetIngressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfOcts.setStatus('current')
tmnxPortNetIngressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfOcts.setStatus('current')
tmnxPortNetIngressDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfPkts.setStatus('current')
tmnxPortNetIngressDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfPkts.setStatus('current')
tmnxPortNetIngressDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfOcts.setStatus('current')
tmnxPortNetIngressDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfOcts.setStatus('current')
tmnxPortNetEgressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2), )
if mibBuilder.loadTexts: tmnxPortNetEgressStatsTable.setStatus('current')
tmnxPortNetEgressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortNetEgressQueueIndex"))
if mibBuilder.loadTexts: tmnxPortNetEgressStatsEntry.setStatus('current')
tmnxPortNetEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortNetEgressQueueIndex.setStatus('current')
tmnxPortNetEgressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfPkts.setStatus('current')
tmnxPortNetEgressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfPkts.setStatus('current')
tmnxPortNetEgressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfOcts.setStatus('current')
tmnxPortNetEgressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfOcts.setStatus('current')
tmnxPortNetEgressDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfPkts.setStatus('current')
tmnxPortNetEgressDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfPkts.setStatus('current')
tmnxPortNetEgressDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfOcts.setStatus('current')
tmnxPortNetEgressDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfOcts.setStatus('current')
tmnxMcMlpppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4), )
if mibBuilder.loadTexts: tmnxMcMlpppStatsTable.setStatus('current')
tmnxMcMlpppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxMcMlpppClassIndex"))
if mibBuilder.loadTexts: tmnxMcMlpppStatsEntry.setStatus('current')
tmnxMcMlpppClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 1), TmnxMcMlpppClassIndex())
if mibBuilder.loadTexts: tmnxMcMlpppClassIndex.setStatus('current')
tmnxMcMlpppStatsIngressOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressOct.setStatus('current')
tmnxMcMlpppStatsIngressPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressPkt.setStatus('current')
tmnxMcMlpppStatsIngressErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressErrPkt.setStatus('current')
tmnxMcMlpppStatsEgressOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressOct.setStatus('current')
tmnxMcMlpppStatsEgressPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressPkt.setStatus('current')
tmnxMcMlpppStatsEgressErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressErrPkt.setStatus('current')
tmnxBundleImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21), )
if mibBuilder.loadTexts: tmnxBundleImaGrpTable.setStatus('current')
tmnxBundleImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleImaGrpEntry.setStatus('current')
tmnxBundleImaGrpLnkActTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkActTimer.setStatus('current')
tmnxBundleImaGrpLnkDeactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkDeactTimer.setStatus('current')
tmnxBundleImaGrpSymmetryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("symmetric", 1))).clone('symmetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpSymmetryMode.setStatus('current')
tmnxBundleImaGrpTxId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxId.setStatus('current')
tmnxBundleImaGrpRxId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxId.setStatus('current')
tmnxBundleImaGrpTxRefLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxRefLnk.setStatus('current')
tmnxBundleImaGrpRxRefLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 7), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxRefLnk.setStatus('current')
tmnxBundleImaGrpSmNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 8), TmnxImaGrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmNeState.setStatus('current')
tmnxBundleImaGrpSmFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 9), TmnxImaGrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFeState.setStatus('current')
tmnxBundleImaGrpSmFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 10), TmnxImaGrpFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFailState.setStatus('current')
tmnxBundleImaGrpSmDownSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmDownSecs.setStatus('current')
tmnxBundleImaGrpSmOperSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmOperSecs.setStatus('current')
tmnxBundleImaGrpAvailTxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailTxCR.setStatus('current')
tmnxBundleImaGrpAvailRxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailRxCR.setStatus('current')
tmnxBundleImaGrpNeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpNeFails.setStatus('current')
tmnxBundleImaGrpFeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpFeFails.setStatus('current')
tmnxBundleImaGrpTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxIcpCells.setStatus('current')
tmnxBundleImaGrpRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxIcpCells.setStatus('current')
tmnxBundleImaGrpErrorIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpErrorIcpCells.setStatus('current')
tmnxBundleImaGrpLostRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpLostRxIcpCells.setStatus('current')
tmnxBundleImaGrpTxOamLablVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxOamLablVal.setStatus('current')
tmnxBundleImaGrpRxOamLablVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxOamLablVal.setStatus('current')
tmnxBundleImaGrpAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 23), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpAlphaValue.setStatus('current')
tmnxBundleImaGrpBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 24), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpBetaValue.setStatus('current')
tmnxBundleImaGrpGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 25), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpGammaValue.setStatus('current')
tmnxBundleImaGrpNeClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 26), TmnxImaGrpClockModes().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpNeClockMode.setStatus('current')
tmnxBundleImaGrpFeClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 27), TmnxImaGrpClockModes().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpFeClockMode.setStatus('current')
tmnxBundleImaGrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 28), TmnxImaGrpVersion().clone('oneDotOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpVersion.setStatus('current')
tmnxBundleImaGrpMaxConfBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpMaxConfBw.setStatus('current')
tmnxBundleImaGrpTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 30), TmnxImaTestState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestState.setStatus('current')
tmnxBundleImaGrpTestMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 31), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestMember.setStatus('current')
tmnxBundleImaGrpTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestPattern.setStatus('current')
tmnxBundleImaGrpDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 33), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpDiffDelayMaxObs.setStatus('current')
tmnxBundleImaGrpLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 34), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpLeastDelayLink.setStatus('current')
tmnxBundleMemberImaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22), )
if mibBuilder.loadTexts: tmnxBundleMemberImaTable.setStatus('current')
tmnxBundleMemberImaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberImaEntry.setStatus('current')
tmnxBundleMemberImaNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 1), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxState.setStatus('current')
tmnxBundleMemberImaNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 2), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxState.setStatus('current')
tmnxBundleMemberImaFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 3), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxState.setStatus('current')
tmnxBundleMemberImaFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 4), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxState.setStatus('current')
tmnxBundleMemberImaNeRxFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 5), TmnxImaLnkFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxFailState.setStatus('current')
tmnxBundleMemberImaFeRxFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 6), TmnxImaLnkFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxFailState.setStatus('current')
tmnxBundleMemberImaTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaTxLid.setStatus('current')
tmnxBundleMemberImaRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxLid.setStatus('current')
tmnxBundleMemberImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaViolations.setStatus('current')
tmnxBundleMemberImaNeSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeSevErrSecs.setStatus('current')
tmnxBundleMemberImaFeSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeSevErrSecs.setStatus('current')
tmnxBundleMemberImaNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeUnavailSecs.setStatus('current')
tmnxBundleMemberImaFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeUnavailSecs.setStatus('current')
tmnxBundleMemberImaNeTxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxUnuseSecs.setStatus('current')
tmnxBundleMemberImaNeRxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxUnuseSecs.setStatus('current')
tmnxBundleMemberImaFeTxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxUnuseSecs.setStatus('current')
tmnxBundleMemberImaFeRxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxUnuseSecs.setStatus('current')
tmnxBundleMemberImaNeTxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxNumFails.setStatus('current')
tmnxBundleMemberImaNeRxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxNumFails.setStatus('current')
tmnxBundleMemberImaFeTxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxNumFails.setStatus('current')
tmnxBundleMemberImaFeRxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxNumFails.setStatus('current')
tmnxBundleMemberImaTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaTxIcpCells.setStatus('current')
tmnxBundleMemberImaRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxIcpCells.setStatus('current')
tmnxBundleMemberImaErrorIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaErrorIcpCells.setStatus('current')
tmnxBundleMemberImaLstRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaLstRxIcpCells.setStatus('current')
tmnxBundleMemberImaOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaOifAnomalies.setStatus('current')
tmnxBundleMemberImaRxTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 27), TmnxImaTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestState.setStatus('current')
tmnxBundleMemberImaRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestPattern.setStatus('current')
tmnxBundleMemberImaRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 29), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRelDelay.setStatus('current')
tmnxPortScalarObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19))
tmnxL4LoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxL4LoadBalancing.setStatus('current')
tmnxLsrIpLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("label-only", 1), ("label-ip", 2), ("ip-only", 3))).clone('label-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLsrIpLoadBalancing.setStatus('current')
tmnxIpLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("systemIp", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxIpLoadBalancing.setStatus('current')
tmnxDS1PortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23), )
if mibBuilder.loadTexts: tmnxDS1PortTable.setStatus('current')
tmnxDS1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS1PortEntry.setStatus('current')
tmnxDS1PortBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortBuildout.setStatus('current')
tmnxDS1PortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1PortLastChangeTime.setStatus('current')
tmnxDS1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("j1", 3))).clone('ds1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortType.setStatus('current')
tmnxDS1PortLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 1), ("length0To133", 2), ("length134To266", 3), ("length267To399", 4), ("length400To533", 5), ("length534To655", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortLineLength.setStatus('current')
tmnxDS1PortLbo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lboNotApplicable", 1), ("lbo0dB", 2), ("lboNeg7p5dB", 3), ("lboNeg15p0dB", 4), ("lboNeg22p5dB", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortLbo.setStatus('current')
tmnxDS1PortDbGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 6), Integer32()).setUnits('db').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1PortDbGain.setStatus('current')
tmnxPortSchedOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24), )
if mibBuilder.loadTexts: tmnxPortSchedOverrideTable.setStatus('current')
tmnxPortSchedOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortSchedOverrideEntry.setStatus('current')
tmnxPortSchedOverrideRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideRowStatus.setStatus('current')
tmnxPortSchedOverrideSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSchedOverrideSchedName.setStatus('current')
tmnxPortSchedOverrideLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLastChanged.setStatus('current')
tmnxPortSchedOverrideMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 4), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideMaxRate.setStatus('current')
tmnxPortSchedOverrideLvl1PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 5), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1PIR.setStatus('current')
tmnxPortSchedOverrideLvl1CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 6), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1CIR.setStatus('current')
tmnxPortSchedOverrideLvl2PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 7), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2PIR.setStatus('current')
tmnxPortSchedOverrideLvl2CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 8), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2CIR.setStatus('current')
tmnxPortSchedOverrideLvl3PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 9), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3PIR.setStatus('current')
tmnxPortSchedOverrideLvl3CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 10), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3CIR.setStatus('current')
tmnxPortSchedOverrideLvl4PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 11), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4PIR.setStatus('current')
tmnxPortSchedOverrideLvl4CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 12), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4CIR.setStatus('current')
tmnxPortSchedOverrideLvl5PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 13), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5PIR.setStatus('current')
tmnxPortSchedOverrideLvl5CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 14), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5CIR.setStatus('current')
tmnxPortSchedOverrideLvl6PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 15), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6PIR.setStatus('current')
tmnxPortSchedOverrideLvl6CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 16), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6CIR.setStatus('current')
tmnxPortSchedOverrideLvl7PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 17), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7PIR.setStatus('current')
tmnxPortSchedOverrideLvl7CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 18), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7CIR.setStatus('current')
tmnxPortSchedOverrideLvl8PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 19), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8PIR.setStatus('current')
tmnxPortSchedOverrideLvl8CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 20), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8CIR.setStatus('current')
tmnxPortSchedOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 21), Bits().clone(namedValues=NamedValues(("maxRate", 0), ("lvl1PIR", 1), ("lvl1CIR", 2), ("lvl2PIR", 3), ("lvl2CIR", 4), ("lvl3PIR", 5), ("lvl3CIR", 6), ("lvl4PIR", 7), ("lvl4CIR", 8), ("lvl5PIR", 9), ("lvl5CIR", 10), ("lvl6PIR", 11), ("lvl6CIR", 12), ("lvl7PIR", 13), ("lvl7CIR", 14), ("lvl8PIR", 15), ("lvl8CIR", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideFlags.setStatus('current')
tmnxBPGrpAssocTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25), )
if mibBuilder.loadTexts: tmnxBPGrpAssocTable.setStatus('current')
tmnxBPGrpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBPGrpAssocEntry.setStatus('current')
tmnxBPGrpAssocWorkingBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 1), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocWorkingBundleID.setStatus('current')
tmnxBPGrpAssocProtectBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 2), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocProtectBundleID.setStatus('current')
tmnxBPGrpAssocActiveBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 3), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocActiveBundleID.setStatus('current')
tmnxBundleMlpppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26), )
if mibBuilder.loadTexts: tmnxBundleMlpppTable.setStatus('current')
tmnxBundleMlpppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleMlpppEntry.setStatus('current')
tmnxBundleMlpppEndpointID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointID.setStatus('current')
tmnxBundleMlpppEndpointIDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 2), TmnxMlpppEndpointIdClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointIDClass.setStatus('current')
tmnxBundleMlpppClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppClassCount.setStatus('current')
tmnxBundleMlpppIngQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 4), TMlpppQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppIngQoSProfId.setStatus('current')
tmnxBundleMlpppEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 5), TMlpppQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEgrQoSProfId.setStatus('current')
tmnxBundleMlpppMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 6), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppMagicNumber.setStatus('current')
tmnxBundleMlpppStatelessApsSwo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppStatelessApsSwo.setStatus('current')
tmnxHsmdaPortSchOvrTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrTblLastChngd.setStatus('current')
tmnxHsmdaPortSchOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28), )
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrTable.setStatus('current')
tmnxHsmdaPortSchOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrEntry.setStatus('current')
tmnxHsmdaPortSchOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrRowStatus.setStatus('current')
tmnxHsmdaPortSchOvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrLastChanged.setStatus('current')
tmnxHsmdaPortSchOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 3), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrMaxRate.setStatus('current')
tmnxHsmdaPortSchOvrGrp1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 4), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrGrp1Rate.setStatus('current')
tmnxHsmdaPortSchOvrGrp2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 5), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrGrp2Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 6), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass1Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass1WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 7), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass1WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 8), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass2Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass2WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 9), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass2WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 10), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass3Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass3WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 11), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass3WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 12), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass4Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass4WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 13), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass4WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 14), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass5Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass5WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 15), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass5WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 16), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass6Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass6WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 17), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass6WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 18), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass7Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass7WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 19), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass7WtInGp.setStatus('current')
tmnxHsmdaPortSchOvrClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 20), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass8Rate.setStatus('current')
tmnxHsmdaPortSchOvrClass8WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 21), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass8WtInGp.setStatus('current')
tmnxPortEgrShaperTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrShaperTblLastChanged.setStatus('obsolete')
tmnxPortEgrShaperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30), )
if mibBuilder.loadTexts: tmnxPortEgrShaperTable.setStatus('obsolete')
tmnxPortEgrShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrShaperName"))
if mibBuilder.loadTexts: tmnxPortEgrShaperEntry.setStatus('obsolete')
tmnxPortEgrShaperName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxPortEgrShaperName.setStatus('obsolete')
tmnxPortEgrShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrShaperRowStatus.setStatus('obsolete')
tmnxPortEgrShaperLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrShaperLastChanged.setStatus('obsolete')
tmnxPortEgrShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 4), TSecondaryShaper10GPIRRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrShaperRate.setStatus('obsolete')
tmnxDigitalDiagMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31), )
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorTable.setStatus('current')
tmnxDigitalDiagMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorEntry.setStatus('current')
tmnxDDMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTemperature.setStatus('current')
tmnxDDMTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempLowWarning.setStatus('current')
tmnxDDMTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempLowAlarm.setStatus('current')
tmnxDDMTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempHiWarning.setStatus('current')
tmnxDDMTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempHiAlarm.setStatus('current')
tmnxDDMSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltage.setStatus('current')
tmnxDDMSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowWarning.setStatus('current')
tmnxDDMSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowAlarm.setStatus('current')
tmnxDDMSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiWarning.setStatus('current')
tmnxDDMSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiAlarm.setStatus('current')
tmnxDDMTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrent.setStatus('current')
tmnxDDMTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowWarning.setStatus('current')
tmnxDDMTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowAlarm.setStatus('current')
tmnxDDMTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiWarning.setStatus('current')
tmnxDDMTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiAlarm.setStatus('current')
tmnxDDMTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPower.setStatus('current')
tmnxDDMTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowWarning.setStatus('current')
tmnxDDMTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowAlarm.setStatus('current')
tmnxDDMTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiWarning.setStatus('current')
tmnxDDMTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiAlarm.setStatus('current')
tmnxDDMRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPower.setStatus('current')
tmnxDDMRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowWarning.setStatus('current')
tmnxDDMRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowAlarm.setStatus('current')
tmnxDDMRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiWarning.setStatus('current')
tmnxDDMRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiAlarm.setStatus('current')
tmnxDDMRxOpticalPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oma", 0), ("average", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerType.setStatus('current')
tmnxDDMAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1.setStatus('current')
tmnxDDMAux1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1LowWarning.setStatus('current')
tmnxDDMAux1LowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1LowAlarm.setStatus('current')
tmnxDDMAux1HiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1HiWarning.setStatus('current')
tmnxDDMAux1HiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1HiAlarm.setStatus('current')
tmnxDDMAux1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("adp-bias-voltage", 1), ("reserved-2", 2), ("tec-current", 3), ("laser-temp", 4), ("laser-wavelength", 5), ("voltage-50", 6), ("voltage-33", 7), ("voltage-18", 8), ("voltage-52", 9), ("current-50", 10), ("reserved-11", 11), ("reserved-12", 12), ("current-33", 13), ("current-18", 14), ("current-52", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1Type.setStatus('current')
tmnxDDMAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2.setStatus('current')
tmnxDDMAux2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2LowWarning.setStatus('current')
tmnxDDMAux2LowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2LowAlarm.setStatus('current')
tmnxDDMAux2HiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2HiWarning.setStatus('current')
tmnxDDMAux2HiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2HiAlarm.setStatus('current')
tmnxDDMAux2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("adp-bias-voltage", 1), ("reserved-2", 2), ("tec-current", 3), ("laser-temp", 4), ("laser-wavelength", 5), ("voltage-50", 6), ("voltage-33", 7), ("voltage-18", 8), ("voltage-52", 9), ("current-50", 10), ("reserved-11", 11), ("reserved-12", 12), ("current-33", 13), ("current-18", 14), ("current-52", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2Type.setStatus('current')
tmnxDDMFailedThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 39), TmnxDigitalDiagnosticFailureBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMFailedThresholds.setStatus('current')
tmnxDDMExternallyCalibrated = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExternallyCalibrated.setStatus('current')
tmnxDDMExtCalRxPower4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower4.setStatus('current')
tmnxDDMExtCalRxPower3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower3.setStatus('current')
tmnxDDMExtCalRxPower2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower2.setStatus('current')
tmnxDDMExtCalRxPower1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower1.setStatus('current')
tmnxDDMExtCalRxPower0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower0.setStatus('current')
tmnxDDMExtCalTxLaserBiasSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasSlope.setStatus('current')
tmnxDDMExtCalTxLaserBiasOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasOffset.setStatus('current')
tmnxDDMExtCalTxPowerSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerSlope.setStatus('current')
tmnxDDMExtCalTxPowerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerOffset.setStatus('current')
tmnxDDMExtCalTemperatureSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureSlope.setStatus('current')
tmnxDDMExtCalTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureOffset.setStatus('current')
tmnxDDMExtCalVoltageSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageSlope.setStatus('current')
tmnxDDMExtCalVoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageOffset.setStatus('current')
tPortAccIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQGrpTableLastChgd.setStatus('current')
tPortAccIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33), )
if mibBuilder.loadTexts: tPortAccIngQGrpTable.setStatus('current')
tPortAccIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"))
if mibBuilder.loadTexts: tPortAccIngQGrpEntry.setStatus('current')
tPortAccIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccIngQGrpName.setStatus('current')
tPortAccIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpRowStatus.setStatus('current')
tPortAccIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQGrpLastChgd.setStatus('current')
tPortAccIngQGrpSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpSchedPol.setStatus('current')
tPortAccIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpAcctgPolId.setStatus('current')
tPortAccIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpCollectStats.setStatus('current')
tPortAccIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpDescr.setStatus('current')
tPortAccIngQOverTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 34), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQOverTableLastChgd.setStatus('current')
tPortAccIngQOverTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35), )
if mibBuilder.loadTexts: tPortAccIngQOverTable.setStatus('current')
tPortAccIngQOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQOverQueue"))
if mibBuilder.loadTexts: tPortAccIngQOverEntry.setStatus('current')
tPortAccIngQOverQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tPortAccIngQOverQueue.setStatus('current')
tPortAccIngQOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverRowStatus.setStatus('current')
tPortAccIngQOverLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQOverLastChanged.setStatus('current')
tPortAccIngQOverCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 4), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverCBS.setStatus('current')
tPortAccIngQOverMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 5), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverMBS.setStatus('obsolete')
tPortAccIngQOverHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 6), TBurstPercentOrDefaultOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverHiPrioOnly.setStatus('current')
tPortAccIngQOverAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 7), TPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverAdminPIR.setStatus('current')
tPortAccIngQOverAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 8), TCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverAdminCIR.setStatus('current')
tPortAccIngQOverPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 9), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverPIRAdaptation.setStatus('current')
tPortAccIngQOverCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 10), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverCIRAdaptation.setStatus('current')
tPortAccIngQOverMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 11), TBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverMBSBytes.setStatus('current')
tPortAccEgrQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 36), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpTableLastChgd.setStatus('current')
tPortAccEgrQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37), )
if mibBuilder.loadTexts: tPortAccEgrQGrpTable.setStatus('current')
tPortAccEgrQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"))
if mibBuilder.loadTexts: tPortAccEgrQGrpEntry.setStatus('current')
tPortAccEgrQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccEgrQGrpName.setStatus('current')
tPortAccEgrQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpRowStatus.setStatus('current')
tPortAccEgrQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpLastChgd.setStatus('current')
tPortAccEgrQGrpSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpSchedPol.setStatus('current')
tPortAccEgrQGrpAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpAggRateLimit.setStatus('current')
tPortAccEgrQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpAcctgPolId.setStatus('current')
tPortAccEgrQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpCollectStats.setStatus('current')
tPortAccEgrQGrpFrameBaseActg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpFrameBaseActg.setStatus('current')
tPortAccEgrQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 9), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpDescr.setStatus('current')
tPortAccEgrQOverTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 38), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQOverTableLastChgd.setStatus('current')
tPortAccEgrQOverTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39), )
if mibBuilder.loadTexts: tPortAccEgrQOverTable.setStatus('current')
tPortAccEgrQOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQOverQueue"))
if mibBuilder.loadTexts: tPortAccEgrQOverEntry.setStatus('current')
tPortAccEgrQOverQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tPortAccEgrQOverQueue.setStatus('current')
tPortAccEgrQOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverRowStatus.setStatus('current')
tPortAccEgrQOverLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQOverLastChanged.setStatus('current')
tPortAccEgrQOverCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 4), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverCBS.setStatus('current')
tPortAccEgrQOverMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 5), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverMBS.setStatus('obsolete')
tPortAccEgrQOverHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 6), TBurstPercentOrDefaultOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverHiPrioOnly.setStatus('current')
tPortAccEgrQOverAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 7), TPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminPIR.setStatus('current')
tPortAccEgrQOverAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 8), TCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminCIR.setStatus('current')
tPortAccEgrQOverPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 9), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverPIRAdaptation.setStatus('current')
tPortAccEgrQOverCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 10), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverCIRAdaptation.setStatus('current')
tPortAccEgrQOverMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 11), TBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverMBSBytes.setStatus('current')
tPortAccEgrQOverAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 12), TPIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminPIRPercent.setStatus('current')
tPortAccEgrQOverAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 13), TCIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminCIRPercent.setStatus('current')
tPortAccEgrQOverRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 14), TRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverRateType.setStatus('current')
tPortNetEgrQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpTableLastChgd.setStatus('current')
tPortNetEgrQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41), )
if mibBuilder.loadTexts: tPortNetEgrQGrpTable.setStatus('current')
tPortNetEgrQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"))
if mibBuilder.loadTexts: tPortNetEgrQGrpEntry.setStatus('current')
tPortNetEgrQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortNetEgrQGrpName.setStatus('current')
tPortNetEgrQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpRowStatus.setStatus('current')
tPortNetEgrQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpLastChgd.setStatus('current')
tPortNetEgrQGrpSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpSchedPol.setStatus('current')
tPortNetEgrQGrpAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpAggRateLimit.setStatus('current')
tPortNetEgrQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpAcctgPolId.setStatus('current')
tPortNetEgrQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpCollectStats.setStatus('current')
tPortNetEgrQGrpFrameBaseActg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpFrameBaseActg.setStatus('current')
tPortNetEgrQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 9), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpDescr.setStatus('current')
tPortNetEgrQGrpPlcrCntrlPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 10), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpPlcrCntrlPolicy.setStatus('current')
tPortNetEgrQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tPortNetEgrQGrpInstanceId.setStatus('current')
tPortNetEgrQOverTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 42), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQOverTableLastChgd.setStatus('current')
tPortNetEgrQOverTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43), )
if mibBuilder.loadTexts: tPortNetEgrQOverTable.setStatus('current')
tPortNetEgrQOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQOverQueue"))
if mibBuilder.loadTexts: tPortNetEgrQOverEntry.setStatus('current')
tPortNetEgrQOverQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tPortNetEgrQOverQueue.setStatus('current')
tPortNetEgrQOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverRowStatus.setStatus('current')
tPortNetEgrQOverLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQOverLastChanged.setStatus('current')
tPortNetEgrQOverCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 4), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverCBS.setStatus('current')
tPortNetEgrQOverMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 5), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverMBS.setStatus('obsolete')
tPortNetEgrQOverHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 6), TBurstPercentOrDefaultOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverHiPrioOnly.setStatus('current')
tPortNetEgrQOverAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 7), TPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminPIR.setStatus('current')
tPortNetEgrQOverAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 8), TCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminCIR.setStatus('current')
tPortNetEgrQOverPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 9), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverPIRAdaptation.setStatus('current')
tPortNetEgrQOverCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 10), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverCIRAdaptation.setStatus('current')
tPortNetEgrQOverMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 11), TBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverMBSBytes.setStatus('current')
tPortNetEgrQOverAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 12), TPIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminPIRPercent.setStatus('current')
tPortNetEgrQOverAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 13), TCIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminCIRPercent.setStatus('current')
tPortNetEgrQOverRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 14), TRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverRateType.setStatus('current')
tmnxBundleMlfrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44), )
if mibBuilder.loadTexts: tmnxBundleMlfrTable.setStatus('current')
tmnxBundleMlfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleMlfrEntry.setStatus('current')
tmnxBundleMlfrBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrBundleId.setStatus('current')
tmnxBundleMlfrIngQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 4), TMcFrQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrIngQoSProfId.setStatus('current')
tmnxBundleMlfrEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 5), TMcFrQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrEgrQoSProfId.setStatus('current')
tmnxBundleMlfrHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrHelloTimer.setStatus('current')
tmnxBundleMlfrHelloRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrHelloRetryCount.setStatus('current')
tmnxBundleMlfrAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrAckTimer.setStatus('current')
tmnxBundleMlfrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMlfrLastChanged.setStatus('current')
tmnxFrIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2), )
if mibBuilder.loadTexts: tmnxFrIntfTable.setStatus('current')
tmnxFrIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFrIntfEntry.setStatus('current')
tmnxFrIntfFrf12Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrIntfFrf12Mode.setStatus('current')
tmnxFrIntfLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrIntfLinkId.setStatus('current')
tmnxFrIntfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFrIntfLastChanged.setStatus('current')
tmnxFrf12IntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3), )
if mibBuilder.loadTexts: tmnxFrf12IntfTable.setStatus('current')
tmnxFrf12IntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFrf12IntfEntry.setStatus('current')
tmnxFrf12IntfFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(128, 512)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrf12IntfFragmentThreshold.setStatus('current')
tmnxFrf12IntfEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1, 2), TMcFrQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrf12IntfEgrQoSProfId.setStatus('current')
tmnxFrf12IntfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFrf12IntfLastChanged.setStatus('current')
tmnxPortIngQosQStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45), )
if mibBuilder.loadTexts: tmnxPortIngQosQStatTable.setStatus('current')
tmnxPortIngQosQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"), (0, "TIMETRA-PORT-MIB", "tmnxPortIngQosQStatQueueId"))
if mibBuilder.loadTexts: tmnxPortIngQosQStatEntry.setStatus('current')
tmnxPortIngQosQStatQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tmnxPortIngQosQStatQueueId.setStatus('current')
tmnxPortIngQosQStatOffHiPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffHiPrioPkts.setStatus('current')
tmnxPortIngQosQStatDpdHiPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdHiPrioPkts.setStatus('current')
tmnxPortIngQosQStatOffLoPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffLoPrioPkts.setStatus('current')
tmnxPortIngQosQStatDpdLoPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdLoPrioPkts.setStatus('current')
tmnxPortIngQosQStatOffHiPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffHiPrioOcts.setStatus('current')
tmnxPortIngQosQStatDpdHiPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdHiPrioOcts.setStatus('current')
tmnxPortIngQosQStatOffLoPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffLoPrioOcts.setStatus('current')
tmnxPortIngQosQStatDpdLoPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdLoPrioOcts.setStatus('current')
tmnxPortIngQosQStatFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdInProfPkts.setStatus('current')
tmnxPortIngQosQStatFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdOutProfPkts.setStatus('current')
tmnxPortIngQosQStatFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdInProfOcts.setStatus('current')
tmnxPortIngQosQStatFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdOutProfOcts.setStatus('current')
tmnxPortIngQosQStatUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatUncolPktsOff.setStatus('current')
tmnxPortIngQosQStatUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatUncolOctsOff.setStatus('current')
tmnxPortEgrQosQStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46), )
if mibBuilder.loadTexts: tmnxPortEgrQosQStatTable.setStatus('current')
tmnxPortEgrQosQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatQueueId"))
if mibBuilder.loadTexts: tmnxPortEgrQosQStatEntry.setStatus('current')
tmnxPortEgrQosQStatQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortEgrQosQStatQueueId.setStatus('current')
tmnxPortEgrQosQStatFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdInProfPkts.setStatus('current')
tmnxPortEgrQosQStatDpdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdInProfPkts.setStatus('current')
tmnxPortEgrQosQStatFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdOutProfPkts.setStatus('current')
tmnxPortEgrQosQStatDpdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdOutProfPkts.setStatus('current')
tmnxPortEgrQosQStatFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdInProfOcts.setStatus('current')
tmnxPortEgrQosQStatDpdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdInProfOcts.setStatus('current')
tmnxPortEgrQosQStatFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdOutProfOcts.setStatus('current')
tmnxPortEgrQosQStatDpdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdOutProfOcts.setStatus('current')
tmnxPortNetEgrQStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5), )
if mibBuilder.loadTexts: tmnxPortNetEgrQStatTable.setStatus('current')
tmnxPortNetEgrQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatQueueId"))
if mibBuilder.loadTexts: tmnxPortNetEgrQStatEntry.setStatus('current')
tmnxPortNetEgrQFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdInProfPkts.setStatus('current')
tmnxPortNetEgrQFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdOutProfPkts.setStatus('current')
tmnxPortNetEgrQFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdInProfOcts.setStatus('current')
tmnxPortNetEgrQFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdOutProfOcts.setStatus('current')
tmnxPortNetEgrQDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroInProfPkts.setStatus('current')
tmnxPortNetEgrQDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroOutProfPkts.setStatus('current')
tmnxPortNetEgrQDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroInProfOcts.setStatus('current')
tmnxPortNetEgrQDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroOutProfOcts.setStatus('current')
tPortNetEgrQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7), )
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatTable.setStatus('current')
tPortNetEgrQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStatQosPolicerId"))
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatEntry.setStatus('current')
tPortNetEgrQGrpPStatQosPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 1), TEgrPolicerId())
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatQosPolicerId.setStatus('current')
tPortNetEgrQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 2), TmnxEgrPolicerStatMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatMode.setStatus('current')
tPortNetEgrQGrpPStOffInProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPkt.setStatus('current')
tPortNetEgrQGrpPStOffInProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPktL.setStatus('current')
tPortNetEgrQGrpPStOffInProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPktH.setStatus('current')
tPortNetEgrQGrpPStFwdInProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPkt.setStatus('current')
tPortNetEgrQGrpPStFwdInProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPktL.setStatus('current')
tPortNetEgrQGrpPStFwdInProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPktH.setStatus('current')
tPortNetEgrQGrpPStDrpInProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPkt.setStatus('current')
tPortNetEgrQGrpPStDrpInProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPktL.setStatus('current')
tPortNetEgrQGrpPStDrpInProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPktH.setStatus('current')
tPortNetEgrQGrpPStOffOutProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPkt.setStatus('current')
tPortNetEgrQGrpPStOffOutProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPktL.setStatus('current')
tPortNetEgrQGrpPStOffOutProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPktH.setStatus('current')
tPortNetEgrQGrpPStFwdOutProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPkt.setStatus('current')
tPortNetEgrQGrpPStFwdOutProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPktL.setStatus('current')
tPortNetEgrQGrpPStFwdOutProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPktH.setStatus('current')
tPortNetEgrQGrpPStDrpOutProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPkt.setStatus('current')
tPortNetEgrQGrpPStDrpOutProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPktL.setStatus('current')
tPortNetEgrQGrpPStDrpOutProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPktH.setStatus('current')
tPortNetEgrQGrpPStOffInProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOct.setStatus('current')
tPortNetEgrQGrpPStOffInProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOctL.setStatus('current')
tPortNetEgrQGrpPStOffInProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOctH.setStatus('current')
tPortNetEgrQGrpPStFwdInProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOct.setStatus('current')
tPortNetEgrQGrpPStFwdInProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOctL.setStatus('current')
tPortNetEgrQGrpPStFwdInProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOctH.setStatus('current')
tPortNetEgrQGrpPStDrpInProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOct.setStatus('current')
tPortNetEgrQGrpPStDrpInProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOctL.setStatus('current')
tPortNetEgrQGrpPStDrpInProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOctH.setStatus('current')
tPortNetEgrQGrpPStOffOutProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOct.setStatus('current')
tPortNetEgrQGrpPStOffOutProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOctL.setStatus('current')
tPortNetEgrQGrpPStOffOutProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOctH.setStatus('current')
tPortNetEgrQGrpPStFwdOutProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOct.setStatus('current')
tPortNetEgrQGrpPStFwdOutProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOctL.setStatus('current')
tPortNetEgrQGrpPStFwdOutProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOctH.setStatus('current')
tPortNetEgrQGrpPStDrpOutProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOct.setStatus('current')
tPortNetEgrQGrpPStDrpOutProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOctL.setStatus('current')
tPortNetEgrQGrpPStDrpOutProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOctH.setStatus('current')
tPortNetEgrQGrpPStUncolPktOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOff.setStatus('current')
tPortNetEgrQGrpPStUncolPktOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOffL.setStatus('current')
tPortNetEgrQGrpPStUncolPktOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOffH.setStatus('current')
tPortNetEgrQGrpPStUncolOctOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOff.setStatus('current')
tPortNetEgrQGrpPStUncolOctOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOffL.setStatus('current')
tPortNetEgrQGrpPStUncolOctOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOffH.setStatus('current')
tmnxPortCemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6), )
if mibBuilder.loadTexts: tmnxPortCemStatsTable.setStatus('current')
tmnxPortCemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortCemStatsEntry.setStatus('current')
tmnxPortCemStatsReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 1), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5), ("rmtPktLoss", 6), ("rmtFault", 7), ("rmtRdi", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsReportAlarm.setStatus('current')
tmnxPortCemStatsIgrForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsIgrForwardedPkts.setStatus('current')
tmnxPortCemStatsIgrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsIgrDroppedPkts.setStatus('current')
tmnxPortCemStatsEgrForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrForwardedPkts.setStatus('current')
tmnxPortCemStatsEgrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrDroppedPkts.setStatus('current')
tmnxPortCemStatsEgrMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMissingPkts.setStatus('current')
tmnxPortCemStatsEgrPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrPktsReOrder.setStatus('current')
tmnxPortCemStatsEgrJtrBfrURun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrURun.setStatus('current')
tmnxPortCemStatsEgrJtrBfrORun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrORun.setStatus('current')
tmnxPortCemStatsEgrMisOrderDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMisOrderDrop.setStatus('current')
tmnxPortCemStatsEgrMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMalformedPkts.setStatus('current')
tmnxPortCemStatsEgrLBitDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrLBitDrop.setStatus('current')
tmnxPortCemStatsEgrMultipleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMultipleDrop.setStatus('current')
tmnxPortCemStatsEgrESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrESs.setStatus('current')
tmnxPortCemStatsEgrSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrSESs.setStatus('current')
tmnxPortCemStatsEgrUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrUASs.setStatus('current')
tmnxPortCemStatsEgrFailureCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrFailureCounts.setStatus('current')
tmnxPortCemStatsEgrURunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrURunCounts.setStatus('current')
tmnxPortCemStatsEgrORunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrORunCounts.setStatus('current')
tmnxPortCemStatsEgrJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrDepth.setStatus('current')
tmnxBundleMemberMlfrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 47), )
if mibBuilder.loadTexts: tmnxBundleMemberMlfrTable.setStatus('current')
tmnxBundleMemberMlfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 47, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberMlfrEntry.setStatus('current')
tmnxBundleMemberMlfrDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 47, 1, 1), TmnxMlfrLinkDownReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberMlfrDownReason.setStatus('current')
tmnxWaveTrackerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48), )
if mibBuilder.loadTexts: tmnxWaveTrackerTable.setStatus('current')
tmnxWaveTrackerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxWaveTrackerEntry.setStatus('current')
tmnxWaveTrackerPowerCtrlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerPowerCtrlEnable.setStatus('current')
tmnxWaveTrackerEncodeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerEncodeEnable.setStatus('current')
tmnxWaveTrackerInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerInUse.setStatus('current')
tmnxWaveTrackerTargetPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2200, 300)).clone(-2000)).setUnits('mBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerTargetPower.setStatus('current')
tmnxWaveTrackerWaveKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerWaveKey1.setStatus('current')
tmnxWaveTrackerWaveKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerWaveKey2.setStatus('current')
tmnxWaveTrackerTrailName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerTrailName.setStatus('current')
tmnxWaveTrackerCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 8), TmnxWaveTrackerAlarm().clone(namedValues=NamedValues(("encFail", 0), ("encDegr", 1), ("pwrFail", 2), ("pwrDegr", 3), ("pwrHigh", 4), ("pwrLow", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerCfgAlarms.setStatus('current')
tmnxWaveTrackerAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 9), TmnxWaveTrackerAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerAlarmState.setStatus('current')
tmnxWaveTrackerMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 10), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerMeasuredPower.setStatus('current')
tmnxWaveTrackerMaxAttainablePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 11), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerMaxAttainablePwr.setStatus('current')
tmnxWaveTrackerMinAttainablePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 12), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerMinAttainablePwr.setStatus('current')
tmnxWaveTrackerUpperPowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 13), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerUpperPowerMargin.setStatus('current')
tmnxWaveTrackerLowerPowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 14), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerLowerPowerMargin.setStatus('current')
tPortAccEgrQGrpHMTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 49), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMTableLastChgd.setStatus('current')
tPortAccEgrQGrpHostMatchTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50), )
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchTable.setStatus('current')
tPortAccEgrQGrpHostMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMIntDestId"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMOrgString"))
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchEntry.setStatus('current')
tPortAccEgrQGrpHMIntDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 1), TmnxSubMgtIntDestId())
if mibBuilder.loadTexts: tPortAccEgrQGrpHMIntDestId.setStatus('current')
tPortAccEgrQGrpHMOrgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 2), TmnxSubMgtOrgStrOrZero())
if mibBuilder.loadTexts: tPortAccEgrQGrpHMOrgString.setStatus('current')
tPortAccEgrQGrpHMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMRowStatus.setStatus('current')
tPortAccEgrQGrpHMLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMLastChgd.setStatus('current')
tPortAccIngSchedStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51), )
if mibBuilder.loadTexts: tPortAccIngSchedStatTable.setStatus('current')
tPortAccIngSchedStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccIngSchedStatName"))
if mibBuilder.loadTexts: tPortAccIngSchedStatEntry.setStatus('current')
tPortAccIngSchedStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccIngSchedStatName.setStatus('current')
tPortAccIngSchedStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPkts.setStatus('current')
tPortAccIngSchedStatFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPktsHi.setStatus('current')
tPortAccIngSchedStatFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPktsLo.setStatus('current')
tPortAccIngSchedStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOcts.setStatus('current')
tPortAccIngSchedStatFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOctsHi.setStatus('current')
tPortAccIngSchedStatFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOctsLo.setStatus('current')
tPortAccEgrSchedStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52), )
if mibBuilder.loadTexts: tPortAccEgrSchedStatTable.setStatus('current')
tPortAccEgrSchedStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrSchedStatName"))
if mibBuilder.loadTexts: tPortAccEgrSchedStatEntry.setStatus('current')
tPortAccEgrSchedStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccEgrSchedStatName.setStatus('current')
tPortAccEgrSchedStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPkts.setStatus('current')
tPortAccEgrSchedStatFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPktsHi.setStatus('current')
tPortAccEgrSchedStatFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPktsLo.setStatus('current')
tPortAccEgrSchedStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOcts.setStatus('current')
tPortAccEgrSchedStatFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOctsHi.setStatus('current')
tPortAccEgrSchedStatFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOctsLo.setStatus('current')
tPortNetEgrSchedStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53), )
if mibBuilder.loadTexts: tPortNetEgrSchedStatTable.setStatus('current')
tPortNetEgrSchedStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrSchedStatName"))
if mibBuilder.loadTexts: tPortNetEgrSchedStatEntry.setStatus('current')
tPortNetEgrSchedStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortNetEgrSchedStatName.setStatus('current')
tPortNetEgrSchedStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPkts.setStatus('current')
tPortNetEgrSchedStatFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPktsHi.setStatus('current')
tPortNetEgrSchedStatFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPktsLo.setStatus('current')
tPortNetEgrSchedStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOcts.setStatus('current')
tPortNetEgrSchedStatFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOctsHi.setStatus('current')
tPortNetEgrSchedStatFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOctsLo.setStatus('current')
tPortEgrVPortTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 54), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortTableLastChgd.setStatus('current')
tPortEgrVPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55), )
if mibBuilder.loadTexts: tPortEgrVPortTable.setStatus('current')
tPortEgrVPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"))
if mibBuilder.loadTexts: tPortEgrVPortEntry.setStatus('current')
tPortEgrVPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortEgrVPortName.setStatus('current')
tPortEgrVPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortRowStatus.setStatus('current')
tPortEgrVPortLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortLastChanged.setStatus('current')
tPortEgrVPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortDescr.setStatus('current')
tPortEgrVPortSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortSchedPol.setStatus('current')
tPortEgrVPortAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 6), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortAggRateLimit.setStatus('current')
tPortEgrVPortHMTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 56), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortHMTableLastChgd.setStatus('current')
tPortEgrVPortHostMatchTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57), )
if mibBuilder.loadTexts: tPortEgrVPortHostMatchTable.setStatus('current')
tPortEgrVPortHostMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortHMIntDestId"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortHMOrgString"))
if mibBuilder.loadTexts: tPortEgrVPortHostMatchEntry.setStatus('current')
tPortEgrVPortHMIntDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 1), TmnxSubMgtIntDestId())
if mibBuilder.loadTexts: tPortEgrVPortHMIntDestId.setStatus('current')
tPortEgrVPortHMOrgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 2), TmnxSubMgtOrgStrOrZero())
if mibBuilder.loadTexts: tPortEgrVPortHMOrgString.setStatus('current')
tPortEgrVPortHMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortHMRowStatus.setStatus('current')
tPortEgrVPortHMLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortHMLastChgd.setStatus('current')
tmnxOpticalPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58), )
if mibBuilder.loadTexts: tmnxOpticalPortCfgTable.setStatus('current')
tmnxOpticalPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxOpticalPortCfgEntry.setStatus('current')
tmnxOpticalPortAmpCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 1), TmnxOpticalAmpAlarm().clone(namedValues=NamedValues(("ampIld", 0), ("ampTmp", 1), ("ampMth", 2), ("ampMtl", 3), ("ampLos", 4), ("ampLop", 5), ("ampCom", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortAmpCfgAlarms.setStatus('current')
tmnxOpticalPortTdcmCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 2), TmnxOpticalTdcmCtrlMode().clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCtrlMode.setStatus('current')
tmnxOpticalPortTdcmManCfgDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200))).setUnits('picoseconds per nanometer').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmManCfgDisp.setStatus('current')
tmnxOpticalPortTdcmCfgRxChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 4), TmnxOpticalDwdmChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCfgRxChan.setStatus('current')
tmnxOpticalPortTdcmCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 5), TmnxOpticalTdcmAlarm().clone(namedValues=NamedValues(("tdcmNotRdy", 0), ("tdcmMth", 1), ("tdcmMtl", 2), ("tdcmUnLck", 3), ("tdcmTmpLim", 4), ("tdcmEprInv", 5), ("tdcmCom", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCfgAlarms.setStatus('current')
tmnxOpticalPortTdcmDispSwpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200)).clone(-1200)).setUnits('picoseconds per nanometer').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmDispSwpStart.setStatus('current')
tmnxOpticalPortTdcmDispSwpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200)).clone(1200)).setUnits('picoseconds per nanometer').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmDispSwpEnd.setStatus('current')
tmnxOpticalPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59), )
if mibBuilder.loadTexts: tmnxOpticalPortOperTable.setStatus('current')
tmnxOpticalPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxOpticalPortOperEntry.setStatus('current')
tmnxOpticalPortHasRxAmplifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortHasRxAmplifier.setStatus('current')
tmnxOpticalPortHasRxTdcm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortHasRxTdcm.setStatus('current')
tmnxOpticalPortAmpPowerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 3), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPowerIn.setStatus('current')
tmnxOpticalPortAmpGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 4), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpGain.setStatus('current')
tmnxOpticalPortAmpPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 5), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPowerOut.setStatus('current')
tmnxOpticalPortAmpPumpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 6), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPumpTemp.setStatus('current')
tmnxOpticalPortAmpModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 7), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpModuleTemp.setStatus('current')
tmnxOpticalPortAmpPumpCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 8), Unsigned32()).setUnits('microAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPumpCurrent.setStatus('current')
tmnxOpticalPortAmpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 9), TmnxOpticalAmpAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpAlarmState.setStatus('current')
tmnxOpticalPortAmpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpSerialNum.setStatus('current')
tmnxOpticalPortAmpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 11), TmnxOpticalAmpCtrlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpCtrlState.setStatus('current')
tmnxOpticalPortTdcmPowerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 12), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPowerIn.setStatus('current')
tmnxOpticalPortTdcmLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 13), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmLoss.setStatus('current')
tmnxOpticalPortTdcmPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 14), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPowerOut.setStatus('current')
tmnxOpticalPortTdcmRtd1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 15), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd1Temp.setStatus('current')
tmnxOpticalPortTdcmRtd2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 16), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd2Temp.setStatus('current')
tmnxOpticalPortTdcmRtd3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 17), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd3Temp.setStatus('current')
tmnxOpticalPortTdcmRtd4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 18), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd4Temp.setStatus('current')
tmnxOpticalPortTdcmModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 19), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmModuleTemp.setStatus('current')
tmnxOpticalPortTdcmMinDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 20), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMinDisp.setStatus('current')
tmnxOpticalPortTdcmMaxDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 21), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMaxDisp.setStatus('current')
tmnxOpticalPortTdcmAutoDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 22), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmAutoDisp.setStatus('current')
tmnxOpticalPortTdcmMeasDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 23), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMeasDisp.setStatus('current')
tmnxOpticalPortTdcmPresRxChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 24), TmnxOpticalDwdmChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPresRxChan.setStatus('current')
tmnxOpticalPortTdcmAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 25), TmnxOpticalTdcmAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmAlarmState.setStatus('current')
tmnxOpticalPortTdcmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmSerialNum.setStatus('current')
tmnxOpticalPortTdcmCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 27), TmnxOpticalTdcmCtrlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCtrlState.setStatus('current')
tmnxOpticalPortDwdmChannelMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 28), TmnxOpticalDwdmChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortDwdmChannelMin.setStatus('current')
tmnxOpticalPortDwdmChannelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 29), TmnxOpticalDwdmChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortDwdmChannelMax.setStatus('current')
tmnxOpticalPortLaserTunability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unequipped", 0), ("notTunable", 1), ("fullyTunable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortLaserTunability.setStatus('current')
tmnxPortEgrExpShaperTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperTblLastChngd.setStatus('current')
tmnxPortEgrExpShaperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61), )
if mibBuilder.loadTexts: tmnxPortEgrExpShaperTable.setStatus('current')
tmnxPortEgrExpShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperName"))
if mibBuilder.loadTexts: tmnxPortEgrExpShaperEntry.setStatus('current')
tmnxPortEgrExpShaperName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxPortEgrExpShaperName.setStatus('current')
tmnxPortEgrExpShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperRowStatus.setStatus('current')
tmnxPortEgrExpShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 3), TExpSecondaryShaperPIRRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperRate.setStatus('current')
tmnxPortEgrExpShaperClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 4), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass1Rate.setStatus('current')
tmnxPortEgrExpShaperClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 5), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass2Rate.setStatus('current')
tmnxPortEgrExpShaperClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 6), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass3Rate.setStatus('current')
tmnxPortEgrExpShaperClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 7), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass4Rate.setStatus('current')
tmnxPortEgrExpShaperClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 8), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass5Rate.setStatus('current')
tmnxPortEgrExpShaperClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 9), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass6Rate.setStatus('current')
tmnxPortEgrExpShaperClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 10), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass7Rate.setStatus('current')
tmnxPortEgrExpShaperClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 11), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass8Rate.setStatus('current')
tmnxPortEgrExpShaperLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLastChanged.setStatus('current')
tmnxPortEgrExpShaperLoBrstMaxCls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLoBrstMaxCls.setStatus('current')
tmnxPortEgrExpShaperClass1Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass1Thresh.setStatus('current')
tmnxPortEgrExpShaperClass2Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass2Thresh.setStatus('current')
tmnxPortEgrExpShaperClass3Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass3Thresh.setStatus('current')
tmnxPortEgrExpShaperClass4Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass4Thresh.setStatus('current')
tmnxPortEgrExpShaperClass5Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass5Thresh.setStatus('current')
tmnxPortEgrExpShaperClass6Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass6Thresh.setStatus('current')
tmnxPortEgrExpShaperClass7Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass7Thresh.setStatus('current')
tmnxPortEgrExpShaperClass8Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass8Thresh.setStatus('current')
tmnxPortEgrExpShaperThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperThresh.setStatus('current')
tmnxPortEgrExpShaperLoBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 23), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLoBurstLimit.setStatus('current')
tmnxPortEgrExpShaperHiBurstInc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65528), )).clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperHiBurstInc.setStatus('current')
tmnxPortEgrExpShaperCl1BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 25), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl1BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl2BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 26), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl2BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl3BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 27), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl3BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl4BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 28), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl4BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl5BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 29), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl5BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl6BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 30), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl6BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl7BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 31), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl7BrstLimit.setStatus('current')
tmnxPortEgrExpShaperCl8BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 32), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl8BrstLimit.setStatus('current')
tPortEgrExpShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62), )
if mibBuilder.loadTexts: tPortEgrExpShaperStatsTable.setStatus('current')
tPortEgrExpShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperName"))
if mibBuilder.loadTexts: tPortEgrExpShaperStatsEntry.setStatus('current')
tPortEgrExpShaperStLstClrdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperStLstClrdTime.setStatus('current')
tPortEgrExpShaperCls1StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPkts.setStatus('current')
tPortEgrExpShaperCls1StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOcts.setStatus('current')
tPortEgrExpShaperCls1StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls2StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPkts.setStatus('current')
tPortEgrExpShaperCls2StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOcts.setStatus('current')
tPortEgrExpShaperCls2StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls3StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPkts.setStatus('current')
tPortEgrExpShaperCls3StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOcts.setStatus('current')
tPortEgrExpShaperCls3StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls4StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPkts.setStatus('current')
tPortEgrExpShaperCls4StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOcts.setStatus('current')
tPortEgrExpShaperCls4StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls5StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPkts.setStatus('current')
tPortEgrExpShaperCls5StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOcts.setStatus('current')
tPortEgrExpShaperCls5StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls6StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPkts.setStatus('current')
tPortEgrExpShaperCls6StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOcts.setStatus('current')
tPortEgrExpShaperCls6StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls7StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPkts.setStatus('current')
tPortEgrExpShaperCls7StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOcts.setStatus('current')
tPortEgrExpShaperCls7StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOct.setStatus('current')
tPortEgrExpShaperCls8StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPkts.setStatus('current')
tPortEgrExpShaperCls8StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOcts.setStatus('current')
tPortEgrExpShaperCls8StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOct.setStatus('current')
tPortEgrExpShaperAggStFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPkts.setStatus('current')
tPortEgrExpShaperAggStFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOcts.setStatus('current')
tPortEgrExpShaperAggStMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOct.setStatus('current')
tPortEgrExpShaperStatsHLTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63), )
if mibBuilder.loadTexts: tPortEgrExpShaperStatsHLTable.setStatus('current')
tPortEgrExpShaperStatsHLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperName"))
if mibBuilder.loadTexts: tPortEgrExpShaperStatsHLEntry.setStatus('current')
tPortEgrExpShaperCls1StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls1StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls1StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls1StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls1StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls1StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls2StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls2StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls2StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls2StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls2StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls2StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls3StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls3StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls3StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls3StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls3StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls3StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls4StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls4StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls4StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls4StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls4StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls4StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls5StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls5StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls5StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls5StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls5StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls5StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls6StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls6StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls6StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls6StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls6StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls6StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls7StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls7StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls7StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls7StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls7StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls7StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOH.setStatus('current')
tPortEgrExpShaperCls8StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPktsL.setStatus('current')
tPortEgrExpShaperCls8StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPktsH.setStatus('current')
tPortEgrExpShaperCls8StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOctsL.setStatus('current')
tPortEgrExpShaperCls8StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOctsH.setStatus('current')
tPortEgrExpShaperCls8StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOL.setStatus('current')
tPortEgrExpShaperCls8StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOH.setStatus('current')
tPortEgrExpShaperAggStFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPktsL.setStatus('current')
tPortEgrExpShaperAggStFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPktsH.setStatus('current')
tPortEgrExpShaperAggStFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOctsL.setStatus('current')
tPortEgrExpShaperAggStFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOctsH.setStatus('current')
tPortEgrExpShaperAggStMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOL.setStatus('current')
tPortEgrExpShaperAggStMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOH.setStatus('current')
tPortEgrVPortAggStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64), )
if mibBuilder.loadTexts: tPortEgrVPortAggStatsTable.setStatus('current')
tPortEgrVPortAggStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPStLvl"))
if mibBuilder.loadTexts: tPortEgrVPortAggStatsEntry.setStatus('current')
tPortEgrVPStLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(4294967295, 4294967295), )))
if mibBuilder.loadTexts: tPortEgrVPStLvl.setStatus('current')
tPortEgrVPStLstClrdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLstClrdTime.setStatus('current')
tPortEgrVPStLvlFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPkt.setStatus('current')
tPortEgrVPStLvlFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOct.setStatus('current')
tPortEgrVPStLvlDpdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPkt.setStatus('current')
tPortEgrVPStLvlDpdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOct.setStatus('current')
tPortEgrVPortAggStatsHLTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65), )
if mibBuilder.loadTexts: tPortEgrVPortAggStatsHLTable.setStatus('current')
tPortEgrVPortAggStatsHLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPStLvl"))
if mibBuilder.loadTexts: tPortEgrVPortAggStatsHLEntry.setStatus('current')
tPortEgrVPStLvlFwdPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPktL.setStatus('current')
tPortEgrVPStLvlFwdPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPktH.setStatus('current')
tPortEgrVPStLvlFwdOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOctL.setStatus('current')
tPortEgrVPStLvlFwdOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOctH.setStatus('current')
tPortEgrVPStLvlDpdPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPktL.setStatus('current')
tPortEgrVPStLvlDpdPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPktH.setStatus('current')
tPortEgrVPStLvlDpdOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOctL.setStatus('current')
tPortEgrVPStLvlDpdOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOctH.setStatus('current')
tmnxDDMLaneTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66), )
if mibBuilder.loadTexts: tmnxDDMLaneTable.setStatus('current')
tmnxDDMLaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxDDMLaneId"))
if mibBuilder.loadTexts: tmnxDDMLaneEntry.setStatus('current')
tmnxDDMLaneId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxDDMLaneId.setStatus('current')
tmnxDDMLaneTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTemperature.setStatus('current')
tmnxDDMLaneTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempLowWarn.setStatus('current')
tmnxDDMLaneTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempLowAlarm.setStatus('current')
tmnxDDMLaneTempHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempHiWarn.setStatus('current')
tmnxDDMLaneTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempHiAlarm.setStatus('current')
tmnxDDMLaneTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrent.setStatus('current')
tmnxDDMLaneTxBiasCurrentLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentLowWarn.setStatus('current')
tmnxDDMLaneTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentLowAlarm.setStatus('current')
tmnxDDMLaneTxBiasCurrentHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentHiWarn.setStatus('current')
tmnxDDMLaneTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentHiAlarm.setStatus('current')
tmnxDDMLaneTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPower.setStatus('current')
tmnxDDMLaneTxOutputPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerLowWarn.setStatus('current')
tmnxDDMLaneTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerLowAlarm.setStatus('current')
tmnxDDMLaneTxOutputPowerHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerHiWarn.setStatus('current')
tmnxDDMLaneTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerHiAlarm.setStatus('current')
tmnxDDMLaneRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPower.setStatus('current')
tmnxDDMLaneRxOpticalPwrLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrLowWarn.setStatus('current')
tmnxDDMLaneRxOpticalPwrLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrLowAlarm.setStatus('current')
tmnxDDMLaneRxOpticalPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrHiWarn.setStatus('current')
tmnxDDMLaneRxOpticalPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrHiAlarm.setStatus('current')
tmnxDDMLaneRxOpticalPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oma", 0), ("average", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPowerType.setStatus('current')
tmnxDDMLaneFailedThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 23), TmnxDigitalDiagnosticFailureBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneFailedThresholds.setStatus('current')
tPortNetEgrQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68), )
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatTable.setStatus('current')
tPortNetEgrQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatName"))
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatEntry.setStatus('current')
tPortNetEgrQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatName.setStatus('current')
tPortNetEgrQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPkts.setStatus('current')
tPortNetEgrQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPktsL.setStatus('current')
tPortNetEgrQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPktsH.setStatus('current')
tPortNetEgrQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOcts.setStatus('current')
tPortNetEgrQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOctsL.setStatus('current')
tPortNetEgrQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOctsH.setStatus('current')
tmnxPortPlcyTableLastCh = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPlcyTableLastCh.setStatus('current')
tmnxPortPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2), )
if mibBuilder.loadTexts: tmnxPortPlcyTable.setStatus('current')
tmnxPortPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1), ).setIndexNames((1, "TIMETRA-PORT-MIB", "tmnxPortPlcyName"))
if mibBuilder.loadTexts: tmnxPortPlcyEntry.setStatus('current')
tmnxPortPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxPortPlcyName.setStatus('current')
tmnxPortPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortPlcyRowStatus.setStatus('current')
tmnxPortPlcyLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPlcyLastCh.setStatus('current')
tmnxPortPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortPlcyDescription.setStatus('current')
tmnxPortPlcyEgrPortSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortPlcyEgrPortSchedPlcy.setStatus('current')
tmnxPwPortTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 69), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPwPortTblLastChanged.setStatus('current')
tmnxPwPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70), )
if mibBuilder.loadTexts: tmnxPwPortTable.setStatus('current')
tmnxPwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxPwPortId"))
if mibBuilder.loadTexts: tmnxPwPortEntry.setStatus('current')
tmnxPwPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10239)))
if mibBuilder.loadTexts: tmnxPwPortId.setStatus('current')
tmnxPwPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPwPortRowStatus.setStatus('current')
tmnxPwPortLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPwPortLastChgd.setStatus('current')
tmnxPwPortEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 10))).clone(namedValues=NamedValues(("dot1q", 2), ("qinq", 10))).clone('dot1q')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPwPortEncapType.setStatus('current')
tmnxPortNotifyPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 1), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyPortId.setStatus('current')
tmnxPortNotifySonetAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifySonetAlarmReason.setStatus('current')
tmnxPortNotifySonetPathAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifySonetPathAlarmReason.setStatus('current')
tmnxPortNotifyError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("txClockError", 1), ("rxClockError", 2), ("txFifoError", 3), ("laserError", 4), ("miscError", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyError.setStatus('current')
tmnxPortNotifyDS3AlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDS3AlarmReason.setStatus('current')
tmnxPortNotifyDS1AlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5), ("berSd", 6), ("berSf", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDS1AlarmReason.setStatus('current')
tmnxPortNotifyBundleId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 7), TmnxBundleID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyBundleId.setStatus('current')
tmnxPortNotifyEtherAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 8), TmnxPortEtherReportValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherAlarmReason.setStatus('current')
tmnxDDMFailedObject = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("unknown", 0), ("temperature-low-warning", 1), ("temperature-low-alarm", 2), ("temperature-high-warning", 3), ("temperature-high-alarm", 4), ("supplyVoltage-low-warning", 5), ("supplyVoltage-low-alarm", 6), ("supplyVoltage-high-warning", 7), ("supplyVoltage-high-alarm", 8), ("txBiasCurrent-low-warning", 9), ("txBiasCurrent-low-alarm", 10), ("txBiasCurrent-high-warning", 11), ("txBiasCurrent-high-alarm", 12), ("txOutputPower-low-warning", 13), ("txOutputPower-low-alarm", 14), ("txOutputPower-high-warning", 15), ("txOutputPower-high-alarm", 16), ("rxOpticalPower-low-warning", 17), ("rxOpticalPower-low-alarm", 18), ("rxOpticalPower-high-warning", 19), ("rxOpticalPower-high-alarm", 20), ("aux1-low-warning", 21), ("aux1-low-alarm", 22), ("aux1-high-warning", 23), ("aux1-high-alarm", 24), ("aux2-low-warning", 25), ("aux2-low-alarm", 26), ("aux2-high-warning", 27), ("aux2-high-alarm", 28)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDDMFailedObject.setStatus('current')
tmnxDSXClockSyncStateObject = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 10), TmnxDSXClockSyncState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDSXClockSyncStateObject.setStatus('current')
tmnxPortNotifyDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDescription.setStatus('current')
tmnxPortNotifyWTAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notUsed", 0), ("encFail", 1), ("encDegr", 2), ("pwrFail", 3), ("pwrDegr", 4), ("pwrHigh", 5), ("pwrLow", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyWTAlarmReason.setStatus('current')
tmnxHostMatchNotifyIntDestId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 13), TmnxSubMgtIntDestId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxHostMatchNotifyIntDestId.setStatus('current')
tmnxHostMatchNotifyOrgString = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 14), TmnxSubMgtOrgStrOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxHostMatchNotifyOrgString.setStatus('current')
tmnxHostMatchNotifySubIdent = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 15), TmnxSubIdentStringOrEmpty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxHostMatchNotifySubIdent.setStatus('current')
tmnxObjAppResvSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 16), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvSize.setStatus('current')
tmnxObjAppResvCbsOld = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 17), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvCbsOld.setStatus('current')
tmnxObjAppResvCbsNew = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 18), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvCbsNew.setStatus('current')
tmnxObjAppSumOfQResvSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 19), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppSumOfQResvSize.setStatus('current')
tmnxObjType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mda", 1), ("port", 2), ("unused", 3), ("bundle", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjType.setStatus('current')
tmnxObjPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 21), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjPortId.setStatus('current')
tmnxObjMdaId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 22), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjMdaId.setStatus('current')
tmnxObjAppType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accessIngress", 1), ("accessEgress", 2), ("networkIngress", 3), ("networkEgress", 4), ("ingress", 5), ("egress", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppType.setStatus('current')
tmnxObjAppPool = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 24), TNamedItemOrEmpty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppPool.setStatus('current')
tmnxObjNamedPoolPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 25), TNamedItemOrEmpty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjNamedPoolPolicy.setStatus('current')
tmnxPortNotifyEtherCrcThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 27), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcThreshold.setStatus('current')
tmnxPortNotifyEtherCrcMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 28), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcMultiplier.setStatus('current')
tmnxPortNotifyEtherCrcAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 29), TmnxPortEtherCrcMonReportValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcAlarmValue.setStatus('current')
tmnxObjAppResvSizeOld = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 30), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvSizeOld.setStatus('current')
tmnxDDMLaneIdOrModule = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDDMLaneIdOrModule.setStatus('current')
tmnxEqOobPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqOobPortFailure.setStatus('obsolete')
tmnxEqPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortFailure.setStatus('obsolete')
tmnxEqPortSonetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetAlarm.setStatus('current')
tmnxEqPortSonetAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetAlarmClear.setStatus('current')
tmnxEqPortSonetPathAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarm.setStatus('current')
tmnxEqPortSonetPathAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarmClear.setStatus('current')
tmnxEqPortSFPInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 8)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPInserted.setStatus('current')
tmnxEqPortSFPRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 9)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPRemoved.setStatus('current')
tmnxEqPortWrongSFP = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 10)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortWrongSFP.setStatus('obsolete')
tmnxEqPortSFPCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 11)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPCorrupted.setStatus('obsolete')
tmnxPortNotifyBerSdTca = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 12)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSdThreshold"))
if mibBuilder.loadTexts: tmnxPortNotifyBerSdTca.setStatus('obsolete')
tmnxPortNotifyBerSfTca = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 13)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"))
if mibBuilder.loadTexts: tmnxPortNotifyBerSfTca.setStatus('obsolete')
tmnxEqPortError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 14)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyError"))
if mibBuilder.loadTexts: tmnxEqPortError.setStatus('current')
tmnxEqPortDS3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 15)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS3Alarm.setStatus('current')
tmnxEqPortDS3AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 16)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS3AlarmClear.setStatus('current')
tmnxEqPortDS1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 17)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS1Alarm.setStatus('current')
tmnxEqPortDS1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 18)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS1AlarmClear.setStatus('current')
tmnxEqPortBndlYellowDiffExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 19)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"))
if mibBuilder.loadTexts: tmnxEqPortBndlYellowDiffExceeded.setStatus('current')
tmnxEqPortBndlRedDiffExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 20)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"))
if mibBuilder.loadTexts: tmnxEqPortBndlRedDiffExceeded.setStatus('current')
tmnxEqPortBndlBadEndPtDiscr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 21)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"))
if mibBuilder.loadTexts: tmnxEqPortBndlBadEndPtDiscr.setStatus('current')
tmnxEqPortEtherAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 22)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortEtherAlarm.setStatus('current')
tmnxEqPortEtherAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 23)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortEtherAlarmClear.setStatus('current')
tmnxDS1E1LoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 24)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"))
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStarted.setStatus('current')
tmnxDS1E1LoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 25)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"))
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStopped.setStatus('current')
tmnxDS3E3LoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 26)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"))
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStarted.setStatus('current')
tmnxDS3E3LoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 27)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"))
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStopped.setStatus('current')
tmnxSonetSDHLoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 28)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetLoopback"))
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStarted.setStatus('current')
tmnxSonetSDHLoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 29)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetLoopback"))
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStopped.setStatus('current')
tmnxEqPortEtherLoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 30)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherLoopDetected.setStatus('current')
tmnxEqPortEtherLoopCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 31)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherLoopCleared.setStatus('current')
tmnxEqPortSpeedCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 32)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqPortSpeedCfgNotCompatible.setStatus('current')
tmnxEqPortDuplexCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 33)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqPortDuplexCfgNotCompatible.setStatus('current')
tmnxEqPortIngressRateCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 34)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqPortIngressRateCfgNotCompatible.setStatus('current')
tmnxEqDigitalDiagMonitorFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 35)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDDMFailedObject"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneIdOrModule"))
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorFailure.setStatus('current')
tmnxEqPortSFPStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 36)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortSFPStatus"))
if mibBuilder.loadTexts: tmnxEqPortSFPStatusFailure.setStatus('current')
tmnxDSXClockSyncStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 37)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateObject"))
if mibBuilder.loadTexts: tmnxDSXClockSyncStateChange.setStatus('current')
tmnxQosServiceDegraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxQosServiceDegraded.setStatus('obsolete')
tmnxPortUnsupportedFunction = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 38)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDescription"))
if mibBuilder.loadTexts: tmnxPortUnsupportedFunction.setStatus('current')
tmnxBundleMemberMlfrLoopback = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 39)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrDownReason"))
if mibBuilder.loadTexts: tmnxBundleMemberMlfrLoopback.setStatus('current')
tmnxEqPortWaveTrackerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 40)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyWTAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerAlarmState"))
if mibBuilder.loadTexts: tmnxEqPortWaveTrackerAlarm.setStatus('current')
tPortAccEgrQGrpHostMatchFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 41)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyIntDestId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyOrgString"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifySubIdent"))
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchFailure.setStatus('current')
tPortEgrVPortHostMatchFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 42)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyIntDestId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyOrgString"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifySubIdent"))
if mibBuilder.loadTexts: tPortEgrVPortHostMatchFailure.setStatus('current')
tmnxEqDigitalDiagMonitorClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 43)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDDMFailedObject"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneIdOrModule"))
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorClear.setStatus('current')
tmnxEqPortOpticalAmpAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 44)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpAlarmState"))
if mibBuilder.loadTexts: tmnxEqPortOpticalAmpAlarm.setStatus('current')
tmnxEqPortOpticalTdcmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 45)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmAlarmState"))
if mibBuilder.loadTexts: tmnxEqPortOpticalTdcmAlarm.setStatus('current')
tmnxEqSonetClockSrcNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 46)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqSonetClockSrcNotCompatible.setStatus('current')
tmnxEqSonetSfThreshNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 47)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqSonetSfThreshNotCompatible.setStatus('current')
tmnxEqSonetFramingNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 48)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetFraming"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqSonetFramingNotCompatible.setStatus('current')
tmnxResvCbsPoolThreshGreen = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 49)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshGreen.setStatus('current')
tmnxResvCbsPoolThreshAmber = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 50)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshAmber.setStatus('current')
tmnxResvCbsPoolThreshRed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 51)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshRed.setStatus('current')
tmnxEqPortEtherCrcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 52)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcAlarmValue"))
if mibBuilder.loadTexts: tmnxEqPortEtherCrcAlarm.setStatus('current')
tmnxEqPortEtherCrcAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 53)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcAlarmValue"))
if mibBuilder.loadTexts: tmnxEqPortEtherCrcAlarmClear.setStatus('current')
tmnxEqPortEtherInternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 54)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherInternalAlarm.setStatus('current')
tmnxEqPortEtherInternalAlarmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 55)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherInternalAlarmClr.setStatus('current')
tmnxPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1))
tmnxPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2))
tmnxPortComp7750 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3))
tmnxPortComp7450 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4))
tmnxPortComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5))
tmnxPortComp7750V4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 2)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV3v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V4v0 = tmnxPortComp7750V4v0.setStatus('obsolete')
tmnxPortComp7750V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 3)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V5v0 = tmnxPortComp7750V5v0.setStatus('obsolete')
tmnxPortComp7750V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V6v0 = tmnxPortComp7750V6v0.setStatus('obsolete')
tmnxPortComp7750V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v1Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V6v1 = tmnxPortComp7750V6v1.setStatus('obsolete')
tmnxPortComp7750V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V7v0 = tmnxPortComp7750V7v0.setStatus('obsolete')
tmnxPortComp7750V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V8v0 = tmnxPortComp7750V8v0.setStatus('obsolete')
tmnxPortComp7750V9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 8)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV9v4"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortObjAppV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"), ("TIMETRA-PORT-MIB", "tmnxPortEgrVPortStatsV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V9v0 = tmnxPortComp7750V9v0.setStatus('obsolete')
tmnxPortComp7450V4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 2)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV3v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V4v0 = tmnxPortComp7450V4v0.setStatus('obsolete')
tmnxPortComp7450V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 3)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V5v0 = tmnxPortComp7450V5v0.setStatus('obsolete')
tmnxPortComp7450V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V6v0 = tmnxPortComp7450V6v0.setStatus('obsolete')
tmnxPortComp7450V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v1Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V6v1 = tmnxPortComp7450V6v1.setStatus('obsolete')
tmnxPortComp7450V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V7v0 = tmnxPortComp7450V7v0.setStatus('obsolete')
tmnxPortComp7450V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V8v0 = tmnxPortComp7450V8v0.setStatus('obsolete')
tmnxPortComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 1)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupR2r1"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleV3v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV3v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V3v0 = tmnxPortComp7710V3v0.setStatus('obsolete')
tmnxPortComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 2)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V5v0 = tmnxPortComp7710V5v0.setStatus('obsolete')
tmnxPortComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 3)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V6v0 = tmnxPortComp7710V6v0.setStatus('obsolete')
tmnxPortComp7710V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v1Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V6v1 = tmnxPortComp7710V6v1.setStatus('obsolete')
tmnxPortComp7710V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V7v0 = tmnxPortComp7710V7v0.setStatus('obsolete')
tmnxPortComp7710V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V8v0 = tmnxPortComp7710V8v0.setStatus('obsolete')
tmnxPortComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV9v4"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortObjAppV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"), ("TIMETRA-PORT-MIB", "tmnxPortEgrVPortStatsV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEtherV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComplianceV9v0 = tmnxPortComplianceV9v0.setStatus('obsolete')
tmnxPortComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV9v4"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV10v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV10v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneGroupV10v0"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortObjAppV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"), ("TIMETRA-PORT-MIB", "tmnxPortEgrVPortStatsV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEtherV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrV10v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyGroup"), ("TIMETRA-PORT-MIB", "tmnxPwPortV10v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalGroupV10v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComplianceV10v0 = tmnxPortComplianceV10v0.setStatus('current')
tmnxPortFRGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxFRDlcmiMode"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiN392Dce"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiN393Dce"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiT392Dce"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiTxStatusEnqMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiRxStatusEnqMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiStatusEnqMsgTimeouts"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiTxStatusMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiRxStatusMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiStatusMsgTimeouts"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiDiscardedMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiInvRxSeqNumMsgs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortFRGroup = tmnxPortFRGroup.setStatus('current')
tmnxQosAppObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjectAppPoolRowStatus"), ("TIMETRA-PORT-MIB", "tmnxObjectAppResvCbs"), ("TIMETRA-PORT-MIB", "tmnxObjectAppSlopePolicy"), ("TIMETRA-PORT-MIB", "tmnxObjectAppPoolSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAppObjsGroup = tmnxQosAppObjsGroup.setStatus('current')
tmnxPortTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTestState"), ("TIMETRA-PORT-MIB", "tmnxPortTestMode"), ("TIMETRA-PORT-MIB", "tmnxPortTestParameter"), ("TIMETRA-PORT-MIB", "tmnxPortTestLastResult"), ("TIMETRA-PORT-MIB", "tmnxPortTestStartTime"), ("TIMETRA-PORT-MIB", "tmnxPortTestEndTime"), ("TIMETRA-PORT-MIB", "tmnxPortTestDuration"), ("TIMETRA-PORT-MIB", "tmnxPortTestAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTestGroup = tmnxPortTestGroup.setStatus('current')
tmnxPortObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 11)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS1IdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxSonetPathType"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroOutProfOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObsoleteGroup = tmnxPortObsoleteGroup.setStatus('current')
tmnxPortIngrMdaQosStatR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 14)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos00StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos00StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos01StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos01StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos02StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos02StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos03StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos03StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos04StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos04StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos05StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos05StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos06StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos06StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos07StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos07StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos08StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos08StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos09StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos09StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos10StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos10StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos11StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos11StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos12StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos12StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos13StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos13StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos14StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos14StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos15StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos15StatDropOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortIngrMdaQosStatR2r1Group = tmnxPortIngrMdaQosStatR2r1Group.setStatus('current')
tmnxPortStatsR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 16)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroOutProfOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortStatsR2r1Group = tmnxPortStatsR2r1Group.setStatus('current')
tmnxPortNotificationGroupR2r1 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 17)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupR2r1 = tmnxPortNotificationGroupR2r1.setStatus('obsolete')
tmnxPortNotifyObjsGroupR2r1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 18)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyError"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyBundleId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupR2r1 = tmnxPortNotifyObjsGroupR2r1.setStatus('current')
tmnxPortNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 20)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqOobPortFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortFailure"), ("TIMETRA-PORT-MIB", "tmnxQosServiceDegraded"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyBerSdTca"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyBerSfTca"), ("TIMETRA-PORT-MIB", "tmnxEqPortWrongSFP"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObsoleteGroup = tmnxPortNotifyObsoleteGroup.setStatus('current')
tmnxPortSonetV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 21)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetSpeed"), ("TIMETRA-PORT-MIB", "tmnxSonetClockSource"), ("TIMETRA-PORT-MIB", "tmnxSonetFraming"), ("TIMETRA-PORT-MIB", "tmnxSonetReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxSonetLoopback"), ("TIMETRA-PORT-MIB", "tmnxSonetReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetSectionTraceMode"), ("TIMETRA-PORT-MIB", "tmnxSonetJ0String"), ("TIMETRA-PORT-MIB", "tmnxSonetMonS1Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetMonJ0String"), ("TIMETRA-PORT-MIB", "tmnxSonetMonK1Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetMonK2Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetSingleFiber"), ("TIMETRA-PORT-MIB", "tmnxSonetHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxSonetHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxSonetPathRowStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetPathLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxSonetPathMTU"), ("TIMETRA-PORT-MIB", "tmnxSonetPathScramble"), ("TIMETRA-PORT-MIB", "tmnxSonetPathC2Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetPathJ1String"), ("TIMETRA-PORT-MIB", "tmnxSonetPathCRC"), ("TIMETRA-PORT-MIB", "tmnxSonetPathOperMTU"), ("TIMETRA-PORT-MIB", "tmnxSonetPathOperMRU"), ("TIMETRA-PORT-MIB", "tmnxSonetPathReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxSonetPathAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxSonetPathCollectStats"), ("TIMETRA-PORT-MIB", "tmnxSonetPathReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetPathMonC2Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetPathMonJ1String"), ("TIMETRA-PORT-MIB", "tmnxSonetPathChildType"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupType"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupParentPortID"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupChildType"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSonetV3v0Group = tmnxPortSonetV3v0Group.setStatus('current')
tmnxPortTDMV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 22)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMV3v0Group = tmnxPortTDMV3v0Group.setStatus('obsolete')
tmnxPortATMV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 23)).setObjects(("TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMV3v0Group = tmnxPortATMV3v0Group.setStatus('obsolete')
tmnxScalarPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 24)).setObjects(("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxScalarPortV3v0Group = tmnxScalarPortV3v0Group.setStatus('current')
tmnxPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 25)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortV3v0Group = tmnxPortV3v0Group.setStatus('obsolete')
tmnxCiscoHDLCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 26)).setObjects(("TIMETRA-PORT-MIB", "tmnxCiscoHDLCKeepAliveInt"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCUpCount"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCDownCount"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCOperState"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCDiscardStatInPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCDiscardStatOutPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatInPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatOutPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatInOctets"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCiscoHDLCGroup = tmnxCiscoHDLCGroup.setStatus('current')
tmnxMlBundleV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 27)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleV3v0Group = tmnxMlBundleV3v0Group.setStatus('obsolete')
tmnxObsoleteGroupV3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 28)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetAps"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetApsOperStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAuthKey"), ("TIMETRA-PORT-MIB", "tmnxSonetApsNeighborAddr"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAdvertiseInterval"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAdvertiseTimeLeft"), ("TIMETRA-PORT-MIB", "tmnxSonetApsHoldTime"), ("TIMETRA-PORT-MIB", "tmnxSonetApsHoldTimeLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoleteGroupV3v0 = tmnxObsoleteGroupV3v0.setStatus('current')
tmnxPortEthernetV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 29)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV3v0Group = tmnxPortEthernetV3v0Group.setStatus('obsolete')
tmnxPortTDMGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 30)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV4v0 = tmnxPortTDMGroupV4v0.setStatus('obsolete')
tmnxPortATMGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 31)).setObjects(("TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV4v0 = tmnxPortATMGroupV4v0.setStatus('obsolete')
tmnxMlBundleGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 32)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV4v0 = tmnxMlBundleGroupV4v0.setStatus('obsolete')
tmnxMlImaBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 33)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLnkActTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLnkDeactTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSymmetryMode"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxId"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxId"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxRefLnk"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxRefLnk"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmNeState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmFeState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmFailState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmDownSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmOperSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpAvailTxCR"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpAvailRxCR"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpNeFails"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpFeFails"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpErrorIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLostRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxOamLablVal"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxOamLablVal"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpAlphaValue"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpBetaValue"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpGammaValue"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpNeClockMode"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpFeClockMode"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpVersion"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpMaxConfBw"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestMember"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestPattern"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpDiffDelayMaxObs"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLeastDelayLink"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxFailState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxFailState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaTxLid"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxLid"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaViolations"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeSevErrSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeSevErrSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeUnavailSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeUnavailSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaTxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaErrorIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaLstRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaOifAnomalies"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxTestState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxTestPattern"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRelDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlImaBundleGroup = tmnxMlImaBundleGroup.setStatus('current')
tmnx7710PortTDMGroupV3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 34)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS1PortBuildout"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1PortType"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLineLength"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLbo"), ("TIMETRA-PORT-MIB", "tmnxDS1PortDbGain"), ("TIMETRA-PORT-MIB", "tmnxDS1InsertSingleBitError"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCollectStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710PortTDMGroupV3v0 = tmnx7710PortTDMGroupV3v0.setStatus('obsolete')
tmnxPortGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 35)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV4v0 = tmnxPortGroupV4v0.setStatus('obsolete')
tmnxObsoleteGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 36)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoleteGroupV5v0 = tmnxObsoleteGroupV5v0.setStatus('current')
tmnxPortSchedV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 37)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrPortSchedPlcy"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideSchedName"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideMaxRate"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl1PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl1CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl2PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl2CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl3PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl3CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl4PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl4CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl5PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl5CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl6PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl6CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl7PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl7CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl8PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl8CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSchedV5v0Group = tmnxPortSchedV5v0Group.setStatus('current')
tmnxPortEthernetV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 38)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV5v0Group = tmnxPortEthernetV5v0Group.setStatus('obsolete')
tmnxPortGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 39)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV5v0 = tmnxPortGroupV5v0.setStatus('obsolete')
tmnxMlBundleGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 40)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"), ("TIMETRA-PORT-MIB", "tmnxBundleProtectedType"), ("TIMETRA-PORT-MIB", "tmnxBundleParentBundle"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocWorkingBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocProtectBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocActiveBundleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV5v0 = tmnxMlBundleGroupV5v0.setStatus('obsolete')
tmnxPortNotificationGroupV5v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 41)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV5v0 = tmnxPortNotificationGroupV5v0.setStatus('obsolete')
tmnxPortTDMGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 42)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV5v0 = tmnxPortTDMGroupV5v0.setStatus('obsolete')
tmnx7710PortTDMGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 43)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS1PortBuildout"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1PortType"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLineLength"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLbo"), ("TIMETRA-PORT-MIB", "tmnxDS1PortDbGain"), ("TIMETRA-PORT-MIB", "tmnxDS1InsertSingleBitError"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCollectStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710PortTDMGroupV5v0 = tmnx7710PortTDMGroupV5v0.setStatus('current')
tmnxPortCemGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 44)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSyncState"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockMasterPortId"), ("TIMETRA-PORT-MIB", "tmnxDS1SignalMode"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSyncState"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockMasterPortId"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupPayloadFillType"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupPayloadPattern"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSignalFillType"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSignalPattern"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortCemGroupV6v0 = tmnxPortCemGroupV6v0.setStatus('current')
tmnxMcMlpppBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 45)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlpppClassCount"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppIngQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppEgrQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressOct"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressPkt"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressErrPkt"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressOct"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressPkt"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressErrPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMcMlpppBundleGroup = tmnxMcMlpppBundleGroup.setStatus('current')
tmnxPortNotificationGroupV6v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 46)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV6v0 = tmnxPortNotificationGroupV6v0.setStatus('obsolete')
tmnxPortEthernetV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 47)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV6v0Group = tmnxPortEthernetV6v0Group.setStatus('obsolete')
tmnxMlBundleGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 48)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"), ("TIMETRA-PORT-MIB", "tmnxBundleProtectedType"), ("TIMETRA-PORT-MIB", "tmnxBundleParentBundle"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocWorkingBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocProtectBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocActiveBundleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV6v0 = tmnxMlBundleGroupV6v0.setStatus('current')
tmnxMlpppBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 49)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlpppEndpointID"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppEndpointIDClass"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppMagicNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlpppBundleGroup = tmnxMlpppBundleGroup.setStatus('current')
tmnxPortNotificationGroupV3v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 50)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV3v0 = tmnxPortNotificationGroupV3v0.setStatus('obsolete')
tmnxHsmdaGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 51)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrHsmdaSchedPlcy"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrTblLastChngd"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrRowStatus"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrLastChanged"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrMaxRate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8WtInGp"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperTblLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxHsmdaGroupV6v0 = tmnxHsmdaGroupV6v0.setStatus('obsolete')
tmnxPortTDMGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 52)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV6v0 = tmnxPortTDMGroupV6v0.setStatus('obsolete')
tmnxDigitalDiagMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 53)).setObjects(("TIMETRA-PORT-MIB", "tmnxDDMTemperature"), ("TIMETRA-PORT-MIB", "tmnxDDMTempLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTempLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTempHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTempHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltage"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrent"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPower"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPower"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerType"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1LowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1LowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1HiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1HiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1Type"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2LowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2LowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2HiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2HiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2Type"), ("TIMETRA-PORT-MIB", "tmnxDDMFailedThresholds"), ("TIMETRA-PORT-MIB", "tmnxDDMExternallyCalibrated"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower4"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower3"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower2"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower1"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower0"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxLaserBiasSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxLaserBiasOffset"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxPowerSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxPowerOffset"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTemperatureSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTemperatureOffset"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalVoltageSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalVoltageOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDigitalDiagMonitorGroup = tmnxDigitalDiagMonitorGroup.setStatus('current')
tmnxPortGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 54)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"), ("TIMETRA-PORT-MIB", "tmnxPortDDMEventSuppression"), ("TIMETRA-PORT-MIB", "tmnxPortSFPStatus"), ("TIMETRA-PORT-MIB", "tmnxPortReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV6v0 = tmnxPortGroupV6v0.setStatus('obsolete')
tmnxNamedPoolGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 55)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortIngNamedPoolPlcy"), ("TIMETRA-PORT-MIB", "tmnxPortEgrNamedPoolPlcy"), ("TIMETRA-PORT-MIB", "tmnxPortIngPoolPercentRate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrPoolPercentRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxNamedPoolGroupV6v0 = tmnxNamedPoolGroupV6v0.setStatus('current')
tmnxPortEthernetV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 56)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSingleFiber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV6v1Group = tmnxPortEthernetV6v1Group.setStatus('obsolete')
tmnxPortNotifyObjsGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 57)).setObjects(("TIMETRA-PORT-MIB", "tmnxDDMFailedObject"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateObject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV6v0 = tmnxPortNotifyObjsGroupV6v0.setStatus('current')
tmnxPortQV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 58)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverMBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverMBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverMBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQV7v0Group = tmnxPortQV7v0Group.setStatus('obsolete')
tmnxMcMfrBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 59)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlfrBundleId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrIngQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrEgrQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrHelloTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrHelloRetryCount"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrAckTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrLastChanged"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMcMfrBundleGroup = tmnxMcMfrBundleGroup.setStatus('current')
tmnxFrIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 60)).setObjects(("TIMETRA-PORT-MIB", "tmnxFrIntfFrf12Mode"), ("TIMETRA-PORT-MIB", "tmnxFrIntfLinkId"), ("TIMETRA-PORT-MIB", "tmnxFrIntfLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFrIntfGroup = tmnxFrIntfGroup.setStatus('current')
tmnxFrf12IntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 61)).setObjects(("TIMETRA-PORT-MIB", "tmnxFrf12IntfFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfEgrQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFrf12IntfGroup = tmnxFrf12IntfGroup.setStatus('current')
tmnxPortQStatV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 62)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdHiPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdHiPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdLoPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdLoPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffHiPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffHiPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffLoPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffLoPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatUncolOctsOff"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatUncolPktsOff"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdOutProfPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQStatV7v0Group = tmnxPortQStatV7v0Group.setStatus('current')
tmnxPortEthernetV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 63)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSingleFiber"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSM"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDWLUseBroadcastAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV7v0Group = tmnxPortEthernetV7v0Group.setStatus('current')
tmnxPortGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 64)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxLsrIpLoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"), ("TIMETRA-PORT-MIB", "tmnxPortDDMEventSuppression"), ("TIMETRA-PORT-MIB", "tmnxPortSFPStatus"), ("TIMETRA-PORT-MIB", "tmnxPortReasonDownFlags"), ("TIMETRA-PORT-MIB", "tmnxPortSSMRxQualityLevel"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmLaserChannel"), ("TIMETRA-PORT-MIB", "tmnxPortOtuCapable"), ("TIMETRA-PORT-MIB", "tmnxSonetSuppressLoOrderAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV7v0 = tmnxPortGroupV7v0.setStatus('current')
tmnxPortNotifyObjsGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 65)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV7v0 = tmnxPortNotifyObjsGroupV7v0.setStatus('current')
tmnxPortNotificationGroupV7v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 66)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateChange"), ("TIMETRA-PORT-MIB", "tmnxPortUnsupportedFunction"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrLoopback"), ("TIMETRA-PORT-MIB", "tmnxEqPortWaveTrackerAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV7v0 = tmnxPortNotificationGroupV7v0.setStatus('obsolete')
tmnxPortEtherObsoleteV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 67)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEtherObsoleteV7v0Group = tmnxPortEtherObsoleteV7v0Group.setStatus('current')
tmnxPortTDMGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 68)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupBerSfLinkDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV7v0 = tmnxPortTDMGroupV7v0.setStatus('current')
tmnxPortTDME1GroupV6v1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 69)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS1NationalUseBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDME1GroupV6v1 = tmnxPortTDME1GroupV6v1.setStatus('current')
tmnxPortNotifyObjsGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 70)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyWTAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyIntDestId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyOrgString"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifySubIdent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV8v0 = tmnxPortNotifyObjsGroupV8v0.setStatus('current')
tmnxWaveTrackerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 71)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortWaveTrackerCapable"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerAlarmState"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerCfgAlarms"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerEncodeEnable"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerInUse"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerLowerPowerMargin"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerMaxAttainablePwr"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerMeasuredPower"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerMinAttainablePwr"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerPowerCtrlEnable"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerTargetPower"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerTrailName"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerUpperPowerMargin"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerWaveKey1"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerWaveKey2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxWaveTrackerGroup = tmnxWaveTrackerGroup.setStatus('current')
tmnxPortGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 72)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortHybridIngAccessWeight"), ("TIMETRA-PORT-MIB", "tmnxPortHybridIngNetworkWeight"), ("TIMETRA-PORT-MIB", "tmnxPortHybridEgrAccessWeight"), ("TIMETRA-PORT-MIB", "tmnxPortHybridEgrNetworkWeight"), ("TIMETRA-PORT-MIB", "tmnxPortInterfaceGroupHandlerIdx"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMCodeType"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMTxDus"), ("TIMETRA-PORT-MIB", "tmnxSonetTxDus"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverMBSBytes"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverMBSBytes"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverMBSBytes"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminPIRPercent"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminCIRPercent"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverRateType"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminPIRPercent"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminCIRPercent"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverRateType"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMLastChgd"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUnits"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMRowStatus"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMLastChgd"), ("TIMETRA-PORT-MIB", "tmnxSonetTxS1Byte"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMRxEsmc"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMTxQualityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV8v0 = tmnxPortGroupV8v0.setStatus('current')
tmnxPortDwdmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 73)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortDwdmLaserChannel"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmRxDtvAdjustEnable"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmRxDtvDacPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortDwdmGroup = tmnxPortDwdmGroup.setStatus('current')
tmnxPortATMGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 74)).setObjects(("TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMapping"), ("TIMETRA-PORT-MIB", "tmnxATMIntfCustomBufferMode"), ("TIMETRA-PORT-MIB", "tmnxATMIntfBufferPool"), ("TIMETRA-PORT-MIB", "tmnxATMIntfVcThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV7v0 = tmnxPortATMGroupV7v0.setStatus('current')
tmnxPortCEMGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 75)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortCemStatsReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsIgrForwardedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsIgrDroppedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrForwardedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrDroppedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMissingPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrPktsReOrder"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrJtrBfrURun"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrJtrBfrORun"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMisOrderDrop"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMalformedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrLBitDrop"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMultipleDrop"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrESs"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrSESs"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrUASs"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrFailureCounts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrURunCounts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrORunCounts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrJtrBfrDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortCEMGroupV8v0 = tmnxPortCEMGroupV8v0.setStatus('current')
tmnxPortQV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 76)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQV8v0Group = tmnxPortQV8v0Group.setStatus('current')
tmnxPortQObsoleteV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 77)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrQOverMBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverMBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverMBS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQObsoleteV8v0Group = tmnxPortQObsoleteV8v0Group.setStatus('current')
tmnxPortNotificationGroupV8v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 78)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateChange"), ("TIMETRA-PORT-MIB", "tmnxPortUnsupportedFunction"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrLoopback"), ("TIMETRA-PORT-MIB", "tmnxEqPortWaveTrackerAlarm"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHostMatchFailure"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHostMatchFailure"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortOpticalAmpAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortOpticalTdcmAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV8v0 = tmnxPortNotificationGroupV8v0.setStatus('current')
tmnxPortSchedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 79)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdOctsHi"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdOctsLo"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdPktsHi"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdPktsLo"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdOctsHi"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdOctsLo"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdPktsHi"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdPktsLo"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdOctsHi"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdOctsLo"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdPktsHi"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdPktsLo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSchedStatsGroup = tmnxPortSchedStatsGroup.setStatus('current')
tmnxPortVPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 80)).setObjects(("TIMETRA-PORT-MIB", "tPortEgrVPortDescr"), ("TIMETRA-PORT-MIB", "tPortEgrVPortLastChanged"), ("TIMETRA-PORT-MIB", "tPortEgrVPortRowStatus"), ("TIMETRA-PORT-MIB", "tPortEgrVPortSchedPol"), ("TIMETRA-PORT-MIB", "tPortEgrVPortTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMTableLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortVPortGroup = tmnxPortVPortGroup.setStatus('obsolete')
tmnxMlpppBundleGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 81)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlpppStatelessApsSwo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlpppBundleGroupV7v0 = tmnxMlpppBundleGroupV7v0.setStatus('current')
tmnxOpticalPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 82)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpCfgAlarms"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCtrlMode"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmManCfgDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCfgRxChan"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCfgAlarms"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortHasRxAmplifier"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortHasRxTdcm"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPowerIn"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpGain"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPowerOut"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPumpTemp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpModuleTemp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPumpCurrent"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpAlarmState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpSerialNum"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpCtrlState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmPowerIn"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmLoss"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmPowerOut"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd1Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd2Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd3Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd4Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmModuleTemp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmMinDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmMaxDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmAutoDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmMeasDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmPresRxChan"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmAlarmState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmSerialNum"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCtrlState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmDispSwpStart"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmDispSwpEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOpticalPortGroup = tmnxOpticalPortGroup.setStatus('current')
tmnxPortATMGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 90)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperTblLastCh"), ("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperLastMgmtCh"), ("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperEgrAtd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV9v0 = tmnxPortATMGroupV9v0.setStatus('current')
tmnxPortVPortV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 91)).setObjects(("TIMETRA-PORT-MIB", "tPortEgrVPortDescr"), ("TIMETRA-PORT-MIB", "tPortEgrVPortLastChanged"), ("TIMETRA-PORT-MIB", "tPortEgrVPortRowStatus"), ("TIMETRA-PORT-MIB", "tPortEgrVPortSchedPol"), ("TIMETRA-PORT-MIB", "tPortEgrVPortTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortEgrVPortAggRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortVPortV9v0Group = tmnxPortVPortV9v0Group.setStatus('current')
tmnxPortEgrExpShaperV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 92)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperTblLastChngd"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperRate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass1Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass2Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass3Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass4Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass5Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass6Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass7Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass8Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass1Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass2Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass3Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass4Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass5Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass6Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass7Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass8Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperLoBrstMaxCls"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperStLstClrdTime"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStMonOvrOH"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperThresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperLoBurstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperHiBurstInc"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl1BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl2BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl3BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl4BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl5BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl6BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl7BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl8BrstLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEgrExpShaperV9v0Group = tmnxPortEgrExpShaperV9v0Group.setStatus('current')
tmnxPortNotificationGroupV9v4 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 93)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqSonetClockSrcNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqSonetSfThreshNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqSonetFramingNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV9v4 = tmnxPortNotificationGroupV9v4.setStatus('current')
tmnxPortObjAppV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 94)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjectAppResvCbsAmbrAlrmStep"), ("TIMETRA-PORT-MIB", "tmnxObjectAppResvCbsAmbrAlrmMax"), ("TIMETRA-PORT-MIB", "tmnxObjectAppAmbrAlrmThresh"), ("TIMETRA-PORT-MIB", "tmnxObjectAppRedAlrmThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObjAppV9v0Group = tmnxPortObjAppV9v0Group.setStatus('current')
tmnxOpticalPortGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 95)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortDwdmChannelMin"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortDwdmChannelMax"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortLaserTunability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOpticalPortGroupV9v0 = tmnxOpticalPortGroupV9v0.setStatus('current')
tmnxPortNotifyObjsGroupV8v9 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 96)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV8v9 = tmnxPortNotifyObjsGroupV8v9.setStatus('current')
tmnxPortNotificationGroupV8v9 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 97)).setObjects(("TIMETRA-PORT-MIB", "tmnxResvCbsPoolThreshGreen"), ("TIMETRA-PORT-MIB", "tmnxResvCbsPoolThreshAmber"), ("TIMETRA-PORT-MIB", "tmnxResvCbsPoolThreshRed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV8v9 = tmnxPortNotificationGroupV8v9.setStatus('current')
tmnxPortEgrVPortStatsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 99)).setObjects(("TIMETRA-PORT-MIB", "tPortEgrVPStLstClrdTime"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdPkt"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdOct"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdPkt"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdOct"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdPktL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdPktH"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdOctL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdOctH"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdPktL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdPktH"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdOctL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdOctH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEgrVPortStatsV9v0Group = tmnxPortEgrVPortStatsV9v0Group.setStatus('current')
tmnxPortNotifyObjsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 100)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcAlarmValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsV9v0Group = tmnxPortNotifyObjsV9v0Group.setStatus('current')
tmnxPortEtherV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 101)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSdTMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSfTMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonWindowSize"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownOnInternalError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEtherV9v0Group = tmnxPortEtherV9v0Group.setStatus('current')
tmnxPortNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 102)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortEtherCrcAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherCrcAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherInternalAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherInternalAlarmClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationV9v0Group = tmnxPortNotificationV9v0Group.setStatus('current')
tmnxPortV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 103)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortLinkLengthInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortV9v0Group = tmnxPortV9v0Group.setStatus('current')
tmnxPortNetEgrV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 104)).setObjects(("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPlcrCntrlPolicy"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStatMode"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolPktOff"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolPktOffL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolPktOffH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolOctOff"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolOctOffL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolOctOffH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdOctsH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNetEgrV10v0Group = tmnxPortNetEgrV10v0Group.setStatus('current')
tmnxDDMLaneGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 105)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortSFPNumLanes"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTemperature"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrent"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPower"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPower"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPowerType"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneFailedThresholds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDDMLaneGroupV10v0 = tmnxDDMLaneGroupV10v0.setStatus('current')
tmnxPortNotifyObjsGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 106)).setObjects(("TIMETRA-PORT-MIB", "tmnxDDMLaneIdOrModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV10v0 = tmnxPortNotifyObjsGroupV10v0.setStatus('current')
tmnxPortPlcyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 107)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortPlcyTableLastCh"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyLastCh"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyDescription"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyEgrPortSchedPlcy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortPlcyGroup = tmnxPortPlcyGroup.setStatus('current')
tmnxPortLoadBalGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 108)).setObjects(("TIMETRA-PORT-MIB", "tmnxIpLoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortLoadBalGroupV10v0 = tmnxPortLoadBalGroupV10v0.setStatus('current')
tmnxPortEthernetV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 109)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMinFrameLength"), ("TIMETRA-PORT-MIB", "tmnxPortPhysStateChangeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV10v0Group = tmnxPortEthernetV10v0Group.setStatus('current')
tmnxHsmdaGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 110)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrHsmdaSchedPlcy"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrTblLastChngd"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrRowStatus"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrLastChanged"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrMaxRate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8WtInGp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxHsmdaGroupV10v0 = tmnxHsmdaGroupV10v0.setStatus('current')
tmnxPortObsoletedV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 111)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrShaperTblLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObsoletedV10v0Group = tmnxPortObsoletedV10v0Group.setStatus('current')
tmnxPwPortV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 112)).setObjects(("TIMETRA-PORT-MIB", "tmnxPwPortTblLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPwPortRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPwPortLastChgd"), ("TIMETRA-PORT-MIB", "tmnxPwPortEncapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPwPortV10v0Group = tmnxPwPortV10v0Group.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxFRDlcmiRxStatusEnqMsgs=tmnxFRDlcmiRxStatusEnqMsgs, tmnxPortComp7710V6v1=tmnxPortComp7710V6v1, tmnxBundleMlpppEgrQoSProfId=tmnxBundleMlpppEgrQoSProfId, tmnxDS1LastChangeTime=tmnxDS1LastChangeTime, tPortAccEgrQOverTableLastChgd=tPortAccEgrQOverTableLastChgd, TmnxPortEtherCrcMonReportStatus=TmnxPortEtherCrcMonReportStatus, TmnxImaGrpState=TmnxImaGrpState, tmnxPortTestLastResult=tmnxPortTestLastResult, tmnxSonetGroupName=tmnxSonetGroupName, tPortAccEgrQOverAdminPIR=tPortAccEgrQOverAdminPIR, tmnxDSXClockSyncStateObject=tmnxDSXClockSyncStateObject, tmnxDDMTxBiasCurrentHiAlarm=tmnxDDMTxBiasCurrentHiAlarm, tmnxPortATMGroupV9v0=tmnxPortATMGroupV9v0, tmnxFRDlcmiTxStatusEnqMsgs=tmnxFRDlcmiTxStatusEnqMsgs, tPortEgrExpShaperCls7StFwdPkts=tPortEgrExpShaperCls7StFwdPkts, tPortNetEgrQGrpPStatQosPolicerId=tPortNetEgrQGrpPStatQosPolicerId, tmnxPortNotification=tmnxPortNotification, tmnxPortIngrMdaQos09StatDropOcts=tmnxPortIngrMdaQos09StatDropOcts, tmnxDS1PortLastChangeTime=tmnxDS1PortLastChangeTime, tmnxPortEtherCrcMonSdThreshold=tmnxPortEtherCrcMonSdThreshold, tmnxOpticalPortCfgTable=tmnxOpticalPortCfgTable, tmnxBundleMemberImaFeUnavailSecs=tmnxBundleMemberImaFeUnavailSecs, tPortEgrExpShaperCls1StFwdOcts=tPortEgrExpShaperCls1StFwdOcts, tPortNetEgrQGrpPStOffInProfOctH=tPortNetEgrQGrpPStOffInProfOctH, tmnxPortIngrMdaQos10StatDropPkts=tmnxPortIngrMdaQos10StatDropPkts, tPortEgrExpShaperCls3StFwdPktsL=tPortEgrExpShaperCls3StFwdPktsL, tmnxPortEgrExpShaperClass8Thresh=tmnxPortEgrExpShaperClass8Thresh, tPortNetEgrQGrpPStDrpInProfOctL=tPortNetEgrQGrpPStDrpInProfOctL, tmnxObjAppResvCbsOld=tmnxObjAppResvCbsOld, tmnxPortFCStatsEgrDroInProfPkts=tmnxPortFCStatsEgrDroInProfPkts, tmnxPortHwMacAddress=tmnxPortHwMacAddress, tmnxDS3ChannelFraming=tmnxDS3ChannelFraming, tPortEgrExpShaperCls1StFwdPktsL=tPortEgrExpShaperCls1StFwdPktsL, tmnxPortFCStatsEgrFwdInProfPkts=tmnxPortFCStatsEgrFwdInProfPkts, tmnxPortNetIngressDroOutProfPkts=tmnxPortNetIngressDroOutProfPkts, tmnxPortGroupV5v0=tmnxPortGroupV5v0, tmnxPortTestEndTime=tmnxPortTestEndTime, tmnxPortNotificationV9v0Group=tmnxPortNotificationV9v0Group, tmnxPortCemStatsTable=tmnxPortCemStatsTable, tmnxPortNetEgrQDroOutProfOcts=tmnxPortNetEgrQDroOutProfOcts, tmnxDDMExtCalRxPower0=tmnxDDMExtCalRxPower0, tmnxPortEgrExpShaperName=tmnxPortEgrExpShaperName, tmnxHsmdaPortSchOvrClass3Rate=tmnxHsmdaPortSchOvrClass3Rate, tmnxEqPortWaveTrackerAlarm=tmnxEqPortWaveTrackerAlarm, tmnxDigitalDiagMonitorGroup=tmnxDigitalDiagMonitorGroup, tmnxBundleImaGrpSmDownSecs=tmnxBundleImaGrpSmDownSecs, tmnxBundleMemberImaFeSevErrSecs=tmnxBundleMemberImaFeSevErrSecs, tmnxPortNotifyObjsGroupV7v0=tmnxPortNotifyObjsGroupV7v0, tmnxPortEtherCrcMonSfTMultiplier=tmnxPortEtherCrcMonSfTMultiplier, tmnxDS3Entry=tmnxDS3Entry, tmnxPortComp7450V6v0=tmnxPortComp7450V6v0, tPortNetEgrQGrpPStFwdOutProfPkt=tPortNetEgrQGrpPStFwdOutProfPkt, tmnxCiscoHDLCOperState=tmnxCiscoHDLCOperState, tmnxPortTransceiverCode=tmnxPortTransceiverCode, tmnxDS1RemoteLoopRespond=tmnxDS1RemoteLoopRespond, tmnxPortTestGroup=tmnxPortTestGroup, tmnxSonetTxS1Byte=tmnxSonetTxS1Byte, tmnxPortChanType=tmnxPortChanType, tmnxPortEgrShaperLastChanged=tmnxPortEgrShaperLastChanged, tPortAccIngQGrpSchedPol=tPortAccIngQGrpSchedPol, tPortNetEgrQGrpPStOffOutProfPktL=tPortNetEgrQGrpPStOffOutProfPktL, tmnxPortSchedOverrideRowStatus=tmnxPortSchedOverrideRowStatus, tmnxHsmdaPortSchOvrGrp1Rate=tmnxHsmdaPortSchOvrGrp1Rate, tmnxPortNetEgressFwdInProfPkts=tmnxPortNetEgressFwdInProfPkts, tmnxEqPortEtherInternalAlarmClr=tmnxEqPortEtherInternalAlarmClr, tmnxMlpppBundleGroupV7v0=tmnxMlpppBundleGroupV7v0, tmnxPortConnectorType=tmnxPortConnectorType, tPortNetEgrQGrpArbitStatFwdOcts=tPortNetEgrQGrpArbitStatFwdOcts, tPortEgrExpShaperCls6StFwdOctsH=tPortEgrExpShaperCls6StFwdOctsH, tmnxOpticalPortOperEntry=tmnxOpticalPortOperEntry, tPortNetEgrQGrpPStUncolPktOffL=tPortNetEgrQGrpPStUncolPktOffL, tmnxBundleMlfrIngQoSProfId=tmnxBundleMlfrIngQoSProfId, tmnxPortEgrExpShaperClass1Thresh=tmnxPortEgrExpShaperClass1Thresh, tmnxOpticalPortTdcmPowerIn=tmnxOpticalPortTdcmPowerIn, tPortEgrExpShaperCls4StMonOvrOct=tPortEgrExpShaperCls4StMonOvrOct, tmnxBundleBundleID=tmnxBundleBundleID, tmnxDS1BerSdThreshold=tmnxDS1BerSdThreshold, tmnxHsmdaPortSchOvrClass3WtInGp=tmnxHsmdaPortSchOvrClass3WtInGp, tmnxBundleProtectedType=tmnxBundleProtectedType, tPortEgrExpShaperCls3StFwdPkts=tPortEgrExpShaperCls3StFwdPkts, tPortEgrExpShaperCls6StFwdPktsH=tPortEgrExpShaperCls6StFwdPktsH, tPortEgrExpShaperCls5StFwdOctsL=tPortEgrExpShaperCls5StFwdOctsL, tmnxPortEtherCrcMonSfThreshold=tmnxPortEtherCrcMonSfThreshold, tPortEgrVPStLvlDpdPktH=tPortEgrVPStLvlDpdPktH, tmnxSonetPathLastChangeTime=tmnxSonetPathLastChangeTime, tmnxPortVPortGroup=tmnxPortVPortGroup, tmnxDS1InvertData=tmnxDS1InvertData, tmnxBundleUpTime=tmnxBundleUpTime, tmnxBundleImaGrpMaxConfBw=tmnxBundleImaGrpMaxConfBw, tPortNetEgrSchedStatFwdOctsHi=tPortNetEgrSchedStatFwdOctsHi, tmnxBundleRedDiffDelay=tmnxBundleRedDiffDelay, tmnxPortAdminStatus=tmnxPortAdminStatus, tmnxPortFCStatsIngFwdOutProfPkts=tmnxPortFCStatsIngFwdOutProfPkts, tmnxPortIngrMdaQos15StatDropOcts=tmnxPortIngrMdaQos15StatDropOcts, tmnxPortNotifyPrefix=tmnxPortNotifyPrefix, tmnxPortNotifyDS3AlarmReason=tmnxPortNotifyDS3AlarmReason, tPortAccEgrSchedStatTable=tPortAccEgrSchedStatTable, tmnxPortEtherReportAlarm=tmnxPortEtherReportAlarm, tmnxCiscoHDLCStatsTable=tmnxCiscoHDLCStatsTable, tmnxSonetPathEntry=tmnxSonetPathEntry, tmnxObjNamedPoolPolicy=tmnxObjNamedPoolPolicy, tmnxPortEtherSingleFiber=tmnxPortEtherSingleFiber, tmnxBundleFragmentThreshold=tmnxBundleFragmentThreshold, tPortAccEgrQOverCBS=tPortAccEgrQOverCBS, tmnxSonetReportAlarm=tmnxSonetReportAlarm, tmnxSonetTable=tmnxSonetTable, tPortEgrExpShaperCls4StFwdPktsH=tPortEgrExpShaperCls4StFwdPktsH, tmnxDS3ChannelReportAlarmStatus=tmnxDS3ChannelReportAlarmStatus, tmnxPortNotificationGroupV9v4=tmnxPortNotificationGroupV9v4, tmnxPortNetEgressFwdInProfOcts=tmnxPortNetEgressFwdInProfOcts, tmnxPortIngQosQStatOffHiPrioPkts=tmnxPortIngQosQStatOffHiPrioPkts, tmnxSonetPathMTU=tmnxSonetPathMTU, TmnxDSXReportAlarm=TmnxDSXReportAlarm, tPortNetEgrQGrpArbitStatFwdPkts=tPortNetEgrQGrpArbitStatFwdPkts, tmnxPortDDMEventSuppression=tmnxPortDDMEventSuppression, tmnxSonetPathChildType=tmnxSonetPathChildType, tmnxEqPortEtherAlarmClear=tmnxEqPortEtherAlarmClear, tmnxBundleMlpppEntry=tmnxBundleMlpppEntry, tmnxPortEgrExpShaperClass7Rate=tmnxPortEgrExpShaperClass7Rate, tPortNetEgrQGrpPStOffInProfPkt=tPortNetEgrQGrpPStOffInProfPkt, tmnxDS3ChannelType=tmnxDS3ChannelType, tmnxBundleMlfrHelloRetryCount=tmnxBundleMlfrHelloRetryCount, tPortEgrExpShaperCls5StFwdPktsL=tPortEgrExpShaperCls5StFwdPktsL, tmnxPortIngQosQStatFwdInProfPkts=tmnxPortIngQosQStatFwdInProfPkts, tmnxPortToChannelTable=tmnxPortToChannelTable, tmnxBundleMlfrEgrQoSProfId=tmnxBundleMlfrEgrQoSProfId, tmnxPortEgrExpShaperClass6Thresh=tmnxPortEgrExpShaperClass6Thresh, tmnxL4LoadBalancing=tmnxL4LoadBalancing, tmnxHsmdaPortSchOvrClass5Rate=tmnxHsmdaPortSchOvrClass5Rate, tmnxDDMAux1LowAlarm=tmnxDDMAux1LowAlarm, tmnxPortSchedOverrideLvl5PIR=tmnxPortSchedOverrideLvl5PIR, tmnxDigitalDiagMonitorEntry=tmnxDigitalDiagMonitorEntry, tmnxPortVPortV9v0Group=tmnxPortVPortV9v0Group, tmnxDS3Buildout=tmnxDS3Buildout, tmnxPortEgrExpShaperCl3BrstLimit=tmnxPortEgrExpShaperCl3BrstLimit, tmnxPortSchedOverrideLvl5CIR=tmnxPortSchedOverrideLvl5CIR, tmnxPortCemStatsEgrUASs=tmnxPortCemStatsEgrUASs, tmnxPortEthernetV5v0Group=tmnxPortEthernetV5v0Group, tmnxEqPortDS3Alarm=tmnxEqPortDS3Alarm, tmnxPortIngrMdaQos01StatDropOcts=tmnxPortIngrMdaQos01StatDropOcts, tmnxSonetFraming=tmnxSonetFraming, tmnxPortDwdmRxDtvDacPercent=tmnxPortDwdmRxDtvDacPercent, tmnxPortNetEgrQFwdOutProfOcts=tmnxPortNetEgrQFwdOutProfOcts, tmnxPortUpProtocols=tmnxPortUpProtocols, tmnxHsmdaPortSchOvrClass6WtInGp=tmnxHsmdaPortSchOvrClass6WtInGp, tmnxPortNotificationGroupV7v0=tmnxPortNotificationGroupV7v0, tmnxPortEtherEgressRate=tmnxPortEtherEgressRate, tmnxDS1PortDbGain=tmnxDS1PortDbGain, tmnxWaveTrackerMeasuredPower=tmnxWaveTrackerMeasuredPower, tPortEgrVPStLvlFwdOctH=tPortEgrVPStLvlFwdOctH, tPortEgrExpShaperCls5StFwdOctsH=tPortEgrExpShaperCls5StFwdOctsH, tmnxPortEtherQinqEtype=tmnxPortEtherQinqEtype, tmnxPortLoadBalGroupV10v0=tmnxPortLoadBalGroupV10v0, tmnxPortEtherReportAlarmStatus=tmnxPortEtherReportAlarmStatus, tmnxPortATMVpShaperTblLastCh=tmnxPortATMVpShaperTblLastCh, tmnxPortFCStatsIngDroOutProfOcts=tmnxPortFCStatsIngDroOutProfOcts, tPortEgrExpShaperCls5StFwdOcts=tPortEgrExpShaperCls5StFwdOcts, TmnxPortClass=TmnxPortClass, tmnxHsmdaPortSchOvrClass8Rate=tmnxHsmdaPortSchOvrClass8Rate, tmnxEqPortEtherInternalAlarm=tmnxEqPortEtherInternalAlarm, tmnxDS1BERTOperStatus=tmnxDS1BERTOperStatus, tmnxOpticalPortTdcmCfgRxChan=tmnxOpticalPortTdcmCfgRxChan, tmnxPortHybridIngNetworkWeight=tmnxPortHybridIngNetworkWeight, tmnxDDMLaneTempHiAlarm=tmnxDDMLaneTempHiAlarm, tPortEgrExpShaperCls4StFwdPkts=tPortEgrExpShaperCls4StFwdPkts, tmnxPortEgrHsmdaSchedPlcy=tmnxPortEgrHsmdaSchedPlcy, tPortNetEgrQGrpPStFwdOutProfPktL=tPortNetEgrQGrpPStFwdOutProfPktL, tmnxPortName=tmnxPortName, tmnxEqPortSonetAlarm=tmnxEqPortSonetAlarm, tPortNetEgrQGrpPStFwdInProfPktL=tPortNetEgrQGrpPStFwdInProfPktL, tmnxSonetPathAcctPolicyId=tmnxSonetPathAcctPolicyId, tmnxPortTDMGroupV7v0=tmnxPortTDMGroupV7v0, tmnxDSXClockSyncStateChange=tmnxDSXClockSyncStateChange, tmnxQosPoolAppEntry=tmnxQosPoolAppEntry, tmnxCiscoHDLCEntry=tmnxCiscoHDLCEntry, tPortAccEgrQGrpRowStatus=tPortAccEgrQGrpRowStatus, tmnxPortTypeEntry=tmnxPortTypeEntry, tmnxObjectAppResvCbs=tmnxObjectAppResvCbs, tmnxBundleImaGrpRxRefLnk=tmnxBundleImaGrpRxRefLnk, tmnxPortEgrExpShaperClass6Rate=tmnxPortEgrExpShaperClass6Rate, tmnxPortEtherEntry=tmnxPortEtherEntry, tmnxHsmdaPortSchOvrClass8WtInGp=tmnxHsmdaPortSchOvrClass8WtInGp, tmnxBundleImaGrpRxOamLablVal=tmnxBundleImaGrpRxOamLablVal, tPortEgrExpShaperCls1StFwdOctsL=tPortEgrExpShaperCls1StFwdOctsL, tmnxFRDlcmiN393Dce=tmnxFRDlcmiN393Dce, tmnxPortEgrQosQStatDpdInProfPkts=tmnxPortEgrQosQStatDpdInProfPkts, tmnxSonetPathCollectStats=tmnxSonetPathCollectStats, tmnxSonetSDHLoopbackStarted=tmnxSonetSDHLoopbackStarted, tPortEgrExpShaperCls4StFwdOcts=tPortEgrExpShaperCls4StFwdOcts, tPortEgrExpShaperCls4StFwdOctsH=tPortEgrExpShaperCls4StFwdOctsH, tmnxMlBundleGroupV6v0=tmnxMlBundleGroupV6v0, tmnxBundleImaGrpLnkActTimer=tmnxBundleImaGrpLnkActTimer, tmnxPortTDME1GroupV6v1=tmnxPortTDME1GroupV6v1, tmnxWaveTrackerTrailName=tmnxWaveTrackerTrailName, tmnxBundleMemberEntry=tmnxBundleMemberEntry, tPortAccEgrQOverLastChanged=tPortAccEgrQOverLastChanged, tmnxBundleImaGrpAvailTxCR=tmnxBundleImaGrpAvailTxCR, tmnxPortIngQosQStatTable=tmnxPortIngQosQStatTable, tmnxDS3ChannelCRC=tmnxDS3ChannelCRC, tmnxPortPlcyGroup=tmnxPortPlcyGroup, tmnxBundleImaGrpAlphaValue=tmnxBundleImaGrpAlphaValue, tPortNetEgrQGrpPStUncolPktOff=tPortNetEgrQGrpPStUncolPktOff, tmnxPortNotifyObjsGroupV8v0=tmnxPortNotifyObjsGroupV8v0, tmnxSonetGroupChildType=tmnxSonetGroupChildType, tmnxDDMTxBiasCurrentLowAlarm=tmnxDDMTxBiasCurrentLowAlarm, tmnxDDMAux2Type=tmnxDDMAux2Type, tPortEgrExpShaperCls1StMonOvrOct=tPortEgrExpShaperCls1StMonOvrOct, tmnxDDMExtCalRxPower1=tmnxDDMExtCalRxPower1, tmnxDS3ChannelReportAlarm=tmnxDS3ChannelReportAlarm, tmnxPortCemStatsEgrMissingPkts=tmnxPortCemStatsEgrMissingPkts, tmnxDDMExtCalTxLaserBiasOffset=tmnxDDMExtCalTxLaserBiasOffset, tmnxPortFCStatsIngDroInProfOcts=tmnxPortFCStatsIngDroInProfOcts, tmnxEqPortWrongSFP=tmnxEqPortWrongSFP, tmnxDS3ChannelBERTDuration=tmnxDS3ChannelBERTDuration, TmnxDSXClockSyncState=TmnxDSXClockSyncState, tmnxDDMLaneTxBiasCurrentHiAlarm=tmnxDDMLaneTxBiasCurrentHiAlarm, tPortEgrExpShaperCls8StFwdPktsH=tPortEgrExpShaperCls8StFwdPktsH, tmnxPwPortRowStatus=tmnxPwPortRowStatus, tPortEgrExpShaperAggStFwdPktsL=tPortEgrExpShaperAggStFwdPktsL, tmnxPortFCStatsIngFwdInProfPkts=tmnxPortFCStatsIngFwdInProfPkts, tmnxDS0ChanGroupSpeed=tmnxDS0ChanGroupSpeed, tmnxOpticalPortTdcmAutoDisp=tmnxOpticalPortTdcmAutoDisp, tmnxBundleLastChangeTime=tmnxBundleLastChangeTime, tmnxHsmdaPortSchOvrClass1WtInGp=tmnxHsmdaPortSchOvrClass1WtInGp, tmnxPortTestParameter=tmnxPortTestParameter, tPortEgrVPortHostMatchTable=tPortEgrVPortHostMatchTable, tmnxSonetReportAlarmStatus=tmnxSonetReportAlarmStatus, tmnxPortNetEgrQStatEntry=tmnxPortNetEgrQStatEntry, tPortEgrExpShaperCls8StFwdPkts=tPortEgrExpShaperCls8StFwdPkts, tmnxPortObsoletedV10v0Group=tmnxPortObsoletedV10v0Group, tmnxPortIngrMdaQos02StatDropPkts=tmnxPortIngrMdaQos02StatDropPkts, tPortEgrVPortTableLastChgd=tPortEgrVPortTableLastChgd, tmnxPortEgrExpShaperTable=tmnxPortEgrExpShaperTable, tPortEgrExpShaperAggStMonOvrOH=tPortEgrExpShaperAggStMonOvrOH, tmnxPortCemStatsEgrESs=tmnxPortCemStatsEgrESs, tmnxPortObsoleteGroup=tmnxPortObsoleteGroup, tmnxDDMExternallyCalibrated=tmnxDDMExternallyCalibrated, tmnxBundleMemberImaFeTxState=tmnxBundleMemberImaFeTxState, tPortEgrExpShaperCls5StMonOvrOct=tPortEgrExpShaperCls5StMonOvrOct, tmnxOpticalPortHasRxTdcm=tmnxOpticalPortHasRxTdcm, tmnxPortEgrQosQStatDpdOutProfPkts=tmnxPortEgrQosQStatDpdOutProfPkts, tmnxPortCemGroupV6v0=tmnxPortCemGroupV6v0, tmnxCiscoHDLCStatInOctets=tmnxCiscoHDLCStatInOctets, tPortAccEgrQGrpAcctgPolId=tPortAccEgrQGrpAcctgPolId, tmnxPwPortTblLastChanged=tmnxPwPortTblLastChanged, tmnxBundleImaGrpSymmetryMode=tmnxBundleImaGrpSymmetryMode, tmnxDDMLaneRxOpticalPwrLowWarn=tmnxDDMLaneRxOpticalPwrLowWarn, tmnxFRDlcmiInvRxSeqNumMsgs=tmnxFRDlcmiInvRxSeqNumMsgs, TmnxPortEtherReportValue=TmnxPortEtherReportValue, tmnxHsmdaPortSchOvrClass2Rate=tmnxHsmdaPortSchOvrClass2Rate, tmnxHsmdaPortSchOvrTable=tmnxHsmdaPortSchOvrTable, tmnxDS0ChanGroupCollectStats=tmnxDS0ChanGroupCollectStats, tmnxPortConnectTypeTable=tmnxPortConnectTypeTable, tmnxCiscoHDLCDiscardStatOutPkts=tmnxCiscoHDLCDiscardStatOutPkts)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxSonetPathMonJ1String=tmnxSonetPathMonJ1String, tmnxPortSchedOverrideLvl6PIR=tmnxPortSchedOverrideLvl6PIR, tmnxPortFCStatsEgrDroOutProfOcts=tmnxPortFCStatsEgrDroOutProfOcts, tmnxPortNotifyObjsGroupV10v0=tmnxPortNotifyObjsGroupV10v0, tmnxDDMLaneTxBiasCurrentLowWarn=tmnxDDMLaneTxBiasCurrentLowWarn, tPortEgrVPStLvl=tPortEgrVPStLvl, tPortEgrExpShaperCls8StFwdOctsH=tPortEgrExpShaperCls8StFwdOctsH, tmnxHsmdaPortSchOvrEntry=tmnxHsmdaPortSchOvrEntry, tPortNetEgrQGrpPStDrpInProfOctH=tPortNetEgrQGrpPStDrpInProfOctH, tmnxScalarPortV3v0Group=tmnxScalarPortV3v0Group, tPortEgrVPortAggStatsTable=tPortEgrVPortAggStatsTable, tmnxMcMlpppStatsEntry=tmnxMcMlpppStatsEntry, tmnxPortSchedOverrideMaxRate=tmnxPortSchedOverrideMaxRate, tmnxPortCemStatsEgrMalformedPkts=tmnxPortCemStatsEgrMalformedPkts, tmnxDS1BERTDuration=tmnxDS1BERTDuration, tPortAccIngQOverAdminCIR=tPortAccIngQOverAdminCIR, tmnxBundleMemberImaNeRxFailState=tmnxBundleMemberImaNeRxFailState, tmnxDS1IdleCycleFlags=tmnxDS1IdleCycleFlags, tmnxBundleMemberImaNeRxState=tmnxBundleMemberImaNeRxState, tPortEgrExpShaperCls2StFwdPktsL=tPortEgrExpShaperCls2StFwdPktsL, tmnxPortSchedOverrideLvl4CIR=tmnxPortSchedOverrideLvl4CIR, tmnxPortNotificationGroupV8v0=tmnxPortNotificationGroupV8v0, tmnxDS3ChannelMDLMessageType=tmnxDS3ChannelMDLMessageType, tmnxDS1BERTSynched=tmnxDS1BERTSynched, tPortEgrVPortHostMatchEntry=tPortEgrVPortHostMatchEntry, tmnxPortIngrMdaQos14StatDropOcts=tmnxPortIngrMdaQos14StatDropOcts, tPortAccEgrSchedStatFwdOctsLo=tPortAccEgrSchedStatFwdOctsLo, tPortEgrExpShaperCls6StMonOvrOL=tPortEgrExpShaperCls6StMonOvrOL, tPortNetEgrSchedStatName=tPortNetEgrSchedStatName, tmnxSonetGroupTable=tmnxSonetGroupTable, tmnxDS3E3LoopbackStarted=tmnxDS3E3LoopbackStarted, tmnxDDMLaneTxOutputPowerLowWarn=tmnxDDMLaneTxOutputPowerLowWarn, tPortNetEgrQGrpArbitStatFwdOctsH=tPortNetEgrQGrpArbitStatFwdOctsH, tmnxDS0ChanGroupEntry=tmnxDS0ChanGroupEntry, tPortEgrExpShaperCls6StMonOvrOH=tPortEgrExpShaperCls6StMonOvrOH, tmnxDS0ChanGroupSignalPattern=tmnxDS0ChanGroupSignalPattern, tmnxBundleEntry=tmnxBundleEntry, tmnxOpticalPortAmpModuleTemp=tmnxOpticalPortAmpModuleTemp, tmnxDS3ChannelMTU=tmnxDS3ChannelMTU, tmnxPortNotifyObsoleteGroup=tmnxPortNotifyObsoleteGroup, tmnxPortCEMGroupV8v0=tmnxPortCEMGroupV8v0, tmnxEqPortBndlRedDiffExceeded=tmnxEqPortBndlRedDiffExceeded, tmnxPortSchedOverrideEntry=tmnxPortSchedOverrideEntry, tmnxDDMRxOpticalPowerLowAlarm=tmnxDDMRxOpticalPowerLowAlarm, tmnxPortComp7450=tmnxPortComp7450, tmnxDDMFailedThresholds=tmnxDDMFailedThresholds, tmnxSonetSingleFiber=tmnxSonetSingleFiber, tmnxBundleImaGrpTxRefLnk=tmnxBundleImaGrpTxRefLnk, tmnxEqPortSFPRemoved=tmnxEqPortSFPRemoved, tmnxPortEntry=tmnxPortEntry, tmnxPortEgrExpShaperCl2BrstLimit=tmnxPortEgrExpShaperCl2BrstLimit, tmnxDS3ChannelFEACLoopRespond=tmnxDS3ChannelFEACLoopRespond, tmnxDS1PortLineLength=tmnxDS1PortLineLength, tmnxDDMExtCalTxPowerOffset=tmnxDDMExtCalTxPowerOffset, tmnxBundleMlfrAckTimer=tmnxBundleMlfrAckTimer, tPortAccIngQOverRowStatus=tPortAccIngQOverRowStatus, tPortEgrVPortSchedPol=tPortEgrVPortSchedPol, tmnxDDMRxOpticalPowerType=tmnxDDMRxOpticalPowerType, tmnxBPGrpAssocEntry=tmnxBPGrpAssocEntry, tmnxEqPortSFPCorrupted=tmnxEqPortSFPCorrupted, tmnxHsmdaPortSchOvrClass7WtInGp=tmnxHsmdaPortSchOvrClass7WtInGp, TmnxDSXLoopback=TmnxDSXLoopback, tmnxPortNumAlarms=tmnxPortNumAlarms, tmnxPortIngrMdaQos15StatDropPkts=tmnxPortIngrMdaQos15StatDropPkts, tmnxDDMRxOpticalPowerHiWarning=tmnxDDMRxOpticalPowerHiWarning, tmnxBundleMemberImaFeRxUnuseSecs=tmnxBundleMemberImaFeRxUnuseSecs, tmnxATMIntfTable=tmnxATMIntfTable, tmnxWaveTrackerWaveKey1=tmnxWaveTrackerWaveKey1, tmnxBundleImaGrpSmFailState=tmnxBundleImaGrpSmFailState, tmnxPortEgrExpShaperRate=tmnxPortEgrExpShaperRate, tmnxPortIngrMdaQos07StatDropPkts=tmnxPortIngrMdaQos07StatDropPkts, tmnxBundleMemberImaRxTestPattern=tmnxBundleMemberImaRxTestPattern, tmnxEqPortSonetPathAlarmClear=tmnxEqPortSonetPathAlarmClear, tmnxOpticalPortTdcmPresRxChan=tmnxOpticalPortTdcmPresRxChan, tPortEgrExpShaperStatsHLTable=tPortEgrExpShaperStatsHLTable, tmnxPortEtherSSM=tmnxPortEtherSSM, tmnxFRDlcmiTxStatusMsgs=tmnxFRDlcmiTxStatusMsgs, tmnxPortEgrExpShaperClass7Thresh=tmnxPortEgrExpShaperClass7Thresh, tmnxPortATMVpShaperVpi=tmnxPortATMVpShaperVpi, tmnxFrf12IntfGroup=tmnxFrf12IntfGroup, tPortNetEgrQGrpPStDrpInProfOct=tPortNetEgrQGrpPStDrpInProfOct, tmnxPortWaveTrackerCapable=tmnxPortWaveTrackerCapable, tmnxWaveTrackerLowerPowerMargin=tmnxWaveTrackerLowerPowerMargin, tPortEgrVPStLvlFwdPktL=tPortEgrVPStLvlFwdPktL, tmnxDS0ChanGroupPayloadPattern=tmnxDS0ChanGroupPayloadPattern, tPortNetEgrQOverAdminPIR=tPortNetEgrQOverAdminPIR, tmnxSonetSectionTraceMode=tmnxSonetSectionTraceMode, tmnxObjectAppPoolRowStatus=tmnxObjectAppPoolRowStatus, tmnxBundleOperMRRU=tmnxBundleOperMRRU, tmnxBundleRedDiffDelayAction=tmnxBundleRedDiffDelayAction, tPortEgrExpShaperCls8StFwdPktsL=tPortEgrExpShaperCls8StFwdPktsL, tPortNetEgrQGrpPStOffOutProfOct=tPortNetEgrQGrpPStOffOutProfOct, tPortAccEgrQGrpHostMatchEntry=tPortAccEgrQGrpHostMatchEntry, tmnxObjAppResvSizeOld=tmnxObjAppResvSizeOld, tmnxPortATMVpShaperRowStatus=tmnxPortATMVpShaperRowStatus, tmnxPortTypeTable=tmnxPortTypeTable, tmnxPortIngrMdaQos11StatDropPkts=tmnxPortIngrMdaQos11StatDropPkts, tmnxPortSchedOverrideLvl3PIR=tmnxPortSchedOverrideLvl3PIR, tmnxPortFCStatsIndex=tmnxPortFCStatsIndex, tmnxSonetHoldTimeUp=tmnxSonetHoldTimeUp, tmnxPortTestState=tmnxPortTestState, tPortEgrVPortAggStatsHLEntry=tPortEgrVPortAggStatsHLEntry, tmnxPortEgrExpShaperLoBrstMaxCls=tmnxPortEgrExpShaperLoBrstMaxCls, tmnxDDMLaneTxBiasCurrent=tmnxDDMLaneTxBiasCurrent, tmnxBundleMemberImaNeTxUnuseSecs=tmnxBundleMemberImaNeTxUnuseSecs, tPortEgrExpShaperAggStFwdOcts=tPortEgrExpShaperAggStFwdOcts, tPortNetEgrSchedStatFwdPkts=tPortNetEgrSchedStatFwdPkts, tmnxDS3ChannelLastChangeTime=tmnxDS3ChannelLastChangeTime, tmnxWaveTrackerEncodeEnable=tmnxWaveTrackerEncodeEnable, tmnxQosPoolAppTable=tmnxQosPoolAppTable, tmnxATMIntfBufferPool=tmnxATMIntfBufferPool, tmnxPortEgrShaperRate=tmnxPortEgrShaperRate, tmnxBundleImaGrpFeFails=tmnxBundleImaGrpFeFails, tmnxBundleImaGrpVersion=tmnxBundleImaGrpVersion, tmnxDDMLaneRxOpticalPowerType=tmnxDDMLaneRxOpticalPowerType, tmnxPortLagId=tmnxPortLagId, tPortEgrVPortLastChanged=tPortEgrVPortLastChanged, tmnxWaveTrackerCfgAlarms=tmnxWaveTrackerCfgAlarms, tmnxPortPlcyDescription=tmnxPortPlcyDescription, tmnxPortSonetV3v0Group=tmnxPortSonetV3v0Group, tmnxDS3LastChangeTime=tmnxDS3LastChangeTime, tmnxPortNetIngressDroInProfOcts=tmnxPortNetIngressDroInProfOcts, tPortNetEgrQGrpAggRateLimit=tPortNetEgrQGrpAggRateLimit, tmnxDDMLaneTable=tmnxDDMLaneTable, tPortEgrExpShaperCls3StFwdOctsH=tPortEgrExpShaperCls3StFwdOctsH, tmnxPortQObsoleteV8v0Group=tmnxPortQObsoleteV8v0Group, tmnxDS1ClockSyncState=tmnxDS1ClockSyncState, tmnxPortSchedV5v0Group=tmnxPortSchedV5v0Group, tmnxWaveTrackerTargetPower=tmnxWaveTrackerTargetPower, tmnxEqPortOpticalAmpAlarm=tmnxEqPortOpticalAmpAlarm, tPortEgrVPortName=tPortEgrVPortName, tmnxPortIngrMdaQos10StatDropOcts=tmnxPortIngrMdaQos10StatDropOcts, tmnxObjectId=tmnxObjectId, tmnxBundlePeerMRRU=tmnxBundlePeerMRRU, tmnxEqPortSpeedCfgNotCompatible=tmnxEqPortSpeedCfgNotCompatible, tmnxPortConformance=tmnxPortConformance, tmnxPortOpticalCompliance=tmnxPortOpticalCompliance, tmnxPortNotifyBundleId=tmnxPortNotifyBundleId, tmnxSonetJ0String=tmnxSonetJ0String, tmnxPortEgrExpShaperV9v0Group=tmnxPortEgrExpShaperV9v0Group, tPortNetEgrQGrpPStDrpOutProfPkt=tPortNetEgrQGrpPStDrpOutProfPkt, tmnxPortEgrExpShaperClass2Thresh=tmnxPortEgrExpShaperClass2Thresh, tmnxHsmdaPortSchOvrClass6Rate=tmnxHsmdaPortSchOvrClass6Rate, tmnxPortSchedOverrideLastChanged=tmnxPortSchedOverrideLastChanged, tmnxBundleMemberImaFeRxState=tmnxBundleMemberImaFeRxState, tmnxDDMAux1HiAlarm=tmnxDDMAux1HiAlarm, tmnxBundleMlpppStatelessApsSwo=tmnxBundleMlpppStatelessApsSwo, tmnxSonetApsOperStatus=tmnxSonetApsOperStatus, tmnxPortEgrExpShaperClass1Rate=tmnxPortEgrExpShaperClass1Rate, tPortAccEgrQGrpTableLastChgd=tPortAccEgrQGrpTableLastChgd, tmnxPortEtherDownWhenLoopedKeepAlive=tmnxPortEtherDownWhenLoopedKeepAlive, tmnxPortIngrMdaQos02StatDropOcts=tmnxPortIngrMdaQos02StatDropOcts, tmnxPortComp7750V5v0=tmnxPortComp7750V5v0, tPortAccIngSchedStatFwdPktsLo=tPortAccIngSchedStatFwdPktsLo, tmnxDDMExtCalVoltageOffset=tmnxDDMExtCalVoltageOffset, tmnxSonetClockSource=tmnxSonetClockSource, tmnxDDMAux2HiAlarm=tmnxDDMAux2HiAlarm, tPortNetEgrQGrpPStatEntry=tPortNetEgrQGrpPStatEntry, tPortAccEgrQOverCIRAdaptation=tPortAccEgrQOverCIRAdaptation, tmnxBundleMinimumLinks=tmnxBundleMinimumLinks, tmnxPortEgrExpShaperLoBurstLimit=tmnxPortEgrExpShaperLoBurstLimit, tmnxDDMAux1=tmnxDDMAux1, tmnxDDMExtCalTxPowerSlope=tmnxDDMExtCalTxPowerSlope, tPortEgrExpShaperCls6StFwdOctsL=tPortEgrExpShaperCls6StFwdOctsL, tPortEgrExpShaperCls6StFwdPktsL=tPortEgrExpShaperCls6StFwdPktsL, tmnxDDMLaneTxOutputPowerHiAlarm=tmnxDDMLaneTxOutputPowerHiAlarm, tmnxOpticalPortGroupV9v0=tmnxOpticalPortGroupV9v0, tmnxDS3ChannelBERTOperStatus=tmnxDS3ChannelBERTOperStatus, tPortNetEgrQGrpArbitStatFwdOctsL=tPortNetEgrQGrpArbitStatFwdOctsL, tmnxBundleImaGrpNeFails=tmnxBundleImaGrpNeFails, tPortNetEgrQOverHiPrioOnly=tPortNetEgrQOverHiPrioOnly, tmnxPortV9v0Group=tmnxPortV9v0Group, tmnxSonetMonK2Byte=tmnxSonetMonK2Byte, tmnxPortComp7750V8v0=tmnxPortComp7750V8v0, tmnxFRDlcmiEntry=tmnxFRDlcmiEntry, tPortEgrExpShaperCls2StMonOvrOL=tPortEgrExpShaperCls2StMonOvrOL, tmnxPortDescription=tmnxPortDescription, tmnxPortNotifyEtherCrcMultiplier=tmnxPortNotifyEtherCrcMultiplier, TmnxOpticalAmpCtrlState=TmnxOpticalAmpCtrlState, tmnxObjPortId=tmnxObjPortId, tmnxWaveTrackerMinAttainablePwr=tmnxWaveTrackerMinAttainablePwr, tPortNetEgrQOverAdminCIR=tPortNetEgrQOverAdminCIR, tPortNetEgrQGrpPlcrCntrlPolicy=tPortNetEgrQGrpPlcrCntrlPolicy, tPortEgrVPortHMTableLastChgd=tPortEgrVPortHMTableLastChgd, tmnxPortIngrMdaQos03StatDropPkts=tmnxPortIngrMdaQos03StatDropPkts, tmnxObjectAppAmbrAlrmThresh=tmnxObjectAppAmbrAlrmThresh, tmnxSonetAps=tmnxSonetAps, tPortEgrExpShaperCls6StMonOvrOct=tPortEgrExpShaperCls6StMonOvrOct, tmnxIpLoadBalancing=tmnxIpLoadBalancing, tmnxPortTestEntry=tmnxPortTestEntry, tmnxPortParentPortID=tmnxPortParentPortID, tmnxDS0ChanGroupScramble=tmnxDS0ChanGroupScramble, tmnxPortIngrMdaQosStatTable=tmnxPortIngrMdaQosStatTable, tmnxDS0ChanGroupCRC=tmnxDS0ChanGroupCRC, tmnxPortGroupV6v0=tmnxPortGroupV6v0, tmnxDS1Type=tmnxDS1Type, tmnxPwPortV10v0Group=tmnxPwPortV10v0Group, tmnxPortCemStatsIgrDroppedPkts=tmnxPortCemStatsIgrDroppedPkts, tmnxDS1ClockMasterPortId=tmnxDS1ClockMasterPortId, tPortAccEgrQGrpDescr=tPortAccEgrQGrpDescr, tmnxPortSFPVendorManufactureDate=tmnxPortSFPVendorManufactureDate, tmnxHostMatchNotifyOrgString=tmnxHostMatchNotifyOrgString, tmnxWaveTrackerGroup=tmnxWaveTrackerGroup, tmnxPortBundleNumber=tmnxPortBundleNumber, tmnxDS3ChannelTable=tmnxDS3ChannelTable, tmnxPortMacAddress=tmnxPortMacAddress, tmnxPortLastStateChanged=tmnxPortLastStateChanged, tPortNetEgrQOverRowStatus=tPortNetEgrQOverRowStatus, tmnxPortIngQosQStatOffLoPrioOcts=tmnxPortIngQosQStatOffLoPrioOcts, tmnxSonetGroupParentPortID=tmnxSonetGroupParentPortID, tmnxDS3ChannelEntry=tmnxDS3ChannelEntry, tmnxPortComplianceV10v0=tmnxPortComplianceV10v0, tmnxFRDlcmiT392Dce=tmnxFRDlcmiT392Dce, tmnxPortNotifyDescription=tmnxPortNotifyDescription, tmnxBundleImaGrpLostRxIcpCells=tmnxBundleImaGrpLostRxIcpCells, tPortAccEgrQGrpHMTableLastChgd=tPortAccEgrQGrpHMTableLastChgd, tPortAccIngQOverLastChanged=tPortAccIngQOverLastChanged, tmnxPortScalarObjs=tmnxPortScalarObjs, tPortEgrExpShaperCls2StFwdPktsH=tPortEgrExpShaperCls2StFwdPktsH, tmnxPortEgrQosQStatFwdInProfPkts=tmnxPortEgrQosQStatFwdInProfPkts, tmnxBundleLFI=tmnxBundleLFI, tPortNetEgrQGrpPStOffInProfOct=tPortNetEgrQGrpPStOffInProfOct, tmnxPortIngrMdaQos05StatDropPkts=tmnxPortIngrMdaQos05StatDropPkts, tmnxPortSchedOverrideLvl1CIR=tmnxPortSchedOverrideLvl1CIR, tmnxPortEtherDownOnInternalError=tmnxPortEtherDownOnInternalError, tmnxPortComp7750=tmnxPortComp7750, tmnxPortEgrShaperName=tmnxPortEgrShaperName, tmnxMcMlpppStatsEgressPkt=tmnxMcMlpppStatsEgressPkt, tPortNetEgrQGrpPStatTable=tPortNetEgrQGrpPStatTable, tPortNetEgrQGrpPStDrpInProfPkt=tPortNetEgrQGrpPStDrpInProfPkt, tmnxPortSFPVendorOUI=tmnxPortSFPVendorOUI, tmnxSonetSDHLoopbackStopped=tmnxSonetSDHLoopbackStopped, tmnxBundleMemberImaFeRxFailState=tmnxBundleMemberImaFeRxFailState, tmnxBundleImaGrpDiffDelayMaxObs=tmnxBundleImaGrpDiffDelayMaxObs, tmnxPortState=tmnxPortState, tmnxBundleMemberActive=tmnxBundleMemberActive, tmnxFrf12IntfTable=tmnxFrf12IntfTable, tmnxPortEgrExpShaperClass2Rate=tmnxPortEgrExpShaperClass2Rate, tmnxPortObjAppV9v0Group=tmnxPortObjAppV9v0Group, tmnxPortTypeDescription=tmnxPortTypeDescription, tmnxSonetLoopback=tmnxSonetLoopback, tmnxHostMatchNotifyIntDestId=tmnxHostMatchNotifyIntDestId, tmnxEqPortError=tmnxEqPortError, tmnxSonetMonK1Byte=tmnxSonetMonK1Byte, tmnxCiscoHDLCStatsEntry=tmnxCiscoHDLCStatsEntry, tmnxBundleMemberImaRelDelay=tmnxBundleMemberImaRelDelay, tPortNetEgrQGrpPStFwdInProfOctL=tPortNetEgrQGrpPStFwdInProfOctL, tmnxPortEgrExpShaperCl1BrstLimit=tmnxPortEgrExpShaperCl1BrstLimit, tmnxFRDlcmiDiscardedMsgs=tmnxFRDlcmiDiscardedMsgs, tmnxPortEgrExpShaperThresh=tmnxPortEgrExpShaperThresh, tmnxPortUserAssignedMac=tmnxPortUserAssignedMac, tmnxBundleMlpppIngQoSProfId=tmnxBundleMlpppIngQoSProfId, tPortAccIngQGrpLastChgd=tPortAccIngQGrpLastChgd, tmnxPortCemStatsEgrJtrBfrORun=tmnxPortCemStatsEgrJtrBfrORun)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxPortComp7750V6v0=tmnxPortComp7750V6v0, tmnxPortAlias=tmnxPortAlias, tmnxBundleMemberImaTxIcpCells=tmnxBundleMemberImaTxIcpCells, tmnxPortIngQosQStatQueueId=tmnxPortIngQosQStatQueueId, tmnxDDMRxOpticalPowerHiAlarm=tmnxDDMRxOpticalPowerHiAlarm, tmnx7710PortTDMGroupV5v0=tmnx7710PortTDMGroupV5v0, tmnxPortEtherSSMCodeType=tmnxPortEtherSSMCodeType, tPortNetEgrQGrpInstanceId=tPortNetEgrQGrpInstanceId, tmnxPortEgrExpShaperClass4Thresh=tmnxPortEgrExpShaperClass4Thresh, tmnxSonetEntry=tmnxSonetEntry, tmnxPortDwdmLaserChannel=tmnxPortDwdmLaserChannel, tmnxHsmdaPortSchOvrGrp2Rate=tmnxHsmdaPortSchOvrGrp2Rate, tmnxPortFCStatsEgrFwdOutProfPkts=tmnxPortFCStatsEgrFwdOutProfPkts, tmnxBundleMemberMlfrEntry=tmnxBundleMemberMlfrEntry, tPortEgrExpShaperCls6StFwdPkts=tPortEgrExpShaperCls6StFwdPkts, tPortAccIngSchedStatEntry=tPortAccIngSchedStatEntry, tmnxPortSchedOverrideLvl2PIR=tmnxPortSchedOverrideLvl2PIR, tPortNetEgrQGrpPStFwdOutProfPktH=tPortNetEgrQGrpPStFwdOutProfPktH, tmnxPortLastChangeTime=tmnxPortLastChangeTime, tmnxHsmdaPortSchOvrClass1Rate=tmnxHsmdaPortSchOvrClass1Rate, tPortEgrExpShaperCls1StFwdPktsH=tPortEgrExpShaperCls1StFwdPktsH, tmnxBundleMemberImaTable=tmnxBundleMemberImaTable, tmnxBundleImaGrpTestPattern=tmnxBundleImaGrpTestPattern, tmnxBundleMemberImaFeTxNumFails=tmnxBundleMemberImaFeTxNumFails, tmnxPortEtherDWLUseBroadcastAddr=tmnxPortEtherDWLUseBroadcastAddr, tmnxEqOobPortFailure=tmnxEqOobPortFailure, tmnxPortSchedOverrideFlags=tmnxPortSchedOverrideFlags, tmnxPortNetIngressStatsEntry=tmnxPortNetIngressStatsEntry, tPortEgrVPortHMIntDestId=tPortEgrVPortHMIntDestId, tmnxPortNetEgrQStatTable=tmnxPortNetEgrQStatTable, tmnxDS3ChannelMDLMonGenString=tmnxDS3ChannelMDLMonGenString, tmnxPortCemStatsEgrDroppedPkts=tmnxPortCemStatsEgrDroppedPkts, tPortAccIngQOverCBS=tPortAccIngQOverCBS, tPortAccEgrQGrpHMRowStatus=tPortAccEgrQGrpHMRowStatus, tmnxObjType=tmnxObjType, tPortNetEgrQGrpPStOffInProfOctL=tPortNetEgrQGrpPStOffInProfOctL, tmnxPortLastClearedTime=tmnxPortLastClearedTime, tmnxDS3Type=tmnxDS3Type, tmnxPortSchedOverrideTable=tmnxPortSchedOverrideTable, tPortEgrExpShaperCls6StFwdOcts=tPortEgrExpShaperCls6StFwdOcts, tmnxSonetApsHoldTimeLeft=tmnxSonetApsHoldTimeLeft, tmnxPortTransceiverDiagCapable=tmnxPortTransceiverDiagCapable, tmnxPortEgrQosQStatFwdOutProfOcts=tmnxPortEgrQosQStatFwdOutProfOcts, tmnxDDMSupplyVoltageHiAlarm=tmnxDDMSupplyVoltageHiAlarm, tmnxPortEgrQosQStatTable=tmnxPortEgrQosQStatTable, tmnxOpticalPortOperTable=tmnxOpticalPortOperTable, tmnxPortATMV3v0Group=tmnxPortATMV3v0Group, tmnxPortEgrPortSchedPlcy=tmnxPortEgrPortSchedPlcy, tmnxFrf12IntfLastChanged=tmnxFrf12IntfLastChanged, tmnxPortEgrExpShaperTblLastChngd=tmnxPortEgrExpShaperTblLastChngd, tmnxPortIngrMdaQos12StatDropPkts=tmnxPortIngrMdaQos12StatDropPkts, tPortNetEgrQGrpEntry=tPortNetEgrQGrpEntry, tmnxPortEgrExpShaperClass3Thresh=tmnxPortEgrExpShaperClass3Thresh, tPortEgrExpShaperCls4StMonOvrOH=tPortEgrExpShaperCls4StMonOvrOH, tmnxBPGrpAssocTable=tmnxBPGrpAssocTable, tmnxOpticalPortAmpAlarmState=tmnxOpticalPortAmpAlarmState, tmnxPortPhysStateChangeCount=tmnxPortPhysStateChangeCount, tmnxObjectAppResvCbsAmbrAlrmMax=tmnxObjectAppResvCbsAmbrAlrmMax, tPortAccIngQOverPIRAdaptation=tPortAccIngQOverPIRAdaptation, tPortNetEgrQOverAdminCIRPercent=tPortNetEgrQOverAdminCIRPercent, tPortAccEgrQOverAdminCIRPercent=tPortAccEgrQOverAdminCIRPercent, tPortNetEgrQGrpArbitStatName=tPortNetEgrQGrpArbitStatName, tmnxPortEtherSSMTxQualityLevel=tmnxPortEtherSSMTxQualityLevel, tPortEgrExpShaperCls3StMonOvrOH=tPortEgrExpShaperCls3StMonOvrOH, tmnxDS0ChanGroupPayloadFillType=tmnxDS0ChanGroupPayloadFillType, tmnxPortReasonDownFlags=tmnxPortReasonDownFlags, tmnxPortConnectTypeDescription=tmnxPortConnectTypeDescription, tmnxPortLinkLengthInfo=tmnxPortLinkLengthInfo, tmnxBundleParentBundle=tmnxBundleParentBundle, tmnxPortNotifyBerSfTca=tmnxPortNotifyBerSfTca, tmnxDS3E3LoopbackStopped=tmnxDS3E3LoopbackStopped, tmnxPortIngrMdaQos07StatDropOcts=tmnxPortIngrMdaQos07StatDropOcts, tmnxSonetBerSdThreshold=tmnxSonetBerSdThreshold, TmnxMlpppEndpointIdClass=TmnxMlpppEndpointIdClass, tmnxDS0ChanGroupBerSfLinkDown=tmnxDS0ChanGroupBerSfLinkDown, tPortEgrVPortAggRateLimit=tPortEgrVPortAggRateLimit, tPortNetEgrQGrpPStUncolOctOff=tPortNetEgrQGrpPStUncolOctOff, tPortEgrExpShaperCls5StFwdPkts=tPortEgrExpShaperCls5StFwdPkts, tPortAccEgrQOverAdminCIR=tPortAccEgrQOverAdminCIR, tmnxPortTypeIndex=tmnxPortTypeIndex, tmnxSonetPathOperMRU=tmnxSonetPathOperMRU, tPortAccEgrSchedStatEntry=tPortAccEgrSchedStatEntry, tmnxQosAppObjsGroup=tmnxQosAppObjsGroup, tPortEgrExpShaperCls8StFwdOctsL=tPortEgrExpShaperCls8StFwdOctsL, tmnxPortLastAlarmEvent=tmnxPortLastAlarmEvent, tmnxDDMRxOpticalPower=tmnxDDMRxOpticalPower, tmnxObjAppResvSize=tmnxObjAppResvSize, TmnxPortEtherCrcMonReportValue=TmnxPortEtherCrcMonReportValue, tmnxPortIngQosQStatDpdLoPrioOcts=tmnxPortIngQosQStatDpdLoPrioOcts, tPortEgrExpShaperCls4StFwdOctsL=tPortEgrExpShaperCls4StFwdOctsL, tPortEgrExpShaperCls7StMonOvrOH=tPortEgrExpShaperCls7StMonOvrOH, tmnxDDMAux2HiWarning=tmnxDDMAux2HiWarning, tPortNetEgrQGrpArbitStatEntry=tPortNetEgrQGrpArbitStatEntry, tmnxPortNotifyBerSdTca=tmnxPortNotifyBerSdTca, tmnxSonetApsNeighborAddr=tmnxSonetApsNeighborAddr, tmnxDS3ChannelOperMTU=tmnxDS3ChannelOperMTU, tmnxPortTestStartTime=tmnxPortTestStartTime, tPortAccEgrQGrpTable=tPortAccEgrQGrpTable, tmnxObjAppType=tmnxObjAppType, tmnxQosAppObjs=tmnxQosAppObjs, tPortNetEgrQOverCIRAdaptation=tPortNetEgrQOverCIRAdaptation, tmnxPortEtherObsoleteV7v0Group=tmnxPortEtherObsoleteV7v0Group, tmnxPortNotificationGroupV6v0=tmnxPortNotificationGroupV6v0, tmnxPortNotifyObjsV9v0Group=tmnxPortNotifyObjsV9v0Group, tPortNetEgrQGrpCollectStats=tPortNetEgrQGrpCollectStats, tmnxBundleMemberDownReason=tmnxBundleMemberDownReason, tPortEgrExpShaperCls7StFwdOctsH=tPortEgrExpShaperCls7StFwdOctsH, tmnxPortEgrExpShaperEntry=tmnxPortEgrExpShaperEntry, tmnxPortPlcyTable=tmnxPortPlcyTable, tmnxOpticalPortDwdmChannelMin=tmnxOpticalPortDwdmChannelMin, TmnxImaGrpClockModes=TmnxImaGrpClockModes, tmnxPortFCStatsIngDroOutProfPkts=tmnxPortFCStatsIngDroOutProfPkts, tmnxPortEtherMDIMDIX=tmnxPortEtherMDIMDIX, tmnxDS1E1LoopbackStopped=tmnxDS1E1LoopbackStopped, tmnxPortIngQosQStatDpdHiPrioOcts=tmnxPortIngQosQStatDpdHiPrioOcts, tmnxPortIngrMdaQos08StatDropOcts=tmnxPortIngrMdaQos08StatDropOcts, tPortAccEgrQGrpHostMatchTable=tPortAccEgrQGrpHostMatchTable, TmnxImaGrpFailState=TmnxImaGrpFailState, tmnxDS1PortTable=tmnxDS1PortTable, tPortAccEgrSchedStatFwdOcts=tPortAccEgrSchedStatFwdOcts, tmnxObsoleteGroupV3v0=tmnxObsoleteGroupV3v0, tmnxPortLinkStatus=tmnxPortLinkStatus, tPortAccIngQGrpName=tPortAccIngQGrpName, tmnxFRDlcmiMode=tmnxFRDlcmiMode, tmnxPwPortLastChgd=tmnxPwPortLastChgd, tmnxPortIngrMdaQos14StatDropPkts=tmnxPortIngrMdaQos14StatDropPkts, tmnxDDMLaneTemperature=tmnxDDMLaneTemperature, tmnxPortNetEgrQDroInProfOcts=tmnxPortNetEgrQDroInProfOcts, tPortAccIngQGrpTable=tPortAccIngQGrpTable, tmnxDDMExtCalRxPower3=tmnxDDMExtCalRxPower3, tmnxDDMTempHiAlarm=tmnxDDMTempHiAlarm, tmnxDDMLaneTempLowWarn=tmnxDDMLaneTempLowWarn, tmnxBundleImaGrpSmOperSecs=tmnxBundleImaGrpSmOperSecs, tmnxSonetSuppressLoOrderAlarm=tmnxSonetSuppressLoOrderAlarm, TmnxDigitalDiagnosticFailureBits=TmnxDigitalDiagnosticFailureBits, tPortNetEgrQOverLastChanged=tPortNetEgrQOverLastChanged, tmnxBundleMemberImaRxIcpCells=tmnxBundleMemberImaRxIcpCells, tmnxSonetPathReportAlarm=tmnxSonetPathReportAlarm, tPortAccEgrQOverRateType=tPortAccEgrQOverRateType, tmnxDS1ReportAlarm=tmnxDS1ReportAlarm, tmnxObjMdaId=tmnxObjMdaId, tPortEgrExpShaperCls2StFwdOctsH=tPortEgrExpShaperCls2StFwdOctsH, tmnxPortCemStatsEgrFailureCounts=tmnxPortCemStatsEgrFailureCounts, tmnxDDMLaneId=tmnxDDMLaneId, tmnxBPGrpAssocActiveBundleID=tmnxBPGrpAssocActiveBundleID, TmnxImaLnkState=TmnxImaLnkState, tPortNetEgrQOverRateType=tPortNetEgrQOverRateType, tmnxOpticalPortTdcmRtd1Temp=tmnxOpticalPortTdcmRtd1Temp, tmnxPortTDMGroupV4v0=tmnxPortTDMGroupV4v0, tmnxBundleMRRU=tmnxBundleMRRU, tmnxSonetPathReportAlarmStatus=tmnxSonetPathReportAlarmStatus, tmnxHsmdaPortSchOvrMaxRate=tmnxHsmdaPortSchOvrMaxRate, tmnxHsmdaPortSchOvrClass4WtInGp=tmnxHsmdaPortSchOvrClass4WtInGp, tmnxOpticalPortTdcmRtd3Temp=tmnxOpticalPortTdcmRtd3Temp, tmnxBundleYellowDiffDelay=tmnxBundleYellowDiffDelay, tmnxPortEtherHCOverPkts1519toMax=tmnxPortEtherHCOverPkts1519toMax, tmnxPortEtherHCPkts1519toMax=tmnxPortEtherHCPkts1519toMax, tmnxPortEgrNamedPoolPlcy=tmnxPortEgrNamedPoolPlcy, tmnxPortNetEgressQueueIndex=tmnxPortNetEgressQueueIndex, tPortNetEgrQOverTableLastChgd=tPortNetEgrQOverTableLastChgd, tmnxBundleMlpppTable=tmnxBundleMlpppTable, tmnxPortEgrPoolPercentRate=tmnxPortEgrPoolPercentRate, tmnxMcMlpppClassIndex=tmnxMcMlpppClassIndex, tPortEgrExpShaperCls7StMonOvrOct=tPortEgrExpShaperCls7StMonOvrOct, tmnxPortNotifySonetPathAlarmReason=tmnxPortNotifySonetPathAlarmReason, tmnxPortTestTable=tmnxPortTestTable, tmnxATMIntfCustomBufferMode=tmnxATMIntfCustomBufferMode, tmnxHsmdaPortSchOvrClass7Rate=tmnxHsmdaPortSchOvrClass7Rate, tmnxMcMlpppStatsIngressPkt=tmnxMcMlpppStatsIngressPkt, tPortEgrExpShaperAggStMonOvrOct=tPortEgrExpShaperAggStMonOvrOct, tmnxPortEgrExpShaperClass3Rate=tmnxPortEgrExpShaperClass3Rate, tmnxEqPortSFPInserted=tmnxEqPortSFPInserted, tmnxPortIngrMdaQos06StatDropOcts=tmnxPortIngrMdaQos06StatDropOcts, tmnxPortPlcyTableLastCh=tmnxPortPlcyTableLastCh, tPortEgrExpShaperCls2StMonOvrOct=tPortEgrExpShaperCls2StMonOvrOct, tmnxEqPortBndlYellowDiffExceeded=tmnxEqPortBndlYellowDiffExceeded, tmnxPortEtherReasonDownFlags=tmnxPortEtherReasonDownFlags, tPortNetEgrQGrpPStFwdOutProfOctH=tPortNetEgrQGrpPStFwdOutProfOctH, tmnxBundleMlpppMagicNumber=tmnxBundleMlpppMagicNumber, tmnxBundleMemberImaNeTxNumFails=tmnxBundleMemberImaNeTxNumFails, tmnxBundleImaGrpAvailRxCR=tmnxBundleImaGrpAvailRxCR, tmnxOpticalPortTdcmDispSwpStart=tmnxOpticalPortTdcmDispSwpStart, tPortNetEgrQGrpName=tPortNetEgrQGrpName, tmnxPortEgrExpShaperCl5BrstLimit=tmnxPortEgrExpShaperCl5BrstLimit, tmnxPortEgrExpShaperRowStatus=tmnxPortEgrExpShaperRowStatus, tPortEgrVPortTable=tPortEgrVPortTable, tmnxPortEgrExpShaperCl7BrstLimit=tmnxPortEgrExpShaperCl7BrstLimit, tmnxPortComp7450V6v1=tmnxPortComp7450V6v1, tPortEgrExpShaperCls5StFwdPktsH=tPortEgrExpShaperCls5StFwdPktsH, tmnxPortEgrShaperTblLastChanged=tmnxPortEgrShaperTblLastChanged, tPortNetEgrQGrpPStDrpOutProfOctH=tPortNetEgrQGrpPStDrpOutProfOctH, tmnxHsmdaPortSchOvrLastChanged=tmnxHsmdaPortSchOvrLastChanged, tmnxPortPlcyLastCh=tmnxPortPlcyLastCh, tmnxPortIngrMdaQos04StatDropPkts=tmnxPortIngrMdaQos04StatDropPkts, tmnxBundleInputDiscards=tmnxBundleInputDiscards, tmnxSonetPathTable=tmnxSonetPathTable, tmnxHsmdaGroupV6v0=tmnxHsmdaGroupV6v0, tmnxPortNetIngressDroInProfPkts=tmnxPortNetIngressDroInProfPkts, tmnxOpticalPortTdcmCtrlState=tmnxOpticalPortTdcmCtrlState, tmnxBundleImaGrpTxId=tmnxBundleImaGrpTxId, tmnxResvCbsPoolThreshAmber=tmnxResvCbsPoolThreshAmber, tPortAccEgrQGrpHMIntDestId=tPortAccEgrQGrpHMIntDestId, TmnxDSXIdleCycleFlags=TmnxDSXIdleCycleFlags, tmnxSonetPathC2Byte=tmnxSonetPathC2Byte, tPortNetEgrQGrpRowStatus=tPortNetEgrQGrpRowStatus, tmnxPortEtherV9v0Group=tmnxPortEtherV9v0Group, tmnxPortCemStatsReportAlarm=tmnxPortCemStatsReportAlarm, tPortNetEgrQGrpPStOffInProfPktH=tPortNetEgrQGrpPStOffInProfPktH, tmnxPortEgrExpShaperCl4BrstLimit=tmnxPortEgrExpShaperCl4BrstLimit, tmnxBundleTable=tmnxBundleTable, tmnxEqSonetFramingNotCompatible=tmnxEqSonetFramingNotCompatible, tmnxBundleMemberImaRxLid=tmnxBundleMemberImaRxLid, tmnxDS3ChannelLoopback=tmnxDS3ChannelLoopback, tPortEgrVPortHMLastChgd=tPortEgrVPortHMLastChgd, tmnxPortNetEgrQDroInProfPkts=tmnxPortNetEgrQDroInProfPkts, tmnxDDMExtCalTemperatureSlope=tmnxDDMExtCalTemperatureSlope, tmnxDDMTxOutputPowerLowAlarm=tmnxDDMTxOutputPowerLowAlarm, tmnxPortHoldTimeDown=tmnxPortHoldTimeDown, tmnxPortTestAction=tmnxPortTestAction, tmnxWaveTrackerWaveKey2=tmnxWaveTrackerWaveKey2, tmnxOpticalPortTdcmMaxDisp=tmnxOpticalPortTdcmMaxDisp, tmnxPortFCStatsEntry=tmnxPortFCStatsEntry, tmnxPortEtherAcctPolicyId=tmnxPortEtherAcctPolicyId, tPortAccIngQOverEntry=tPortAccIngQOverEntry, tPortEgrVPortDescr=tPortEgrVPortDescr, tmnxBundleMlfrHelloTimer=tmnxBundleMlfrHelloTimer, tmnxPortCompliances=tmnxPortCompliances, tmnxATMIntfCellFormat=tmnxATMIntfCellFormat, tmnxPortATMVpShaperEgrAtd=tmnxPortATMVpShaperEgrAtd, tmnxDDMSupplyVoltageLowWarning=tmnxDDMSupplyVoltageLowWarning, tmnxOpticalPortAmpPowerOut=tmnxOpticalPortAmpPowerOut, tmnxPortTestDuration=tmnxPortTestDuration, tmnxDDMLaneRxOpticalPower=tmnxDDMLaneRxOpticalPower, tmnxPortCemStatsEgrPktsReOrder=tmnxPortCemStatsEgrPktsReOrder, tmnxBundleImaGrpLnkDeactTimer=tmnxBundleImaGrpLnkDeactTimer, tPortAccIngSchedStatName=tPortAccIngSchedStatName, tmnxOpticalPortTdcmModuleTemp=tmnxOpticalPortTdcmModuleTemp, tmnxCiscoHDLCDiscardStatInPkts=tmnxCiscoHDLCDiscardStatInPkts, tPortEgrExpShaperCls4StFwdPktsL=tPortEgrExpShaperCls4StFwdPktsL, tmnxPortIsLeaf=tmnxPortIsLeaf, tmnxPortIngrMdaQosStatR2r1Group=tmnxPortIngrMdaQosStatR2r1Group, tmnxFrIntfEntry=tmnxFrIntfEntry, tmnxDS1Entry=tmnxDS1Entry, tmnxPortPlcyEgrPortSchedPlcy=tmnxPortPlcyEgrPortSchedPlcy, tmnxBundleNumLinks=tmnxBundleNumLinks, tmnxSonetBerSfThreshold=tmnxSonetBerSfThreshold, tmnx7710PortTDMGroupV3v0=tmnx7710PortTDMGroupV3v0, tmnxOpticalPortCfgEntry=tmnxOpticalPortCfgEntry, tmnxPortEtherXGigMode=tmnxPortEtherXGigMode, tmnxSonetApsAdvertiseInterval=tmnxSonetApsAdvertiseInterval, tmnxObjectType=tmnxObjectType, tPortAccEgrQGrpHostMatchFailure=tPortAccEgrQGrpHostMatchFailure, tmnxMcMlpppStatsTable=tmnxMcMlpppStatsTable, tmnxDS3ChannelInFEACLoop=tmnxDS3ChannelInFEACLoop)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxATMIntfMinVpValue=tmnxATMIntfMinVpValue, tmnxBPGrpAssocWorkingBundleID=tmnxBPGrpAssocWorkingBundleID, tmnxPortEtherIngressRate=tmnxPortEtherIngressRate, tmnxBundleMemberImaEntry=tmnxBundleMemberImaEntry, tmnxPortSchedOverrideLvl6CIR=tmnxPortSchedOverrideLvl6CIR, tmnxBundleMemberRowStatus=tmnxBundleMemberRowStatus, tmnxPwPortEncapType=tmnxPwPortEncapType, tmnxWaveTrackerMaxAttainablePwr=tmnxWaveTrackerMaxAttainablePwr, tPortNetEgrQOverAdminPIRPercent=tPortNetEgrQOverAdminPIRPercent, tmnxPortNotifyObjsGroupV6v0=tmnxPortNotifyObjsGroupV6v0, tmnxBundleMlfrBundleId=tmnxBundleMlfrBundleId, TmnxDS1Loopback=TmnxDS1Loopback, tmnxFRDlcmiRxStatusMsgs=tmnxFRDlcmiRxStatusMsgs, tmnxPortIngrMdaQos05StatDropOcts=tmnxPortIngrMdaQos05StatDropOcts, tmnxPortEtherDownWhenLoopedRetry=tmnxPortEtherDownWhenLoopedRetry, tmnxPortNetEgressFwdOutProfPkts=tmnxPortNetEgressFwdOutProfPkts, tmnxPortTable=tmnxPortTable, tmnxDS3ChannelClockSource=tmnxDS3ChannelClockSource, tmnxBundleShortSequence=tmnxBundleShortSequence, TmnxBundleID=TmnxBundleID, tmnxPortATMVpShaperEntry=tmnxPortATMVpShaperEntry, tmnxOpticalPortHasRxAmplifier=tmnxOpticalPortHasRxAmplifier, tmnxDS1BerSfThreshold=tmnxDS1BerSfThreshold, tmnxPortEthernetV7v0Group=tmnxPortEthernetV7v0Group, tmnxPortFCStatsEgrFwdInProfOcts=tmnxPortFCStatsEgrFwdInProfOcts, tmnxDS0ChanGroupAcctPolicyId=tmnxDS0ChanGroupAcctPolicyId, tmnxPortTableLastChange=tmnxPortTableLastChange, tmnxFRDlcmiStatusMsgTimeouts=tmnxFRDlcmiStatusMsgTimeouts, tPortEgrExpShaperCls3StFwdOctsL=tPortEgrExpShaperCls3StFwdOctsL, tmnxPortToChannelEntry=tmnxPortToChannelEntry, tmnxFrIntfGroup=tmnxFrIntfGroup, tmnxDDMRxOpticalPowerLowWarning=tmnxDDMRxOpticalPowerLowWarning, tPortNetEgrQGrpArbitStatTable=tPortNetEgrQGrpArbitStatTable, tPortAccEgrQOverQueue=tPortAccEgrQOverQueue, tmnxPortFCStatsEgrDroInProfOcts=tmnxPortFCStatsEgrDroInProfOcts, tmnxDS1E1LoopbackStarted=tmnxDS1E1LoopbackStarted, tmnxPortClass=tmnxPortClass, tmnxOpticalPortAmpCfgAlarms=tmnxOpticalPortAmpCfgAlarms, tmnxDDMTxOutputPowerHiAlarm=tmnxDDMTxOutputPowerHiAlarm, tmnxBundleType=tmnxBundleType, tmnxPortATMGroupV4v0=tmnxPortATMGroupV4v0, tmnxPortEthernetV6v1Group=tmnxPortEthernetV6v1Group, tmnxPortNotificationGroupV5v0=tmnxPortNotificationGroupV5v0, tmnxObjectAppPool=tmnxObjectAppPool, tmnxPortComp7710V3v0=tmnxPortComp7710V3v0, tmnxDDMLaneRxOpticalPwrLowAlarm=tmnxDDMLaneRxOpticalPwrLowAlarm, tmnxPortSchedOverrideLvl3CIR=tmnxPortSchedOverrideLvl3CIR, tmnxSonetPathScramble=tmnxSonetPathScramble, tmnxPortFCStatsTable=tmnxPortFCStatsTable, tmnxOpticalPortTdcmMinDisp=tmnxOpticalPortTdcmMinDisp, tmnxOpticalPortAmpGain=tmnxOpticalPortAmpGain, tmnxBundleMemberImaFeTxUnuseSecs=tmnxBundleMemberImaFeTxUnuseSecs, TmnxPortEtherReportStatus=TmnxPortEtherReportStatus, tmnxPortEtherCrcMonWindowSize=tmnxPortEtherCrcMonWindowSize, tmnxSonetMonS1Byte=tmnxSonetMonS1Byte, tmnxPortNetEgressDroInProfOcts=tmnxPortNetEgressDroInProfOcts, tmnxSonetApsAdminStatus=tmnxSonetApsAdminStatus, tPortAccEgrQOverRowStatus=tPortAccEgrQOverRowStatus, tmnxBundleImaGrpRxId=tmnxBundleImaGrpRxId, tmnxDS0ChanGroupRowStatus=tmnxDS0ChanGroupRowStatus, tPortEgrExpShaperCls3StMonOvrOct=tPortEgrExpShaperCls3StMonOvrOct, tmnxDS1PortType=tmnxDS1PortType, tmnxDDMTempLowAlarm=tmnxDDMTempLowAlarm, tPortNetEgrQGrpSchedPol=tPortNetEgrQGrpSchedPol, tmnxPortEgrShaperEntry=tmnxPortEgrShaperEntry, tmnxPortEgrQosQStatDpdOutProfOcts=tmnxPortEgrQosQStatDpdOutProfOcts, tmnxDS3ChannelMDLPfiString=tmnxDS3ChannelMDLPfiString, tmnxMcMlpppStatsIngressErrPkt=tmnxMcMlpppStatsIngressErrPkt, tmnxPortDwdmRxDtvAdjustEnable=tmnxPortDwdmRxDtvAdjustEnable, tmnxPortCemStatsEgrURunCounts=tmnxPortCemStatsEgrURunCounts, tPortAccEgrQGrpLastChgd=tPortAccEgrQGrpLastChgd, tmnxFrIntfLastChanged=tmnxFrIntfLastChanged, tmnxDDMLaneGroupV10v0=tmnxDDMLaneGroupV10v0, tmnxEqPortFailure=tmnxEqPortFailure, tmnxDDMTxBiasCurrentHiWarning=tmnxDDMTxBiasCurrentHiWarning, tmnxBundleMemberImaFeRxNumFails=tmnxBundleMemberImaFeRxNumFails, tPortEgrExpShaperCls8StFwdOcts=tPortEgrExpShaperCls8StFwdOcts, tmnxPortEtherOperDuplex=tmnxPortEtherOperDuplex, tmnxPortTransceiverType=tmnxPortTransceiverType, tPortNetEgrSchedStatFwdOctsLo=tPortNetEgrSchedStatFwdOctsLo, tmnxBundleMemberImaErrorIcpCells=tmnxBundleMemberImaErrorIcpCells, tmnxPortIngQosQStatOffLoPrioPkts=tmnxPortIngQosQStatOffLoPrioPkts, tmnxDS1NationalUseBits=tmnxDS1NationalUseBits, tmnxPortNetEgressStatsTable=tmnxPortNetEgressStatsTable, tmnxBundleMemberTable=tmnxBundleMemberTable, TmnxImaLnkFailState=TmnxImaLnkFailState, tmnxDS0ChanGroupLastChangeTime=tmnxDS0ChanGroupLastChangeTime, tmnxPortNetIngressFwdInProfOcts=tmnxPortNetIngressFwdInProfOcts, TmnxDSXBertPattern=TmnxDSXBertPattern, tmnxDDMAux1Type=tmnxDDMAux1Type, tmnxPortQV7v0Group=tmnxPortQV7v0Group, tPortEgrExpShaperCls7StFwdPktsH=tPortEgrExpShaperCls7StFwdPktsH, tmnxPortNotifyEtherCrcThreshold=tmnxPortNotifyEtherCrcThreshold, tmnxPortEtherMinFrameLength=tmnxPortEtherMinFrameLength, tPortAccIngSchedStatFwdOctsLo=tPortAccIngSchedStatFwdOctsLo, tmnxOpticalPortTdcmDispSwpEnd=tmnxOpticalPortTdcmDispSwpEnd, tmnxNamedPoolGroupV6v0=tmnxNamedPoolGroupV6v0, TmnxOpticalDwdmChannel=TmnxOpticalDwdmChannel, tPortEgrVPortAggStatsEntry=tPortEgrVPortAggStatsEntry, tmnxDS1Table=tmnxDS1Table, tmnxDS3ChannelMDLGenString=tmnxDS3ChannelMDLGenString, tmnxPortIngPoolPercentRate=tmnxPortIngPoolPercentRate, tmnxPortCemStatsIgrForwardedPkts=tmnxPortCemStatsIgrForwardedPkts, tmnxBundleImaGrpSmNeState=tmnxBundleImaGrpSmNeState, tmnxPortNotifyWTAlarmReason=tmnxPortNotifyWTAlarmReason, tmnxDigitalDiagMonitorTable=tmnxDigitalDiagMonitorTable, tmnxEqPortOpticalTdcmAlarm=tmnxEqPortOpticalTdcmAlarm, tmnxCiscoHDLCStatInPkts=tmnxCiscoHDLCStatInPkts, tmnxHsmdaGroupV10v0=tmnxHsmdaGroupV10v0, tPortEgrExpShaperCls2StFwdPkts=tPortEgrExpShaperCls2StFwdPkts, TmnxMlfrLinkDownReason=TmnxMlfrLinkDownReason, tmnxDDMSupplyVoltageHiWarning=tmnxDDMSupplyVoltageHiWarning, tmnxPortComp7750V4v0=tmnxPortComp7750V4v0, tmnxPortIngNamedPoolPlcy=tmnxPortIngNamedPoolPlcy, tPortEgrExpShaperCls1StFwdPkts=tPortEgrExpShaperCls1StFwdPkts, tPortEgrVPStLvlDpdPkt=tPortEgrVPStLvlDpdPkt, tmnxDS1ClockSource=tmnxDS1ClockSource, tmnxFrf12IntfEntry=tmnxFrf12IntfEntry, tPortEgrExpShaperCls2StFwdOctsL=tPortEgrExpShaperCls2StFwdOctsL, tmnxPortCemStatsEgrORunCounts=tmnxPortCemStatsEgrORunCounts, tmnxEqPortDS3AlarmClear=tmnxEqPortDS3AlarmClear, tmnxBundleImaGrpLeastDelayLink=tmnxBundleImaGrpLeastDelayLink, tmnxPortSFPVendorPartNum=tmnxPortSFPVendorPartNum, tmnxDDMTxOutputPowerHiWarning=tmnxDDMTxOutputPowerHiWarning, tmnxDDMTxBiasCurrentLowWarning=tmnxDDMTxBiasCurrentLowWarning, tPortEgrExpShaperStLstClrdTime=tPortEgrExpShaperStLstClrdTime, tmnxEqPortEtherCrcAlarm=tmnxEqPortEtherCrcAlarm, tmnxOpticalPortTdcmRtd4Temp=tmnxOpticalPortTdcmRtd4Temp, tmnxDS3ChannelMDLLicString=tmnxDS3ChannelMDLLicString, tmnxMcMlpppStatsEgressOct=tmnxMcMlpppStatsEgressOct, tPortNetEgrQGrpPStUncolPktOffH=tPortNetEgrQGrpPStUncolPktOffH, tmnxDS3Table=tmnxDS3Table, tmnxSonetTxDus=tmnxSonetTxDus, tmnxPortQStatV7v0Group=tmnxPortQStatV7v0Group, tmnxBundleMemberMlfrLoopback=tmnxBundleMemberMlfrLoopback, tmnxCiscoHDLCUpCount=tmnxCiscoHDLCUpCount, tmnxPortNetIngressFwdInProfPkts=tmnxPortNetIngressFwdInProfPkts, tmnxPortIngrMdaQos01StatDropPkts=tmnxPortIngrMdaQos01StatDropPkts, tmnxPortEtherLacpTunnel=tmnxPortEtherLacpTunnel, tPortEgrExpShaperCls7StFwdOcts=tPortEgrExpShaperCls7StFwdOcts, tmnxPortPrevState=tmnxPortPrevState, tmnxPortEtherSpeed=tmnxPortEtherSpeed, tmnxPortIngQosQStatDpdLoPrioPkts=tmnxPortIngQosQStatDpdLoPrioPkts, tPortNetEgrQGrpPStDrpInProfPktL=tPortNetEgrQGrpPStDrpInProfPktL, tPortEgrVPortAggStatsHLTable=tPortEgrVPortAggStatsHLTable, tmnxBundleMemberImaNeRxNumFails=tmnxBundleMemberImaNeRxNumFails, tPortEgrVPortRowStatus=tPortEgrVPortRowStatus, tmnxPortCemStatsEgrLBitDrop=tmnxPortCemStatsEgrLBitDrop, tmnxSonetApsAuthKey=tmnxSonetApsAuthKey, tPortAccIngQOverTableLastChgd=tPortAccIngQOverTableLastChgd, tmnxBundleMlfrEntry=tmnxBundleMlfrEntry, tmnxPortSFPConnectorCode=tmnxPortSFPConnectorCode, tPortNetEgrQGrpPStOffOutProfPktH=tPortNetEgrQGrpPStOffOutProfPktH, tmnxPortEtherDot1qEtype=tmnxPortEtherDot1qEtype, tPortNetEgrQOverCBS=tPortNetEgrQOverCBS, tmnxPortNotifyError=tmnxPortNotifyError, tmnxOpticalPortAmpPumpTemp=tmnxOpticalPortAmpPumpTemp, TmnxImaTestState=TmnxImaTestState, tmnxPortComp7710=tmnxPortComp7710, tmnxPortEthernetV6v0Group=tmnxPortEthernetV6v0Group, tmnxPortSchedOverrideLvl2CIR=tmnxPortSchedOverrideLvl2CIR, tmnxEqPortIngressRateCfgNotCompatible=tmnxEqPortIngressRateCfgNotCompatible, tmnxPortEgrVPortStatsV9v0Group=tmnxPortEgrVPortStatsV9v0Group, tmnxSonetApsHoldTime=tmnxSonetApsHoldTime, tmnxBundleRowStatus=tmnxBundleRowStatus, tPortEgrExpShaperAggStFwdPkts=tPortEgrExpShaperAggStFwdPkts, tPortNetEgrQGrpPStOffOutProfOctH=tPortNetEgrQGrpPStOffOutProfOctH, tmnxObjAppPool=tmnxObjAppPool, tmnxPortSchedOverrideLvl1PIR=tmnxPortSchedOverrideLvl1PIR, tmnxPortCemStatsEntry=tmnxPortCemStatsEntry, tmnxFrf12IntfFragmentThreshold=tmnxFrf12IntfFragmentThreshold, tPortNetEgrQGrpPStFwdInProfPkt=tPortNetEgrQGrpPStFwdInProfPkt, tmnxPortNumChannels=tmnxPortNumChannels, tmnxObjectAppResvCbsAmbrAlrmStep=tmnxObjectAppResvCbsAmbrAlrmStep, tmnxDDMTempLowWarning=tmnxDDMTempLowWarning, TmnxPortConnectorType=TmnxPortConnectorType, tmnxOpticalPortTdcmManCfgDisp=tmnxOpticalPortTdcmManCfgDisp, TmnxDS3Loopback=TmnxDS3Loopback, tPortAccIngSchedStatFwdOcts=tPortAccIngSchedStatFwdOcts, tmnxDDMLaneRxOpticalPwrHiWarn=tmnxDDMLaneRxOpticalPwrHiWarn, tmnxMlBundleGroupV4v0=tmnxMlBundleGroupV4v0, tPortAccIngQOverTable=tPortAccIngQOverTable, tPortNetEgrQGrpPStFwdInProfOct=tPortNetEgrQGrpPStFwdInProfOct, tmnxPortIngQosQStatFwdOutProfOcts=tmnxPortIngQosQStatFwdOutProfOcts, tmnxPortEgrExpShaperClass8Rate=tmnxPortEgrExpShaperClass8Rate, tmnxPortNotifySonetAlarmReason=tmnxPortNotifySonetAlarmReason, tPortAccEgrQOverHiPrioOnly=tPortAccEgrQOverHiPrioOnly, tPortNetEgrQGrpPStOffOutProfPkt=tPortNetEgrQGrpPStOffOutProfPkt, tPortAccEgrQGrpHMOrgString=tPortAccEgrQGrpHMOrgString, tmnxPortTransceiverLaserWaveLen=tmnxPortTransceiverLaserWaveLen, tmnxDS0ChanGroupTimeSlots=tmnxDS0ChanGroupTimeSlots, tPortAccEgrQGrpHMLastChgd=tPortAccEgrQGrpHMLastChgd, tPortAccEgrSchedStatFwdPktsHi=tPortAccEgrSchedStatFwdPktsHi, tmnxDS3ChannelAcctPolicyId=tmnxDS3ChannelAcctPolicyId, tmnxPortNotifyDS1AlarmReason=tmnxPortNotifyDS1AlarmReason, tmnxOpticalPortTdcmPowerOut=tmnxOpticalPortTdcmPowerOut, tmnxHsmdaPortSchOvrRowStatus=tmnxHsmdaPortSchOvrRowStatus, tmnxPortSchedOverrideLvl7CIR=tmnxPortSchedOverrideLvl7CIR, tmnxATMObjs=tmnxATMObjs, tmnxSonetPathOperMTU=tmnxSonetPathOperMTU, tmnxResvCbsPoolThreshRed=tmnxResvCbsPoolThreshRed, tmnxMlBundleGroupV5v0=tmnxMlBundleGroupV5v0, tmnxPortEtherSSMRxEsmc=tmnxPortEtherSSMRxEsmc, tmnxPortNetEgressFwdOutProfOcts=tmnxPortNetEgressFwdOutProfOcts, tmnxPortEgrQosQStatDpdInProfOcts=tmnxPortEgrQosQStatDpdInProfOcts, tPortAccIngQOverAdminPIR=tPortAccIngQOverAdminPIR, tmnxPortNotifyEtherCrcAlarmValue=tmnxPortNotifyEtherCrcAlarmValue, tmnxPortLoadBalanceAlgorithm=tmnxPortLoadBalanceAlgorithm, tmnxHsmdaPortSchOvrClass5WtInGp=tmnxHsmdaPortSchOvrClass5WtInGp, tmnxMlBundleV3v0Group=tmnxMlBundleV3v0Group, tmnxSonetMonJ0String=tmnxSonetMonJ0String, tmnxEqPortSonetAlarmClear=tmnxEqPortSonetAlarmClear, tmnxCiscoHDLCGroup=tmnxCiscoHDLCGroup, tmnxEqPortSonetPathAlarm=tmnxEqPortSonetPathAlarm, tPortEgrExpShaperCls7StFwdPktsL=tPortEgrExpShaperCls7StFwdPktsL, tmnxPortFCStatsIngFwdInProfOcts=tmnxPortFCStatsIngFwdInProfOcts, tmnxPortSchedOverrideLvl7PIR=tmnxPortSchedOverrideLvl7PIR, tPortEgrVPortEntry=tPortEgrVPortEntry, tmnxBundleMlpppClassCount=tmnxBundleMlpppClassCount, tmnxBundleMlfrLastChanged=tmnxBundleMlfrLastChanged, tmnxPortEtherDownWhenLoopedEnabled=tmnxPortEtherDownWhenLoopedEnabled, tmnxDDMTemperature=tmnxDDMTemperature, tPortAccEgrQOverTable=tPortAccEgrQOverTable, tmnxObjectAppPoolSize=tmnxObjectAppPoolSize, tmnxOpticalPortAmpCtrlState=tmnxOpticalPortAmpCtrlState, tmnxPortEgrExpShaperClass5Thresh=tmnxPortEgrExpShaperClass5Thresh, tmnxPortNotificationGroupV8v9=tmnxPortNotificationGroupV8v9, tPortEgrExpShaperCls5StMonOvrOL=tPortEgrExpShaperCls5StMonOvrOL, tPortNetEgrQGrpPStDrpOutProfPktL=tPortNetEgrQGrpPStDrpOutProfPktL, tmnxOpticalPortAmpSerialNum=tmnxOpticalPortAmpSerialNum, tPortNetEgrSchedStatFwdPktsLo=tPortNetEgrSchedStatFwdPktsLo, tmnxATMIntfMapping=tmnxATMIntfMapping, tmnxPortIngrMdaQos13StatDropOcts=tmnxPortIngrMdaQos13StatDropOcts, tmnxPortATMVpShaperTable=tmnxPortATMVpShaperTable, tmnxMlImaBundleGroup=tmnxMlImaBundleGroup, tPortAccIngQGrpDescr=tPortAccIngQGrpDescr, tmnxDS3ChannelClockMasterPortId=tmnxDS3ChannelClockMasterPortId, tPortEgrExpShaperCls3StFwdOcts=tPortEgrExpShaperCls3StFwdOcts, tmnxDS1Framing=tmnxDS1Framing, tmnxPortATMVpShaperLastMgmtCh=tmnxPortATMVpShaperLastMgmtCh, tmnxPortGroupV4v0=tmnxPortGroupV4v0, tmnxPortSchedStatsGroup=tmnxPortSchedStatsGroup, tmnxBundleMlpppEndpointID=tmnxBundleMlpppEndpointID, tPortEgrExpShaperCls7StFwdOctsL=tPortEgrExpShaperCls7StFwdOctsL, tmnxPortIngQosQStatFwdInProfOcts=tmnxPortIngQosQStatFwdInProfOcts, tmnxPortFCStatsEgrDroOutProfPkts=tmnxPortFCStatsEgrDroOutProfPkts, tmnxDS1BitErrorInsertionRate=tmnxDS1BitErrorInsertionRate, tmnxPortEgrShaperTable=tmnxPortEgrShaperTable, tmnxBundleImaGrpFeClockMode=tmnxBundleImaGrpFeClockMode, tmnxDDMLaneTxBiasCurrentLowAlarm=tmnxDDMLaneTxBiasCurrentLowAlarm, tmnxBPGrpAssocProtectBundleID=tmnxBPGrpAssocProtectBundleID, tmnxBundleImaGrpEntry=tmnxBundleImaGrpEntry, tmnxObjAppResvCbsNew=tmnxObjAppResvCbsNew, tmnxATMIntfVcThreshold=tmnxATMIntfVcThreshold)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxDS3ChannelMDLMonPortString=tmnxDS3ChannelMDLMonPortString, tmnxPortCemStatsEgrMultipleDrop=tmnxPortCemStatsEgrMultipleDrop, tmnxOpticalPortTdcmLoss=tmnxOpticalPortTdcmLoss, tmnxPortCemStatsEgrSESs=tmnxPortCemStatsEgrSESs, tmnxMcMfrBundleGroup=tmnxMcMfrBundleGroup, tmnxEqPortDS1Alarm=tmnxEqPortDS1Alarm, tmnxSonetPathType=tmnxSonetPathType, tmnxEqDigitalDiagMonitorFailure=tmnxEqDigitalDiagMonitorFailure, tmnxPortHybridEgrNetworkWeight=tmnxPortHybridEgrNetworkWeight, tmnxPortComp7450V8v0=tmnxPortComp7450V8v0, tmnxWaveTrackerAlarmState=tmnxWaveTrackerAlarmState, tPortEgrExpShaperStatsEntry=tPortEgrExpShaperStatsEntry, tPortAccEgrSchedStatName=tPortAccEgrSchedStatName, tmnxPortIngrMdaQos04StatDropOcts=tmnxPortIngrMdaQos04StatDropOcts, tmnxDS3ChannelMDLPortString=tmnxDS3ChannelMDLPortString, TmnxPortOperStatus=TmnxPortOperStatus, tmnxFrIntfFrf12Mode=tmnxFrIntfFrf12Mode, tmnxMcMlpppStatsIngressOct=tmnxMcMlpppStatsIngressOct, tmnxPortNetIngressQueueIndex=tmnxPortNetIngressQueueIndex, tmnxFrIntfLinkId=tmnxFrIntfLinkId, tPortAccEgrQGrpEntry=tPortAccEgrQGrpEntry, tPortEgrVPStLvlFwdPktH=tPortEgrVPStLvlFwdPktH, tmnxPortIngrMdaQos00StatDropOcts=tmnxPortIngrMdaQos00StatDropOcts, tmnxPortCemStatsEgrMisOrderDrop=tmnxPortCemStatsEgrMisOrderDrop, tmnxPortEgrExpShaperHiBurstInc=tmnxPortEgrExpShaperHiBurstInc, tmnxHsmdaPortSchOvrClass4Rate=tmnxHsmdaPortSchOvrClass4Rate, TmnxDSXIdleFillType=TmnxDSXIdleFillType, TmnxDSXClockSource=TmnxDSXClockSource, tmnxBundleMlfrTable=tmnxBundleMlfrTable, tPortEgrExpShaperCls8StMonOvrOH=tPortEgrExpShaperCls8StMonOvrOH, tPortAccEgrQGrpFrameBaseActg=tPortAccEgrQGrpFrameBaseActg, tmnxPortComplianceV9v0=tmnxPortComplianceV9v0, tmnxDDMLaneTxOutputPowerHiWarn=tmnxDDMLaneTxOutputPowerHiWarn, tmnxOpticalPortTdcmCfgAlarms=tmnxOpticalPortTdcmCfgAlarms, tmnxOpticalPortTdcmAlarmState=tmnxOpticalPortTdcmAlarmState, tmnxQosServiceDegraded=tmnxQosServiceDegraded, tmnxPortTypeName=tmnxPortTypeName, tmnxPortIngQosQStatUncolOctsOff=tmnxPortIngQosQStatUncolOctsOff, tPortNetEgrQGrpPStDrpOutProfOct=tPortNetEgrQGrpPStDrpOutProfOct, tmnxDS3ChannelMDLUnitString=tmnxDS3ChannelMDLUnitString, tPortNetEgrQOverMBS=tPortNetEgrQOverMBS, tmnxOpticalPortLaserTunability=tmnxOpticalPortLaserTunability, tmnxDDMTxOutputPower=tmnxDDMTxOutputPower, tmnxOpticalPortTdcmCtrlMode=tmnxOpticalPortTdcmCtrlMode, tmnxObjectAppRedAlrmThresh=tmnxObjectAppRedAlrmThresh, tmnxEqPortEtherAlarm=tmnxEqPortEtherAlarm, tmnxPortNotifyPortId=tmnxPortNotifyPortId, tmnxPortIngQosQStatDpdHiPrioPkts=tmnxPortIngQosQStatDpdHiPrioPkts, tmnxDS3ChannelMDLEicString=tmnxDS3ChannelMDLEicString, tmnxPortComp7750V6v1=tmnxPortComp7750V6v1, tmnxDDMExtCalTemperatureOffset=tmnxDDMExtCalTemperatureOffset, tmnxPortMIBModule=tmnxPortMIBModule, tmnxEqPortEtherLoopDetected=tmnxEqPortEtherLoopDetected, tmnxBundleImaGrpTxOamLablVal=tmnxBundleImaGrpTxOamLablVal, tmnxPortIngrMdaQos11StatDropOcts=tmnxPortIngrMdaQos11StatDropOcts, tmnxPortConnectTypeStatus=tmnxPortConnectTypeStatus, tmnxPortIngrMdaQos06StatDropPkts=tmnxPortIngrMdaQos06StatDropPkts, tmnxPortGroupV7v0=tmnxPortGroupV7v0, tmnxPortGroupV8v0=tmnxPortGroupV8v0, tmnxPortEgrExpShaperCl8BrstLimit=tmnxPortEgrExpShaperCl8BrstLimit, tmnxOpticalPortDwdmChannelMax=tmnxOpticalPortDwdmChannelMax, tmnxObjectAppSlopePolicy=tmnxObjectAppSlopePolicy, tmnxPortFCStatsEgrFwdOutProfOcts=tmnxPortFCStatsEgrFwdOutProfOcts, tmnxPortSFPNumLanes=tmnxPortSFPNumLanes, tmnxPortEtherPBBEtype=tmnxPortEtherPBBEtype, tPortEgrExpShaperAggStMonOvrOL=tPortEgrExpShaperAggStMonOvrOL, tmnxPortNetEgrQDroOutProfPkts=tmnxPortNetEgrQDroOutProfPkts, tPortNetEgrQGrpPStDrpOutProfOctL=tPortNetEgrQGrpPStDrpOutProfOctL, tPortNetEgrQGrpPStFwdInProfOctH=tPortNetEgrQGrpPStFwdInProfOctH, tmnxPortNotificationGroupR2r1=tmnxPortNotificationGroupR2r1, tmnxDDMAux2=tmnxDDMAux2, tPortEgrExpShaperCls2StMonOvrOH=tPortEgrExpShaperCls2StMonOvrOH, tPortNetEgrQGrpPStUncolOctOffH=tPortNetEgrQGrpPStUncolOctOffH, tPortEgrExpShaperCls3StFwdPktsH=tPortEgrExpShaperCls3StFwdPktsH, tmnxPortObjs=tmnxPortObjs, tmnxDDMSupplyVoltageLowAlarm=tmnxDDMSupplyVoltageLowAlarm, tPortNetEgrQGrpPStFwdInProfPktH=tPortNetEgrQGrpPStFwdInProfPktH, tmnxCiscoHDLCTable=tmnxCiscoHDLCTable, tPortNetEgrSchedStatEntry=tPortNetEgrSchedStatEntry, tmnxDS1PortLbo=tmnxDS1PortLbo, tmnxOpticalPortGroup=tmnxOpticalPortGroup, tmnxChannelPortID=tmnxChannelPortID, tmnxPortIngrMdaQos03StatDropOcts=tmnxPortIngrMdaQos03StatDropOcts, tmnxPortSchedOverrideLvl8CIR=tmnxPortSchedOverrideLvl8CIR, PYSNMP_MODULE_ID=tmnxPortMIBModule, tmnxFrf12IntfEgrQoSProfId=tmnxFrf12IntfEgrQoSProfId, tmnxResvCbsPoolThreshGreen=tmnxResvCbsPoolThreshGreen, tPortEgrVPStLvlDpdPktL=tPortEgrVPStLvlDpdPktL, tmnxSonetPathCRC=tmnxSonetPathCRC, TmnxMcMlpppClassIndex=TmnxMcMlpppClassIndex, tmnxBundleMemberImaNeUnavailSecs=tmnxBundleMemberImaNeUnavailSecs, tmnxMcMlpppBundleGroup=tmnxMcMlpppBundleGroup, tmnxBundleMemberImaRxTestState=tmnxBundleMemberImaRxTestState, tmnxDDMAux2LowWarning=tmnxDDMAux2LowWarning, tmnxBundleImaGrpNeClockMode=tmnxBundleImaGrpNeClockMode, tmnxWaveTrackerUpperPowerMargin=tmnxWaveTrackerUpperPowerMargin, tPortEgrVPStLvlDpdOctH=tPortEgrVPStLvlDpdOctH, tmnxDS1BERTErrors=tmnxDS1BERTErrors, tmnxBundleImaGrpGammaValue=tmnxBundleImaGrpGammaValue, tmnxWaveTrackerPowerCtrlEnable=tmnxWaveTrackerPowerCtrlEnable, tmnxDS1SignalMode=tmnxDS1SignalMode, tmnxPortStatsR2r1Group=tmnxPortStatsR2r1Group, tmnxDDMTxBiasCurrent=tmnxDDMTxBiasCurrent, tmnxPortNetEgressDroOutProfOcts=tmnxPortNetEgressDroOutProfOcts, tmnxEqSonetSfThreshNotCompatible=tmnxEqSonetSfThreshNotCompatible, tmnxBundlePrimaryMemberPortID=tmnxBundlePrimaryMemberPortID, tmnxPortEthernetV10v0Group=tmnxPortEthernetV10v0Group, tPortEgrExpShaperCls2StFwdOcts=tPortEgrExpShaperCls2StFwdOcts, tmnxPortComp7710V5v0=tmnxPortComp7710V5v0, tPortEgrVPStLvlDpdOctL=tPortEgrVPStLvlDpdOctL, tmnxBundleMemberImaNeSevErrSecs=tmnxBundleMemberImaNeSevErrSecs, tmnxBundleMemberImaViolations=tmnxBundleMemberImaViolations, tPortNetEgrSchedStatFwdOcts=tPortNetEgrSchedStatFwdOcts, tmnxPortEgrShaperRowStatus=tmnxPortEgrShaperRowStatus, tmnxDS0ChanGroupOperMTU=tmnxDS0ChanGroupOperMTU, tPortAccIngQOverMBS=tPortAccIngQOverMBS, tmnxDS3ChannelBitErrorInsertionRate=tmnxDS3ChannelBitErrorInsertionRate, tmnxDDMAux1LowWarning=tmnxDDMAux1LowWarning, tmnxOpticalPortAmpPumpCurrent=tmnxOpticalPortAmpPumpCurrent, tPortAccIngSchedStatTable=tPortAccIngSchedStatTable, tmnxPortTypeStatus=tmnxPortTypeStatus, tmnxPortNetIngressFwdOutProfPkts=tmnxPortNetIngressFwdOutProfPkts, tmnxPortTDMGroupV6v0=tmnxPortTDMGroupV6v0, tmnxPortComp7710V8v0=tmnxPortComp7710V8v0, tmnxWaveTrackerTable=tmnxWaveTrackerTable, tmnxDS3ChannelBERTErrors=tmnxDS3ChannelBERTErrors, tmnxMcMlpppStatsEgressErrPkt=tmnxMcMlpppStatsEgressErrPkt, tmnxPortType=tmnxPortType, tmnxPortGroups=tmnxPortGroups, tmnxDS1BERTPattern=tmnxDS1BERTPattern, tmnxDDMTxOutputPowerLowWarning=tmnxDDMTxOutputPowerLowWarning, tPortEgrExpShaperCls3StMonOvrOL=tPortEgrExpShaperCls3StMonOvrOL, tPortAccIngSchedStatFwdOctsHi=tPortAccIngSchedStatFwdOctsHi, tmnxPortNotificationGroupV3v0=tmnxPortNotificationGroupV3v0, tmnxDS0ChanGroupIdleCycleFlags=tmnxDS0ChanGroupIdleCycleFlags, tmnxPortNetEgrV10v0Group=tmnxPortNetEgrV10v0Group, tmnxDS1ReportAlarmStatus=tmnxDS1ReportAlarmStatus, tmnxFRObjs=tmnxFRObjs, tmnxPortIngQosQStatUncolPktsOff=tmnxPortIngQosQStatUncolPktsOff, tPortEgrVPortHMOrgString=tPortEgrVPortHMOrgString, tPortAccEgrQOverEntry=tPortAccEgrQOverEntry, tmnxDS0ChanGroupMTU=tmnxDS0ChanGroupMTU, tmnxPortIngQosQStatEntry=tmnxPortIngQosQStatEntry, tmnxSonetSpeed=tmnxSonetSpeed, tmnxDS3ChannelRowStatus=tmnxDS3ChannelRowStatus, tmnxHsmdaPortSchOvrClass2WtInGp=tmnxHsmdaPortSchOvrClass2WtInGp, tmnxPortEgrExpShaperClass5Rate=tmnxPortEgrExpShaperClass5Rate, tmnxPortComp7750V7v0=tmnxPortComp7750V7v0, tmnxPwPortEntry=tmnxPwPortEntry, tmnxPortIngrMdaQos00StatDropPkts=tmnxPortIngrMdaQos00StatDropPkts, TmnxPortEncapType=TmnxPortEncapType, TmnxImaGrpVersion=TmnxImaGrpVersion, tPortEgrExpShaperCls7StMonOvrOL=tPortEgrExpShaperCls7StMonOvrOL, tPortEgrExpShaperAggStFwdOctsH=tPortEgrExpShaperAggStFwdOctsH, tmnxPortCemStatsEgrForwardedPkts=tmnxPortCemStatsEgrForwardedPkts, tmnxCiscoHDLCDownCount=tmnxCiscoHDLCDownCount, tmnxSonetHoldTimeDown=tmnxSonetHoldTimeDown, tmnxATMIntfEntry=tmnxATMIntfEntry, tmnxPortMode=tmnxPortMode, tPortNetEgrQGrpPStOffOutProfOctL=tPortNetEgrQGrpPStOffOutProfOctL, tPortEgrExpShaperCls4StMonOvrOL=tPortEgrExpShaperCls4StMonOvrOL, tmnxPortCemStatsEgrJtrBfrURun=tmnxPortCemStatsEgrJtrBfrURun, tPortEgrExpShaperCls8StMonOvrOL=tPortEgrExpShaperCls8StMonOvrOL, tmnxBundleMemberMlfrTable=tmnxBundleMemberMlfrTable, tmnxPwPortId=tmnxPwPortId, tmnxFRDlcmiStatusEnqMsgTimeouts=tmnxFRDlcmiStatusEnqMsgTimeouts, tPortAccIngQGrpRowStatus=tPortAccIngQGrpRowStatus, tmnxPortHybridEgrAccessWeight=tmnxPortHybridEgrAccessWeight, TmnxOpticalAmpAlarm=TmnxOpticalAmpAlarm, tmnxPortEtherPkts1519toMax=tmnxPortEtherPkts1519toMax, tmnxPortHoldTimeUp=tmnxPortHoldTimeUp, tmnxPortEtherDownWhenLoopedState=tmnxPortEtherDownWhenLoopedState, tmnxPortClearAlarms=tmnxPortClearAlarms, tmnxDDMLaneTempLowAlarm=tmnxDDMLaneTempLowAlarm, tmnxDDMExtCalTxLaserBiasSlope=tmnxDDMExtCalTxLaserBiasSlope, tmnxMlpppBundleGroup=tmnxMlpppBundleGroup, tPortAccIngQOverCIRAdaptation=tPortAccIngQOverCIRAdaptation, tmnxEqDigitalDiagMonitorClear=tmnxEqDigitalDiagMonitorClear, tPortNetEgrQGrpPStatMode=tPortNetEgrQGrpPStatMode, tPortNetEgrQGrpDescr=tPortNetEgrQGrpDescr, tPortEgrVPStLvlFwdOctL=tPortEgrVPStLvlFwdOctL, tmnxPortComp7750V9v0=tmnxPortComp7750V9v0, tmnxPortIngrMdaQos08StatDropPkts=tmnxPortIngrMdaQos08StatDropPkts, tPortNetEgrQOverMBSBytes=tPortNetEgrQOverMBSBytes, tmnxPortNetIngressDroOutProfOcts=tmnxPortNetIngressDroOutProfOcts, tPortNetEgrSchedStatTable=tPortNetEgrSchedStatTable, tPortNetEgrQGrpLastChgd=tPortNetEgrQGrpLastChgd, tmnxBundleImaGrpSmFeState=tmnxBundleImaGrpSmFeState, tmnxCiscoHDLCKeepAliveInt=tmnxCiscoHDLCKeepAliveInt, tPortAccEgrQGrpCollectStats=tPortAccEgrQGrpCollectStats, tmnxPortEtherSSMTxDus=tmnxPortEtherSSMTxDus, tPortEgrVPStLvlDpdOct=tPortEgrVPStLvlDpdOct, tmnxDDMFailedObject=tmnxDDMFailedObject, tPortAccEgrQGrpName=tPortAccEgrQGrpName, tmnxPortUnsupportedFunction=tmnxPortUnsupportedFunction, TmnxDSXBertOperStatus=TmnxDSXBertOperStatus, tmnxOpticalPortTdcmMeasDisp=tmnxOpticalPortTdcmMeasDisp, tmnxDS3ChannelIdleCycleFlags=tmnxDS3ChannelIdleCycleFlags, tmnxDS1Loopback=tmnxDS1Loopback, tmnxSonetPathJ1String=tmnxSonetPathJ1String, tmnxPortIngrMdaQosStatEntry=tmnxPortIngrMdaQosStatEntry, tmnxPortQV8v0Group=tmnxPortQV8v0Group, TmnxOpticalTdcmAlarm=TmnxOpticalTdcmAlarm, tPortEgrExpShaperCls8StMonOvrOct=tPortEgrExpShaperCls8StMonOvrOct, tmnxPortNetIngressFwdOutProfOcts=tmnxPortNetIngressFwdOutProfOcts, tmnxSonetApsAdvertiseTimeLeft=tmnxSonetApsAdvertiseTimeLeft, tPortAccEgrSchedStatFwdOctsHi=tPortAccEgrSchedStatFwdOctsHi, tPortAccEgrQOverMBS=tPortAccEgrQOverMBS, tmnxHsmdaPortSchOvrTblLastChngd=tmnxHsmdaPortSchOvrTblLastChngd, tPortAccIngQGrpCollectStats=tPortAccIngQGrpCollectStats, tPortEgrExpShaperCls1StMonOvrOH=tPortEgrExpShaperCls1StMonOvrOH, tmnxBundleOperMTU=tmnxBundleOperMTU, tPortEgrExpShaperStatsTable=tPortEgrExpShaperStatsTable, tPortNetEgrQGrpPStOffInProfPktL=tPortNetEgrQGrpPStOffInProfPktL, tmnxPortPlcyObjs=tmnxPortPlcyObjs, tmnxObsoleteGroupV5v0=tmnxObsoleteGroupV5v0, tmnxPortConnectTypeIndex=tmnxPortConnectTypeIndex, TmnxOpticalTdcmCtrlMode=TmnxOpticalTdcmCtrlMode, tmnxPortEquipped=tmnxPortEquipped, tmnxDS3ChannelSubrateCSUMode=tmnxDS3ChannelSubrateCSUMode, tmnxDDMLaneRxOpticalPwrHiAlarm=tmnxDDMLaneRxOpticalPwrHiAlarm, tmnxPortPlcyEntry=tmnxPortPlcyEntry, tPortAccEgrQOverPIRAdaptation=tPortAccEgrQOverPIRAdaptation, tmnxPortTDMV3v0Group=tmnxPortTDMV3v0Group, tmnxPortEncapType=tmnxPortEncapType, tmnxPortNetEgressDroOutProfPkts=tmnxPortNetEgressDroOutProfPkts, tPortAccIngQOverMBSBytes=tPortAccIngQOverMBSBytes, tmnxPortEgrQosQStatQueueId=tmnxPortEgrQosQStatQueueId, tmnxDDMLaneTxOutputPowerLowAlarm=tmnxDDMLaneTxOutputPowerLowAlarm, tmnxDS3ChannelChannelized=tmnxDS3ChannelChannelized, tPortEgrVPStLstClrdTime=tPortEgrVPStLstClrdTime, tmnxPortCemStatsEgrJtrBfrDepth=tmnxPortCemStatsEgrJtrBfrDepth, tmnxPortNotifyObjsGroupV8v9=tmnxPortNotifyObjsGroupV8v9, tmnxDDMExtCalRxPower2=tmnxDDMExtCalRxPower2, tmnxPortComp7450V5v0=tmnxPortComp7450V5v0, tmnxDS3ChannelScramble=tmnxDS3ChannelScramble, tPortNetEgrSchedStatFwdPktsHi=tPortNetEgrSchedStatFwdPktsHi, tmnxSonetPathRowStatus=tmnxSonetPathRowStatus, tmnxCiscoHDLCStatOutOctets=tmnxCiscoHDLCStatOutOctets, tmnxDDMLaneTxBiasCurrentHiWarn=tmnxDDMLaneTxBiasCurrentHiWarn, tmnxHostMatchNotifySubIdent=tmnxHostMatchNotifySubIdent, tmnxFRDlcmiN392Dce=tmnxFRDlcmiN392Dce, tPortNetEgrQGrpTableLastChgd=tPortNetEgrQGrpTableLastChgd, tPortNetEgrQGrpPStFwdOutProfOctL=tPortNetEgrQGrpPStFwdOutProfOctL, tPortEgrVPortHMRowStatus=tPortEgrVPortHMRowStatus, tmnxPortComp7710V7v0=tmnxPortComp7710V7v0, tmnxObjectAppType=tmnxObjectAppType, tmnxEqPortEtherCrcAlarmClear=tmnxEqPortEtherCrcAlarmClear, tmnxPortEtherTable=tmnxPortEtherTable, tPortEgrVPortHostMatchFailure=tPortEgrVPortHostMatchFailure, TmnxOpticalTdcmCtrlState=TmnxOpticalTdcmCtrlState, tmnxBundleImaGrpErrorIcpCells=tmnxBundleImaGrpErrorIcpCells, tPortAccIngSchedStatFwdPkts=tPortAccIngSchedStatFwdPkts, tmnxEqPortDuplexCfgNotCompatible=tmnxEqPortDuplexCfgNotCompatible)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tPortAccIngQOverQueue=tPortAccIngQOverQueue, tmnxPortSchedOverrideLvl4PIR=tmnxPortSchedOverrideLvl4PIR, tPortEgrVPStLvlFwdOct=tPortEgrVPStLvlFwdOct, tmnxDDMSupplyVoltage=tmnxDDMSupplyVoltage, tPortAccIngQGrpEntry=tPortAccIngQGrpEntry, tmnxOpticalPortAmpPowerIn=tmnxOpticalPortAmpPowerIn, tmnxPortSSMRxQualityLevel=tmnxPortSSMRxQualityLevel, tmnxBundleMemberImaLstRxIcpCells=tmnxBundleMemberImaLstRxIcpCells, tmnxPortIngrMdaQos09StatDropPkts=tmnxPortIngrMdaQos09StatDropPkts, tmnxPortNotifyObjsGroupR2r1=tmnxPortNotifyObjsGroupR2r1, tPortAccEgrQGrpSchedPol=tPortAccEgrQGrpSchedPol, tmnxPortFRGroup=tmnxPortFRGroup, tPortEgrExpShaperStatsHLEntry=tPortEgrExpShaperStatsHLEntry, tmnxDS3ChannelBERTPattern=tmnxDS3ChannelBERTPattern, tmnxBundleImaGrpTable=tmnxBundleImaGrpTable, TmnxPortType=TmnxPortType, tmnxPortEthernetV3v0Group=tmnxPortEthernetV3v0Group, tmnxPortHybridIngAccessWeight=tmnxPortHybridIngAccessWeight, tmnxDDMLaneTxOutputPower=tmnxDDMLaneTxOutputPower, tmnxPortSFPVendorSerialNum=tmnxPortSFPVendorSerialNum, tmnxDDMAux2LowAlarm=tmnxDDMAux2LowAlarm, tmnxBundleImaGrpTestMember=tmnxBundleImaGrpTestMember, tPortAccEgrSchedStatFwdPkts=tPortAccEgrSchedStatFwdPkts, tmnxPortFCStatsIngFwdOutProfOcts=tmnxPortFCStatsIngFwdOutProfOcts, tmnxPortNetEgressStatsEntry=tmnxPortNetEgressStatsEntry, tmnxBundleImaGrpTestState=tmnxBundleImaGrpTestState, tmnxEqPortEtherLoopCleared=tmnxEqPortEtherLoopCleared, tmnxBundleMemberImaNeTxState=tmnxBundleMemberImaNeTxState, tmnxPortV3v0Group=tmnxPortV3v0Group, tmnxPortOperStatus=tmnxPortOperStatus, tmnxEqPortDS1AlarmClear=tmnxEqPortDS1AlarmClear, tmnxDS1InRemoteLoop=tmnxDS1InRemoteLoop, tmnxPortStatsObjs=tmnxPortStatsObjs, tmnxPortIngQosQStatFwdOutProfPkts=tmnxPortIngQosQStatFwdOutProfPkts, tmnxPortEtherMTU=tmnxPortEtherMTU, tmnxPortEtherOperSpeed=tmnxPortEtherOperSpeed, tmnxDS3ChannelMDLFicString=tmnxDS3ChannelMDLFicString, tmnxBundleImaGrpBetaValue=tmnxBundleImaGrpBetaValue, tPortAccIngQGrpAcctgPolId=tPortAccIngQGrpAcctgPolId, tmnxBundleMlpppEndpointIDClass=tmnxBundleMlpppEndpointIDClass, tmnxWaveTrackerEntry=tmnxWaveTrackerEntry, tmnxPortInterfaceGroupHandlerIdx=tmnxPortInterfaceGroupHandlerIdx, tmnxBundleMemberMlfrDownReason=tmnxBundleMemberMlfrDownReason, tPortNetEgrQOverTable=tPortNetEgrQOverTable, tmnxPortPortID=tmnxPortPortID, tmnxPortConnectTypeEntry=tmnxPortConnectTypeEntry, tmnxPortSchedOverrideSchedName=tmnxPortSchedOverrideSchedName, tmnxLsrIpLoadBalancing=tmnxLsrIpLoadBalancing, tmnxPortNetEgressDroInProfPkts=tmnxPortNetEgressDroInProfPkts, tmnxPwPortTable=tmnxPwPortTable, tmnxPortEtherCrcAlarmReason=tmnxPortEtherCrcAlarmReason, tPortNetEgrQGrpArbitStatFwdPktsH=tPortNetEgrQGrpArbitStatFwdPktsH, tmnxBundleMemberImaOifAnomalies=tmnxBundleMemberImaOifAnomalies, tmnxPortEtherDuplex=tmnxPortEtherDuplex, tPortAccEgrQOverMBSBytes=tPortAccEgrQOverMBSBytes, tmnxBundleImaGrpRxIcpCells=tmnxBundleImaGrpRxIcpCells, tmnxDS1PortBuildout=tmnxDS1PortBuildout, tmnxDS0ChanGroupSignalFillType=tmnxDS0ChanGroupSignalFillType, tmnxPortIngQosQStatOffHiPrioOcts=tmnxPortIngQosQStatOffHiPrioOcts, tmnxEqSonetClockSrcNotCompatible=tmnxEqSonetClockSrcNotCompatible, tmnxDS1RowStatus=tmnxDS1RowStatus, tPortNetEgrQGrpPStDrpInProfPktH=tPortNetEgrQGrpPStDrpInProfPktH, tmnxDDMLaneEntry=tmnxDDMLaneEntry, tmnxPortNotificationObjects=tmnxPortNotificationObjects, tPortNetEgrQGrpTable=tPortNetEgrQGrpTable, tPortNetEgrQGrpAcctgPolId=tPortNetEgrQGrpAcctgPolId, tPortAccEgrQOverAdminPIRPercent=tPortAccEgrQOverAdminPIRPercent, tmnxPortNetEgrQFwdOutProfPkts=tmnxPortNetEgrQFwdOutProfPkts, tmnxDDMLaneIdOrModule=tmnxDDMLaneIdOrModule, tmnxPortDwdmGroup=tmnxPortDwdmGroup, tmnxPortPlcyRowStatus=tmnxPortPlcyRowStatus, tPortNetEgrQOverPIRAdaptation=tPortNetEgrQOverPIRAdaptation, tmnxPortATMGroupV7v0=tmnxPortATMGroupV7v0, tmnxPortNetworkEgrQueues=tmnxPortNetworkEgrQueues, tmnxPortNetIngressStatsTable=tmnxPortNetIngressStatsTable, tmnxPortHoldTimeUnits=tmnxPortHoldTimeUnits, tPortNetEgrQOverQueue=tPortNetEgrQOverQueue, tmnxDS1BERTTotalBits=tmnxDS1BERTTotalBits, tPortNetEgrQGrpPStUncolOctOffL=tPortNetEgrQGrpPStUncolOctOffL, tmnxPortEgrExpShaperCl6BrstLimit=tmnxPortEgrExpShaperCl6BrstLimit, tmnxDDMExtCalRxPower4=tmnxDDMExtCalRxPower4, tmnxPortEtherCollectStats=tmnxPortEtherCollectStats, TmnxPortState=TmnxPortState, tmnxBundleNumActiveLinks=tmnxBundleNumActiveLinks, tmnxPortEgrExpShaperLastChanged=tmnxPortEgrExpShaperLastChanged, tmnxPortComp7450V4v0=tmnxPortComp7450V4v0, tmnxPortEgrQosQStatFwdInProfOcts=tmnxPortEgrQosQStatFwdInProfOcts, tmnxSonetPathMonC2Byte=tmnxSonetPathMonC2Byte, tmnxPortSFPMedia=tmnxPortSFPMedia, tPortEgrVPStLvlFwdPkt=tPortEgrVPStLvlFwdPkt, tmnxDDMExtCalVoltageSlope=tmnxDDMExtCalVoltageSlope, tmnxBundleMemberImaNeRxUnuseSecs=tmnxBundleMemberImaNeRxUnuseSecs, tmnxPortIngrMdaQos13StatDropPkts=tmnxPortIngrMdaQos13StatDropPkts, tmnxPortEtherCrcMonSdTMultiplier=tmnxPortEtherCrcMonSdTMultiplier, tmnxPortOtuCapable=tmnxPortOtuCapable, tmnxWaveTrackerInUse=tmnxWaveTrackerInUse, tmnxPortNetEgrQFwdInProfOcts=tmnxPortNetEgrQFwdInProfOcts, tPortAccEgrSchedStatFwdPktsLo=tPortAccEgrSchedStatFwdPktsLo, tmnxPortTDMGroupV5v0=tmnxPortTDMGroupV5v0, tPortAccEgrQGrpAggRateLimit=tPortAccEgrQGrpAggRateLimit, tmnxSonetGroupType=tmnxSonetGroupType, tmnxChannelIdxString=tmnxChannelIdxString, tmnxPortEtherAutoNegotiate=tmnxPortEtherAutoNegotiate, tmnxPortEgrQosQStatFwdOutProfPkts=tmnxPortEgrQosQStatFwdOutProfPkts, tmnxEqPortBndlBadEndPtDiscr=tmnxEqPortBndlBadEndPtDiscr, tmnxDS1InsertSingleBitError=tmnxDS1InsertSingleBitError, tmnxOpticalPortTdcmSerialNum=tmnxOpticalPortTdcmSerialNum, tmnxEqPortSFPStatusFailure=tmnxEqPortSFPStatusFailure, tmnxPortSFPStatus=tmnxPortSFPStatus, tmnxPortComp7710V6v0=tmnxPortComp7710V6v0, tmnxPortSchedOverrideLvl8PIR=tmnxPortSchedOverrideLvl8PIR, tmnxPortPlcyName=tmnxPortPlcyName, tmnxDDMTempHiWarning=tmnxDDMTempHiWarning, tmnxPortFCStatsIngDroInProfPkts=tmnxPortFCStatsIngDroInProfPkts, tmnxObjAppSumOfQResvSize=tmnxObjAppSumOfQResvSize, tmnxPortEgrQosQStatEntry=tmnxPortEgrQosQStatEntry, tPortNetEgrQGrpPStDrpOutProfPktH=tPortNetEgrQGrpPStDrpOutProfPktH, tmnxPortNotifyEtherAlarmReason=tmnxPortNotifyEtherAlarmReason, tPortEgrExpShaperAggStFwdPktsH=tPortEgrExpShaperAggStFwdPktsH, tmnxDS3ChannelClockSyncState=tmnxDS3ChannelClockSyncState, tmnxDS3ChannelCollectStats=tmnxDS3ChannelCollectStats, tmnxDDMLaneFailedThresholds=tmnxDDMLaneFailedThresholds, tmnxOpticalPortTdcmRtd2Temp=tmnxOpticalPortTdcmRtd2Temp, tmnxPortEgrExpShaperClass4Rate=tmnxPortEgrExpShaperClass4Rate, tPortNetEgrQOverEntry=tPortNetEgrQOverEntry, tPortAccIngSchedStatFwdPktsHi=tPortAccIngSchedStatFwdPktsHi, tPortEgrExpShaperAggStFwdOctsL=tPortEgrExpShaperAggStFwdOctsL, tmnxDDMLaneTempHiWarn=tmnxDDMLaneTempHiWarn, tmnxPortConnectTypeName=tmnxPortConnectTypeName, tmnxPortSFPEquipped=tmnxPortSFPEquipped, tPortAccIngQGrpTableLastChgd=tPortAccIngQGrpTableLastChgd, tmnxDS1PortEntry=tmnxDS1PortEntry, tmnxFrIntfTable=tmnxFrIntfTable, tmnxBundleMemberUpTime=tmnxBundleMemberUpTime, tmnxDS3ChannelBERTSynched=tmnxDS3ChannelBERTSynched, tmnxPortTransceiverModelNumber=tmnxPortTransceiverModelNumber, tmnxPortComp7450V7v0=tmnxPortComp7450V7v0, tmnxSonetGroupEntry=tmnxSonetGroupEntry, tmnxPortIngrMdaQos12StatDropOcts=tmnxPortIngrMdaQos12StatDropOcts, tPortNetEgrQGrpArbitStatFwdPktsL=tPortNetEgrQGrpArbitStatFwdPktsL, tmnxBundleImaGrpTxIcpCells=tmnxBundleImaGrpTxIcpCells, tmnxFRDlcmiTable=tmnxFRDlcmiTable, tmnxPortNetEgrQFwdInProfPkts=tmnxPortNetEgrQFwdInProfPkts, tPortEgrExpShaperCls1StMonOvrOL=tPortEgrExpShaperCls1StMonOvrOL, tmnxPortTestMode=tmnxPortTestMode, tmnxDS3ChannelSubrate=tmnxDS3ChannelSubrate, tmnxCiscoHDLCStatOutPkts=tmnxCiscoHDLCStatOutPkts, tPortEgrExpShaperCls5StMonOvrOH=tPortEgrExpShaperCls5StMonOvrOH, tmnxBundleMemberImaTxLid=tmnxBundleMemberImaTxLid, TmnxWaveTrackerAlarm=TmnxWaveTrackerAlarm, TmnxDs0ChannelList=TmnxDs0ChannelList, tmnxPortAlarmState=tmnxPortAlarmState, tmnxDDMAux1HiWarning=tmnxDDMAux1HiWarning, tPortNetEgrQGrpFrameBaseActg=tPortNetEgrQGrpFrameBaseActg, tPortEgrExpShaperCls1StFwdOctsH=tPortEgrExpShaperCls1StFwdOctsH, tmnxDS0ChanGroupTable=tmnxDS0ChanGroupTable, tPortNetEgrQGrpPStFwdOutProfOct=tPortNetEgrQGrpPStFwdOutProfOct, tmnxDS3ChannelBERTTotalBits=tmnxDS3ChannelBERTTotalBits, tPortAccIngQOverHiPrioOnly=tPortAccIngQOverHiPrioOnly)
