#
# PySNMP MIB module TIGER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIGER
# Produced by pysmi-0.3.4 at Mon Apr 29 21:09:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, iso, NotificationType, MibIdentifier, Gauge32, Unsigned32, IpAddress, Bits, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Counter32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "NotificationType", "MibIdentifier", "Gauge32", "Unsigned32", "IpAddress", "Bits", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Counter32", "NotificationType", "Integer32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
ngcan = MibIdentifier((1, 3, 6, 1, 4, 1, 1978))
tiger = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2))
generalTiger = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1))
ifTStack = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1))
tsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2))
buffers = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3))
generalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 4))
autif = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5))
apath = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6))
svcmsg = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7))
bootp = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8))
mount = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9))
dnsRes = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10))
vt = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11))
class NonNegativeInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class InterfaceIndex(Integer32):
    pass

class TigerDateAndTime(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(15, 15), ValueSizeConstraint(20, 20), )
ifTStackTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1, 1), )
if mibBuilder.loadTexts: ifTStackTable.setStatus('mandatory')
ifTStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1, 1, 1), ).setIndexNames((0, "TIGER", "ifTStackIndex"))
if mibBuilder.loadTexts: ifTStackEntry.setStatus('mandatory')
ifTStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTStackIndex.setStatus('mandatory')
ifTStackHigherLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTStackHigherLayer.setStatus('mandatory')
ifTStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTStackLowerLayer.setStatus('mandatory')
ifTStackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTStackStatus.setStatus('mandatory')
tigSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 1), TigerDateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigSystemDate.setStatus('mandatory')
tigSystemExceptionEcho = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigSystemExceptionEcho.setStatus('mandatory')
tigSystemExceptionLogging = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigSystemExceptionLogging.setStatus('mandatory')
tigSystemExceptionSaveLog = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigSystemExceptionSaveLog.setStatus('mandatory')
tigPCMCIATable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 5), )
if mibBuilder.loadTexts: tigPCMCIATable.setStatus('mandatory')
tigPCMCIAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 5, 1), ).setIndexNames((0, "TIGER", "tigPCMCIASlot"))
if mibBuilder.loadTexts: tigPCMCIAEntry.setStatus('mandatory')
tigPCMCIASlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigPCMCIASlot.setStatus('mandatory')
tigPCMCIAIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 5, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPCMCIAIf.setStatus('mandatory')
tigTokenRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("four", 1), ("sixteen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigTokenRingSpeed.setStatus('mandatory')
tigPCMCIAType = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("token-ring", 1), ("modem", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPCMCIAType.setStatus('mandatory')
tigConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigConfigFile.setStatus('mandatory')
tigRestartReason = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("power", 1), ("reset-button", 2), ("watchdog", 3), ("config-fail", 4), ("other", 5), ("double-bus-fault", 6), ("fatal-exception", 7), ("reboot-command", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigRestartReason.setStatus('mandatory')
tigClearStats = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("cleared", 2), ("cleared-confirmed", 3))).clone('cleared')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigClearStats.setStatus('mandatory')
tigClearStatsTime = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigClearStatsTime.setStatus('mandatory')
tigCpuTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigCpuTrapControl.setStatus('mandatory')
tigCpuIdleState = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigCpuIdleState.setStatus('mandatory')
tigSystemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigSystemSerialNum.setStatus('mandatory')
tigDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 2, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigDomainName.setStatus('mandatory')
tigPoolNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigPoolNumEntries.setStatus('mandatory')
tigPoolTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2), )
if mibBuilder.loadTexts: tigPoolTable.setStatus('mandatory')
tigPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1), ).setIndexNames((0, "TIGER", "tigPoolIndex"))
if mibBuilder.loadTexts: tigPoolEntry.setStatus('mandatory')
tigPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolIndex.setStatus('mandatory')
tigPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolSize.setStatus('mandatory')
tigPoolBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolBufSize.setStatus('mandatory')
tigPoolLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolLowThreshold.setStatus('mandatory')
tigPoolHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolHighThreshold.setStatus('mandatory')
tigPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigPoolFree.setStatus('mandatory')
tigPoolCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInUse", 1), ("create", 2), ("created", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolCommandStatus.setStatus('mandatory')
tigPoolAllocationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigPoolAllocationFailures.setStatus('mandatory')
tigPoolTrapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tigPoolTrapControl.setStatus('mandatory')
tigPoolTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("recovery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tigPoolTrapStatus.setStatus('mandatory')
tigPool = NotificationType((1, 3, 6, 1, 4, 1, 1978, 2, 1, 4) + (0,1)).setObjects(("TIGER", "tigPoolIndex"), ("TIGER", "tigPoolTrapStatus"), ("TIGER", "tigPoolFree"))
tigRestart = NotificationType((1, 3, 6, 1, 4, 1, 1978, 2, 1, 4) + (0,2)).setObjects(("TIGER", "tigRestartReason"), ("TIGER", "tigSystemDate"))
tigIdle = NotificationType((1, 3, 6, 1, 4, 1, 1978, 2, 1, 4) + (0,3)).setObjects(("TIGER", "tigCpuIdleState"))
autifNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifNumEntries.setStatus('mandatory')
autifTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2), )
if mibBuilder.loadTexts: autifTable.setStatus('mandatory')
autifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1), ).setIndexNames((0, "TIGER", "autifIndex"))
if mibBuilder.loadTexts: autifEntry.setStatus('mandatory')
autifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifIndex.setStatus('mandatory')
autifService = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2), ("system-1", 3), ("continental", 4), ("dlsw", 5), ("listener", 6), ("matip", 7), ("ofep-sabre", 8), ("ofep-sabre-listener", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifService.setStatus('mandatory')
autifRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifRemAddress.setStatus('mandatory')
autifLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifLocalPort.setStatus('mandatory')
autifRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifRemotePort.setStatus('mandatory')
autifRxBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifRxBufSize.setStatus('mandatory')
autifTxBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifTxBufSize.setStatus('mandatory')
autifSockQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifSockQueueSize.setStatus('mandatory')
autifTypeAQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifTypeAQueueSize.setStatus('mandatory')
autifTypeAMaxMsgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifTypeAMaxMsgSize.setStatus('mandatory')
autifInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifInOctets.setStatus('mandatory')
autifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifInUcastPkts.setStatus('mandatory')
autifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifInNUcastPkts.setStatus('mandatory')
autifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifInDiscards.setStatus('mandatory')
autifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifInErrors.setStatus('mandatory')
autifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifInUnknownProtos.setStatus('mandatory')
autifOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifOutOctets.setStatus('mandatory')
autifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifOutUcastPkts.setStatus('mandatory')
autifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifOutNUcastPkts.setStatus('mandatory')
autifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifOutDiscards.setStatus('mandatory')
autifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifOutErrors.setStatus('mandatory')
autifIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifIA.setStatus('mandatory')
autifAliasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifAliasAddress.setStatus('mandatory')
autifSockPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("routine", 1), ("priority", 2), ("immediate", 3), ("flash", 4), ("flash-override", 5), ("critical", 6), ("internetwork-control", 7), ("network-control", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifSockPrecedence.setStatus('mandatory')
autifDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ip", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifDestAddrType.setStatus('mandatory')
autifSockOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifSockOptions.setStatus('mandatory')
autifLNIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifLNIA.setStatus('mandatory')
autifLBName = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifLBName.setStatus('mandatory')
autifOFEPKeepAliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 29), Integer32().clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifOFEPKeepAliveTimeout.setStatus('mandatory')
autifUserIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifUserIdleTimeout.setStatus('mandatory')
autifXlatToSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifXlatToSocket.setStatus('mandatory')
autifXlatFromSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autifXlatFromSocket.setStatus('mandatory')
autifRealToVTRoutingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifRealToVTRoutingErrors.setStatus('mandatory')
autifVTToRealRoutingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifVTToRealRoutingErrors.setStatus('mandatory')
autifRealToVTHashDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 5, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autifRealToVTHashDepth.setStatus('mandatory')
apathNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apathNumEntries.setStatus('mandatory')
apathTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2), )
if mibBuilder.loadTexts: apathTable.setStatus('mandatory')
apathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1), ).setIndexNames((0, "TIGER", "apathIndex"))
if mibBuilder.loadTexts: apathEntry.setStatus('mandatory')
apathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathIndex.setStatus('mandatory')
apathType = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("primary-mute", 3), ("primary-mute-xlat", 4))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathType.setStatus('mandatory')
apathIdleTimerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathIdleTimerMax.setStatus('mandatory')
apathResponseTimerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathResponseTimerMax.setStatus('mandatory')
apathRetryCounterMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathRetryCounterMax.setStatus('mandatory')
apathEndUserStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathEndUserStatusEnable.setStatus('mandatory')
apathTrafficIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathTrafficIdleTimer.setStatus('mandatory')
apathConnectTimerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathConnectTimerMax.setStatus('mandatory')
apathPathUpMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathPathUpMsg.setStatus('mandatory')
apathUserNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apathUserNumEntries.setStatus('mandatory')
apathUserTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4), )
if mibBuilder.loadTexts: apathUserTable.setStatus('mandatory')
apathUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1), ).setIndexNames((0, "TIGER", "apathUserIndex"))
if mibBuilder.loadTexts: apathUserEntry.setStatus('mandatory')
apathUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserIndex.setStatus('mandatory')
apathUserApathOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mainPrefered", 1), ("switchToBestPath", 2), ("avoidSwitching", 3))).clone('mainPrefered')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserApathOperation.setStatus('mandatory')
apathUserMainApathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserMainApathIndex.setStatus('mandatory')
apathUserAlt1ApathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserAlt1ApathIndex.setStatus('mandatory')
apathUserAlt2ApathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserAlt2ApathIndex.setStatus('mandatory')
apathUserAlt3ApathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserAlt3ApathIndex.setStatus('mandatory')
apathUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alc", 1), ("u100", 2), ("x2x", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserType.setStatus('mandatory')
apathUserDevStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserDevStatusEnable.setStatus('mandatory')
apathUserAuxilliaryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 6, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apathUserAuxilliaryInfo.setStatus('mandatory')
svcmsgNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcmsgNumEntries.setStatus('mandatory')
svcmsgTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2), )
if mibBuilder.loadTexts: svcmsgTable.setStatus('mandatory')
svcmsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1), ).setIndexNames((0, "TIGER", "svcmsgIndex"))
if mibBuilder.loadTexts: svcmsgEntry.setStatus('mandatory')
svcmsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgIndex.setStatus('mandatory')
svcmsgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDescription.setStatus('mandatory')
svcmsgNetDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Network Down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgNetDown.setStatus('mandatory')
svcmsgNetUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Network Up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgNetUp.setStatus('mandatory')
svcmsgConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Connecting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgConnecting.setStatus('mandatory')
svcmsgConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Connected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgConnected.setStatus('mandatory')
svcmsgIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgIdle.setStatus('mandatory')
svcmsgDisconnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnecting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDisconnecting.setStatus('mandatory')
svcmsgDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDisconnected.setStatus('mandatory')
svcmsgDiscRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Restart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscRestart.setStatus('mandatory')
svcmsgDiscUser = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/User')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscUser.setStatus('mandatory')
svcmsgDiscMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Mgmt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscMgmt.setStatus('mandatory')
svcmsgDiscBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Busy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscBusy.setStatus('mandatory')
svcmsgDiscRPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Remote Procedure Error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscRPErr.setStatus('mandatory')
svcmsgDiscLPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Local Procedure Error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscLPErr.setStatus('mandatory')
svcmsgDiscCongest = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Congestion')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscCongest.setStatus('mandatory')
svcmsgDiscNotOb = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Not Obtainable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscNotOb.setStatus('mandatory')
svcmsgDiscOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Out of Order')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscOutOrder.setStatus('mandatory')
svcmsgDiscInvFac = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Invalid Facility')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscInvFac.setStatus('mandatory')
svcmsgDiscAcsBar = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Access Barred')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscAcsBar.setStatus('mandatory')
svcmsgDiscRvsCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Reverse Charge not accepted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscRvsCharge.setStatus('mandatory')
svcmsgDiscIncDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/Invalid Destination')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscIncDest.setStatus('mandatory')
svcmsgDiscNoTraf = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Disconnected/No Traffic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgDiscNoTraf.setStatus('mandatory')
svcmsgUpAgain = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Up Again')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgUpAgain.setStatus('mandatory')
svcmsgNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('No Route To Host')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgNoRoute.setStatus('mandatory')
svcmsgOverLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgOverLength.setStatus('mandatory')
svcmsgCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Congestion')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgCongestion.setStatus('mandatory')
svcmsgHostUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Host Unreachable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgHostUnreach.setStatus('mandatory')
svcmsgZeroLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 7, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcmsgZeroLength.setStatus('mandatory')
bootpNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpNumEntries.setStatus('mandatory')
bootpTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2), )
if mibBuilder.loadTexts: bootpTable.setStatus('mandatory')
bootpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1), ).setIndexNames((0, "TIGER", "bootpIndex"))
if mibBuilder.loadTexts: bootpEntry.setStatus('mandatory')
bootpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpIndex.setStatus('mandatory')
bootpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpServerName.setStatus('mandatory')
bootpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('anonymous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpUserName.setStatus('mandatory')
bootpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('guest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpPassword.setStatus('mandatory')
bootpRemoteFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpRemoteFile.setStatus('mandatory')
bootpLocalFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 8, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpLocalFile.setStatus('mandatory')
mountNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountNumEntries.setStatus('mandatory')
mountTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2), )
if mibBuilder.loadTexts: mountTable.setStatus('mandatory')
mountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2, 1), ).setIndexNames((0, "TIGER", "mountIndex"))
if mibBuilder.loadTexts: mountEntry.setStatus('mandatory')
mountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mountIndex.setStatus('mandatory')
mountRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mountRemotePath.setStatus('mandatory')
mountLocalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mountLocalPath.setStatus('mandatory')
mountMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2))).clone('read-write')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mountMode.setStatus('mandatory')
mountRemoteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notConnected-NoAccess", 1), ("notConnected-ReadOnly", 2), ("notConnected-WriteOnly", 3), ("notConnected-ReadWrite", 4), ("connected-NoAccess", 5), ("connected-ReadOnly", 6), ("connected-WriteOnly", 7), ("connected-ReadWrite", 8))).clone('notConnected-NoAccess')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountRemoteInfo.setStatus('mandatory')
dnsResLocalResolves = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResLocalResolves.setStatus('mandatory')
dnsResCacheFull = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheFull.setStatus('mandatory')
dnsResQueueFull = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResQueueFull.setStatus('mandatory')
dnsResClearCache = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsResClearCache.setStatus('mandatory')
dnsResConfigMaxCnames = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 5), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsResConfigMaxCnames.setStatus('mandatory')
dnsResNumHosts = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResNumHosts.setStatus('mandatory')
dnsResTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7), )
if mibBuilder.loadTexts: dnsResTable.setStatus('mandatory')
dnsResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1), ).setIndexNames((0, "TIGER", "dnsResServerIP"))
if mibBuilder.loadTexts: dnsResEntry.setStatus('mandatory')
dnsResServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsResServerIP.setStatus('mandatory')
dnsResServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResServerName.setStatus('mandatory')
dnsResQueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResQueriesSent.setStatus('mandatory')
dnsResSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResSendErrors.setStatus('mandatory')
dnsResGoodResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResGoodResponses.setStatus('mandatory')
dnsResTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResTimeouts.setStatus('mandatory')
dnsResBadResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResBadResponses.setStatus('mandatory')
dnsResCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("delete", 2))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsResCmd.setStatus('mandatory')
dnsResCacheNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheNumEntries.setStatus('mandatory')
dnsResCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9), )
if mibBuilder.loadTexts: dnsResCacheTable.setStatus('mandatory')
dnsResCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9, 1), ).setIndexNames((0, "TIGER", "dnsResCacheIpAddress"))
if mibBuilder.loadTexts: dnsResCacheEntry.setStatus('mandatory')
dnsResCacheHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheHostName.setStatus('mandatory')
dnsResCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheIpAddress.setStatus('mandatory')
dnsResCacheRRTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheRRTTL.setStatus('mandatory')
dnsResCacheRRElapsedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheRRElapsedTTL.setStatus('mandatory')
dnsResCacheRRSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 10, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsResCacheRRSource.setStatus('mandatory')
vtTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1), )
if mibBuilder.loadTexts: vtTable.setStatus('mandatory')
vtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1), ).setIndexNames((0, "TIGER", "vtAutifIndex"), (0, "TIGER", "vtRealLnIaTa"))
if mibBuilder.loadTexts: vtEntry.setStatus('mandatory')
vtAutifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtAutifIndex.setStatus('mandatory')
vtRealLnIaTa = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtRealLnIaTa.setStatus('mandatory')
vtLnIaTa = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtLnIaTa.setStatus('mandatory')
vtOptionsDOD = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connect-always", 1), ("connect-on-data", 2))).clone('connect-on-data')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtOptionsDOD.setStatus('mandatory')
vtOptionsPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("terminal", 1), ("printer", 2), ("free", 3))).clone('terminal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtOptionsPrinter.setStatus('mandatory')
vtOptionsClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("by-lniata", 1), ("by-class", 2))).clone('by-lniata')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtOptionsClass.setStatus('mandatory')
vtCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtCommand.setStatus('mandatory')
vtClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtClassName.setStatus('mandatory')
vtState = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vts-init", 1), ("vts-dod-wait", 2), ("vts-con-lb", 3), ("vts-lb-dialog", 4), ("vts-lb-config", 5), ("vts-gen-fail", 6), ("vts-con-ofep", 7), ("vts-ofep-dialog", 8), ("vts-ofep-config", 9), ("vts-ofep-up", 10), ("vts-ofep-shutdown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtState.setStatus('mandatory')
vtFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vte-err-gen", 1), ("vte-err-sock-down", 2), ("vte-err-timeout", 3), ("vte-err-ka-timeout", 4), ("vte-err-lb", 5), ("vte-err-ofep", 6), ("vte-err-idle-timeout", 7), ("vte-deactivate", 8), ("vte-cap-off", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtFailReason.setStatus('mandatory')
vtFailString = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtFailString.setStatus('mandatory')
vtLBToken = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtLBToken.setStatus('mandatory')
vtCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("busy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtCommandStatus.setStatus('mandatory')
vtLBRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtLBRequests.setStatus('mandatory')
vtLBErrorResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtLBErrorResponses.setStatus('mandatory')
vtLBTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtLBTimeouts.setStatus('mandatory')
vtOFEPRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPRequests.setStatus('mandatory')
vtOFEPErrorResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPErrorResponses.setStatus('mandatory')
vtOFEPTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPTimeouts.setStatus('mandatory')
vtOFEPKeepAliveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPKeepAliveTimeouts.setStatus('mandatory')
vtOFEPReassemblyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPReassemblyFailures.setStatus('mandatory')
vtOFEPUserEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPUserEnquiries.setStatus('mandatory')
vtOFEPUserResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPUserResponses.setStatus('mandatory')
vtOFEPUserInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPUserInDiscards.setStatus('mandatory')
vtOFEPUserOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPUserOutDiscards.setStatus('mandatory')
vtOFEPKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 1, 11, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtOFEPKeepAlives.setStatus('mandatory')
mibBuilder.exportSymbols("TIGER", svcmsgNumEntries=svcmsgNumEntries, autifOutNUcastPkts=autifOutNUcastPkts, tigClearStats=tigClearStats, tigPoolTrapControl=tigPoolTrapControl, buffers=buffers, tigPCMCIATable=tigPCMCIATable, dnsResCacheIpAddress=dnsResCacheIpAddress, vtLBToken=vtLBToken, InterfaceIndex=InterfaceIndex, svcmsgNetUp=svcmsgNetUp, vtAutifIndex=vtAutifIndex, autifAliasAddress=autifAliasAddress, dnsResCmd=dnsResCmd, mount=mount, autifInUcastPkts=autifInUcastPkts, autifLNIA=autifLNIA, apathUserApathOperation=apathUserApathOperation, autif=autif, svcmsgHostUnreach=svcmsgHostUnreach, apathUserIndex=apathUserIndex, tigCpuIdleState=tigCpuIdleState, mountRemotePath=mountRemotePath, mountLocalPath=mountLocalPath, autifRealToVTRoutingErrors=autifRealToVTRoutingErrors, svcmsgConnecting=svcmsgConnecting, ifTStackHigherLayer=ifTStackHigherLayer, apathEndUserStatusEnable=apathEndUserStatusEnable, autifTxBufSize=autifTxBufSize, tigIdle=tigIdle, dnsResTimeouts=dnsResTimeouts, svcmsgDiscInvFac=svcmsgDiscInvFac, svcmsgIndex=svcmsgIndex, autifUserIdleTimeout=autifUserIdleTimeout, apathTable=apathTable, tigPCMCIAIf=tigPCMCIAIf, autifInNUcastPkts=autifInNUcastPkts, apath=apath, bootpIndex=bootpIndex, svcmsgDiscRPErr=svcmsgDiscRPErr, tigPoolEntry=tigPoolEntry, svcmsgDiscNotOb=svcmsgDiscNotOb, tigClearStatsTime=tigClearStatsTime, dnsResEntry=dnsResEntry, tigPoolHighThreshold=tigPoolHighThreshold, vtClassName=vtClassName, autifTypeAMaxMsgSize=autifTypeAMaxMsgSize, vtOFEPErrorResponses=vtOFEPErrorResponses, tigPoolAllocationFailures=tigPoolAllocationFailures, apathUserDevStatusEnable=apathUserDevStatusEnable, vtOFEPRequests=vtOFEPRequests, tigPool=tigPool, vtOptionsClass=vtOptionsClass, autifLocalPort=autifLocalPort, vtOFEPKeepAliveTimeouts=vtOFEPKeepAliveTimeouts, tigRestart=tigRestart, autifOutErrors=autifOutErrors, svcmsgDiscRestart=svcmsgDiscRestart, autifIndex=autifIndex, bootpPassword=bootpPassword, tigCpuTrapControl=tigCpuTrapControl, apathRetryCounterMax=apathRetryCounterMax, dnsResCacheNumEntries=dnsResCacheNumEntries, apathUserType=apathUserType, tigPCMCIAType=tigPCMCIAType, autifRemotePort=autifRemotePort, tigPoolIndex=tigPoolIndex, dnsResCacheHostName=dnsResCacheHostName, apathType=apathType, generalTiger=generalTiger, apathEntry=apathEntry, svcmsgDiscMgmt=svcmsgDiscMgmt, vtOFEPKeepAlives=vtOFEPKeepAlives, apathUserAlt2ApathIndex=apathUserAlt2ApathIndex, bootpUserName=bootpUserName, ifTStackIndex=ifTStackIndex, tigPoolCommandStatus=tigPoolCommandStatus, autifTypeAQueueSize=autifTypeAQueueSize, vtEntry=vtEntry, vtOptionsDOD=vtOptionsDOD, apathPathUpMsg=apathPathUpMsg, autifSockQueueSize=autifSockQueueSize, autifOFEPKeepAliveTimeout=autifOFEPKeepAliveTimeout, tigTokenRingSpeed=tigTokenRingSpeed, svcmsgNetDown=svcmsgNetDown, autifNumEntries=autifNumEntries, vtLnIaTa=vtLnIaTa, tigSystemExceptionLogging=tigSystemExceptionLogging, tigPoolSize=tigPoolSize, autifDestAddrType=autifDestAddrType, autifEntry=autifEntry, autifInOctets=autifInOctets, apathUserAlt3ApathIndex=apathUserAlt3ApathIndex, dnsResNumHosts=dnsResNumHosts, bootpEntry=bootpEntry, dnsResCacheEntry=dnsResCacheEntry, svcmsgDiscNoTraf=svcmsgDiscNoTraf, vtCommand=vtCommand, svcmsgConnected=svcmsgConnected, tigPoolFree=tigPoolFree, svcmsgEntry=svcmsgEntry, svcmsgDiscOutOrder=svcmsgDiscOutOrder, dnsResCacheRRSource=dnsResCacheRRSource, mountMode=mountMode, autifRemAddress=autifRemAddress, autifOutDiscards=autifOutDiscards, autifInUnknownProtos=autifInUnknownProtos, svcmsgDisconnecting=svcmsgDisconnecting, mountNumEntries=mountNumEntries, bootpServerName=bootpServerName, tiger=tiger, vtRealLnIaTa=vtRealLnIaTa, tigSystemDate=tigSystemDate, autifService=autifService, dnsResQueueFull=dnsResQueueFull, vtTable=vtTable, apathResponseTimerMax=apathResponseTimerMax, tigSystemSerialNum=tigSystemSerialNum, svcmsg=svcmsg, bootpLocalFile=bootpLocalFile, vtCommandStatus=vtCommandStatus, autifRealToVTHashDepth=autifRealToVTHashDepth, apathNumEntries=apathNumEntries, svcmsgDiscAcsBar=svcmsgDiscAcsBar, TigerDateAndTime=TigerDateAndTime, ngcan=ngcan, tigRestartReason=tigRestartReason, svcmsgIdle=svcmsgIdle, autifTable=autifTable, tigPoolLowThreshold=tigPoolLowThreshold, apathUserMainApathIndex=apathUserMainApathIndex, bootpRemoteFile=bootpRemoteFile, vtOptionsPrinter=vtOptionsPrinter, vtOFEPTimeouts=vtOFEPTimeouts, dnsRes=dnsRes, ifTStackStatus=ifTStackStatus, dnsResGoodResponses=dnsResGoodResponses, apathUserNumEntries=apathUserNumEntries, dnsResBadResponses=dnsResBadResponses, apathIndex=apathIndex, mountRemoteInfo=mountRemoteInfo, vtOFEPUserOutDiscards=vtOFEPUserOutDiscards, vtState=vtState, vtLBTimeouts=vtLBTimeouts, ifTStack=ifTStack, vtOFEPUserInDiscards=vtOFEPUserInDiscards, mountTable=mountTable, apathUserAuxilliaryInfo=apathUserAuxilliaryInfo, NonNegativeInteger=NonNegativeInteger, bootpTable=bootpTable, vtOFEPUserResponses=vtOFEPUserResponses, ifTStackTable=ifTStackTable, apathUserTable=apathUserTable, vtLBErrorResponses=vtLBErrorResponses, autifXlatToSocket=autifXlatToSocket, autifInErrors=autifInErrors, ifTStackEntry=ifTStackEntry, dnsResServerIP=dnsResServerIP, mountEntry=mountEntry, tigSystemExceptionSaveLog=tigSystemExceptionSaveLog, vt=vt, dnsResConfigMaxCnames=dnsResConfigMaxCnames, vtFailString=vtFailString, autifOutUcastPkts=autifOutUcastPkts, vtOFEPReassemblyFailures=vtOFEPReassemblyFailures, ifTStackLowerLayer=ifTStackLowerLayer, autifInDiscards=autifInDiscards, tigPoolNumEntries=tigPoolNumEntries, apathTrafficIdleTimer=apathTrafficIdleTimer, vtOFEPUserEnquiries=vtOFEPUserEnquiries, svcmsgDiscIncDest=svcmsgDiscIncDest, svcmsgDiscBusy=svcmsgDiscBusy, svcmsgOverLength=svcmsgOverLength, tigPoolBufSize=tigPoolBufSize, dnsResSendErrors=dnsResSendErrors, dnsResQueriesSent=dnsResQueriesSent, tigConfigFile=tigConfigFile, dnsResClearCache=dnsResClearCache, autifLBName=autifLBName, mountIndex=mountIndex, dnsResLocalResolves=dnsResLocalResolves, autifSockPrecedence=autifSockPrecedence, svcmsgDescription=svcmsgDescription, svcmsgUpAgain=svcmsgUpAgain, svcmsgNoRoute=svcmsgNoRoute, tigPoolTable=tigPoolTable, apathUserAlt1ApathIndex=apathUserAlt1ApathIndex, tigPCMCIAEntry=tigPCMCIAEntry, svcmsgDisconnected=svcmsgDisconnected, svcmsgDiscUser=svcmsgDiscUser, tigDomainName=tigDomainName, tigSystemExceptionEcho=tigSystemExceptionEcho, dnsResServerName=dnsResServerName, svcmsgTable=svcmsgTable, bootpNumEntries=bootpNumEntries, dnsResCacheRRTTL=dnsResCacheRRTTL, vtLBRequests=vtLBRequests, bootp=bootp, svcmsgDiscRvsCharge=svcmsgDiscRvsCharge, apathUserEntry=apathUserEntry, dnsResCacheFull=dnsResCacheFull, dnsResCacheTable=dnsResCacheTable, autifRxBufSize=autifRxBufSize, autifOutOctets=autifOutOctets, svcmsgDiscCongest=svcmsgDiscCongest, vtFailReason=vtFailReason, tigPoolTrapStatus=tigPoolTrapStatus, apathIdleTimerMax=apathIdleTimerMax, autifIA=autifIA, autifVTToRealRoutingErrors=autifVTToRealRoutingErrors, generalTraps=generalTraps, autifSockOptions=autifSockOptions, apathConnectTimerMax=apathConnectTimerMax, svcmsgDiscLPErr=svcmsgDiscLPErr, autifXlatFromSocket=autifXlatFromSocket, svcmsgCongestion=svcmsgCongestion, dnsResTable=dnsResTable, dnsResCacheRRElapsedTTL=dnsResCacheRRElapsedTTL, tigPCMCIASlot=tigPCMCIASlot, tsystem=tsystem, svcmsgZeroLength=svcmsgZeroLength)
