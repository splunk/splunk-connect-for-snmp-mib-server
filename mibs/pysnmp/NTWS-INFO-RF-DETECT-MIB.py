#
# PySNMP MIB module NTWS-INFO-RF-DETECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTWS-INFO-RF-DETECT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NtwsChannelNum, NtwsRssi = mibBuilder.importSymbols("NTWS-AP-TC", "NtwsChannelNum", "NtwsRssi")
NtwsRFDetectNetworkingMode, NtwsRFDetectClassification, NtwsRFDetectClassificationReason = mibBuilder.importSymbols("NTWS-RF-DETECT-TC", "NtwsRFDetectNetworkingMode", "NtwsRFDetectClassification", "NtwsRFDetectClassificationReason")
ntwsMibs, = mibBuilder.importSymbols("NTWS-ROOT-MIB", "ntwsMibs")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Counter64, ModuleIdentity, IpAddress, Gauge32, iso, Unsigned32, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Counter64", "ModuleIdentity", "IpAddress", "Gauge32", "iso", "Unsigned32", "Counter32", "Bits")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
ntwsInfoRFDetectMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9))
ntwsInfoRFDetectMib.setRevisions(('2007-09-25 00:12', '2007-06-27 00:11', '2007-04-18 00:10', '2006-10-11 00:03',))
if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setLastUpdated('200709250012Z')
if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setOrganization('Nortel Networks')
ntwsInfoRFDetectObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1))
ntwsInfoRFDetectDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1))
ntwsInfoRFDetectXmtrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1), )
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrTable.setStatus('current')
ntwsInfoRFDetectXmtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1), ).setIndexNames((0, "NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrTransmitterMacAddress"), (0, "NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrListenerMacAddress"), (0, "NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrChannelNum"))
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrEntry.setStatus('current')
ntwsInfoRFDetectXmtrTransmitterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrTransmitterMacAddress.setStatus('current')
ntwsInfoRFDetectXmtrListenerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrListenerMacAddress.setStatus('current')
ntwsInfoRFDetectXmtrChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 3), NtwsChannelNum())
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrChannelNum.setStatus('current')
ntwsInfoRFDetectXmtrRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 4), NtwsRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrRssi.setStatus('current')
ntwsInfoRFDetectXmtrSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrSsid.setStatus('current')
ntwsInfoRFDetectXmtrNetworkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 6), NtwsRFDetectNetworkingMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrNetworkingMode.setStatus('current')
ntwsInfoRFDetectXmtrClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 7), NtwsRFDetectClassification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassification.setStatus('current')
ntwsInfoRFDetectXmtrClassificationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 8), NtwsRFDetectClassificationReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassificationReason.setStatus('current')
ntwsInfoRFDetectCurrentXmtrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectCurrentXmtrTableSize.setStatus('current')
ntwsInfoRFDetectConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2))
ntwsInfoRFDetectCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 1))
ntwsInfoRFDetectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2))
ntwsInfoRFDetectCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 1, 1)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrGroup"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrClassificationGroup"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectCurrentXmtrTableSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectCompliance = ntwsInfoRFDetectCompliance.setStatus('current')
ntwsInfoRFDetectXmtrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2, 1)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrRssi"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrSsid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectXmtrGroup = ntwsInfoRFDetectXmtrGroup.setStatus('current')
ntwsInfoRFDetectXmtrClassificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2, 2)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrNetworkingMode"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrClassification"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrClassificationReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectXmtrClassificationGroup = ntwsInfoRFDetectXmtrClassificationGroup.setStatus('current')
ntwsInfoRFDetectCurrentXmtrTableSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2, 3)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectCurrentXmtrTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectCurrentXmtrTableSizeGroup = ntwsInfoRFDetectCurrentXmtrTableSizeGroup.setStatus('current')
mibBuilder.exportSymbols("NTWS-INFO-RF-DETECT-MIB", ntwsInfoRFDetectCompliance=ntwsInfoRFDetectCompliance, ntwsInfoRFDetectCompliances=ntwsInfoRFDetectCompliances, ntwsInfoRFDetectXmtrTable=ntwsInfoRFDetectXmtrTable, ntwsInfoRFDetectXmtrGroup=ntwsInfoRFDetectXmtrGroup, ntwsInfoRFDetectGroups=ntwsInfoRFDetectGroups, ntwsInfoRFDetectXmtrListenerMacAddress=ntwsInfoRFDetectXmtrListenerMacAddress, ntwsInfoRFDetectXmtrRssi=ntwsInfoRFDetectXmtrRssi, ntwsInfoRFDetectXmtrEntry=ntwsInfoRFDetectXmtrEntry, ntwsInfoRFDetectCurrentXmtrTableSizeGroup=ntwsInfoRFDetectCurrentXmtrTableSizeGroup, ntwsInfoRFDetectXmtrChannelNum=ntwsInfoRFDetectXmtrChannelNum, PYSNMP_MODULE_ID=ntwsInfoRFDetectMib, ntwsInfoRFDetectMib=ntwsInfoRFDetectMib, ntwsInfoRFDetectXmtrClassification=ntwsInfoRFDetectXmtrClassification, ntwsInfoRFDetectObjects=ntwsInfoRFDetectObjects, ntwsInfoRFDetectXmtrTransmitterMacAddress=ntwsInfoRFDetectXmtrTransmitterMacAddress, ntwsInfoRFDetectXmtrSsid=ntwsInfoRFDetectXmtrSsid, ntwsInfoRFDetectConformance=ntwsInfoRFDetectConformance, ntwsInfoRFDetectXmtrNetworkingMode=ntwsInfoRFDetectXmtrNetworkingMode, ntwsInfoRFDetectCurrentXmtrTableSize=ntwsInfoRFDetectCurrentXmtrTableSize, ntwsInfoRFDetectDataObjects=ntwsInfoRFDetectDataObjects, ntwsInfoRFDetectXmtrClassificationReason=ntwsInfoRFDetectXmtrClassificationReason, ntwsInfoRFDetectXmtrClassificationGroup=ntwsInfoRFDetectXmtrClassificationGroup)
