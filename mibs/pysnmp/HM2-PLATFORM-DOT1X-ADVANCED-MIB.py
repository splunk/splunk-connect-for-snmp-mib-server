#
# PySNMP MIB module HM2-PLATFORM-DOT1X-ADVANCED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-DOT1X-ADVANCED-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hm2PlatformMibs, HmEnabledStatus, HmTimeSeconds1970 = mibBuilder.importSymbols("HM2-TC-MIB", "hm2PlatformMibs", "HmEnabledStatus", "HmTimeSeconds1970")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Counter64, NotificationType, Integer32, Gauge32, TimeTicks, ObjectIdentity, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Counter64", "NotificationType", "Integer32", "Gauge32", "TimeTicks", "ObjectIdentity", "iso", "Counter32", "Unsigned32")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
hm2PlatformDot1xAdvanced = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 36))
hm2PlatformDot1xAdvanced.setRevisions(('2011-10-18 00:00',))
if mibBuilder.loadTexts: hm2PlatformDot1xAdvanced.setLastUpdated('201110180000Z')
if mibBuilder.loadTexts: hm2PlatformDot1xAdvanced.setOrganization('Hirschmann Automation and Control GmbH')
class Dot1xPortControlMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3), ("multiClient", 4))

class Dot1xSessionTerminationAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("default", 1), ("reauthenticate", 2))

hm2AgentDot1xEnhancementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 36, 1))
hm2AgentDot1xRadiusVlanAssignment = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xRadiusVlanAssignment.setStatus('current')
hm2AgentDot1xDynamicVlanCreationMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xDynamicVlanCreationMode.setStatus('current')
hm2AgentDot1xStatisticsClear = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xStatisticsClear.setStatus('current')
hm2AgentDot1xPortStatsClearTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 249), )
if mibBuilder.loadTexts: hm2AgentDot1xPortStatsClearTable.setStatus('current')
hm2AgentDot1xPortStatsClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 249, 1), ).setIndexNames((0, "HM2-PLATFORM-DOT1X-ADVANCED-MIB", "hm2AgentDot1xStatsIfIndex"))
if mibBuilder.loadTexts: hm2AgentDot1xPortStatsClearEntry.setStatus('current')
hm2AgentDot1xStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 249, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xStatsIfIndex.setStatus('current')
hm2AgentDot1xPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 1, 249, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xPortStatsClear.setStatus('current')
hm2AgentDot1xPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 36, 2))
hm2AgentDot1xPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1), )
if mibBuilder.loadTexts: hm2AgentDot1xPortConfigTable.setStatus('current')
hm2AgentDot1xPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: hm2AgentDot1xPortConfigEntry.setStatus('current')
hm2AgentDot1xPortControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 1), Dot1xPortControlMode().clone('forceAuthorized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xPortControlMode.setStatus('current')
hm2AgentDot1xGuestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xGuestVlanId.setStatus('current')
hm2AgentDot1xGuestVlanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xGuestVlanPeriod.setStatus('current')
hm2AgentDot1xUnauthenticatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xUnauthenticatedVlan.setStatus('current')
hm2AgentDot1xMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 5), Unsigned32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xMaxUsers.setStatus('current')
hm2AgentDot1xPortVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xPortVlanAssigned.setStatus('current')
hm2AgentDot1xPortVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("notAssigned", 7))).clone('notAssigned')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xPortVlanAssignedReason.setStatus('current')
hm2AgentDot1xPortSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xPortSessionTimeout.setStatus('current')
hm2AgentDot1xPortTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 9), Dot1xSessionTerminationAction().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xPortTerminationAction.setStatus('current')
hm2AgentDot1xPortMABenabled = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xPortMABenabled.setStatus('current')
hm2AgentDot1xPortMABenabledOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 2, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xPortMABenabledOperational.setStatus('current')
hm2AgentDot1xClientConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 36, 3))
hm2AgentDot1xClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1), )
if mibBuilder.loadTexts: hm2AgentDot1xClientConfigTable.setStatus('current')
hm2AgentDot1xClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-DOT1X-ADVANCED-MIB", "hm2AgentDot1xClientMacAddress"))
if mibBuilder.loadTexts: hm2AgentDot1xClientConfigEntry.setStatus('current')
hm2AgentDot1xClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientMacAddress.setStatus('current')
hm2AgentDot1xLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xLogicalPort.setStatus('current')
hm2AgentDot1xInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xInterface.setStatus('current')
hm2AgentDot1xClientAuthPAEstate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientAuthPAEstate.setStatus('current')
hm2AgentDot1xClientBackendState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientBackendState.setStatus('current')
hm2AgentDot1xClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientUserName.setStatus('current')
hm2AgentDot1xClientSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientSessionTime.setStatus('current')
hm2AgentDot1xClientFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientFilterID.setStatus('current')
hm2AgentDot1xClientVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientVlanAssigned.setStatus('current')
hm2AgentDot1xClientVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("invalid", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientVlanAssignedReason.setStatus('current')
hm2AgentDot1xClientSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientSessionTimeout.setStatus('current')
hm2AgentDot1xClientTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 3, 1, 1, 12), Dot1xSessionTerminationAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xClientTerminationAction.setStatus('current')
hm2AgentDot1xMonitorModeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 36, 4))
hm2AgentDot1xMonitorModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 4, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xMonitorModeEnabled.setStatus('current')
hm2AgentDot1xMonitorModeClients = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xMonitorModeClients.setStatus('current')
hm2AgentDot1xNonMonitorModeClients = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xNonMonitorModeClients.setStatus('current')
hm2AgentDot1xAuthHistoryResultsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 36, 5))
hm2AgentDot1xPortAuthHistoryResultTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1), )
if mibBuilder.loadTexts: hm2AgentDot1xPortAuthHistoryResultTable.setStatus('current')
hm2AgentDot1xPortAuthHistoryResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-DOT1X-ADVANCED-MIB", "hm2AgentDot1xAuthHistoryResultIfaceIndex"), (0, "HM2-PLATFORM-DOT1X-ADVANCED-MIB", "hm2AgentDot1xAuthHistoryResultIndex"))
if mibBuilder.loadTexts: hm2AgentDot1xPortAuthHistoryResultEntry.setStatus('current')
hm2AgentDot1xAuthHistoryResultIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultIfaceIndex.setStatus('current')
hm2AgentDot1xAuthHistoryResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultIndex.setStatus('current')
hm2AgentDot1xAuthHistoryResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 3), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultTimeStamp.setStatus('current')
hm2AgentDot1xAuthHistoryResultAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultAge.setStatus('current')
hm2AgentDot1xAuthHistoryResultMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultMacAddress.setStatus('current')
hm2AgentDot1xAuthHistoryResultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultVlanId.setStatus('current')
hm2AgentDot1xAuthHistoryResultAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultAuthStatus.setStatus('current')
hm2AgentDot1xAuthHistoryResultAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("granted", 1), ("denied", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultAccessStatus.setStatus('current')
hm2AgentDot1xAuthHistoryResultFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultFilterID.setStatus('current')
hm2AgentDot1xAuthHistoryResultVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultVlanAssigned.setStatus('current')
hm2AgentDot1xAuthHistoryResultVlanAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("notAssigned", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultVlanAssignedType.setStatus('current')
hm2AgentDot1xAuthHistoryResultReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("supplicant-timeout", 1), ("eapol-timeout", 2), ("radius-request-timeout", 3), ("radius-auth-failure", 4), ("radius-auth-comm-failure", 5), ("radius-challenge-process-invalid-nas-port", 6), ("radius-challenge-process-wrong-eap-msg", 7), ("radius-request-send-msg-error", 8), ("radius-accept-process-invalid-nas-port", 9), ("radius-accept-process-wrong-eap-msg", 10), ("radius-accept-filter-assignment-failure", 11), ("radius-accept-diffserv-not-present", 12), ("radius-accept-vlan-assignment-failure", 13), ("vlan-assignment-feature-not-enabled", 14), ("radius-success", 15), ("local-auth-user-not-found", 16), ("local-auth-user-no-access", 17), ("local-auth-md5-validation-failure", 18), ("local-auth-invalid-eap-type", 19), ("local-failure", 20), ("local-success", 21), ("radius-invalid-radius-status", 22), ("guest-vlan-timer-expiry", 23), ("undefined-auth-method", 24), ("reject-auth-method", 25), ("invalid-auth-method", 26), ("auth-method-not-configured", 27), ("unauth-vlan-not-created", 28), ("guest-vlan-not-created", 29), ("radius-accept-invalid-vlan-failure", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultReasonCode.setStatus('current')
hm2AgentDot1xAuthHistoryResultsClear = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultsClear.setStatus('current')
hm2AgentDot1xPortAuthHistoryResultClearTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 3), )
if mibBuilder.loadTexts: hm2AgentDot1xPortAuthHistoryResultClearTable.setStatus('current')
hm2AgentDot1xPortAuthHistoryResultClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-DOT1X-ADVANCED-MIB", "hm2AgentDot1xAuthHistoryResultIfIndex"))
if mibBuilder.loadTexts: hm2AgentDot1xPortAuthHistoryResultClearEntry.setStatus('current')
hm2AgentDot1xAuthHistoryResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1xAuthHistoryResultIfIndex.setStatus('current')
hm2AgentDot1xPortAuthHistoryResultsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 36, 5, 3, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1xPortAuthHistoryResultsClear.setStatus('current')
mibBuilder.exportSymbols("HM2-PLATFORM-DOT1X-ADVANCED-MIB", hm2AgentDot1xAuthHistoryResultVlanAssigned=hm2AgentDot1xAuthHistoryResultVlanAssigned, hm2AgentDot1xRadiusVlanAssignment=hm2AgentDot1xRadiusVlanAssignment, hm2AgentDot1xAuthHistoryResultIfIndex=hm2AgentDot1xAuthHistoryResultIfIndex, hm2AgentDot1xPortAuthHistoryResultEntry=hm2AgentDot1xPortAuthHistoryResultEntry, PYSNMP_MODULE_ID=hm2PlatformDot1xAdvanced, hm2AgentDot1xPortConfigTable=hm2AgentDot1xPortConfigTable, hm2AgentDot1xAuthHistoryResultAuthStatus=hm2AgentDot1xAuthHistoryResultAuthStatus, hm2AgentDot1xClientFilterID=hm2AgentDot1xClientFilterID, hm2AgentDot1xPortAuthHistoryResultClearEntry=hm2AgentDot1xPortAuthHistoryResultClearEntry, hm2AgentDot1xPortStatsClearTable=hm2AgentDot1xPortStatsClearTable, hm2AgentDot1xUnauthenticatedVlan=hm2AgentDot1xUnauthenticatedVlan, hm2AgentDot1xMaxUsers=hm2AgentDot1xMaxUsers, hm2AgentDot1xPortVlanAssignedReason=hm2AgentDot1xPortVlanAssignedReason, hm2AgentDot1xInterface=hm2AgentDot1xInterface, hm2AgentDot1xClientSessionTimeout=hm2AgentDot1xClientSessionTimeout, hm2AgentDot1xMonitorModeClients=hm2AgentDot1xMonitorModeClients, hm2AgentDot1xAuthHistoryResultVlanAssignedType=hm2AgentDot1xAuthHistoryResultVlanAssignedType, hm2AgentDot1xGuestVlanId=hm2AgentDot1xGuestVlanId, hm2AgentDot1xDynamicVlanCreationMode=hm2AgentDot1xDynamicVlanCreationMode, hm2AgentDot1xClientVlanAssignedReason=hm2AgentDot1xClientVlanAssignedReason, hm2AgentDot1xClientVlanAssigned=hm2AgentDot1xClientVlanAssigned, hm2AgentDot1xMonitorModeEnabled=hm2AgentDot1xMonitorModeEnabled, hm2AgentDot1xClientConfigGroup=hm2AgentDot1xClientConfigGroup, hm2AgentDot1xAuthHistoryResultFilterID=hm2AgentDot1xAuthHistoryResultFilterID, hm2AgentDot1xClientUserName=hm2AgentDot1xClientUserName, hm2AgentDot1xPortStatsClear=hm2AgentDot1xPortStatsClear, hm2AgentDot1xEnhancementConfigGroup=hm2AgentDot1xEnhancementConfigGroup, hm2AgentDot1xAuthHistoryResultIfaceIndex=hm2AgentDot1xAuthHistoryResultIfaceIndex, hm2AgentDot1xPortAuthHistoryResultsClear=hm2AgentDot1xPortAuthHistoryResultsClear, hm2AgentDot1xPortStatsClearEntry=hm2AgentDot1xPortStatsClearEntry, hm2AgentDot1xPortControlMode=hm2AgentDot1xPortControlMode, hm2AgentDot1xAuthHistoryResultReasonCode=hm2AgentDot1xAuthHistoryResultReasonCode, hm2AgentDot1xClientTerminationAction=hm2AgentDot1xClientTerminationAction, hm2AgentDot1xAuthHistoryResultIndex=hm2AgentDot1xAuthHistoryResultIndex, hm2AgentDot1xPortAuthHistoryResultClearTable=hm2AgentDot1xPortAuthHistoryResultClearTable, hm2AgentDot1xMonitorModeConfigGroup=hm2AgentDot1xMonitorModeConfigGroup, hm2AgentDot1xStatisticsClear=hm2AgentDot1xStatisticsClear, hm2AgentDot1xClientBackendState=hm2AgentDot1xClientBackendState, hm2AgentDot1xAuthHistoryResultsGroup=hm2AgentDot1xAuthHistoryResultsGroup, hm2AgentDot1xPortMABenabledOperational=hm2AgentDot1xPortMABenabledOperational, hm2AgentDot1xPortConfigEntry=hm2AgentDot1xPortConfigEntry, hm2AgentDot1xPortTerminationAction=hm2AgentDot1xPortTerminationAction, hm2AgentDot1xPortConfigGroup=hm2AgentDot1xPortConfigGroup, hm2AgentDot1xClientConfigEntry=hm2AgentDot1xClientConfigEntry, hm2AgentDot1xAuthHistoryResultTimeStamp=hm2AgentDot1xAuthHistoryResultTimeStamp, hm2AgentDot1xPortSessionTimeout=hm2AgentDot1xPortSessionTimeout, hm2AgentDot1xAuthHistoryResultAccessStatus=hm2AgentDot1xAuthHistoryResultAccessStatus, hm2AgentDot1xAuthHistoryResultMacAddress=hm2AgentDot1xAuthHistoryResultMacAddress, hm2AgentDot1xPortMABenabled=hm2AgentDot1xPortMABenabled, hm2AgentDot1xPortVlanAssigned=hm2AgentDot1xPortVlanAssigned, hm2AgentDot1xClientConfigTable=hm2AgentDot1xClientConfigTable, hm2PlatformDot1xAdvanced=hm2PlatformDot1xAdvanced, Dot1xPortControlMode=Dot1xPortControlMode, hm2AgentDot1xLogicalPort=hm2AgentDot1xLogicalPort, Dot1xSessionTerminationAction=Dot1xSessionTerminationAction, hm2AgentDot1xAuthHistoryResultVlanId=hm2AgentDot1xAuthHistoryResultVlanId, hm2AgentDot1xAuthHistoryResultsClear=hm2AgentDot1xAuthHistoryResultsClear, hm2AgentDot1xClientSessionTime=hm2AgentDot1xClientSessionTime, hm2AgentDot1xNonMonitorModeClients=hm2AgentDot1xNonMonitorModeClients, hm2AgentDot1xClientAuthPAEstate=hm2AgentDot1xClientAuthPAEstate, hm2AgentDot1xClientMacAddress=hm2AgentDot1xClientMacAddress, hm2AgentDot1xGuestVlanPeriod=hm2AgentDot1xGuestVlanPeriod, hm2AgentDot1xPortAuthHistoryResultTable=hm2AgentDot1xPortAuthHistoryResultTable, hm2AgentDot1xStatsIfIndex=hm2AgentDot1xStatsIfIndex, hm2AgentDot1xAuthHistoryResultAge=hm2AgentDot1xAuthHistoryResultAge)
