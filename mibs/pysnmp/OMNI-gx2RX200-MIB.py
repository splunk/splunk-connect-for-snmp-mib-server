#
# PySNMP MIB module OMNI-gx2RX200-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2RX200-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
gx2Rx200, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rx200")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNetworkElemSerialNum, trapNetworkElemAvailStatus, trapIdentifier, trapPerceivedSeverity, trapChangedValueDisplayString, trapChangedValueInteger, trapNetworkElemAdminState, trapNetworkElemAlarmStatus, trapNetworkElemModelNumber, trapNETrapLastTrapTimeStamp, trapText, trapChangedObjectId, trapNetworkElemOperState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum", "trapNetworkElemAvailStatus", "trapIdentifier", "trapPerceivedSeverity", "trapChangedValueDisplayString", "trapChangedValueInteger", "trapNetworkElemAdminState", "trapNetworkElemAlarmStatus", "trapNetworkElemModelNumber", "trapNETrapLastTrapTimeStamp", "trapText", "trapChangedObjectId", "trapNetworkElemOperState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Counter32, ObjectIdentity, MibIdentifier, NotificationType, TimeTicks, Counter64, NotificationType, iso, ModuleIdentity, Gauge32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Counter64", "NotificationType", "iso", "ModuleIdentity", "Gauge32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

class U32Data(Counter32):
    pass

gx2Rx200Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 1))
gx2Rx200AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2), )
if mibBuilder.loadTexts: gx2Rx200AnalogTable.setStatus('mandatory')
gx2Rx200AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1), ).setIndexNames((0, "OMNI-gx2RX200-MIB", "rxgx2Rx200AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rx200AnalogEntry.setStatus('mandatory')
gx2Rx200DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3), )
if mibBuilder.loadTexts: gx2Rx200DigitalTable.setStatus('mandatory')
gx2Rx200DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2), ).setIndexNames((0, "OMNI-gx2RX200-MIB", "rxgx2Rx200DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rx200DigitalEntry.setStatus('mandatory')
gx2Rx200StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4), )
if mibBuilder.loadTexts: gx2Rx200StatusTable.setStatus('mandatory')
gx2Rx200StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3), ).setIndexNames((0, "OMNI-gx2RX200-MIB", "rxgx2Rx200StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rx200StatusEntry.setStatus('mandatory')
gx2Rx200FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5), )
if mibBuilder.loadTexts: gx2Rx200FactoryTable.setStatus('mandatory')
gx2Rx200FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4), ).setIndexNames((0, "OMNI-gx2RX200-MIB", "rxgx2Rx200FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rx200FactoryEntry.setStatus('mandatory')
gx2Rx200HoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 6), )
if mibBuilder.loadTexts: gx2Rx200HoldTimeTable.setStatus('mandatory')
gx2Rx200HoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 6, 5), ).setIndexNames((0, "OMNI-gx2RX200-MIB", "rxgx2Rx200HoldTimeTableIndex"), (0, "OMNI-gx2RX200-MIB", "rxgx2Rx200HoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Rx200HoldTimeEntry.setStatus('mandatory')
rxgx2Rx200AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rx200AnalogTableIndex.setStatus('mandatory')
rxlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelModTemp.setStatus('optional')
rxuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxuomModTemp.setStatus('optional')
rxmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorHighModTemp.setStatus('mandatory')
rxmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorLowModTemp.setStatus('mandatory')
rxminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorHighModTemp.setStatus('mandatory')
rxminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorLowModTemp.setStatus('mandatory')
rxcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxcurrentValueModTemp.setStatus('mandatory')
rxstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagModTemp.setStatus('mandatory')
rxminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminValueModTemp.setStatus('mandatory')
rxmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmaxValueModTemp.setStatus('mandatory')
rxalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxalarmStateModTemp.setStatus('mandatory')
rxlabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelFanCurrent.setStatus('optional')
rxuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxuomFanCurrent.setStatus('optional')
rxmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorHighFanCurrent.setStatus('mandatory')
rxmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorLowFanCurrent.setStatus('mandatory')
rxminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorHighFanCurrent.setStatus('mandatory')
rxminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorLowFanCurrent.setStatus('mandatory')
rxcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxcurrentValueFanCurrent.setStatus('mandatory')
rxstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagFanCurrent.setStatus('mandatory')
rxminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminValueFanCurrent.setStatus('mandatory')
rxmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmaxValueFanCurrent.setStatus('mandatory')
rxalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxalarmStateFanCurrent.setStatus('mandatory')
rxlabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabel12Volt.setStatus('optional')
rxuom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxuom12Volt.setStatus('optional')
rxmajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorHigh12Volt.setStatus('mandatory')
rxmajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorLow12Volt.setStatus('mandatory')
rxminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorHigh12Volt.setStatus('mandatory')
rxminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorLow12Volt.setStatus('mandatory')
rxcurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxcurrentValue12Volt.setStatus('mandatory')
rxstateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlag12Volt.setStatus('mandatory')
rxminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminValue12Volt.setStatus('mandatory')
rxmaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmaxValue12Volt.setStatus('mandatory')
rxalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxalarmState12Volt.setStatus('mandatory')
rxlabelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelOptPower.setStatus('optional')
rxuomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxuomOptPower.setStatus('optional')
rxmajorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorHighOptPower.setStatus('mandatory')
rxmajorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmajorLowOptPower.setStatus('mandatory')
rxminorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorHighOptPower.setStatus('mandatory')
rxminorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminorLowOptPower.setStatus('mandatory')
rxcurrentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxcurrentValueOptPower.setStatus('mandatory')
rxstateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagOptPower.setStatus('mandatory')
rxminValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxminValueOptPower.setStatus('mandatory')
rxmaxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxmaxValueOptPower.setStatus('mandatory')
rxalarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxalarmStateOptPower.setStatus('mandatory')
rxgx2Rx200DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rx200DigitalTableIndex.setStatus('mandatory')
rxlabelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelMode.setStatus('optional')
rxenumMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxenumMode.setStatus('optional')
rxvalueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("normal", 2), ("burst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxvalueMode.setStatus('mandatory')
rxstateFlagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagMode.setStatus('mandatory')
rxlabelWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelWavelength.setStatus('optional')
rxenumWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxenumWavelength.setStatus('optional')
rxvalueWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nM1310", 1), ("nM1550", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxvalueWavelength.setStatus('mandatory')
rxstateFlagWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagWavelength.setStatus('mandatory')
rxlabelAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelAttnSetting.setStatus('optional')
rxenumAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxenumAttnSetting.setStatus('optional')
rxvalueAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxvalueAttnSetting.setStatus('mandatory')
rxstateFlagAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagAttnSetting.setStatus('mandatory')
rxlabelSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelSwModeSetting.setStatus('optional')
rxenumSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxenumSwModeSetting.setStatus('optional')
rxvalueSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxvalueSwModeSetting.setStatus('mandatory')
rxstateFlagSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagSwModeSetting.setStatus('mandatory')
rxlabelSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelSwModeThreshold.setStatus('optional')
rxenumSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxenumSwModeThreshold.setStatus('optional')
rxvalueSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxvalueSwModeThreshold.setStatus('mandatory')
rxstateFlagSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagSwModeThreshold.setStatus('mandatory')
rxlabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelFactoryDefault.setStatus('optional')
rxenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxenumFactoryDefault.setStatus('optional')
rxvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxvalueFactoryDefault.setStatus('mandatory')
rxstateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateFlagFactoryDefault.setStatus('mandatory')
rxgx2Rx200StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rx200StatusTableIndex.setStatus('mandatory')
rxlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelBoot.setStatus('optional')
rxvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueBoot.setStatus('mandatory')
rxstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagBoot.setStatus('mandatory')
rxlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelFlash.setStatus('optional')
rxvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueFlash.setStatus('mandatory')
rxstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagFlash.setStatus('mandatory')
rxlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelFactoryDataCRC.setStatus('optional')
rxvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueFactoryDataCRC.setStatus('mandatory')
rxstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagFactoryDataCRC.setStatus('mandatory')
rxlabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelAlarmDataCRC.setStatus('optional')
rxvalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueAlarmDataCRC.setStatus('mandatory')
rxstateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagAlarmDataCRC.setStatus('mandatory')
rxlabelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelCalibrationDataCRC.setStatus('optional')
rxvalueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueCalibrationDataCRC.setStatus('mandatory')
rxstateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagCalibrationDataCRC.setStatus('mandatory')
rxlabelThermalCompCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelThermalCompCRC.setStatus('optional')
rxvalueThermalCompCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueThermalCompCRC.setStatus('mandatory')
rxstateflagThermalCompCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagThermalCompCRC.setStatus('mandatory')
rxlabelHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelHW.setStatus('optional')
rxvalueHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueHW.setStatus('mandatory')
rxstateflagHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagHW.setStatus('mandatory')
rxlabelOptSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxlabelOptSig.setStatus('optional')
rxvalueOptSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxvalueOptSig.setStatus('mandatory')
rxstateflagOptSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxstateflagOptSig.setStatus('mandatory')
rxgx2Rx200FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rx200FactoryTableIndex.setStatus('mandatory')
rxbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxbootControlByte.setStatus('mandatory')
rxbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxbootStatusByte.setStatus('mandatory')
rxbank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxbank0CRC.setStatus('mandatory')
rxbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxbank1CRC.setStatus('mandatory')
rxprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxprgEEPROMByte.setStatus('mandatory')
rxfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxfactoryCRC.setStatus('mandatory')
rxcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarm", 3), ("tempComp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxcalculateCRC.setStatus('mandatory')
rxhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxhourMeter.setStatus('mandatory')
rxflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxflashPrgCntA.setStatus('mandatory')
rxflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxflashPrgCntB.setStatus('mandatory')
rxfwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxfwRev0.setStatus('mandatory')
rxfwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxfwRev1.setStatus('mandatory')
rxgx2Rx200HoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rx200HoldTimeTableIndex.setStatus('mandatory')
rxgx2Rx200HoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rx200HoldTimeSpecIndex.setStatus('mandatory')
rxgx2Rx200HoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxgx2Rx200HoldTimeData.setStatus('mandatory')
trapRX200ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200OpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200ModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200Plus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200Boot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200Boot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200DefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200ModeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200OutputSwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX200SideStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 6) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2RX200-MIB", rxstateFlagSwModeThreshold=rxstateFlagSwModeThreshold, gx2Rx200HoldTimeTable=gx2Rx200HoldTimeTable, rxlabelFlash=rxlabelFlash, rxgx2Rx200HoldTimeTableIndex=rxgx2Rx200HoldTimeTableIndex, rxstateflagAlarmDataCRC=rxstateflagAlarmDataCRC, rxvalueAttnSetting=rxvalueAttnSetting, rxenumWavelength=rxenumWavelength, rxalarmStateFanCurrent=rxalarmStateFanCurrent, rxcurrentValue12Volt=rxcurrentValue12Volt, rxfactoryCRC=rxfactoryCRC, trapRX200ConfigChangeInteger=trapRX200ConfigChangeInteger, rxenumSwModeThreshold=rxenumSwModeThreshold, rxbank1CRC=rxbank1CRC, rxuomOptPower=rxuomOptPower, rxalarmStateModTemp=rxalarmStateModTemp, trapRX200CalDataCRCAlarm=trapRX200CalDataCRCAlarm, rxgx2Rx200HoldTimeSpecIndex=rxgx2Rx200HoldTimeSpecIndex, rxlabelFanCurrent=rxlabelFanCurrent, rxcurrentValueModTemp=rxcurrentValueModTemp, rxvalueFlash=rxvalueFlash, rxmaxValueOptPower=rxmaxValueOptPower, rxminValueModTemp=rxminValueModTemp, trapRX200FanCurrentAlarm=trapRX200FanCurrentAlarm, rxvalueMode=rxvalueMode, rxmajorHighOptPower=rxmajorHighOptPower, rxlabelAttnSetting=rxlabelAttnSetting, rxlabelSwModeThreshold=rxlabelSwModeThreshold, rxminorLow12Volt=rxminorLow12Volt, rxstateFlagModTemp=rxstateFlagModTemp, rxflashPrgCntA=rxflashPrgCntA, rxgx2Rx200HoldTimeData=rxgx2Rx200HoldTimeData, rxhourMeter=rxhourMeter, rxstateFlagWavelength=rxstateFlagWavelength, rxcalculateCRC=rxcalculateCRC, rxflashPrgCntB=rxflashPrgCntB, rxminorLowModTemp=rxminorLowModTemp, gx2Rx200Descriptor=gx2Rx200Descriptor, gx2Rx200StatusTable=gx2Rx200StatusTable, rxvalueSwModeSetting=rxvalueSwModeSetting, rxcurrentValueFanCurrent=rxcurrentValueFanCurrent, rxuomFanCurrent=rxuomFanCurrent, rxminorLowFanCurrent=rxminorLowFanCurrent, rxlabelModTemp=rxlabelModTemp, gx2Rx200AnalogEntry=gx2Rx200AnalogEntry, rxstateFlagFanCurrent=rxstateFlagFanCurrent, rxvalueHW=rxvalueHW, rxminorHighModTemp=rxminorHighModTemp, trapRX200ModuleTemperatureAlarm=trapRX200ModuleTemperatureAlarm, rxmaxValueFanCurrent=rxmaxValueFanCurrent, rxminorLowOptPower=rxminorLowOptPower, rxbootStatusByte=rxbootStatusByte, rxstateflagHW=rxstateflagHW, rxgx2Rx200FactoryTableIndex=rxgx2Rx200FactoryTableIndex, rxstateFlagMode=rxstateFlagMode, rxstateflagThermalCompCRC=rxstateflagThermalCompCRC, rxuomModTemp=rxuomModTemp, rxstateflagFactoryDataCRC=rxstateflagFactoryDataCRC, rxstateFlagSwModeSetting=rxstateFlagSwModeSetting, gx2Rx200HoldTimeEntry=gx2Rx200HoldTimeEntry, rxmajorHighFanCurrent=rxmajorHighFanCurrent, rxlabelOptPower=rxlabelOptPower, Float=Float, rxprgEEPROMByte=rxprgEEPROMByte, rxlabelCalibrationDataCRC=rxlabelCalibrationDataCRC, rxlabelFactoryDefault=rxlabelFactoryDefault, trapRX200Boot0Alarm=trapRX200Boot0Alarm, rxvalueSwModeThreshold=rxvalueSwModeThreshold, rxlabelOptSig=rxlabelOptSig, rxminorHighFanCurrent=rxminorHighFanCurrent, rxgx2Rx200StatusTableIndex=rxgx2Rx200StatusTableIndex, trapRX200OutputSwitchedAlarm=trapRX200OutputSwitchedAlarm, rxstateFlagAttnSetting=rxstateFlagAttnSetting, rxlabelAlarmDataCRC=rxlabelAlarmDataCRC, U32Data=U32Data, rxenumAttnSetting=rxenumAttnSetting, rxvalueFactoryDefault=rxvalueFactoryDefault, rxbank0CRC=rxbank0CRC, rxmajorHighModTemp=rxmajorHighModTemp, trapRX200DefaultAlarm=trapRX200DefaultAlarm, rxstateflagCalibrationDataCRC=rxstateflagCalibrationDataCRC, trapRX200ConfigChangeDisplayString=trapRX200ConfigChangeDisplayString, rxalarmStateOptPower=rxalarmStateOptPower, rxfwRev1=rxfwRev1, gx2Rx200FactoryTable=gx2Rx200FactoryTable, rxlabelMode=rxlabelMode, rxbootControlByte=rxbootControlByte, rxalarmState12Volt=rxalarmState12Volt, rxlabelSwModeSetting=rxlabelSwModeSetting, rxstateFlagOptPower=rxstateFlagOptPower, rxvalueFactoryDataCRC=rxvalueFactoryDataCRC, rxenumSwModeSetting=rxenumSwModeSetting, rxlabelHW=rxlabelHW, rxstateflagOptSig=rxstateflagOptSig, rxminValueFanCurrent=rxminValueFanCurrent, rxmajorHigh12Volt=rxmajorHigh12Volt, rxminValueOptPower=rxminValueOptPower, gx2Rx200DigitalEntry=gx2Rx200DigitalEntry, rxvalueOptSig=rxvalueOptSig, rxvalueThermalCompCRC=rxvalueThermalCompCRC, trapRX200AlarmDataCRCAlarm=trapRX200AlarmDataCRCAlarm, trapRX200SideStatusAlarm=trapRX200SideStatusAlarm, rxlabel12Volt=rxlabel12Volt, rxmajorLowModTemp=rxmajorLowModTemp, rxlabelWavelength=rxlabelWavelength, rxmaxValue12Volt=rxmaxValue12Volt, rxlabelThermalCompCRC=rxlabelThermalCompCRC, rxgx2Rx200DigitalTableIndex=rxgx2Rx200DigitalTableIndex, rxenumFactoryDefault=rxenumFactoryDefault, rxlabelBoot=rxlabelBoot, rxenumMode=rxenumMode, rxstateFlag12Volt=rxstateFlag12Volt, trapRX200Plus12CurrentAlarm=trapRX200Plus12CurrentAlarm, rxminValue12Volt=rxminValue12Volt, rxvalueCalibrationDataCRC=rxvalueCalibrationDataCRC, rxvalueAlarmDataCRC=rxvalueAlarmDataCRC, rxminorHighOptPower=rxminorHighOptPower, rxvalueBoot=rxvalueBoot, trapRX200FactoryDataCRCAlarm=trapRX200FactoryDataCRCAlarm, rxstateflagFlash=rxstateflagFlash, rxfwRev0=rxfwRev0, trapRX200FlashAlarm=trapRX200FlashAlarm, rxcurrentValueOptPower=rxcurrentValueOptPower, rxgx2Rx200AnalogTableIndex=rxgx2Rx200AnalogTableIndex, rxvalueWavelength=rxvalueWavelength, gx2Rx200DigitalTable=gx2Rx200DigitalTable, trapRX200Boot1Alarm=trapRX200Boot1Alarm, trapRX200ModeAlarm=trapRX200ModeAlarm, rxstateFlagFactoryDefault=rxstateFlagFactoryDefault, gx2Rx200AnalogTable=gx2Rx200AnalogTable, rxmajorLow12Volt=rxmajorLow12Volt, gx2Rx200FactoryEntry=gx2Rx200FactoryEntry, rxstateflagBoot=rxstateflagBoot, rxmajorLowFanCurrent=rxmajorLowFanCurrent, gx2Rx200StatusEntry=gx2Rx200StatusEntry, rxuom12Volt=rxuom12Volt, rxlabelFactoryDataCRC=rxlabelFactoryDataCRC, trapRX200OpticalPowerAlarm=trapRX200OpticalPowerAlarm, rxmajorLowOptPower=rxmajorLowOptPower, rxmaxValueModTemp=rxmaxValueModTemp, rxminorHigh12Volt=rxminorHigh12Volt)
