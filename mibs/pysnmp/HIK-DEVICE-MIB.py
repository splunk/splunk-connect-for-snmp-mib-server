#
# PySNMP MIB module HIK-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIK-DEVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:17:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, Integer32, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, enterprises, ObjectIdentity, IpAddress, MibIdentifier, Counter64, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Integer32", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "enterprises", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
test = MibIdentifier((1, 3, 6, 1, 4, 1, 39165))
devicemib = MibIdentifier((1, 3, 6, 1, 4, 1, 39165, 1))
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('current')
hardwVersion = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwVersion.setStatus('current')
softwVersion = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwVersion.setStatus('current')
macAddr = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddr.setStatus('current')
deviceID = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceID.setStatus('current')
manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturer.setStatus('current')
cpuPercent = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercent.setStatus('current')
diskSize = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSize.setStatus('current')
diskPercent = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPercent.setStatus('current')
memSize = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSize.setStatus('current')
memUsed = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUsed.setStatus('current')
restartDev = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartDev.setStatus('current')
dynIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynIpAddr.setStatus('current')
dynNetMask = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynNetMask.setStatus('current')
dynGateway = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynGateway.setStatus('current')
staticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIpAddr.setStatus('current')
staticNetMask = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticNetMask.setStatus('current')
staticGateway = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticGateway.setStatus('current')
sysTime = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTime.setStatus('current')
videoInChanNum = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoInChanNum.setStatus('current')
videoEncode = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoEncode.setStatus('current')
videoNetTrans = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoNetTrans.setStatus('current')
audioAbility = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioAbility.setStatus('current')
audioInNum = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioInNum.setStatus('current')
videoOutNum = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoOutNum.setStatus('current')
clarityChanNum = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clarityChanNum.setStatus('current')
localStorage = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localStorage.setStatus('current')
rtspPlayBack = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspPlayBack.setStatus('current')
netAccessType = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAccessType.setStatus('current')
alarmInChanNum = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmInChanNum.setStatus('current')
alarmOutChanNum = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOutChanNum.setStatus('current')
manageServAddr = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageServAddr.setStatus('current')
managePort = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managePort.setStatus('current')
ntpServIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 39165, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServIpAddr.setStatus('current')
mibBuilder.exportSymbols("HIK-DEVICE-MIB", dynNetMask=dynNetMask, staticIpAddr=staticIpAddr, manageServAddr=manageServAddr, videoNetTrans=videoNetTrans, audioInNum=audioInNum, dynIpAddr=dynIpAddr, deviceID=deviceID, netAccessType=netAccessType, managePort=managePort, videoInChanNum=videoInChanNum, staticNetMask=staticNetMask, diskSize=diskSize, rtspPlayBack=rtspPlayBack, restartDev=restartDev, clarityChanNum=clarityChanNum, hardwVersion=hardwVersion, videoOutNum=videoOutNum, videoEncode=videoEncode, localStorage=localStorage, manufacturer=manufacturer, softwVersion=softwVersion, diskPercent=diskPercent, audioAbility=audioAbility, alarmOutChanNum=alarmOutChanNum, alarmInChanNum=alarmInChanNum, memSize=memSize, sysTime=sysTime, memUsed=memUsed, staticGateway=staticGateway, ntpServIpAddr=ntpServIpAddr, deviceType=deviceType, cpuPercent=cpuPercent, dynGateway=dynGateway, test=test, macAddr=macAddr, devicemib=devicemib)
