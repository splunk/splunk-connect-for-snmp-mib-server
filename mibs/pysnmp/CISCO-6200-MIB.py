#
# PySNMP MIB module CISCO-6200-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-6200-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:32:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Counter64, NotificationType, TimeTicks, Gauge32, Counter32, iso, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "NotificationType", "TimeTicks", "Gauge32", "Counter32", "iso", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
cisco6200MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 26))
cisco6200MIB.setRevisions(('1998-02-26 00:00',))
if mibBuilder.loadTexts: cisco6200MIB.setLastUpdated('9807280000Z')
if mibBuilder.loadTexts: cisco6200MIB.setOrganization('Cisco System, Inc.')
cisco6200MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 1))
c62System = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1))
c62Slot = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2))
c62OCInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3))
c62LineInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4))
c62Subscriber = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5))
class C6200CardType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, -1))
    namedValues = NamedValues(("oc3si", 1), ("ctl", 2), ("cap8", 3), ("cap16", 4), ("oc3ss", 5), ("oc3mm", 6), ("stm1si", 7), ("stm1mm", 8), ("dmt8", 9), ("none", -1))

class CommandValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ready", 1), ("execute", 2))

class AlarmLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("minor", 2), ("major", 3), ("critical", 4), ("unknown", 5))

class InterfaceStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class TestStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("inactive", 1), ("active", 2), ("pass", 3), ("fail", 4), ("aborted", 5), ("waiting", 6))

class TestType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("lineQuality", 1), ("capHardware", 2), ("dmtLocalTest", 3))

systemType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("c62OC3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemType.setStatus('current')
systemAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 2), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmLevel.setStatus('current')
systemAlarmLevelChngCounter = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAlarmLevelChngCounter.setStatus('current')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 4), CommandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
systemSaveCnfg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 5), CommandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSaveCnfg.setStatus('current')
systemProvChngCounter = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProvChngCounter.setStatus('current')
systemHClockAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 7), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHClockAlarmLevel.setStatus('current')
systemFanAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 8), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanAlarmLevel.setStatus('current')
systemTemperatureAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 9), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperatureAlarmLevel.setStatus('current')
systemACO = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 1, 10), CommandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemACO.setStatus('current')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1), )
if mibBuilder.loadTexts: slotTable.setStatus('current')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"))
if mibBuilder.loadTexts: slotEntry.setStatus('current')
slotID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: slotID.setStatus('current')
slotType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 2), C6200CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotType.setStatus('current')
slotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("empty", 1), ("notProvisioned", 2), ("missing", 3), ("mismatch", 4), ("match", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatus.setStatus('current')
slotSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSwVersion.setStatus('current')
slotAlarmLevelChngCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotAlarmLevelChngCounter.setStatus('current')
slotCnfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 6), C6200CardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotCnfType.setStatus('current')
slotSubscriberChngCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSubscriberChngCounter.setStatus('current')
slotAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 1, 1, 8), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotAlarmLevel.setStatus('current')
portID = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: portID.setStatus('current')
oCInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1), )
if mibBuilder.loadTexts: oCInterfaceTable.setStatus('current')
oCInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"), (0, "CISCO-6200-MIB", "portID"))
if mibBuilder.loadTexts: oCInterfaceEntry.setStatus('current')
oCIAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 2), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCIAlarmLevel.setStatus('current')
oCIEQF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 3), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCIEQF.setStatus('current')
oCILOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 4), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILOS.setStatus('current')
oCILOF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 5), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILOF.setStatus('current')
oCILAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 6), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILAIS.setStatus('current')
oCILOP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 7), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILOP.setStatus('current')
oCIPAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 8), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCIPAIS.setStatus('current')
oCISLM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 9), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCISLM.setStatus('current')
oCILRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 10), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILRFI.setStatus('current')
oCIPRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 11), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCIPRFI.setStatus('current')
oCILOST = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 12), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILOST.setStatus('current')
oCILOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 13), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCILOCD.setStatus('current')
oCILoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oCILoopMode.setStatus('current')
oCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 2), )
if mibBuilder.loadTexts: oCPerfTable.setStatus('current')
oCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"), (0, "CISCO-6200-MIB", "portID"))
if mibBuilder.loadTexts: oCPerfEntry.setStatus('current')
oCPTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCPTxCellCount.setStatus('current')
oCPRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCPRxCellCount.setStatus('current')
oCPHecErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oCPHecErrCount.setStatus('current')
lineInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1), )
if mibBuilder.loadTexts: lineInterfaceTable.setStatus('current')
lineInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"), (0, "CISCO-6200-MIB", "portID"))
if mibBuilder.loadTexts: lineInterfaceEntry.setStatus('current')
lineAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 1), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAlarmLevel.setStatus('current')
lineDwnSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDwnSNRMargin.setStatus('current')
lineDwnLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 3), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDwnLOCD.setStatus('deprecated')
lineDwnErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDwnErrSecs.setStatus('current')
lineDwnLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 5), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDwnLineRate.setStatus('current')
lineUpSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 6), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: lineUpSNRMargin.setStatus('current')
lineUpLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 7), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineUpLOCD.setStatus('current')
lineUpErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineUpErrSecs.setStatus('current')
lineUpLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 9), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: lineUpLineRate.setStatus('current')
lineRateAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("down", 2), ("up", 3), ("downAndUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineRateAlarm.setStatus('current')
lineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testing", 1), ("training", 2), ("active", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineMode.setStatus('current')
lineDMTDwnAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 12), Gauge32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTDwnAttenuation.setStatus('current')
lineDMTUpAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 13), Gauge32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpAttenuation.setStatus('current')
lineDMTDwnLPR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 14), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTDwnLPR.setStatus('current')
lineDMTUpLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 15), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpLOS.setStatus('current')
lineDMTUpLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 16), AlarmLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpLOF.setStatus('current')
lineDMTLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dslline", 2), ("local", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineDMTLoopback.setStatus('current')
linePerfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2), )
if mibBuilder.loadTexts: linePerfTable.setStatus('current')
linePerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"), (0, "CISCO-6200-MIB", "portID"))
if mibBuilder.loadTexts: linePerfEntry.setStatus('current')
lineTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineTxCellCount.setStatus('current')
lineRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineRxCellCount.setStatus('current')
lineHecErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineHecErrCount.setStatus('current')
lineDMTDwnFECCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTDwnFECCount.setStatus('current')
lineDMTUpFECCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpFECCount.setStatus('current')
lineDMTDwnCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTDwnCRCCount.setStatus('current')
lineDMTUpCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpCRCCount.setStatus('current')
lineDMTDwnLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTDwnLOSCount.setStatus('current')
lineDMTUpLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpLOSCount.setStatus('current')
lineDMTDwnSEFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTDwnSEFCount.setStatus('current')
lineDMTUpRDICount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDMTUpRDICount.setStatus('current')
lineTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3), )
if mibBuilder.loadTexts: lineTestTable.setStatus('current')
lineTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"), (0, "CISCO-6200-MIB", "portID"))
if mibBuilder.loadTexts: lineTestEntry.setStatus('current')
lineTestTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineTestTrigger.setStatus('current')
lineTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 2), TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineTestType.setStatus('current')
lineTestTimeIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(30)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineTestTimeIntvl.setStatus('current')
lineTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 4), TestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineTestStatus.setStatus('current')
lineTestDwnBitErrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineTestDwnBitErrRate.setStatus('current')
lineTestUpBitErrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineTestUpBitErrRate.setStatus('current')
lineTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineTestStartTime.setStatus('current')
lineTestCmplTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineTestCmplTime.setStatus('current')
lineTestBitErrRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineTestBitErrRateLimit.setStatus('current')
subscriberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1), )
if mibBuilder.loadTexts: subscriberTable.setStatus('current')
subscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-6200-MIB", "slotID"), (0, "CISCO-6200-MIB", "portID"))
if mibBuilder.loadTexts: subscriberEntry.setStatus('current')
subscriberName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('DSL<slotID>/<portID>')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriberName.setStatus('current')
subscriberUpLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1, 1, 2), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriberUpLineRate.setStatus('current')
subscriberDwnLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1, 1, 3), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriberDwnLineRate.setStatus('current')
subscriberLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1, 1, 4), InterfaceStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriberLineState.setStatus('current')
subscriberDMTLOSConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 26, 1, 5, 1, 1, 5), InterfaceStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriberDMTLOSConfig.setStatus('current')
ciscoC6200MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 2))
ciscoC6200MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 1))
ciscoC6200MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2))
ciscoC6200MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 1, 1)).setObjects(("CISCO-6200-MIB", "ciscoC6200SystemGroup"), ("CISCO-6200-MIB", "ciscoC6200SlotGroup"), ("CISCO-6200-MIB", "ciscoC6200oCIGroup"), ("CISCO-6200-MIB", "ciscoC6200oCIPerfGroup"), ("CISCO-6200-MIB", "ciscoC6200lineGroup"), ("CISCO-6200-MIB", "ciscoC6200lineTestGroup"), ("CISCO-6200-MIB", "ciscoC6200linePerfGroup"), ("CISCO-6200-MIB", "ciscoC6200subscriberGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200MIBCompliance = ciscoC6200MIBCompliance.setStatus('obsolete')
ciscoC6200MIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 1, 2)).setObjects(("CISCO-6200-MIB", "ciscoC6200SystemGroup2"), ("CISCO-6200-MIB", "ciscoC6200SlotGroup2"), ("CISCO-6200-MIB", "ciscoC6200oCIGroup2"), ("CISCO-6200-MIB", "ciscoC6200oCIPerfGroup2"), ("CISCO-6200-MIB", "ciscoC6200lineGroup2"), ("CISCO-6200-MIB", "ciscoC6200lineTestGroup2"), ("CISCO-6200-MIB", "ciscoC6200linePerfGroup2"), ("CISCO-6200-MIB", "ciscoC6200subscriberGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200MIBCompliance2 = ciscoC6200MIBCompliance2.setStatus('current')
ciscoC6200SystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 1)).setObjects(("CISCO-6200-MIB", "systemType"), ("CISCO-6200-MIB", "systemAlarmLevel"), ("CISCO-6200-MIB", "systemAlarmLevelChngCounter"), ("CISCO-6200-MIB", "systemReset"), ("CISCO-6200-MIB", "systemSaveCnfg"), ("CISCO-6200-MIB", "systemProvChngCounter"), ("CISCO-6200-MIB", "systemHClockAlarmLevel"), ("CISCO-6200-MIB", "systemFanAlarmLevel"), ("CISCO-6200-MIB", "systemTemperatureAlarmLevel"), ("CISCO-6200-MIB", "systemACO"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200SystemGroup = ciscoC6200SystemGroup.setStatus('obsolete')
ciscoC6200SlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 2)).setObjects(("CISCO-6200-MIB", "slotType"), ("CISCO-6200-MIB", "slotStatus"), ("CISCO-6200-MIB", "slotSwVersion"), ("CISCO-6200-MIB", "slotAlarmLevelChngCounter"), ("CISCO-6200-MIB", "slotCnfType"), ("CISCO-6200-MIB", "slotSubscriberChngCounter"), ("CISCO-6200-MIB", "slotAlarmLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200SlotGroup = ciscoC6200SlotGroup.setStatus('obsolete')
ciscoC6200oCIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 3)).setObjects(("CISCO-6200-MIB", "oCIAlarmLevel"), ("CISCO-6200-MIB", "oCIEQF"), ("CISCO-6200-MIB", "oCILOS"), ("CISCO-6200-MIB", "oCILOF"), ("CISCO-6200-MIB", "oCILAIS"), ("CISCO-6200-MIB", "oCILOP"), ("CISCO-6200-MIB", "oCIPAIS"), ("CISCO-6200-MIB", "oCISLM"), ("CISCO-6200-MIB", "oCILRFI"), ("CISCO-6200-MIB", "oCIPRFI"), ("CISCO-6200-MIB", "oCILOST"), ("CISCO-6200-MIB", "oCILOCD"), ("CISCO-6200-MIB", "oCILoopMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200oCIGroup = ciscoC6200oCIGroup.setStatus('obsolete')
ciscoC6200oCIPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 4)).setObjects(("CISCO-6200-MIB", "oCPTxCellCount"), ("CISCO-6200-MIB", "oCPRxCellCount"), ("CISCO-6200-MIB", "oCPHecErrCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200oCIPerfGroup = ciscoC6200oCIPerfGroup.setStatus('obsolete')
ciscoC6200lineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 5)).setObjects(("CISCO-6200-MIB", "lineAlarmLevel"), ("CISCO-6200-MIB", "lineDwnSNRMargin"), ("CISCO-6200-MIB", "lineDwnLOCD"), ("CISCO-6200-MIB", "lineDwnErrSecs"), ("CISCO-6200-MIB", "lineDwnLineRate"), ("CISCO-6200-MIB", "lineUpSNRMargin"), ("CISCO-6200-MIB", "lineUpLOCD"), ("CISCO-6200-MIB", "lineUpErrSecs"), ("CISCO-6200-MIB", "lineUpLineRate"), ("CISCO-6200-MIB", "lineRateAlarm"), ("CISCO-6200-MIB", "lineMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200lineGroup = ciscoC6200lineGroup.setStatus('obsolete')
ciscoC6200linePerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 6)).setObjects(("CISCO-6200-MIB", "lineTxCellCount"), ("CISCO-6200-MIB", "lineRxCellCount"), ("CISCO-6200-MIB", "lineHecErrCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200linePerfGroup = ciscoC6200linePerfGroup.setStatus('obsolete')
ciscoC6200lineTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 7)).setObjects(("CISCO-6200-MIB", "lineTestTrigger"), ("CISCO-6200-MIB", "lineTestType"), ("CISCO-6200-MIB", "lineTestTimeIntvl"), ("CISCO-6200-MIB", "lineTestStatus"), ("CISCO-6200-MIB", "lineTestDwnBitErrRate"), ("CISCO-6200-MIB", "lineTestUpBitErrRate"), ("CISCO-6200-MIB", "lineTestStartTime"), ("CISCO-6200-MIB", "lineTestCmplTime"), ("CISCO-6200-MIB", "lineTestBitErrRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200lineTestGroup = ciscoC6200lineTestGroup.setStatus('obsolete')
ciscoC6200subscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 8)).setObjects(("CISCO-6200-MIB", "subscriberName"), ("CISCO-6200-MIB", "subscriberUpLineRate"), ("CISCO-6200-MIB", "subscriberDwnLineRate"), ("CISCO-6200-MIB", "subscriberLineState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200subscriberGroup = ciscoC6200subscriberGroup.setStatus('obsolete')
ciscoC6200SystemGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 9)).setObjects(("CISCO-6200-MIB", "systemType"), ("CISCO-6200-MIB", "systemAlarmLevel"), ("CISCO-6200-MIB", "systemAlarmLevelChngCounter"), ("CISCO-6200-MIB", "systemReset"), ("CISCO-6200-MIB", "systemSaveCnfg"), ("CISCO-6200-MIB", "systemProvChngCounter"), ("CISCO-6200-MIB", "systemHClockAlarmLevel"), ("CISCO-6200-MIB", "systemFanAlarmLevel"), ("CISCO-6200-MIB", "systemTemperatureAlarmLevel"), ("CISCO-6200-MIB", "systemACO"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200SystemGroup2 = ciscoC6200SystemGroup2.setStatus('current')
ciscoC6200SlotGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 10)).setObjects(("CISCO-6200-MIB", "slotType"), ("CISCO-6200-MIB", "slotStatus"), ("CISCO-6200-MIB", "slotSwVersion"), ("CISCO-6200-MIB", "slotAlarmLevelChngCounter"), ("CISCO-6200-MIB", "slotCnfType"), ("CISCO-6200-MIB", "slotSubscriberChngCounter"), ("CISCO-6200-MIB", "slotAlarmLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200SlotGroup2 = ciscoC6200SlotGroup2.setStatus('current')
ciscoC6200oCIGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 11)).setObjects(("CISCO-6200-MIB", "oCIAlarmLevel"), ("CISCO-6200-MIB", "oCIEQF"), ("CISCO-6200-MIB", "oCILOS"), ("CISCO-6200-MIB", "oCILOF"), ("CISCO-6200-MIB", "oCILAIS"), ("CISCO-6200-MIB", "oCILOP"), ("CISCO-6200-MIB", "oCIPAIS"), ("CISCO-6200-MIB", "oCISLM"), ("CISCO-6200-MIB", "oCILRFI"), ("CISCO-6200-MIB", "oCIPRFI"), ("CISCO-6200-MIB", "oCILOST"), ("CISCO-6200-MIB", "oCILOCD"), ("CISCO-6200-MIB", "oCILoopMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200oCIGroup2 = ciscoC6200oCIGroup2.setStatus('current')
ciscoC6200oCIPerfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 12)).setObjects(("CISCO-6200-MIB", "oCPTxCellCount"), ("CISCO-6200-MIB", "oCPRxCellCount"), ("CISCO-6200-MIB", "oCPHecErrCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200oCIPerfGroup2 = ciscoC6200oCIPerfGroup2.setStatus('current')
ciscoC6200lineGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 13)).setObjects(("CISCO-6200-MIB", "lineAlarmLevel"), ("CISCO-6200-MIB", "lineDwnSNRMargin"), ("CISCO-6200-MIB", "lineDwnErrSecs"), ("CISCO-6200-MIB", "lineDwnLineRate"), ("CISCO-6200-MIB", "lineUpSNRMargin"), ("CISCO-6200-MIB", "lineUpLOCD"), ("CISCO-6200-MIB", "lineUpErrSecs"), ("CISCO-6200-MIB", "lineUpLineRate"), ("CISCO-6200-MIB", "lineRateAlarm"), ("CISCO-6200-MIB", "lineMode"), ("CISCO-6200-MIB", "lineDMTDwnAttenuation"), ("CISCO-6200-MIB", "lineDMTUpAttenuation"), ("CISCO-6200-MIB", "lineDMTDwnLPR"), ("CISCO-6200-MIB", "lineDMTUpLOS"), ("CISCO-6200-MIB", "lineDMTUpLOF"), ("CISCO-6200-MIB", "lineDMTLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200lineGroup2 = ciscoC6200lineGroup2.setStatus('current')
ciscoC6200linePerfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 14)).setObjects(("CISCO-6200-MIB", "lineTxCellCount"), ("CISCO-6200-MIB", "lineRxCellCount"), ("CISCO-6200-MIB", "lineHecErrCount"), ("CISCO-6200-MIB", "lineDMTDwnFECCount"), ("CISCO-6200-MIB", "lineDMTUpFECCount"), ("CISCO-6200-MIB", "lineDMTDwnCRCCount"), ("CISCO-6200-MIB", "lineDMTUpCRCCount"), ("CISCO-6200-MIB", "lineDMTDwnLOSCount"), ("CISCO-6200-MIB", "lineDMTUpLOSCount"), ("CISCO-6200-MIB", "lineDMTDwnSEFCount"), ("CISCO-6200-MIB", "lineDMTUpRDICount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200linePerfGroup2 = ciscoC6200linePerfGroup2.setStatus('current')
ciscoC6200lineTestGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 15)).setObjects(("CISCO-6200-MIB", "lineTestTrigger"), ("CISCO-6200-MIB", "lineTestType"), ("CISCO-6200-MIB", "lineTestTimeIntvl"), ("CISCO-6200-MIB", "lineTestStatus"), ("CISCO-6200-MIB", "lineTestDwnBitErrRate"), ("CISCO-6200-MIB", "lineTestUpBitErrRate"), ("CISCO-6200-MIB", "lineTestStartTime"), ("CISCO-6200-MIB", "lineTestCmplTime"), ("CISCO-6200-MIB", "lineTestBitErrRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200lineTestGroup2 = ciscoC6200lineTestGroup2.setStatus('current')
ciscoC6200subscriberGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 26, 2, 2, 16)).setObjects(("CISCO-6200-MIB", "subscriberName"), ("CISCO-6200-MIB", "subscriberUpLineRate"), ("CISCO-6200-MIB", "subscriberDwnLineRate"), ("CISCO-6200-MIB", "subscriberLineState"), ("CISCO-6200-MIB", "subscriberDMTLOSConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoC6200subscriberGroup2 = ciscoC6200subscriberGroup2.setStatus('current')
mibBuilder.exportSymbols("CISCO-6200-MIB", linePerfEntry=linePerfEntry, lineDMTDwnSEFCount=lineDMTDwnSEFCount, subscriberDMTLOSConfig=subscriberDMTLOSConfig, oCIPAIS=oCIPAIS, lineDMTDwnFECCount=lineDMTDwnFECCount, lineTestTrigger=lineTestTrigger, lineTestCmplTime=lineTestCmplTime, lineInterfaceEntry=lineInterfaceEntry, lineDwnLineRate=lineDwnLineRate, systemAlarmLevel=systemAlarmLevel, slotAlarmLevel=slotAlarmLevel, lineTestStatus=lineTestStatus, slotEntry=slotEntry, slotType=slotType, c62Subscriber=c62Subscriber, lineUpErrSecs=lineUpErrSecs, ciscoC6200SystemGroup2=ciscoC6200SystemGroup2, subscriberTable=subscriberTable, lineDMTDwnLOSCount=lineDMTDwnLOSCount, cisco6200MIB=cisco6200MIB, systemHClockAlarmLevel=systemHClockAlarmLevel, portID=portID, oCPRxCellCount=oCPRxCellCount, lineDMTDwnLPR=lineDMTDwnLPR, oCILOF=oCILOF, systemReset=systemReset, lineDMTUpLOS=lineDMTUpLOS, c62System=c62System, oCILOCD=oCILOCD, subscriberName=subscriberName, ciscoC6200oCIPerfGroup=ciscoC6200oCIPerfGroup, oCPTxCellCount=oCPTxCellCount, InterfaceStatus=InterfaceStatus, AlarmLevel=AlarmLevel, ciscoC6200lineTestGroup=ciscoC6200lineTestGroup, oCISLM=oCISLM, ciscoC6200MIBConformance=ciscoC6200MIBConformance, oCPerfEntry=oCPerfEntry, lineInterfaceTable=lineInterfaceTable, subscriberUpLineRate=subscriberUpLineRate, lineMode=lineMode, lineDwnLOCD=lineDwnLOCD, oCILOP=oCILOP, lineTxCellCount=lineTxCellCount, PYSNMP_MODULE_ID=cisco6200MIB, lineHecErrCount=lineHecErrCount, lineTestDwnBitErrRate=lineTestDwnBitErrRate, systemFanAlarmLevel=systemFanAlarmLevel, oCILOST=oCILOST, systemSaveCnfg=systemSaveCnfg, systemType=systemType, lineDMTUpLOSCount=lineDMTUpLOSCount, linePerfTable=linePerfTable, lineDwnSNRMargin=lineDwnSNRMargin, oCIPRFI=oCIPRFI, c62Slot=c62Slot, oCILAIS=oCILAIS, ciscoC6200lineTestGroup2=ciscoC6200lineTestGroup2, lineTestEntry=lineTestEntry, lineRxCellCount=lineRxCellCount, systemAlarmLevelChngCounter=systemAlarmLevelChngCounter, subscriberEntry=subscriberEntry, systemACO=systemACO, systemTemperatureAlarmLevel=systemTemperatureAlarmLevel, lineDMTUpAttenuation=lineDMTUpAttenuation, oCIAlarmLevel=oCIAlarmLevel, ciscoC6200MIBCompliance=ciscoC6200MIBCompliance, ciscoC6200SlotGroup=ciscoC6200SlotGroup, lineTestStartTime=lineTestStartTime, ciscoC6200SlotGroup2=ciscoC6200SlotGroup2, slotSwVersion=slotSwVersion, lineRateAlarm=lineRateAlarm, lineUpLineRate=lineUpLineRate, ciscoC6200oCIGroup2=ciscoC6200oCIGroup2, lineDMTUpFECCount=lineDMTUpFECCount, C6200CardType=C6200CardType, lineTestUpBitErrRate=lineTestUpBitErrRate, ciscoC6200linePerfGroup2=ciscoC6200linePerfGroup2, lineDMTDwnAttenuation=lineDMTDwnAttenuation, lineTestTimeIntvl=lineTestTimeIntvl, ciscoC6200oCIPerfGroup2=ciscoC6200oCIPerfGroup2, slotCnfType=slotCnfType, lineDwnErrSecs=lineDwnErrSecs, oCInterfaceEntry=oCInterfaceEntry, lineDMTDwnCRCCount=lineDMTDwnCRCCount, ciscoC6200lineGroup=ciscoC6200lineGroup, subscriberLineState=subscriberLineState, lineUpLOCD=lineUpLOCD, ciscoC6200lineGroup2=ciscoC6200lineGroup2, ciscoC6200linePerfGroup=ciscoC6200linePerfGroup, ciscoC6200MIBGroups=ciscoC6200MIBGroups, slotSubscriberChngCounter=slotSubscriberChngCounter, ciscoC6200SystemGroup=ciscoC6200SystemGroup, ciscoC6200subscriberGroup=ciscoC6200subscriberGroup, systemProvChngCounter=systemProvChngCounter, ciscoC6200subscriberGroup2=ciscoC6200subscriberGroup2, TestStatus=TestStatus, lineDMTUpLOF=lineDMTUpLOF, ciscoC6200oCIGroup=ciscoC6200oCIGroup, oCInterfaceTable=oCInterfaceTable, lineUpSNRMargin=lineUpSNRMargin, lineTestBitErrRateLimit=lineTestBitErrRateLimit, TestType=TestType, lineTestTable=lineTestTable, lineAlarmLevel=lineAlarmLevel, oCPHecErrCount=oCPHecErrCount, oCILoopMode=oCILoopMode, CommandValue=CommandValue, oCPerfTable=oCPerfTable, ciscoC6200MIBCompliances=ciscoC6200MIBCompliances, lineDMTUpCRCCount=lineDMTUpCRCCount, cisco6200MibObjects=cisco6200MibObjects, subscriberDwnLineRate=subscriberDwnLineRate, ciscoC6200MIBCompliance2=ciscoC6200MIBCompliance2, slotTable=slotTable, c62LineInterface=c62LineInterface, slotAlarmLevelChngCounter=slotAlarmLevelChngCounter, lineTestType=lineTestType, slotID=slotID, lineDMTLoopback=lineDMTLoopback, c62OCInterface=c62OCInterface, slotStatus=slotStatus, oCILRFI=oCILRFI, oCIEQF=oCIEQF, lineDMTUpRDICount=lineDMTUpRDICount, oCILOS=oCILOS)
