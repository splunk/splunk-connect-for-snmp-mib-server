#
# PySNMP MIB module OLD-CISCO-NOVELL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-NOVELL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
temporary, = mibBuilder.importSymbols("CISCO-SMI", "temporary")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Counter64, ObjectIdentity, Integer32, Gauge32, IpAddress, Unsigned32, NotificationType, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Counter64", "ObjectIdentity", "Integer32", "Gauge32", "IpAddress", "Unsigned32", "NotificationType", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class IPXaddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

tmpnovell = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 4))
novellInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInput.setStatus('mandatory')
novellBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastin.setStatus('mandatory')
novellForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellForward.setStatus('mandatory')
novellBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastout.setStatus('mandatory')
novellFormerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellFormerr.setStatus('mandatory')
novellChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellChksum.setStatus('mandatory')
novellHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellHopcnt.setStatus('mandatory')
novellNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoroute.setStatus('mandatory')
novellNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoencap.setStatus('mandatory')
novellOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellOutput.setStatus('mandatory')
novellInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInmult.setStatus('mandatory')
novellLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellLocal.setStatus('mandatory')
novellUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellUnknown.setStatus('mandatory')
novellSapreqin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreqin.setStatus('mandatory')
novellSapresin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapresin.setStatus('mandatory')
novellSapout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapout.setStatus('mandatory')
novellSapreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreply.setStatus('mandatory')
ipxActThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActThresh.setStatus('mandatory')
ipxActLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostPkts.setStatus('mandatory')
ipxActLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostByts.setStatus('mandatory')
lipxAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 21), )
if mibBuilder.loadTexts: lipxAccountingTable.setStatus('mandatory')
lipxAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1), ).setIndexNames((0, "OLD-CISCO-NOVELL-MIB", "ipxActSrc"), (0, "OLD-CISCO-NOVELL-MIB", "ipxActDst"))
if mibBuilder.loadTexts: lipxAccountingEntry.setStatus('mandatory')
ipxActSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 1), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActSrc.setStatus('mandatory')
ipxActDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 2), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActDst.setStatus('mandatory')
ipxActPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActPkts.setStatus('mandatory')
ipxActByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActByts.setStatus('mandatory')
ipxActAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActAge.setStatus('mandatory')
lipxCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 23), )
if mibBuilder.loadTexts: lipxCkAccountingTable.setStatus('mandatory')
lipxCkAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1), ).setIndexNames((0, "OLD-CISCO-NOVELL-MIB", "ipxCkactSrc"), (0, "OLD-CISCO-NOVELL-MIB", "ipxCkactDst"))
if mibBuilder.loadTexts: lipxCkAccountingEntry.setStatus('mandatory')
ipxCkactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 1), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactSrc.setStatus('mandatory')
ipxCkactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 2), IPXaddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactDst.setStatus('mandatory')
ipxCkactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactPkts.setStatus('mandatory')
ipxCkactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactByts.setStatus('mandatory')
ipxCkactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactAge.setStatus('mandatory')
ipxActCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxActCheckPoint.setStatus('mandatory')
mibBuilder.exportSymbols("OLD-CISCO-NOVELL-MIB", tmpnovell=tmpnovell, novellInput=novellInput, novellNoroute=novellNoroute, novellBcastout=novellBcastout, ipxActPkts=ipxActPkts, novellBcastin=novellBcastin, lipxAccountingEntry=lipxAccountingEntry, ipxCkactSrc=ipxCkactSrc, novellLocal=novellLocal, lipxCkAccountingTable=lipxCkAccountingTable, novellHopcnt=novellHopcnt, lipxCkAccountingEntry=lipxCkAccountingEntry, ipxActByts=ipxActByts, ipxActThresh=ipxActThresh, novellOutput=novellOutput, ipxActLostByts=ipxActLostByts, ipxActCheckPoint=ipxActCheckPoint, ipxCkactPkts=ipxCkactPkts, novellSapreply=novellSapreply, IPXaddress=IPXaddress, ipxCkactDst=ipxCkactDst, novellUnknown=novellUnknown, ipxActSrc=ipxActSrc, ipxActAge=ipxActAge, novellSapresin=novellSapresin, ipxCkactByts=ipxCkactByts, novellFormerr=novellFormerr, novellForward=novellForward, novellNoencap=novellNoencap, novellSapreqin=novellSapreqin, ipxCkactAge=ipxCkactAge, novellInmult=novellInmult, ipxActLostPkts=ipxActLostPkts, novellChksum=novellChksum, lipxAccountingTable=lipxAccountingTable, ipxActDst=ipxActDst, novellSapout=novellSapout)
