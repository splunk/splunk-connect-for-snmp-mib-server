#
# PySNMP MIB module HOT-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HOT-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:20:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ent_8800, = mibBuilder.importSymbols("PDN-HEADER-MIB", "ent-8800")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, iso, Gauge32, NotificationType, IpAddress, Integer32, Unsigned32, MibIdentifier, Counter64, TimeTicks, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "iso", "Gauge32", "NotificationType", "IpAddress", "Integer32", "Unsigned32", "MibIdentifier", "Counter64", "TimeTicks", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

pdnDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6))
pdnCardConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1))
pdnPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2))
pdnClientConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3))
pdnCardGeneralParams = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 4))
pdnCardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1), )
if mibBuilder.loadTexts: pdnCardConfigTable.setStatus('mandatory')
pdnCardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1), ).setIndexNames((0, "HOT-DOMAIN-MIB", "pdnCardConfigVnidId"))
if mibBuilder.loadTexts: pdnCardConfigEntry.setStatus('mandatory')
pdnCardConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigVnidId.setStatus('mandatory')
pdnCardConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigDomainName.setStatus('mandatory')
pdnCardConfigMuxFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigMuxFwd.setStatus('mandatory')
pdnCardConfigIPFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigIPFiltering.setStatus('mandatory')
pdnCardConfigIPScoping = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigIPScoping.setStatus('mandatory')
pdnCardConfigDbUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nop", 1), ("update", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigDbUpdate.setStatus('mandatory')
pdnPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1), )
if mibBuilder.loadTexts: pdnPortConfigTable.setStatus('mandatory')
pdnPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1), ).setIndexNames((0, "HOT-DOMAIN-MIB", "pdnPortConfigVNID"), (0, "HOT-DOMAIN-MIB", "pdnPortConfigIfIndex"))
if mibBuilder.loadTexts: pdnPortConfigEntry.setStatus('mandatory')
pdnPortConfigVNID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPortConfigVNID.setStatus('mandatory')
pdnPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPortConfigIfIndex.setStatus('mandatory')
pdnPortConfigCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("de-activate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigCfg.setStatus('mandatory')
pdnPortConfigDefNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigDefNHR.setStatus('mandatory')
pdnPortConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("implicit", 1), ("explicit", 2), ("no-tagging", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigMode.setStatus('mandatory')
pdnClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1), )
if mibBuilder.loadTexts: pdnClientConfigTable.setStatus('mandatory')
pdnClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1), ).setIndexNames((0, "HOT-DOMAIN-MIB", "pdnClientConfigIfIndex"), (0, "HOT-DOMAIN-MIB", "pdnClientConfigClientIndex"))
if mibBuilder.loadTexts: pdnClientConfigEntry.setStatus('mandatory')
pdnClientConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigIfIndex.setStatus('mandatory')
pdnClientConfigClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigClientIndex.setStatus('mandatory')
pdnClientConfigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnClientConfigAddr.setStatus('mandatory')
pdnClientConfigNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnClientConfigNHR.setStatus('mandatory')
pdnClientConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigVnidId.setStatus('mandatory')
pdnClientConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigType.setStatus('mandatory')
pdnClientConfigLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigLeaseTime.setStatus('mandatory')
pdnClientConfigLeaseRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigLeaseRemainTime.setStatus('mandatory')
pdnClientConfigMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigMacAddr.setStatus('mandatory')
pdnClientConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigSubnetMask.setStatus('mandatory')
pdnCardGeneralParamsVNIDMode = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardGeneralParamsVNIDMode.setStatus('mandatory')
mibBuilder.exportSymbols("HOT-DOMAIN-MIB", pdnClientConfigNHR=pdnClientConfigNHR, pdnPortConfigCfg=pdnPortConfigCfg, MacAddress=MacAddress, pdnClientConfigMacAddr=pdnClientConfigMacAddr, pdnPortConfigTable=pdnPortConfigTable, pdnCardConfigDbUpdate=pdnCardConfigDbUpdate, pdnClientConfigAddr=pdnClientConfigAddr, pdnClientConfigVnidId=pdnClientConfigVnidId, pdnClientConfigIfIndex=pdnClientConfigIfIndex, pdnClientConfigLeaseTime=pdnClientConfigLeaseTime, pdnPortConfigDefNHR=pdnPortConfigDefNHR, pdnClientConfigSubnetMask=pdnClientConfigSubnetMask, pdnCardConfigVnidId=pdnCardConfigVnidId, pdnPortConfigMode=pdnPortConfigMode, pdnClientConfigClientIndex=pdnClientConfigClientIndex, pdnCardConfigTable=pdnCardConfigTable, pdnCardConfigIPFiltering=pdnCardConfigIPFiltering, pdnPortConfigVNID=pdnPortConfigVNID, pdnPortConfig=pdnPortConfig, pdnCardGeneralParamsVNIDMode=pdnCardGeneralParamsVNIDMode, pdnCardGeneralParams=pdnCardGeneralParams, pdnCardConfigEntry=pdnCardConfigEntry, pdnClientConfigTable=pdnClientConfigTable, pdnPortConfigIfIndex=pdnPortConfigIfIndex, pdnDomain=pdnDomain, pdnClientConfig=pdnClientConfig, pdnPortConfigEntry=pdnPortConfigEntry, pdnCardConfig=pdnCardConfig, pdnClientConfigLeaseRemainTime=pdnClientConfigLeaseRemainTime, pdnClientConfigType=pdnClientConfigType, pdnCardConfigMuxFwd=pdnCardConfigMuxFwd, pdnCardConfigIPScoping=pdnCardConfigIPScoping, pdnCardConfigDomainName=pdnCardConfigDomainName, pdnClientConfigEntry=pdnClientConfigEntry)
