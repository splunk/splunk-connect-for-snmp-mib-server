#
# PySNMP MIB module NETSWITCH-DMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSWITCH-DMA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, enterprises, Bits, ObjectIdentity, Integer32, iso, NotificationType, MibIdentifier, TimeTicks, Unsigned32, IpAddress, Gauge32, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "Bits", "ObjectIdentity", "Integer32", "iso", "NotificationType", "MibIdentifier", "TimeTicks", "Unsigned32", "IpAddress", "Gauge32", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
icf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14))
hpicfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11))
hpicfSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5))
hpSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1))
hpOpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1))
hpHwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2))
hpDMAStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2))
hpDMAReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpDMAReset.setStatus('mandatory')
hpDMAFrameRcvcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameRcvcnt.setStatus('mandatory')
hpDMAOctetsRcvcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsRcvcnt.setStatus('mandatory')
hpDMAPrevRcvFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevRcvFrames.setStatus('mandatory')
hpDMAFrameRcvPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameRcvPerSec.setStatus('mandatory')
hpDMAPeakRcvFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakRcvFrames.setStatus('mandatory')
hpDMAPrevRcvOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevRcvOctets.setStatus('mandatory')
hpDMAOctetsRcvPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsRcvPerSec.setStatus('mandatory')
hpDMAPeakRcvOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakRcvOctets.setStatus('mandatory')
hpDMAFrameXmtcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameXmtcnt.setStatus('mandatory')
hpDMAOctetsXmtcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsXmtcnt.setStatus('mandatory')
hpDMAPrevXmtFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevXmtFrames.setStatus('mandatory')
hpDMAFrameXmtPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameXmtPerSec.setStatus('mandatory')
hpDMAPeakXmtFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakXmtFrames.setStatus('mandatory')
hpDMAPrevXmtOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevXmtOctets.setStatus('mandatory')
hpDMAOctetsXmtPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsXmtPerSec.setStatus('mandatory')
hpDMAPeakXmtOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakXmtOctets.setStatus('mandatory')
hpDMAFrameClippedcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameClippedcnt.setStatus('mandatory')
hpDMAFrameClippedOccurance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameClippedOccurance.setStatus('mandatory')
hpDMAMissBufCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAMissBufCnt.setStatus('mandatory')
mibBuilder.exportSymbols("NETSWITCH-DMA-MIB", hpDMAPrevRcvFrames=hpDMAPrevRcvFrames, nm=nm, hpicfSwitch=hpicfSwitch, hpOpSystem=hpOpSystem, hpHwSystem=hpHwSystem, hpDMAPrevXmtFrames=hpDMAPrevXmtFrames, hpDMAOctetsRcvcnt=hpDMAOctetsRcvcnt, hpDMAFrameClippedcnt=hpDMAFrameClippedcnt, hpDMAOctetsXmtcnt=hpDMAOctetsXmtcnt, hpDMAOctetsXmtPerSec=hpDMAOctetsXmtPerSec, hpDMAFrameClippedOccurance=hpDMAFrameClippedOccurance, hpDMAOctetsRcvPerSec=hpDMAOctetsRcvPerSec, hpDMAPeakXmtOctets=hpDMAPeakXmtOctets, hp=hp, hpDMAPeakRcvFrames=hpDMAPeakRcvFrames, hpDMAPrevRcvOctets=hpDMAPrevRcvOctets, hpDMAPeakXmtFrames=hpDMAPeakXmtFrames, hpDMAFrameXmtcnt=hpDMAFrameXmtcnt, hpDMAStats=hpDMAStats, hpSwitch=hpSwitch, hpDMAMissBufCnt=hpDMAMissBufCnt, hpicfObjects=hpicfObjects, hpDMAFrameRcvcnt=hpDMAFrameRcvcnt, hpDMAFrameXmtPerSec=hpDMAFrameXmtPerSec, hpDMAPeakRcvOctets=hpDMAPeakRcvOctets, hpDMAReset=hpDMAReset, hpDMAPrevXmtOctets=hpDMAPrevXmtOctets, icf=icf, hpDMAFrameRcvPerSec=hpDMAFrameRcvPerSec)
