#
# PySNMP MIB module HH3C-PORT-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-PORT-SECURITY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cPortSecurity, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cPortSecurity")
dot1xAuthSessionTerminateCause, dot1xAuthSessionUserName, dot1xAuthSessionAuthenticMethod, dot1xPaePortNumber = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xAuthSessionTerminateCause", "dot1xAuthSessionUserName", "dot1xAuthSessionAuthenticMethod", "dot1xPaePortNumber")
ifIndex, ifAdminStatus = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifAdminStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Gauge32, Bits, ObjectIdentity, Counter64, IpAddress, NotificationType, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Gauge32", "Bits", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType", "MibIdentifier", "Counter32")
TruthValue, TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
hh3cPortSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1))
hh3cPortSecurityMIB.setRevisions(('2004-11-24 00:00',))
if mibBuilder.loadTexts: hh3cPortSecurityMIB.setLastUpdated('200411240000Z')
if mibBuilder.loadTexts: hh3cPortSecurityMIB.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cPortSecurityLeaf = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1))
hh3cSecurePortSecurityControl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecurePortSecurityControl.setStatus('current')
hh3cSecurePortVlanMembershipList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cSecurePortVlanMembershipList.setStatus('current')
hh3cSecureRalmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4))
hh3cSecureRalmDefaultSessionTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmDefaultSessionTime.setStatus('current')
hh3cSecureRalmHoldoffTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmHoldoffTime.setStatus('current')
hh3cSecureRalmReauthenticate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmReauthenticate.setStatus('current')
hh3cSecureRalmAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("papUsernameAsMacAddress", 1), ("papUsernameFixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmAuthMode.setStatus('current')
hh3cSecureRalmAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmAuthUsername.setStatus('current')
hh3cSecureRalmAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmAuthPassword.setStatus('current')
hh3cSecureRalmAuthDomain = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmAuthDomain.setStatus('current')
hh3cSecureRalmAuthOfflineTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmAuthOfflineTime.setStatus('current')
hh3cSecureRalmAuthServerTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureRalmAuthServerTimeoutTime.setStatus('current')
hh3cSecureMacControl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureMacControl.setStatus('current')
hh3cPortSecurityTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2))
hh3cSecurePortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cSecurePortTable.setStatus('current')
hh3cSecurePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cSecurePortEntry.setStatus('current')
hh3cSecurePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noRestrictions", 1), ("continuousLearning", 2), ("autoLearn", 3), ("secure", 4), ("userLogin", 5), ("userLoginSecure", 6), ("userLoginWithOUI", 7), ("macAddressWithRadius", 8), ("macAddressOrUserLoginSecure", 9), ("macAddressElseUserLoginSecure", 10), ("userLoginSecureExt", 11), ("macAddressOrUserLoginSecureExt", 12), ("macAddressElseUserLoginSecureExt", 13), ("macAddressAndUserLoginSecure", 14), ("macAddressAndUserLoginSecureExt", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecurePortMode.setStatus('current')
hh3cSecureNeedToKnowMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvailable", 1), ("disabled", 2), ("needToKnowOnly", 3), ("needToKnowWithBroadcastsAllowed", 4), ("needToKnowWithMulticastsAllowed", 5), ("permanentNeedToKnowOnly", 6), ("permanentNeedToKnowWithBroadcastsAllowed", 7), ("permanentNeedToKnowWithMulticastsAllowed", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureNeedToKnowMode.setStatus('current')
hh3cSecureIntrusionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvailable", 1), ("noAction", 2), ("disablePort", 3), ("disablePortTemporarily", 4), ("allowDefaultAccess", 5), ("blockMacAddress", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureIntrusionAction.setStatus('current')
hh3cSecureNumberAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureNumberAddresses.setStatus('current')
hh3cSecureNumberAddressesStored = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSecureNumberAddressesStored.setStatus('current')
hh3cSecureMaximumAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSecureMaximumAddresses.setStatus('current')
hh3cSecureAddressTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cSecureAddressTable.setStatus('current')
hh3cSecureAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), (0, "HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrVlanID"))
if mibBuilder.loadTexts: hh3cSecureAddressEntry.setStatus('current')
hh3cSecureAddrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cSecureAddrMAC.setStatus('current')
hh3cSecureAddrVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureAddrVlanID.setStatus('current')
hh3cSecureAddrMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("addressBlackhole", 1), ("addressUserConfig", 2), ("addressDot1xAuth", 3), ("addressRALM", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureAddrMACStatus.setStatus('current')
hh3cSecureAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureAddrRowStatus.setStatus('current')
hh3cSecureOUITable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cSecureOUITable.setStatus('current')
hh3cSecureOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 3, 1), ).setIndexNames((0, "HH3C-PORT-SECURITY-MIB", "hh3cSecureOUIIndex"))
if mibBuilder.loadTexts: hh3cSecureOUIEntry.setStatus('current')
hh3cSecureOUIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hh3cSecureOUIIndex.setStatus('current')
hh3cSecureOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureOUI.setStatus('current')
hh3cSecureOUIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureOUIRowStatus.setStatus('current')
hh3cSecureBindingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4), )
if mibBuilder.loadTexts: hh3cSecureBindingTable.setStatus('current')
hh3cSecureBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4, 1), ).setIndexNames((0, "HH3C-PORT-SECURITY-MIB", "hh3cSecureBindingIndex"))
if mibBuilder.loadTexts: hh3cSecureBindingEntry.setStatus('current')
hh3cSecureBindingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cSecureBindingIndex.setStatus('current')
hh3cSecureBindingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureBindingPort.setStatus('current')
hh3cSecureBindingAddrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureBindingAddrMAC.setStatus('current')
hh3cSecureBindingAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureBindingAddrIp.setStatus('current')
hh3cSecureBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSecureBindingRowStatus.setStatus('current')
hh3cSecureAssignTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 5), )
if mibBuilder.loadTexts: hh3cSecureAssignTable.setStatus('current')
hh3cSecureAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cSecureAssignEntry.setStatus('current')
hh3cSecureAssignEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSecureAssignEnable.setStatus('current')
hh3cSecureVlanAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSecureVlanAssignment.setStatus('current')
hh3cPortSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3))
hh3cSecureAddressLearned = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 1)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"))
if mibBuilder.loadTexts: hh3cSecureAddressLearned.setStatus('current')
hh3cSecureViolation = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 2)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: hh3cSecureViolation.setStatus('current')
hh3cSecureLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 3)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"))
if mibBuilder.loadTexts: hh3cSecureLoginFailure.setStatus('current')
hh3cSecureLogon = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 4)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionAuthenticMethod"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hh3cSecureLogon.setStatus('current')
hh3cSecureLogoff = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 5)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionUserName"), ("IEEE8021-PAE-MIB", "dot1xAuthSessionTerminateCause"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hh3cSecureLogoff.setStatus('current')
hh3cSecureRalmLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 6)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureRalmAuthMode"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureRalmAuthUsername"))
if mibBuilder.loadTexts: hh3cSecureRalmLoginFailure.setStatus('current')
hh3cSecureRalmLogon = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 7)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureRalmAuthMode"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureRalmAuthUsername"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hh3cSecureRalmLogon.setStatus('current')
hh3cSecureRalmLogoff = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 26, 1, 3, 8)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureAddrMAC"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureRalmAuthMode"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecureRalmAuthUsername"), ("HH3C-PORT-SECURITY-MIB", "hh3cSecurePortVlanMembershipList"))
if mibBuilder.loadTexts: hh3cSecureRalmLogoff.setStatus('current')
mibBuilder.exportSymbols("HH3C-PORT-SECURITY-MIB", hh3cSecurePortVlanMembershipList=hh3cSecurePortVlanMembershipList, hh3cSecureRalmObjects=hh3cSecureRalmObjects, hh3cSecureAddressEntry=hh3cSecureAddressEntry, hh3cSecureRalmLogon=hh3cSecureRalmLogon, hh3cSecureOUIIndex=hh3cSecureOUIIndex, hh3cSecureAddrVlanID=hh3cSecureAddrVlanID, hh3cSecureRalmDefaultSessionTime=hh3cSecureRalmDefaultSessionTime, hh3cSecureRalmReauthenticate=hh3cSecureRalmReauthenticate, hh3cSecureRalmHoldoffTime=hh3cSecureRalmHoldoffTime, hh3cSecureViolation=hh3cSecureViolation, hh3cSecureLoginFailure=hh3cSecureLoginFailure, hh3cSecureRalmAuthOfflineTime=hh3cSecureRalmAuthOfflineTime, hh3cSecureRalmLoginFailure=hh3cSecureRalmLoginFailure, hh3cSecureRalmAuthPassword=hh3cSecureRalmAuthPassword, hh3cSecureAssignEnable=hh3cSecureAssignEnable, hh3cSecureBindingAddrIp=hh3cSecureBindingAddrIp, hh3cSecureAssignEntry=hh3cSecureAssignEntry, hh3cSecureAddrMAC=hh3cSecureAddrMAC, hh3cSecureBindingTable=hh3cSecureBindingTable, hh3cSecureVlanAssignment=hh3cSecureVlanAssignment, PYSNMP_MODULE_ID=hh3cPortSecurityMIB, hh3cSecureLogon=hh3cSecureLogon, hh3cSecureNumberAddressesStored=hh3cSecureNumberAddressesStored, hh3cSecureMaximumAddresses=hh3cSecureMaximumAddresses, hh3cSecureAssignTable=hh3cSecureAssignTable, hh3cSecurePortMode=hh3cSecurePortMode, hh3cSecureOUIEntry=hh3cSecureOUIEntry, hh3cPortSecurityTables=hh3cPortSecurityTables, hh3cSecureAddrRowStatus=hh3cSecureAddrRowStatus, hh3cSecurePortTable=hh3cSecurePortTable, hh3cSecureIntrusionAction=hh3cSecureIntrusionAction, hh3cSecurePortSecurityControl=hh3cSecurePortSecurityControl, hh3cSecureNeedToKnowMode=hh3cSecureNeedToKnowMode, hh3cPortSecurityNotifications=hh3cPortSecurityNotifications, hh3cSecureBindingPort=hh3cSecureBindingPort, hh3cSecureRalmAuthUsername=hh3cSecureRalmAuthUsername, hh3cSecureRalmLogoff=hh3cSecureRalmLogoff, hh3cSecureAddrMACStatus=hh3cSecureAddrMACStatus, hh3cSecureBindingIndex=hh3cSecureBindingIndex, hh3cSecureAddressLearned=hh3cSecureAddressLearned, hh3cSecurePortEntry=hh3cSecurePortEntry, hh3cSecureBindingEntry=hh3cSecureBindingEntry, hh3cSecureRalmAuthServerTimeoutTime=hh3cSecureRalmAuthServerTimeoutTime, hh3cSecureNumberAddresses=hh3cSecureNumberAddresses, hh3cSecureOUITable=hh3cSecureOUITable, hh3cSecureBindingAddrMAC=hh3cSecureBindingAddrMAC, hh3cSecureMacControl=hh3cSecureMacControl, hh3cSecureOUIRowStatus=hh3cSecureOUIRowStatus, hh3cSecureRalmAuthMode=hh3cSecureRalmAuthMode, hh3cSecureOUI=hh3cSecureOUI, hh3cSecureBindingRowStatus=hh3cSecureBindingRowStatus, hh3cSecureLogoff=hh3cSecureLogoff, hh3cPortSecurityLeaf=hh3cPortSecurityLeaf, hh3cSecureRalmAuthDomain=hh3cSecureRalmAuthDomain, hh3cSecureAddressTable=hh3cSecureAddressTable, hh3cPortSecurityMIB=hh3cPortSecurityMIB)
