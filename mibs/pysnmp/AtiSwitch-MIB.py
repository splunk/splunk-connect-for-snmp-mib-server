#
# PySNMP MIB module AtiSwitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AtiSwitch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, iso, Unsigned32, MibIdentifier, Counter32, enterprises, Bits, IpAddress, NotificationType, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "iso", "Unsigned32", "MibIdentifier", "Counter32", "enterprises", "Bits", "IpAddress", "NotificationType", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atiSwitchMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 15))
if mibBuilder.loadTexts: atiSwitchMib.setLastUpdated('0205010000Z')
if mibBuilder.loadTexts: atiSwitchMib.setOrganization('Allied Telesyn International')
class MACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

atiProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
swhub = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4))
at_8024 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 66)).setLabel("at-8024")
at_8024GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 67)).setLabel("at-8024GB")
at_8024M = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 78)).setLabel("at-8024M")
at_8016F_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 79)).setLabel("at-8016F-SC")
at_8026FC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 80)).setLabel("at-8026FC")
at_8016F_MT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 82)).setLabel("at-8016F-MT")
at_8012M = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 86)).setLabel("at-8012M")
at_8088_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 87)).setLabel("at-8088-SC")
at_8088_MT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 88)).setLabel("at-8088-MT")
at_8026T = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 89)).setLabel("at-8026T")
atiswitchSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1))
atiswitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 2))
atiswitchPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 3))
atiswitchVlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 4))
atiswitchEthernetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 5))
atiswitchEthPortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 6))
atiswitchFwdVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 7))
atiswitchStaticMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 8))
atiswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 9))
atiswitchProductType = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20))).clone(namedValues=NamedValues(("at8024", 1), ("at8024GB", 2), ("at8024M", 3), ("at8016F-SC", 4), ("at8016F-MT", 5), ("at8026FC", 6), ("at8012M", 7), ("at8088-SC", 8), ("at8088-MT", 9), ("at8026T", 10), ("other", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchProductType.setStatus('current')
atiswitchBasePortCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchBasePortCount.setStatus('current')
atiswitchUplinkPortCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchUplinkPortCount.setStatus('current')
atiswitchReset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchnoreset", 1), ("switchreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchReset.setStatus('current')
atiswitchUplink1Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchUplink1Type.setStatus('current')
atiswitchUplink2Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchUplink2Type.setStatus('current')
atiswitchSwGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 7))
atiswitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8))
atiswitchNMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9))
atiswitchSw = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchSw.setStatus('current')
atiswitchSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchSwVersion.setStatus('current')
atiswitchConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchConfigIpAddress.setStatus('current')
atiswitchConfigSubMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchConfigSubMask.setStatus('current')
atiswitchConfigRouting = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchConfigRouting.setStatus('current')
atiswitchIPAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromDhcp", 1), ("fromBootp", 2), ("fromStatic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchIPAddressStatus.setStatus('current')
atiswitchDNServer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchDNServer.setStatus('current')
atiswitchDefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchDefaultDomainName.setStatus('current')
atiswitchNwMgrTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1), )
if mibBuilder.loadTexts: atiswitchNwMgrTable.setStatus('current')
atiswitchNwMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchNwMgrIndex"))
if mibBuilder.loadTexts: atiswitchNwMgrEntry.setStatus('current')
atiswitchNwMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchNwMgrIndex.setStatus('current')
atiswitchNwMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchNwMgrIpAddr.setStatus('current')
atiswitchMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2), ("both", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchMirrorState.setStatus('current')
atiswitchMirroringSourcePorts = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchMirroringSourcePorts.setStatus('current')
atiswitchMirroringDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchMirroringDestinationPort.setStatus('current')
atiswitchSecurityConfig = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledLearningLocked", 2), ("enabledLimited", 3), ("enabledSecured", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchSecurityConfig.setStatus('current')
atiswitchSecurityAction = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sendTrapOnly", 1), ("disablePortOnly", 2), ("disablePortAndSendTrap", 3), ("doNothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchSecurityAction.setStatus('current')
atiswitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1), )
if mibBuilder.loadTexts: atiswitchPortTable.setStatus('current')
atiswitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchPortNumber"))
if mibBuilder.loadTexts: atiswitchPortEntry.setStatus('current')
atiswitchPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortNumber.setStatus('current')
atiswitchPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortName.setStatus('current')
atiswitchPortAutosenseOrHalfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portAutoSense", 1), ("forceHalfDuplex-10M", 2), ("forceHalfDuplex-100M", 3), ("forceFullDuplex-10M", 4), ("forceFullDuplex-100M", 5), ("forceHalfDuplex-1G", 6), ("forceFullDuplex-1G", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortAutosenseOrHalfDuplex.setStatus('current')
atiswitchPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortLinkState.setStatus('current')
atiswitchPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autosense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortDuplexStatus.setStatus('current')
atiswitchPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMBits", 1), ("hundredMBits", 2), ("gigaBits", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortSpeed.setStatus('current')
atiswitchPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortState.setStatus('current')
atiswitchPortFlowControlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("transmit-only", 2), ("receive-only", 3), ("transmit-and-receive", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortFlowControlConfig.setStatus('current')
atiswitchPortBackPressureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortBackPressureConfig.setStatus('current')
atiswitchPortVlanTagPriorityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use-vlan-priority", 1), ("override-vlan-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortVlanTagPriorityConfig.setStatus('current')
atiswitchPortCOSPriorityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortCOSPriorityConfig.setStatus('current')
atiswitchPortBroadcastConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard-broadcasts", 1), ("do-not-discard-broadcasts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortBroadcastConfig.setStatus('current')
atiswitchPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("no-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortReset.setStatus('current')
atiswitchBasicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1), )
if mibBuilder.loadTexts: atiswitchBasicVlanTable.setStatus('current')
atiswitchBasicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchBeVlanIndex"))
if mibBuilder.loadTexts: atiswitchBasicVlanEntry.setStatus('current')
atiswitchBeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchBeVlanIndex.setStatus('current')
atiswitchBeVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanName.setStatus('current')
atiswitchBeVlanTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanTagId.setStatus('current')
atiswitchBeVlanTaggedPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanTaggedPortMask.setStatus('current')
atiswitchBeVlanUntaggedPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanUntaggedPortMask.setStatus('current')
atiswitchBeVlanMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanMirrorPort.setStatus('current')
atiswitchBeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanRowStatus.setStatus('current')
atiswitchPort2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2), )
if mibBuilder.loadTexts: atiswitchPort2VlanTable.setStatus('current')
atiswitchPort2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchPvPortNumber"))
if mibBuilder.loadTexts: atiswitchPort2VlanEntry.setStatus('current')
atiswitchPvPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPvPortNumber.setStatus('current')
atiswitchPvVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPvVlanName.setStatus('current')
atiswitchVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-configured", 1), ("multiple", 2), ("multiple-802-1Q", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchVlanMode.setStatus('current')
atiswitchVlanUplinkVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchVlanUplinkVlanPort.setStatus('current')
atiswitchEthMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1))
atiswitchEthErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2))
atiswitchEthMonRxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonRxGoodFrames.setStatus('current')
atiswitchEthMonTxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxGoodFrames.setStatus('current')
atiswitchEthMonTxTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxTotalBytes.setStatus('current')
atiswitchEthMonTxDeferred = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxDeferred.setStatus('current')
atiswitchEthMonTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxCollisions.setStatus('current')
atiswitchEthMonTxBroadcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxBroadcastFrames.setStatus('current')
atiswitchEthMonTxMulticastFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxMulticastFrames.setStatus('current')
atiswitchEthMonRxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonRxOverruns.setStatus('current')
atiswitchEthErrorCRC = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorCRC.setStatus('current')
atiswitchEthErrorAlignment = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorAlignment.setStatus('current')
atiswitchEthErrorRxBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorRxBadFrames.setStatus('current')
atiswitchEthErrorLateCollision = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorLateCollision.setStatus('current')
atiswitchEthErrorTxTotal = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorTxTotal.setStatus('current')
atiswitchEthPortMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1))
atiswitchEthPortError = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2))
atiswitchEthPortMonTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1), )
if mibBuilder.loadTexts: atiswitchEthPortMonTable.setStatus('current')
atiswitchEthPortMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchEthPortMonId"))
if mibBuilder.loadTexts: atiswitchEthPortMonEntry.setStatus('current')
atiswitchEthPortMonId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonId.setStatus('current')
atiswitchEthPortMonRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonRxGoodFrames.setStatus('current')
atiswitchEthPortMonTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxGoodFrames.setStatus('current')
atiswitchEthPortMonTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxTotalBytes.setStatus('current')
atiswitchEthPortMonTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxDeferred.setStatus('current')
atiswitchEthPortMonTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxCollisions.setStatus('current')
atiswitchEthPortMonTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxBroadcastFrames.setStatus('current')
atiswitchEthPortMonTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxMulticastFrames.setStatus('current')
atiswitchEthPortMonRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonRxOverruns.setStatus('current')
atiswitchEthPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1), )
if mibBuilder.loadTexts: atiswitchEthPortErrorTable.setStatus('current')
atiswitchEthPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchEthPortErrorId"))
if mibBuilder.loadTexts: atiswitchEthPortErrorEntry.setStatus('current')
atiswitchEthPortErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortErrorId.setStatus('current')
atiswitchEthPortErrorRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortErrorRxBadFrames.setStatus('current')
atiswitchEthPortErrorTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortErrorTxTotal.setStatus('current')
atiswitchFwdVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1), )
if mibBuilder.loadTexts: atiswitchFwdVlanTable.setStatus('current')
atiswitchFwdVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchFwdVlanMACAddr"))
if mibBuilder.loadTexts: atiswitchFwdVlanEntry.setStatus('current')
atiswitchFwdVlanMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 1), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanMACAddr.setStatus('current')
atiswitchFwdVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanVlanId.setStatus('current')
atiswitchFwdVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanAge.setStatus('current')
atiswitchFwdVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanStatus.setStatus('current')
atiswitchFwdVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanPort.setStatus('current')
atiswitchStaticMACTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1), )
if mibBuilder.loadTexts: atiswitchStaticMACTable.setStatus('current')
atiswitchStaticMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchStaticMACAddress"))
if mibBuilder.loadTexts: atiswitchStaticMACEntry.setStatus('current')
atiswitchStaticMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1, 1), MACAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchStaticMACAddress.setStatus('current')
atiswitchStaticMACPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchStaticMACPortNumber.setStatus('current')
atiswitchStaticMACEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchStaticMACEntryStatus.setStatus('current')
atiswitchFanStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 15, 9, 1))
if mibBuilder.loadTexts: atiswitchFanStopTrap.setStatus('current')
atiswitchTemperatureAbnormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 15, 9, 2))
if mibBuilder.loadTexts: atiswitchTemperatureAbnormalTrap.setStatus('current')
mibBuilder.exportSymbols("AtiSwitch-MIB", atiswitchPortEntry=atiswitchPortEntry, atiswitchEthPortErrorId=atiswitchEthPortErrorId, atiswitchPort2VlanEntry=atiswitchPort2VlanEntry, atiswitchEthPortErrorRxBadFrames=atiswitchEthPortErrorRxBadFrames, atiswitchSysGroup=atiswitchSysGroup, atiswitchEthMonStats=atiswitchEthMonStats, atiswitchFwdVlanTable=atiswitchFwdVlanTable, atiswitchEthMonTxTotalBytes=atiswitchEthMonTxTotalBytes, atiswitchPortVlanTagPriorityConfig=atiswitchPortVlanTagPriorityConfig, atiswitchEthMonRxGoodFrames=atiswitchEthMonRxGoodFrames, atiswitchBasePortCount=atiswitchBasePortCount, atiswitchPvVlanName=atiswitchPvVlanName, atiswitchEthErrorLateCollision=atiswitchEthErrorLateCollision, PYSNMP_MODULE_ID=atiSwitchMib, atiswitchSecurityAction=atiswitchSecurityAction, atiswitchStaticMACEntryStatus=atiswitchStaticMACEntryStatus, atiswitchEthErrorStats=atiswitchEthErrorStats, atiswitchFwdVlanStatus=atiswitchFwdVlanStatus, atiswitchPortNumber=atiswitchPortNumber, atiswitchProductType=atiswitchProductType, atiswitchEthMonRxOverruns=atiswitchEthMonRxOverruns, atiswitchEthErrorCRC=atiswitchEthErrorCRC, atiswitchEthPortErrorEntry=atiswitchEthPortErrorEntry, atiswitchEthMonTxBroadcastFrames=atiswitchEthMonTxBroadcastFrames, atiswitchEthPortErrorTxTotal=atiswitchEthPortErrorTxTotal, atiswitchNwMgrTable=atiswitchNwMgrTable, atiswitchVlanMode=atiswitchVlanMode, at_8026FC=at_8026FC, atiswitchEthErrorRxBadFrames=atiswitchEthErrorRxBadFrames, atiswitchEthErrorAlignment=atiswitchEthErrorAlignment, atiswitchUplinkPortCount=atiswitchUplinkPortCount, atiswitchConfigSubMask=atiswitchConfigSubMask, atiswitchFwdVlanEntry=atiswitchFwdVlanEntry, atiswitchEthPortMonTxBroadcastFrames=atiswitchEthPortMonTxBroadcastFrames, atiswitchEthPortMonTxCollisions=atiswitchEthPortMonTxCollisions, atiswitchEthPortStatsGroup=atiswitchEthPortStatsGroup, atiswitchVlanConfigGroup=atiswitchVlanConfigGroup, atiswitchPortFlowControlConfig=atiswitchPortFlowControlConfig, atiswitchEthPortMonTxDeferred=atiswitchEthPortMonTxDeferred, atiProduct=atiProduct, atiswitchDefaultDomainName=atiswitchDefaultDomainName, atiswitchPortCOSPriorityConfig=atiswitchPortCOSPriorityConfig, atiswitchEthPortMonStats=atiswitchEthPortMonStats, atiswitchEthMonTxGoodFrames=atiswitchEthMonTxGoodFrames, atiswitchEthPortMonRxOverruns=atiswitchEthPortMonRxOverruns, atiswitchPortGroup=atiswitchPortGroup, atiswitchBeVlanTagId=atiswitchBeVlanTagId, atiswitchEthPortMonTxMulticastFrames=atiswitchEthPortMonTxMulticastFrames, atiswitchBasicVlanTable=atiswitchBasicVlanTable, atiswitchPort2VlanTable=atiswitchPort2VlanTable, atiswitchPortSpeed=atiswitchPortSpeed, atiswitchStaticMACPortNumber=atiswitchStaticMACPortNumber, atiswitchConfigIpAddress=atiswitchConfigIpAddress, atiswitchPortBackPressureConfig=atiswitchPortBackPressureConfig, atiswitchEthErrorTxTotal=atiswitchEthErrorTxTotal, atiswitchMirrorState=atiswitchMirrorState, atiswitchMirroringDestinationPort=atiswitchMirroringDestinationPort, atiswitchBeVlanMirrorPort=atiswitchBeVlanMirrorPort, atiswitchBeVlanIndex=atiswitchBeVlanIndex, atiswitchConfigGroup=atiswitchConfigGroup, atiswitchEthPortMonTxGoodFrames=atiswitchEthPortMonTxGoodFrames, atiswitchPortState=atiswitchPortState, atiswitchReset=atiswitchReset, atiswitchPortTable=atiswitchPortTable, atiswitchBeVlanName=atiswitchBeVlanName, atiswitchIPAddressStatus=atiswitchIPAddressStatus, atiswitchSecurityConfig=atiswitchSecurityConfig, atiswitchPortReset=atiswitchPortReset, atiswitchNwMgrIpAddr=atiswitchNwMgrIpAddr, atiswitchMirroringSourcePorts=atiswitchMirroringSourcePorts, Timeout=Timeout, atiswitchEthernetStatsGroup=atiswitchEthernetStatsGroup, atiswitchTraps=atiswitchTraps, BridgeId=BridgeId, mibObject=mibObject, atiswitchEthMonTxDeferred=atiswitchEthMonTxDeferred, atiswitchConfigRouting=atiswitchConfigRouting, atiswitchEthPortMonTable=atiswitchEthPortMonTable, at_8088_SC=at_8088_SC, atiswitchStaticMACAddress=atiswitchStaticMACAddress, at_8012M=at_8012M, at_8024=at_8024, atiswitchEthMonTxMulticastFrames=atiswitchEthMonTxMulticastFrames, atiswitchEthPortErrorTable=atiswitchEthPortErrorTable, atiswitchFanStopTrap=atiswitchFanStopTrap, swhub=swhub, atiswitchBeVlanRowStatus=atiswitchBeVlanRowStatus, atiswitchFwdVlanMACAddr=atiswitchFwdVlanMACAddr, atiswitchEthMonTxCollisions=atiswitchEthMonTxCollisions, atiswitchPortLinkState=atiswitchPortLinkState, alliedTelesyn=alliedTelesyn, atiswitchVlanUplinkVlanPort=atiswitchVlanUplinkVlanPort, atiswitchEthPortMonId=atiswitchEthPortMonId, atiswitchNwMgrIndex=atiswitchNwMgrIndex, atiswitchSwVersion=atiswitchSwVersion, atiswitchPvPortNumber=atiswitchPvPortNumber, atiswitchTemperatureAbnormalTrap=atiswitchTemperatureAbnormalTrap, atiswitchPortBroadcastConfig=atiswitchPortBroadcastConfig, atiswitchUplink2Type=atiswitchUplink2Type, atiswitchSwGroup=atiswitchSwGroup, atiswitchNwMgrEntry=atiswitchNwMgrEntry, atiswitchPortAutosenseOrHalfDuplex=atiswitchPortAutosenseOrHalfDuplex, atiswitchDNServer=atiswitchDNServer, atiswitchUplink1Type=atiswitchUplink1Type, atiswitchFwdVlanPort=atiswitchFwdVlanPort, at_8088_MT=at_8088_MT, atiswitchFwdVlanAge=atiswitchFwdVlanAge, atiswitchStaticMACTable=atiswitchStaticMACTable, at_8026T=at_8026T, atiswitchEthPortMonEntry=atiswitchEthPortMonEntry, atiswitchBasicVlanEntry=atiswitchBasicVlanEntry, atiswitchPortDuplexStatus=atiswitchPortDuplexStatus, MACAddress=MACAddress, atiswitchFwdVlanGroup=atiswitchFwdVlanGroup, at_8016F_SC=at_8016F_SC, atiswitchSw=atiswitchSw, atiswitchIpGroup=atiswitchIpGroup, atiSwitchMib=atiSwitchMib, atiswitchStaticMACEntry=atiswitchStaticMACEntry, atiswitchStaticMACGroup=atiswitchStaticMACGroup, atiswitchPortName=atiswitchPortName, atiswitchNMGroup=atiswitchNMGroup, atiswitchFwdVlanVlanId=atiswitchFwdVlanVlanId, atiswitchBeVlanTaggedPortMask=atiswitchBeVlanTaggedPortMask, at_8016F_MT=at_8016F_MT, atiswitchBeVlanUntaggedPortMask=atiswitchBeVlanUntaggedPortMask, atiswitchEthPortMonTxTotalBytes=atiswitchEthPortMonTxTotalBytes, at_8024M=at_8024M, at_8024GB=at_8024GB, atiswitchEthPortMonRxGoodFrames=atiswitchEthPortMonRxGoodFrames, atiswitchEthPortError=atiswitchEthPortError)
