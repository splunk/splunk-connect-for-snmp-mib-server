#
# PySNMP MIB module CTRON-ISDN-CONFIGURATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-ISDN-CONFIGURATION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:14:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, NotificationType, Unsigned32, Counter64, TimeTicks, Gauge32, Counter32, ObjectIdentity, MibIdentifier, iso, ModuleIdentity, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "NotificationType", "Unsigned32", "Counter64", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "MibIdentifier", "iso", "ModuleIdentity", "Integer32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctron = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1))
ctDataLink = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2))
ctronWan = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7))
ctISDNconfigMib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4))
ctISDNcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1))
isdnDchTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1), )
if mibBuilder.loadTexts: isdnDchTable.setStatus('mandatory')
isdnDchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-ISDN-CONFIGURATION-MIB", "isdnDchIndex"))
if mibBuilder.loadTexts: isdnDchEntry.setStatus('mandatory')
isdnDchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDchIndex.setStatus('mandatory')
isdnDchRateAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("bri1", 2), ("pri1", 3), ("pri2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDchRateAccess.setStatus('mandatory')
isdnDchAllowedCh = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDchAllowedCh.setStatus('mandatory')
isdnDchChInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDchChInUse.setStatus('mandatory')
isdnDchSupportedSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 10, 16, 17))).clone(namedValues=NamedValues(("bri5ESS", 2), ("bridms100", 5), ("brini1", 10), ("pri4ESS", 16), ("pri5ESS", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDchSupportedSwitches.setStatus('mandatory')
isdnDchSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 10, 16, 17))).clone(namedValues=NamedValues(("bri5ESS", 2), ("bridms100", 5), ("brini1", 10), ("pri4ESS", 16), ("pri5ESS", 17))).clone('brini1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchSwitchType.setStatus('mandatory')
isdnDchSPID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchSPID1.setStatus('mandatory')
isdnDchSPID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchSPID2.setStatus('mandatory')
isdnDchDirNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchDirNum1.setStatus('mandatory')
isdnDchDirNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchDirNum2.setStatus('mandatory')
isdnDchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnDchOperStatus.setStatus('mandatory')
dialCtlNbrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2), )
if mibBuilder.loadTexts: dialCtlNbrCfgTable.setStatus('mandatory')
dialCtlNbrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2, 1), ).setIndexNames((0, "CTRON-ISDN-CONFIGURATION-MIB", "dialCtlNbrCfgId"), (0, "CTRON-ISDN-CONFIGURATION-MIB", "dialCtlNbrCfgIndex"))
if mibBuilder.loadTexts: dialCtlNbrCfgEntry.setStatus('mandatory')
dialCtlNbrCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlNbrCfgId.setStatus('mandatory')
dialCtlNbrCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlNbrCfgIndex.setStatus('mandatory')
dialCtlNbrCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlNbrCfgIfIndex.setStatus('mandatory')
dialCtlNbrCfgOriginateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialCtlNbrCfgOriginateAddress.setStatus('mandatory')
dialCtlNbrCfgAnswerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialCtlNbrCfgAnswerAddress.setStatus('mandatory')
rmtProfileTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3), )
if mibBuilder.loadTexts: rmtProfileTable.setStatus('mandatory')
rmtProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1), ).setIndexNames((0, "CTRON-ISDN-CONFIGURATION-MIB", "rmtProfileEntryIndex"))
if mibBuilder.loadTexts: rmtProfileEntry.setStatus('mandatory')
rmtProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtProfileEntryIndex.setStatus('mandatory')
rmtProfileEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryName.setStatus('mandatory')
rmtProfileEntryMakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMakerName.setStatus('mandatory')
rmtProfileEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("hangup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryAction.setStatus('mandatory')
rmtProfileEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("calling", 2), ("ringing", 3), ("connected", 4), ("answering", 5), ("answered", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtProfileEntryState.setStatus('mandatory')
rmtProfileEntryMaxNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 6), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtProfileEntryMaxNeighbor.setStatus('mandatory')
rmtProfileEntryBchInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtProfileEntryBchInUse.setStatus('mandatory')
rmtProfileEntryLinkHead = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtProfileEntryLinkHead.setStatus('mandatory')
rmtProfileEntryNextLink = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtProfileEntryNextLink.setStatus('mandatory')
rmtProfileEntryMpCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpCapable.setStatus('mandatory')
rmtProfileEntryMpLineUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpLineUtilization.setStatus('mandatory')
rmtProfileEntryMpHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpHistoryTime.setStatus('mandatory')
rmtProfileEntryMpMoreBWSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpMoreBWSamples.setStatus('mandatory')
rmtProfileEntryMpLessBWSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpLessBWSamples.setStatus('mandatory')
rmtProfileEntryMpMaxCallsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpMaxCallsAllowed.setStatus('mandatory')
rmtProfileEntryMpCallsToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpCallsToAdd.setStatus('mandatory')
rmtProfileEntryMpCallsToRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpCallsToRemove.setStatus('mandatory')
rmtProfileEntryMpAvgPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpAvgPktSize.setStatus('mandatory')
rmtProfileEntryMpRmtBwCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtProfileEntryMpRmtBwCtrl.setStatus('mandatory')
callHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2))
callHistoryTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 1), Integer32().clone(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryTableMaxLength.setStatus('mandatory')
callHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2), )
if mibBuilder.loadTexts: callHistoryTable.setStatus('mandatory')
callHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1), ).setIndexNames((0, "CTRON-ISDN-CONFIGURATION-MIB", "callHistoryIndex"))
if mibBuilder.loadTexts: callHistoryEntry.setStatus('mandatory')
callHistorySetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistorySetupTime.setStatus('mandatory')
callHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryIndex.setStatus('mandatory')
callHistoryPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryPeerAddress.setStatus('mandatory')
callHistoryNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryNeighborId.setStatus('mandatory')
callHistoryLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryLogicalIfIndex.setStatus('mandatory')
callHistoryDisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 16, 17, 18, 21, 22, 28, 31, 34, 38, 41, 42, 43, 44, 52, 54, 58, 63, 65, 66, 70, 79, 81, 82, 85, 88, 90, 91, 95, 96, 97, 98, 99, 100, 111, 133, 134, 135, 136, 138))).clone(namedValues=NamedValues(("unassignedNumber", 1), ("noRouteToDestination", 2), ("channelUnacceptable", 6), ("normalCallClearing", 16), ("userBusy", 17), ("noUserResponding", 18), ("callRejected", 21), ("numberChangedAddress", 22), ("invalidNumberFormat", 28), ("normalUnspecified", 31), ("noChannelAvailable", 34), ("networkOutOfOrder", 38), ("temporaryFailure", 41), ("switchingEquipmentCongestion", 42), ("userInfoDiscarded", 43), ("requestedChannelNotAvailable", 44), ("outgoingCallsBarred", 52), ("incomingCallsBarred", 54), ("bearerCapabilityNotPresentlyAvail", 58), ("serviceNotAvailable", 63), ("bearerServiceNotImplemented", 65), ("channelTypeNotImplemented", 66), ("onlyRestrictedChannelAvailable", 70), ("serviceOrOptionNotImplemeted", 79), ("invalidCallReferenceValue", 81), ("identifiedChannelDoesNotExist", 82), ("invalidDigitValueForAddress", 85), ("incompatibleDestination", 88), ("destinationAddressMissing", 90), ("transitNetworkDoesNotExist", 91), ("invalidMessageSpecified", 95), ("mandatoryIEmissing", 96), ("messageTypeNonexistentOrNotImplemented", 97), ("messageNotCompatibleWithCallState", 98), ("iEnotImplemented", 99), ("invalidIEcontents", 100), ("protocolError", 111), ("callAlreadyActive", 133), ("lineDisabled", 134), ("badParameter", 135), ("timeoutOccured", 136), ("noCallActive", 138)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryDisconnectCause.setStatus('mandatory')
callHistoryConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryConnectTime.setStatus('mandatory')
callHistoryDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryDisconnectTime.setStatus('mandatory')
callHistoryCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryCallOrigin.setStatus('mandatory')
callHistoryInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryInfoType.setStatus('mandatory')
callHistoryTransmitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryTransmitPackets.setStatus('mandatory')
callHistoryTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryTransmitBytes.setStatus('mandatory')
callHistoryReceivePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryReceivePackets.setStatus('mandatory')
callHistoryReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 4, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryReceiveBytes.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-ISDN-CONFIGURATION-MIB", callHistoryDisconnectTime=callHistoryDisconnectTime, callHistoryDisconnectCause=callHistoryDisconnectCause, rmtProfileEntryNextLink=rmtProfileEntryNextLink, callHistoryPeerAddress=callHistoryPeerAddress, isdnDchSupportedSwitches=isdnDchSupportedSwitches, rmtProfileEntry=rmtProfileEntry, callHistoryTable=callHistoryTable, callHistoryConnectTime=callHistoryConnectTime, isdnDchSPID1=isdnDchSPID1, rmtProfileEntryIndex=rmtProfileEntryIndex, callHistoryNeighborId=callHistoryNeighborId, dialCtlNbrCfgAnswerAddress=dialCtlNbrCfgAnswerAddress, rmtProfileEntryMpCallsToRemove=rmtProfileEntryMpCallsToRemove, callHistoryLogicalIfIndex=callHistoryLogicalIfIndex, isdnDchDirNum2=isdnDchDirNum2, rmtProfileTable=rmtProfileTable, rmtProfileEntryMpMoreBWSamples=rmtProfileEntryMpMoreBWSamples, callHistoryInfoType=callHistoryInfoType, isdnDchSwitchType=isdnDchSwitchType, rmtProfileEntryState=rmtProfileEntryState, isdnDchOperStatus=isdnDchOperStatus, rmtProfileEntryMpCapable=rmtProfileEntryMpCapable, rmtProfileEntryMpLessBWSamples=rmtProfileEntryMpLessBWSamples, rmtProfileEntryMpHistoryTime=rmtProfileEntryMpHistoryTime, rmtProfileEntryMpLineUtilization=rmtProfileEntryMpLineUtilization, rmtProfileEntryMakerName=rmtProfileEntryMakerName, cabletron=cabletron, callHistoryTransmitBytes=callHistoryTransmitBytes, isdnDchChInUse=isdnDchChInUse, isdnDchDirNum1=isdnDchDirNum1, dialCtlNbrCfgTable=dialCtlNbrCfgTable, callHistory=callHistory, callHistoryEntry=callHistoryEntry, ctron=ctron, dialCtlNbrCfgOriginateAddress=dialCtlNbrCfgOriginateAddress, rmtProfileEntryMpRmtBwCtrl=rmtProfileEntryMpRmtBwCtrl, rmtProfileEntryName=rmtProfileEntryName, dialCtlNbrCfgId=dialCtlNbrCfgId, dialCtlNbrCfgEntry=dialCtlNbrCfgEntry, rmtProfileEntryBchInUse=rmtProfileEntryBchInUse, rmtProfileEntryMpAvgPktSize=rmtProfileEntryMpAvgPktSize, callHistoryReceivePackets=callHistoryReceivePackets, ctISDNcontrol=ctISDNcontrol, ctISDNconfigMib=ctISDNconfigMib, callHistorySetupTime=callHistorySetupTime, callHistoryCallOrigin=callHistoryCallOrigin, DisplayString=DisplayString, callHistoryTransmitPackets=callHistoryTransmitPackets, callHistoryTableMaxLength=callHistoryTableMaxLength, isdnDchAllowedCh=isdnDchAllowedCh, isdnDchIndex=isdnDchIndex, dialCtlNbrCfgIndex=dialCtlNbrCfgIndex, isdnDchSPID2=isdnDchSPID2, mibs=mibs, callHistoryReceiveBytes=callHistoryReceiveBytes, ctronWan=ctronWan, isdnDchEntry=isdnDchEntry, dialCtlNbrCfgIfIndex=dialCtlNbrCfgIfIndex, rmtProfileEntryAction=rmtProfileEntryAction, ctDataLink=ctDataLink, rmtProfileEntryLinkHead=rmtProfileEntryLinkHead, rmtProfileEntryMpMaxCallsAllowed=rmtProfileEntryMpMaxCallsAllowed, isdnDchTable=isdnDchTable, rmtProfileEntryMpCallsToAdd=rmtProfileEntryMpCallsToAdd, rmtProfileEntryMaxNeighbor=rmtProfileEntryMaxNeighbor, callHistoryIndex=callHistoryIndex, isdnDchRateAccess=isdnDchRateAccess)
