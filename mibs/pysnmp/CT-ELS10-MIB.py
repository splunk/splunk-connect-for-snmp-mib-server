#
# PySNMP MIB module CT-ELS10-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-ELS10-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:13:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
dot1dStpDesignatedRoot, dot1dStpPortState, dot1dStpPortDesignatedRoot, dot1dStpPortDesignatedBridge, dot1dStpRootCost, dot1dStpMaxAge, dot1dStpPortDesignatedPort, dot1dStpRootPort, dot1dStpPortDesignatedCost, dot1dStpForwardDelay, dot1dStpHelloTime = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpDesignatedRoot", "dot1dStpPortState", "dot1dStpPortDesignatedRoot", "dot1dStpPortDesignatedBridge", "dot1dStpRootCost", "dot1dStpMaxAge", "dot1dStpPortDesignatedPort", "dot1dStpRootPort", "dot1dStpPortDesignatedCost", "dot1dStpForwardDelay", "dot1dStpHelloTime")
ifInErrors, ifOutDiscards, ifOutErrors = mibBuilder.importSymbols("IF-MIB", "ifInErrors", "ifOutDiscards", "ifOutErrors")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysObjectID, = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
ModuleIdentity, Counter32, Counter64, NotificationType, IpAddress, Gauge32, TimeTicks, enterprises, iso, Bits, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Counter64", "NotificationType", "IpAddress", "Gauge32", "TimeTicks", "enterprises", "iso", "Bits", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Integer32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
els10_27 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9)).setLabel("els10-27")
els10_27hw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 1)).setLabel("els10-27hw")
els10_27sw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 2)).setLabel("els10-27sw")
els10_27admin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 3)).setLabel("els10-27admin")
els10_27swdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 4)).setLabel("els10-27swdis")
els10_27addr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 5)).setLabel("els10-27addr")
els10_27if = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 6)).setLabel("els10-27if")
els10_27dot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 7)).setLabel("els10-27dot3")
els10_27uart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 8)).setLabel("els10-27uart")
els10_27debug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 10)).setLabel("els10-27debug")
els10_27lpbk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 11)).setLabel("els10-27lpbk")
els10_27proto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 12)).setLabel("els10-27proto")
els10_27trunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 13)).setLabel("els10-27trunk")
els10_27workgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 14)).setLabel("els10-27workgroup")
els10_27trapMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 15)).setLabel("els10-27trapMgt")
els10_27pingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 16)).setLabel("els10-27pingMgt")
els10_27traceMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 17)).setLabel("els10-27traceMgt")
els10_27volmirrorgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 19)).setLabel("els10-27volmirrorgroup")
els10_27VlanBridgeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 20)).setLabel("els10-27VlanBridgeConfig")
els10_27volipmgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 21)).setLabel("els10-27volipmgroup")
els10_27voligmpgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 22)).setLabel("els10-27voligmpgroup")
els10_27FlowControlCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 23)).setLabel("els10-27FlowControlCtl")
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("els10-27-bridge", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
els10_27hwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 1), OctetString()).setLabel("els10-27hwDiagCode").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwDiagCode.setStatus('mandatory')
els10_27hwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 2), OctetString()).setLabel("els10-27hwManufData").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwManufData.setStatus('mandatory')
els10_27hwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 3), Integer32()).setLabel("els10-27hwPortCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortCount.setStatus('mandatory')
els10_27hwPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 1, 4), ).setLabel("els10-27hwPortTable")
if mibBuilder.loadTexts: els10_27hwPortTable.setStatus('mandatory')
els10_27hwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1), ).setLabel("els10-27hwPortEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27hwPortIndex"))
if mibBuilder.loadTexts: els10_27hwPortEntry.setStatus('mandatory')
els10_27hwPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 1), Integer32()).setLabel("els10-27hwPortIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortIndex.setStatus('mandatory')
els10_27hwPortType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 255))).clone(namedValues=NamedValues(("port-csma", 1), ("port-uart", 6), ("port-none", 255)))).setLabel("els10-27hwPortType").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortType.setStatus('mandatory')
els10_27hwPortSubType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 16, 17, 80, 255))).clone(namedValues=NamedValues(("csmacd-tpx", 13), ("csmacd-100-tpx", 16), ("csmacd-100-fx", 17), ("uart-female-9pin", 80), ("no-information", 255)))).setLabel("els10-27hwPortSubType").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortSubType.setStatus('mandatory')
els10_27hwPortDiagPassed = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diag-passed", 1), ("diag-failed", 2)))).setLabel("els10-27hwPortDiagPassed").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwPortDiagPassed.setStatus('mandatory')
els10_27hwAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 4, 1, 5), OctetString()).setLabel("els10-27hwAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwAddr.setStatus('mandatory')
els10_27hwUpLink = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27hwUpLink").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwUpLink.setStatus('mandatory')
els10_27hwUpLinkManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 1, 6), OctetString()).setLabel("els10-27hwUpLinkManufData").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27hwUpLinkManufData.setStatus('mandatory')
els10_27swNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 1), Integer32()).setLabel("els10-27swNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swNumber.setStatus('mandatory')
els10_27swFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 2, 2), ).setLabel("els10-27swFilesetTable")
if mibBuilder.loadTexts: els10_27swFilesetTable.setStatus('mandatory')
els10_27swFilesetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1), ).setLabel("els10-27swFilesetEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27swIndex"))
if mibBuilder.loadTexts: els10_27swFilesetEntry.setStatus('mandatory')
els10_27swIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setLabel("els10-27swIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swIndex.setStatus('mandatory')
els10_27swDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 2), DisplayString()).setLabel("els10-27swDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swDesc.setStatus('mandatory')
els10_27swCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 3), Integer32()).setLabel("els10-27swCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swCount.setStatus('mandatory')
els10_27swType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 4), OctetString()).setLabel("els10-27swType").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swType.setStatus('mandatory')
els10_27swSizes = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 5), OctetString()).setLabel("els10-27swSizes").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swSizes.setStatus('mandatory')
els10_27swStarts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 6), OctetString()).setLabel("els10-27swStarts").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swStarts.setStatus('mandatory')
els10_27swBases = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 7), OctetString()).setLabel("els10-27swBases").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swBases.setStatus('mandatory')
els10_27swFlashBank = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setLabel("els10-27swFlashBank").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swFlashBank.setStatus('mandatory')
els10_27adminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 1), OctetString()).setLabel("els10-27adminFatalErr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminFatalErr.setStatus('mandatory')
els10_27adminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 2), OctetString()).setLabel("els10-27adminAnyPass").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminAnyPass.setStatus('mandatory')
els10_27adminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 3), OctetString()).setLabel("els10-27adminGetPass").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminGetPass.setStatus('mandatory')
els10_27adminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 4), IpAddress()).setLabel("els10-27adminNMSIPAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminNMSIPAddr.setStatus('mandatory')
els10_27adminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27adminStorageFailure").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminStorageFailure.setStatus('mandatory')
els10_27adminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 8), IpAddress()).setLabel("els10-27adminAuthenticationFailure").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminAuthenticationFailure.setStatus('mandatory')
els10_27adminNAMReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 10), Counter32()).setLabel("els10-27adminNAMReceiveCongests").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminNAMReceiveCongests.setStatus('mandatory')
els10_27adminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 11), Counter32()).setLabel("els10-27adminArpEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminArpEntries.setStatus('mandatory')
els10_27adminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 12), Counter32()).setLabel("els10-27adminArpStatics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminArpStatics.setStatus('mandatory')
els10_27adminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 13), Counter32()).setLabel("els10-27adminArpOverflows").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminArpOverflows.setStatus('mandatory')
els10_27adminIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 14), Counter32()).setLabel("els10-27adminIpEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminIpEntries.setStatus('mandatory')
els10_27adminIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 15), Counter32()).setLabel("els10-27adminIpStatics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminIpStatics.setStatus('mandatory')
els10_27adminStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 16), Integer32()).setLabel("els10-27adminStaticPreference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminStaticPreference.setStatus('mandatory')
els10_27adminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 17), Integer32()).setLabel("els10-27adminRipPreference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminRipPreference.setStatus('mandatory')
els10_27adminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 18), Counter32()).setLabel("els10-27adminRipRouteDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27adminRipRouteDiscards.setStatus('mandatory')
els10_27adminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setLabel("els10-27adminRebootConfig").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminRebootConfig.setStatus('mandatory')
els10_27adminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27adminDisableButton").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminDisableButton.setStatus('mandatory')
els10_27adminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5), ("led-duplex", 6), ("led-speed", 7), ("led-mirror", 8)))).setLabel("els10-27adminButtonSelection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminButtonSelection.setStatus('mandatory')
els10_27adminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setLabel("els10-27adminLEDProgramOption").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27adminLEDProgramOption.setStatus('mandatory')
els10_27swdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 1), OctetString()).setLabel("els10-27swdisDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swdisDesc.setStatus('mandatory')
els10_27swdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setLabel("els10-27swdisAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisAccess.setStatus('mandatory')
els10_27swdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setLabel("els10-27swdisWriteStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27swdisWriteStatus.setStatus('mandatory')
els10_27swdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 4), IpAddress()).setLabel("els10-27swdisConfigIp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisConfigIp.setStatus('mandatory')
els10_27swdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 5), Integer32()).setLabel("els10-27swdisConfigRetryTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisConfigRetryTime.setStatus('mandatory')
els10_27swdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 4, 6), Integer32()).setLabel("els10-27swdisConfigTotalTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27swdisConfigTotalTimeout.setStatus('mandatory')
els10_27addrStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 1), Counter32()).setLabel("els10-27addrStatics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27addrStatics.setStatus('mandatory')
els10_27addrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 2), Counter32()).setLabel("els10-27addrDynamics").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27addrDynamics.setStatus('mandatory')
els10_27addrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 3), Gauge32()).setLabel("els10-27addrDynamicMax").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrDynamicMax.setStatus('mandatory')
els10_27addrDynamicOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 4), Counter32()).setLabel("els10-27addrDynamicOverflows").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27addrDynamicOverflows.setStatus('mandatory')
els10_27addrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 5), Integer32()).setLabel("els10-27addrFlags").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrFlags.setStatus('mandatory')
els10_27addrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 6), OctetString()).setLabel("els10-27addrMAC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrMAC.setStatus('mandatory')
els10_27addrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 7), Integer32()).setLabel("els10-27addrPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrPort.setStatus('mandatory')
els10_27addrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("update", 4), ("delete", 5), ("read-block", 6)))).setLabel("els10-27addrOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrOperation.setStatus('mandatory')
els10_27addrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 9), Integer32()).setLabel("els10-27addrIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrIndex.setStatus('mandatory')
els10_27addrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 10), Integer32()).setLabel("els10-27addrNext").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrNext.setStatus('mandatory')
els10_27addrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 19), Integer32()).setLabel("els10-27addrBlockSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrBlockSize.setStatus('mandatory')
els10_27addrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 5, 20), OctetString()).setLabel("els10-27addrBlock").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27addrBlock.setStatus('mandatory')
els10_27ifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 6, 1), ).setLabel("els10-27ifTable")
if mibBuilder.loadTexts: els10_27ifTable.setStatus('mandatory')
els10_27ifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1), ).setLabel("els10-27ifEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27ifIndex"))
if mibBuilder.loadTexts: els10_27ifEntry.setStatus('mandatory')
els10_27ifIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 1), Integer32()).setLabel("els10-27ifIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifIndex.setStatus('mandatory')
els10_27ifThreshold = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 4), Integer32()).setLabel("els10-27ifThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifThreshold.setStatus('mandatory')
els10_27ifThresholdTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 5), Integer32()).setLabel("els10-27ifThresholdTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifThresholdTime.setStatus('mandatory')
els10_27ifRxQueueThresh = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 6), Integer32()).setLabel("els10-27ifRxQueueThresh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifRxQueueThresh.setStatus('mandatory')
els10_27ifRxQueueThreshTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 7), Integer32()).setLabel("els10-27ifRxQueueThreshTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifRxQueueThreshTime.setStatus('mandatory')
els10_27ifTxStormCnt = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 8), Integer32()).setLabel("els10-27ifTxStormCnt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifTxStormCnt.setStatus('mandatory')
els10_27ifTxStormTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 9), TimeTicks()).setLabel("els10-27ifTxStormTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifTxStormTime.setStatus('mandatory')
els10_27ifFunction = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 16), Integer32()).setLabel("els10-27ifFunction").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifFunction.setStatus('mandatory')
els10_27ifRxHwFCSs = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 18), Counter32()).setLabel("els10-27ifRxHwFCSs").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifRxHwFCSs.setStatus('mandatory')
els10_27ifRxQueues = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 19), Counter32()).setLabel("els10-27ifRxQueues").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifRxQueues.setStatus('mandatory')
els10_27ifStatisticsTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 27), TimeTicks()).setLabel("els10-27ifStatisticsTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifStatisticsTime.setStatus('mandatory')
els10_27ifForwardedChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 28), Counter32()).setLabel("els10-27ifForwardedChars").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifForwardedChars.setStatus('mandatory')
els10_27ifDescr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 29), DisplayString()).setLabel("els10-27ifDescr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ifDescr.setStatus('mandatory')
els10_27ifGoodRxFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 30), Counter32()).setLabel("els10-27ifGoodRxFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifGoodRxFrames.setStatus('mandatory')
els10_27ifGoodTxFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 6, 1, 1, 31), Counter32()).setLabel("els10-27ifGoodTxFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27ifGoodTxFrames.setStatus('mandatory')
els10_27dot3Table = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 7, 1), ).setLabel("els10-27dot3Table")
if mibBuilder.loadTexts: els10_27dot3Table.setStatus('mandatory')
els10_27dot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1), ).setLabel("els10-27dot3Entry").setIndexNames((0, "CT-ELS10-MIB", "els10-27dot3Index"))
if mibBuilder.loadTexts: els10_27dot3Entry.setStatus('mandatory')
els10_27dot3Index = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 1), Integer32()).setLabel("els10-27dot3Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3Index.setStatus('mandatory')
els10_27dot3TPLinkOK = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27dot3TPLinkOK").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TPLinkOK.setStatus('mandatory')
els10_27dot3LedOn = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("led-on", 1), ("led-off", 2)))).setLabel("els10-27dot3LedOn").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3LedOn.setStatus('mandatory')
els10_27dot3RxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 4), Counter32()).setLabel("els10-27dot3RxCollisions").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3RxCollisions.setStatus('mandatory')
els10_27dot3RxRunts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 5), Counter32()).setLabel("els10-27dot3RxRunts").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3RxRunts.setStatus('mandatory')
els10_27dot3RxLateColls = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 6), Counter32()).setLabel("els10-27dot3RxLateColls").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3RxLateColls.setStatus('mandatory')
els10_27dot3TxJabbers = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 7), Counter32()).setLabel("els10-27dot3TxJabbers").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TxJabbers.setStatus('mandatory')
els10_27dot3TxBabbles = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 8), Counter32()).setLabel("els10-27dot3TxBabbles").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TxBabbles.setStatus('mandatory')
els10_27dot3TxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 9), Counter32()).setLabel("els10-27dot3TxCollisions").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27dot3TxCollisions.setStatus('mandatory')
els10_27dot3SpeedSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed-10mbit", 1), ("speed-100mbit", 2), ("speed-auto", 3)))).setLabel("els10-27dot3SpeedSelection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27dot3SpeedSelection.setStatus('mandatory')
els10_27dot3DuplexSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex-auto", 1), ("duplex-half", 2), ("duplex-full", 3)))).setLabel("els10-27dot3DuplexSelection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27dot3DuplexSelection.setStatus('mandatory')
els10_27uartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 8, 1), ).setLabel("els10-27uartTable")
if mibBuilder.loadTexts: els10_27uartTable.setStatus('mandatory')
els10_27uartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1), ).setLabel("els10-27uartEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27uartIndex"))
if mibBuilder.loadTexts: els10_27uartEntry.setStatus('mandatory')
els10_27uartIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 1), Integer32()).setLabel("els10-27uartIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27uartIndex.setStatus('mandatory')
els10_27uartBaud = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6)))).setLabel("els10-27uartBaud").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27uartBaud.setStatus('mandatory')
els10_27uartAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 3), Counter32()).setLabel("els10-27uartAlignmentErrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27uartAlignmentErrors.setStatus('mandatory')
els10_27uartOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 8, 1, 1, 4), Counter32()).setLabel("els10-27uartOverrunErrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27uartOverrunErrors.setStatus('mandatory')
els10_27debugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 1), Integer32()).setLabel("els10-27debugStringID").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27debugStringID.setStatus('mandatory')
els10_27debugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 2), OctetString()).setLabel("els10-27debugString").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27debugString.setStatus('mandatory')
els10_27debugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 10, 3), ).setLabel("els10-27debugTable")
if mibBuilder.loadTexts: els10_27debugTable.setStatus('mandatory')
els10_27debugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1), ).setLabel("els10-27debugEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27debugIndex"))
if mibBuilder.loadTexts: els10_27debugEntry.setStatus('mandatory')
els10_27debugIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("debug-nam", 1)))).setLabel("els10-27debugIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27debugIndex.setStatus('mandatory')
els10_27debugOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setLabel("els10-27debugOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugOperation.setStatus('mandatory')
els10_27debugBase = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 3), Integer32()).setLabel("els10-27debugBase").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugBase.setStatus('mandatory')
els10_27debugLength = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 4), Integer32()).setLabel("els10-27debugLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugLength.setStatus('mandatory')
els10_27debugData = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 10, 3, 1, 5), OctetString()).setLabel("els10-27debugData").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27debugData.setStatus('mandatory')
els10_27lpbkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 11, 1), ).setLabel("els10-27lpbkTable")
if mibBuilder.loadTexts: els10_27lpbkTable.setStatus('mandatory')
els10_27lpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1), ).setLabel("els10-27lpbkEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27lpbkIndex"))
if mibBuilder.loadTexts: els10_27lpbkEntry.setStatus('mandatory')
els10_27lpbkIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 1), Integer32()).setLabel("els10-27lpbkIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkIndex.setStatus('mandatory')
els10_27lpbkOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-off", 1), ("loopback-local", 2), ("loopback-remote", 3)))).setLabel("els10-27lpbkOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkOperation.setStatus('mandatory')
els10_27lpbkDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 3), OctetString()).setLabel("els10-27lpbkDestAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkDestAddr.setStatus('mandatory')
els10_27lpbkPktNum = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 4), Integer32()).setLabel("els10-27lpbkPktNum").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkPktNum.setStatus('mandatory')
els10_27lpbkInterval = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 5), TimeTicks()).setLabel("els10-27lpbkInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkInterval.setStatus('mandatory')
els10_27lpbkPktLength = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 6), Integer32()).setLabel("els10-27lpbkPktLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkPktLength.setStatus('mandatory')
els10_27lpbkIncrements = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 7), Integer32()).setLabel("els10-27lpbkIncrements").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27lpbkIncrements.setStatus('mandatory')
els10_27lpbkGoods = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 8), Counter32()).setLabel("els10-27lpbkGoods").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkGoods.setStatus('mandatory')
els10_27lpbkErrorNoReceives = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 9), Counter32()).setLabel("els10-27lpbkErrorNoReceives").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorNoReceives.setStatus('mandatory')
els10_27lpbkErrorBadReceives = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 10), Counter32()).setLabel("els10-27lpbkErrorBadReceives").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorBadReceives.setStatus('mandatory')
els10_27lpbkErrorSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 11), Integer32()).setLabel("els10-27lpbkErrorSize").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorSize.setStatus('mandatory')
els10_27lpbkErrorSent = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 12), OctetString()).setLabel("els10-27lpbkErrorSent").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorSent.setStatus('mandatory')
els10_27lpbkErrorReceived = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 13), OctetString()).setLabel("els10-27lpbkErrorReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorReceived.setStatus('mandatory')
els10_27lpbkErrorOffset = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 11, 1, 1, 14), Integer32()).setLabel("els10-27lpbkErrorOffset").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27lpbkErrorOffset.setStatus('mandatory')
els10_27protoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 12, 1), ).setLabel("els10-27protoTable")
if mibBuilder.loadTexts: els10_27protoTable.setStatus('mandatory')
els10_27protoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1), ).setLabel("els10-27protoEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27protoIfIndex"))
if mibBuilder.loadTexts: els10_27protoEntry.setStatus('mandatory')
els10_27protoIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 1), Integer32()).setLabel("els10-27protoIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27protoIfIndex.setStatus('mandatory')
els10_27protoBridge = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setLabel("els10-27protoBridge").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoBridge.setStatus('mandatory')
els10_27protoSuppressBpdu = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setLabel("els10-27protoSuppressBpdu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoSuppressBpdu.setStatus('mandatory')
els10_27protoRipListen = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27protoRipListen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoRipListen.setStatus('mandatory')
els10_27protoTrunking = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27protoTrunking").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27protoTrunking.setStatus('mandatory')
els10_27sprotoTransmitPacing = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27sprotoTransmitPacing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27sprotoTransmitPacing.setStatus('mandatory')
els10_27trunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 13, 1), ).setLabel("els10-27trunkTable")
if mibBuilder.loadTexts: els10_27trunkTable.setStatus('mandatory')
els10_27trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1), ).setLabel("els10-27trunkEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trunkIfIndex"))
if mibBuilder.loadTexts: els10_27trunkEntry.setStatus('mandatory')
els10_27trunkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 1), Integer32()).setLabel("els10-27trunkIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkIfIndex.setStatus('mandatory')
els10_27trunkState = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("closed", 2), ("oneway", 3), ("joined", 4), ("perturbed", 5), ("helddown", 6), ("broken", 7)))).setLabel("els10-27trunkState").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkState.setStatus('mandatory')
els10_27trunkRemoteBridgeAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 3), OctetString()).setLabel("els10-27trunkRemoteBridgeAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkRemoteBridgeAddr.setStatus('mandatory')
els10_27trunkRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 4), IpAddress()).setLabel("els10-27trunkRemoteIp").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkRemoteIp.setStatus('mandatory')
els10_27trunkLastError = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("ack-lost", 4), ("standby", 5), ("too-many-groups", 6), ("no-ack", 7), ("perturbed-threshold", 8), ("self-connect", 9), ("port-moved", 10), ("multiple-lan-types", 11)))).setLabel("els10-27trunkLastError").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLastError.setStatus('mandatory')
els10_27trunkLinkOrdinal = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 6), Integer32()).setLabel("els10-27trunkLinkOrdinal").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLinkOrdinal.setStatus('mandatory')
els10_27trunkLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 7), Integer32()).setLabel("els10-27trunkLinkCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLinkCount.setStatus('mandatory')
els10_27trunkLastChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 13, 1, 1, 8), Integer32()).setLabel("els10-27trunkLastChange").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trunkLastChange.setStatus('mandatory')
els10_27WorkGroupNextNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 1), Integer32()).setLabel("els10-27WorkGroupNextNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27WorkGroupNextNumber.setStatus('mandatory')
els10_27WorkGroupCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 2), Integer32()).setLabel("els10-27WorkGroupCurrentCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27WorkGroupCurrentCount.setStatus('mandatory')
els10_27WorkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 3), Integer32()).setLabel("els10-27WorkGroupMaxCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27WorkGroupMaxCount.setStatus('mandatory')
els10_27WorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 14, 4), ).setLabel("els10-27WorkGroupTable")
if mibBuilder.loadTexts: els10_27WorkGroupTable.setStatus('mandatory')
els10_27WorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1), ).setLabel("els10-27WorkGroupEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27WorkGroupNumber"))
if mibBuilder.loadTexts: els10_27WorkGroupEntry.setStatus('mandatory')
els10_27WorkGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 1), Integer32()).setLabel("els10-27WorkGroupNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupNumber.setStatus('mandatory')
els10_27WorkGroupName = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 2), DisplayString()).setLabel("els10-27WorkGroupName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupName.setStatus('mandatory')
els10_27WorkGroupPorts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 3), OctetString()).setLabel("els10-27WorkGroupPorts").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupPorts.setStatus('mandatory')
els10_27WorkGroupType = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("all", 3), ("invalid", 4)))).setLabel("els10-27WorkGroupType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27WorkGroupType.setStatus('mandatory')
els10_27trapControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 15, 1), ).setLabel("els10-27trapControlTable")
if mibBuilder.loadTexts: els10_27trapControlTable.setStatus('mandatory')
els10_27trapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1), ).setLabel("els10-27trapControlEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trapIndex"))
if mibBuilder.loadTexts: els10_27trapControlEntry.setStatus('mandatory')
els10_27trapIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 1), Integer32()).setLabel("els10-27trapIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapIndex.setStatus('mandatory')
els10_27trapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27trapEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapEnabled.setStatus('mandatory')
els10_27trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setLabel("els10-27trapSeverity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapSeverity.setStatus('mandatory')
els10_27trapText = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 1, 1, 4), DisplayString()).setLabel("els10-27trapText").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapText.setStatus('mandatory')
els10_27trapSeverityControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 15, 2), ).setLabel("els10-27trapSeverityControlTable")
if mibBuilder.loadTexts: els10_27trapSeverityControlTable.setStatus('mandatory')
els10_27trapSeverityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 15, 2, 1), ).setLabel("els10-27trapSeverityControlEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trapSeverity"))
if mibBuilder.loadTexts: els10_27trapSeverityControlEntry.setStatus('mandatory')
els10_27trapSeverityControlSeverity = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setLabel("els10-27trapSeverityControlSeverity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapSeverityControlSeverity.setStatus('mandatory')
els10_27trapSeverityEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setLabel("els10-27trapSeverityEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapSeverityEnable.setStatus('mandatory')
els10_27trapIncludeText = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("els10-27trapIncludeText").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapIncludeText.setStatus('mandatory')
els10_27trapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 4), TimeTicks()).setLabel("els10-27trapTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapTime.setStatus('mandatory')
els10_27trapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 5), Integer32()).setLabel("els10-27trapRetry").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27trapRetry.setStatus('mandatory')
els10_27trapNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 6), Integer32()).setLabel("els10-27trapNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapNumber.setStatus('mandatory')
els10_27trapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 15, 7), ).setLabel("els10-27trapTable")
if mibBuilder.loadTexts: els10_27trapTable.setStatus('mandatory')
els10_27trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1), ).setLabel("els10-27trapEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27trapEntryIndex"))
if mibBuilder.loadTexts: els10_27trapEntry.setStatus('mandatory')
els10_27trapEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 1), Integer32()).setLabel("els10-27trapEntryIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryIndex.setStatus('mandatory')
els10_27trapEntryTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 2), TimeTicks()).setLabel("els10-27trapEntryTimeStamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryTimeStamp.setStatus('mandatory')
els10_27trapEntryText = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 3), DisplayString()).setLabel("els10-27trapEntryText").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryText.setStatus('mandatory')
els10_27trapEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 4), Integer32()).setLabel("els10-27trapEntryNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntryNumber.setStatus('mandatory')
els10_27trapEntrySeverity = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setLabel("els10-27trapEntrySeverity").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27trapEntrySeverity.setStatus('mandatory')
els10_27pingDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 1), TimeTicks()).setLabel("els10-27pingDataTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingDataTimeout.setStatus('mandatory')
els10_27pingTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 16, 2), ).setLabel("els10-27pingTable")
if mibBuilder.loadTexts: els10_27pingTable.setStatus('mandatory')
els10_27pingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1), ).setLabel("els10-27pingEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27pingNMSAddr"), (0, "CT-ELS10-MIB", "els10-27pingDestAddr"))
if mibBuilder.loadTexts: els10_27pingEntry.setStatus('mandatory')
els10_27pingNMSAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 1), IpAddress()).setLabel("els10-27pingNMSAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingNMSAddr.setStatus('mandatory')
els10_27pingDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 2), IpAddress()).setLabel("els10-27pingDestAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingDestAddr.setStatus('mandatory')
els10_27pingState = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-started", 0), ("active", 1), ("timed-out", 2), ("completed", 3)))).setLabel("els10-27pingState").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingState.setStatus('mandatory')
els10_27pingCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 4), Integer32()).setLabel("els10-27pingCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingCount.setStatus('mandatory')
els10_27pingDataSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 5), Integer32()).setLabel("els10-27pingDataSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingDataSize.setStatus('mandatory')
els10_27pingWait = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 6), TimeTicks()).setLabel("els10-27pingWait").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingWait.setStatus('mandatory')
els10_27pingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 7), TimeTicks()).setLabel("els10-27pingTimeOut").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingTimeOut.setStatus('mandatory')
els10_27pingOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setLabel("els10-27pingOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27pingOperation.setStatus('mandatory')
els10_27pingMin = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 9), TimeTicks()).setLabel("els10-27pingMin").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingMin.setStatus('mandatory')
els10_27pingMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 10), TimeTicks()).setLabel("els10-27pingMax").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingMax.setStatus('mandatory')
els10_27pingAvg = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 11), TimeTicks()).setLabel("els10-27pingAvg").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingAvg.setStatus('mandatory')
els10_27pingNumTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 12), Integer32()).setLabel("els10-27pingNumTransmitted").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingNumTransmitted.setStatus('mandatory')
els10_27pingNumReceived = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 16, 2, 1, 13), Integer32()).setLabel("els10-27pingNumReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27pingNumReceived.setStatus('mandatory')
els10_27traceDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 1), TimeTicks()).setLabel("els10-27traceDataTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceDataTimeout.setStatus('mandatory')
els10_27traceTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 17, 2), ).setLabel("els10-27traceTable")
if mibBuilder.loadTexts: els10_27traceTable.setStatus('mandatory')
els10_27traceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1), ).setLabel("els10-27traceEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27traceNMSAddr"), (0, "CT-ELS10-MIB", "els10-27traceDestAddr"), (0, "CT-ELS10-MIB", "els10-27traceHop"), (0, "CT-ELS10-MIB", "els10-27traceProbe"))
if mibBuilder.loadTexts: els10_27traceEntry.setStatus('mandatory')
els10_27traceNMSAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 1), IpAddress()).setLabel("els10-27traceNMSAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceNMSAddr.setStatus('mandatory')
els10_27traceDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 2), IpAddress()).setLabel("els10-27traceDestAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceDestAddr.setStatus('mandatory')
els10_27traceMaxTTL = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 3), Integer32()).setLabel("els10-27traceMaxTTL").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceMaxTTL.setStatus('mandatory')
els10_27traceDataSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 4), Integer32()).setLabel("els10-27traceDataSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceDataSize.setStatus('mandatory')
els10_27traceNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 5), Integer32()).setLabel("els10-27traceNumProbes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceNumProbes.setStatus('mandatory')
els10_27traceWait = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 6), TimeTicks()).setLabel("els10-27traceWait").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceWait.setStatus('mandatory')
els10_27traceOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setLabel("els10-27traceOperation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27traceOperation.setStatus('mandatory')
els10_27traceHop = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 8), Integer32()).setLabel("els10-27traceHop").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceHop.setStatus('mandatory')
els10_27traceHopAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 9), IpAddress()).setLabel("els10-27traceHopAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceHopAddr.setStatus('mandatory')
els10_27traceProbe = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 10), Integer32()).setLabel("els10-27traceProbe").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceProbe.setStatus('mandatory')
els10_27traceState = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-started", 0), ("active", 1), ("time-exceeded", 2), ("host-unreachable", 3), ("net-unreachable", 4), ("completed", 5)))).setLabel("els10-27traceState").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceState.setStatus('mandatory')
els10_27traceTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 17, 2, 1, 12), TimeTicks()).setLabel("els10-27traceTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27traceTime.setStatus('mandatory')
els10_27volmirrorMode = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setLabel("els10-27volmirrorMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmirrorMode.setStatus('mandatory')
els10_27volmirrorPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 2), Integer32()).setLabel("els10-27volmirrorPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmirrorPort.setStatus('mandatory')
els10_27volmonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 3), Integer32()).setLabel("els10-27volmonitorPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmonitorPort.setStatus('mandatory')
els10_27volMirrorMacTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 19, 4), ).setLabel("els10-27volMirrorMacTable")
if mibBuilder.loadTexts: els10_27volMirrorMacTable.setStatus('mandatory')
els10_27volmirrorMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 19, 4, 1), ).setLabel("els10-27volmirrorMacEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27volmirrorIndex"))
if mibBuilder.loadTexts: els10_27volmirrorMacEntry.setStatus('mandatory')
els10_27volmirrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 4, 1, 1), Integer32()).setLabel("els10-27volmirrorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27volmirrorIndex.setStatus('mandatory')
els10_27volmirrorMac1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 19, 4, 1, 2), OctetString()).setLabel("els10-27volmirrorMac1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27volmirrorMac1.setStatus('mandatory')
els10_27VlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 1), Integer32()).setLabel("els10-27VlanVersionNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanVersionNumber.setStatus('mandatory')
els10_27VlanOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8021d", 1), ("ieee8021Q", 2))).clone('ieee8021d')).setLabel("els10-27VlanOperatingMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanOperatingMode.setStatus('mandatory')
els10_27VlanResetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operating", 1), ("reset", 2)))).setLabel("els10-27VlanResetDefaults").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanResetDefaults.setStatus('mandatory')
els10_27VlanGVRPEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setLabel("els10-27VlanGVRPEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanGVRPEnable.setStatus('mandatory')
els10_27VlanAccessList = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 5), Integer32()).setLabel("els10-27VlanAccessList").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanAccessList.setStatus('mandatory')
els10_27VlanConfigVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 9, 20, 6)).setLabel("els10-27VlanConfigVlan")
els10_27VlanNumActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 1), Integer32()).setLabel("els10-27VlanNumActiveEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanNumActiveEntries.setStatus('mandatory')
els10_27VlanNumConfiguredEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 2), Integer32()).setLabel("els10-27VlanNumConfiguredEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanNumConfiguredEntries.setStatus('mandatory')
els10_27VlanMaxNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 3), Integer32()).setLabel("els10-27VlanMaxNumEntries").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27VlanMaxNumEntries.setStatus('mandatory')
els10_27VlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4), ).setLabel("els10-27VlanConfigTable")
if mibBuilder.loadTexts: els10_27VlanConfigTable.setStatus('mandatory')
els10_27VlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1), ).setLabel("els10-27VlanConfigEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanConfigVID"))
if mibBuilder.loadTexts: els10_27VlanConfigEntry.setStatus('mandatory')
els10_27VlanConfigIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 1), Integer32()).setLabel("els10-27VlanConfigIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigIndex.setStatus('mandatory')
els10_27VlanConfigVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanConfigVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigVID.setStatus('mandatory')
els10_27VlanConfigPorts = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 3), Integer32()).setLabel("els10-27VlanConfigPorts").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigPorts.setStatus('mandatory')
els10_27VlanConfigIP = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 4), Integer32()).setLabel("els10-27VlanConfigIP").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigIP.setStatus('mandatory')
els10_27VlanConfigIPMask = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 5), Integer32()).setLabel("els10-27VlanConfigIPMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigIPMask.setStatus('mandatory')
els10_27VlanConfigName = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setLabel("els10-27VlanConfigName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigName.setStatus('mandatory')
els10_27VlanConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setLabel("els10-27VlanConfigStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigStatus.setStatus('mandatory')
els10_27VlanConfigEstablish = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setLabel("els10-27VlanConfigEstablish").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanConfigEstablish.setStatus('mandatory')
els10_27VlanConfigEgressTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5), ).setLabel("els10-27VlanConfigEgressTable")
if mibBuilder.loadTexts: els10_27VlanConfigEgressTable.setStatus('mandatory')
els10_27VlanConfigEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1), ).setLabel("els10-27VlanConfigEgressEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanEgressVID"))
if mibBuilder.loadTexts: els10_27VlanConfigEgressEntry.setStatus('mandatory')
els10_27VlanEgressIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 1), Integer32()).setLabel("els10-27VlanEgressIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressIndex.setStatus('mandatory')
els10_27VlanEgressVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanEgressVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressVID.setStatus('mandatory')
els10_27VlanEgressList = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 3), Integer32()).setLabel("els10-27VlanEgressList").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressList.setStatus('mandatory')
els10_27VlanEgressStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setLabel("els10-27VlanEgressStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanEgressStatus.setStatus('mandatory')
els10_27VlanFilterGVRPTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6), ).setLabel("els10-27VlanFilterGVRPTable")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPTable.setStatus('mandatory')
els10_27VlanFilterGVRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1), ).setLabel("els10-27VlanFilterGVRPEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanFilterGVRPVID"))
if mibBuilder.loadTexts: els10_27VlanFilterGVRPEntry.setStatus('mandatory')
els10_27VlanFilterGVRPIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 1), Integer32()).setLabel("els10-27VlanFilterGVRPIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPIndex.setStatus('mandatory')
els10_27VlanFilterGVRPVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanFilterGVRPVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPVID.setStatus('mandatory')
els10_27VlanFilterGVRPList = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 3), Integer32()).setLabel("els10-27VlanFilterGVRPList").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPList.setStatus('mandatory')
els10_27VlanFilterGVRPStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setLabel("els10-27VlanFilterGVRPStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPStatus.setStatus('mandatory')
els10_27VlanFilterGVRPEstablishVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setLabel("els10-27VlanFilterGVRPEstablishVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanFilterGVRPEstablishVID.setStatus('mandatory')
els10_27VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7), ).setLabel("els10-27VlanStaticTable")
if mibBuilder.loadTexts: els10_27VlanStaticTable.setStatus('mandatory')
els10_27VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1), ).setLabel("els10-27VlanStaticEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27VlanStaticVID"))
if mibBuilder.loadTexts: els10_27VlanStaticEntry.setStatus('mandatory')
els10_27VlanStaticVID = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setLabel("els10-27VlanStaticVID").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticVID.setStatus('mandatory')
els10_27VlanStaticMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 2), PhysAddress()).setLabel("els10-27VlanStaticMAC").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticMAC.setStatus('mandatory')
els10_27VlanStaticPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 27))).setLabel("els10-27VlanStaticPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticPort.setStatus('mandatory')
els10_27VlanStaticEstablish = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 20, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setLabel("els10-27VlanStaticEstablish").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27VlanStaticEstablish.setStatus('mandatory')
els10_27IPMulticastStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setLabel("els10-27IPMulticastStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27IPMulticastStatus.setStatus('mandatory')
els10_27ipmInterfaceRtr = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 21, 2), Integer32()).setLabel("els10-27ipmInterfaceRtr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27ipmInterfaceRtr.setStatus('mandatory')
els10_27igmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setLabel("els10-27igmpStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpStatus.setStatus('mandatory')
els10_27igmpQueryStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setLabel("els10-27igmpQueryStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpQueryStatus.setStatus('mandatory')
els10_27igmpQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 3), Integer32()).setLabel("els10-27igmpQueryCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpQueryCount.setStatus('mandatory')
els10_27igmpPortDelay = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 4), Integer32()).setLabel("els10-27igmpPortDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27igmpPortDelay.setStatus('mandatory')
els10_27igmpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 22, 5), ).setLabel("els10-27igmpCacheTable")
if mibBuilder.loadTexts: els10_27igmpCacheTable.setStatus('mandatory')
els10_27igmpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1), ).setLabel("els10-27igmpCacheEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27igmpCacheAddress"), (0, "CT-ELS10-MIB", "els10-27igmpCacheIfIndex"))
if mibBuilder.loadTexts: els10_27igmpCacheEntry.setStatus('mandatory')
els10_27igmpCacheAddress = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1, 1), IpAddress()).setLabel("els10-27igmpCacheAddress").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27igmpCacheAddress.setStatus('mandatory')
els10_27igmpCacheIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1, 2), Integer32()).setLabel("els10-27igmpCacheIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27igmpCacheIfIndex.setStatus('mandatory')
els10_27igmpCacheExpiryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 22, 5, 1, 3), TimeTicks()).setLabel("els10-27igmpCacheExpiryTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27igmpCacheExpiryTime.setStatus('mandatory')
els10_27FlowControlBackPressure = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 1), Integer32()).setLabel("els10-27FlowControlBackPressure").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlBackPressure.setStatus('mandatory')
els10_27FlowControlThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 2), Integer32()).setLabel("els10-27FlowControlThresholdValue").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlThresholdValue.setStatus('mandatory')
els10_27FlowControlPauseInteval = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 3), Integer32()).setLabel("els10-27FlowControlPauseInteval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlPauseInteval.setStatus('mandatory')
els10_27FlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 9, 23, 4), ).setLabel("els10-27FlowControlTable")
if mibBuilder.loadTexts: els10_27FlowControlTable.setStatus('mandatory')
els10_27FlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1), ).setLabel("els10-27FlowControlEntry").setIndexNames((0, "CT-ELS10-MIB", "els10-27FlowControlInterface"))
if mibBuilder.loadTexts: els10_27FlowControlEntry.setStatus('mandatory')
els10_27FlowControlInterface = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 1), Integer32()).setLabel("els10-27FlowControlInterface").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27FlowControlInterface.setStatus('mandatory')
els10_27FlowControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 2), Integer32()).setLabel("els10-27FlowControlEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: els10_27FlowControlEnable.setStatus('mandatory')
els10_27FlowControlRxPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 3), Integer32()).setLabel("els10-27FlowControlRxPauseFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27FlowControlRxPauseFrames.setStatus('mandatory')
els10_27FlowControlTxPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 97, 9, 23, 4, 1, 4), Integer32()).setLabel("els10-27FlowControlTxPauseFrames").setMaxAccess("readonly")
if mibBuilder.loadTexts: els10_27FlowControlTxPauseFrames.setStatus('mandatory')
els10_27WriteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,2)).setLabel("els10-27WriteStatusTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27swdisWriteStatus"), ("CT-ELS10-MIB", "els10_27swdisDesc"))
els10_27PortFunctionsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,3)).setLabel("els10-27PortFunctionsTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27ifFunction"))
els10_27RxQueuesTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,4)).setLabel("els10-27RxQueuesTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27ifRxQueues"))
els10_27RxStormFlagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,5)).setLabel("els10-27RxStormFlagTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
els10_27TxCongestsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,6)).setLabel("els10-27TxCongestsTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27adminNAMReceiveCongests"))
els10_27DebugStringIdTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,8)).setLabel("els10-27DebugStringIdTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27debugStringID"), ("CT-ELS10-MIB", "els10_27debugString"))
els10_27LpbkOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,9)).setLabel("els10-27LpbkOperationTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27lpbkOperation"), ("CT-ELS10-MIB", "els10_27lpbkErrorNoReceives"), ("CT-ELS10-MIB", "els10_27lpbkErrorBadReceives"))
els10_27TrunkStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,10)).setLabel("els10-27TrunkStateTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkState"))
els10_27TrunkBridgeAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,11)).setLabel("els10-27TrunkBridgeAddrTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkRemoteBridgeAddr"))
els10_27TrunkIPAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,12)).setLabel("els10-27TrunkIPAddrTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkRemoteIp"))
els10_27TrunkErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,13)).setLabel("els10-27TrunkErrorTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkLastError"))
els10_27TrunkLinkOrdinalTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,14)).setLabel("els10-27TrunkLinkOrdinalTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkLinkOrdinal"))
els10_27TrunkLinkCountTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,15)).setLabel("els10-27TrunkLinkCountTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27trunkLinkCount"))
els10_27DiagUnitBootedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,16)).setLabel("els10-27DiagUnitBootedTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27adminFatalErr"))
els10_27StorageFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,17)).setLabel("els10-27StorageFailureTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
els10_27PortCongestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,18)).setLabel("els10-27PortCongestedTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("IF-MIB", "ifOutDiscards"))
els10_27TopChangeBegunTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,19)).setLabel("els10-27TopChangeBegunTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
els10_27TopChangeEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,20)).setLabel("els10-27TopChangeEndTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"))
els10_27IfErrorsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,21)).setLabel("els10-27IfErrorsTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"))
els10_27StRootIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,22)).setLabel("els10-27StRootIDTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpDesignatedRoot"))
els10_27StRootCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,23)).setLabel("els10-27StRootCostTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpRootCost"))
els10_27StRootPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,24)).setLabel("els10-27StRootPortTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpRootPort"))
els10_27StMaxAgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,25)).setLabel("els10-27StMaxAgeTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpMaxAge"))
els10_27StHelloTimeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,26)).setLabel("els10-27StHelloTimeTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpHelloTime"))
els10_27StForwardDelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,27)).setLabel("els10-27StForwardDelayTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpForwardDelay"))
els10_27StDesigRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,28)).setLabel("els10-27StDesigRootTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedRoot"))
els10_27StPortDesigBridgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,29)).setLabel("els10-27StPortDesigBridgeTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedBridge"))
els10_27StPortDesigCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,30)).setLabel("els10-27StPortDesigCostTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedCost"))
els10_27StPortDesigPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,31)).setLabel("els10-27StPortDesigPortTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"))
els10_27StPortStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,32)).setLabel("els10-27StPortStateTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortState"))
els10_27hwDiagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,100)).setLabel("els10-27hwDiagTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("CT-ELS10-MIB", "els10_27hwDiagCode"))
els10_27InvalidConfigurationFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,34)).setLabel("els10-27InvalidConfigurationFileTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"))
els10_27StInvalidFlashCodeImageTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,35)).setLabel("els10-27StInvalidFlashCodeImageTrap").setObjects(("CT-ELS10-MIB", "els10_27trapSeverity"), ("BRIDGE-MIB", "dot1dStpPortState"))
mibBuilder.exportSymbols("CT-ELS10-MIB", els10_27swNumber=els10_27swNumber, els10_27lpbkGoods=els10_27lpbkGoods, els10_27hwDiagTrap=els10_27hwDiagTrap, els10_27traceMaxTTL=els10_27traceMaxTTL, els10_27StRootIDTrap=els10_27StRootIDTrap, els10_27StorageFailureTrap=els10_27StorageFailureTrap, els10_27protoRipListen=els10_27protoRipListen, els10_27volmirrorMacEntry=els10_27volmirrorMacEntry, els10_27trapEntry=els10_27trapEntry, els10_27igmpCacheExpiryTime=els10_27igmpCacheExpiryTime, els10_27VlanConfigIndex=els10_27VlanConfigIndex, els10_27trapEntryText=els10_27trapEntryText, els10_27addrBlockSize=els10_27addrBlockSize, els10_27IfErrorsTrap=els10_27IfErrorsTrap, els10_27lpbkErrorNoReceives=els10_27lpbkErrorNoReceives, els10_27debugBase=els10_27debugBase, els10_27traceDataTimeout=els10_27traceDataTimeout, els10_27adminNMSIPAddr=els10_27adminNMSIPAddr, els10_27hwPortDiagPassed=els10_27hwPortDiagPassed, els10_27dot3RxLateColls=els10_27dot3RxLateColls, els10_27protoTrunking=els10_27protoTrunking, els10_27FlowControlThresholdValue=els10_27FlowControlThresholdValue, els10_27FlowControlEntry=els10_27FlowControlEntry, els10_27ifTxStormTime=els10_27ifTxStormTime, els10_27VlanGVRPEnable=els10_27VlanGVRPEnable, els10_27swFilesetEntry=els10_27swFilesetEntry, els10_27lpbkIncrements=els10_27lpbkIncrements, els10_27VlanStaticTable=els10_27VlanStaticTable, els10_27uartBaud=els10_27uartBaud, els10_27TrunkLinkOrdinalTrap=els10_27TrunkLinkOrdinalTrap, els10_27adminArpStatics=els10_27adminArpStatics, els10_27TopChangeBegunTrap=els10_27TopChangeBegunTrap, els10_27VlanVersionNumber=els10_27VlanVersionNumber, els10_27lpbkPktLength=els10_27lpbkPktLength, els10_27traceDestAddr=els10_27traceDestAddr, els10_27WorkGroupTable=els10_27WorkGroupTable, els10_27lpbkTable=els10_27lpbkTable, els10_27FlowControlTxPauseFrames=els10_27FlowControlTxPauseFrames, els10_27hwManufData=els10_27hwManufData, els10_27pingNumReceived=els10_27pingNumReceived, els10_27ipmInterfaceRtr=els10_27ipmInterfaceRtr, els10_27hwPortType=els10_27hwPortType, els10_27debug=els10_27debug, els10_27TrunkIPAddrTrap=els10_27TrunkIPAddrTrap, els10_27pingTimeOut=els10_27pingTimeOut, els10_27pingCount=els10_27pingCount, els10_27lpbkInterval=els10_27lpbkInterval, els10_27VlanNumActiveEntries=els10_27VlanNumActiveEntries, els10_27trapTable=els10_27trapTable, els10_27addrMAC=els10_27addrMAC, els10_27VlanFilterGVRPStatus=els10_27VlanFilterGVRPStatus, els10_27lpbkIndex=els10_27lpbkIndex, els10_27protoIfIndex=els10_27protoIfIndex, els10_27dot3LedOn=els10_27dot3LedOn, els10_27traceTime=els10_27traceTime, els10_27lpbk=els10_27lpbk, els10_27lpbkEntry=els10_27lpbkEntry, els10_27addrIndex=els10_27addrIndex, els10_27traceMgt=els10_27traceMgt, els10_27lpbkDestAddr=els10_27lpbkDestAddr, els10_27trunkLinkCount=els10_27trunkLinkCount, els10_27hwPortEntry=els10_27hwPortEntry, els10_27igmpCacheAddress=els10_27igmpCacheAddress, els10_27voligmpgroup=els10_27voligmpgroup, els10_27VlanStaticVID=els10_27VlanStaticVID, els10_27VlanStaticPort=els10_27VlanStaticPort, els10_27trapText=els10_27trapText, els10_27swSizes=els10_27swSizes, els10_27igmpQueryStatus=els10_27igmpQueryStatus, els10_27TrunkStateTrap=els10_27TrunkStateTrap, els10_27addr=els10_27addr, els10_27pingMax=els10_27pingMax, els10_27addrPort=els10_27addrPort, els10_27if=els10_27if, els10_27ifGoodTxFrames=els10_27ifGoodTxFrames, els10_27uartAlignmentErrors=els10_27uartAlignmentErrors, els10_27trunkRemoteBridgeAddr=els10_27trunkRemoteBridgeAddr, els10_27VlanConfigEgressEntry=els10_27VlanConfigEgressEntry, els10_27adminIpStatics=els10_27adminIpStatics, els10_27dot3Entry=els10_27dot3Entry, els10_27VlanConfigTable=els10_27VlanConfigTable, els10_27ifIndex=els10_27ifIndex, els10_27trapRetry=els10_27trapRetry, els10_27TxCongestsTrap=els10_27TxCongestsTrap, els10_27VlanConfigEgressTable=els10_27VlanConfigEgressTable, els10_27dot3Index=els10_27dot3Index, els10_27trunkRemoteIp=els10_27trunkRemoteIp, els10_27LpbkOperationTrap=els10_27LpbkOperationTrap, els10_27debugData=els10_27debugData, els10_27TopChangeEndTrap=els10_27TopChangeEndTrap, els10_27hwDiagCode=els10_27hwDiagCode, els10_27hwUpLinkManufData=els10_27hwUpLinkManufData, els10_27swFlashBank=els10_27swFlashBank, els10_27traceTable=els10_27traceTable, els10_27pingMgt=els10_27pingMgt, els10_27swdisWriteStatus=els10_27swdisWriteStatus, els10_27addrFlags=els10_27addrFlags, els10_27debugStringID=els10_27debugStringID, els10_27hwPortCount=els10_27hwPortCount, els10_27VlanEgressIndex=els10_27VlanEgressIndex, els10_27trapEntrySeverity=els10_27trapEntrySeverity, els10_27WorkGroupName=els10_27WorkGroupName, els10_27proto=els10_27proto, els10_27VlanEgressVID=els10_27VlanEgressVID, els10_27hw=els10_27hw, els10_27ifThresholdTime=els10_27ifThresholdTime, els10_27dot3SpeedSelection=els10_27dot3SpeedSelection, els10_27dot3TxBabbles=els10_27dot3TxBabbles, els10_27lpbkErrorBadReceives=els10_27lpbkErrorBadReceives, sysReset=sysReset, els10_27RxQueuesTrap=els10_27RxQueuesTrap, els10_27addrBlock=els10_27addrBlock, els10_27VlanOperatingMode=els10_27VlanOperatingMode, els10_27WorkGroupType=els10_27WorkGroupType, els10_27trunk=els10_27trunk, els10_27swdisConfigTotalTimeout=els10_27swdisConfigTotalTimeout, els10_27trapEnabled=els10_27trapEnabled, els10_27VlanResetDefaults=els10_27VlanResetDefaults, els10_27adminRipRouteDiscards=els10_27adminRipRouteDiscards, els10_27volmirrorMode=els10_27volmirrorMode, els10_27sprotoTransmitPacing=els10_27sprotoTransmitPacing, els10_27debugString=els10_27debugString, els10_27uartOverrunErrors=els10_27uartOverrunErrors, sys=sys, els10_27TrunkLinkCountTrap=els10_27TrunkLinkCountTrap, els10_27WorkGroupMaxCount=els10_27WorkGroupMaxCount, els10_27trapControlTable=els10_27trapControlTable, els10_27VlanConfigEstablish=els10_27VlanConfigEstablish, els10_27VlanBridgeConfig=els10_27VlanBridgeConfig, els10_27ifTable=els10_27ifTable, els10_27trapEntryIndex=els10_27trapEntryIndex, els10_27lpbkOperation=els10_27lpbkOperation, els10_27WorkGroupNextNumber=els10_27WorkGroupNextNumber, els10_27FlowControlBackPressure=els10_27FlowControlBackPressure, els10_27traceState=els10_27traceState, els10_27ifFunction=els10_27ifFunction, els10_27hwPortIndex=els10_27hwPortIndex, els10_27adminStorageFailure=els10_27adminStorageFailure, els10_27addrOperation=els10_27addrOperation, els10_27traceHopAddr=els10_27traceHopAddr, els10_27igmpPortDelay=els10_27igmpPortDelay, sysTrapPort=sysTrapPort, els10_27ifDescr=els10_27ifDescr, els10_27StPortDesigCostTrap=els10_27StPortDesigCostTrap, els10_27dot3TxJabbers=els10_27dot3TxJabbers, els10_27PortFunctionsTrap=els10_27PortFunctionsTrap, els10_27admin=els10_27admin, els10_27VlanConfigVlan=els10_27VlanConfigVlan, els10_27addrDynamicMax=els10_27addrDynamicMax, els10_27WorkGroupCurrentCount=els10_27WorkGroupCurrentCount, els10_27uart=els10_27uart, els10_27volipmgroup=els10_27volipmgroup, els10_27protoSuppressBpdu=els10_27protoSuppressBpdu, els10_27swStarts=els10_27swStarts, els10_27pingDataSize=els10_27pingDataSize, els10_27traceNMSAddr=els10_27traceNMSAddr, els10_27addrDynamics=els10_27addrDynamics, els10_27StPortDesigPortTrap=els10_27StPortDesigPortTrap, els10_27uartTable=els10_27uartTable, els10_27FlowControlCtl=els10_27FlowControlCtl, els10_27trunkIfIndex=els10_27trunkIfIndex, els10_27WriteStatusTrap=els10_27WriteStatusTrap, els10_27debugIndex=els10_27debugIndex, els10_27RxStormFlagTrap=els10_27RxStormFlagTrap, els10_27pingNumTransmitted=els10_27pingNumTransmitted, els10_27adminIpEntries=els10_27adminIpEntries, els10_27pingTable=els10_27pingTable, els10_27lpbkPktNum=els10_27lpbkPktNum, els10_27adminFatalErr=els10_27adminFatalErr, els10_27volmirrorMac1=els10_27volmirrorMac1, els10_27traceHop=els10_27traceHop, els10_27InvalidConfigurationFileTrap=els10_27InvalidConfigurationFileTrap, els10_27StPortStateTrap=els10_27StPortStateTrap, els10_27adminAnyPass=els10_27adminAnyPass, els10_27ifStatisticsTime=els10_27ifStatisticsTime, els10_27StRootCostTrap=els10_27StRootCostTrap, els10_27pingOperation=els10_27pingOperation, els10_27pingMin=els10_27pingMin, els10_27volmonitorPort=els10_27volmonitorPort, els10_27igmpCacheTable=els10_27igmpCacheTable, els10_27VlanConfigIPMask=els10_27VlanConfigIPMask, els10_27adminArpOverflows=els10_27adminArpOverflows, els10_27trunkState=els10_27trunkState, els10_27lpbkErrorOffset=els10_27lpbkErrorOffset, els10_27DiagUnitBootedTrap=els10_27DiagUnitBootedTrap, els10_27dot3RxRunts=els10_27dot3RxRunts, els10_27swdis=els10_27swdis, els10_27swdisDesc=els10_27swdisDesc, els10_27WorkGroupEntry=els10_27WorkGroupEntry, els10_27adminDisableButton=els10_27adminDisableButton, els10_27swType=els10_27swType, els10_27traceDataSize=els10_27traceDataSize, els10_27protoBridge=els10_27protoBridge, els10_27protoEntry=els10_27protoEntry, els10_27hwPortSubType=els10_27hwPortSubType, els10_27adminAuthenticationFailure=els10_27adminAuthenticationFailure, els10_27dot3=els10_27dot3, els10_27volmirrorIndex=els10_27volmirrorIndex, els10_27pingState=els10_27pingState, els10_27volmirrorPort=els10_27volmirrorPort, els10_27uartEntry=els10_27uartEntry, els10_27debugOperation=els10_27debugOperation, els10_27adminArpEntries=els10_27adminArpEntries, els10_27VlanConfigName=els10_27VlanConfigName, els10_27addrStatics=els10_27addrStatics, els10_27VlanConfigStatus=els10_27VlanConfigStatus, els10_27pingAvg=els10_27pingAvg, els10_27trapSeverityEnable=els10_27trapSeverityEnable, els10_27trapTime=els10_27trapTime, els10_27igmpCacheEntry=els10_27igmpCacheEntry, els10_27trapSeverityControlEntry=els10_27trapSeverityControlEntry, els10_27pingEntry=els10_27pingEntry, els10_27traceOperation=els10_27traceOperation, els10_27protoTable=els10_27protoTable, els10_27debugEntry=els10_27debugEntry, els10_27trapEntryNumber=els10_27trapEntryNumber, els10_27VlanFilterGVRPEntry=els10_27VlanFilterGVRPEntry, els10_27ifRxHwFCSs=els10_27ifRxHwFCSs, els10_27igmpCacheIfIndex=els10_27igmpCacheIfIndex, els10_27trapSeverityControlSeverity=els10_27trapSeverityControlSeverity, els10_27hwPortTable=els10_27hwPortTable, els10_27StRootPortTrap=els10_27StRootPortTrap, els10_27pingWait=els10_27pingWait, els10_27pingDataTimeout=els10_27pingDataTimeout, els10_27traceWait=els10_27traceWait, els10_27VlanStaticEstablish=els10_27VlanStaticEstablish, els10_27VlanFilterGVRPList=els10_27VlanFilterGVRPList, els10_27VlanEgressList=els10_27VlanEgressList, els10_27trapMgt=els10_27trapMgt, els10_27FlowControlInterface=els10_27FlowControlInterface, els10_27IPMulticastStatus=els10_27IPMulticastStatus, els10_27VlanFilterGVRPVID=els10_27VlanFilterGVRPVID, els10_27ifEntry=els10_27ifEntry, els10_27PortCongestedTrap=els10_27PortCongestedTrap, els10_27traceEntry=els10_27traceEntry, els10_27WorkGroupNumber=els10_27WorkGroupNumber, els10_27dot3TxCollisions=els10_27dot3TxCollisions, els10_27dot3Table=els10_27dot3Table, els10_27uartIndex=els10_27uartIndex, els10_27trunkEntry=els10_27trunkEntry, els10_27sw=els10_27sw, els10_27TrunkBridgeAddrTrap=els10_27TrunkBridgeAddrTrap, els10_27VlanConfigEntry=els10_27VlanConfigEntry, els10_27trunkLastError=els10_27trunkLastError, els10_27ifRxQueues=els10_27ifRxQueues, els10_27swdisAccess=els10_27swdisAccess, els10_27traceProbe=els10_27traceProbe, els10_27trapEntryTimeStamp=els10_27trapEntryTimeStamp, els10_27trapIncludeText=els10_27trapIncludeText, els10_27VlanConfigIP=els10_27VlanConfigIP, els10_27swBases=els10_27swBases, els10_27FlowControlPauseInteval=els10_27FlowControlPauseInteval, els10_27trapSeverityControlTable=els10_27trapSeverityControlTable, els10_27VlanMaxNumEntries=els10_27VlanMaxNumEntries)
mibBuilder.exportSymbols("CT-ELS10-MIB", els10_27ifRxQueueThreshTime=els10_27ifRxQueueThreshTime, els10_27lpbkErrorSent=els10_27lpbkErrorSent, els10_27swFilesetTable=els10_27swFilesetTable, els10_27swCount=els10_27swCount, els10_27adminRebootConfig=els10_27adminRebootConfig, els10_27StHelloTimeTrap=els10_27StHelloTimeTrap, els10_27TrunkErrorTrap=els10_27TrunkErrorTrap, els10_27VlanFilterGVRPIndex=els10_27VlanFilterGVRPIndex, els10_27=els10_27, els10_27StPortDesigBridgeTrap=els10_27StPortDesigBridgeTrap, els10_27hwUpLink=els10_27hwUpLink, els10_27VlanStaticMAC=els10_27VlanStaticMAC, els10_27ifTxStormCnt=els10_27ifTxStormCnt, els10_27adminLEDProgramOption=els10_27adminLEDProgramOption, els10_27VlanAccessList=els10_27VlanAccessList, els10_27adminButtonSelection=els10_27adminButtonSelection, els10_27ifThreshold=els10_27ifThreshold, els10_27adminGetPass=els10_27adminGetPass, els10_27trapSeverity=els10_27trapSeverity, els10_27DebugStringIdTrap=els10_27DebugStringIdTrap, els10_27VlanNumConfiguredEntries=els10_27VlanNumConfiguredEntries, els10_27trapControlEntry=els10_27trapControlEntry, els10_27pingNMSAddr=els10_27pingNMSAddr, els10_27debugTable=els10_27debugTable, els10_27StForwardDelayTrap=els10_27StForwardDelayTrap, els10_27WorkGroupPorts=els10_27WorkGroupPorts, els10_27VlanFilterGVRPTable=els10_27VlanFilterGVRPTable, els10_27addrDynamicOverflows=els10_27addrDynamicOverflows, els10_27VlanConfigPorts=els10_27VlanConfigPorts, els10_27dot3RxCollisions=els10_27dot3RxCollisions, els10_27trunkTable=els10_27trunkTable, sigma=sigma, els10_27VlanConfigVID=els10_27VlanConfigVID, els10_27volMirrorMacTable=els10_27volMirrorMacTable, els10_27StMaxAgeTrap=els10_27StMaxAgeTrap, els10_27ifForwardedChars=els10_27ifForwardedChars, els10_27ifGoodRxFrames=els10_27ifGoodRxFrames, els10_27dot3DuplexSelection=els10_27dot3DuplexSelection, els10_27adminStaticPreference=els10_27adminStaticPreference, els10_27swdisConfigRetryTime=els10_27swdisConfigRetryTime, els10_27trapIndex=els10_27trapIndex, els10_27traceNumProbes=els10_27traceNumProbes, els10_27FlowControlEnable=els10_27FlowControlEnable, els10_27VlanEgressStatus=els10_27VlanEgressStatus, els10_27trapNumber=els10_27trapNumber, els10_27FlowControlTable=els10_27FlowControlTable, els10_27dot3TPLinkOK=els10_27dot3TPLinkOK, els10_27lpbkErrorReceived=els10_27lpbkErrorReceived, els10_27workgroup=els10_27workgroup, els10_27swDesc=els10_27swDesc, els10_27igmpStatus=els10_27igmpStatus, els10_27StInvalidFlashCodeImageTrap=els10_27StInvalidFlashCodeImageTrap, sysID=sysID, els10_27VlanStaticEntry=els10_27VlanStaticEntry, els10_27trunkLastChange=els10_27trunkLastChange, els10_27lpbkErrorSize=els10_27lpbkErrorSize, els10_27trunkLinkOrdinal=els10_27trunkLinkOrdinal, els10_27VlanFilterGVRPEstablishVID=els10_27VlanFilterGVRPEstablishVID, els10_27volmirrorgroup=els10_27volmirrorgroup, els10_27adminRipPreference=els10_27adminRipPreference, els10_27hwAddr=els10_27hwAddr, els10_27ifRxQueueThresh=els10_27ifRxQueueThresh, els10_27swIndex=els10_27swIndex, els10_27debugLength=els10_27debugLength, els10_27adminNAMReceiveCongests=els10_27adminNAMReceiveCongests, els10_27swdisConfigIp=els10_27swdisConfigIp, els10_27StDesigRootTrap=els10_27StDesigRootTrap, els10_27addrNext=els10_27addrNext, els10_27FlowControlRxPauseFrames=els10_27FlowControlRxPauseFrames, els10_27igmpQueryCount=els10_27igmpQueryCount, els10_27pingDestAddr=els10_27pingDestAddr)
