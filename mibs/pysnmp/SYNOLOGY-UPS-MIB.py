#
# PySNMP MIB module SYNOLOGY-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYNOLOGY-UPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
Float, = mibBuilder.importSymbols("NET-SNMP-TC", "Float")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, Gauge32, MibIdentifier, TimeTicks, Bits, enterprises, IpAddress, iso, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "Gauge32", "MibIdentifier", "TimeTicks", "Bits", "enterprises", "IpAddress", "iso", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
synoUPS = ModuleIdentity((1, 3, 6, 1, 4, 1, 6574, 4))
synoUPS.setRevisions(('2013-09-11 00:00',))
if mibBuilder.loadTexts: synoUPS.setLastUpdated('201309110000Z')
if mibBuilder.loadTexts: synoUPS.setOrganization('www.synology.com')
synology = MibIdentifier((1, 3, 6, 1, 4, 1, 6574))
class NonNegativeInteger(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

upsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 1))
upsDeviceModel = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceModel.setStatus('current')
upsDeviceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceManufacturer.setStatus('current')
upsDeviceSerial = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceSerial.setStatus('current')
upsDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceType.setStatus('current')
upsDeviceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceDescription.setStatus('current')
upsDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceContact.setStatus('current')
upsDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceLocation.setStatus('current')
upsDevicePart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDevicePart.setStatus('current')
upsDeviceMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDeviceMACAddr.setStatus('current')
upsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2))
upsInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStatus.setStatus('current')
upsInfoAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoAlarm.setStatus('current')
upsInfoTime = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTime.setStatus('current')
upsInfoDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDate.setStatus('current')
upsInfoModel = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoModel.setStatus('current')
upsInfoMfr = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 6))
upsInfoMfrName = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoMfrName.setStatus('current')
upsInfoMfrDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoMfrDate.setStatus('current')
upsInfoSerial = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSerial.setStatus('current')
upsInfoVendorID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoVendorID.setStatus('current')
upsInfoProductID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoProductID.setStatus('current')
upsInfoFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 10))
upsInfoFirmwareName = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoFirmwareName.setStatus('current')
upsInfoFirmwareAux = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoFirmwareAux.setStatus('current')
upsInfoTemperature = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 11), Float()).setUnits('degree C').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTemperature.setStatus('current')
upsInfoLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 12))
upsInfoLoadValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 12, 1), Float()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoLoadValue.setStatus('current')
upsInfoLoadHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 12, 2), Float()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoLoadHigh.setStatus('current')
upsInfoID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoID.setStatus('current')
upsInfoDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14))
upsInfoDelayStart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14, 1), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDelayStart.setStatus('current')
upsInfoDelayReboot = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14, 2), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDelayReboot.setStatus('current')
upsInfoDelayShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 14, 3), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDelayShutdown.setStatus('current')
upsInfoTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15))
upsInfoTimerStart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15, 1), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTimerStart.setStatus('current')
upsInfoTimerReboot = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15, 2), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTimerReboot.setStatus('current')
upsInfoTimerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 15, 3), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTimerShutdown.setStatus('current')
upsInfoTest = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 16))
upsInfoTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 16, 1), NonNegativeInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTestInterval.setStatus('current')
upsInfoTestResult = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoTestResult.setStatus('current')
upsInfoDisplayLanguage = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoDisplayLanguage.setStatus('current')
upsInfoContacts = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoContacts.setStatus('current')
upsInfoEffciency = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 19), NonNegativeInteger()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoEffciency.setStatus('current')
upsInfoPower = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 20))
upsInfoPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 20, 1), Float()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoPowerValue.setStatus('current')
upsInfoPowerNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 20, 2), Float()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoPowerNominal.setStatus('current')
upsInfoRealPower = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 21))
upsInfoRealPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 21, 1), Float()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoRealPowerValue.setStatus('current')
upsInfoRealPowerNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 21, 2), Float()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoRealPowerNominal.setStatus('current')
upsInfoBeeperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoBeeperStatus.setStatus('current')
upsInfoType = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoType.setStatus('current')
upsInfoWatchdogStatus = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoWatchdogStatus.setStatus('current')
upsInfoStart = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25))
upsInfoStartAuto = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStartAuto.setStatus('current')
upsInfoStartBattery = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStartBattery.setStatus('current')
upsInfoStartReboot = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 2, 25, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoStartReboot.setStatus('current')
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3))
upsBatteryCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1))
upsBatteryChargeValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 1), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeValue.setStatus('current')
upsBatteryChargeLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 2), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeLow.setStatus('current')
upsBatteryChargeRestart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 3), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeRestart.setStatus('current')
upsBatteryChargeWarning = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 1, 4), Float()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeWarning.setStatus('current')
upsBatteryVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2))
upsBatteryVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 1), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageValue.setStatus('current')
upsBatteryVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 2), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageNominal.setStatus('current')
upsBatteryVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 3), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageLow.setStatus('current')
upsBatteryVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 2, 4), Float()).setUnits('Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltageHigh.setStatus('current')
upsBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 3), Float()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCapacity.setStatus('current')
upsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 4), Float()).setUnits('Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryCurrent.setStatus('current')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 5), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTemperature.setStatus('current')
upsBatteryRuntime = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6))
upsBatteryRuntimeValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6, 1), NonNegativeInteger()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeValue.setStatus('current')
upsBatteryRuntimeLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6, 2), NonNegativeInteger()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeLow.setStatus('current')
upsBatteryRuntimeRestart = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 6, 3), NonNegativeInteger()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryRuntimeRestart.setStatus('current')
upsBatteryAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryAlarmThreshold.setStatus('current')
upsBatteryDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryDate.setStatus('current')
upsBatteryMfrDate = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryMfrDate.setStatus('current')
upsBatteryPacks = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 10), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryPacks.setStatus('current')
upsBatteryPacksBad = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 11), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryPacksBad.setStatus('current')
upsBatteryType = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryType.setStatus('current')
upsBatteryProtection = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryProtection.setStatus('current')
upsBatteryEnergySave = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryEnergySave.setStatus('current')
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4))
upsInputVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1))
upsInputVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 1), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageValue.setStatus('current')
upsInputVoltageMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 2), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageMax.setStatus('current')
upsInputVoltageMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 3), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageMin.setStatus('current')
upsInputVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 4), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageNominal.setStatus('current')
upsInputVoltageExtend = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageExtend.setStatus('current')
upsInputVoltageFault = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 1, 6), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltageFault.setStatus('current')
upsInputTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2))
upsInputTransferReason = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferReason.setStatus('current')
upsInputTransferLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 2), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferLow.setStatus('current')
upsInputTransferHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 3), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferHigh.setStatus('current')
upsInputTransferLowMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 4), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferLowMin.setStatus('current')
upsInputTransferLowMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 5), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferLowMax.setStatus('current')
upsInputTransferHighMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 6), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferHighMin.setStatus('current')
upsInputTransferHighMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 7), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferHighMax.setStatus('current')
upsInputTransferBoostLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 8), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferBoostLow.setStatus('current')
upsInputTransferBoostHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 9), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferBoostHigh.setStatus('current')
upsInputTransferTrimLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 10), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferTrimLow.setStatus('current')
upsInputTransferTrimHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 2, 11), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputTransferTrimHigh.setStatus('current')
upsInputSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputSensitivity.setStatus('current')
upsInputQuality = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputQuality.setStatus('current')
upsInputCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 5))
upsInputCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 5, 1), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentValue.setStatus('current')
upsInputCurrentNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 5, 2), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrentNominal.setStatus('current')
upsInputFrequency = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6))
upsInputFrequencyValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 1), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyValue.setStatus('current')
upsInputFrequencyNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 2), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyNominal.setStatus('current')
upsInputFrequencyLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 3), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyLow.setStatus('current')
upsInputFrequencyHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 4), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyHigh.setStatus('current')
upsInputFrequencyExtend = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 4, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequencyExtend.setStatus('current')
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5))
upsOutputVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5, 1))
upsOutputVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 1, 1), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltageValue.setStatus('current')
upsOutputVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 1, 2), Float()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltageNominal.setStatus('current')
upsOutputFrequency = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5, 2))
upsOutputFrequencyValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 2, 1), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequencyValue.setStatus('current')
upsOutputFrequencyNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 2, 2), Float()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequencyNominal.setStatus('current')
upsOutputCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 5, 3))
upsOutputCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 3, 1), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentValue.setStatus('current')
upsOutputCurrentNominal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 5, 3, 2), Float()).setUnits('Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrentNominal.setStatus('current')
upsAmbient = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 6))
upsAmbientTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1))
upsAmbientTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 1), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureValue.setStatus('current')
upsAmbientTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setUnits('enabled/disabled').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureAlarm.setStatus('current')
upsAmbientTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 3), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureHigh.setStatus('current')
upsAmbientTemperatureLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 4), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureLow.setStatus('current')
upsAmbientTemperatureMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 5), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureMax.setStatus('current')
upsAmbientTemperatureMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 1, 6), Float()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientTemperatureMin.setStatus('current')
upsAmbientHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2))
upsAmbientHumidityValue = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 1), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityValue.setStatus('current')
upsAmbientHumidityAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setUnits('enabled/disabled').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityAlarm.setStatus('current')
upsAmbientHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 3), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityHigh.setStatus('current')
upsAmbientHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 4), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityLow.setStatus('current')
upsAmbientHumidityMax = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 5), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityMax.setStatus('current')
upsAmbientHumidityMin = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 6, 2, 6), Float()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAmbientHumidityMin.setStatus('current')
upsDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 7))
upsDriverName = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverName.setStatus('current')
upsDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverVersion.setStatus('current')
upsDriverVersionData = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverVersionData.setStatus('current')
upsDriverVersionInternal = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverVersionInternal.setStatus('current')
upsDriverPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 5), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverPollInterval.setStatus('current')
upsDriverPort = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverPort.setStatus('current')
upsDriverPollFrequency = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverPollFrequency.setStatus('current')
upsDriverProductID = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverProductID.setStatus('current')
upsDriverSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDriverSnmpVersion.setStatus('current')
upsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 8))
upsServerInfo = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsServerInfo.setStatus('current')
upsServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 6574, 4, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsServerVersion.setStatus('current')
upsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 9))
upsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 9, 1))
upsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 4, 9, 2))
upsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6574, 4, 9, 1, 1)).setObjects(("SYNOLOGY-UPS-MIB", "upsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    upsCompliance = upsCompliance.setStatus('current')
upsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6574, 4, 9, 2, 1)).setObjects(("SYNOLOGY-UPS-MIB", "upsDeviceModel"), ("SYNOLOGY-UPS-MIB", "upsDeviceManufacturer"), ("SYNOLOGY-UPS-MIB", "upsDeviceSerial"), ("SYNOLOGY-UPS-MIB", "upsDeviceType"), ("SYNOLOGY-UPS-MIB", "upsDeviceDescription"), ("SYNOLOGY-UPS-MIB", "upsDeviceContact"), ("SYNOLOGY-UPS-MIB", "upsDeviceLocation"), ("SYNOLOGY-UPS-MIB", "upsDevicePart"), ("SYNOLOGY-UPS-MIB", "upsDeviceMACAddr"), ("SYNOLOGY-UPS-MIB", "upsInfoStatus"), ("SYNOLOGY-UPS-MIB", "upsInfoAlarm"), ("SYNOLOGY-UPS-MIB", "upsInfoTime"), ("SYNOLOGY-UPS-MIB", "upsInfoDate"), ("SYNOLOGY-UPS-MIB", "upsInfoModel"), ("SYNOLOGY-UPS-MIB", "upsInfoMfrName"), ("SYNOLOGY-UPS-MIB", "upsInfoMfrDate"), ("SYNOLOGY-UPS-MIB", "upsInfoSerial"), ("SYNOLOGY-UPS-MIB", "upsInfoVendorID"), ("SYNOLOGY-UPS-MIB", "upsInfoProductID"), ("SYNOLOGY-UPS-MIB", "upsInfoFirmwareName"), ("SYNOLOGY-UPS-MIB", "upsInfoFirmwareAux"), ("SYNOLOGY-UPS-MIB", "upsInfoTemperature"), ("SYNOLOGY-UPS-MIB", "upsInfoLoadValue"), ("SYNOLOGY-UPS-MIB", "upsInfoLoadHigh"), ("SYNOLOGY-UPS-MIB", "upsInfoID"), ("SYNOLOGY-UPS-MIB", "upsInfoDelayStart"), ("SYNOLOGY-UPS-MIB", "upsInfoDelayReboot"), ("SYNOLOGY-UPS-MIB", "upsInfoDelayShutdown"), ("SYNOLOGY-UPS-MIB", "upsInfoTimerStart"), ("SYNOLOGY-UPS-MIB", "upsInfoTimerReboot"), ("SYNOLOGY-UPS-MIB", "upsInfoTimerShutdown"), ("SYNOLOGY-UPS-MIB", "upsInfoTestInterval"), ("SYNOLOGY-UPS-MIB", "upsInfoTestResult"), ("SYNOLOGY-UPS-MIB", "upsInfoDisplayLanguage"), ("SYNOLOGY-UPS-MIB", "upsInfoContacts"), ("SYNOLOGY-UPS-MIB", "upsInfoEffciency"), ("SYNOLOGY-UPS-MIB", "upsInfoPowerValue"), ("SYNOLOGY-UPS-MIB", "upsInfoPowerNominal"), ("SYNOLOGY-UPS-MIB", "upsInfoRealPowerValue"), ("SYNOLOGY-UPS-MIB", "upsInfoRealPowerNominal"), ("SYNOLOGY-UPS-MIB", "upsInfoBeeperStatus"), ("SYNOLOGY-UPS-MIB", "upsInfoType"), ("SYNOLOGY-UPS-MIB", "upsInfoWatchdogStatus"), ("SYNOLOGY-UPS-MIB", "upsInfoStartAuto"), ("SYNOLOGY-UPS-MIB", "upsInfoStartBattery"), ("SYNOLOGY-UPS-MIB", "upsInfoStartReboot"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeValue"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeLow"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeRestart"), ("SYNOLOGY-UPS-MIB", "upsBatteryChargeWarning"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageValue"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageNominal"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageLow"), ("SYNOLOGY-UPS-MIB", "upsBatteryVoltageHigh"), ("SYNOLOGY-UPS-MIB", "upsBatteryCapacity"), ("SYNOLOGY-UPS-MIB", "upsBatteryCurrent"), ("SYNOLOGY-UPS-MIB", "upsBatteryTemperature"), ("SYNOLOGY-UPS-MIB", "upsBatteryRuntimeValue"), ("SYNOLOGY-UPS-MIB", "upsBatteryRuntimeLow"), ("SYNOLOGY-UPS-MIB", "upsBatteryRuntimeRestart"), ("SYNOLOGY-UPS-MIB", "upsBatteryAlarmThreshold"), ("SYNOLOGY-UPS-MIB", "upsBatteryDate"), ("SYNOLOGY-UPS-MIB", "upsBatteryMfrDate"), ("SYNOLOGY-UPS-MIB", "upsBatteryPacks"), ("SYNOLOGY-UPS-MIB", "upsBatteryPacksBad"), ("SYNOLOGY-UPS-MIB", "upsBatteryType"), ("SYNOLOGY-UPS-MIB", "upsBatteryProtection"), ("SYNOLOGY-UPS-MIB", "upsBatteryEnergySave"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageValue"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageMax"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageMin"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageNominal"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageExtend"), ("SYNOLOGY-UPS-MIB", "upsInputVoltageFault"), ("SYNOLOGY-UPS-MIB", "upsInputTransferReason"), ("SYNOLOGY-UPS-MIB", "upsInputTransferLow"), ("SYNOLOGY-UPS-MIB", "upsInputTransferHigh"), ("SYNOLOGY-UPS-MIB", "upsInputTransferLowMin"), ("SYNOLOGY-UPS-MIB", "upsInputTransferLowMax"), ("SYNOLOGY-UPS-MIB", "upsInputTransferHighMin"), ("SYNOLOGY-UPS-MIB", "upsInputTransferHighMax"), ("SYNOLOGY-UPS-MIB", "upsInputTransferBoostLow"), ("SYNOLOGY-UPS-MIB", "upsInputTransferBoostHigh"), ("SYNOLOGY-UPS-MIB", "upsInputTransferTrimLow"), ("SYNOLOGY-UPS-MIB", "upsInputTransferTrimHigh"), ("SYNOLOGY-UPS-MIB", "upsInputSensitivity"), ("SYNOLOGY-UPS-MIB", "upsInputQuality"), ("SYNOLOGY-UPS-MIB", "upsInputCurrentValue"), ("SYNOLOGY-UPS-MIB", "upsInputCurrentNominal"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyValue"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyNominal"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyLow"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyHigh"), ("SYNOLOGY-UPS-MIB", "upsInputFrequencyExtend"), ("SYNOLOGY-UPS-MIB", "upsOutputVoltageValue"), ("SYNOLOGY-UPS-MIB", "upsOutputVoltageNominal"), ("SYNOLOGY-UPS-MIB", "upsOutputFrequencyValue"), ("SYNOLOGY-UPS-MIB", "upsOutputFrequencyNominal"), ("SYNOLOGY-UPS-MIB", "upsOutputCurrentValue"), ("SYNOLOGY-UPS-MIB", "upsOutputCurrentNominal"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureValue"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureAlarm"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureHigh"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureLow"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureMax"), ("SYNOLOGY-UPS-MIB", "upsAmbientTemperatureMin"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityValue"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityAlarm"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityHigh"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityLow"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityMax"), ("SYNOLOGY-UPS-MIB", "upsAmbientHumidityMin"), ("SYNOLOGY-UPS-MIB", "upsDriverName"), ("SYNOLOGY-UPS-MIB", "upsDriverVersion"), ("SYNOLOGY-UPS-MIB", "upsDriverVersionData"), ("SYNOLOGY-UPS-MIB", "upsDriverVersionInternal"), ("SYNOLOGY-UPS-MIB", "upsDriverPollInterval"), ("SYNOLOGY-UPS-MIB", "upsDriverPort"), ("SYNOLOGY-UPS-MIB", "upsDriverPollFrequency"), ("SYNOLOGY-UPS-MIB", "upsDriverProductID"), ("SYNOLOGY-UPS-MIB", "upsDriverSnmpVersion"), ("SYNOLOGY-UPS-MIB", "upsServerInfo"), ("SYNOLOGY-UPS-MIB", "upsServerVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    upsGroup = upsGroup.setStatus('current')
mibBuilder.exportSymbols("SYNOLOGY-UPS-MIB", upsInfoLoad=upsInfoLoad, upsInfoSerial=upsInfoSerial, upsInfoDisplayLanguage=upsInfoDisplayLanguage, upsInfoStartReboot=upsInfoStartReboot, upsInfoPowerNominal=upsInfoPowerNominal, upsInputVoltageValue=upsInputVoltageValue, upsInputTransferLowMax=upsInputTransferLowMax, upsDevice=upsDevice, upsInputFrequencyExtend=upsInputFrequencyExtend, upsInputFrequencyNominal=upsInputFrequencyNominal, upsAmbientHumidityHigh=upsAmbientHumidityHigh, upsInputCurrentValue=upsInputCurrentValue, upsInfoDelayStart=upsInfoDelayStart, upsInputFrequency=upsInputFrequency, upsInputVoltageFault=upsInputVoltageFault, upsBatteryVoltageValue=upsBatteryVoltageValue, upsInfoDelayReboot=upsInfoDelayReboot, upsAmbientHumidityValue=upsAmbientHumidityValue, upsAmbientHumidityMin=upsAmbientHumidityMin, upsDeviceMACAddr=upsDeviceMACAddr, upsBatteryVoltageHigh=upsBatteryVoltageHigh, upsInputFrequencyHigh=upsInputFrequencyHigh, upsInputTransferHighMax=upsInputTransferHighMax, upsAmbientTemperatureMin=upsAmbientTemperatureMin, upsInfoTimerShutdown=upsInfoTimerShutdown, upsBatteryChargeWarning=upsBatteryChargeWarning, upsOutputFrequencyNominal=upsOutputFrequencyNominal, upsBatteryProtection=upsBatteryProtection, upsInput=upsInput, upsAmbientHumidityAlarm=upsAmbientHumidityAlarm, upsBatteryTemperature=upsBatteryTemperature, upsInfoTimer=upsInfoTimer, upsInfoContacts=upsInfoContacts, upsInputFrequencyValue=upsInputFrequencyValue, upsGroups=upsGroups, upsInfoRealPowerValue=upsInfoRealPowerValue, upsInfoTest=upsInfoTest, upsInputVoltageMax=upsInputVoltageMax, upsDriverSnmpVersion=upsDriverSnmpVersion, upsBattery=upsBattery, upsAmbientTemperatureHigh=upsAmbientTemperatureHigh, upsAmbientTemperatureMax=upsAmbientTemperatureMax, upsBatteryVoltageNominal=upsBatteryVoltageNominal, upsDriverName=upsDriverName, upsInfoTimerStart=upsInfoTimerStart, upsInfoTemperature=upsInfoTemperature, upsAmbientHumidityMax=upsAmbientHumidityMax, upsAmbientHumidity=upsAmbientHumidity, upsInputTransfer=upsInputTransfer, upsOutputFrequencyValue=upsOutputFrequencyValue, upsCompliances=upsCompliances, upsDevicePart=upsDevicePart, upsInfoLoadValue=upsInfoLoadValue, upsAmbientHumidityLow=upsAmbientHumidityLow, upsInfoMfrName=upsInfoMfrName, upsBatteryRuntimeValue=upsBatteryRuntimeValue, upsDeviceModel=upsDeviceModel, upsBatteryRuntimeRestart=upsBatteryRuntimeRestart, upsDeviceType=upsDeviceType, upsDriverPort=upsDriverPort, upsDriverVersionInternal=upsDriverVersionInternal, NonNegativeInteger=NonNegativeInteger, upsBatteryChargeLow=upsBatteryChargeLow, upsDriverVersion=upsDriverVersion, upsDeviceLocation=upsDeviceLocation, upsOutputCurrent=upsOutputCurrent, upsOutputVoltageValue=upsOutputVoltageValue, upsDriver=upsDriver, upsCompliance=upsCompliance, upsInputVoltageExtend=upsInputVoltageExtend, upsInputVoltage=upsInputVoltage, upsInputVoltageMin=upsInputVoltageMin, upsInputQuality=upsInputQuality, upsBatteryRuntime=upsBatteryRuntime, upsBatteryVoltage=upsBatteryVoltage, upsAmbientTemperatureValue=upsAmbientTemperatureValue, upsInfoEffciency=upsInfoEffciency, upsInfoAlarm=upsInfoAlarm, upsBatteryRuntimeLow=upsBatteryRuntimeLow, upsInputTransferLowMin=upsInputTransferLowMin, upsConformance=upsConformance, upsInputTransferTrimHigh=upsInputTransferTrimHigh, upsInfoType=upsInfoType, upsServer=upsServer, upsInfoMfrDate=upsInfoMfrDate, upsBatteryChargeRestart=upsBatteryChargeRestart, upsInfoFirmwareAux=upsInfoFirmwareAux, upsDriverPollInterval=upsDriverPollInterval, upsDeviceManufacturer=upsDeviceManufacturer, upsInfo=upsInfo, upsInfoRealPowerNominal=upsInfoRealPowerNominal, upsInputTransferBoostLow=upsInputTransferBoostLow, upsOutput=upsOutput, upsBatteryCharge=upsBatteryCharge, upsAmbientTemperatureLow=upsAmbientTemperatureLow, upsDeviceDescription=upsDeviceDescription, upsInfoStartAuto=upsInfoStartAuto, upsInfoFirmwareName=upsInfoFirmwareName, upsBatteryEnergySave=upsBatteryEnergySave, upsInfoBeeperStatus=upsInfoBeeperStatus, upsOutputVoltage=upsOutputVoltage, upsBatteryType=upsBatteryType, upsInfoWatchdogStatus=upsInfoWatchdogStatus, upsGroup=upsGroup, upsInputVoltageNominal=upsInputVoltageNominal, upsOutputCurrentValue=upsOutputCurrentValue, upsInfoStart=upsInfoStart, upsInfoDelayShutdown=upsInfoDelayShutdown, upsBatteryPacksBad=upsBatteryPacksBad, upsInfoPowerValue=upsInfoPowerValue, upsInfoStatus=upsInfoStatus, upsAmbient=upsAmbient, upsAmbientTemperatureAlarm=upsAmbientTemperatureAlarm, synology=synology, upsInfoTestResult=upsInfoTestResult, upsInputTransferTrimLow=upsInputTransferTrimLow, upsInfoProductID=upsInfoProductID, upsInputTransferReason=upsInputTransferReason, upsInfoMfr=upsInfoMfr, upsInfoTimerReboot=upsInfoTimerReboot, upsInfoVendorID=upsInfoVendorID, upsBatteryAlarmThreshold=upsBatteryAlarmThreshold, upsInputCurrent=upsInputCurrent, upsServerInfo=upsServerInfo, upsBatteryCurrent=upsBatteryCurrent, upsOutputFrequency=upsOutputFrequency, upsInfoLoadHigh=upsInfoLoadHigh, PYSNMP_MODULE_ID=synoUPS, upsAmbientTemperature=upsAmbientTemperature, synoUPS=synoUPS, upsDeviceSerial=upsDeviceSerial, upsInputFrequencyLow=upsInputFrequencyLow, upsInputTransferHigh=upsInputTransferHigh, upsInputSensitivity=upsInputSensitivity, upsInfoDelay=upsInfoDelay, upsInfoFirmware=upsInfoFirmware, upsInfoPower=upsInfoPower, upsDriverVersionData=upsDriverVersionData, upsBatteryMfrDate=upsBatteryMfrDate, upsBatteryPacks=upsBatteryPacks, upsDeviceContact=upsDeviceContact, upsBatteryChargeValue=upsBatteryChargeValue, upsInputTransferBoostHigh=upsInputTransferBoostHigh, upsBatteryDate=upsBatteryDate, upsInfoStartBattery=upsInfoStartBattery, upsInfoTime=upsInfoTime, upsOutputCurrentNominal=upsOutputCurrentNominal, upsServerVersion=upsServerVersion, upsBatteryCapacity=upsBatteryCapacity, upsInputCurrentNominal=upsInputCurrentNominal, upsDriverPollFrequency=upsDriverPollFrequency, upsInfoDate=upsInfoDate, upsInfoRealPower=upsInfoRealPower, upsInfoID=upsInfoID, upsInputTransferHighMin=upsInputTransferHighMin, upsBatteryVoltageLow=upsBatteryVoltageLow, upsOutputVoltageNominal=upsOutputVoltageNominal, upsInputTransferLow=upsInputTransferLow, upsInfoTestInterval=upsInfoTestInterval, upsDriverProductID=upsDriverProductID, upsInfoModel=upsInfoModel)
