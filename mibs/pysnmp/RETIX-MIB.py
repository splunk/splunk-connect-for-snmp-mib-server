#
# PySNMP MIB module RETIX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RETIX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:47:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("RFC1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, Unsigned32, ObjectIdentity, MibIdentifier, Gauge32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, IpAddress, Counter32, Counter64, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Gauge32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "IpAddress", "Counter32", "Counter64", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
retix = MibIdentifier((1, 3, 6, 1, 4, 1, 72))
station = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 1))
lapb = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 2))
ieee8023 = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 3))
phySerIf = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 4))
mlink = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 5))
lan = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 6))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 7))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 8))
router = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 10))
boot = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 11))
boothelper = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 12))
remote = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 13))
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 13, 1))
decnet = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 13, 2))
rmtLapb = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 13, 3))
x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 13, 4))
stationTime = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationTime.setStatus('mandatory')
stationCountResets = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationCountResets.setStatus('mandatory')
freeBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeBufferCount.setStatus('mandatory')
freeHeaderCount = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeHeaderCount.setStatus('mandatory')
physBlkSize = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physBlkSize.setStatus('mandatory')
newPhysBlkSize = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newPhysBlkSize.setStatus('mandatory')
resetStation = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetStation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStation.setStatus('mandatory')
initStation = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("initialize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initStation.setStatus('mandatory')
resetStats = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetStats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStats.setStatus('mandatory')
processorLoading = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorLoading.setStatus('mandatory')
trapDestinationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 1, 11))
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 72, 1, 11, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('mandatory')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 1, 11, 1, 1), ).setIndexNames((0, "RETIX-MIB", "trapDestEntryIpAddr"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('mandatory')
trapDestEntryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 11, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestEntryIpAddr.setStatus('mandatory')
trapDestEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestEntryCommunityName.setStatus('mandatory')
trapDestEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestEntryType.setStatus('mandatory')
trapDestAction = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestAction.setStatus('mandatory')
trapDestPage = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(240, 240)).setFixedLength(240)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestPage.setStatus('mandatory')
passWord = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passWord.setStatus('mandatory')
snmpAccessPolicyObject = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 1, 13))
snmpAccessPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 72, 1, 13, 1), )
if mibBuilder.loadTexts: snmpAccessPolicyTable.setStatus('mandatory')
snmpAccessPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 1, 13, 1, 1), ).setIndexNames((0, "RETIX-MIB", "accessPolicyIndex"))
if mibBuilder.loadTexts: snmpAccessPolicyEntry.setStatus('mandatory')
accessPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPolicyIndex.setStatus('mandatory')
communityName = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 13, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityName.setStatus('mandatory')
accessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessMode.setStatus('mandatory')
snmpAccessPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessPolicyType.setStatus('mandatory')
snmpAccessPolicyAction = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessPolicyAction.setStatus('mandatory')
snmpAccessPolicyPage = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 13, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessPolicyPage.setStatus('mandatory')
authenticationTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationTrapStatus.setStatus('mandatory')
serialTxQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialTxQueueSize.setStatus('mandatory')
internalQueueCurrentLength = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalQueueCurrentLength.setStatus('mandatory')
queueUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueUpperLimit.setStatus('mandatory')
lanQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 72, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanQueueSize.setStatus('mandatory')
lapbNumber = MibScalar((1, 3, 6, 1, 4, 1, 72, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbNumber.setStatus('mandatory')
lapbTable = MibTable((1, 3, 6, 1, 4, 1, 72, 2, 2), )
if mibBuilder.loadTexts: lapbTable.setStatus('mandatory')
lapbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 2, 2, 1), ).setIndexNames((0, "RETIX-MIB", "lapbIndex"))
if mibBuilder.loadTexts: lapbEntry.setStatus('mandatory')
lapbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbIndex.setStatus('mandatory')
lapbModeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbModeT1.setStatus('mandatory')
lapbAutoT1value = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbAutoT1value.setStatus('mandatory')
lapbManualT1value = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbManualT1value.setStatus('mandatory')
lapbWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbWindow.setStatus('mandatory')
lapbPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbPolarity.setStatus('mandatory')
lapbCountResets = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountResets.setStatus('mandatory')
lapbCountSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountSentFrames.setStatus('mandatory')
lapbCountRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRcvFrames.setStatus('mandatory')
lapbCountSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountSentOctets.setStatus('mandatory')
lapbCountRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRcvOctets.setStatus('mandatory')
lapbCountAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountAborts.setStatus('mandatory')
lapbCountCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountCrcErrors.setStatus('mandatory')
lapbState = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbState.setStatus('mandatory')
lapbLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbLastResetTime.setStatus('mandatory')
lapbLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbLastResetReason.setStatus('mandatory')
lapbLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbLinkReset.setStatus('mandatory')
lapbRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 72, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbRetryCount.setStatus('mandatory')
ieee8023Number = MibScalar((1, 3, 6, 1, 4, 1, 72, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023Number.setStatus('mandatory')
ieee8023Table = MibTable((1, 3, 6, 1, 4, 1, 72, 3, 2), )
if mibBuilder.loadTexts: ieee8023Table.setStatus('mandatory')
ieee8023Entry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 3, 2, 1), ).setIndexNames((0, "RETIX-MIB", "ieee8023Index"))
if mibBuilder.loadTexts: ieee8023Entry.setStatus('mandatory')
ieee8023Index = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023Index.setStatus('mandatory')
ieee8023FramesTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FramesTransmittedOks.setStatus('mandatory')
ieee8023SingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023SingleCollisionFrames.setStatus('mandatory')
ieee8023MultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MultipleCollisionFrames.setStatus('mandatory')
ieee8023OctetsTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023OctetsTransmittedOks.setStatus('mandatory')
ieee8023DeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023DeferredTransmissions.setStatus('mandatory')
ieee8023MulticastFramesTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MulticastFramesTransmittedOks.setStatus('mandatory')
ieee8023BroadcastFramesTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023BroadcastFramesTransmittedOks.setStatus('mandatory')
ieee8023LateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023LateCollisions.setStatus('mandatory')
ieee8023ExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023ExcessiveCollisions.setStatus('mandatory')
ieee8023InternalMACTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023InternalMACTransmitErrors.setStatus('mandatory')
ieee8023CarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023CarrierSenseErrors.setStatus('mandatory')
ieee8023ExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023ExcessiveDeferrals.setStatus('mandatory')
ieee8023FramesReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FramesReceivedOks.setStatus('mandatory')
ieee8023OctetsReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023OctetsReceivedOks.setStatus('mandatory')
ieee8023MulticastFramesReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MulticastFramesReceivedOks.setStatus('mandatory')
ieee8023BroadcastFramesReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023BroadcastFramesReceivedOks.setStatus('mandatory')
ieee8023FrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FrameTooLongs.setStatus('mandatory')
ieee8023AlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023AlignmentErrors.setStatus('mandatory')
ieee8023FCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FCSErrors.setStatus('mandatory')
ieee8023inRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023inRangeLengthErrors.setStatus('mandatory')
ieee8023outOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023outOfRangeLengthFields.setStatus('mandatory')
ieee8023InternalMACReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023InternalMACReceiveErrors.setStatus('mandatory')
ieee8023InitializeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("initialize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023InitializeMAC.setStatus('mandatory')
ieee8023PromiscuousReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023PromiscuousReceiveStatus.setStatus('mandatory')
ieee8023MACSubLayerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023MACSubLayerStatus.setStatus('mandatory')
ieee8023TransmitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023TransmitStatus.setStatus('mandatory')
ieee8023MulticastReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023MulticastReceiveStatus.setStatus('mandatory')
ieee8023MACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MACAddress.setStatus('mandatory')
ieee8023SQETestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023SQETestErrors.setStatus('mandatory')
ieee8023NewMACAddress = MibTable((1, 3, 6, 1, 4, 1, 72, 3, 3), )
if mibBuilder.loadTexts: ieee8023NewMACAddress.setStatus('mandatory')
ieee8023NewMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 3, 3, 1), ).setIndexNames((0, "RETIX-MIB", "ieee8023NewMACAddressIndex"))
if mibBuilder.loadTexts: ieee8023NewMACAddressEntry.setStatus('mandatory')
ieee8023NewMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023NewMACAddressIndex.setStatus('mandatory')
ieee8023NewMACAddressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023NewMACAddressValue.setStatus('mandatory')
phySerIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 72, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfNumber.setStatus('mandatory')
phySerIfTable = MibTable((1, 3, 6, 1, 4, 1, 72, 4, 2), )
if mibBuilder.loadTexts: phySerIfTable.setStatus('mandatory')
phySerIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 4, 2, 1), ).setIndexNames((0, "RETIX-MIB", "phySerIfIndex"))
if mibBuilder.loadTexts: phySerIfEntry.setStatus('mandatory')
phySerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfIndex.setStatus('mandatory')
phySerIfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("x21dte", 1), ("x21dce", 2), ("rs449", 3), ("g703", 4), ("v35", 5), ("v35btb", 6), ("rs232", 7), ("t1", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfInterfaceType.setStatus('mandatory')
phySerIfMeasuredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfMeasuredSpeed.setStatus('mandatory')
phySerIfIsSpeedsettable = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfIsSpeedsettable.setStatus('mandatory')
phySerIfPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2400, 4800, 9600, 19200, 24000, 32000, 48000, 64000, 256000, 512000, 1024000, 2048000))).clone(namedValues=NamedValues(("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b9600", 9600), ("b19200", 19200), ("b24000", 24000), ("b32000", 32000), ("b48000", 48000), ("b64000", 64000), ("b256000", 256000), ("b512000", 512000), ("b1024000", 1024000), ("b2048000", 2048000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfPortSpeed.setStatus('mandatory')
phySerIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfTransitDelay.setStatus('mandatory')
phySerIfT1clockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1clockSource.setStatus('mandatory')
phySerIfT1SlotLvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1SlotLvalue.setStatus('mandatory')
phySerIfT1SlotHvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1SlotHvalue.setStatus('mandatory')
phySerIfT1dRatePerChan = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1dRatePerChan.setStatus('mandatory')
phySerIfT1frameAndCode = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1frameAndCode.setStatus('mandatory')
phySerIfPartnerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfPartnerAddress.setStatus('mandatory')
mlinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 72, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkNumber.setStatus('mandatory')
mlinkTable = MibTable((1, 3, 6, 1, 4, 1, 72, 5, 2), )
if mibBuilder.loadTexts: mlinkTable.setStatus('mandatory')
mlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 5, 2, 1), ).setIndexNames((0, "RETIX-MIB", "mlinkIndex"))
if mibBuilder.loadTexts: mlinkEntry.setStatus('mandatory')
mlinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkIndex.setStatus('mandatory')
mlinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkState.setStatus('mandatory')
mlinkSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkSendSeq.setStatus('mandatory')
mlinkRcvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkRcvSeq.setStatus('mandatory')
mlinkSendUpperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkSendUpperEdge.setStatus('mandatory')
mlinkRcvUpperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkRcvUpperEdge.setStatus('mandatory')
mlinkLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkLostFrames.setStatus('mandatory')
deletedMlinkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deletedMlinkFrames.setStatus('mandatory')
expressQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressQueueCurrentLength.setStatus('mandatory')
expressQueueUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressQueueUpperLimit.setStatus('mandatory')
hiPriQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQueueCurrentLength.setStatus('mandatory')
hiPriQueueUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQueueUpperLimit.setStatus('mandatory')
loPriQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loPriQueueCurrentLength.setStatus('mandatory')
loPriQueueUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loPriQueueUpperLimit.setStatus('mandatory')
mlinkWindow = MibScalar((1, 3, 6, 1, 4, 1, 72, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlinkWindow.setStatus('mandatory')
mlinkRxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 72, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlinkRxTimeout.setStatus('mandatory')
lanInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 72, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenBase5", 1), ("oneBase5", 2), ("tenBase2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanInterfaceType.setStatus('mandatory')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
bridgeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 72, 7, 2), )
if mibBuilder.loadTexts: bridgeStatsTable.setStatus('mandatory')
bridgeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 7, 2, 1), ).setIndexNames((0, "RETIX-MIB", "bridgeStatsIndex"))
if mibBuilder.loadTexts: bridgeStatsEntry.setStatus('mandatory')
bridgeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsIndex.setStatus('mandatory')
averageForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageForwardedFrames.setStatus('mandatory')
maxForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxForwardedFrames.setStatus('mandatory')
averageRejectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageRejectedFrames.setStatus('mandatory')
maxRejectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRejectedFrames.setStatus('mandatory')
lanAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanAccepts.setStatus('mandatory')
lanRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRejects.setStatus('mandatory')
deletedLanFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deletedLanFrames.setStatus('mandatory')
stpTable = MibTable((1, 3, 6, 1, 4, 1, 72, 7, 3), )
if mibBuilder.loadTexts: stpTable.setStatus('mandatory')
stpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 7, 3, 1), ).setIndexNames((0, "RETIX-MIB", "stpIndex"))
if mibBuilder.loadTexts: stpEntry.setStatus('mandatory')
stpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpIndex.setStatus('mandatory')
pathCostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCostMode.setStatus('mandatory')
pathCostAutoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathCostAutoValue.setStatus('mandatory')
pathCostManualValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCostManualValue.setStatus('mandatory')
portSpatState = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpatState.setStatus('mandatory')
portPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriorityMode.setStatus('mandatory')
portPriorityAutoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPriorityAutoValue.setStatus('mandatory')
portPriorityManualValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriorityManualValue.setStatus('mandatory')
spanningTree = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTree.setStatus('mandatory')
spatPriority = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatPriority.setStatus('mandatory')
spatHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatHelloTimer.setStatus('mandatory')
spatResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatResetTimer.setStatus('mandatory')
spatVersion = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 8))).clone(namedValues=NamedValues(("revisionC", 3), ("revision8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatVersion.setStatus('mandatory')
spanningMcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningMcastAddr.setStatus('mandatory')
operatingMode = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatingMode.setStatus('mandatory')
preconfSourceFilter = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preconfSourceFilter.setStatus('mandatory')
typeFilter = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: typeFilter.setStatus('mandatory')
typePrioritisation = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: typePrioritisation.setStatus('mandatory')
dynamicLearningInLM = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLearningInLM.setStatus('mandatory')
forgetAddressTimer = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forgetAddressTimer.setStatus('mandatory')
deleteAddressTimer = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteAddressTimer.setStatus('mandatory')
multicastDisposition = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastDisposition.setStatus('mandatory')
filterMatches = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMatches.setStatus('mandatory')
ieeeFormatFilter = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieeeFormatFilter.setStatus('mandatory')
priorityMatches = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityMatches.setStatus('mandatory')
ieeeFormatPriority = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieeeFormatPriority.setStatus('mandatory')
averagePeriod = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averagePeriod.setStatus('mandatory')
triangulation = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: triangulation.setStatus('mandatory')
adaptiveRouting = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveRouting.setStatus('mandatory')
adaptiveMcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveMcastAddr.setStatus('mandatory')
arAddressInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 7, 26))
standbyRemote = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyRemote.setStatus('mandatory')
standbyLocal = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 26, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyLocal.setStatus('mandatory')
activeRemote = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeRemote.setStatus('mandatory')
activeLocal = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 26, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeLocal.setStatus('mandatory')
maxSerialLoading = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxSerialLoading.setStatus('mandatory')
serialLoadPeriod = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 50, 60))).clone(namedValues=NamedValues(("ten", 10), ("twenty", 20), ("thirty", 30), ("forty", 40), ("fifty", 50), ("sixty", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialLoadPeriod.setStatus('mandatory')
serialLoading = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialLoading.setStatus('mandatory')
filteringDataBaseTable = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 7, 30))
filteringDbTable = MibTable((1, 3, 6, 1, 4, 1, 72, 7, 30, 1), )
if mibBuilder.loadTexts: filteringDbTable.setStatus('mandatory')
filteringDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 7, 30, 1, 1), ).setIndexNames((0, "RETIX-MIB", "filteringDbMacAddress"))
if mibBuilder.loadTexts: filteringDbEntry.setStatus('mandatory')
filteringDbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 30, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbMacAddress.setStatus('mandatory')
filteringDbDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 30, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbDisposition.setStatus('mandatory')
filteringDbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 30, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbStatus.setStatus('mandatory')
filteringDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbType.setStatus('mandatory')
filteringDbAction = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbAction.setStatus('mandatory')
priorityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 7, 31))
prioritySubTable = MibTable((1, 3, 6, 1, 4, 1, 72, 7, 31, 1), )
if mibBuilder.loadTexts: prioritySubTable.setStatus('mandatory')
priorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 7, 31, 1, 1), ).setIndexNames((0, "RETIX-MIB", "priorityTableEntryValue"))
if mibBuilder.loadTexts: priorityTableEntry.setStatus('mandatory')
priorityTableEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 31, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityTableEntryValue.setStatus('mandatory')
priorityTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityTableEntryType.setStatus('mandatory')
priorityTableAction = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityTableAction.setStatus('mandatory')
priorityPage = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 31, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityPage.setStatus('optional')
filterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 7, 32))
filterSubTable = MibTable((1, 3, 6, 1, 4, 1, 72, 7, 32, 1), )
if mibBuilder.loadTexts: filterSubTable.setStatus('mandatory')
filterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 7, 32, 1, 1), ).setIndexNames((0, "RETIX-MIB", "filterTableEntryValue"))
if mibBuilder.loadTexts: filterTableEntry.setStatus('mandatory')
filterTableEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 32, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableEntryValue.setStatus('mandatory')
filterTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 7, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableEntryType.setStatus('mandatory')
filterTableAction = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableAction.setStatus('mandatory')
filterPage = MibScalar((1, 3, 6, 1, 4, 1, 72, 7, 32, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPage.setStatus('mandatory')
ipRSTable = MibTable((1, 3, 6, 1, 4, 1, 72, 10, 1), )
if mibBuilder.loadTexts: ipRSTable.setStatus('mandatory')
ipRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 10, 1, 1), ).setIndexNames((0, "RETIX-MIB", "ipRSIndex"))
if mibBuilder.loadTexts: ipRSEntry.setStatus('mandatory')
ipRSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRSIndex.setStatus('mandatory')
gwProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8))).clone(namedValues=NamedValues(("none", 1), ("rip", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwProtocol.setStatus('mandatory')
ifStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStatus.setStatus('mandatory')
receivedTotalDgms = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivedTotalDgms.setStatus('mandatory')
transmittedTotalDgms = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmittedTotalDgms.setStatus('mandatory')
outDiscardsTotalDgms = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outDiscardsTotalDgms.setStatus('mandatory')
noRouteTotalDgms = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noRouteTotalDgms.setStatus('mandatory')
icmpRSTable = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 10, 2))
destUnreachLastRx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: destUnreachLastRx.setStatus('mandatory')
destUnreachLastTx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: destUnreachLastTx.setStatus('mandatory')
sourceQuenchLastRx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceQuenchLastRx.setStatus('mandatory')
sourceQuenchLastTx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceQuenchLastTx.setStatus('mandatory')
redirectsLastRx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectsLastRx.setStatus('mandatory')
redirectsLastTx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectsLastTx.setStatus('mandatory')
echoRequestsLastRx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: echoRequestsLastRx.setStatus('mandatory')
echoRequestsLastTx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: echoRequestsLastTx.setStatus('mandatory')
timeExceededLastRx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeExceededLastRx.setStatus('mandatory')
timeExceededLastTx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeExceededLastTx.setStatus('mandatory')
paramProbLastRx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramProbLastRx.setStatus('mandatory')
paramProbLastTx = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramProbLastTx.setStatus('mandatory')
ipRouting = MibScalar((1, 3, 6, 1, 4, 1, 72, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouting.setStatus('mandatory')
bootpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpRetryCount.setStatus('mandatory')
downloadRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadRetryCount.setStatus('mandatory')
downloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFilename.setStatus('mandatory')
bootserverIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootserverIpAddress.setStatus('mandatory')
loadserverIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadserverIpAddress.setStatus('mandatory')
uniqueBroadcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniqueBroadcastAddress.setStatus('mandatory')
tftpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRetryCount.setStatus('mandatory')
tftpRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRetryPeriod.setStatus('mandatory')
initiateBootpDll = MibScalar((1, 3, 6, 1, 4, 1, 72, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("initiateBoot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initiateBootpDll.setStatus('mandatory')
boothelperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 72, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boothelperEnabled.setStatus('mandatory')
boothelperHopsLimit = MibScalar((1, 3, 6, 1, 4, 1, 72, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boothelperHopsLimit.setStatus('mandatory')
boothelperForwardingAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 12, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boothelperForwardingAddress.setStatus('mandatory')
ipxRouting = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouting.setStatus('mandatory')
ipxIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfNumber.setStatus('mandatory')
ipxIfTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 1, 3), )
if mibBuilder.loadTexts: ipxIfTable.setStatus('mandatory')
ipxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 1, 3, 1), ).setIndexNames((0, "RETIX-MIB", "ipxIfIndex"))
if mibBuilder.loadTexts: ipxIfEntry.setStatus('mandatory')
ipxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfIndex.setStatus('mandatory')
ipxIfNwkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfNwkNumber.setStatus('mandatory')
ipxIfIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(26, 26)).setFixedLength(26)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfIPXAddress.setStatus('mandatory')
ipxIfEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfEncapsulation.setStatus('mandatory')
ipxIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfDelay.setStatus('mandatory')
ipxRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 1, 4), )
if mibBuilder.loadTexts: ipxRoutingTable.setStatus('mandatory')
ipxRITEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1), ).setIndexNames((0, "RETIX-MIB", "ipxRITDestNwkNumber"))
if mibBuilder.loadTexts: ipxRITEntry.setStatus('mandatory')
ipxRITDestNwkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRITDestNwkNumber.setStatus('mandatory')
ipxRITGwyHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRITGwyHostAddress.setStatus('mandatory')
ipxRITHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRITHopCount.setStatus('mandatory')
ipxRITDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRITDelay.setStatus('mandatory')
ipxRITInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRITInterface.setStatus('mandatory')
ipxRITDirectConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRITDirectConnect.setStatus('mandatory')
ipxSAPBinderyTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 1, 5), )
if mibBuilder.loadTexts: ipxSAPBinderyTable.setStatus('mandatory')
ipxSAPBinderyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 1, 5, 1), ).setIndexNames((0, "RETIX-MIB", "ipxSAPBinderyType"), (0, "RETIX-MIB", "ipxSAPBinderyServerIPXAddress"))
if mibBuilder.loadTexts: ipxSAPBinderyEntry.setStatus('mandatory')
ipxSAPBinderyType = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 71, 65535))).clone(namedValues=NamedValues(("user", 1), ("userGroup", 2), ("printQueue", 3), ("fileServer", 4), ("jobServer", 5), ("gateway", 6), ("printServer", 7), ("archiveQueue", 8), ("archiveServer", 9), ("jobQueue", 10), ("administration", 11), ("remoteBridgeServer", 36), ("advertizingPrintServer", 71), ("wild", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSAPBinderyType.setStatus('mandatory')
ipxSAPBinderyServerIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(26, 26)).setFixedLength(26)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSAPBinderyServerIPXAddress.setStatus('mandatory')
ipxSAPBinderyServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSAPBinderyServerName.setStatus('mandatory')
ipxSAPBinderyHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSAPBinderyHopCount.setStatus('mandatory')
ipxSAPBinderySocket = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSAPBinderySocket.setStatus('mandatory')
ipxReceivedDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxReceivedDgms.setStatus('mandatory')
ipxTransmittedDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxTransmittedDgms.setStatus('mandatory')
ipxNotRoutedRxDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxNotRoutedRxDgms.setStatus('mandatory')
ipxForwardedDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxForwardedDgms.setStatus('mandatory')
ipxInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInDelivers.setStatus('mandatory')
ipxInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInHdrErrors.setStatus('mandatory')
ipxAccessViolations = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAccessViolations.setStatus('mandatory')
ipxInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInDiscards.setStatus('mandatory')
ipxOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOutDiscards.setStatus('mandatory')
ipxOtherDiscards = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxOtherDiscards.setStatus('mandatory')
dcntRouting = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntRouting.setStatus('mandatory')
dcntIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntIfNumber.setStatus('mandatory')
dcntIfTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 2, 3), )
if mibBuilder.loadTexts: dcntIfTable.setStatus('mandatory')
dcntIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 2, 3, 1), ).setIndexNames((0, "RETIX-MIB", "dcntIfIndex"))
if mibBuilder.loadTexts: dcntIfTableEntry.setStatus('mandatory')
dcntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntIfIndex.setStatus('mandatory')
dcntIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntIfCost.setStatus('mandatory')
dcntIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntIfRtrPriority.setStatus('mandatory')
dcntIfDesgntdRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntIfDesgntdRtr.setStatus('mandatory')
dcntIfHelloTimerBCT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntIfHelloTimerBCT3.setStatus('mandatory')
dcntRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 2, 4), )
if mibBuilder.loadTexts: dcntRoutingTable.setStatus('mandatory')
dcntRITEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 2, 4, 1), ).setIndexNames((0, "RETIX-MIB", "dcntRITDestNode"))
if mibBuilder.loadTexts: dcntRITEntry.setStatus('mandatory')
dcntRITDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntRITDestNode.setStatus('mandatory')
dcntRITNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntRITNextHop.setStatus('mandatory')
dcntRITCost = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntRITCost.setStatus('mandatory')
dcntRITHops = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntRITHops.setStatus('mandatory')
dcntRITInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntRITInterface.setStatus('mandatory')
dcntAreaRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 2, 5), )
if mibBuilder.loadTexts: dcntAreaRoutingTable.setStatus('mandatory')
dcntAreaRITEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 2, 5, 1), ).setIndexNames((0, "RETIX-MIB", "dcntAreaRITDestArea"))
if mibBuilder.loadTexts: dcntAreaRITEntry.setStatus('mandatory')
dcntAreaRITDestArea = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntAreaRITDestArea.setStatus('mandatory')
dcntAreaRITNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntAreaRITNextHop.setStatus('mandatory')
dcntAreaRITCost = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntAreaRITCost.setStatus('mandatory')
dcntAreaRITHops = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntAreaRITHops.setStatus('mandatory')
dcntAreaRITInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntAreaRITInterface.setStatus('mandatory')
dcntNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntNodeAddress.setStatus('mandatory')
dcntInterAreaMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntInterAreaMaxCost.setStatus('mandatory')
dcntInterAreaMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntInterAreaMaxHops.setStatus('mandatory')
dcntIntraAreaMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntIntraAreaMaxCost.setStatus('mandatory')
dcntIntraAreaMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntIntraAreaMaxHops.setStatus('mandatory')
dcntMaxVisits = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntMaxVisits.setStatus('mandatory')
dcntRtngMsgTimerBCT1 = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntRtngMsgTimerBCT1.setStatus('mandatory')
dcntRateControlFreqTimerT2 = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcntRateControlFreqTimerT2.setStatus('mandatory')
dcntReveivedDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntReveivedDgms.setStatus('mandatory')
dcntForwardedDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntForwardedDgms.setStatus('mandatory')
dcntOutRequestedDgms = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntOutRequestedDgms.setStatus('mandatory')
dcntInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntInDiscards.setStatus('mandatory')
dcntOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntOutDiscards.setStatus('mandatory')
dcntNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntNoRoutes.setStatus('mandatory')
dcntInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcntInHdrErrors.setStatus('mandatory')
rmtLapbConfigTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 3, 1), )
if mibBuilder.loadTexts: rmtLapbConfigTable.setStatus('mandatory')
rmtLapbCTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1), ).setIndexNames((0, "RETIX-MIB", "rmtLapbCTIndex"))
if mibBuilder.loadTexts: rmtLapbCTEntry.setStatus('mandatory')
rmtLapbCTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbCTIndex.setStatus('mandatory')
rmtLapbCTLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTLinkAddr.setStatus('mandatory')
rmtLapbCTExtSeqNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTExtSeqNumbering.setStatus('mandatory')
rmtLapbCTWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTWindow.setStatus('mandatory')
rmtLapbCTModeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTModeT1.setStatus('mandatory')
rmtLapbCTManualT1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTManualT1Value.setStatus('mandatory')
rmtLapbCTT3LinkIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTT3LinkIdleTimer.setStatus('mandatory')
rmtLapbCTN2RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTN2RetryCount.setStatus('mandatory')
rmtLapbCTLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetLink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTLinkReset.setStatus('mandatory')
rmtLapbCTX25PortLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2400, 4800, 9600, 19200, 32000, 48000, 64000))).clone(namedValues=NamedValues(("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b9600", 9600), ("b19200", 19200), ("b32000", 32000), ("b48000", 48000), ("b64000", 64000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTX25PortLineSpeed.setStatus('mandatory')
rmtLapbCTInitLinkConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("connect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmtLapbCTInitLinkConnect.setStatus('mandatory')
rmtLapbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 3, 2), )
if mibBuilder.loadTexts: rmtLapbStatsTable.setStatus('mandatory')
rmtLapbSTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1), ).setIndexNames((0, "RETIX-MIB", "rmtLapbSTIndex"))
if mibBuilder.loadTexts: rmtLapbSTEntry.setStatus('mandatory')
rmtLapbSTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTIndex.setStatus('mandatory')
rmtLapbSTState = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTState.setStatus('mandatory')
rmtLapbSTAutoT1value = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTAutoT1value.setStatus('mandatory')
rmtLapbSTLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTLastResetTime.setStatus('mandatory')
rmtLapbSTLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTLastResetReason.setStatus('mandatory')
rmtLapbSTCountResets = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountResets.setStatus('mandatory')
rmtLapbSTCountSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountSentFrames.setStatus('mandatory')
rmtLapbSTCountRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountRcvFrames.setStatus('mandatory')
rmtLapbSTCountSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountSentOctets.setStatus('mandatory')
rmtLapbSTCountRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountRcvOctets.setStatus('mandatory')
rmtLapbSTCountAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountAborts.setStatus('mandatory')
rmtLapbSTCountCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmtLapbSTCountCrcErrors.setStatus('mandatory')
x25Operation = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Operation.setStatus('mandatory')
x25OperNextReset = MibScalar((1, 3, 6, 1, 4, 1, 72, 13, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25OperNextReset.setStatus('mandatory')
x25ConSetupTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 4, 3), )
if mibBuilder.loadTexts: x25ConSetupTable.setStatus('mandatory')
x25CSTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1), ).setIndexNames((0, "RETIX-MIB", "x25CSTIndex"))
if mibBuilder.loadTexts: x25CSTEntry.setStatus('mandatory')
x25CSTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CSTIndex.setStatus('mandatory')
x25CST8084Switch = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CST8084Switch.setStatus('mandatory')
x25CSTSrcDTEAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTSrcDTEAddr.setStatus('mandatory')
x25CSTDestDTEAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTDestDTEAddr.setStatus('mandatory')
x25CST2WayLgclChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CST2WayLgclChanNum.setStatus('mandatory')
x25CSTPktSeqNumFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("mod8", 1), ("mod128", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTPktSeqNumFlg.setStatus('mandatory')
x25CSTFlowCntrlNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTFlowCntrlNeg.setStatus('mandatory')
x25CSTDefaultWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTDefaultWinSize.setStatus('mandatory')
x25CSTDefaultPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTDefaultPktSize.setStatus('mandatory')
x25CSTNegWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTNegWinSize.setStatus('mandatory')
x25CSTNegPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTNegPktSize.setStatus('mandatory')
x25CSTCUGSub = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTCUGSub.setStatus('mandatory')
x25CSTLclCUGValue = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTLclCUGValue.setStatus('mandatory')
x25CSTRvrsChrgReq = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTRvrsChrgReq.setStatus('mandatory')
x25CSTRvrsChrgAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CSTRvrsChrgAcc.setStatus('mandatory')
x25ConControlTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 4, 4), )
if mibBuilder.loadTexts: x25ConControlTable.setStatus('mandatory')
x25CCTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1), ).setIndexNames((0, "RETIX-MIB", "x25CCTIndex"))
if mibBuilder.loadTexts: x25CCTEntry.setStatus('mandatory')
x25CCTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CCTIndex.setStatus('mandatory')
x25CCTManualConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("connect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTManualConnect.setStatus('mandatory')
x25CCTManualDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTManualDisconnect.setStatus('mandatory')
x25CCTCfgAutoConRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTCfgAutoConRetry.setStatus('mandatory')
x25CCTOperAutoConRetryFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CCTOperAutoConRetryFlg.setStatus('mandatory')
x25CCTAutoConRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTAutoConRetryTimer.setStatus('mandatory')
x25CCTMaxAutoConRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTMaxAutoConRetries.setStatus('mandatory')
x25CCTCfgTODControl = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTCfgTODControl.setStatus('mandatory')
x25CCTCurrentTODControl = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTCurrentTODControl.setStatus('mandatory')
x25CCTTODToConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTTODToConnect.setStatus('mandatory')
x25CCTTODToDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CCTTODToDisconnect.setStatus('mandatory')
x25TimerTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 4, 5), )
if mibBuilder.loadTexts: x25TimerTable.setStatus('mandatory')
x25TTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1), ).setIndexNames((0, "RETIX-MIB", "x25TTIndex"))
if mibBuilder.loadTexts: x25TTEntry.setStatus('mandatory')
x25TTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TTIndex.setStatus('mandatory')
x25TTT20Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTT20Timer.setStatus('mandatory')
x25TTT21Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTT21Timer.setStatus('mandatory')
x25TTT22Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTT22Timer.setStatus('mandatory')
x25TTT23Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTT23Timer.setStatus('mandatory')
x25TTR20Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTR20Limit.setStatus('mandatory')
x25TTR22Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTR22Limit.setStatus('mandatory')
x25TTR23Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25TTR23Limit.setStatus('mandatory')
x25StatusTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 4, 6), )
if mibBuilder.loadTexts: x25StatusTable.setStatus('mandatory')
x25StatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1), ).setIndexNames((0, "RETIX-MIB", "x25StatusIndex"))
if mibBuilder.loadTexts: x25StatusTableEntry.setStatus('mandatory')
x25StatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusIndex.setStatus('mandatory')
x25StatusIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusIfStatus.setStatus('mandatory')
x25StatusSVCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusSVCStatus.setStatus('mandatory')
x25StatusWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusWinSize.setStatus('mandatory')
x25StatusPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusPktSize.setStatus('mandatory')
x25StatusCauseLastInClear = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusCauseLastInClear.setStatus('mandatory')
x25StatusDiagLastInClear = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatusDiagLastInClear.setStatus('mandatory')
x25StatsTable = MibTable((1, 3, 6, 1, 4, 1, 72, 13, 4, 7), )
if mibBuilder.loadTexts: x25StatsTable.setStatus('mandatory')
x25StatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1), ).setIndexNames((0, "RETIX-MIB", "x25STSVCIndex"))
if mibBuilder.loadTexts: x25StatsTableEntry.setStatus('mandatory')
x25STSVCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STSVCIndex.setStatus('mandatory')
x25STTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STTxDataPkts.setStatus('mandatory')
x25STRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STRxDataPkts.setStatus('mandatory')
x25STTxConnectReqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STTxConnectReqPkts.setStatus('mandatory')
x25STRxIncomingCallPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STRxIncomingCallPkts.setStatus('mandatory')
x25STTxClearReqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STTxClearReqPkts.setStatus('mandatory')
x25STRxClearIndPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STRxClearIndPkts.setStatus('mandatory')
x25STTxResetReqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STTxResetReqPkts.setStatus('mandatory')
x25STRxResetIndPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STRxResetIndPkts.setStatus('mandatory')
x25STTxRestartReqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STTxRestartReqPkts.setStatus('mandatory')
x25STRxRestartIndPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 13, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25STRxRestartIndPkts.setStatus('mandatory')
mibBuilder.exportSymbols("RETIX-MIB", x25StatsTable=x25StatsTable, ipxOtherDiscards=ipxOtherDiscards, mlink=mlink, triangulation=triangulation, x25STTxDataPkts=x25STTxDataPkts, redirectsLastTx=redirectsLastTx, trapDestEntry=trapDestEntry, serialLoading=serialLoading, x25StatusDiagLastInClear=x25StatusDiagLastInClear, receivedTotalDgms=receivedTotalDgms, snmpAccessPolicyTable=snmpAccessPolicyTable, phySerIfT1frameAndCode=phySerIfT1frameAndCode, x25CSTDefaultWinSize=x25CSTDefaultWinSize, maxRejectedFrames=maxRejectedFrames, x25CCTEntry=x25CCTEntry, x25CSTSrcDTEAddr=x25CSTSrcDTEAddr, filterTableAction=filterTableAction, authenticationTrapStatus=authenticationTrapStatus, ipRouting=ipRouting, operatingMode=operatingMode, lapbCountRcvOctets=lapbCountRcvOctets, ipxRITInterface=ipxRITInterface, phySerIfTransitDelay=phySerIfTransitDelay, priorityMatches=priorityMatches, x25STTxConnectReqPkts=x25STTxConnectReqPkts, x25CSTFlowCntrlNeg=x25CSTFlowCntrlNeg, ipxRITEntry=ipxRITEntry, ieee8023Entry=ieee8023Entry, averagePeriod=averagePeriod, remote=remote, x25=x25, x25STTxRestartReqPkts=x25STTxRestartReqPkts, dcntIfCost=dcntIfCost, lapbEntry=lapbEntry, ifStatus=ifStatus, ipxIfEntry=ipxIfEntry, mlinkTable=mlinkTable, ipxNotRoutedRxDgms=ipxNotRoutedRxDgms, ieee8023FrameTooLongs=ieee8023FrameTooLongs, portPriorityAutoValue=portPriorityAutoValue, phySerIfT1SlotLvalue=phySerIfT1SlotLvalue, spatHelloTimer=spatHelloTimer, rmtLapbStatsTable=rmtLapbStatsTable, internalQueueCurrentLength=internalQueueCurrentLength, ipxRITGwyHostAddress=ipxRITGwyHostAddress, dcntIntraAreaMaxCost=dcntIntraAreaMaxCost, bridge=bridge, ieee8023NewMACAddressIndex=ieee8023NewMACAddressIndex, echoRequestsLastTx=echoRequestsLastTx, rmtLapbSTCountSentOctets=rmtLapbSTCountSentOctets, mlinkIndex=mlinkIndex, lapbLastResetReason=lapbLastResetReason, x25CSTDestDTEAddr=x25CSTDestDTEAddr, ipxForwardedDgms=ipxForwardedDgms, boothelper=boothelper, dcntRITCost=dcntRITCost, dcntNodeAddress=dcntNodeAddress, rmtLapbSTIndex=rmtLapbSTIndex, ieee8023FramesReceivedOks=ieee8023FramesReceivedOks, sourceQuenchLastTx=sourceQuenchLastTx, lanAccepts=lanAccepts, ieee8023SingleCollisionFrames=ieee8023SingleCollisionFrames, snmpAccessPolicyAction=snmpAccessPolicyAction, ipxSAPBinderyEntry=ipxSAPBinderyEntry, maxSerialLoading=maxSerialLoading, ipxTransmittedDgms=ipxTransmittedDgms, phySerIfT1dRatePerChan=phySerIfT1dRatePerChan, x25CCTMaxAutoConRetries=x25CCTMaxAutoConRetries, x25CSTIndex=x25CSTIndex, portSpatState=portSpatState, x25StatusIfStatus=x25StatusIfStatus, lapbIndex=lapbIndex, downloadRetryCount=downloadRetryCount, x25ConControlTable=x25ConControlTable, x25STRxIncomingCallPkts=x25STRxIncomingCallPkts, ipxIfNwkNumber=ipxIfNwkNumber, stpTable=stpTable, dcntForwardedDgms=dcntForwardedDgms, ieee8023LateCollisions=ieee8023LateCollisions, activeRemote=activeRemote, ipxRITDirectConnect=ipxRITDirectConnect, filterSubTable=filterSubTable, x25CCTManualDisconnect=x25CCTManualDisconnect, lapbCountAborts=lapbCountAborts, rmtLapbSTLastResetReason=rmtLapbSTLastResetReason, x25StatusCauseLastInClear=x25StatusCauseLastInClear, x25TTT23Timer=x25TTT23Timer, ieee8023MulticastReceiveStatus=ieee8023MulticastReceiveStatus, ieee8023NewMACAddressEntry=ieee8023NewMACAddressEntry, dynamicLearningInLM=dynamicLearningInLM, mlinkEntry=mlinkEntry, retix=retix, dcntIfHelloTimerBCT3=dcntIfHelloTimerBCT3, ieee8023MulticastFramesReceivedOks=ieee8023MulticastFramesReceivedOks, rmtLapbCTExtSeqNumbering=rmtLapbCTExtSeqNumbering, dcntAreaRITEntry=dcntAreaRITEntry, x25StatusTable=x25StatusTable, redirectsLastRx=redirectsLastRx, ieee8023OctetsTransmittedOks=ieee8023OctetsTransmittedOks, ieee8023InternalMACTransmitErrors=ieee8023InternalMACTransmitErrors, snmpAccessPolicyType=snmpAccessPolicyType, ieee8023FramesTransmittedOks=ieee8023FramesTransmittedOks, x25CCTIndex=x25CCTIndex, dcntAreaRoutingTable=dcntAreaRoutingTable, ieee8023MulticastFramesTransmittedOks=ieee8023MulticastFramesTransmittedOks, ipxInDiscards=ipxInDiscards, product=product, x25TTT22Timer=x25TTT22Timer, typeFilter=typeFilter, ieee8023CarrierSenseErrors=ieee8023CarrierSenseErrors, stpIndex=stpIndex, uniqueBroadcastAddress=uniqueBroadcastAddress, boothelperEnabled=boothelperEnabled, trapDestAction=trapDestAction, snmpAccessPolicyObject=snmpAccessPolicyObject, dcntRITInterface=dcntRITInterface, x25STRxResetIndPkts=x25STRxResetIndPkts, trapDestinationTable=trapDestinationTable, lapbState=lapbState, expressQueueUpperLimit=expressQueueUpperLimit, ipxRITDestNwkNumber=ipxRITDestNwkNumber, accessPolicyIndex=accessPolicyIndex, filteringDbStatus=filteringDbStatus, ipxIfIndex=ipxIfIndex, phySerIfTable=phySerIfTable, rmtLapbSTCountResets=rmtLapbSTCountResets, x25StatsTableEntry=x25StatsTableEntry, station=station, dcntIntraAreaMaxHops=dcntIntraAreaMaxHops, filteringDbDisposition=filteringDbDisposition, rmtLapbCTN2RetryCount=rmtLapbCTN2RetryCount, spanningTree=spanningTree, downloadFilename=downloadFilename, ieee8023=ieee8023, filteringDbEntry=filteringDbEntry, ieee8023NewMACAddress=ieee8023NewMACAddress, phySerIfMeasuredSpeed=phySerIfMeasuredSpeed, accessMode=accessMode, x25CCTAutoConRetryTimer=x25CCTAutoConRetryTimer, lapbWindow=lapbWindow, dcntIfTableEntry=dcntIfTableEntry, typePrioritisation=typePrioritisation, loPriQueueUpperLimit=loPriQueueUpperLimit, lapbPolarity=lapbPolarity, x25CSTRvrsChrgAcc=x25CSTRvrsChrgAcc, x25CST8084Switch=x25CST8084Switch, rmtLapbSTEntry=rmtLapbSTEntry, x25STRxClearIndPkts=x25STRxClearIndPkts, dcntInterAreaMaxHops=dcntInterAreaMaxHops, rmtLapbSTLastResetTime=rmtLapbSTLastResetTime, spatVersion=spatVersion, priorityPage=priorityPage, echoRequestsLastRx=echoRequestsLastRx, rmtLapbCTLinkReset=rmtLapbCTLinkReset, dcntInterAreaMaxCost=dcntInterAreaMaxCost, phySerIfPortSpeed=phySerIfPortSpeed, ieee8023Index=ieee8023Index, dcntOutRequestedDgms=dcntOutRequestedDgms, ieee8023Number=ieee8023Number, rmtLapbCTInitLinkConnect=rmtLapbCTInitLinkConnect, priorityTableEntryValue=priorityTableEntryValue, stationTime=stationTime, forgetAddressTimer=forgetAddressTimer, ipxIfTable=ipxIfTable, x25ConSetupTable=x25ConSetupTable, phySerIfT1SlotHvalue=phySerIfT1SlotHvalue, dcntRateControlFreqTimerT2=dcntRateControlFreqTimerT2, ipxRITDelay=ipxRITDelay, ieee8023AlignmentErrors=ieee8023AlignmentErrors, rmtLapbCTModeT1=rmtLapbCTModeT1, deletedMlinkFrames=deletedMlinkFrames, stpEntry=stpEntry, filterTableEntryValue=filterTableEntryValue, ieee8023ExcessiveDeferrals=ieee8023ExcessiveDeferrals, ieee8023FCSErrors=ieee8023FCSErrors, queueUpperLimit=queueUpperLimit, x25CSTEntry=x25CSTEntry, dcntRITEntry=dcntRITEntry, ipxOutDiscards=ipxOutDiscards, dcntAreaRITCost=dcntAreaRITCost, expressQueueCurrentLength=expressQueueCurrentLength, resetStation=resetStation, ieee8023InternalMACReceiveErrors=ieee8023InternalMACReceiveErrors, icmpRSTable=icmpRSTable, ipxIfEncapsulation=ipxIfEncapsulation, dcntNoRoutes=dcntNoRoutes, ipxSAPBinderyServerIPXAddress=ipxSAPBinderyServerIPXAddress, x25Operation=x25Operation, phySerIfIsSpeedsettable=phySerIfIsSpeedsettable, ieee8023BroadcastFramesTransmittedOks=ieee8023BroadcastFramesTransmittedOks, phySerIfEntry=phySerIfEntry, lanInterfaceType=lanInterfaceType, mlinkSendSeq=mlinkSendSeq, rmtLapbSTState=rmtLapbSTState, dcntRouting=dcntRouting, ipxSAPBinderyHopCount=ipxSAPBinderyHopCount, rmtLapbConfigTable=rmtLapbConfigTable, rmtLapbSTCountCrcErrors=rmtLapbSTCountCrcErrors, lapb=lapb, rmtLapb=rmtLapb, physBlkSize=physBlkSize, ipxInDelivers=ipxInDelivers, mlinkRxTimeout=mlinkRxTimeout, trapDestEntryCommunityName=trapDestEntryCommunityName, ieeeFormatPriority=ieeeFormatPriority, x25TimerTable=x25TimerTable, lapbCountResets=lapbCountResets, x25CCTManualConnect=x25CCTManualConnect, x25TTR20Limit=x25TTR20Limit, ipxRouting=ipxRouting, trapDestEntryIpAddr=trapDestEntryIpAddr, ipxInHdrErrors=ipxInHdrErrors, x25StatusTableEntry=x25StatusTableEntry, x25CCTOperAutoConRetryFlg=x25CCTOperAutoConRetryFlg, lapbCountRcvFrames=lapbCountRcvFrames, pathCostAutoValue=pathCostAutoValue, filteringDbAction=filteringDbAction, x25OperNextReset=x25OperNextReset, loPriQueueCurrentLength=loPriQueueCurrentLength, spanningMcastAddr=spanningMcastAddr, timeExceededLastTx=timeExceededLastTx, ieee8023SQETestErrors=ieee8023SQETestErrors, newPhysBlkSize=newPhysBlkSize, portNumber=portNumber, rmtLapbSTCountRcvFrames=rmtLapbSTCountRcvFrames, rmtLapbCTX25PortLineSpeed=rmtLapbCTX25PortLineSpeed, ipxSAPBinderyTable=ipxSAPBinderyTable, filteringDbMacAddress=filteringDbMacAddress, dcntIfNumber=dcntIfNumber, paramProbLastTx=paramProbLastTx, phySerIfT1clockSource=phySerIfT1clockSource, dcntIfDesgntdRtr=dcntIfDesgntdRtr, mlinkState=mlinkState, preconfSourceFilter=preconfSourceFilter, x25STRxDataPkts=x25STRxDataPkts, ipRSEntry=ipRSEntry, tftpRetryPeriod=tftpRetryPeriod, x25TTR23Limit=x25TTR23Limit, lapbModeT1=lapbModeT1, phySerIfPartnerAddress=phySerIfPartnerAddress, phySerIfNumber=phySerIfNumber, boothelperForwardingAddress=boothelperForwardingAddress, bridgeStatsEntry=bridgeStatsEntry, ipxSAPBinderyType=ipxSAPBinderyType, rmtLapbSTCountRcvOctets=rmtLapbSTCountRcvOctets, dcntAreaRITNextHop=dcntAreaRITNextHop, rmtLapbCTEntry=rmtLapbCTEntry, phySerIf=phySerIf, lapbNumber=lapbNumber, x25StatusIndex=x25StatusIndex, ipxReceivedDgms=ipxReceivedDgms, ieee8023InitializeMAC=ieee8023InitializeMAC, portPriorityMode=portPriorityMode, x25CSTNegWinSize=x25CSTNegWinSize)
mibBuilder.exportSymbols("RETIX-MIB", ieee8023MultipleCollisionFrames=ieee8023MultipleCollisionFrames, x25CSTPktSeqNumFlg=x25CSTPktSeqNumFlg, paramProbLastRx=paramProbLastRx, lapbRetryCount=lapbRetryCount, deletedLanFrames=deletedLanFrames, x25TTIndex=x25TTIndex, priorityTableAction=priorityTableAction, boot=boot, mlinkRcvSeq=mlinkRcvSeq, spatResetTimer=spatResetTimer, mlinkLostFrames=mlinkLostFrames, ieeeFormatFilter=ieeeFormatFilter, filteringDbType=filteringDbType, snmpAccessPolicyEntry=snmpAccessPolicyEntry, timeExceededLastRx=timeExceededLastRx, standbyRemote=standbyRemote, x25TTT21Timer=x25TTT21Timer, lapbLastResetTime=lapbLastResetTime, destUnreachLastRx=destUnreachLastRx, initiateBootpDll=initiateBootpDll, ieee8023inRangeLengthErrors=ieee8023inRangeLengthErrors, ipxAccessViolations=ipxAccessViolations, loadserverIpAddress=loadserverIpAddress, ipxSAPBinderySocket=ipxSAPBinderySocket, ieee8023DeferredTransmissions=ieee8023DeferredTransmissions, dcntIfRtrPriority=dcntIfRtrPriority, averageForwardedFrames=averageForwardedFrames, x25CCTTODToConnect=x25CCTTODToConnect, rmtLapbSTCountSentFrames=rmtLapbSTCountSentFrames, x25StatusWinSize=x25StatusWinSize, ipxSAPBinderyServerName=ipxSAPBinderyServerName, dcntIfIndex=dcntIfIndex, boothelperHopsLimit=boothelperHopsLimit, router=router, serialLoadPeriod=serialLoadPeriod, hiPriQueueCurrentLength=hiPriQueueCurrentLength, ipxIfIPXAddress=ipxIfIPXAddress, standbyLocal=standbyLocal, spatPriority=spatPriority, ieee8023BroadcastFramesReceivedOks=ieee8023BroadcastFramesReceivedOks, destUnreachLastTx=destUnreachLastTx, multicastDisposition=multicastDisposition, gwProtocol=gwProtocol, transmittedTotalDgms=transmittedTotalDgms, pathCostMode=pathCostMode, phySerIfIndex=phySerIfIndex, x25CSTLclCUGValue=x25CSTLclCUGValue, x25CSTNegPktSize=x25CSTNegPktSize, filterTableEntry=filterTableEntry, resetStats=resetStats, lapbManualT1value=lapbManualT1value, trapDestTable=trapDestTable, x25TTEntry=x25TTEntry, dcntRITDestNode=dcntRITDestNode, dcntInDiscards=dcntInDiscards, dcntMaxVisits=dcntMaxVisits, rmtLapbSTCountAborts=rmtLapbSTCountAborts, rmtLapbSTAutoT1value=rmtLapbSTAutoT1value, rmtLapbCTLinkAddr=rmtLapbCTLinkAddr, ipxRoutingTable=ipxRoutingTable, rmtLapbCTManualT1Value=rmtLapbCTManualT1Value, ieee8023PromiscuousReceiveStatus=ieee8023PromiscuousReceiveStatus, filterTable=filterTable, x25CCTCurrentTODControl=x25CCTCurrentTODControl, ieee8023MACAddress=ieee8023MACAddress, lan=lan, sourceQuenchLastRx=sourceQuenchLastRx, x25CSTCUGSub=x25CSTCUGSub, serialTxQueueSize=serialTxQueueSize, dcntIfTable=dcntIfTable, communityName=communityName, dcntRtngMsgTimerBCT1=dcntRtngMsgTimerBCT1, filteringDbTable=filteringDbTable, maxForwardedFrames=maxForwardedFrames, lanQueueSize=lanQueueSize, x25CCTCfgAutoConRetry=x25CCTCfgAutoConRetry, x25StatusSVCStatus=x25StatusSVCStatus, noRouteTotalDgms=noRouteTotalDgms, x25TTR22Limit=x25TTR22Limit, dcntAreaRITDestArea=dcntAreaRITDestArea, initStation=initStation, priorityTableEntryType=priorityTableEntryType, dcntAreaRITInterface=dcntAreaRITInterface, x25STSVCIndex=x25STSVCIndex, filterTableEntryType=filterTableEntryType, bridgeStatsIndex=bridgeStatsIndex, mlinkWindow=mlinkWindow, ieee8023Table=ieee8023Table, filteringDataBaseTable=filteringDataBaseTable, ieee8023ExcessiveCollisions=ieee8023ExcessiveCollisions, activeLocal=activeLocal, lapbCountCrcErrors=lapbCountCrcErrors, ieee8023NewMACAddressValue=ieee8023NewMACAddressValue, x25CST2WayLgclChanNum=x25CST2WayLgclChanNum, pathCostManualValue=pathCostManualValue, dcntInHdrErrors=dcntInHdrErrors, ieee8023OctetsReceivedOks=ieee8023OctetsReceivedOks, dcntAreaRITHops=dcntAreaRITHops, lapbAutoT1value=lapbAutoT1value, ieee8023outOfRangeLengthFields=ieee8023outOfRangeLengthFields, x25STTxClearReqPkts=x25STTxClearReqPkts, filterPage=filterPage, snmpAccessPolicyPage=snmpAccessPolicyPage, ipRSTable=ipRSTable, phySerIfInterfaceType=phySerIfInterfaceType, x25TTT20Timer=x25TTT20Timer, rmtLapbCTWindow=rmtLapbCTWindow, x25STTxResetReqPkts=x25STTxResetReqPkts, bootpRetryCount=bootpRetryCount, x25CSTRvrsChrgReq=x25CSTRvrsChrgReq, dcntRITHops=dcntRITHops, adaptiveMcastAddr=adaptiveMcastAddr, passWord=passWord, priorityTableEntry=priorityTableEntry, bootserverIpAddress=bootserverIpAddress, filterMatches=filterMatches, rmtLapbCTT3LinkIdleTimer=rmtLapbCTT3LinkIdleTimer, ipxIfDelay=ipxIfDelay, hiPriQueueUpperLimit=hiPriQueueUpperLimit, x25STRxRestartIndPkts=x25STRxRestartIndPkts, lapbCountSentFrames=lapbCountSentFrames, processorLoading=processorLoading, dcntOutDiscards=dcntOutDiscards, mlinkNumber=mlinkNumber, freeBufferCount=freeBufferCount, ipxIfNumber=ipxIfNumber, mlinkSendUpperEdge=mlinkSendUpperEdge, tftpRetryCount=tftpRetryCount, ipxRITHopCount=ipxRITHopCount, trapDestEntryType=trapDestEntryType, adaptiveRouting=adaptiveRouting, lapbCountSentOctets=lapbCountSentOctets, lapbLinkReset=lapbLinkReset, bridgeStatsTable=bridgeStatsTable, arAddressInfo=arAddressInfo, dcntRoutingTable=dcntRoutingTable, prioritySubTable=prioritySubTable, decnet=decnet, ieee8023TransmitStatus=ieee8023TransmitStatus, averageRejectedFrames=averageRejectedFrames, stationCountResets=stationCountResets, x25CCTCfgTODControl=x25CCTCfgTODControl, x25CSTDefaultPktSize=x25CSTDefaultPktSize, x25StatusPktSize=x25StatusPktSize, mlinkRcvUpperEdge=mlinkRcvUpperEdge, lanRejects=lanRejects, dcntReveivedDgms=dcntReveivedDgms, rmtLapbCTIndex=rmtLapbCTIndex, outDiscardsTotalDgms=outDiscardsTotalDgms, priorityTable=priorityTable, lapbTable=lapbTable, ipRSIndex=ipRSIndex, trapDestPage=trapDestPage, x25CCTTODToDisconnect=x25CCTTODToDisconnect, ieee8023MACSubLayerStatus=ieee8023MACSubLayerStatus, freeHeaderCount=freeHeaderCount, portPriorityManualValue=portPriorityManualValue, ipx=ipx, deleteAddressTimer=deleteAddressTimer, dcntRITNextHop=dcntRITNextHop)
