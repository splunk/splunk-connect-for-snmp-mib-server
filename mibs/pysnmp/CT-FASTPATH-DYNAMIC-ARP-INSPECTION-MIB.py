#
# PySNMP MIB module CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:13:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ctDynamicArpInspectionExpMib, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctDynamicArpInspectionExpMib")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, NotificationType, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, ModuleIdentity, Gauge32, iso, Integer32, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "NotificationType", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "ModuleIdentity", "Gauge32", "iso", "Integer32", "Unsigned32", "MibIdentifier")
DisplayString, RowPointer, TextualConvention, StorageType, PhysAddress, MacAddress, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "TextualConvention", "StorageType", "PhysAddress", "MacAddress", "RowStatus", "TruthValue")
ctFastPathDynamicArpInspectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1))
if mibBuilder.loadTexts: ctFastPathDynamicArpInspectionMIB.setLastUpdated('200807231519Z')
if mibBuilder.loadTexts: ctFastPathDynamicArpInspectionMIB.setOrganization('Enterasys Networks, Inc.')
ctAgentDaiConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1))
ctAgentDaiSrcMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiSrcMacValidate.setStatus('current')
ctAgentDaiDstMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiDstMacValidate.setStatus('current')
ctAgentDaiIPValidate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIPValidate.setStatus('current')
ctAgentDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4), )
if mibBuilder.loadTexts: ctAgentDaiVlanConfigTable.setStatus('current')
ctAgentDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1), ).setIndexNames((0, "CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB", "ctAgentDaiVlanIndex"))
if mibBuilder.loadTexts: ctAgentDaiVlanConfigEntry.setStatus('current')
ctAgentDaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ctAgentDaiVlanIndex.setStatus('current')
ctAgentDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanDynArpInspEnable.setStatus('current')
ctAgentDaiVlanLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanLoggingEnable.setStatus('current')
ctAgentDaiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanArpAclName.setStatus('current')
ctAgentDaiVlanArpAclStaticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanArpAclStaticFlag.setStatus('current')
ctAagentDaiStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAagentDaiStatsReset.setStatus('current')
ctAgentDaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6), )
if mibBuilder.loadTexts: ctAgentDaiVlanStatsTable.setStatus('current')
ctAgentDaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1), ).setIndexNames((0, "CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB", "ctAgentDaiVlanStatsIndex"))
if mibBuilder.loadTexts: ctAgentDaiVlanStatsEntry.setStatus('current')
ctAgentDaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ctAgentDaiVlanStatsIndex.setStatus('current')
ctAgentDaiVlanPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanPktsForwarded.setStatus('current')
ctAgentDaiVlanPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanPktsDropped.setStatus('current')
ctAgentDaiVlanDhcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanDhcpDrops.setStatus('current')
ctAgentDaiVlanDhcpPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanDhcpPermits.setStatus('current')
ctAgentDaiVlanAclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanAclDrops.setStatus('current')
ctAgentDaiVlanAclPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanAclPermits.setStatus('current')
ctAgentDaiVlanSrcMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanSrcMacFailures.setStatus('current')
ctAgentDaiVlanDstMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanDstMacFailures.setStatus('current')
ctAgentDaiVlanIpValidFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanIpValidFailures.setStatus('current')
ctAgentDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7), )
if mibBuilder.loadTexts: ctAgentDaiIfConfigTable.setStatus('current')
ctAgentDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctAgentDaiIfConfigEntry.setStatus('current')
ctAgentDaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIfTrustEnable.setStatus('current')
ctAgentDaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(15)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIfRateLimit.setStatus('current')
ctAgentDaiIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIfBurstInterval.setStatus('current')
mibBuilder.exportSymbols("CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB", ctAgentDaiConfigGroup=ctAgentDaiConfigGroup, ctAgentDaiVlanPktsDropped=ctAgentDaiVlanPktsDropped, PYSNMP_MODULE_ID=ctFastPathDynamicArpInspectionMIB, ctAgentDaiVlanStatsIndex=ctAgentDaiVlanStatsIndex, ctAgentDaiIfConfigEntry=ctAgentDaiIfConfigEntry, ctAgentDaiVlanIndex=ctAgentDaiVlanIndex, ctAgentDaiIfBurstInterval=ctAgentDaiIfBurstInterval, ctAgentDaiIfConfigTable=ctAgentDaiIfConfigTable, ctAgentDaiVlanDhcpDrops=ctAgentDaiVlanDhcpDrops, ctAgentDaiSrcMacValidate=ctAgentDaiSrcMacValidate, ctAgentDaiIfTrustEnable=ctAgentDaiIfTrustEnable, ctAagentDaiStatsReset=ctAagentDaiStatsReset, ctAgentDaiIfRateLimit=ctAgentDaiIfRateLimit, ctAgentDaiVlanSrcMacFailures=ctAgentDaiVlanSrcMacFailures, ctAgentDaiVlanStatsTable=ctAgentDaiVlanStatsTable, ctAgentDaiVlanAclDrops=ctAgentDaiVlanAclDrops, ctAgentDaiVlanArpAclStaticFlag=ctAgentDaiVlanArpAclStaticFlag, ctAgentDaiVlanStatsEntry=ctAgentDaiVlanStatsEntry, ctAgentDaiVlanConfigTable=ctAgentDaiVlanConfigTable, ctAgentDaiIPValidate=ctAgentDaiIPValidate, ctAgentDaiVlanDynArpInspEnable=ctAgentDaiVlanDynArpInspEnable, ctAgentDaiVlanDhcpPermits=ctAgentDaiVlanDhcpPermits, ctAgentDaiVlanAclPermits=ctAgentDaiVlanAclPermits, ctFastPathDynamicArpInspectionMIB=ctFastPathDynamicArpInspectionMIB, ctAgentDaiVlanPktsForwarded=ctAgentDaiVlanPktsForwarded, ctAgentDaiVlanArpAclName=ctAgentDaiVlanArpAclName, ctAgentDaiVlanConfigEntry=ctAgentDaiVlanConfigEntry, ctAgentDaiVlanDstMacFailures=ctAgentDaiVlanDstMacFailures, ctAgentDaiVlanIpValidFailures=ctAgentDaiVlanIpValidFailures, ctAgentDaiDstMacValidate=ctAgentDaiDstMacValidate, ctAgentDaiVlanLoggingEnable=ctAgentDaiVlanLoggingEnable)
