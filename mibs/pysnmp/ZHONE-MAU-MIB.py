#
# PySNMP MIB module ZHONE-MAU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-MAU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:41:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifName, ifOperStatus, ifAdminStatus, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifOperStatus", "ifAdminStatus", "InterfaceIndexOrZero", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, ModuleIdentity, Integer32, ObjectIdentity, iso, NotificationType, Counter64, Counter32, Bits, TimeTicks, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "ModuleIdentity", "Integer32", "ObjectIdentity", "iso", "NotificationType", "Counter64", "Counter32", "Bits", "TimeTicks", "Gauge32", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
zhoneModules, zhoneEnet = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneEnet")
phyEnetMauMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 8))
phyEnetMauMib.setRevisions(('2013-10-13 17:08', '2012-05-25 14:55', '2009-02-03 01:39', '2009-01-19 21:44', '2008-08-14 07:17', '2008-03-10 12:03', '2007-11-01 14:37', '2007-06-24 23:11', '2007-05-22 16:05', '2005-10-13 16:55', '2000-09-12 18:01',))
if mibBuilder.loadTexts: phyEnetMauMib.setLastUpdated('201310131500Z')
if mibBuilder.loadTexts: phyEnetMauMib.setOrganization('Zhone Technologies, Inc.')
zhoneIfMauTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1), )
if mibBuilder.loadTexts: zhoneIfMauTable.setStatus('current')
zhoneIfMauEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1), ).setIndexNames((0, "ZHONE-MAU-MIB", "zhoneMauIfIndex"))
if mibBuilder.loadTexts: zhoneIfMauEntry.setStatus('current')
zhoneMauIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauIfIndex.setStatus('current')
zhoneMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 11, 15, 16, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("mauOther", 1), ("mau10BaseT", 5), ("mau10BaseTHD", 10), ("mau10BaseTFD", 11), ("mau100BaseTXHD", 15), ("mau100BaseTXFD", 16), ("mau1000BaseLXHD", 22), ("mau1000BaseLXFD", 23), ("mau1000BaseSXHD", 25), ("mau1000BaseSXFD", 26), ("mau1000BaseTHD", 29), ("mau1000BaseTFD", 30), ("mau10gBaseX", 31), ("mau10gBaseR", 32), ("mau10gBaseW", 33), ("mau10gBaseLX4", 34), ("mau10gBaseSR", 35), ("mau10gBaseSW", 36), ("mau10gBaseLR", 37), ("mau10gBaseLW", 38), ("mau10gBaseER", 39), ("mau10gBaseEW", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauType.setStatus('current')
zhoneMauOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("operational", 3), ("standby", 4), ("shutdown", 5), ("reset", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauOperStatus.setStatus('current')
zhoneMauMediaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("notAvailable", 4), ("remoteFault", 5), ("invalidSignal", 6), ("remoteJabber", 7), ("remoteLinkLoss", 8), ("remoteTest", 9), ("offline", 10), ("autoNegError", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauMediaAvailable.setStatus('current')
zhoneMauMediaAvailStateExits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauMediaAvailStateExits.setStatus('current')
zhoneMauJabberState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noJabber", 3), ("jabbering", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauJabberState.setStatus('current')
zhoneMauJabberingStateEnters = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauJabberingStateEnters.setStatus('current')
zhoneMauFalseCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauFalseCarriers.setStatus('current')
zhoneMauDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 11, 15, 16, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("mauOther", 1), ("mau10BaseT", 5), ("mau10BaseTHD", 10), ("mau10BaseTFD", 11), ("mau100BaseTXHD", 15), ("mau100BaseTXFD", 16), ("mau1000BaseLXHD", 22), ("mau1000BaseLXFD", 23), ("mau1000BaseSXHD", 25), ("mau1000BaseSXFD", 26), ("mau1000BaseTHD", 29), ("mau1000BaseTFD", 30), ("mau10gBaseX", 31), ("mau10gBaseR", 32), ("mau10gBaseW", 33), ("mau10gBaseLX4", 34), ("mau10gBaseSR", 35), ("mau10gBaseSW", 36), ("mau10gBaseLR", 37), ("mau10gBaseLW", 38), ("mau10gBaseER", 39), ("mau10gBaseEW", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauDefaultType.setStatus('current')
zhoneMauAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauAutoNegSupported.setStatus('current')
zhoneMauTypeListBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 11), Bits().clone(namedValues=NamedValues(("bOther", 0), ("bAUI", 1), ("b10base5", 2), ("bFoirl", 3), ("b10base2", 4), ("b10baseT", 5), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("b1000baseTFD", 30), ("b10gbaseX", 31), ("b10gbaseR", 32), ("b10gbaseW", 33), ("b10gbaseLX4", 34), ("b10gbaseSR", 35), ("b10gbaseSW", 36), ("b10gbaseLR", 37), ("b10gbaseLW", 38), ("b10gbaseER", 39), ("b10gbaseEW", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauTypeListBits.setStatus('current')
zhoneMauClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("automatic", 2), ("master", 3), ("slave", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauClkSrc.setStatus('current')
zhoneMauPauseFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("asymmetricTx", 2), ("asymmetricRx", 3), ("symmetric", 4), ("passthrough", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauPauseFlowControl.setStatus('current')
zhoneMauAggregationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("passive", 3), ("active", 4))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauAggregationMode.setStatus('current')
zhoneMauLinkStateMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauLinkStateMirror.setStatus('current')
zhoneMauSetPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauSetPauseTime.setStatus('current')
zhoneMauMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauMaxFrameSize.setStatus('current')
zhoneMauIngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10240000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauIngressRate.setStatus('current')
zhoneMauIngressBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setUnits('Kbits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauIngressBurstSize.setStatus('current')
zhoneMauEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10240000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauEgressRate.setStatus('current')
zhoneMauEgressBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setUnits('Kbits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauEgressBurstSize.setStatus('current')
zhoneMauAutoNegTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2), )
if mibBuilder.loadTexts: zhoneMauAutoNegTable.setStatus('current')
zhoneMauAutoNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1), ).setIndexNames((0, "ZHONE-MAU-MIB", "zhoneMauIfIndex"))
if mibBuilder.loadTexts: zhoneMauAutoNegEntry.setStatus('current')
zhoneMauAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauAutoNegAdminStatus.setStatus('current')
zhoneMauAutoNegRemoteSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notdetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauAutoNegRemoteSignaling.setStatus('current')
zhoneMauAutoNegConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("configuring", 2), ("complete", 3), ("disabled", 4), ("parallelDetectFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauAutoNegConfig.setStatus('current')
zhoneMauAutoNegRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauAutoNegRestart.setStatus('current')
zhoneMauAutoNegCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bfdxPause", 8), ("bfdxAPause", 9), ("bfdxSPause", 10), ("bfdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15), ("b10gbaseX", 16), ("b10gbaseR", 17), ("b10gbaseW", 18), ("b10gbaseLX4", 19), ("b10gbaseSR", 20), ("b10gbaseSW", 21), ("b10gbaseLR", 22), ("b10gbaseLW", 23), ("b10gbaseER", 24), ("b10gbaseEW", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauAutoNegCapabilityBits.setStatus('current')
zhoneMauAutoNegCapAdvertBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15), ("b10gbaseX", 16), ("b10gbaseR", 17), ("b10gbaseW", 18), ("b10gbaseLX4", 19), ("b10gbaseSR", 20), ("b10gbaseSW", 21), ("b10gbaseLR", 22), ("b10gbaseLW", 23), ("b10gbaseER", 24), ("b10gbaseEW", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauAutoNegCapAdvertBits.setStatus('current')
zhoneMauAutoNegCapRecvBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15), ("b10gbaseX", 16), ("b10gbaseR", 17), ("b10gbaseW", 18), ("b10gbaseLX4", 19), ("b10gbaseSR", 20), ("b10gbaseSW", 21), ("b10gbaseLR", 22), ("b10gbaseLW", 23), ("b10gbaseER", 24), ("b10gbaseEW", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauAutoNegCapRecvBits.setStatus('current')
zhoneMauAutoNegRemoteFaultAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("offline", 2), ("linkFailure", 3), ("autoNegError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneMauAutoNegRemoteFaultAdvert.setStatus('current')
zhoneMauAutoNegRemoteFaultRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("offline", 2), ("linkFailure", 3), ("autoNegError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneMauAutoNegRemoteFaultRecv.setStatus('current')
zhoneEnetTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3))
if mibBuilder.loadTexts: zhoneEnetTraps.setStatus('current')
enetV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 0))
if mibBuilder.loadTexts: enetV2Traps.setStatus('current')
rprEastSpanTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: rprEastSpanTrap.setStatus('current')
rprWestSpanTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: rprWestSpanTrap.setStatus('current')
linkAggLink1Trap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 0, 3))
if mibBuilder.loadTexts: linkAggLink1Trap.setStatus('current')
linkAggLink2Trap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 0, 4))
if mibBuilder.loadTexts: linkAggLink2Trap.setStatus('current')
rprSpanGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 2)).setObjects(("ZHONE-MAU-MIB", "rprEastSpanTrap"), ("ZHONE-MAU-MIB", "rprWestSpanTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rprSpanGroup = rprSpanGroup.setStatus('current')
linkAggLinkGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 5, 1, 3, 3)).setObjects(("ZHONE-MAU-MIB", "linkAggLink1Trap"), ("ZHONE-MAU-MIB", "linkAggLink2Trap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    linkAggLinkGroup = linkAggLinkGroup.setStatus('current')
zhoneLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 1, 4), )
if mibBuilder.loadTexts: zhoneLinkAggTable.setStatus('current')
zhoneLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 1, 4, 1), ).setIndexNames((0, "ZHONE-MAU-MIB", "zhoneLinkAggIfIndex"))
if mibBuilder.loadTexts: zhoneLinkAggEntry.setStatus('current')
zhoneLinkAggIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLinkAggIfIndex.setStatus('current')
zhoneLinkAggPartnerSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLinkAggPartnerSystem.setStatus('current')
zhoneLinkAggPartnerSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLinkAggPartnerSystemPriority.setStatus('current')
zhoneLinkAggPartnerGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLinkAggPartnerGroupId.setStatus('current')
mibBuilder.exportSymbols("ZHONE-MAU-MIB", zhoneMauDefaultType=zhoneMauDefaultType, zhoneMauType=zhoneMauType, zhoneEnetTraps=zhoneEnetTraps, zhoneIfMauTable=zhoneIfMauTable, zhoneMauIngressBurstSize=zhoneMauIngressBurstSize, zhoneMauAutoNegRemoteFaultAdvert=zhoneMauAutoNegRemoteFaultAdvert, zhoneLinkAggIfIndex=zhoneLinkAggIfIndex, zhoneIfMauEntry=zhoneIfMauEntry, zhoneMauAutoNegSupported=zhoneMauAutoNegSupported, zhoneMauAutoNegAdminStatus=zhoneMauAutoNegAdminStatus, zhoneMauAutoNegEntry=zhoneMauAutoNegEntry, zhoneMauAutoNegConfig=zhoneMauAutoNegConfig, zhoneMauMediaAvailable=zhoneMauMediaAvailable, zhoneMauMaxFrameSize=zhoneMauMaxFrameSize, zhoneMauIngressRate=zhoneMauIngressRate, zhoneMauAutoNegCapAdvertBits=zhoneMauAutoNegCapAdvertBits, zhoneLinkAggTable=zhoneLinkAggTable, zhoneMauAutoNegTable=zhoneMauAutoNegTable, zhoneMauEgressRate=zhoneMauEgressRate, zhoneLinkAggEntry=zhoneLinkAggEntry, zhoneMauOperStatus=zhoneMauOperStatus, zhoneLinkAggPartnerSystemPriority=zhoneLinkAggPartnerSystemPriority, zhoneMauAutoNegCapRecvBits=zhoneMauAutoNegCapRecvBits, zhoneMauTypeListBits=zhoneMauTypeListBits, zhoneLinkAggPartnerSystem=zhoneLinkAggPartnerSystem, enetV2Traps=enetV2Traps, linkAggLink1Trap=linkAggLink1Trap, zhoneMauAutoNegRestart=zhoneMauAutoNegRestart, zhoneMauAggregationMode=zhoneMauAggregationMode, zhoneMauJabberState=zhoneMauJabberState, linkAggLink2Trap=linkAggLink2Trap, phyEnetMauMib=phyEnetMauMib, zhoneLinkAggPartnerGroupId=zhoneLinkAggPartnerGroupId, zhoneMauClkSrc=zhoneMauClkSrc, zhoneMauMediaAvailStateExits=zhoneMauMediaAvailStateExits, zhoneMauSetPauseTime=zhoneMauSetPauseTime, rprSpanGroup=rprSpanGroup, zhoneMauAutoNegRemoteSignaling=zhoneMauAutoNegRemoteSignaling, rprWestSpanTrap=rprWestSpanTrap, zhoneMauPauseFlowControl=zhoneMauPauseFlowControl, zhoneMauJabberingStateEnters=zhoneMauJabberingStateEnters, zhoneMauLinkStateMirror=zhoneMauLinkStateMirror, zhoneMauAutoNegRemoteFaultRecv=zhoneMauAutoNegRemoteFaultRecv, rprEastSpanTrap=rprEastSpanTrap, zhoneMauFalseCarriers=zhoneMauFalseCarriers, linkAggLinkGroup=linkAggLinkGroup, PYSNMP_MODULE_ID=phyEnetMauMib, zhoneMauEgressBurstSize=zhoneMauEgressBurstSize, zhoneMauIfIndex=zhoneMauIfIndex, zhoneMauAutoNegCapabilityBits=zhoneMauAutoNegCapabilityBits)
