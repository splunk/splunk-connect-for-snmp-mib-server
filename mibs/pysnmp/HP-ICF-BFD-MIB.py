#
# PySNMP MIB module HP-ICF-BFD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-BFD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:20:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
bfdObjects, bfdSessEntry = mibBuilder.importSymbols("BFD-STD-MIB", "bfdObjects", "bfdSessEntry")
BfdMultiplierTC, BfdIntervalTC = mibBuilder.importSymbols("BFD-TC-STD-MIB", "BfdMultiplierTC", "BfdIntervalTC")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
IANAbfdSessAuthenticationTypeTC, IANAbfdSessAuthenticationKeyTC = mibBuilder.importSymbols("IANA-BFD-TC-STD-MIB", "IANAbfdSessAuthenticationTypeTC", "IANAbfdSessAuthenticationKeyTC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, MibIdentifier, Counter64, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Unsigned32, TimeTicks, NotificationType, iso, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Counter64", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Unsigned32", "TimeTicks", "NotificationType", "iso", "ObjectIdentity", "Bits")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
hpicfBfd = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120))
hpicfBfd.setRevisions(('2016-11-28 10:00', '2010-10-28 10:00',))
if mibBuilder.loadTexts: hpicfBfd.setLastUpdated('201611281000Z')
if mibBuilder.loadTexts: hpicfBfd.setOrganization('HP Networking')
hpicfBfdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1))
hpicfBfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2))
hpicfBfdScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 2))
hpicfBfdEchoSrcIpAddType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBfdEchoSrcIpAddType.setStatus('current')
hpicfBfdEchoSrcIpAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBfdEchoSrcIpAdd.setStatus('current')
hpicfBfdSessConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1), )
if mibBuilder.loadTexts: hpicfBfdSessConfigTable.setStatus('current')
hpicfBfdSessConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1), ).setIndexNames((0, "HP-ICF-BFD-MIB", "hpicfBfdSessConfigIfIndex"))
if mibBuilder.loadTexts: hpicfBfdSessConfigEntry.setStatus('current')
hpicfBfdSessConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfBfdSessConfigIfIndex.setStatus('current')
hpicfBfdSessConfigDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 2), BfdIntervalTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBfdSessConfigDesiredMinTxInterval.setStatus('current')
hpicfBfdSessConfigReqMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 3), BfdIntervalTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinRxInterval.setStatus('current')
hpicfBfdSessConfigReqMinEchoRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 4), BfdIntervalTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinEchoRxInterval.setStatus('current')
hpicfBfdSessConfigDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 5), BfdMultiplierTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigDetectMult.setStatus('current')
hpicfBfdSessConfigAuthPresFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthPresFlag.setStatus('current')
hpicfBfdSessConfigAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 7), IANAbfdSessAuthenticationTypeTC().clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationType.setStatus('current')
hpicfBfdSessConfigAuthenticationKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKeyID.setStatus('current')
hpicfBfdSessConfigAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 9), IANAbfdSessAuthenticationKeyTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKey.setStatus('current')
hpicfBfdSessConfigAuthEncPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 10), IANAbfdSessAuthenticationKeyTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthEncPwd.setStatus('current')
hpicfBfdSessConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigRowStatus.setStatus('current')
hpicfBfdSessTable = MibTable((1, 3, 6, 1, 2, 1, 222, 1, 6), )
if mibBuilder.loadTexts: hpicfBfdSessTable.setStatus('current')
hpicfBfdSessEntry = MibTableRow((1, 3, 6, 1, 2, 1, 222, 1, 6, 1), )
bfdSessEntry.registerAugmentions(("HP-ICF-BFD-MIB", "hpicfBfdSessEntry"))
hpicfBfdSessEntry.setIndexNames(*bfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfBfdSessEntry.setStatus('current')
hpicfBfdSessApplicationID = MibTableColumn((1, 3, 6, 1, 2, 1, 222, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("ospf", 1), ("vrrp", 2), ("bgp", 3), ("multiple", 4), ("static", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessApplicationID.setStatus('current')
hpicfBfdSessStaus = MibTableColumn((1, 3, 6, 1, 2, 1, 222, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessStaus.setStatus('current')
hpicfBfdSessClearStats = MibTableColumn((1, 3, 6, 1, 2, 1, 222, 1, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessClearStats.setStatus('current')
hpicfBfdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 1))
hpicfBfdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 2))
hpicfBfdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 2, 1)).setObjects(("HP-ICF-BFD-MIB", "hpicfBfdSessGroup"), ("HP-ICF-BFD-MIB", "hpicfBfdScalarGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBfdCompliance = hpicfBfdCompliance.setStatus('current')
hpicfBfdSessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 1, 1)).setObjects(("HP-ICF-BFD-MIB", "hpicfBfdSessConfigDesiredMinTxInterval"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigReqMinRxInterval"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigReqMinEchoRxInterval"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigDetectMult"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthPresFlag"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthenticationType"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthenticationKeyID"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthenticationKey"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthEncPwd"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigRowStatus"), ("HP-ICF-BFD-MIB", "hpicfBfdSessApplicationID"), ("HP-ICF-BFD-MIB", "hpicfBfdSessStaus"), ("HP-ICF-BFD-MIB", "hpicfBfdSessClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBfdSessGroup = hpicfBfdSessGroup.setStatus('current')
hpicfBfdScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 1, 2)).setObjects(("HP-ICF-BFD-MIB", "hpicfBfdEchoSrcIpAddType"), ("HP-ICF-BFD-MIB", "hpicfBfdEchoSrcIpAdd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBfdScalarGroup = hpicfBfdScalarGroup.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-BFD-MIB", hpicfBfd=hpicfBfd, hpicfBfdSessConfigAuthenticationKeyID=hpicfBfdSessConfigAuthenticationKeyID, hpicfBfdSessConfigAuthenticationKey=hpicfBfdSessConfigAuthenticationKey, hpicfBfdScalarObjects=hpicfBfdScalarObjects, hpicfBfdSessConfigAuthEncPwd=hpicfBfdSessConfigAuthEncPwd, hpicfBfdSessConfigDetectMult=hpicfBfdSessConfigDetectMult, hpicfBfdSessGroup=hpicfBfdSessGroup, hpicfBfdSessEntry=hpicfBfdSessEntry, PYSNMP_MODULE_ID=hpicfBfd, hpicfBfdSessConfigAuthenticationType=hpicfBfdSessConfigAuthenticationType, hpicfBfdScalarGroup=hpicfBfdScalarGroup, hpicfBfdSessConfigRowStatus=hpicfBfdSessConfigRowStatus, hpicfBfdSessClearStats=hpicfBfdSessClearStats, hpicfBfdObjects=hpicfBfdObjects, hpicfBfdSessConfigIfIndex=hpicfBfdSessConfigIfIndex, hpicfBfdSessTable=hpicfBfdSessTable, hpicfBfdCompliances=hpicfBfdCompliances, hpicfBfdSessConfigEntry=hpicfBfdSessConfigEntry, hpicfBfdEchoSrcIpAdd=hpicfBfdEchoSrcIpAdd, hpicfBfdSessApplicationID=hpicfBfdSessApplicationID, hpicfBfdCompliance=hpicfBfdCompliance, hpicfBfdGroups=hpicfBfdGroups, hpicfBfdSessConfigReqMinRxInterval=hpicfBfdSessConfigReqMinRxInterval, hpicfBfdConformance=hpicfBfdConformance, hpicfBfdSessConfigAuthPresFlag=hpicfBfdSessConfigAuthPresFlag, hpicfBfdSessConfigTable=hpicfBfdSessConfigTable, hpicfBfdSessConfigDesiredMinTxInterval=hpicfBfdSessConfigDesiredMinTxInterval, hpicfBfdSessConfigReqMinEchoRxInterval=hpicfBfdSessConfigReqMinEchoRxInterval, hpicfBfdSessStaus=hpicfBfdSessStaus, hpicfBfdEchoSrcIpAddType=hpicfBfdEchoSrcIpAddType)
