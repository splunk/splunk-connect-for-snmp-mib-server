#
# PySNMP MIB module BAS-CMTS-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-CMTS-CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
basDocsIfCmtsCmStatusEntry, = mibBuilder.importSymbols("BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmStatusEntry")
basExtCmts, = mibBuilder.importSymbols("BAS-MIB", "basExtCmts")
docsIfCmtsCmStatusEntry, docsIfCmtsServiceEntry, docsIfUpstreamChannelEntry, docsIfCmtsModulationEntry, docsIfDownstreamChannelEntry = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusEntry", "docsIfCmtsServiceEntry", "docsIfUpstreamChannelEntry", "docsIfCmtsModulationEntry", "docsIfDownstreamChannelEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, TimeTicks, MibIdentifier, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Counter32, ObjectIdentity, Integer32, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Counter32", "ObjectIdentity", "Integer32", "Bits", "Unsigned32")
DisplayString, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "TextualConvention")
basCmtsConfigMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1))
if mibBuilder.loadTexts: basCmtsConfigMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basCmtsConfigMib.setOrganization('Broadband Access Systems')
basCmtsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1))
basCmtsDecodeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2))
basCmtsMacToSidObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 3))
class BasCmtsInt8(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-127, 128)

class BasCmtsUInt8(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class BasCmtsByte(BasCmtsUInt8):
    status = 'current'
    displayHint = 'd'

class BasCmtsInt16(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-32768, 32767)

class BasCmtsUInt16(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class BasCmtsInt32(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

class BasCmtsUInt32(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class BasCmtsRowAction(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("basCmtsRowActionNone", 1), ("basCmtsRowActionApply", 2))

class TenthdBmV(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class BasCmtsHeadEndMapMode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(99, 99), )
class BasCmtsHeadEndMacAddr(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 5)

class BasCmtsHeadEndAuthString(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

basCmtsHeadEndTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: basCmtsHeadEndTable.setStatus('current')
basCmtsHeadEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basCmtsHeadEndEntry.setStatus('current')
basCmtsHeDsChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 1), BasCmtsByte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeDsChanId.setStatus('current')
basCmtsHeHwMapTimerPeriodMicrosec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 2), BasCmtsUInt16().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeHwMapTimerPeriodMicrosec.setStatus('current')
basCmtsHeImMapTimerPeriodMillisec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 3), BasCmtsUInt16().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeImMapTimerPeriodMillisec.setStatus('current')
basCmtsHePerRngTimerPeriodSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 4), BasCmtsUInt16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHePerRngTimerPeriodSec.setStatus('current')
basCmtsHeUcdTimerPerMillisec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 5), BasCmtsUInt16().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeUcdTimerPerMillisec.setStatus('current')
basCmtsHeMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 6), BasCmtsHeadEndMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeMapMode.setStatus('current')
basCmtsHeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 7), BasCmtsHeadEndMacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsHeMacAddr.setStatus('current')
basCmtsHeLenAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 8), BasCmtsByte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeLenAuthString.setStatus('current')
basCmtsHeAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 9), BasCmtsHeadEndAuthString().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeAuthString.setStatus('current')
basCmtsHeRowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 10), BasCmtsRowAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeRowAction.setStatus('current')
basCmtsHePlantPropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 11), BasCmtsUInt32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHePlantPropDelay.setStatus('current')
basCmtsHeSupplMapLeadDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 1, 1, 12), BasCmtsInt32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsHeSupplMapLeadDelay.setStatus('current')
basCmtsMacTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2), )
if mibBuilder.loadTexts: basCmtsMacTable.setStatus('current')
basCmtsMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basCmtsMacEntry.setStatus('current')
basCmtsMacNumUsBds = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 1), BasCmtsUInt16().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacNumUsBds.setStatus('current')
basCmtsMacNumDsMsgBds = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 2), BasCmtsUInt16().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacNumDsMsgBds.setStatus('current')
basCmtsMacNumDsDataBds = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 3), BasCmtsUInt16().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacNumDsDataBds.setStatus('current')
basCmtsMacNumIpBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 4), BasCmtsUInt16().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacNumIpBuffers.setStatus('current')
basCmtsMacPciDmaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 5), BasCmtsByte().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacPciDmaSize.setStatus('current')
basCmtsMacUpdateFirstParticleLast = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacUpdateFirstParticleLast.setStatus('current')
basCmtsMacDirectModeDma = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDirectModeDma.setStatus('current')
basCmtsMacPackedPart = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacPackedPart.setStatus('current')
basCmtsMacPackedPartOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 9), BasCmtsUInt16().clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacPackedPartOffset.setStatus('current')
basCmtsMacSpiClkDivider = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 10), BasCmtsByte().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacSpiClkDivider.setStatus('current')
basCmtsMacSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 11), BasCmtsUInt32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacSyncRate.setStatus('current')
basCmtsMacRowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 2, 1, 12), BasCmtsRowAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacRowAction.setStatus('current')
basCmtsMacDsHwTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3), )
if mibBuilder.loadTexts: basCmtsMacDsHwTable.setStatus('current')
basCmtsMacDsHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1), )
basCmtsMacEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsMacDsHwEntry"))
basCmtsMacDsHwEntry.setIndexNames(*basCmtsMacEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsMacDsHwEntry.setStatus('current')
basCmtsMacDsHwInterleaverDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("basCmtsMacDsHwIntDepth8", 8), ("basCmtsMacDsHwIntDepth16", 16), ("basCmtsMacDsHwIntDepth32", 32), ("basCmtsMacDsHwIntDepth64", 64), ("basCmtsMacDsHwIntDepth128", 128))).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDsHwInterleaverDepth.setStatus('current')
basCmtsMacDsHwQamctl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("basCmtsMacDsHwQamctl64QAM", 3), ("basCmtsMacDsHwQamctl256QAM", 5))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDsHwQamctl.setStatus('current')
basCmtsMacDsHwSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1, 3), BasCmtsUInt32().clone(5056941)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDsHwSymbolRate.setStatus('current')
basCmtsMacDsHwIfFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1, 4), BasCmtsUInt32().clone(43750000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDsHwIfFreq.setStatus('current')
basCmtsMacDsHwRefFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1, 5), BasCmtsUInt32().clone(28500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDsHwRefFreq.setStatus('current')
basCmtsMacDsHwOscMultFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 3, 1, 6), BasCmtsByte().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMacDsHwOscMultFactor.setStatus('current')
class BasCmtsUpChannelPreamblePattern(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

basCmtsUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4), )
if mibBuilder.loadTexts: basCmtsUpstreamChannelTable.setStatus('current')
basCmtsUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1), )
docsIfUpstreamChannelEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsUpstreamChannelEntry"))
basCmtsUpstreamChannelEntry.setIndexNames(*docsIfUpstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsUpstreamChannelEntry.setStatus('current')
basCmtsUpChannelMslotPerTick = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1, 1), BasCmtsByte().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUpChannelMslotPerTick.setStatus('current')
basCmtsUpChannelSymbolRate160KSymPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1, 2), BasCmtsByte().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUpChannelSymbolRate160KSymPerSec.setStatus('current')
basCmtsUpChannelLenPreamblePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1, 3), BasCmtsByte().clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUpChannelLenPreamblePattern.setStatus('current')
basCmtsUpChannelPreamblePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1, 4), BasCmtsUpChannelPreamblePattern().clone(hexValue="CCCCCCCCCCCCCCCCCCCCCCCCCCCC0D0D")).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUpChannelPreamblePattern.setStatus('current')
basCmtsUpChannelRowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1, 5), BasCmtsRowAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUpChannelRowAction.setStatus('current')
basCmtsUpChannelReceivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 4, 1, 6), TenthdBmV()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUpChannelReceivePower.setStatus('current')
class BasCmtsModulationWsPattern(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

basCmtsModulationTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5), )
if mibBuilder.loadTexts: basCmtsModulationTable.setStatus('current')
basCmtsModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5, 1), )
docsIfCmtsModulationEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsModulationEntry"))
basCmtsModulationEntry.setIndexNames(*docsIfCmtsModulationEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsModulationEntry.setStatus('current')
basCmtsModUwLenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5, 1, 1), BasCmtsByte().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsModUwLenBytes.setStatus('current')
basCmtsModUwPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5, 1, 2), BasCmtsModulationWsPattern().clone(hexValue="0d0d")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsModUwPattern.setStatus('current')
basCmtsModUwDetectionWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5, 1, 3), BasCmtsByte().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsModUwDetectionWindow.setStatus('current')
basCmtsModUwMismatchThresholdBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5, 1, 4), BasCmtsByte().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsModUwMismatchThresholdBits.setStatus('current')
basCmtsModPreambleValueOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 5, 1, 5), BasCmtsUInt16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsModPreambleValueOffset.setStatus('current')
basCmtsUsHwTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6), )
if mibBuilder.loadTexts: basCmtsUsHwTable.setStatus('current')
basCmtsUsHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1), )
basCmtsUpstreamChannelEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsUsHwEntry"))
basCmtsUsHwEntry.setIndexNames(*basCmtsUpstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsUsHwEntry.setStatus('current')
basCmtsUsHwTestProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 1), BasCmtsByte().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwTestProbe.setStatus('current')
basCmtsUsHwGenCfg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 2), BasCmtsByte().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwGenCfg1.setStatus('current')
basCmtsUsHwGenCfg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 3), BasCmtsByte().clone(61)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwGenCfg2.setStatus('current')
basCmtsUsHwPreambleCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 4), BasCmtsByte().clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwPreambleCtl.setStatus('current')
basCmtsUsHwCarrAcf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 5), BasCmtsByte().clone(35)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwCarrAcf.setStatus('current')
basCmtsUsHwCarrTcf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 6), BasCmtsByte().clone(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwCarrTcf.setStatus('current')
basCmtsUsHwBaudAtcf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 7), BasCmtsByte().clone(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwBaudAtcf.setStatus('current')
basCmtsUsHwBaudIntcf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 8), BasCmtsByte().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwBaudIntcf.setStatus('current')
basCmtsUsHwMaxPwrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 9), BasCmtsByte().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwMaxPwrThr.setStatus('current')
basCmtsUsHwMinPwrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 10), BasCmtsUInt16().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwMinPwrThr.setStatus('current')
basCmtsUsHwTimeErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 11), BasCmtsUInt16().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwTimeErrThr.setStatus('current')
basCmtsUsHwAdcClipCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 12), BasCmtsByte().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwAdcClipCtl.setStatus('current')
basCmtsUsHwLoopCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 13), BasCmtsByte().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwLoopCheck.setStatus('current')
basCmtsUsHwSlcrErrThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 14), BasCmtsByte().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwSlcrErrThr.setStatus('current')
basCmtsUsHwAfltSelThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 15), BasCmtsByte().clone(28)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwAfltSelThr.setStatus('current')
basCmtsUsHwBurstGain = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 16), BasCmtsUInt16().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwBurstGain.setStatus('current')
basCmtsUsHwLoopCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 17), BasCmtsByte().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwLoopCtl.setStatus('current')
basCmtsUsHwEqRsCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 18), BasCmtsByte().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwEqRsCtl.setStatus('current')
basCmtsUsHwEqSteps = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 6, 1, 19), BasCmtsByte().clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsHwEqSteps.setStatus('current')
basCmtsUsMapTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7), )
if mibBuilder.loadTexts: basCmtsUsMapTable.setStatus('current')
basCmtsUsMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1), )
basCmtsUpstreamChannelEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsUsMapEntry"))
basCmtsUsMapEntry.setIndexNames(*basCmtsUpstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsUsMapEntry.setStatus('current')
basCmtsUsMapMaxMapLenHwMapPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 1), BasCmtsUInt16().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsMapMaxMapLenHwMapPeriods.setStatus('current')
basCmtsUsMapInitMainRegionSizeMicrosec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 2), BasCmtsUInt16().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsMapInitMainRegionSizeMicrosec.setStatus('current')
basCmtsUsMapNewUcdGrantSizeMicrosec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 3), BasCmtsUInt16().clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsMapNewUcdGrantSizeMicrosec.setStatus('current')
basCmtsUsMapMaxDeferredRngIE = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 4), BasCmtsUInt16().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsMapMaxDeferredRngIE.setStatus('current')
basCmtsUsMapMapLeadTimeMillisec = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 5), BasCmtsUInt16().clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsMapMapLeadTimeMillisec.setStatus('deprecated')
basCmtsUsMapRequestLimitMslot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 6), BasCmtsUInt16().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsMapRequestLimitMslot.setStatus('current')
basCmtsUsMapMapLeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 7, 1, 7), BasCmtsUInt16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsMapMapLeadTime.setStatus('current')
basCmtsUsRngTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8), )
if mibBuilder.loadTexts: basCmtsUsRngTable.setStatus('current')
basCmtsUsRngEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1), )
basCmtsUpstreamChannelEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsUsRngEntry"))
basCmtsUsRngEntry.setIndexNames(*basCmtsUpstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsUsRngEntry.setStatus('current')
basCmtsUsRngTimingOffsetThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 1), BasCmtsUInt32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngTimingOffsetThr.setStatus('current')
basCmtsUsRngFreqOffsetThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 2), BasCmtsUInt16().clone(3200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngFreqOffsetThr.setStatus('current')
basCmtsUsRngPowerOffsetThr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 3), BasCmtsByte().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngPowerOffsetThr.setStatus('current')
basCmtsUsRngPowerDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 4), BasCmtsUInt16().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngPowerDesired.setStatus('current')
basCmtsUsRngMaxIgnoredInvitations = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 5), BasCmtsUInt16().clone(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsRngMaxIgnoredInvitations.setStatus('current')
basCmtsUsRngCmRngInviteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 6), BasCmtsUInt16().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngCmRngInviteTimeout.setStatus('current')
basCmtsUsRngMaxPowerAdjQtrdb = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 7), BasCmtsByte().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngMaxPowerAdjQtrdb.setStatus('current')
basCmtsUsRngZeroPowerAdj = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngZeroPowerAdj.setStatus('current')
basCmtsUsRngZeroTimingAdj = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngZeroTimingAdj.setStatus('current')
basCmtsUsRngZeroFreqAdj = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngZeroFreqAdj.setStatus('current')
basCmtsUsRngRefPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngRefPowerLevel.setStatus('current')
basCmtsUsRngCmPeriodicRngInviteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 8, 1, 12), BasCmtsUInt16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsRngCmPeriodicRngInviteTimeout.setStatus('current')
basCmtsUsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13), )
if mibBuilder.loadTexts: basCmtsUsStatsTable.setStatus('current')
basCmtsUsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1), )
basCmtsUpstreamChannelEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsUsStatsEntry"))
basCmtsUsStatsEntry.setIndexNames(*basCmtsUpstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsUsStatsEntry.setStatus('current')
basCmtsUsStatsClearFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 1), BasCmtsUInt32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsUsStatsClearFlag.setStatus('current')
basCmtsUsStatsUSSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 2), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsUSSlots.setStatus('current')
basCmtsUsStatsNoUW = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 3), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsNoUW.setStatus('current')
basCmtsUsStatsDataFECorHCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 4), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsDataFECorHCSErr.setStatus('current')
basCmtsUsStatsRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 5), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsRequests.setStatus('current')
basCmtsUsStatsRequestColl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 6), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsRequestColl.setStatus('current')
basCmtsUsStatsReqFECorHCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 7), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsReqFECorHCSErr.setStatus('current')
basCmtsUsStatsReqNoEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 8), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsReqNoEnergy.setStatus('current')
basCmtsUsStatsReqData = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 9), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsReqData.setStatus('current')
basCmtsUsStatsReqDataColl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 10), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsReqDataColl.setStatus('current')
basCmtsUsStatsReqDataFECorHCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 11), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsReqDataFECorHCSErr.setStatus('current')
basCmtsUsStatsReqDataNoEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 12), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsReqDataNoEnergy.setStatus('current')
basCmtsUsStatsRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 13), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsRanging.setStatus('current')
basCmtsUsStatsRangeFECorHCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 14), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsRangeFECorHCSErr.setStatus('current')
basCmtsUsStatsMapsTooLate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 13, 1, 15), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsUsStatsMapsTooLate.setStatus('current')
basCmtsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9), )
if mibBuilder.loadTexts: basCmtsServiceTable.setStatus('current')
basCmtsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1), )
docsIfCmtsServiceEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsServiceEntry"))
basCmtsServiceEntry.setIndexNames(*docsIfCmtsServiceEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsServiceEntry.setStatus('current')
basCmtsServiceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceMacAddress.setStatus('current')
basCmtsServiceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceIpAddress.setStatus('current')
basCmtsServiceAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initial", 1), ("temporary", 2), ("permanent", 3), ("auth", 4), ("max", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceAuthState.setStatus('current')
basCmtsServiceFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 4), BasCmtsUInt16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsServiceFilter.setStatus('current')
basCmtsServiceCurrentNumHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 5), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceCurrentNumHost.setStatus('current')
basCmtsServiceMaxNumHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 6), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceMaxNumHost.setStatus('current')
basCmtsServiceOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 7), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceOutOctets.setStatus('current')
basCmtsServiceOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 8), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceOutPackets.setStatus('current')
basCmtsServiceInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 9), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceInDiscards.setStatus('current')
basCmtsServiceOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 10), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceOutDiscards.setStatus('current')
basCmtsServiceBwReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 11), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceBwReqCount.setStatus('current')
basCmtsServiceDataGrantCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 9, 1, 12), BasCmtsUInt32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsServiceDataGrantCount.setStatus('current')
basFlapControlTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10), )
if mibBuilder.loadTexts: basFlapControlTable.setStatus('current')
basFlapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basFlapControlEntry.setStatus('current')
basFlapCtlClearFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basFlapCtlClearFlag.setStatus('current')
basFlapCtlMaxTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basFlapCtlMaxTableSize.setStatus('current')
basFlapCtlAgingThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basFlapCtlAgingThresh.setStatus('current')
basFlapCtlInsTimeThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basFlapCtlInsTimeThresh.setStatus('current')
basFlapCtlPowerAdjThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basFlapCtlPowerAdjThresh.setStatus('current')
basFlapTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11), )
if mibBuilder.loadTexts: basFlapTable.setStatus('current')
basFlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "BAS-CMTS-CONFIG-MIB", "basFlapEntryMacAddress"))
if mibBuilder.loadTexts: basFlapEntry.setStatus('current')
basFlapEntryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryMacAddress.setStatus('current')
basFlapEntryUsChan = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryUsChan.setStatus('current')
basFlapEntryInsertCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryInsertCount.setStatus('current')
basFlapEntryHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryHitCount.setStatus('current')
basFlapEntryMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryMissCount.setStatus('current')
basFlapEntryCRCErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryCRCErrCount.setStatus('current')
basFlapEntryPAdjCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryPAdjCount.setStatus('current')
basFlapEntryFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryFlapCount.setStatus('current')
basFlapEntryLastModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ranging", 2), ("rangingAborted", 3), ("rangingComplete", 4), ("ipComplete", 5), ("registrationComplete", 6), ("accessDenied", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryLastModemState.setStatus('current')
basFlapEntryInsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryInsertTime.setStatus('current')
basFlapEntryRemoveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryRemoveTime.setStatus('current')
basFlapEntryLastBasModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("basModemOffline", 1), ("basInitRngRcvd", 2), ("basRanging", 3), ("basRangingComplete", 4), ("basDhcpDiscoverRcvd", 5), ("basDhcpRequestRcvd", 6), ("basTimeReqRcvd", 7), ("basTftpReqRcvd", 8), ("basRegisteredNetAccessEnabled", 9), ("basRegisteredNetAccessDisabled", 10), ("basRegisteredBPIKekAssigned", 11), ("basRegisteredBPITekAssigned", 12), ("basRegFailBadCMTSMic", 13), ("basRegFailBadCOS", 14), ("basRegFailAuthFailure", 15), ("basKekReject", 16), ("basTekReject", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFlapEntryLastBasModemState.setStatus('current')
basCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 12), )
if mibBuilder.loadTexts: basCmtsCmStatusTable.setStatus('current')
basCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 12, 1), )
basDocsIfCmtsCmStatusEntry.registerAugmentions(("BAS-CMTS-CONFIG-MIB", "basCmtsCmStatusEntry"))
basCmtsCmStatusEntry.setIndexNames(*basDocsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: basCmtsCmStatusEntry.setStatus('current')
basCmtsCmStatusAbortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsCmStatusAbortFlag.setStatus('current')
basCmtsCmStatusPrimarySid = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsCmStatusPrimarySid.setStatus('current')
basCmtsCmStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("basModemOffline", 1), ("basInitRngRcvd", 2), ("basRanging", 3), ("basRangingComplete", 4), ("basDhcpDiscoverRcvd", 5), ("basDhcpRequestRcvd", 6), ("basTimeReqRcvd", 7), ("basTftpReqRcvd", 8), ("basRegisteredNetAccessEnabled", 9), ("basRegisteredNetAccessDisabled", 10), ("basRegisteredBPIKekAssigned", 11), ("basRegisteredBPITekAssigned", 12), ("basRegFailBadCMTSMic", 13), ("basRegFailBadCOS", 14), ("basRegFailAuthFailure", 15), ("basKekReject", 16), ("basTekReject", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsCmStatusValue.setStatus('current')
basCmtsPktDecodeControlTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1), )
if mibBuilder.loadTexts: basCmtsPktDecodeControlTable.setStatus('current')
basCmtsPktDecodeControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basCmtsPktDecodeControlEntry.setStatus('current')
basCmtsPktDecodeControlShowRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlShowRx.setStatus('current')
basCmtsPktDecodeControlShowTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlShowTx.setStatus('current')
basCmtsPktDecodeControlAnalyzeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowLevel", 1), ("mediumLevel", 2), ("highLevel", 3), ("levelFour", 4))).clone('lowLevel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlAnalyzeLevel.setStatus('current')
basCmtsPktDecodeControlFilterUcd = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterUcd.setStatus('current')
basCmtsPktDecodeControlFilterMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterMap.setStatus('current')
basCmtsPktDecodeControlFilterRngReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterRngReq.setStatus('current')
basCmtsPktDecodeControlFilterRngRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterRngRsp.setStatus('current')
basCmtsPktDecodeControlFilterRegReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterRegReq.setStatus('current')
basCmtsPktDecodeControlFilterRegRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterRegRsp.setStatus('current')
basCmtsPktDecodeControlFilterUccReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterUccReq.setStatus('current')
basCmtsPktDecodeControlFilterUccRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterUccRsp.setStatus('current')
basCmtsPktDecodeControlFilterBpkmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterBpkmReq.setStatus('current')
basCmtsPktDecodeControlFilterBpkmRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterBpkmRsp.setStatus('current')
basCmtsPktDecodeControlFilterPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterPdu.setStatus('current')
basCmtsPktDecodeControlFilterBwReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsPktDecodeControlFilterBwReq.setStatus('current')
basCmtsMapDecodeControlTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2), )
if mibBuilder.loadTexts: basCmtsMapDecodeControlTable.setStatus('current')
basCmtsMapDecodeControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basCmtsMapDecodeControlEntry.setStatus('current')
basCmtsMapDecodeControlTriggerMapPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerMapPktCount.setStatus('current')
basCmtsMapDecodeControlTriggerDataGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerDataGrant.setStatus('current')
basCmtsMapDecodeControlTriggerUcdChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerUcdChange.setStatus('current')
basCmtsMapDecodeControlTriggerShortGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerShortGrant.setStatus('current')
basCmtsMapDecodeControlTriggerLongGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerLongGrant.setStatus('current')
basCmtsMapDecodeControlTriggerInitMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerInitMaint.setStatus('current')
basCmtsMapDecodeControlTriggerStationMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerStationMaint.setStatus('current')
basCmtsMapDecodeControlTriggerRequestIe = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggerOn", 1), ("triggerOff", 2))).clone('triggerOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMapDecodeControlTriggerRequestIe.setStatus('current')
basCmtsMacToSidTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 3, 1), )
if mibBuilder.loadTexts: basCmtsMacToSidTable.setStatus('current')
basCmtsMacToSidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 3, 1, 1), ).setIndexNames((0, "BAS-CMTS-CONFIG-MIB", "basCmtsMacToSidMacAddr"))
if mibBuilder.loadTexts: basCmtsMacToSidEntry.setStatus('current')
basCmtsMacToSidMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsMacToSidMacAddr.setStatus('current')
basCmtsMacToSidServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsMacToSidServiceId.setStatus('current')
basCmtsMacToSidType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("cableModem", 2), ("host", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCmtsMacToSidType.setStatus('current')
mibBuilder.exportSymbols("BAS-CMTS-CONFIG-MIB", basCmtsUsStatsReqData=basCmtsUsStatsReqData, basCmtsUsRngZeroFreqAdj=basCmtsUsRngZeroFreqAdj, basCmtsPktDecodeControlFilterRngReq=basCmtsPktDecodeControlFilterRngReq, basCmtsMacPciDmaSize=basCmtsMacPciDmaSize, basCmtsMacToSidServiceId=basCmtsMacToSidServiceId, basCmtsUsHwCarrTcf=basCmtsUsHwCarrTcf, basCmtsMacRowAction=basCmtsMacRowAction, basCmtsUsStatsEntry=basCmtsUsStatsEntry, basCmtsPktDecodeControlAnalyzeLevel=basCmtsPktDecodeControlAnalyzeLevel, BasCmtsModulationWsPattern=BasCmtsModulationWsPattern, basCmtsUsMapMaxMapLenHwMapPeriods=basCmtsUsMapMaxMapLenHwMapPeriods, basCmtsModUwPattern=basCmtsModUwPattern, basCmtsUsStatsReqDataFECorHCSErr=basCmtsUsStatsReqDataFECorHCSErr, basFlapEntryUsChan=basFlapEntryUsChan, basCmtsCmStatusPrimarySid=basCmtsCmStatusPrimarySid, basCmtsServiceOutDiscards=basCmtsServiceOutDiscards, basCmtsPktDecodeControlFilterUccReq=basCmtsPktDecodeControlFilterUccReq, basCmtsHeMapMode=basCmtsHeMapMode, basCmtsUsHwLoopCheck=basCmtsUsHwLoopCheck, basCmtsCmStatusEntry=basCmtsCmStatusEntry, basCmtsUsMapMapLeadTime=basCmtsUsMapMapLeadTime, basCmtsUsHwAdcClipCtl=basCmtsUsHwAdcClipCtl, basCmtsServiceCurrentNumHost=basCmtsServiceCurrentNumHost, basCmtsServiceMacAddress=basCmtsServiceMacAddress, basFlapCtlMaxTableSize=basFlapCtlMaxTableSize, basCmtsUsRngMaxPowerAdjQtrdb=basCmtsUsRngMaxPowerAdjQtrdb, basCmtsHeImMapTimerPeriodMillisec=basCmtsHeImMapTimerPeriodMillisec, basFlapEntryLastModemState=basFlapEntryLastModemState, basCmtsMacEntry=basCmtsMacEntry, basCmtsServiceOutOctets=basCmtsServiceOutOctets, basCmtsMacSyncRate=basCmtsMacSyncRate, basCmtsCmStatusAbortFlag=basCmtsCmStatusAbortFlag, basCmtsUsRngTimingOffsetThr=basCmtsUsRngTimingOffsetThr, basCmtsUsHwTable=basCmtsUsHwTable, basCmtsUsMapTable=basCmtsUsMapTable, BasCmtsHeadEndMacAddr=BasCmtsHeadEndMacAddr, basCmtsUsMapMapLeadTimeMillisec=basCmtsUsMapMapLeadTimeMillisec, basFlapControlEntry=basFlapControlEntry, basCmtsServiceAuthState=basCmtsServiceAuthState, basCmtsUsHwBurstGain=basCmtsUsHwBurstGain, basCmtsModUwDetectionWindow=basCmtsModUwDetectionWindow, basCmtsHeUcdTimerPerMillisec=basCmtsHeUcdTimerPerMillisec, basCmtsMacDsHwIfFreq=basCmtsMacDsHwIfFreq, BasCmtsHeadEndMapMode=BasCmtsHeadEndMapMode, basCmtsMacDsHwEntry=basCmtsMacDsHwEntry, basCmtsUsHwEqRsCtl=basCmtsUsHwEqRsCtl, BasCmtsInt32=BasCmtsInt32, basCmtsUpChannelLenPreamblePattern=basCmtsUpChannelLenPreamblePattern, basCmtsMapDecodeControlTriggerLongGrant=basCmtsMapDecodeControlTriggerLongGrant, basCmtsMacToSidEntry=basCmtsMacToSidEntry, basCmtsUsStatsTable=basCmtsUsStatsTable, basCmtsCmStatusValue=basCmtsCmStatusValue, basCmtsUsRngZeroTimingAdj=basCmtsUsRngZeroTimingAdj, basCmtsUsStatsMapsTooLate=basCmtsUsStatsMapsTooLate, basCmtsServiceIpAddress=basCmtsServiceIpAddress, basCmtsServiceDataGrantCount=basCmtsServiceDataGrantCount, basCmtsServiceInDiscards=basCmtsServiceInDiscards, basCmtsUsHwEntry=basCmtsUsHwEntry, basCmtsUpChannelReceivePower=basCmtsUpChannelReceivePower, BasCmtsHeadEndAuthString=BasCmtsHeadEndAuthString, basCmtsMacDsHwInterleaverDepth=basCmtsMacDsHwInterleaverDepth, basCmtsUsHwSlcrErrThr=basCmtsUsHwSlcrErrThr, basCmtsServiceTable=basCmtsServiceTable, basCmtsHeDsChanId=basCmtsHeDsChanId, basCmtsServiceOutPackets=basCmtsServiceOutPackets, basCmtsUsStatsRequests=basCmtsUsStatsRequests, basCmtsMacToSidObjects=basCmtsMacToSidObjects, basCmtsUsRngPowerOffsetThr=basCmtsUsRngPowerOffsetThr, basCmtsMacToSidTable=basCmtsMacToSidTable, basCmtsUsRngRefPowerLevel=basCmtsUsRngRefPowerLevel, basCmtsMacTable=basCmtsMacTable, basCmtsMacDsHwRefFreq=basCmtsMacDsHwRefFreq, basCmtsUsStatsClearFlag=basCmtsUsStatsClearFlag, basCmtsMacDsHwSymbolRate=basCmtsMacDsHwSymbolRate, basCmtsUpChannelPreamblePattern=basCmtsUpChannelPreamblePattern, basCmtsPktDecodeControlShowTx=basCmtsPktDecodeControlShowTx, BasCmtsInt16=BasCmtsInt16, basCmtsUpstreamChannelEntry=basCmtsUpstreamChannelEntry, basCmtsMacDsHwTable=basCmtsMacDsHwTable, basCmtsPktDecodeControlFilterMap=basCmtsPktDecodeControlFilterMap, basCmtsUsStatsDataFECorHCSErr=basCmtsUsStatsDataFECorHCSErr, basFlapEntryHitCount=basFlapEntryHitCount, basCmtsUsHwCarrAcf=basCmtsUsHwCarrAcf, basCmtsUsHwLoopCtl=basCmtsUsHwLoopCtl, basCmtsMacPackedPart=basCmtsMacPackedPart, basCmtsUsStatsRangeFECorHCSErr=basCmtsUsStatsRangeFECorHCSErr, PYSNMP_MODULE_ID=basCmtsConfigMib, basCmtsUpstreamChannelTable=basCmtsUpstreamChannelTable, basCmtsServiceMaxNumHost=basCmtsServiceMaxNumHost, basCmtsHeadEndTable=basCmtsHeadEndTable, basCmtsModulationTable=basCmtsModulationTable, basFlapEntryMissCount=basFlapEntryMissCount, basCmtsUsStatsNoUW=basCmtsUsStatsNoUW, basCmtsUsHwTimeErrThr=basCmtsUsHwTimeErrThr, basFlapCtlClearFlag=basFlapCtlClearFlag, BasCmtsUInt16=BasCmtsUInt16, BasCmtsByte=BasCmtsByte, basCmtsUsRngCmRngInviteTimeout=basCmtsUsRngCmRngInviteTimeout, basCmtsMapDecodeControlEntry=basCmtsMapDecodeControlEntry, basCmtsModPreambleValueOffset=basCmtsModPreambleValueOffset, basCmtsMapDecodeControlTriggerRequestIe=basCmtsMapDecodeControlTriggerRequestIe, basCmtsUsStatsReqNoEnergy=basCmtsUsStatsReqNoEnergy, basFlapEntryInsertTime=basFlapEntryInsertTime, basCmtsUsStatsReqDataColl=basCmtsUsStatsReqDataColl, basCmtsMapDecodeControlTable=basCmtsMapDecodeControlTable, basCmtsDecodeObjects=basCmtsDecodeObjects, basCmtsUsRngEntry=basCmtsUsRngEntry, basCmtsServiceBwReqCount=basCmtsServiceBwReqCount, basCmtsUsRngMaxIgnoredInvitations=basCmtsUsRngMaxIgnoredInvitations, basCmtsConfigMib=basCmtsConfigMib, basCmtsUsMapEntry=basCmtsUsMapEntry, basCmtsUsRngTable=basCmtsUsRngTable, basCmtsPktDecodeControlFilterBpkmRsp=basCmtsPktDecodeControlFilterBpkmRsp, basCmtsPktDecodeControlFilterPdu=basCmtsPktDecodeControlFilterPdu, basCmtsMapDecodeControlTriggerMapPktCount=basCmtsMapDecodeControlTriggerMapPktCount, basFlapControlTable=basFlapControlTable, basFlapEntryInsertCount=basFlapEntryInsertCount, basCmtsPktDecodeControlFilterBwReq=basCmtsPktDecodeControlFilterBwReq, basCmtsUsMapRequestLimitMslot=basCmtsUsMapRequestLimitMslot, basCmtsHeSupplMapLeadDelay=basCmtsHeSupplMapLeadDelay, basCmtsUsHwMaxPwrThr=basCmtsUsHwMaxPwrThr, basCmtsMapDecodeControlTriggerInitMaint=basCmtsMapDecodeControlTriggerInitMaint, basCmtsMacToSidMacAddr=basCmtsMacToSidMacAddr, basCmtsModUwLenBytes=basCmtsModUwLenBytes, basFlapEntryLastBasModemState=basFlapEntryLastBasModemState, basCmtsUsHwEqSteps=basCmtsUsHwEqSteps, basCmtsUsHwMinPwrThr=basCmtsUsHwMinPwrThr, basCmtsPktDecodeControlFilterBpkmReq=basCmtsPktDecodeControlFilterBpkmReq, basCmtsPktDecodeControlShowRx=basCmtsPktDecodeControlShowRx, basCmtsUsRngFreqOffsetThr=basCmtsUsRngFreqOffsetThr, basFlapEntryMacAddress=basFlapEntryMacAddress, basCmtsPktDecodeControlFilterRngRsp=basCmtsPktDecodeControlFilterRngRsp, basCmtsMapDecodeControlTriggerStationMaint=basCmtsMapDecodeControlTriggerStationMaint, basCmtsHeAuthString=basCmtsHeAuthString, basCmtsMacNumUsBds=basCmtsMacNumUsBds, basFlapCtlAgingThresh=basFlapCtlAgingThresh, basCmtsMacUpdateFirstParticleLast=basCmtsMacUpdateFirstParticleLast, basCmtsPktDecodeControlFilterRegReq=basCmtsPktDecodeControlFilterRegReq, basCmtsHeMacAddr=basCmtsHeMacAddr, basCmtsMacDsHwQamctl=basCmtsMacDsHwQamctl, basCmtsPktDecodeControlFilterRegRsp=basCmtsPktDecodeControlFilterRegRsp, basFlapEntryCRCErrCount=basFlapEntryCRCErrCount, basCmtsUsHwGenCfg2=basCmtsUsHwGenCfg2, basCmtsMapDecodeControlTriggerDataGrant=basCmtsMapDecodeControlTriggerDataGrant, basCmtsCmStatusTable=basCmtsCmStatusTable, basCmtsUsHwPreambleCtl=basCmtsUsHwPreambleCtl, basCmtsMacDsHwOscMultFactor=basCmtsMacDsHwOscMultFactor, basCmtsUsStatsReqFECorHCSErr=basCmtsUsStatsReqFECorHCSErr, basCmtsPktDecodeControlFilterUcd=basCmtsPktDecodeControlFilterUcd, basCmtsUsRngCmPeriodicRngInviteTimeout=basCmtsUsRngCmPeriodicRngInviteTimeout, basCmtsUpChannelRowAction=basCmtsUpChannelRowAction, basCmtsUpChannelMslotPerTick=basCmtsUpChannelMslotPerTick, BasCmtsUpChannelPreamblePattern=BasCmtsUpChannelPreamblePattern, basFlapEntryPAdjCount=basFlapEntryPAdjCount, basCmtsHeadEndEntry=basCmtsHeadEndEntry, BasCmtsUInt8=BasCmtsUInt8, basCmtsServiceFilter=basCmtsServiceFilter, basCmtsHeRowAction=basCmtsHeRowAction, basCmtsMacSpiClkDivider=basCmtsMacSpiClkDivider, basCmtsUpChannelSymbolRate160KSymPerSec=basCmtsUpChannelSymbolRate160KSymPerSec, basCmtsUsMapMaxDeferredRngIE=basCmtsUsMapMaxDeferredRngIE, basCmtsMapDecodeControlTriggerUcdChange=basCmtsMapDecodeControlTriggerUcdChange, basCmtsMacNumIpBuffers=basCmtsMacNumIpBuffers, basCmtsMapDecodeControlTriggerShortGrant=basCmtsMapDecodeControlTriggerShortGrant, basCmtsPktDecodeControlFilterUccRsp=basCmtsPktDecodeControlFilterUccRsp, basFlapEntry=basFlapEntry, basCmtsUsHwGenCfg1=basCmtsUsHwGenCfg1, basCmtsModulationEntry=basCmtsModulationEntry, basCmtsUsRngPowerDesired=basCmtsUsRngPowerDesired, basCmtsUsRngZeroPowerAdj=basCmtsUsRngZeroPowerAdj, basCmtsConfigObjects=basCmtsConfigObjects, basCmtsModUwMismatchThresholdBits=basCmtsModUwMismatchThresholdBits, basCmtsPktDecodeControlEntry=basCmtsPktDecodeControlEntry, basCmtsMacDirectModeDma=basCmtsMacDirectModeDma, TenthdBmV=TenthdBmV, basFlapCtlPowerAdjThresh=basFlapCtlPowerAdjThresh, basCmtsUsHwBaudIntcf=basCmtsUsHwBaudIntcf, basFlapCtlInsTimeThresh=basFlapCtlInsTimeThresh, basCmtsServiceEntry=basCmtsServiceEntry, basCmtsUsStatsRequestColl=basCmtsUsStatsRequestColl, basCmtsHeLenAuthString=basCmtsHeLenAuthString, BasCmtsRowAction=BasCmtsRowAction, BasCmtsInt8=BasCmtsInt8, basFlapTable=basFlapTable, basCmtsUsHwBaudAtcf=basCmtsUsHwBaudAtcf, basCmtsPktDecodeControlTable=basCmtsPktDecodeControlTable, basFlapEntryFlapCount=basFlapEntryFlapCount, basFlapEntryRemoveTime=basFlapEntryRemoveTime, basCmtsUsHwAfltSelThr=basCmtsUsHwAfltSelThr, basCmtsHeHwMapTimerPeriodMicrosec=basCmtsHeHwMapTimerPeriodMicrosec, basCmtsUsStatsUSSlots=basCmtsUsStatsUSSlots, basCmtsMacPackedPartOffset=basCmtsMacPackedPartOffset, basCmtsUsStatsReqDataNoEnergy=basCmtsUsStatsReqDataNoEnergy, BasCmtsUInt32=BasCmtsUInt32, basCmtsMacNumDsDataBds=basCmtsMacNumDsDataBds, basCmtsUsMapNewUcdGrantSizeMicrosec=basCmtsUsMapNewUcdGrantSizeMicrosec, basCmtsMacToSidType=basCmtsMacToSidType, basCmtsUsMapInitMainRegionSizeMicrosec=basCmtsUsMapInitMainRegionSizeMicrosec, basCmtsUsStatsRanging=basCmtsUsStatsRanging, basCmtsHePlantPropDelay=basCmtsHePlantPropDelay, basCmtsHePerRngTimerPeriodSec=basCmtsHePerRngTimerPeriodSec, basCmtsUsHwTestProbe=basCmtsUsHwTestProbe, basCmtsMacNumDsMsgBds=basCmtsMacNumDsMsgBds)
