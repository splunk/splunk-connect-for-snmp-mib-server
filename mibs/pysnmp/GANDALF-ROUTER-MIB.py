#
# PySNMP MIB module GANDALF-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GANDALF-ROUTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, ObjectIdentity, ModuleIdentity, Counter64, Unsigned32, TimeTicks, Integer32, enterprises, MibIdentifier, Counter32, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Counter64", "Unsigned32", "TimeTicks", "Integer32", "enterprises", "MibIdentifier", "Counter32", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

gandalf = MibIdentifier((1, 3, 6, 1, 4, 1, 64))
gandalf_router = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11)).setLabel("gandalf-router")
grGenerationX = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1))
grGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 1))
grPhysPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 2))
grLogicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 3))
grBridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 4))
grIpxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 5))
grIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 6))
grSnmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 7))
grPppGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 64, 11, 1, 8))
grSerNum = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grSerNum.setStatus('mandatory')
grSystemName = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grSystemName.setStatus('mandatory')
grSystemPasswd = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grSystemPasswd.setStatus('mandatory')
grdBaseRev = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grdBaseRev.setStatus('mandatory')
grSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grSoftwareRev.setStatus('mandatory')
grFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grFirmwareRev.setStatus('mandatory')
grReset = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hardReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grReset.setStatus('mandatory')
grDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grDateAndTime.setStatus('mandatory')
grSwitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("console", 1), ("wan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grSwitchPosition.setStatus('mandatory')
grPhysNameTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 1), )
if mibBuilder.loadTexts: grPhysNameTable.setStatus('mandatory')
grPhysNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grPhysNameEntry.setStatus('mandatory')
grPhysPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysPortName.setStatus('mandatory')
grPhysPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2), )
if mibBuilder.loadTexts: grPhysPortTable.setStatus('mandatory')
grPhysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grPhysPortEntry.setStatus('mandatory')
grPhysPortWanType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonSwitched", 1), ("v25bis", 2), ("controlSignal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grPhysPortWanType.setStatus('mandatory')
grPhysPortSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("v11", 2), ("v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysPortSignalling.setStatus('mandatory')
grPhysPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grPhysPortSpeed.setStatus('mandatory')
grPhysPortCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grPhysPortCallType.setStatus('mandatory')
grPhysPortHoldOff = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grPhysPortHoldOff.setStatus('mandatory')
grPhysPortPool = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grPhysPortPool.setStatus('mandatory')
grPhysWanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3), )
if mibBuilder.loadTexts: grPhysWanStatsTable.setStatus('mandatory')
grPhysWanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grPhysWanStatsEntry.setStatus('mandatory')
grPhysWanStRxCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStRxCrcErrs.setStatus('mandatory')
grPhysWanStRxOverRunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStRxOverRunErrs.setStatus('mandatory')
grPhysWanStTxUnderRunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStTxUnderRunErrs.setStatus('mandatory')
grPhysWanStRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStRxAborts.setStatus('mandatory')
grPhysWanStTxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStTxAborts.setStatus('mandatory')
grPhysWanStRxOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStRxOctetErrors.setStatus('mandatory')
grPhysWanStTxOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStTxOctetErrors.setStatus('mandatory')
grPhysWanStLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStLogicalIfIndex.setStatus('mandatory')
grPhysWanStInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStInCalls.setStatus('mandatory')
grPhysWanStInFails = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStInFails.setStatus('mandatory')
grPhysWanStInSecurityFails = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStInSecurityFails.setStatus('mandatory')
grPhysWanStOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStOutCalls.setStatus('mandatory')
grPhysWanStOutFails = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStOutFails.setStatus('mandatory')
grPhysWanStOutSecurityFails = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPhysWanStOutSecurityFails.setStatus('mandatory')
grLogicalTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1), )
if mibBuilder.loadTexts: grLogicalTable.setStatus('mandatory')
grLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grLogicalEntry.setStatus('mandatory')
grLogicalDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogicalDestName.setStatus('mandatory')
grLogicalTimeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogicalTimeEnabled.setStatus('mandatory')
grLogicalTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(21, 21)).setFixedLength(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogicalTimeWindow.setStatus('mandatory')
grLogicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogicalType.setStatus('mandatory')
grLogicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogicalStatus.setStatus('mandatory')
grLogWanTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2), )
if mibBuilder.loadTexts: grLogWanTable.setStatus('mandatory')
grLogWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grLogWanEntry.setStatus('mandatory')
grLogWanCmprsn = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanCmprsn.setStatus('mandatory')
grLogWanThshldOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanThshldOvrflw.setStatus('mandatory')
grLogWanThshld = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanThshld.setStatus('mandatory')
grLogWanConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanConnTimer.setStatus('mandatory')
grLogWanDiscTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanDiscTimer.setStatus('mandatory')
grLogWanSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanSpoofing.setStatus('mandatory')
grLogWanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanStatus.setStatus('mandatory')
grLogWanPortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3), )
if mibBuilder.loadTexts: grLogWanPortTable.setStatus('mandatory')
grLogWanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "GANDALF-ROUTER-MIB", "grLogWanPortIndex"))
if mibBuilder.loadTexts: grLogWanPortEntry.setStatus('mandatory')
grLogWanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanPortIndex.setStatus('mandatory')
grLogWanPortWanType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortWanType.setStatus('mandatory')
grLogWanPortPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanPortPhysIfIndex.setStatus('mandatory')
grLogWanPortPool = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortPool.setStatus('mandatory')
grLogWanPortRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortRetry.setStatus('mandatory')
grLogWanPortRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortRetryPeriod.setStatus('mandatory')
grLogWanPortPrepend = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortPrepend.setStatus('mandatory')
grLogWanPortDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortDestAddr.setStatus('mandatory')
grLogWanPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortAdminStatus.setStatus('mandatory')
grLogWanPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connecting", 1), ("connected", 2), ("disconnecting", 3), ("disconnected", 4), ("retryExhausted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanPortOperStatus.setStatus('mandatory')
grLogWanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grLogWanPortStatus.setStatus('mandatory')
grLogWanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4), )
if mibBuilder.loadTexts: grLogWanStatsTable.setStatus('mandatory')
grLogWanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grLogWanStatsEntry.setStatus('mandatory')
grLogWanStInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStInUse.setStatus('mandatory')
grLogWanStUncmpsdRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStUncmpsdRxOctets.setStatus('mandatory')
grLogWanStCmpsdRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStCmpsdRxOctets.setStatus('mandatory')
grLogWanStUncmpsdTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStUncmpsdTxOctets.setStatus('mandatory')
grLogWanStCmpsdTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStCmpsdTxOctets.setStatus('mandatory')
grLogWanStConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStConnects.setStatus('mandatory')
grLogWanStConnectFails = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLogWanStConnectFails.setStatus('mandatory')
grVirtualStatsTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5), )
if mibBuilder.loadTexts: grVirtualStatsTable.setStatus('mandatory')
grVirtualStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grVSProtocolType"), (0, "GANDALF-ROUTER-MIB", "grVSNetAddr"))
if mibBuilder.loadTexts: grVirtualStatsEntry.setStatus('mandatory')
grVSProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSProtocolType.setStatus('mandatory')
grVSNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSNetAddr.setStatus('mandatory')
grVSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSIfIndex.setStatus('mandatory')
grVSRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSRxPkts.setStatus('mandatory')
grVSTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSTxPkts.setStatus('mandatory')
grVSRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSRxOctets.setStatus('mandatory')
grVSTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSTxOctets.setStatus('mandatory')
grVSTTLDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSTTLDiscards.setStatus('mandatory')
grVSRxFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSRxFilteredPkts.setStatus('mandatory')
grVSTxFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grVSTxFilteredPkts.setStatus('mandatory')
grBridgingState = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grBridgingState.setStatus('mandatory')
grBrMaxTransitDelay = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grBrMaxTransitDelay.setStatus('mandatory')
grBrFilterTestPackets = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grBrFilterTestPackets.setStatus('mandatory')
grProtFilterType = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grProtFilterType.setStatus('mandatory')
grProtFilterTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 5), )
if mibBuilder.loadTexts: grProtFilterTable.setStatus('mandatory')
grProtFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 5, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grProtFilterId"))
if mibBuilder.loadTexts: grProtFilterEntry.setStatus('mandatory')
grProtFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grProtFilterId.setStatus('mandatory')
grProtFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 5, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grProtFilterStatus.setStatus('mandatory')
grProtPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 6), )
if mibBuilder.loadTexts: grProtPriorityTable.setStatus('mandatory')
grProtPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 6, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grProtPriorityId"))
if mibBuilder.loadTexts: grProtPriorityEntry.setStatus('mandatory')
grProtPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grProtPriorityId.setStatus('mandatory')
grProtPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grProtPriorityLevel.setStatus('mandatory')
grProtPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 6, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grProtPriorityStatus.setStatus('mandatory')
grBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 7), )
if mibBuilder.loadTexts: grBridgePortTable.setStatus('mandatory')
grBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grBridgePortEntry.setStatus('mandatory')
grBrPortStpBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grBrPortStpBpduFilter.setStatus('mandatory')
grBrPortAllowedToGoDef = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grBrPortAllowedToGoDef.setStatus('mandatory')
grBridgePortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 8), )
if mibBuilder.loadTexts: grBridgePortStatsTable.setStatus('mandatory')
grBridgePortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grBridgePortStatsEntry.setStatus('mandatory')
grBrPortStRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grBrPortStRxOctets.setStatus('mandatory')
grBrPortStTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grBrPortStTxOctets.setStatus('mandatory')
grBrPortStRxFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grBrPortStRxFilteredPkts.setStatus('mandatory')
grBrPortStTxFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grBrPortStTxFilteredPkts.setStatus('mandatory')
grSpanningTreeStatus = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grSpanningTreeStatus.setStatus('mandatory')
grIpxRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxRoutingEnable.setStatus('mandatory')
grIpxPrimaryNet = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxPrimaryNet.setStatus('mandatory')
grIpxRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxRipEnable.setStatus('mandatory')
grIpxSapEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxSapEnable.setStatus('mandatory')
grIpxAccessRestrictEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccessRestrictEnable.setStatus('mandatory')
grIpxAccessRestrictTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6), )
if mibBuilder.loadTexts: grIpxAccessRestrictTable.setStatus('mandatory')
grIpxAccessRestrictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpxAccIndex"))
if mibBuilder.loadTexts: grIpxAccessRestrictEntry.setStatus('mandatory')
grIpxAccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxAccIndex.setStatus('mandatory')
grIpxAccName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccName.setStatus('mandatory')
grIpxAccType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccType.setStatus('mandatory')
grIpxAccSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccSrcNet.setStatus('mandatory')
grIpxAccSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccSrcNode.setStatus('mandatory')
grIpxAccSrcSocketFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccSrcSocketFrom.setStatus('mandatory')
grIpxAccSrcSocketTo = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccSrcSocketTo.setStatus('mandatory')
grIpxAccDstNet = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccDstNet.setStatus('mandatory')
grIpxAccDstNode = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccDstNode.setStatus('mandatory')
grIpxAccDstSocketFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccDstSocketFrom.setStatus('mandatory')
grIpxAccDstSocketTo = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccDstSocketTo.setStatus('mandatory')
grIpxAccStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 6, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxAccStatus.setStatus('mandatory')
grIpxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7), )
if mibBuilder.loadTexts: grIpxRouteTable.setStatus('mandatory')
grIpxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpxRouteDest"), (0, "GANDALF-ROUTER-MIB", "grIpxRouteType"), (0, "GANDALF-ROUTER-MIB", "grIpxRouteNextHopNet"), (0, "GANDALF-ROUTER-MIB", "grIpxRouteNextHopNode"))
if mibBuilder.loadTexts: grIpxRouteEntry.setStatus('mandatory')
grIpxRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxRouteDest.setStatus('mandatory')
grIpxRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learned", 1), ("static", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxRouteType.setStatus('mandatory')
grIpxRouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxRouteHops.setStatus('mandatory')
grIpxRouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxRouteDelay.setStatus('mandatory')
grIpxRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxRouteAge.setStatus('mandatory')
grIpxRouteNextHopNet = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxRouteNextHopNet.setStatus('mandatory')
grIpxRouteNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxRouteNextHopNode.setStatus('mandatory')
grIpxRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxRouteIfIndex.setStatus('mandatory')
grIpxRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxRouteStatus.setStatus('mandatory')
grIpxServerTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8), )
if mibBuilder.loadTexts: grIpxServerTable.setStatus('mandatory')
grIpxServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpxServerType"), (0, "GANDALF-ROUTER-MIB", "grIpxServerSapType"), (0, "GANDALF-ROUTER-MIB", "grIpxServerName"))
if mibBuilder.loadTexts: grIpxServerEntry.setStatus('mandatory')
grIpxServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxServerType.setStatus('mandatory')
grIpxServerSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learned", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxServerSapType.setStatus('mandatory')
grIpxServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxServerName.setStatus('mandatory')
grIpxServerAge = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxServerAge.setStatus('mandatory')
grIpxServerNet = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxServerNet.setStatus('mandatory')
grIpxServerNode = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxServerNode.setStatus('mandatory')
grIpxServerSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxServerSocket.setStatus('mandatory')
grIpxServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 8, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxServerStatus.setStatus('mandatory')
grIpxInReceives = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxInReceives.setStatus('mandatory')
grIpxInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxInHdrErrors.setStatus('mandatory')
grIpxForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxForwDatagrams.setStatus('mandatory')
grIpxInUnknownSockets = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxInUnknownSockets.setStatus('mandatory')
grIpxInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxInDiscards.setStatus('mandatory')
grIpxInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxInDelivers.setStatus('mandatory')
grIpxOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxOutRequests.setStatus('mandatory')
grIpxOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxOutDiscards.setStatus('mandatory')
grIpxOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxOutNoRoutes.setStatus('mandatory')
grIpxLogicalTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 18), )
if mibBuilder.loadTexts: grIpxLogicalTable.setStatus('mandatory')
grIpxLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grIpxLogicalEntry.setStatus('mandatory')
grIpxLAccessDef = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxLAccessDef.setStatus('mandatory')
grIpxLRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 18, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxLRestrictions.setStatus('mandatory')
grIpxLTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipxcp", 1), ("bncp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxLTransport.setStatus('mandatory')
grIpxLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 18, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxLStatus.setStatus('mandatory')
grIpxVirtualTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19), )
if mibBuilder.loadTexts: grIpxVirtualTable.setStatus('mandatory')
grIpxVirtualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpxVNetAddr"))
if mibBuilder.loadTexts: grIpxVirtualEntry.setStatus('mandatory')
grIpxVNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVNetAddr.setStatus('mandatory')
grIpxVNetEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ether2", 1), ("raw", 2), ("llc", 3), ("snap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVNetEncap.setStatus('mandatory')
grIpxVRipEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVRipEnable.setStatus('mandatory')
grIpxVRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVRipMetric.setStatus('mandatory')
grIpxVRipTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVRipTxPeriod.setStatus('mandatory')
grIpxVRipAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVRipAgeTimer.setStatus('mandatory')
grIpxVSapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVSapEnable.setStatus('mandatory')
grIpxVSapTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVSapTxPeriod.setStatus('mandatory')
grIpxVSapAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVSapAgeTimer.setStatus('mandatory')
grIpxVWdogSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVWdogSpoof.setStatus('mandatory')
grIpxVIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVIfIndex.setStatus('mandatory')
grIpxVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 19, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpxVStatus.setStatus('mandatory')
grIpxVRipTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20), )
if mibBuilder.loadTexts: grIpxVRipTable.setStatus('mandatory')
grIpxVRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpxVNetAddr"))
if mibBuilder.loadTexts: grIpxVRipEntry.setStatus('mandatory')
grIpxVRipRtePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRtePkts.setStatus('mandatory')
grIpxVRipHopCntExcs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipHopCntExcs.setStatus('mandatory')
grIpxVRipNetbHopCntExcs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipNetbHopCntExcs.setStatus('mandatory')
grIpxVRipNoNetAddRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipNoNetAddRcvs.setStatus('mandatory')
grIpxVRipRxGenQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxGenQs.setStatus('mandatory')
grIpxVRipRxNearQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxNearQs.setStatus('mandatory')
grIpxVRipRxGenRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxGenRs.setStatus('mandatory')
grIpxVRipRxNearRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxNearRs.setStatus('mandatory')
grIpxVRipTxGenQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipTxGenQs.setStatus('mandatory')
grIpxVRipTxNearQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipTxNearQs.setStatus('mandatory')
grIpxVRipTxGenRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipTxGenRs.setStatus('mandatory')
grIpxVRipTxNearRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipTxNearRs.setStatus('mandatory')
grIpxVRipRxUnknGenQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxUnknGenQs.setStatus('mandatory')
grIpxVRipRxUnknNearQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxUnknNearQs.setStatus('mandatory')
grIpxVRipRxUnknGenRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxUnknGenRs.setStatus('mandatory')
grIpxVRipRxUnknNearRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipRxUnknNearRs.setStatus('mandatory')
grIpxVRipAgedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipAgedOuts.setStatus('mandatory')
grIpxVRipPeriodics = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipPeriodics.setStatus('mandatory')
grIpxVRipUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipUpdates.setStatus('mandatory')
grIpxVRipWrongNets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipWrongNets.setStatus('mandatory')
grIpxVRipBadInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVRipBadInfos.setStatus('mandatory')
grIpxVSapTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21), )
if mibBuilder.loadTexts: grIpxVSapTable.setStatus('mandatory')
grIpxVSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpxVNetAddr"))
if mibBuilder.loadTexts: grIpxVSapEntry.setStatus('mandatory')
grIpxVSapRxGenQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxGenQs.setStatus('mandatory')
grIpxVSapRxNearQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxNearQs.setStatus('mandatory')
grIpxVSapRxGenRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxGenRs.setStatus('mandatory')
grIpxVSapRxNearRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxNearRs.setStatus('mandatory')
grIpxVSapTxGenQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapTxGenQs.setStatus('mandatory')
grIpxVSapTxNearQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapTxNearQs.setStatus('mandatory')
grIpxVSapTxGenRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapTxGenRs.setStatus('mandatory')
grIpxVSapTxNearRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapTxNearRs.setStatus('mandatory')
grIpxVSapRxUnknGenQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxUnknGenQs.setStatus('mandatory')
grIpxVSapRxUnknNearQs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxUnknNearQs.setStatus('mandatory')
grIpxVSapRxUnknGenRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxUnknGenRs.setStatus('mandatory')
grIpxVSapRxUnknNearRs = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapRxUnknNearRs.setStatus('mandatory')
grIpxVSapAgedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapAgedOuts.setStatus('mandatory')
grIpxVSapPeriodics = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapPeriodics.setStatus('mandatory')
grIpxVSapUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapUpdates.setStatus('mandatory')
grIpxVSapWrongNets = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapWrongNets.setStatus('mandatory')
grIpxVSapBadInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 5, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpxVSapBadInfos.setStatus('mandatory')
grIpRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpRipEnable.setStatus('mandatory')
grIpArpCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpArpCacheAge.setStatus('mandatory')
grIpProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpProxyArp.setStatus('mandatory')
grIpTrustedGatewayEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpTrustedGatewayEnable.setStatus('mandatory')
grIpTrustedGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 5), )
if mibBuilder.loadTexts: grIpTrustedGatewayTable.setStatus('mandatory')
grIpTrustedGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 5, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpGatewayAddr"))
if mibBuilder.loadTexts: grIpTrustedGatewayEntry.setStatus('mandatory')
grIpGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpGatewayAddr.setStatus('mandatory')
grIpGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpGatewayName.setStatus('mandatory')
grIpGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpGatewayStatus.setStatus('mandatory')
grIpAccessRestrictEnable = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccessRestrictEnable.setStatus('mandatory')
grIpAccessRestrictTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7), )
if mibBuilder.loadTexts: grIpAccessRestrictTable.setStatus('mandatory')
grIpAccessRestrictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpAccIndex"))
if mibBuilder.loadTexts: grIpAccessRestrictEntry.setStatus('mandatory')
grIpAccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpAccIndex.setStatus('mandatory')
grIpAccName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccName.setStatus('mandatory')
grIpAccType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccType.setStatus('mandatory')
grIpAccSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccSrcNet.setStatus('mandatory')
grIpAccSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccSrcMask.setStatus('mandatory')
grIpAccDstNet = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccDstNet.setStatus('mandatory')
grIpAccDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccDstMask.setStatus('mandatory')
grIpAccProtocolFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccProtocolFrom.setStatus('mandatory')
grIpAccProtocolTo = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccProtocolTo.setStatus('mandatory')
grIpAccPortFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccPortFrom.setStatus('mandatory')
grIpAccPortTo = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccPortTo.setStatus('mandatory')
grIpAccStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 7, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpAccStatus.setStatus('mandatory')
grIpLogicalTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 8), )
if mibBuilder.loadTexts: grIpLogicalTable.setStatus('mandatory')
grIpLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grIpLogicalEntry.setStatus('mandatory')
grIpLAccessDef = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpLAccessDef.setStatus('mandatory')
grIpLRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 8, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpLRestrictions.setStatus('mandatory')
grIpLTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipcp", 1), ("bncp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpLTransport.setStatus('mandatory')
grIpLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpLStatus.setStatus('mandatory')
grIpVirtualTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9), )
if mibBuilder.loadTexts: grIpVirtualTable.setStatus('mandatory')
grIpVirtualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpVNetAddr"))
if mibBuilder.loadTexts: grIpVirtualEntry.setStatus('mandatory')
grIpVNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpVNetAddr.setStatus('mandatory')
grIpVNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVNetMask.setStatus('mandatory')
grIpVNetEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ether2", 1), ("snap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVNetEncap.setStatus('mandatory')
grIpVBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOnes", 1), ("allZeros", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVBcastAddr.setStatus('mandatory')
grIpVRipTx = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVRipTx.setStatus('mandatory')
grIpVSendDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVSendDefaultRoute.setStatus('mandatory')
grIpVSendStaticRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVSendStaticRoutes.setStatus('mandatory')
grIpVRipRx = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVRipRx.setStatus('mandatory')
grIpVRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVRipMetric.setStatus('mandatory')
grIpVOverrideDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVOverrideDefaultRoute.setStatus('mandatory')
grIpVIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVIfIndex.setStatus('mandatory')
grIpVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 9, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grIpVStatus.setStatus('mandatory')
grIpVRipTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 10), )
if mibBuilder.loadTexts: grIpVRipTable.setStatus('mandatory')
grIpVRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 10, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grIpVNetAddr"))
if mibBuilder.loadTexts: grIpVRipEntry.setStatus('mandatory')
grIpVRipRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpVRipRxPkts.setStatus('mandatory')
grIpVRipRxBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpVRipRxBadPkts.setStatus('mandatory')
grIpVRipRxBadRtes = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpVRipRxBadRtes.setStatus('mandatory')
grIpVRipTxUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 6, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grIpVRipTxUpdates.setStatus('mandatory')
grSnmpNetworkSet = MibScalar((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grSnmpNetworkSet.setStatus('mandatory')
grSnmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2), )
if mibBuilder.loadTexts: grSnmpCommunityTable.setStatus('mandatory')
grSnmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grCommunityIndex"))
if mibBuilder.loadTexts: grSnmpCommunityEntry.setStatus('mandatory')
grCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grCommunityIndex.setStatus('mandatory')
grCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommunityName.setStatus('mandatory')
grCommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("restricted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommunityType.setStatus('mandatory')
grCommunityPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("readonly", 2), ("readwrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommunityPriv.setStatus('mandatory')
grCommunityTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommunityTrapGeneration.setStatus('mandatory')
grCommunityTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommunityTrapPort.setStatus('mandatory')
grCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommunityStatus.setStatus('mandatory')
grSnmpCommMemberTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 3), )
if mibBuilder.loadTexts: grSnmpCommMemberTable.setStatus('mandatory')
grSnmpCommMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 3, 1), ).setIndexNames((0, "GANDALF-ROUTER-MIB", "grCommunityIndex"), (0, "GANDALF-ROUTER-MIB", "grCommMemberIpAddr"))
if mibBuilder.loadTexts: grSnmpCommMemberEntry.setStatus('mandatory')
grCommMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grCommMemberIpAddr.setStatus('mandatory')
grCommMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 7, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCommMemberStatus.setStatus('mandatory')
grPppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 1), )
if mibBuilder.loadTexts: grPppLinkStatusTable.setStatus('mandatory')
grPppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grPppLinkStatusEntry.setStatus('mandatory')
grPppLinkStatusMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPppLinkStatusMultilink.setStatus('mandatory')
grPppLinkStatusLapB = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPppLinkStatusLapB.setStatus('mandatory')
grPppIpxTable = MibTable((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 2), )
if mibBuilder.loadTexts: grPppIpxTable.setStatus('mandatory')
grPppIpxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grPppIpxEntry.setStatus('mandatory')
grPppIpxAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grPppIpxAdminStatus.setStatus('mandatory')
grPppIpxOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 64, 11, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPppIpxOperStatus.setStatus('mandatory')
grNewIpDefaultGateway = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,1200))
grIpStaticRouteOverride = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,1201))
grIpxStaticRouteOverride = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,1202))
grPppLqmFailed = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,1203))
grWanRetryThreshold = NotificationType((1, 3, 6, 1, 4, 1, 64) + (0,1204))
mibBuilder.exportSymbols("GANDALF-ROUTER-MIB", grIpxVRipEnable=grIpxVRipEnable, grPhysWanStOutCalls=grPhysWanStOutCalls, grIpVNetEncap=grIpVNetEncap, RowStatus=RowStatus, grPhysPortEntry=grPhysPortEntry, grSnmpGroup=grSnmpGroup, grIpxLRestrictions=grIpxLRestrictions, grIpxVStatus=grIpxVStatus, grPppLinkStatusMultilink=grPppLinkStatusMultilink, grIpxLAccessDef=grIpxLAccessDef, grIpVirtualEntry=grIpVirtualEntry, grIpxRouteDelay=grIpxRouteDelay, grIpVRipMetric=grIpVRipMetric, grIpxServerEntry=grIpxServerEntry, grIpxServerSapType=grIpxServerSapType, grVSProtocolType=grVSProtocolType, grIpGatewayAddr=grIpGatewayAddr, grPhysWanStTxAborts=grPhysWanStTxAborts, grIpxVSapUpdates=grIpxVSapUpdates, grCommunityTrapGeneration=grCommunityTrapGeneration, grPhysWanStTxUnderRunErrs=grPhysWanStTxUnderRunErrs, grIpxServerName=grIpxServerName, grPhysPortWanType=grPhysPortWanType, grLogicalDestName=grLogicalDestName, grBridgePortEntry=grBridgePortEntry, grSnmpCommMemberEntry=grSnmpCommMemberEntry, grdBaseRev=grdBaseRev, grPppIpxTable=grPppIpxTable, grLogWanStCmpsdRxOctets=grLogWanStCmpsdRxOctets, grLogWanStConnects=grLogWanStConnects, grIpxLStatus=grIpxLStatus, grLogWanPortStatus=grLogWanPortStatus, grIpxAccessRestrictTable=grIpxAccessRestrictTable, grIpxVSapWrongNets=grIpxVSapWrongNets, grIpxVRipRxNearRs=grIpxVRipRxNearRs, grLogWanPortPool=grLogWanPortPool, grIpxOutRequests=grIpxOutRequests, grVirtualStatsTable=grVirtualStatsTable, grLogWanThshldOvrflw=grLogWanThshldOvrflw, grIpGatewayStatus=grIpGatewayStatus, grIpxPrimaryNet=grIpxPrimaryNet, grIpxOutNoRoutes=grIpxOutNoRoutes, grIpxVSapTxGenRs=grIpxVSapTxGenRs, grIpxServerNode=grIpxServerNode, grLogWanConnTimer=grLogWanConnTimer, grIpxAccDstNode=grIpxAccDstNode, grVSRxOctets=grVSRxOctets, grPppLinkStatusLapB=grPppLinkStatusLapB, grProtPriorityStatus=grProtPriorityStatus, grIpAccessRestrictEntry=grIpAccessRestrictEntry, grIpxAccName=grIpxAccName, grNewIpDefaultGateway=grNewIpDefaultGateway, grCommunityStatus=grCommunityStatus, grIpxStaticRouteOverride=grIpxStaticRouteOverride, grIpxServerAge=grIpxServerAge, grIpxGroup=grIpxGroup, grProtFilterTable=grProtFilterTable, grPppIpxAdminStatus=grPppIpxAdminStatus, grIpxVRipRxGenRs=grIpxVRipRxGenRs, grBridgePortTable=grBridgePortTable, grSerNum=grSerNum, grIpxVRipMetric=grIpxVRipMetric, grIpxInUnknownSockets=grIpxInUnknownSockets, grIpxVSapTable=grIpxVSapTable, grPhysPortPool=grPhysPortPool, grLogicalStatus=grLogicalStatus, grIpxVRipNoNetAddRcvs=grIpxVRipNoNetAddRcvs, grIpGatewayName=grIpGatewayName, grPhysWanStLogicalIfIndex=grPhysWanStLogicalIfIndex, grIpxRouteHops=grIpxRouteHops, grPhysWanStInSecurityFails=grPhysWanStInSecurityFails, grLogWanStUncmpsdTxOctets=grLogWanStUncmpsdTxOctets, grIpAccType=grIpAccType, grIpxAccIndex=grIpxAccIndex, grIpLRestrictions=grIpLRestrictions, grPhysNameTable=grPhysNameTable, grIpxVRipBadInfos=grIpxVRipBadInfos, grCommunityPriv=grCommunityPriv, grIpxServerStatus=grIpxServerStatus, grLogWanPortPhysIfIndex=grLogWanPortPhysIfIndex, grIpAccPortTo=grIpAccPortTo, grIpxVSapBadInfos=grIpxVSapBadInfos, grProtFilterStatus=grProtFilterStatus, grBrPortStTxFilteredPkts=grBrPortStTxFilteredPkts, grPppGroup=grPppGroup, grIpTrustedGatewayTable=grIpTrustedGatewayTable, grLogicalGroup=grLogicalGroup, grSpanningTreeStatus=grSpanningTreeStatus, grIpLTransport=grIpLTransport, grPppIpxEntry=grPppIpxEntry, grLogWanPortAdminStatus=grLogWanPortAdminStatus, grIpxVRipAgeTimer=grIpxVRipAgeTimer, grPhysPortGroup=grPhysPortGroup, grIpAccName=grIpAccName, grIpxVIfIndex=grIpxVIfIndex, grIpxAccSrcSocketTo=grIpxAccSrcSocketTo, grProtPriorityEntry=grProtPriorityEntry, grIpxAccSrcNode=grIpxAccSrcNode, gandalf=gandalf, grBrMaxTransitDelay=grBrMaxTransitDelay, grIpxOutDiscards=grIpxOutDiscards, grIpxVSapRxUnknNearRs=grIpxVSapRxUnknNearRs, grVSRxFilteredPkts=grVSRxFilteredPkts, grCommunityType=grCommunityType, grIpxVSapRxUnknGenRs=grIpxVSapRxUnknGenRs, grIpVOverrideDefaultRoute=grIpVOverrideDefaultRoute, grIpxServerNet=grIpxServerNet, grBrPortStpBpduFilter=grBrPortStpBpduFilter, grIpxRoutingEnable=grIpxRoutingEnable, grPhysWanStRxAborts=grPhysWanStRxAborts, grIpVRipTx=grIpVRipTx, grPhysWanStInCalls=grPhysWanStInCalls, grCommMemberStatus=grCommMemberStatus, grPhysNameEntry=grPhysNameEntry, grBridgeGroup=grBridgeGroup, grIpxServerTable=grIpxServerTable, grIpxVRipNetbHopCntExcs=grIpxVRipNetbHopCntExcs, grIpxVRipHopCntExcs=grIpxVRipHopCntExcs, grPhysPortSpeed=grPhysPortSpeed, grIpxInDelivers=grIpxInDelivers, grIpGroup=grIpGroup, grProtFilterEntry=grProtFilterEntry, grIpxVWdogSpoof=grIpxVWdogSpoof, grIpxVSapEnable=grIpxVSapEnable, grLogWanEntry=grLogWanEntry, grIpRipEnable=grIpRipEnable, grCommunityName=grCommunityName, grBrPortStRxOctets=grBrPortStRxOctets, grIpxServerType=grIpxServerType, grPppLinkStatusEntry=grPppLinkStatusEntry, grLogWanStConnectFails=grLogWanStConnectFails, grIpxInDiscards=grIpxInDiscards, grIpAccSrcMask=grIpAccSrcMask, grProtPriorityId=grProtPriorityId, gandalf_router=gandalf_router, grIpVSendStaticRoutes=grIpVSendStaticRoutes, grSystemName=grSystemName, grIpxVirtualTable=grIpxVirtualTable, grIpxVNetAddr=grIpxVNetAddr, grBridgingState=grBridgingState, grIpAccStatus=grIpAccStatus, grIpxAccType=grIpxAccType, grIpVIfIndex=grIpVIfIndex, grPhysPortSignalling=grPhysPortSignalling, grLogWanStatsTable=grLogWanStatsTable, grPhysWanStatsTable=grPhysWanStatsTable, grPhysWanStRxOverRunErrs=grPhysWanStRxOverRunErrs, grLogWanPortIndex=grLogWanPortIndex, grIpAccIndex=grIpAccIndex, grIpxVSapRxUnknNearQs=grIpxVSapRxUnknNearQs, grIpxVRipTable=grIpxVRipTable, grIpAccProtocolTo=grIpAccProtocolTo, grVSTxOctets=grVSTxOctets, grIpTrustedGatewayEntry=grIpTrustedGatewayEntry, grIpVRipRxBadPkts=grIpVRipRxBadPkts, grIpxRipEnable=grIpxRipEnable, grIpxServerSocket=grIpxServerSocket, grIpxAccSrcSocketFrom=grIpxAccSrcSocketFrom, grPhysWanStRxCrcErrs=grPhysWanStRxCrcErrs, grIpxVSapTxGenQs=grIpxVSapTxGenQs, grLogWanTable=grLogWanTable, grSnmpCommunityEntry=grSnmpCommunityEntry, grIpxVRipRtePkts=grIpxVRipRtePkts, grLogWanDiscTimer=grLogWanDiscTimer, grVSIfIndex=grVSIfIndex, grGeneral=grGeneral, grIpAccPortFrom=grIpAccPortFrom, grPhysWanStatsEntry=grPhysWanStatsEntry, grIpAccessRestrictEnable=grIpAccessRestrictEnable, grIpxVRipTxNearRs=grIpxVRipTxNearRs, grIpxLogicalTable=grIpxLogicalTable, grPhysPortCallType=grPhysPortCallType, grLogicalEntry=grLogicalEntry, grIpAccProtocolFrom=grIpAccProtocolFrom, grVSTxFilteredPkts=grVSTxFilteredPkts, grIpxVSapRxUnknGenQs=grIpxVSapRxUnknGenQs, grIpVNetAddr=grIpVNetAddr, grPppLqmFailed=grPppLqmFailed, grIpxVRipRxUnknGenRs=grIpxVRipRxUnknGenRs, grIpxVNetEncap=grIpxVNetEncap, grIpProxyArp=grIpProxyArp, grIpLAccessDef=grIpLAccessDef, grLogWanThshld=grLogWanThshld, grIpxLogicalEntry=grIpxLogicalEntry, grBrPortStTxOctets=grBrPortStTxOctets, grIpxVRipRxNearQs=grIpxVRipRxNearQs, grProtFilterType=grProtFilterType, grPhysWanStInFails=grPhysWanStInFails, grLogWanPortRetry=grLogWanPortRetry, grIpxVSapRxGenRs=grIpxVSapRxGenRs, grIpTrustedGatewayEnable=grIpTrustedGatewayEnable, grLogWanPortRetryPeriod=grLogWanPortRetryPeriod, grIpxVRipTxGenRs=grIpxVRipTxGenRs, grIpxVRipRxUnknGenQs=grIpxVRipRxUnknGenQs, grIpArpCacheAge=grIpArpCacheAge, grVSTxPkts=grVSTxPkts, grLogWanPortDestAddr=grLogWanPortDestAddr, grIpxRouteNextHopNode=grIpxRouteNextHopNode, grLogWanPortPrepend=grLogWanPortPrepend, grIpxRouteType=grIpxRouteType, grIpxVRipEntry=grIpxVRipEntry, grIpVNetMask=grIpVNetMask, grLogicalTimeEnabled=grLogicalTimeEnabled, grCommMemberIpAddr=grCommMemberIpAddr, grIpVirtualTable=grIpVirtualTable, grSnmpCommMemberTable=grSnmpCommMemberTable, grLogWanSpoofing=grLogWanSpoofing, grIpVStatus=grIpVStatus, grIpVRipEntry=grIpVRipEntry, grReset=grReset, grIpxAccDstSocketFrom=grIpxAccDstSocketFrom, grIpxVRipWrongNets=grIpxVRipWrongNets, grProtFilterId=grProtFilterId, grPhysPortName=grPhysPortName, grIpxVRipTxNearQs=grIpxVRipTxNearQs, grLogicalType=grLogicalType, grIpVRipRx=grIpVRipRx, grIpxAccSrcNet=grIpxAccSrcNet, grIpxSapEnable=grIpxSapEnable, grVSNetAddr=grVSNetAddr, grIpVBcastAddr=grIpVBcastAddr, grLogWanStCmpsdTxOctets=grLogWanStCmpsdTxOctets, grIpVSendDefaultRoute=grIpVSendDefaultRoute, grIpxVRipTxPeriod=grIpxVRipTxPeriod, grVSRxPkts=grVSRxPkts, grIpVRipRxBadRtes=grIpVRipRxBadRtes, grIpVRipRxPkts=grIpVRipRxPkts, grProtPriorityTable=grProtPriorityTable, grIpxRouteDest=grIpxRouteDest, grPhysPortTable=grPhysPortTable, grVirtualStatsEntry=grVirtualStatsEntry, grSoftwareRev=grSoftwareRev, grIpxRouteIfIndex=grIpxRouteIfIndex, grIpxVSapRxNearRs=grIpxVSapRxNearRs, grIpStaticRouteOverride=grIpStaticRouteOverride, grIpxInHdrErrors=grIpxInHdrErrors, grIpAccessRestrictTable=grIpAccessRestrictTable, grLogWanCmprsn=grLogWanCmprsn, grBridgePortStatsEntry=grBridgePortStatsEntry, grIpxLTransport=grIpxLTransport, grIpLogicalTable=grIpLogicalTable, grIpxRouteAge=grIpxRouteAge, grIpAccDstMask=grIpAccDstMask, grIpxVSapTxNearQs=grIpxVSapTxNearQs, grLogWanStatus=grLogWanStatus, grIpxVSapPeriodics=grIpxVSapPeriodics, grLogicalTimeWindow=grLogicalTimeWindow, grLogWanPortEntry=grLogWanPortEntry, grLogWanStInUse=grLogWanStInUse, grIpxVRipRxUnknNearRs=grIpxVRipRxUnknNearRs, grBrPortAllowedToGoDef=grBrPortAllowedToGoDef, grPhysWanStOutFails=grPhysWanStOutFails, grBridgePortStatsTable=grBridgePortStatsTable, grIpxAccStatus=grIpxAccStatus)
mibBuilder.exportSymbols("GANDALF-ROUTER-MIB", grCommunityTrapPort=grCommunityTrapPort, grIpxVRipRxUnknNearQs=grIpxVRipRxUnknNearQs, grSystemPasswd=grSystemPasswd, grSnmpCommunityTable=grSnmpCommunityTable, grIpxRouteNextHopNet=grIpxRouteNextHopNet, grIpxVSapTxNearRs=grIpxVSapTxNearRs, grIpxVRipAgedOuts=grIpxVRipAgedOuts, grFirmwareRev=grFirmwareRev, grIpLStatus=grIpLStatus, grIpxAccessRestrictEntry=grIpxAccessRestrictEntry, grLogWanPortTable=grLogWanPortTable, grIpxRouteStatus=grIpxRouteStatus, grGenerationX=grGenerationX, grBrFilterTestPackets=grBrFilterTestPackets, grIpxInReceives=grIpxInReceives, grLogicalTable=grLogicalTable, grIpxVSapRxGenQs=grIpxVSapRxGenQs, grLogWanPortOperStatus=grLogWanPortOperStatus, grIpVRipTable=grIpVRipTable, grLogWanStatsEntry=grLogWanStatsEntry, grIpxRouteEntry=grIpxRouteEntry, grPhysWanStRxOctetErrors=grPhysWanStRxOctetErrors, grSnmpNetworkSet=grSnmpNetworkSet, grIpxVSapTxPeriod=grIpxVSapTxPeriod, grIpAccDstNet=grIpAccDstNet, grIpxVRipPeriodics=grIpxVRipPeriodics, grLogWanPortWanType=grLogWanPortWanType, grPppLinkStatusTable=grPppLinkStatusTable, grIpVRipTxUpdates=grIpVRipTxUpdates, grIpxForwDatagrams=grIpxForwDatagrams, grCommunityIndex=grCommunityIndex, grIpLogicalEntry=grIpLogicalEntry, grPppIpxOperStatus=grPppIpxOperStatus, grProtPriorityLevel=grProtPriorityLevel, grBrPortStRxFilteredPkts=grBrPortStRxFilteredPkts, grDateAndTime=grDateAndTime, grIpxRouteTable=grIpxRouteTable, grLogWanStUncmpsdRxOctets=grLogWanStUncmpsdRxOctets, grIpxAccDstNet=grIpxAccDstNet, grIpxVSapRxNearQs=grIpxVSapRxNearQs, grIpxVirtualEntry=grIpxVirtualEntry, grIpxAccDstSocketTo=grIpxAccDstSocketTo, grIpxVSapAgeTimer=grIpxVSapAgeTimer, grIpxVRipUpdates=grIpxVRipUpdates, grIpxAccessRestrictEnable=grIpxAccessRestrictEnable, grIpxVSapEntry=grIpxVSapEntry, grIpxVRipRxGenQs=grIpxVRipRxGenQs, grIpxVRipTxGenQs=grIpxVRipTxGenQs, grWanRetryThreshold=grWanRetryThreshold, grIpxVSapAgedOuts=grIpxVSapAgedOuts, grIpAccSrcNet=grIpAccSrcNet, grPhysWanStTxOctetErrors=grPhysWanStTxOctetErrors, grPhysWanStOutSecurityFails=grPhysWanStOutSecurityFails, grVSTTLDiscards=grVSTTLDiscards, grPhysPortHoldOff=grPhysPortHoldOff, grSwitchPosition=grSwitchPosition)
