#
# PySNMP MIB module SRAP-WCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SRAP-WCM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:02:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
a3Com, = mibBuilder.importSymbols("A3Com-products-MIB", "a3Com")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, NotificationType, Gauge32, Bits, Integer32, ObjectIdentity, IpAddress, Unsigned32, MibIdentifier, Counter32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Gauge32", "Bits", "Integer32", "ObjectIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "Counter32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
srAPModules, srAPWCM = mibBuilder.importSymbols("SRAP-GLOBAL-REG", "srAPModules", "srAPWCM")
srAPWCMMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 35, 1, 1, 5))
if mibBuilder.loadTexts: srAPWCMMIBModule.setLastUpdated('9905260000Z')
if mibBuilder.loadTexts: srAPWCMMIBModule.setOrganization('3Com')
wcmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1))
wcmConf = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1))
apConfigMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1))
apPerformMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2))
apFaultMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 3))
apSecurityMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 4))
apEventGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 5))
wcmObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2))
apConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1))
apManufactureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1))
apSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2))
apSNMPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3))
apRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4))
apPerformMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2))
apRFStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1))
apEtherItfStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2))
apRFItfStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3))
apTrafficMatrix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4))
apFaultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3))
apSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4))
wcmEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 3))
wcmEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 3, 0))
apModelnumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apModelnumber.setStatus('current')
apSerialnumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSerialnumber.setStatus('current')
apMyMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMyMacAddr.setStatus('current')
apFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFirmwareVer.setStatus('current')
apWebUiVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWebUiVer.setStatus('current')
apMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMfgDate.setStatus('current')
apProductName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProductName.setStatus('current')
apMfgName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMfgName.setStatus('current')
apHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHardwareRev.setStatus('current')
apDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDeviceName.setStatus('current')
apDeviceLoc = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDeviceLoc.setStatus('current')
apHelpFilePath = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHelpFilePath.setStatus('current')
apMyIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMyIPAddr.setStatus('current')
apSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetMask.setStatus('current')
apGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apGatewayIPAddr.setStatus('current')
apAdditionalGatewaysTableLength = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAdditionalGatewaysTableLength.setStatus('current')
apAdditionalGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8), )
if mibBuilder.loadTexts: apAdditionalGatewaysTable.setStatus('current')
apAdditionalGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "additionalGatewaysIndex"))
if mibBuilder.loadTexts: apAdditionalGatewaysEntry.setStatus('current')
additionalGatewaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: additionalGatewaysIndex.setStatus('current')
apAdditionalGatewaysIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAdditionalGatewaysIPAddr.setStatus('current')
apDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDHCPEnable.setStatus('current')
apStaticIPAddrEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apStaticIPAddrEnable.setStatus('current')
apSNMPRequests = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSNMPRequests.setStatus('current')
apSNMPTraps = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSNMPTraps.setStatus('current')
apAllTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAllTrapsEnable.setStatus('current')
apColdBootTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apColdBootTrapEnable.setStatus('current')
apAuthenFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenFailureTrapEnable.setStatus('current')
apRFTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFTrapEnable.setStatus('current')
apWarmBootTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWarmBootTrapEnable.setStatus('current')
apWCMaxAssocTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWCMaxAssocTrapEnable.setStatus('current')
apThresholdAssociatedEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apThresholdAssociatedEnable.setStatus('current')
dslSecurityViolationEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslSecurityViolationEnable.setStatus('current')
apWlanServiceArea = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanServiceArea.setStatus('current')
apCountryName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCountryName.setStatus('current')
apWEPAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("openSystem", 1), ("wep40bShareKey", 2), ("wep128bShareKey", 3), ("wep128bpasswordsessionKey", 4), ("wepEAPMD5Authenticationwithnoencryption", 5), ("wepEAPMD5Authenticationwith40bsharedkey", 6), ("wepEAPMD5Authenticationwith128bsharedkey", 7), ("wepEAPMD5Authenticationwith128bpasswordsessionkey", 8), ("wepEAPTLSAuthenticationwith40bsessionkey", 9), ("wepEAPTLSAuthenticationwith128bsessionkey", 10), ("wepSerialAuthenticationwith40bsessionkey", 11), ("wepSerialAuthenticationwith128bsessionkey", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWEPAlgorithm.setStatus('current')
apShortPreamble = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apShortPreamble.setStatus('current')
apMaxWCTrigger = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaxWCTrigger.setStatus('current')
apRadioAutoSense = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioAutoSense.setStatus('current')
apRadioChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioChannel.setStatus('current')
apHighPerformance = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHighPerformance.setStatus('current')
apTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTransmitPower.setStatus('current')
apRadioAntenna = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledoneantenna", 1), ("bothantennaon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioAntenna.setStatus('current')
thresholdAssociated = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdAssociated.setStatus('current')
apDataRateMgmt = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRateMgmt.setStatus('current')
apDataRate5 = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("optional", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRate5.setStatus('current')
apDataRate11 = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("optional", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRate11.setStatus('current')
rfTxUcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxUcastFrms.setStatus('current')
rfRxUcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxUcastFrms.setStatus('current')
rfTxBcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxBcastFrms.setStatus('current')
rfRxBcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxBcastFrms.setStatus('current')
rfTxMcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxMcastFrms.setStatus('current')
rfRxMcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxMcastFrms.setStatus('current')
rfTxEncryptFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxEncryptFrms.setStatus('current')
rfRxEncryptFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxEncryptFrms.setStatus('current')
rfTxFragFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxFragFrms.setStatus('current')
rfRxFragFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxFragFrms.setStatus('current')
rfTxBeacons = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxBeacons.setStatus('current')
rfRxBeacons = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxBeacons.setStatus('current')
rfTxACK = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxACK.setStatus('current')
rfRxACK = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxACK.setStatus('current')
rfTxRTS = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxRTS.setStatus('current')
rfRxRTS = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxRTS.setStatus('current')
rfCTSFailures = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfCTSFailures.setStatus('current')
rfRxCTS = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxCTS.setStatus('current')
rfTxACKFailures = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxACKFailures.setStatus('current')
rfTxRetrys = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxRetrys.setStatus('current')
rfFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfFCSErrors.setStatus('current')
rfRxDuplicateFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxDuplicateFrms.setStatus('current')
rfWEPUndecryptFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfWEPUndecryptFrms.setStatus('current')
rfWEPICVErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfWEPICVErrors.setStatus('current')
apEtherPacketsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPacketsIns.setStatus('current')
apEtherPacketsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPacketsOuts.setStatus('current')
apEtherOctetsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctetsIns.setStatus('current')
apEtherOctetsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctetsOuts.setStatus('current')
apEtherPktsInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPktsInPerSec.setStatus('current')
apEtherPktsOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPktsOutPerSec.setStatus('current')
apEtherOctInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctInPerSec.setStatus('current')
apEtherOctOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctOutPerSec.setStatus('current')
apRFFrmsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsIns.setStatus('current')
apRFFrmsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsOuts.setStatus('current')
apRFOctetsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctetsIns.setStatus('current')
apRFOctetsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctetsOuts.setStatus('current')
apRFFrmsInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsInPerSec.setStatus('current')
apRFFrmsOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsOutPerSec.setStatus('current')
apRFOctInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctInPerSec.setStatus('current')
apRFOctOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctOutPerSec.setStatus('current')
apEnetsNPktsToEnets = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnetsNPktsToEnets.setStatus('current')
apRFNPktsToEnets = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFNPktsToEnets.setStatus('current')
apEnetsNPktsToRF = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnetsNPktsToRF.setStatus('current')
apRFNPktsToRF = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFNPktsToRF.setStatus('current')
apDSPerFreqStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5), )
if mibBuilder.loadTexts: apDSPerFreqStatTable.setStatus('current')
apDSPerFreqStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "rfDSFrequency"))
if mibBuilder.loadTexts: apDSPerFreqStatEntry.setStatus('current')
rfDSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSFrequency.setStatus('current')
rfDSPerFqPktsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqPktsSents.setStatus('current')
rfDSPerFqPktsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqPktsRcvds.setStatus('current')
rfDSPerFqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqRetries.setStatus('current')
apUpdateTemplateStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("downloadSuccessful", 1), ("downloadUnknownError", 2), ("downloadTimeout", 3), ("badFileName", 4), ("badMacAddrForRestoreFile", 5), ("incorrectFileImage", 6), ("tftpFileNotFound", 7), ("tftpAccessViolation", 8), ("tftpDiskfullOrAllocationExceeded", 9), ("tftpIllegalTFTPoperation", 10), ("tftpUnknownTransferID", 11), ("tftpFileAlreadyExists", 12), ("tftpNoSuchUser", 13), ("fileDownloadOrUpload", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUpdateTemplateStatus.setStatus('current')
apBackupFileName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBackupFileName.setStatus('current')
apTemplateOperation = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("startBackup", 1), ("startTemplate", 2), ("startRestore", 3), ("uploadingData", 4), ("downloadingData", 5), ("notDownloading", 6), ("idle", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTemplateOperation.setStatus('current')
apRestoreFileName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRestoreFileName.setStatus('current')
apSyslogDstIpAddressTableLength = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogDstIpAddressTableLength.setStatus('current')
apSyslogDstIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6), )
if mibBuilder.loadTexts: apSyslogDstIpAddressTable.setStatus('current')
apSyslogDstIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apSyslogDstIpAddressIndex"))
if mibBuilder.loadTexts: apSyslogDstIpAddressEntry.setStatus('current')
apSyslogDstIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: apSyslogDstIpAddressIndex.setStatus('current')
apSyslogDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogDstIpAddress.setStatus('current')
apSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogEnable.setStatus('current')
apACLViolations = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apACLViolations.setStatus('current')
apEAPSupport = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("eap", 2), ("serialauth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEAPSupport.setStatus('current')
apAuthServerSupportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAuthServerSupportNumber.setStatus('current')
apKeyServerSupportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKeyServerSupportNumber.setStatus('current')
apAccountServerSupportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccountServerSupportNumber.setStatus('current')
apAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6), )
if mibBuilder.loadTexts: apAuthServerTable.setStatus('current')
apAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apAuthServerIndex"))
if mibBuilder.loadTexts: apAuthServerEntry.setStatus('current')
apAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apAuthServerIndex.setStatus('current')
apAuthServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerIPAddr.setStatus('current')
apAuthServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerPortNumber.setStatus('current')
apAuthSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthSharedSecret.setStatus('mandatory')
apAuthServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerRetransmit.setStatus('current')
apAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerTimeout.setStatus('current')
apKeyServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7), )
if mibBuilder.loadTexts: apKeyServerTable.setStatus('current')
apKeyServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apKeyServerIndex"))
if mibBuilder.loadTexts: apKeyServerEntry.setStatus('current')
apKeyServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apKeyServerIndex.setStatus('current')
apKeyServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeyServerIPAddr.setStatus('current')
apKeyServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeyServerPortNumber.setStatus('current')
apAccountServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8), )
if mibBuilder.loadTexts: apAccountServerTable.setStatus('current')
apAccountServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apAccountServerIndex"))
if mibBuilder.loadTexts: apAccountServerEntry.setStatus('current')
apAccountServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apAccountServerIndex.setStatus('current')
apAccountServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerIPAddr.setStatus('current')
apAccountServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerPortNumber.setStatus('current')
apAccountServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerSharedSecret.setStatus('mandatory')
apAccountServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerRetransmit.setStatus('current')
apAccountServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerTimeout.setStatus('current')
apFastReKeying = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFastReKeying.setStatus('current')
apTFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPServerPortNumber.setStatus('current')
apTFTPRetries = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPRetries.setStatus('current')
apTFTPTimeOutInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPTimeOutInterval.setStatus('current')
apEncryptionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13), )
if mibBuilder.loadTexts: apEncryptionTable.setStatus('current')
apEncryptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apEncryptionEntry.setStatus('current')
apEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("wep64b", 2), ("wep128b", 3), ("wep152b", 4), ("tkipWPAPSK", 5), ("tkipWPAEnterprise", 6), ("aesWPAPSK", 7), ("aesWPAEnterprise", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEncryptionMode.setStatus('current')
apWPAPSKPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAPSKPassPhrase.setStatus('current')
apWEPDefaultKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKeyID.setStatus('current')
apWEPDefaultKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey1.setStatus('current')
apWEPDefaultKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey2.setStatus('current')
apWEPDefaultKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey3.setStatus('current')
apWEPDefaultKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey4.setStatus('current')
radioTransmitStop = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 95)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"), ("SRAP-WCM-MIB", "apRadioChannel"))
if mibBuilder.loadTexts: radioTransmitStop.setStatus('current')
radioReceiveStop = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 96)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"), ("SRAP-WCM-MIB", "apRadioChannel"))
if mibBuilder.loadTexts: radioReceiveStop.setStatus('current')
exceedMaxAssociated = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 97)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: exceedMaxAssociated.setStatus('current')
exceedtThresholdAssociated = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 98)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: exceedtThresholdAssociated.setStatus('current')
dslSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 99)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dslSecurityViolation.setStatus('current')
apManufactureInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 1)).setObjects(("SRAP-WCM-MIB", "apModelnumber"), ("SRAP-WCM-MIB", "apSerialnumber"), ("SRAP-WCM-MIB", "apMyMacAddr"), ("SRAP-WCM-MIB", "apFirmwareVer"), ("SRAP-WCM-MIB", "apMfgDate"), ("SRAP-WCM-MIB", "apWebUiVer"), ("SRAP-WCM-MIB", "apProductName"), ("SRAP-WCM-MIB", "apMfgName"), ("SRAP-WCM-MIB", "apHardwareRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apManufactureInfoGroup = apManufactureInfoGroup.setStatus('current')
apSystemConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 2)).setObjects(("SRAP-WCM-MIB", "apDeviceName"), ("SRAP-WCM-MIB", "apDeviceLoc"), ("SRAP-WCM-MIB", "apHelpFilePath"), ("SRAP-WCM-MIB", "apMyIPAddr"), ("SRAP-WCM-MIB", "apSubnetMask"), ("SRAP-WCM-MIB", "apGatewayIPAddr"), ("SRAP-WCM-MIB", "apAdditionalGatewaysTableLength"), ("SRAP-WCM-MIB", "apAdditionalGatewaysIPAddr"), ("SRAP-WCM-MIB", "apDHCPEnable"), ("SRAP-WCM-MIB", "apStaticIPAddrEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSystemConfigGroup = apSystemConfigGroup.setStatus('current')
apSNMPInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 3)).setObjects(("SRAP-WCM-MIB", "apSNMPRequests"), ("SRAP-WCM-MIB", "apSNMPTraps"), ("SRAP-WCM-MIB", "apAllTrapsEnable"), ("SRAP-WCM-MIB", "apColdBootTrapEnable"), ("SRAP-WCM-MIB", "apAuthenFailureTrapEnable"), ("SRAP-WCM-MIB", "apRFTrapEnable"), ("SRAP-WCM-MIB", "apWarmBootTrapEnable"), ("SRAP-WCM-MIB", "apWCMaxAssocTrapEnable"), ("SRAP-WCM-MIB", "apThresholdAssociatedEnable"), ("SRAP-WCM-MIB", "dslSecurityViolationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSNMPInfoGroup = apSNMPInfoGroup.setStatus('current')
apRFConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 4)).setObjects(("SRAP-WCM-MIB", "apWlanServiceArea"), ("SRAP-WCM-MIB", "apCountryName"), ("SRAP-WCM-MIB", "apShortPreamble"), ("SRAP-WCM-MIB", "apMaxWCTrigger"), ("SRAP-WCM-MIB", "apWEPAlgorithm"), ("SRAP-WCM-MIB", "apRadioAutoSense"), ("SRAP-WCM-MIB", "apRadioChannel"), ("SRAP-WCM-MIB", "apHighPerformance"), ("SRAP-WCM-MIB", "apTransmitPower"), ("SRAP-WCM-MIB", "apRadioAntenna"), ("SRAP-WCM-MIB", "thresholdAssociated"), ("SRAP-WCM-MIB", "apDataRateMgmt"), ("SRAP-WCM-MIB", "apDataRate5"), ("SRAP-WCM-MIB", "apDataRate11"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRFConfigGroup = apRFConfigGroup.setStatus('current')
apRFStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 1)).setObjects(("SRAP-WCM-MIB", "rfTxUcastFrms"), ("SRAP-WCM-MIB", "rfRxUcastFrms"), ("SRAP-WCM-MIB", "rfTxBcastFrms"), ("SRAP-WCM-MIB", "rfRxBcastFrms"), ("SRAP-WCM-MIB", "rfTxMcastFrms"), ("SRAP-WCM-MIB", "rfRxMcastFrms"), ("SRAP-WCM-MIB", "rfTxEncryptFrms"), ("SRAP-WCM-MIB", "rfRxEncryptFrms"), ("SRAP-WCM-MIB", "rfTxFragFrms"), ("SRAP-WCM-MIB", "rfRxFragFrms"), ("SRAP-WCM-MIB", "rfTxBeacons"), ("SRAP-WCM-MIB", "rfRxBeacons"), ("SRAP-WCM-MIB", "rfTxACK"), ("SRAP-WCM-MIB", "rfRxACK"), ("SRAP-WCM-MIB", "rfTxRTS"), ("SRAP-WCM-MIB", "rfRxRTS"), ("SRAP-WCM-MIB", "rfCTSFailures"), ("SRAP-WCM-MIB", "rfRxCTS"), ("SRAP-WCM-MIB", "rfTxACKFailures"), ("SRAP-WCM-MIB", "rfTxRetrys"), ("SRAP-WCM-MIB", "rfFCSErrors"), ("SRAP-WCM-MIB", "rfRxDuplicateFrms"), ("SRAP-WCM-MIB", "rfWEPUndecryptFrms"), ("SRAP-WCM-MIB", "rfWEPICVErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRFStatisticsGroup = apRFStatisticsGroup.setStatus('current')
apEtherItfStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 2)).setObjects(("SRAP-WCM-MIB", "apEtherPacketsIns"), ("SRAP-WCM-MIB", "apEtherPacketsOuts"), ("SRAP-WCM-MIB", "apEtherOctetsIns"), ("SRAP-WCM-MIB", "apEtherOctetsOuts"), ("SRAP-WCM-MIB", "apEtherPktsInPerSec"), ("SRAP-WCM-MIB", "apEtherPktsOutPerSec"), ("SRAP-WCM-MIB", "apEtherOctInPerSec"), ("SRAP-WCM-MIB", "apEtherOctOutPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEtherItfStatGroup = apEtherItfStatGroup.setStatus('current')
apRFItfStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 3)).setObjects(("SRAP-WCM-MIB", "apRFFrmsIns"), ("SRAP-WCM-MIB", "apRFFrmsOuts"), ("SRAP-WCM-MIB", "apRFOctetsIns"), ("SRAP-WCM-MIB", "apRFOctetsOuts"), ("SRAP-WCM-MIB", "apRFFrmsInPerSec"), ("SRAP-WCM-MIB", "apRFFrmsOutPerSec"), ("SRAP-WCM-MIB", "apRFOctInPerSec"), ("SRAP-WCM-MIB", "apRFOctOutPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRFItfStatGroup = apRFItfStatGroup.setStatus('current')
apTrafficMatrixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 4)).setObjects(("SRAP-WCM-MIB", "apEnetsNPktsToEnets"), ("SRAP-WCM-MIB", "apRFNPktsToEnets"), ("SRAP-WCM-MIB", "apEnetsNPktsToRF"), ("SRAP-WCM-MIB", "apRFNPktsToRF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apTrafficMatrixGroup = apTrafficMatrixGroup.setStatus('current')
apDSPerFreqStatTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 5)).setObjects(("SRAP-WCM-MIB", "rfDSFrequency"), ("SRAP-WCM-MIB", "rfDSPerFqPktsSents"), ("SRAP-WCM-MIB", "rfDSPerFqPktsRcvds"), ("SRAP-WCM-MIB", "rfDSPerFqRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDSPerFreqStatTableGroup = apDSPerFreqStatTableGroup.setStatus('current')
apFaultMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 3, 1)).setObjects(("SRAP-WCM-MIB", "apUpdateTemplateStatus"), ("SRAP-WCM-MIB", "apBackupFileName"), ("SRAP-WCM-MIB", "apTemplateOperation"), ("SRAP-WCM-MIB", "apRestoreFileName"), ("SRAP-WCM-MIB", "apSyslogDstIpAddressTableLength"), ("SRAP-WCM-MIB", "apSyslogDstIpAddress"), ("SRAP-WCM-MIB", "apSyslogEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apFaultMgmtGroup = apFaultMgmtGroup.setStatus('current')
apSecurityMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 4, 1)).setObjects(("SRAP-WCM-MIB", "apACLViolations"), ("SRAP-WCM-MIB", "apEAPSupport"), ("SRAP-WCM-MIB", "apAuthServerSupportNumber"), ("SRAP-WCM-MIB", "apKeyServerSupportNumber"), ("SRAP-WCM-MIB", "apAccountServerSupportNumber"), ("SRAP-WCM-MIB", "apAuthServerIPAddr"), ("SRAP-WCM-MIB", "apAuthServerPortNumber"), ("SRAP-WCM-MIB", "apAuthSharedSecret"), ("SRAP-WCM-MIB", "apAuthServerRetransmit"), ("SRAP-WCM-MIB", "apAuthServerTimeout"), ("SRAP-WCM-MIB", "apKeyServerIPAddr"), ("SRAP-WCM-MIB", "apKeyServerPortNumber"), ("SRAP-WCM-MIB", "apAccountServerIPAddr"), ("SRAP-WCM-MIB", "apAccountServerPortNumber"), ("SRAP-WCM-MIB", "apAccountSharedSecret"), ("SRAP-WCM-MIB", "apAccountServerRetransmit"), ("SRAP-WCM-MIB", "apAccountServerTimeout"), ("SRAP-WCM-MIB", "apFastReKeying"), ("SRAP-WCM-MIB", "apTFTPServerPortNumber"), ("SRAP-WCM-MIB", "apTFTPRetries"), ("SRAP-WCM-MIB", "apTFTPTimeOutInterval"), ("SRAP-WCM-MIB", "apEncryptionMode"), ("SRAP-WCM-MIB", "apWPAPSKPassPhrase"), ("SRAP-WCM-MIB", "apWEPDefaultKeyID"), ("SRAP-WCM-MIB", "apWEPDefaultKey1"), ("SRAP-WCM-MIB", "apWEPDefaultKey2"), ("SRAP-WCM-MIB", "apWEPDefaultKey3"), ("SRAP-WCM-MIB", "apWEPDefaultKey4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityMgmtGroup = apSecurityMgmtGroup.setStatus('current')
wcmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 5, 1)).setObjects(("SRAP-WCM-MIB", "radioTransmitStop"), ("SRAP-WCM-MIB", "radioReceiveStop"), ("SRAP-WCM-MIB", "exceedMaxAssociated"), ("SRAP-WCM-MIB", "exceedtThresholdAssociated"), ("SRAP-WCM-MIB", "dslSecurityViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wcmNotificationGroup = wcmNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("SRAP-WCM-MIB", rfTxRTS=rfTxRTS, apTFTPServerPortNumber=apTFTPServerPortNumber, apPerformMgmtGroups=apPerformMgmtGroups, apAccountServerPortNumber=apAccountServerPortNumber, apThresholdAssociatedEnable=apThresholdAssociatedEnable, apKeyServerSupportNumber=apKeyServerSupportNumber, rfWEPICVErrors=rfWEPICVErrors, exceedtThresholdAssociated=exceedtThresholdAssociated, apKeyServerTable=apKeyServerTable, apSerialnumber=apSerialnumber, apMaxWCTrigger=apMaxWCTrigger, apTFTPTimeOutInterval=apTFTPTimeOutInterval, rfDSPerFqPktsRcvds=rfDSPerFqPktsRcvds, rfRxMcastFrms=rfRxMcastFrms, apFastReKeying=apFastReKeying, apHighPerformance=apHighPerformance, apAccountServerTable=apAccountServerTable, wcmObjs=wcmObjs, apBackupFileName=apBackupFileName, apDataRateMgmt=apDataRateMgmt, apPerformMgmt=apPerformMgmt, rfRxUcastFrms=rfRxUcastFrms, apWEPDefaultKeyID=apWEPDefaultKeyID, apAuthenFailureTrapEnable=apAuthenFailureTrapEnable, apSNMPInfoGroup=apSNMPInfoGroup, apRFTrapEnable=apRFTrapEnable, apAuthServerTable=apAuthServerTable, apSyslogDstIpAddressEntry=apSyslogDstIpAddressEntry, apSubnetMask=apSubnetMask, apAdditionalGatewaysTable=apAdditionalGatewaysTable, apEAPSupport=apEAPSupport, apGatewayIPAddr=apGatewayIPAddr, apMfgDate=apMfgDate, apDeviceName=apDeviceName, apWCMaxAssocTrapEnable=apWCMaxAssocTrapEnable, apAuthServerIPAddr=apAuthServerIPAddr, apRFStatisticsGroup=apRFStatisticsGroup, apSecurityMgmtGroup=apSecurityMgmtGroup, apConfigMgmtGroups=apConfigMgmtGroups, apUpdateTemplateStatus=apUpdateTemplateStatus, rfRxACK=rfRxACK, apWarmBootTrapEnable=apWarmBootTrapEnable, rfTxEncryptFrms=rfTxEncryptFrms, rfDSPerFqPktsSents=rfDSPerFqPktsSents, apAuthServerPortNumber=apAuthServerPortNumber, rfTxUcastFrms=rfTxUcastFrms, apEtherOctOutPerSec=apEtherOctOutPerSec, apWEPDefaultKey4=apWEPDefaultKey4, apTrafficMatrixGroup=apTrafficMatrixGroup, apAuthServerIndex=apAuthServerIndex, apCountryName=apCountryName, rfRxBeacons=rfRxBeacons, apAccountServerTimeout=apAccountServerTimeout, apRadioAutoSense=apRadioAutoSense, apRadioChannel=apRadioChannel, apEtherPacketsIns=apEtherPacketsIns, apDHCPEnable=apDHCPEnable, apKeyServerPortNumber=apKeyServerPortNumber, apFirmwareVer=apFirmwareVer, rfRxDuplicateFrms=rfRxDuplicateFrms, apWEPDefaultKey3=apWEPDefaultKey3, apSecurityMgmt=apSecurityMgmt, apTrafficMatrix=apTrafficMatrix, apRFOctInPerSec=apRFOctInPerSec, apAuthServerEntry=apAuthServerEntry, rfDSFrequency=rfDSFrequency, apAuthSharedSecret=apAuthSharedSecret, apWebUiVer=apWebUiVer, apRestoreFileName=apRestoreFileName, apRFConfig=apRFConfig, apSNMPRequests=apSNMPRequests, apShortPreamble=apShortPreamble, apWPAPSKPassPhrase=apWPAPSKPassPhrase, apColdBootTrapEnable=apColdBootTrapEnable, apFaultMgmtGroup=apFaultMgmtGroup, exceedMaxAssociated=exceedMaxAssociated, apRFOctetsOuts=apRFOctetsOuts, rfTxACK=rfTxACK, rfTxRetrys=rfTxRetrys, rfRxCTS=rfRxCTS, apEncryptionMode=apEncryptionMode, rfTxMcastFrms=rfTxMcastFrms, wcmMIB=wcmMIB, radioTransmitStop=radioTransmitStop, apMyIPAddr=apMyIPAddr, apManufactureInfo=apManufactureInfo, apSyslogDstIpAddressTable=apSyslogDstIpAddressTable, apEtherItfStat=apEtherItfStat, apAccountServerSupportNumber=apAccountServerSupportNumber, apAccountServerSharedSecret=apAccountServerSharedSecret, apFaultMgmtGroups=apFaultMgmtGroups, apRFStatistics=apRFStatistics, apMyMacAddr=apMyMacAddr, apConfigMgmt=apConfigMgmt, additionalGatewaysIndex=additionalGatewaysIndex, dslSecurityViolationEnable=dslSecurityViolationEnable, apSyslogDstIpAddressTableLength=apSyslogDstIpAddressTableLength, apEnetsNPktsToEnets=apEnetsNPktsToEnets, apTransmitPower=apTransmitPower, rfTxBcastFrms=rfTxBcastFrms, apRFFrmsInPerSec=apRFFrmsInPerSec, wcmNotificationGroup=wcmNotificationGroup, srAPWCMMIBModule=srAPWCMMIBModule, apRFItfStatGroup=apRFItfStatGroup, rfRxBcastFrms=rfRxBcastFrms, apEtherPktsInPerSec=apEtherPktsInPerSec, apKeyServerEntry=apKeyServerEntry, apFaultMgmt=apFaultMgmt, PYSNMP_MODULE_ID=srAPWCMMIBModule, apRFOctetsIns=apRFOctetsIns, apDataRate5=apDataRate5, rfTxBeacons=rfTxBeacons, apTFTPRetries=apTFTPRetries, rfTxFragFrms=rfTxFragFrms, apMfgName=apMfgName, rfRxRTS=rfRxRTS, apEncryptionTable=apEncryptionTable, rfCTSFailures=rfCTSFailures, apDSPerFreqStatTableGroup=apDSPerFreqStatTableGroup, apDSPerFreqStatEntry=apDSPerFreqStatEntry, rfFCSErrors=rfFCSErrors, rfWEPUndecryptFrms=rfWEPUndecryptFrms, apAdditionalGatewaysIPAddr=apAdditionalGatewaysIPAddr, apRFNPktsToRF=apRFNPktsToRF, apRFConfigGroup=apRFConfigGroup, apDataRate11=apDataRate11, apRFFrmsIns=apRFFrmsIns, apSNMPTraps=apSNMPTraps, apAccountServerIndex=apAccountServerIndex, apAdditionalGatewaysEntry=apAdditionalGatewaysEntry, rfRxFragFrms=rfRxFragFrms, apSyslogDstIpAddressIndex=apSyslogDstIpAddressIndex, apSystemConfig=apSystemConfig, apEtherPacketsOuts=apEtherPacketsOuts, apWEPDefaultKey2=apWEPDefaultKey2, apEncryptionEntry=apEncryptionEntry, apAuthServerSupportNumber=apAuthServerSupportNumber, apEtherOctetsOuts=apEtherOctetsOuts, apEtherOctInPerSec=apEtherOctInPerSec, rfRxEncryptFrms=rfRxEncryptFrms, apRadioAntenna=apRadioAntenna, apEtherOctetsIns=apEtherOctetsIns, apWEPAlgorithm=apWEPAlgorithm, wcmConf=wcmConf, apRFOctOutPerSec=apRFOctOutPerSec, wcmEventsV2=wcmEventsV2, apTemplateOperation=apTemplateOperation, apSecurityMgmtGroups=apSecurityMgmtGroups, apRFFrmsOutPerSec=apRFFrmsOutPerSec, apDSPerFreqStatTable=apDSPerFreqStatTable, apHardwareRev=apHardwareRev, apSyslogEnable=apSyslogEnable, apAuthServerRetransmit=apAuthServerRetransmit, apAdditionalGatewaysTableLength=apAdditionalGatewaysTableLength, apEtherPktsOutPerSec=apEtherPktsOutPerSec, apAccountServerEntry=apAccountServerEntry, apRFNPktsToEnets=apRFNPktsToEnets, apSyslogDstIpAddress=apSyslogDstIpAddress, apACLViolations=apACLViolations, apModelnumber=apModelnumber, apSNMPInfo=apSNMPInfo, apAccountServerIPAddr=apAccountServerIPAddr, apStaticIPAddrEnable=apStaticIPAddrEnable, apProductName=apProductName, apEventGroups=apEventGroups, apWEPDefaultKey1=apWEPDefaultKey1, apAccountServerRetransmit=apAccountServerRetransmit, apKeyServerIPAddr=apKeyServerIPAddr, radioReceiveStop=radioReceiveStop, dslSecurityViolation=dslSecurityViolation, apDeviceLoc=apDeviceLoc, apAuthServerTimeout=apAuthServerTimeout, apRFFrmsOuts=apRFFrmsOuts, thresholdAssociated=thresholdAssociated, apRFItfStat=apRFItfStat, apEnetsNPktsToRF=apEnetsNPktsToRF, apAllTrapsEnable=apAllTrapsEnable, rfDSPerFqRetries=rfDSPerFqRetries, apWlanServiceArea=apWlanServiceArea, rfTxACKFailures=rfTxACKFailures, apEtherItfStatGroup=apEtherItfStatGroup, apHelpFilePath=apHelpFilePath, apManufactureInfoGroup=apManufactureInfoGroup, wcmEvents=wcmEvents, apKeyServerIndex=apKeyServerIndex, apSystemConfigGroup=apSystemConfigGroup)
