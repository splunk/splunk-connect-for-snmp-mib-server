#
# PySNMP MIB module AVIDIA-SUBTEND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVIDIA-SUBTEND-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:16:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, IpAddress, Gauge32, TimeTicks, ObjectIdentity, MibIdentifier, Integer32, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "IpAddress", "Gauge32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Integer32", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
avSubtendMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 14))
if mibBuilder.loadTexts: avSubtendMIB.setLastUpdated('0006210000Z')
if mibBuilder.loadTexts: avSubtendMIB.setOrganization('Pairgain Technologies Inc.')
avSubtendInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1))
avSubtendIfTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1), )
if mibBuilder.loadTexts: avSubtendIfTable.setStatus('mandatory')
avSubtendIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1), ).setIndexNames((0, "AVIDIA-SUBTEND-MIB", "avSubtendIndex"))
if mibBuilder.loadTexts: avSubtendIfEntry.setStatus('mandatory')
avSubtendIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSubtendIndex.setStatus('mandatory')
avSubtendIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfRowStatus.setStatus('mandatory')
avSubtendIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfIndex.setStatus('mandatory')
avSubtendIfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfVpi.setStatus('mandatory')
avSubtendIfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfVci.setStatus('mandatory')
avSubtendIfSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfSourceIpAddress.setStatus('mandatory')
avSubtendIfDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfDestinationIpAddress.setStatus('mandatory')
avSubtendIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfSubnetMask.setStatus('mandatory')
avSubtendIfParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 9), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfParentIfIndex.setStatus('mandatory')
avSubtendIfParentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfParentIpAddress.setStatus('mandatory')
avSubtendIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSubtendIfAdminStatus.setStatus('mandatory')
avSubtendIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSubtendIfOperStatus.setStatus('mandatory')
avSubtendIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSubtendIndexNext.setStatus('mandatory')
mibBuilder.exportSymbols("AVIDIA-SUBTEND-MIB", avSubtendIfRowStatus=avSubtendIfRowStatus, avSubtendIndex=avSubtendIndex, avSubtendIfAdminStatus=avSubtendIfAdminStatus, avSubtendIfSourceIpAddress=avSubtendIfSourceIpAddress, avSubtendIfOperStatus=avSubtendIfOperStatus, avSubtendIndexNext=avSubtendIndexNext, avSubtendInterfaces=avSubtendInterfaces, avSubtendIfTable=avSubtendIfTable, avSubtendIfParentIpAddress=avSubtendIfParentIpAddress, avSubtendIfVci=avSubtendIfVci, PYSNMP_MODULE_ID=avSubtendMIB, avSubtendIfVpi=avSubtendIfVpi, avSubtendIfSubnetMask=avSubtendIfSubnetMask, avSubtendIfEntry=avSubtendIfEntry, avSubtendIfIndex=avSubtendIfIndex, avSubtendIfDestinationIpAddress=avSubtendIfDestinationIpAddress, avSubtendMIB=avSubtendMIB, avSubtendIfParentIfIndex=avSubtendIfParentIfIndex)
