#
# PySNMP MIB module SYNOPTICS-TOKENRING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYNOPTICS-TOKENRING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, Bits, NotificationType, ObjectIdentity, Gauge32, iso, Unsigned32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "Bits", "NotificationType", "ObjectIdentity", "Gauge32", "iso", "Unsigned32", "IpAddress", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
s3000TokenRing, = mibBuilder.importSymbols("SYNOPTICS-COMMON-MIB", "s3000TokenRing")
s3000TrBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 2))
s3000TrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3))
s3000TrNmm = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4))
s3000TrNode = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5))
s3000TrRing = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7))
s3TrRingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1))
s3TrCommonBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: s3TrCommonBoardTable.setStatus('mandatory')
s3TrCommonBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "SYNOPTICS-TOKENRING-MIB", "s3TrCommonBoardIndex"))
if mibBuilder.loadTexts: s3TrCommonBoardEntry.setStatus('mandatory')
s3TrCommonBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrCommonBoardIndex.setStatus('mandatory')
s3TrCommonBoardRing1or2 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ring1", 2), ("ring2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrCommonBoardRing1or2.setStatus('mandatory')
s3TrCommonBoardRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("speed1M", 2), ("speed4M", 3), ("speed16M", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrCommonBoardRingSpeed.setStatus('mandatory')
s3TrPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: s3TrPortTable.setStatus('mandatory')
s3TrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "SYNOPTICS-TOKENRING-MIB", "s3TrPortBoardIndex"), (0, "SYNOPTICS-TOKENRING-MIB", "s3TrPortIndex"))
if mibBuilder.loadTexts: s3TrPortEntry.setStatus('mandatory')
s3TrPortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrPortBoardIndex.setStatus('mandatory')
s3TrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrPortIndex.setStatus('mandatory')
s3TrPortWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("wrap", 2), ("connect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3TrPortWrap.setStatus('mandatory')
s3TrPortTestLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3TrPortTestLatch.setStatus('mandatory')
s3TrPortRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrPortRelayStatus.setStatus('mandatory')
s3TrPortPhantomStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrPortPhantomStatus.setStatus('mandatory')
s3TrPortPhantomChangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noChange", 2), ("change", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrPortPhantomChangeFlag.setStatus('mandatory')
s3TrPortChgSyn2IBM = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("synoptics", 2), ("ibm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3TrPortChgSyn2IBM.setStatus('mandatory')
s3TrPortStrap = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("synoptics", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrPortStrap.setStatus('mandatory')
s3TrNmmFnNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3TrNmmFnNum.setStatus('mandatory')
s3TrNmmRingNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmRingNum.setStatus('mandatory')
s3TrNmmSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmSlotNum.setStatus('deprecated')
s3TrNmmFpuIdRev = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmFpuIdRev.setStatus('mandatory')
s3TrNmmFpuStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("notOperational", 2), ("operational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmFpuStatus.setStatus('mandatory')
s3TrNmmDramSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("k512", 2), ("oneMeg", 3), ("twoMeg", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmDramSize.setStatus('mandatory')
s3TrNmmEepromSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("k2kby8", 2), ("k8kby8", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmEepromSize.setStatus('mandatory')
s3TrNmmGrpAddrFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmGrpAddrFrmsRxOk.setStatus('mandatory')
s3TrNmmRing1or2 = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ring1", 2), ("ring2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmRing1or2.setStatus('mandatory')
s3TrNmmRingSpeed = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("speed1M", 2), ("speed4M", 3), ("speed16M", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmRingSpeed.setStatus('mandatory')
s3TrNmmHexDisplay = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmHexDisplay.setStatus('mandatory')
s3TrNmmEpromSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("k2kby8", 2), ("k8kby8", 3), ("k16kby8", 4), ("k32kby8", 5), ("k64kby8", 6), ("k128kby8", 7), ("k256kby8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNmmEpromSize.setStatus('mandatory')
s3TrNodeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: s3TrNodeTable.setStatus('mandatory')
s3TrNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "SYNOPTICS-TOKENRING-MIB", "s3TrNodeEntMacAddress"))
if mibBuilder.loadTexts: s3TrNodeEntry.setStatus('mandatory')
s3TrNodeEntMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntMacAddress.setStatus('mandatory')
s3TrNodeEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("beaconing", 1), ("notBeaconing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntStatus.setStatus('mandatory')
s3TrNodeEntNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntNodeStatus.setStatus('mandatory')
s3TrNodeLineErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeLineErrs.setStatus('mandatory')
s3TrNodeBurstErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeBurstErrs.setStatus('mandatory')
s3TrNodeAriFciErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeAriFciErrs.setStatus('mandatory')
s3TrNodeLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeLostFrames.setStatus('mandatory')
s3TrNodeRcvCongestErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeRcvCongestErrs.setStatus('mandatory')
s3TrNodeFrmCopyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeFrmCopyErrs.setStatus('mandatory')
s3TrNodeTokenErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeTokenErrs.setStatus('mandatory')
s3TrNodeInternalErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeInternalErrs.setStatus('mandatory')
s3TrNodeAbortTransErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeAbortTransErrs.setStatus('mandatory')
s3TrNodeFrequencyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeFrequencyErrs.setStatus('mandatory')
s3TrNodeEntProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntProductId.setStatus('mandatory')
s3TrNodeEntUna = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntUna.setStatus('mandatory')
s3TrNodeEntNodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntNodeVersion.setStatus('mandatory')
s3TrNodeEntPhysDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntPhysDrop.setStatus('mandatory')
s3TrNodeEntFuncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntFuncAddr.setStatus('mandatory')
s3TrNodeEntAuthFuncClass = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntAuthFuncClass.setStatus('mandatory')
s3TrNodeEntAuthAccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntAuthAccPriority.setStatus('mandatory')
s3TrNodeEntGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntGrpAddr.setStatus('mandatory')
s3TrNodeEntStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntStationId.setStatus('mandatory')
s3TrNodeEntBeaconType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reconfiguration", 1), ("signal-loss", 2), ("bit-streaming", 3), ("contention-streaming", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeEntBeaconType.setStatus('mandatory')
s3TrNodeBeaconCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeBeaconCnt.setStatus('mandatory')
s3TrNodeLastBeaconTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeLastBeaconTime.setStatus('mandatory')
s3TrNodeLastInsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeLastInsertTime.setStatus('mandatory')
s3TrNodeFirstInsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeFirstInsertTime.setStatus('mandatory')
s3TrNodeLastDeinsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 30), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrNodeLastDeinsertTime.setStatus('mandatory')
s3TrNodeRemoveStation = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3TrNodeRemoveStation.setStatus('mandatory')
s3TrRingStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("beaconing", 1), ("notbeaconing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingStatus.setStatus('mandatory')
s3TrRingFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingFrmsRxOk.setStatus('mandatory')
s3TrRingOctetsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingOctetsRxOk.setStatus('mandatory')
s3TrRingBcastFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingBcastFrmsRxOk.setStatus('mandatory')
s3TrRingLineErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingLineErrs.setStatus('mandatory')
s3TrRingBurstErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingBurstErrs.setStatus('mandatory')
s3TrRingAriFciErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingAriFciErrs.setStatus('mandatory')
s3TrRingLostFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingLostFrames.setStatus('mandatory')
s3TrRingRcvCongestErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingRcvCongestErrs.setStatus('mandatory')
s3TrRingFrmCopyErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingFrmCopyErrs.setStatus('mandatory')
s3TrRingTokenErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingTokenErrs.setStatus('mandatory')
s3TrRingInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingInternalErrs.setStatus('mandatory')
s3TrRingAbortTransErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingAbortTransErrs.setStatus('mandatory')
s3TrRingFrequencyErrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingFrequencyErrs.setStatus('mandatory')
s3TrRingBeaconCnt = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingBeaconCnt.setStatus('mandatory')
s3TrRingBeaconType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reconfiguration", 1), ("signal-loss", 2), ("bit-streaming", 3), ("contention-streaming", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingBeaconType.setStatus('mandatory')
s3TrRingLastBeaconTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingLastBeaconTime.setStatus('mandatory')
s3TrRingBeaconStation = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 3, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3TrRingBeaconStation.setStatus('mandatory')
mibBuilder.exportSymbols("SYNOPTICS-TOKENRING-MIB", s3TrNodeLastDeinsertTime=s3TrNodeLastDeinsertTime, s3TrNodeBeaconCnt=s3TrNodeBeaconCnt, s3TrRingOctetsRxOk=s3TrRingOctetsRxOk, s3TrRingBcastFrmsRxOk=s3TrRingBcastFrmsRxOk, s3TrNmmSlotNum=s3TrNmmSlotNum, s3TrNodeLineErrs=s3TrNodeLineErrs, s3TrRingBurstErrs=s3TrRingBurstErrs, s3TrRingBeaconType=s3TrRingBeaconType, s3TrNodeRemoveStation=s3TrNodeRemoveStation, s3TrRingBeaconCnt=s3TrRingBeaconCnt, s3TrNodeAriFciErrs=s3TrNodeAriFciErrs, s3TrNmmEpromSize=s3TrNmmEpromSize, s3TrCommonBoardRing1or2=s3TrCommonBoardRing1or2, s3TrPortBoardIndex=s3TrPortBoardIndex, s3000TrPort=s3000TrPort, s3TrNodeEntAuthAccPriority=s3TrNodeEntAuthAccPriority, s3TrRingFrmsRxOk=s3TrRingFrmsRxOk, s3TrNodeEntGrpAddr=s3TrNodeEntGrpAddr, s3TrNodeTokenErrs=s3TrNodeTokenErrs, s3TrNodeEntNodeStatus=s3TrNodeEntNodeStatus, s3TrNodeFrmCopyErrs=s3TrNodeFrmCopyErrs, s3TrNodeEntMacAddress=s3TrNodeEntMacAddress, s3TrRingLostFrames=s3TrRingLostFrames, s3TrNodeAbortTransErrs=s3TrNodeAbortTransErrs, s3TrPortIndex=s3TrPortIndex, s3TrPortTable=s3TrPortTable, s3TrNodeFrequencyErrs=s3TrNodeFrequencyErrs, s3TrRingAriFciErrs=s3TrRingAriFciErrs, s3TrRingFrequencyErrs=s3TrRingFrequencyErrs, s3TrRingLineErrs=s3TrRingLineErrs, s3TrRingBeaconStation=s3TrRingBeaconStation, s3TrPortPhantomChangeFlag=s3TrPortPhantomChangeFlag, s3TrNodeLostFrames=s3TrNodeLostFrames, s3TrNmmFnNum=s3TrNmmFnNum, s3TrRingFrmCopyErrs=s3TrRingFrmCopyErrs, s3TrRingAbortTransErrs=s3TrRingAbortTransErrs, s3TrRingTokenErrs=s3TrRingTokenErrs, s3TrNodeEntAuthFuncClass=s3TrNodeEntAuthFuncClass, s3TrCommonBoardRingSpeed=s3TrCommonBoardRingSpeed, s3000TrNmm=s3000TrNmm, s3TrNodeTable=s3TrNodeTable, s3TrNodeLastBeaconTime=s3TrNodeLastBeaconTime, s3TrNodeLastInsertTime=s3TrNodeLastInsertTime, s3TrNodeEntProductId=s3TrNodeEntProductId, s3TrCommonBoardEntry=s3TrCommonBoardEntry, s3TrNodeEntBeaconType=s3TrNodeEntBeaconType, s3TrNmmRingSpeed=s3TrNmmRingSpeed, s3TrNmmFpuIdRev=s3TrNmmFpuIdRev, s3TrRingLastBeaconTime=s3TrRingLastBeaconTime, s3TrPortStrap=s3TrPortStrap, s3TrNodeInternalErrs=s3TrNodeInternalErrs, s3TrNodeEntFuncAddr=s3TrNodeEntFuncAddr, s3TrPortChgSyn2IBM=s3TrPortChgSyn2IBM, s3TrNodeBurstErrs=s3TrNodeBurstErrs, s3TrPortRelayStatus=s3TrPortRelayStatus, s3TrRingRcvCongestErrs=s3TrRingRcvCongestErrs, s3TrNodeEntry=s3TrNodeEntry, s3TrNmmGrpAddrFrmsRxOk=s3TrNmmGrpAddrFrmsRxOk, s3TrNmmRingNum=s3TrNmmRingNum, s3TrNodeRcvCongestErrs=s3TrNodeRcvCongestErrs, s3000TrRing=s3000TrRing, s3TrNodeEntStatus=s3TrNodeEntStatus, s3TrPortTestLatch=s3TrPortTestLatch, s3TrRingStatus=s3TrRingStatus, s3000TrNode=s3000TrNode, s3TrNodeEntPhysDrop=s3TrNodeEntPhysDrop, s3TrNmmRing1or2=s3TrNmmRing1or2, s3000TrBoard=s3000TrBoard, s3TrCommonBoardTable=s3TrCommonBoardTable, s3TrPortPhantomStatus=s3TrPortPhantomStatus, s3TrPortWrap=s3TrPortWrap, s3TrRingInternalErrs=s3TrRingInternalErrs, s3TrRingStats=s3TrRingStats, s3TrNodeEntUna=s3TrNodeEntUna, s3TrCommonBoardIndex=s3TrCommonBoardIndex, s3TrNodeFirstInsertTime=s3TrNodeFirstInsertTime, s3TrNmmHexDisplay=s3TrNmmHexDisplay, s3TrNmmFpuStatus=s3TrNmmFpuStatus, s3TrPortEntry=s3TrPortEntry, s3TrNodeEntNodeVersion=s3TrNodeEntNodeVersion, s3TrNmmDramSize=s3TrNmmDramSize, s3TrNmmEepromSize=s3TrNmmEepromSize, s3TrNodeEntStationId=s3TrNodeEntStationId)
