#
# PySNMP MIB module CISCO-CDMA-PDSN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDMA-PDSN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Counter64, ModuleIdentity, TimeTicks, NotificationType, Integer32, MibIdentifier, IpAddress, Bits, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Counter64", "ModuleIdentity", "TimeTicks", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "Bits", "Counter32", "iso")
TextualConvention, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue")
ciscoCdmaPdsnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 157))
ciscoCdmaPdsnMIB.setRevisions(('2009-08-05 00:00', '2005-02-02 00:00', '2003-08-26 00:00', '2002-09-09 00:00', '2002-02-19 00:00', '2001-10-18 00:00', '2001-04-10 00:00', '2001-01-22 00:00', '2000-03-06 00:00',))
if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setLastUpdated('200908050000Z')
if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setOrganization('Cisco Systems, Inc.')
class CCdmaMsidType(TextualConvention, Integer32):
    reference = 'ITU-T, TIA, EIA are international telecommunications organizations. For more details on: - IMSI refer to ITU-T document E.212 - MIN refer to TIA document TIA/EIA-41-E - IRM refer to TIA document TSB-29'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("imsi", 2), ("min", 3), ("irm", 4))

class CCdmaSystemStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("up", 1), ("down", 2), ("testing", 3), ("insufficientResources", 4))

class CCdmaServiceAffectedLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("warning", 1), ("minor", 2), ("major", 3), ("critical", 4))

class CCdmaServiceOption(TextualConvention, Unsigned32):
    status = 'current'

ciscoCdmaPdsnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1))
cCdmaSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1))
cCdmaPcfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2))
cCdmaSessionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3))
cCdmaFailHistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4))
cCdmaRPRegistrationStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5))
cCdmaRPUpdateStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6))
cCdmaPerformanceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7))
cCdmaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8))
cCdmaNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9))
cCdmaRpErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10))
cCdmaRPRegReqErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1))
cCdmaRPRegUpdAckErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2))
cCdmaRPSessUpdAckErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3))
cCdmaRPRegReplyErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4))
cCdmaRPRegUpdErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 5))
cCdmaRPSessUpdErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 6))
cCdmaRpRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1))
cCdmaRpUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2))
cCdmaPppStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3))
cCdmaTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4))
cCdmaFlowTypeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5))
cCdmaServiceOptionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6))
cCdmaHandoffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7))
cCdmaStatusChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 8))
cCdmaAddressSchemeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9))
cCdmaPcfSoRpRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10))
cCdmaPcfSoRpUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11))
cCdmaPcfSoPppSetupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12))
cCdmaRpSessUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13))
cCdmaPcfSoRpSessUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14))
cCdmaThresholdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 1))
cCdmaPdsnCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2))
cCdmaNotifConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 3))
cCdmaClusterCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 1))
cCdmaClusterMemberInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2))
cCdmaClusterControllerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3))
cCdmaSessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionTotal.setStatus('current')
cCdmaSessionMaxAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionMaxAllowed.setStatus('current')
cCdmaPcfTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfTotal.setStatus('current')
cCdmaPcfMaxAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaPcfMaxAllowed.setStatus('current')
cCdmaSimpleIpFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSimpleIpFlowTotal.setStatus('current')
cCdmaMobileIpFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaMobileIpFlowTotal.setStatus('current')
cCdmaProxyMobileIpFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaProxyMobileIpFlowTotal.setStatus('current')
cCdmaSessionFailTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFailTotal.setStatus('current')
cCdmaServingPdsnHostname = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServingPdsnHostname.setStatus('current')
cCdmaSessionPdsnAuthenTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionPdsnAuthenTimer.setStatus('current')
cCdmaSessionPdsnMaxFailHistory = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionPdsnMaxFailHistory.setStatus('current')
cCdmaSessionMaxNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionMaxNotifEnabled.setStatus('current')
cCdmaPcfMaxAllowedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaPcfMaxAllowedNotifEnabled.setStatus('current')
cCdmaFormatErrorNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaFormatErrorNotifEnabled.setStatus('obsolete')
cCdmaRegReqFailedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaRegReqFailedNotifEnabled.setStatus('current')
cCdmaSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSystemVersion.setStatus('current')
cCdmaSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 17), CCdmaSystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSystemStatus.setStatus('current')
cCdmaActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaActiveSessions.setStatus('current')
cCdmaDormantSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaDormantSessions.setStatus('current')
cCdmaSrEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSrEnabled.setStatus('current')
cCdmaPPPoGRESessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPPPoGRESessionTotal.setStatus('current')
cCdmaHDLCoGRESessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaHDLCoGRESessionTotal.setStatus('current')
cCdmaEstablishedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaEstablishedSessions.setStatus('current')
cCdmaReleasedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReleasedSessions.setStatus('current')
cCdmaMSIDFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaMSIDFlowTotal.setStatus('current')
cCdmaVPDNFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaVPDNFlowTotal.setStatus('current')
cCdmaPcfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1), )
if mibBuilder.loadTexts: cCdmaPcfTable.setStatus('current')
cCdmaPcfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfIpAddress"))
if mibBuilder.loadTexts: cCdmaPcfEntry.setStatus('current')
cCdmaPcfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cCdmaPcfIpAddress.setStatus('current')
cCdmaPcfSessionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSessionTotal.setStatus('current')
cCdmaPcfSessionMaxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSessionMaxTotal.setStatus('current')
cCdmaPcfErrorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfErrorTotal.setStatus('current')
cCdmaSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1), )
if mibBuilder.loadTexts: cCdmaSessionTable.setStatus('obsolete')
cCdmaSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsid"))
if mibBuilder.loadTexts: cCdmaSessionEntry.setStatus('obsolete')
cCdmaSessionMsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 15)))
if mibBuilder.loadTexts: cCdmaSessionMsid.setStatus('obsolete')
cCdmaSessionMsidType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 2), CCdmaMsidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionMsidType.setStatus('obsolete')
cCdmaSessionEsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionEsn.setStatus('obsolete')
cCdmaSessionPdsnIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionPdsnIp.setStatus('obsolete')
cCdmaSessionFaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFaIp.setStatus('obsolete')
cCdmaSessionA11HaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionA11HaIp.setStatus('obsolete')
cCdmaSessionA11FaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionA11FaIp.setStatus('obsolete')
cCdmaSessionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionKey.setStatus('obsolete')
cCdmaSessionConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionConnId.setStatus('obsolete')
cCdmaSessionMoMtInd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mobileOriginated", 2), ("mobileTerminated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionMoMtInd.setStatus('obsolete')
cCdmaSessionPppCompressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionPppCompressEnabled.setStatus('obsolete')
cCdmaSessionVJCompressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionVJCompressEnabled.setStatus('obsolete')
cCdmaSessionServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionServiceOption.setStatus('obsolete')
cCdmaSessionSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionSentOctets.setStatus('obsolete')
cCdmaSessionRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRcvdOctets.setStatus('obsolete')
cCdmaSessionSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionSentPkts.setStatus('obsolete')
cCdmaSessionRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRcvdPkts.setStatus('obsolete')
cCdmaSessionDiscardedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionDiscardedOutPkts.setStatus('obsolete')
cCdmaSessionDiscardedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionDiscardedInPkts.setStatus('obsolete')
cCdmaSessionConnStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionConnStartTime.setStatus('obsolete')
cCdmaActiveConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 21), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaActiveConnTime.setStatus('obsolete')
cCdmaSessionFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFlowCount.setStatus('obsolete')
cCdmaSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("airlinksetup", 2), ("airlinkstart", 3), ("airlinkstop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionStatus.setStatus('obsolete')
cCdmaSessionRegLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRegLifeTime.setStatus('obsolete')
cCdmaSessionRegTimeToExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRegTimeToExpire.setStatus('obsolete')
cCdmaSessionGREFromIPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionGREFromIPPkts.setStatus('obsolete')
cCdmaSessionGREToIPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionGREToIPPkts.setStatus('obsolete')
cCdmaSessionFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2), )
if mibBuilder.loadTexts: cCdmaSessionFlowTable.setStatus('obsolete')
cCdmaSessionFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsid"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaSessionUserFlowIpAddress"))
if mibBuilder.loadTexts: cCdmaSessionFlowEntry.setStatus('obsolete')
cCdmaSessionUserFlowIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cCdmaSessionUserFlowIpAddress.setStatus('obsolete')
cCdmaSessionNai = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionNai.setStatus('obsolete')
cCdmaSessionAddressingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionAddressingScheme.setStatus('obsolete')
cCdmaSessionFlowTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("simpleIp", 2), ("mobileIp", 3), ("proxyMobileIp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFlowTechnology.setStatus('obsolete')
cCdmaSessionHaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionHaIpAddress.setStatus('obsolete')
cCdmaSessionTunnelProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notunnel", 2), ("l2tp", 3), ("l2f", 4), ("gre", 5), ("ipinip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionTunnelProt.setStatus('obsolete')
cCdmaFailHistInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1), )
if mibBuilder.loadTexts: cCdmaFailHistInfoTable.setStatus('current')
cCdmaFailHistInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionIndex"))
if mibBuilder.loadTexts: cCdmaFailHistInfoEntry.setStatus('current')
cCdmaFailSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cCdmaFailSessionIndex.setStatus('current')
cCdmaFailSessionMsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionMsid.setStatus('current')
cCdmaFailSessionMsidType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 3), CCdmaMsidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionMsidType.setStatus('current')
cCdmaFailSessionEsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionEsn.setStatus('deprecated')
cCdmaFailSessionA11HaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionA11HaIp.setStatus('current')
cCdmaFailSessionA11FaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionA11FaIp.setStatus('current')
cCdmaFailSessionConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionConnId.setStatus('current')
cCdmaFailSessionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionKey.setStatus('current')
cCdmaFailHistFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistFailTime.setStatus('current')
cCdmaFailHistFailType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("pppAuthenticationFailure", 2), ("mobileIpAuthenticationFailure", 3), ("mobileIpRegistrationTimeout", 4), ("a10a11SessionTimeout", 5), ("maxAllowedSessionReached", 6), ("maxAllowedPcfReached", 7), ("sessionFormatError", 8), ("adminProhibited", 9), ("insufficientResource", 10), ("mnAuthenticationFailed", 11), ("registrationIdentMismatched", 12), ("poorlyFormedRequest", 13), ("unknownHAAddress", 14), ("reverseTunnelUnavail", 15), ("tbitNotSet", 16), ("unsupportedVIDorBadCVSE", 17), ("pppLcpTimeout", 18), ("pppLcpNegotiationFailed", 19), ("pppIpcpTimeout", 20), ("pppIpcpNegotiationFailed", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistFailType.setStatus('current')
cCdmaFailHistServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistServiceOption.setStatus('current')
cCdmaFailHistPanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistPanId.setStatus('current')
cCdmaFailHistCanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistCanId.setStatus('current')
cCdmaFailHistBsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistBsid.setStatus('current')
cCdmaFailSessionEsn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionEsn2.setStatus('current')
cCdmaRPRegValidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegValidRequests.setStatus('obsolete')
cCdmaRPRegAcceptedReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegAcceptedReplies.setStatus('obsolete')
cCdmaRPRegLifeTimeZeroRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegLifeTimeZeroRequests.setStatus('obsolete')
cCdmaRPDeRegAcceptedReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPDeRegAcceptedReplies.setStatus('obsolete')
cCdmaRPRegReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegReasonUnSpecFailures.setStatus('obsolete')
cCdmaRPRegAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegAdminProhibFailures.setStatus('obsolete')
cCdmaRPRegInsuffResFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegInsuffResFailures.setStatus('obsolete')
cCdmaRPRegMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegMNAuthenFailures.setStatus('obsolete')
cCdmaRPRegIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegIdentMismatchFailures.setStatus('obsolete')
cCdmaRPRegBadRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegBadRequestFailures.setStatus('obsolete')
cCdmaRPRegUnknownHAAddrFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegUnknownHAAddrFailures.setStatus('obsolete')
cCdmaRPRegNoRevTunnelFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegNoRevTunnelFailures.setStatus('obsolete')
cCdmaRPRegTBitNotSetFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegTBitNotSetFailures.setStatus('obsolete')
cCdmaRPRegBadCVSEFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegBadCVSEFailures.setStatus('obsolete')
cCdmaRPUpdValidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdValidRequests.setStatus('obsolete')
cCdmaRPUpdAcceptedReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdAcceptedReplies.setStatus('obsolete')
cCdmaRPUpdReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdReasonUnSpecFailures.setStatus('obsolete')
cCdmaRPUpdAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdAdminProhibFailures.setStatus('obsolete')
cCdmaRPUpdMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdMNAuthenFailures.setStatus('obsolete')
cCdmaRPUpdIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdIdentMismatchFailures.setStatus('obsolete')
cCdmaRPUpdBadRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdBadRequestFailures.setStatus('obsolete')
cCdmaRpRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReceivedReqs.setStatus('current')
cCdmaRpRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegAcceptedReqs.setStatus('current')
cCdmaRpRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegDeniedReqs.setStatus('current')
cCdmaRpRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegDiscardedReqs.setStatus('current')
cCdmaRpInitRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegAcceptedReqs.setStatus('current')
cCdmaRpInitRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegDeniedReqs.setStatus('current')
cCdmaRpReRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegAcceptedReqs.setStatus('current')
cCdmaRpReRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegDeniedReqs.setStatus('current')
cCdmaRpDeRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegAcceptedReqs.setStatus('current')
cCdmaRpDeRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegDeniedReqs.setStatus('current')
cCdmaRpRegReasonlUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReasonlUnSpecFailures.setStatus('deprecated')
cCdmaRpRegAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegAdminProhibFailures.setStatus('current')
cCdmaRpRegInsuffResFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegInsuffResFailures.setStatus('current')
cCdmaRpRegMNAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegMNAuthFailures.setStatus('current')
cCdmaRpRegIdMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegIdMismatchFailures.setStatus('current')
cCdmaRpRegBadReqFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegBadReqFailures.setStatus('current')
cCdmaRpRegUnknownPdsnFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegUnknownPdsnFailures.setStatus('current')
cCdmaRpRegNoRevTunnelFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegNoRevTunnelFailures.setStatus('current')
cCdmaRpRegTBitNotSetFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegTBitNotSetFailures.setStatus('current')
cCdmaRpRegBadCVSEFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegBadCVSEFailures.setStatus('current')
cCdmaRpRegReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReasonUnSpecFailures.setStatus('current')
cCdmaRpDeRegHandoffAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffAcceptedReqs.setStatus('current')
cCdmaRpDeRegHandoffDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffDeniedReqs.setStatus('current')
cCdmaRpInitRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegReceivedReqs.setStatus('current')
cCdmaRpInitRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegDiscardedReqs.setStatus('current')
cCdmaRpReRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegReceivedReqs.setStatus('current')
cCdmaRpReRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegDiscardedReqs.setStatus('current')
cCdmaRpDeRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegReceivedReqs.setStatus('current')
cCdmaRpDeRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegDiscardedReqs.setStatus('current')
cCdmaRpHandoffRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegReceivedReqs.setStatus('current')
cCdmaRpHandoffRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegAcceptedReqs.setStatus('current')
cCdmaRpHandoffRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegDeniedReqs.setStatus('current')
cCdmaRpHandoffRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegDiscardedReqs.setStatus('current')
cCdmaRpReRegAirlinkStarts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStarts.setStatus('current')
cCdmaRpReRegAirlinkStops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStops.setStatus('current')
cCdmaRpDeRegAirlinkStops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegAirlinkStops.setStatus('current')
cCdmaRpInterPCFActiveHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInterPCFActiveHandoffs.setStatus('current')
cCdmaRpInterPCFDormantHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInterPCFDormantHandoffs.setStatus('current')
cCdmaRpUpdTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdTransmittedReqs.setStatus('current')
cCdmaRpUpdAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdAcceptedReqs.setStatus('current')
cCdmaRpUpdDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdDeniedReqs.setStatus('current')
cCdmaRpUpdNotAckedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdNotAckedReqs.setStatus('current')
cCdmaRpUpdInitTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdInitTransmittedReqs.setStatus('current')
cCdmaRpUpdReTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdReTransmittedReqs.setStatus('current')
cCdmaRpUpdReceivedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdReceivedAcks.setStatus('current')
cCdmaRpUpdDiscardedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdDiscardedAcks.setStatus('current')
cCdmaRpUpdRpLifeExpReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdRpLifeExpReqs.setStatus('current')
cCdmaRpUpdPPPtermReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdPPPtermReqs.setStatus('current')
cCdmaRpUpdOtherReasonReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdOtherReasonReqs.setStatus('current')
cCdmaRpUpdReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdReasonUnSpecFailures.setStatus('current')
cCdmaRpUpdAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdAdminProhibFailures.setStatus('current')
cCdmaRpUpdMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdMNAuthenFailures.setStatus('current')
cCdmaRpUpdIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdIdentMismatchFailures.setStatus('current')
cCdmaRpUpdBadReqFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdBadReqFailures.setStatus('current')
cCdmaRpUpdPcfHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdPcfHandoffs.setStatus('current')
cCdmaRpUpdHandoffNotAckedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffNotAckedReqs.setStatus('current')
cCdmaRpUpdHandoffReceivedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReceivedAcks.setStatus('current')
cCdmaRpUpdHandoffAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAcceptedReqs.setStatus('current')
cCdmaRpUpdHandoffDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDeniedReqs.setStatus('current')
cCdmaRpUpdHandoffDiscardedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDiscardedAcks.setStatus('current')
cCdmaRpUpdHandoffInitTxdReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffInitTxdReqs.setStatus('current')
cCdmaRpUpdHandoffReTxdReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReTxdReqs.setStatus('current')
cCdmaRpUpdHandoffReaUnSpecFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReaUnSpecFails.setStatus('current')
cCdmaRpUpdHandoffAdmProhibFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAdmProhibFails.setStatus('current')
cCdmaRpUpdHandoffMNAuthenFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffMNAuthenFails.setStatus('current')
cCdmaRpUpdHandoffIdMismatchFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffIdMismatchFails.setStatus('current')
cCdmaRpUpdHandoffBadReqFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffBadReqFails.setStatus('current')
cCdmaRpSessUpdTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdTransmittedReqs.setStatus('current')
cCdmaRpSessUpdAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdAcceptedReqs.setStatus('current')
cCdmaRpSessUpdDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdDeniedReqs.setStatus('current')
cCdmaRpSessUpdNotAckedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdNotAckedReqs.setStatus('current')
cCdmaRpSessUpdInitTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdInitTransmittedReqs.setStatus('current')
cCdmaRpSessUpdReTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReTransmittedReqs.setStatus('current')
cCdmaRpSessUpdReceivedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReceivedAcks.setStatus('current')
cCdmaRpSessUpdDiscardedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdDiscardedAcks.setStatus('current')
cCdmaRpSessUpdAlwaysON = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdAlwaysON.setStatus('current')
cCdmaRpSessUpdRNPDIT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdRNPDIT.setStatus('current')
cCdmaRpSessUpdReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonUnSpecFailures.setStatus('current')
cCdmaRpSessUpdReasonParamNotUpdated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonParamNotUpdated.setStatus('current')
cCdmaRpSessUpdMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdMNAuthenFailures.setStatus('current')
cCdmaRpSessUpdIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdIdentMismatchFailures.setStatus('current')
cCdmaRpSessUpdBadReqFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdBadReqFailures.setStatus('current')
cCdmaPppSetupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1))
cCdmaPppReNegoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2))
cCdmaPppAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3))
cCdmaPppReleaseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4))
cCdmaPppMiscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99))
cCdmaPppCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCurrentConnections.setStatus('current')
cCdmaPppConnectionInitiateReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionInitiateReqs.setStatus('current')
cCdmaPppConnectionSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionSuccesses.setStatus('current')
cCdmaPppConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionFailures.setStatus('current')
cCdmaPppLcpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpFailures.setStatus('current')
cCdmaPppAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthFailures.setStatus('current')
cCdmaPppIpcpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpFailures.setStatus('current')
cCdmaPppEnterLcpNums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEnterLcpNums.setStatus('current')
cCdmaPppEnterAuthNums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEnterAuthNums.setStatus('current')
cCdmaPppEnterIpcpNums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEnterIpcpNums.setStatus('current')
cCdmaPppLcpFailuresMaxRetrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpFailuresMaxRetrans.setStatus('current')
cCdmaPppLcpFailuresUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpFailuresUnknown.setStatus('current')
cCdmaPppIpcpFailuresMaxRetrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresMaxRetrans.setStatus('current')
cCdmaPppIpcpFailuresUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresUnknown.setStatus('current')
cCdmaPppConnectionsAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionsAborted.setStatus('current')
cCdmaPppLcpOptionIssueFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpOptionIssueFailures.setStatus('current')
cCdmaPppIpcpOptionIssueFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpOptionIssueFailures.setStatus('current')
cCdmaPppAuthMaxRetransFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMaxRetransFailures.setStatus('current')
cCdmaPppNoRemoteIpAddressReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNoRemoteIpAddressReleases.setStatus('current')
cCdmaPppLowerLayerReleaseFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLowerLayerReleaseFailures.setStatus('current')
cCdmaPppIpcpPhaseReceivedTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseReceivedTermreqs.setStatus('current')
cCdmaPppIpcpPhaseSentTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseSentTermreqs.setStatus('current')
cCdmaPppAuthPhaseReceivedTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPhaseReceivedTermreqs.setStatus('current')
cCdmaPppAuthPhaseSentTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPhaseSentTermreqs.setStatus('current')
cCdmaPppLcpPhaseReceivedTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpPhaseReceivedTermreqs.setStatus('current')
cCdmaPppLcpPhaseSentTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpPhaseSentTermreqs.setStatus('current')
cCdmaPppPreLCPPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppPreLCPPdsnA10Releases.setStatus('current')
cCdmaPppPreLCPPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppPreLCPPcfA10Releases.setStatus('current')
cCdmaPppLCPPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLCPPdsnA10Releases.setStatus('current')
cCdmaPppLCPPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLCPPcfA10Releases.setStatus('current')
cCdmaPppAuthPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPdsnA10Releases.setStatus('current')
cCdmaPppAuthPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPcfA10Releases.setStatus('current')
cCdmaPppIPCPPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIPCPPdsnA10Releases.setStatus('current')
cCdmaPppIPCPPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIPCPPcfA10Releases.setStatus('current')
cCdmaPppLcpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpSuccesses.setStatus('current')
cCdmaPppIpcpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpSuccesses.setStatus('current')
cCdmaPppAuthSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthSuccesses.setStatus('current')
cCdmaPppConnectionOtherFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionOtherFailures.setStatus('current')
cCdmaPppRenegTotalReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegTotalReqs.setStatus('current')
cCdmaPppRenegByPdsnReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegByPdsnReqs.setStatus('current')
cCdmaPppRenegByMobileReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegByMobileReqs.setStatus('current')
cCdmaPppRenegLcpIpcpReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegLcpIpcpReqs.setStatus('current')
cCdmaPppRenegAddrMismatchReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegAddrMismatchReqs.setStatus('current')
cCdmaPppRenegOtherReasonReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegOtherReasonReqs.setStatus('current')
cCdmaPppRenegSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegSuccesses.setStatus('current')
cCdmaPppRenegFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegFailures.setStatus('current')
cCdmaPppRenegConnectionsAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegConnectionsAborted.setStatus('current')
cCdmaPppRenegAnidChanges = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegAnidChanges.setStatus('current')
cCdmaPppAuthChapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapAttempts.setStatus('current')
cCdmaPppAuthChapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapSuccesses.setStatus('current')
cCdmaPppAuthChapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapFailures.setStatus('current')
cCdmaPppAuthPapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapAttempts.setStatus('current')
cCdmaPppAuthPapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapSuccesses.setStatus('current')
cCdmaPppAuthPapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapFailures.setStatus('current')
cCdmaPppAuthMschapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapAttempts.setStatus('current')
cCdmaPppAuthMschapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapSuccesses.setStatus('current')
cCdmaPppAuthMschapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapFailures.setStatus('current')
cCdmaPppAuthEapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthEapAttempts.setStatus('current')
cCdmaPppAuthEapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthEapSuccesses.setStatus('current')
cCdmaPppAuthEapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthEapFailures.setStatus('current')
cCdmaPppAuthMsidAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMsidAttempts.setStatus('current')
cCdmaPppAuthMsidSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMsidSuccesses.setStatus('current')
cCdmaPppAuthMsidFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMsidFailures.setStatus('current')
cCdmaPppAuthAAATimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthAAATimeouts.setStatus('current')
cCdmaPppAuthChapTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapTimeouts.setStatus('current')
cCdmaPppAuthPapTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapTimeouts.setStatus('current')
cCdmaPppAuthMschapTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapTimeouts.setStatus('current')
cCdmaPppAuthSkips = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthSkips.setStatus('current')
cCdmaPppTotalReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppTotalReleases.setStatus('current')
cCdmaPppPdsnReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppPdsnReleases.setStatus('current')
cCdmaPppMobileReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppMobileReleases.setStatus('current')
cCdmaPppAddrFilterReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAddrFilterReleases.setStatus('current')
cCdmaPppAdminReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAdminReleases.setStatus('current')
cCdmaPppLcpTermReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpTermReleases.setStatus('deprecated')
cCdmaPppIdleTimeoutReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIdleTimeoutReleases.setStatus('current')
cCdmaPppL2tpTunnelReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppL2tpTunnelReleases.setStatus('current')
cCdmaPppInsufResReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppInsufResReleases.setStatus('deprecated')
cCdmaPppSessTimeoutReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppSessTimeoutReleases.setStatus('current')
cCdmaPppSrvIntReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppSrvIntReleases.setStatus('current')
cCdmaPppSrvUnavailReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppSrvUnavailReleases.setStatus('current')
cCdmaPppMissEchoReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppMissEchoReleases.setStatus('current')
cCdmaPppDeregisterByPcfReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppDeregisterByPcfReleases.setStatus('current')
cCdmaPppLifetimeExpiryReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLifetimeExpiryReleases.setStatus('current')
cCdmaPppOtherReasonReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppOtherReasonReleases.setStatus('current')
cCdmaPppCompressNegoCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressNegoCons.setStatus('current')
cCdmaPppCompressMsftCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressMsftCons.setStatus('current')
cCdmaPppCompressAscendCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressAscendCons.setStatus('current')
cCdmaPppCompressStackCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressStackCons.setStatus('current')
cCdmaPppCompressDeflateCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressDeflateCons.setStatus('current')
cCdmaPppCompressOtherCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressOtherCons.setStatus('current')
cCdmaPppNegoMrruCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoMrruCons.setStatus('current')
cCdmaPppNegoIpxCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoIpxCons.setStatus('current')
cCdmaPppNegoIpCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoIpCons.setStatus('current')
cCdmaPppNegoVjCompCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoVjCompCons.setStatus('current')
cCdmaPppNegoBapCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoBapCons.setStatus('current')
cCdmaPppConFormedBundles = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConFormedBundles.setStatus('current')
cCdmaPppCompressNegoFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressNegoFailures.setStatus('current')
cCdmaPppTransmittedEchoReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppTransmittedEchoReqs.setStatus('current')
cCdmaPppRetransmittedEchoReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRetransmittedEchoReqs.setStatus('current')
cCdmaPppReceivedEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppReceivedEchoReplies.setStatus('current')
cCdmaPppEchoRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEchoRequestTimeouts.setStatus('current')
cCdmaPppUnknownProtocolPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppUnknownProtocolPktDiscards.setStatus('current')
cCdmaPppBadLengthPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppBadLengthPktDiscards.setStatus('current')
cCdmaTransmittedSipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSipKiloOctets.setStatus('current')
cCdmaReceivedSipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedSipKiloOctets.setStatus('current')
cCdmaTransmittedSipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSipPkts.setStatus('current')
cCdmaReceivedSipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedSipPkts.setStatus('current')
cCdmaTransmittedMipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedMipKiloOctets.setStatus('current')
cCdmaReceivedMipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedMipKiloOctets.setStatus('current')
cCdmaTransmittedMipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedMipPkts.setStatus('current')
cCdmaReceivedMipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedMipPkts.setStatus('current')
cCdmaTransmittedPmipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedPmipKiloOctets.setStatus('current')
cCdmaReceivedPmipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedPmipKiloOctets.setStatus('current')
cCdmaTransmittedPmipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedPmipPkts.setStatus('current')
cCdmaReceivedPmipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedPmipPkts.setStatus('current')
cCdmaTransmittedSDBPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSDBPkts.setStatus('current')
cCdmaTransmittedSDBOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSDBOctets.setStatus('current')
cCdmaNoGREKeyPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaNoGREKeyPktDiscards.setStatus('current')
cCdmaNoSessionPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaNoSessionPktDiscards.setStatus('current')
cCdmaInvGREProtoPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInvGREProtoPktDiscards.setStatus('current')
cCdmaInvCheckSumPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInvCheckSumPktDiscards.setStatus('current')
cCdmaFlowSimpleIpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowSimpleIpSuccesses.setStatus('current')
cCdmaFlowMobilIpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowMobilIpSuccesses.setStatus('current')
cCdmaFlowProxyIpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowProxyIpSuccesses.setStatus('current')
cCdmaFlowVpdnSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowVpdnSuccesses.setStatus('current')
cCdmaFlowSimpleIpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowSimpleIpFailures.setStatus('current')
cCdmaFlowMobileIpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowMobileIpFailures.setStatus('current')
cCdmaFlowProxyIpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowProxyIpFailures.setStatus('current')
cCdmaFlowVpdnFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowVpdnFailures.setStatus('current')
cCdmaFlowUnknownTypeFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowUnknownTypeFailures.setStatus('current')
cCdmaServiceTotalOptions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceTotalOptions.setStatus('current')
cCdmaServiceOptionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2), )
if mibBuilder.loadTexts: cCdmaServiceOptionTable.setStatus('current')
cCdmaServiceOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionIndex"))
if mibBuilder.loadTexts: cCdmaServiceOptionEntry.setStatus('current')
cCdmaServiceOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 9, 12, 13, 14, 15, 18, 19, 22, 23, 24, 25, 32, 33, 37, 54, 55, 4103))).clone(namedValues=NamedValues(("smsRate1", 6), ("loopback13K", 9), ("asyncDataRate2", 12), ("group3FaxRate2", 13), ("smsRate2", 14), ("packetData144k", 15), ("otapaRate1", 18), ("otapaRate2", 19), ("packetDataRs1fRs1r", 22), ("packetDataRs1fRs2r", 23), ("packetDataRs2fRs1r", 24), ("packetDataRs2fRs2", 25), ("is2000TestData", 32), ("packetData3G", 33), ("isdn64k", 37), ("is2000Markov", 54), ("is2000Loopback", 55), ("packetDataRev1", 4103))))
if mibBuilder.loadTexts: cCdmaServiceOptionIndex.setStatus('current')
cCdmaServiceOptionSucesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceOptionSucesses.setStatus('current')
cCdmaServiceOptionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceOptionFailures.setStatus('current')
cCdmaInterPcfHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInterPcfHandoffs.setStatus('current')
cCdmaInterPdsnHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInterPdsnHandoffs.setStatus('current')
cCdmaIdChangeHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaIdChangeHandoffs.setStatus('current')
cCdmaStatusIS2OOSes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaStatusIS2OOSes.setStatus('current')
cCdmaStatusOOS2ISes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaStatusOOS2ISes.setStatus('current')
cCdmaAddressStaticSIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticSIPs.setStatus('current')
cCdmaAddressDynamicSIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicSIPs.setStatus('current')
cCdmaAddressStaticMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticMIPs.setStatus('current')
cCdmaAddressDynamicMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicMIPs.setStatus('current')
cCdmaAddressStaticPMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticPMIPs.setStatus('current')
cCdmaAddressDynamicPMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicPMIPs.setStatus('current')
cCdmaAddressStaticVPDNs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticVPDNs.setStatus('current')
cCdmaAddressDynamicVPDNs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicVPDNs.setStatus('current')
cCdmaPcfSoRpRegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoRpRegStatsTable.setStatus('current')
cCdmaPcfSoRpRegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoRpRegStatsEntry.setStatus('current')
cCdmaPcfSoRpRegIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIpAddrType.setStatus('current')
cCdmaPcfSoRpRegIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIpAddr.setStatus('current')
cCdmaPcfSoRpRegServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoRpRegServiceOption.setStatus('current')
cCdmaPcfSoRpRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegRcvdReqs.setStatus('current')
cCdmaPcfSoRpRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAcptdReqs.setStatus('current')
cCdmaPcfSoRpRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDeniedReqs.setStatus('current')
cCdmaPcfSoRpRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDiscardedReqs.setStatus('current')
cCdmaPcfSoRpInitRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegAcptdReqs.setStatus('current')
cCdmaPcfSoRpInitRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDeniedReqs.setStatus('current')
cCdmaPcfSoRpReRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAcptdReqs.setStatus('current')
cCdmaPcfSoRpReRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDeniedReqs.setStatus('current')
cCdmaPcfSoRpDeRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAcptdReqs.setStatus('current')
cCdmaPcfSoRpDeRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDeniedReqs.setStatus('current')
cCdmaPcfSoRpRegPcfUnknwnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegPcfUnknwnFails.setStatus('current')
cCdmaPcfSoRpRegAdmnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAdmnFails.setStatus('current')
cCdmaPcfSoRpRegNoRsrcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRsrcFails.setStatus('current')
cCdmaPcfSoRpRegMNAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegMNAuthFails.setStatus('current')
cCdmaPcfSoRpRegIdMismatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIdMismatFails.setStatus('current')
cCdmaPcfSoRpRegBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadReqFails.setStatus('current')
cCdmaPcfSoRpRegUnkPdsnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegUnkPdsnFails.setStatus('current')
cCdmaPcfSoRpRegNoRevTunFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRevTunFails.setStatus('current')
cCdmaPcfSoRpRegTBitNSetFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegTBitNSetFails.setStatus('current')
cCdmaPcfSoRpRegBadCVSEFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadCVSEFails.setStatus('current')
cCdmaPcfSoRpInitRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegRcvdReqs.setStatus('current')
cCdmaPcfSoRpInitRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDiscardedReqs.setStatus('current')
cCdmaPcfSoRpReRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegRcvdReqs.setStatus('current')
cCdmaPcfSoRpReRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDiscardedReqs.setStatus('current')
cCdmaPcfSoRpDeRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegRcvdReqs.setStatus('current')
cCdmaPcfSoRpDeRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDiscardedReqs.setStatus('current')
cCdmaPcfSoRpHandoffRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegRcvdReqs.setStatus('current')
cCdmaPcfSoRpHandoffRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegAcptdReqs.setStatus('current')
cCdmaPcfSoRpHandoffRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDeniedReqs.setStatus('current')
cCdmaPcfSoRpHandoffRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDiscardedReqs.setStatus('current')
cCdmaPcfSoRpReRegAirlinkStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStarts.setStatus('current')
cCdmaPcfSoRpReRegAirlinkStops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStops.setStatus('current')
cCdmaPcfSoRpDeRegAirlinkStops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAirlinkStops.setStatus('current')
cCdmaPcfSoRpUpdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdStatsTable.setStatus('current')
cCdmaPcfSoRpUpdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdStatsEntry.setStatus('current')
cCdmaPcfSoRpUpdIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIpAddrType.setStatus('current')
cCdmaPcfSoRpUpdIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIpAddr.setStatus('current')
cCdmaPcfSoRpUpdServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdServiceOption.setStatus('current')
cCdmaPcfSoRpUpdTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdTxdReqs.setStatus('current')
cCdmaPcfSoRpUpdAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAcptdReqs.setStatus('current')
cCdmaPcfSoRpUpdDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDeniedReqs.setStatus('current')
cCdmaPcfSoRpUpdNotAckedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdNotAckedReqs.setStatus('current')
cCdmaPcfSoRpUpdInitTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdInitTxdReqs.setStatus('current')
cCdmaPcfSoRpUpdReTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReTxdReqs.setStatus('current')
cCdmaPcfSoRpUpdRcvdAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRcvdAcks.setStatus('current')
cCdmaPcfSoRpUpdDiscardedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDiscardedAcks.setStatus('current')
cCdmaPcfSoRpUpdRpLifeExpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRpLifeExpReqs.setStatus('current')
cCdmaPcfSoRpUpdPPPtermReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdPPPtermReqs.setStatus('current')
cCdmaPcfSoRpUpdOtherReaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdOtherReaReqs.setStatus('current')
cCdmaPcfSoRpUpdReaUnSpecFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReaUnSpecFails.setStatus('current')
cCdmaPcfSoRpUpdAdmnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAdmnFails.setStatus('current')
cCdmaPcfSoRpUpdMNAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdMNAuthFails.setStatus('current')
cCdmaPcfSoRpUpdIdMismatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIdMismatFails.setStatus('current')
cCdmaPcfSoRpUpdBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdBadReqFails.setStatus('current')
cCdmaSoRpUpdPcfHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdPcfHandoffs.setStatus('current')
cCdmaSoRpUpdHandoffNotAckedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffNotAckedReqs.setStatus('current')
cCdmaSoRpUpdHandoffReceivedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReceivedAcks.setStatus('current')
cCdmaSoRpUpdHandoffAcceptedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAcceptedReqs.setStatus('current')
cCdmaSoRpUpdHandoffDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDeniedReqs.setStatus('current')
cCdmaSoRpUpdHandoffDiscardedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDiscardedAcks.setStatus('current')
cCdmaSoRpUpdHandoffInitTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffInitTxdReqs.setStatus('current')
cCdmaSoRpUpdHandoffReTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReTxdReqs.setStatus('current')
cCdmaSoRpUpdHandoffReaUnSpecFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReaUnSpecFails.setStatus('current')
cCdmaSoRpUpdHandoffAdmProhibFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAdmProhibFails.setStatus('current')
cCdmaSoRpUpdHandoffMNAuthenFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffMNAuthenFails.setStatus('current')
cCdmaSoRpUpdHandoffIdMismatchFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffIdMismatchFails.setStatus('current')
cCdmaSoRpUpdHandoffBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffBadReqFails.setStatus('current')
cCdmaPcfSoRpSessUpdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdStatsTable.setStatus('current')
cCdmaPcfSoRpSessUpdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdStatsEntry.setStatus('current')
cCdmaPcfSoRpSessUpdIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIpAddrType.setStatus('current')
cCdmaPcfSoRpSessUpdIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIpAddr.setStatus('current')
cCdmaPcfSoRpSessUpdServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdServiceOption.setStatus('current')
cCdmaPcfSoRpSessUpdTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdTxdReqs.setStatus('current')
cCdmaPcfSoRpSessUpdAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAcptdReqs.setStatus('current')
cCdmaPcfSoRpSessUpdDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDeniedReqs.setStatus('current')
cCdmaPcfSoRpSessUpdNotAckedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdNotAckedReqs.setStatus('current')
cCdmaPcfSoRpSessUpdInitTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdInitTxdReqs.setStatus('current')
cCdmaPcfSoRpSessUpdReTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReTxdReqs.setStatus('current')
cCdmaPcfSoRpSessUpdRcvdAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRcvdAcks.setStatus('current')
cCdmaPcfSoRpSessUpdDiscardedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDiscardedAcks.setStatus('current')
cCdmaPcfSoRpSessUpdAlwaysOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAlwaysOn.setStatus('current')
cCdmaPcfSoRpSessUpdRNPDIT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRNPDIT.setStatus('current')
cCdmaPcfSoRpSessUpdParamNotUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdParamNotUpdated.setStatus('current')
cCdmaPcfSoRpSessUpdReaUnSpecFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReaUnSpecFails.setStatus('current')
cCdmaPcfSoRpSessUpdMNAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdMNAuthFails.setStatus('current')
cCdmaPcfSoRpSessUpdIdMismatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIdMismatFails.setStatus('current')
cCdmaPcfSoRpSessUpdBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdBadReqFails.setStatus('current')
cCdmaPcfSoPppSetupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupStatsTable.setStatus('current')
cCdmaPcfSoPppSetupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppSetupIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppSetupIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupStatsEntry.setStatus('current')
cCdmaPcfSoPppSetupIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupIpAddrType.setStatus('current')
cCdmaPcfSoPppSetupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupIpAddr.setStatus('current')
cCdmaPcfSoPppServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoPppServiceOption.setStatus('current')
cCdmaPcfSoPppCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppCurrentConns.setStatus('current')
cCdmaPcfSoPppConnInitiateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnInitiateReqs.setStatus('current')
cCdmaPcfSoPppConnSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnSuccesses.setStatus('current')
cCdmaPcfSoPppConnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnFails.setStatus('current')
cCdmaPcfSoPppConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnAborts.setStatus('current')
cCdmaSessionHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionHighThreshold.setStatus('current')
cCdmaSessionLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionLowThreshold.setStatus('current')
cCdmaClusterType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonCluster", 0), ("peerToPeer", 1), ("controllerMember", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterType.setStatus('current')
cCdmaClusterRole = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApply", 0), ("controller", 1), ("member", 2), ("collocated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterRole.setStatus('current')
cCdmaClusterTotalControllers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterTotalControllers.setStatus('current')
cCdmaClusterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2), )
if mibBuilder.loadTexts: cCdmaClusterCtrlTable.setStatus('current')
cCdmaClusterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlAddressType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlAddress"))
if mibBuilder.loadTexts: cCdmaClusterCtrlEntry.setStatus('current')
cCdmaClusterCtrlAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaClusterCtrlAddressType.setStatus('current')
cCdmaClusterCtrlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaClusterCtrlAddress.setStatus('current')
cCdmaClusterCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2), ("alive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterCtrlStatus.setStatus('current')
cCdmaClusterTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterTotalSessions.setStatus('current')
cCdmaClusterSessHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaClusterSessHighThreshold.setStatus('current')
cCdmaClusterSessLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaClusterSessLowThreshold.setStatus('current')
cCdmaClusterTotalMembers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterTotalMembers.setStatus('current')
cCdmaClusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5), )
if mibBuilder.loadTexts: cCdmaClusterMemberTable.setStatus('current')
cCdmaClusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberAddressType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberAddress"))
if mibBuilder.loadTexts: cCdmaClusterMemberEntry.setStatus('current')
cCdmaClusterMemberAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaClusterMemberAddressType.setStatus('current')
cCdmaClusterMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaClusterMemberAddress.setStatus('current')
cCdmaClusterMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("adminProhibit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterMemberStatus.setStatus('current')
cCdmaClusterMemberLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 4), Unsigned32()).setUnits('1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterMemberLoad.setStatus('current')
cCdmaNotifSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 3, 1), CCdmaServiceAffectedLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaNotifSeverityLevel.setStatus('current')
cCdmaServiceAffectedLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 1), CCdmaServiceAffectedLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceAffectedLevel.setStatus('current')
cCdmaAffectedAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedAddressType.setStatus('deprecated')
cCdmaAffectedAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedAddress.setStatus('deprecated')
cCdmaAffectedMemberStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("adminProhibit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedMemberStatus.setStatus('deprecated')
cCdmaAffectedCtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("alive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedCtrlStatus.setStatus('deprecated')
cCdmaPdsnMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 2))
cCdmaPdsnMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0))
cCdmaSessionMaxAllowedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"))
if mibBuilder.loadTexts: cCdmaSessionMaxAllowedNotif.setStatus('current')
cCdmaPcfMaxAllowedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"))
if mibBuilder.loadTexts: cCdmaPcfMaxAllowedNotif.setStatus('current')
cCdmaSessionFormatErrorNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 3)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"))
if mibBuilder.loadTexts: cCdmaSessionFormatErrorNotif.setStatus('obsolete')
cCdmaSessionRegReqFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 4)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"))
if mibBuilder.loadTexts: cCdmaSessionRegReqFailedNotif.setStatus('current')
cCdmaPdsnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 5)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"))
if mibBuilder.loadTexts: cCdmaPdsnStatusChange.setStatus('current')
cCdmaSessionHighReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 6)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"))
if mibBuilder.loadTexts: cCdmaSessionHighReached.setStatus('current')
cCdmaSessionLowReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 7)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"))
if mibBuilder.loadTexts: cCdmaSessionLowReached.setStatus('deprecated')
cCdmaClusterSessionHighReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 8)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"))
if mibBuilder.loadTexts: cCdmaClusterSessionHighReached.setStatus('current')
cCdmaClusterSessionLowReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 9)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"))
if mibBuilder.loadTexts: cCdmaClusterSessionLowReached.setStatus('current')
cCdmaClusterMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 10)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedMemberStatus"))
if mibBuilder.loadTexts: cCdmaClusterMemberStatusChange.setStatus('deprecated')
cCdmaClusterCtrlStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 11)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedCtrlStatus"))
if mibBuilder.loadTexts: cCdmaClusterCtrlStatusChange.setStatus('deprecated')
cCdmaClusterMemberStatusChange2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 12)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"))
if mibBuilder.loadTexts: cCdmaClusterMemberStatusChange2.setStatus('current')
cCdmaClusterCtrlStatusChange2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 13)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"))
if mibBuilder.loadTexts: cCdmaClusterCtrlStatusChange2.setStatus('current')
cCdmaSessionLowReached2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 14)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"))
if mibBuilder.loadTexts: cCdmaSessionLowReached2.setStatus('current')
cCdmaRegReqInvPakLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvPakLenErrs.setStatus('current')
cCdmaRegReqInvProtocolErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvProtocolErrs.setStatus('current')
cCdmaRegReqInvFlagsErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvFlagsErrs.setStatus('current')
cCdmaRegReqInvMHAEKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMHAEKeyErrs.setStatus('current')
cCdmaRegReqMismatchSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMismatchSPIErrs.setStatus('current')
cCdmaRegReqInvSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvSPIErrs.setStatus('current')
cCdmaRegReqInvConnectionIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvConnectionIDErrs.setStatus('current')
cCdmaRegReqInvMNIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMNIDErrs.setStatus('current')
cCdmaRegReqInvMNIDTypeErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMNIDTypeErrs.setStatus('current')
cCdmaRegReqInvMSIDLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMSIDLenErrs.setStatus('current')
cCdmaRegReqMissingSSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMissingSSEErrs.setStatus('current')
cCdmaRegReqMissingMHAEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMissingMHAEErrs.setStatus('current')
cCdmaRegReqInvOrderErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvOrderErrs.setStatus('current')
cCdmaRegReqInvVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvVSEErrs.setStatus('current')
cCdmaRegReqInvAppTypeInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvAppTypeInVSEErrs.setStatus('current')
cCdmaRegReqDupAppTypeInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDupAppTypeInVSEErrs.setStatus('current')
cCdmaRegReqInvAppSubTypeInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvAppSubTypeInVSEErrs.setStatus('current')
cCdmaRegReqInvVendorIDInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvVendorIDInVSEErrs.setStatus('current')
cCdmaRegReqDupCVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDupCVSEErrs.setStatus('current')
cCdmaRegReqAcctUnknwnAttrErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctUnknwnAttrErrs.setStatus('current')
cCdmaRegReqAcctInvLenAttrErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctInvLenAttrErrs.setStatus('current')
cCdmaRegReqAcctDupAttrErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctDupAttrErrs.setStatus('current')
cCdmaRegReqAcctRecRetransErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctRecRetransErrs.setStatus('current')
cCdmaRegReqAcctInvSeqNumErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctInvSeqNumErrs.setStatus('current')
cCdmaRegReqDuplicateGREKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDuplicateGREKeyErrs.setStatus('current')
cCdmaRegReqSameGREKeySetupRcvdErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqSameGREKeySetupRcvdErrs.setStatus('current')
cCdmaRegReqGREKeyChngNoSetupErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqGREKeyChngNoSetupErrs.setStatus('current')
cCdmaRegReqInitNoSetupErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInitNoSetupErrs.setStatus('current')
cCdmaRegReqStartBeforeSetupErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStartBeforeSetupErrs.setStatus('current')
cCdmaRegReqStartOnCloseErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStartOnCloseErrs.setStatus('current')
cCdmaRegReqStartOnActiveErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStartOnActiveErrs.setStatus('current')
cCdmaRegReqStopOnDormantErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStopOnDormantErrs.setStatus('current')
cCdmaRegReqInitRcvdStopErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInitRcvdStopErrs.setStatus('current')
cCdmaRegReqInitRcvdSDBErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInitRcvdSDBErrs.setStatus('current')
cCdmaRegReqInvAirlinkRecErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvAirlinkRecErrs.setStatus('current')
cCdmaRegReqDeRegNoSessionErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDeRegNoSessionErrs.setStatus('current')
cCdmaRegReqReRegInDisconnectErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqReRegInDisconnectErrs.setStatus('current')
cCdmaRegReqMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMemFailErrs.setStatus('current')
cCdmaRpRegReqMaxSessionReachedErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 39), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReqMaxSessionReachedErrs.setStatus('current')
cCdmaRegUpdAckInvPakLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvPakLenErrs.setStatus('current')
cCdmaRegUpdAckInvProtocolErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvProtocolErrs.setStatus('current')
cCdmaRegUpdAckInvRUAEKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvRUAEKeyErrs.setStatus('current')
cCdmaRegUpdAckInvSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvSPIErrs.setStatus('current')
cCdmaRegUpdAckInvConnectionIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvConnectionIDErrs.setStatus('current')
cCdmaRegUpdAckInvMNIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMNIDErrs.setStatus('current')
cCdmaRegUpdAckInvMNIDTypeErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMNIDTypeErrs.setStatus('current')
cCdmaRegUpdAckInvMSIDLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMSIDLenErrs.setStatus('current')
cCdmaRegUpdAckMissingSSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckMissingSSEErrs.setStatus('current')
cCdmaRegUpdAckMissingRUAEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckMissingRUAEErrs.setStatus('current')
cCdmaRegUpdAckInvOrderErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvOrderErrs.setStatus('current')
cCdmaRegUpdAckInvVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvVSEErrs.setStatus('current')
cCdmaRegUpdAckNoSessionErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckNoSessionErrs.setStatus('current')
cCdmaRegUpdAckMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckMemFailErrs.setStatus('current')
cCdmaSessUpdAckInvPakLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvPakLenErrs.setStatus('current')
cCdmaSessUpdAckInvProtocolErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvProtocolErrs.setStatus('current')
cCdmaSessUpdAckInvRUAEKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvRUAEKeyErrs.setStatus('current')
cCdmaSessUpdAckInvSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvSPIErrs.setStatus('current')
cCdmaSessUpdAckInvConnectionIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvConnectionIDErrs.setStatus('current')
cCdmaSessUpdAckInvMNIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMNIDErrs.setStatus('current')
cCdmaSessUpdAckInvMNIDTypeErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMNIDTypeErrs.setStatus('current')
cCdmaSessUpdAckInvMSIDLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMSIDLenErrs.setStatus('current')
cCdmaSessUpdAckMissingSSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckMissingSSEErrs.setStatus('current')
cCdmaSessUpdAckMissingRUAEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckMissingRUAEErrs.setStatus('current')
cCdmaSessUpdAckInvOrderErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvOrderErrs.setStatus('current')
cCdmaSessUpdAckInvVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvVSEErrs.setStatus('current')
cCdmaSessUpdAckNoSessionErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckNoSessionErrs.setStatus('current')
cCdmaSessUpdAckMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckMemFailErrs.setStatus('current')
cCdmaRegRplyInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegRplyInternalErrs.setStatus('current')
cCdmaRegRplyMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegRplyMemFailErrs.setStatus('current')
cCdmaRpRplyPCFNoSecOrParseErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRplyPCFNoSecOrParseErrs.setStatus('current')
cCdmaRegUpdInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 5, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdInternalErrs.setStatus('current')
cCdmaRegUpdMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 5, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdMemFailErrs.setStatus('current')
cCdmaSessUpdInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 6, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdInternalErrs.setStatus('current')
cCdmaSessUpdMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 6, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdMemFailErrs.setStatus('current')
cCdmaPdsnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 3))
cCdmaPdsnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1))
cCdmaPdsnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2))
cCdmaPdsnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBCompliance = cCdmaPdsnMIBCompliance.setStatus('obsolete')
cCdmaPdsnMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev1"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev1 = cCdmaPdsnMIBComplianceRev1.setStatus('obsolete')
cCdmaPdsnMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 3)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev2 = cCdmaPdsnMIBComplianceRev2.setStatus('obsolete')
cCdmaPdsnMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 4)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev3"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev3 = cCdmaPdsnMIBComplianceRev3.setStatus('deprecated')
cCdmaPdsnMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 5)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev4"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev4 = cCdmaPdsnMIBComplianceRev4.setStatus('deprecated')
cCdmaPdsnMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 6)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev5"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev3"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoPppGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev5 = cCdmaPdsnMIBComplianceRev5.setStatus('deprecated')
cCdmaPdsnMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 7)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev5"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev3"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoPppGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupSup1"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoRpRegGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev6 = cCdmaPdsnMIBComplianceRev6.setStatus('current')
cCdmaSystemPdsnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFormatErrorNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMoMtInd"), ("CISCO-CDMA-PDSN-MIB", "cCdmaActiveConnTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPppCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionVJCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnStartTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowCount"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionNai"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHaIpAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowTechnology"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionAddressingScheme"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTunnelProt"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroup = cCdmaSystemPdsnGroup.setStatus('obsolete')
cCdmaNotifPdsnGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFormatErrorNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroup = cCdmaNotifPdsnGroup.setStatus('obsolete')
cCdmaSystemPdsnGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 3)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPppCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionVJCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionSentOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRcvdOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionSentPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRcvdPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionDiscardedOutPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionDiscardedInPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnStartTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaActiveConnTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowCount"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegLifeTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegTimeToExpire"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionGREFromIPPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionGREToIPPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionNai"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHaIpAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowTechnology"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionAddressingScheme"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTunnelProt"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegValidRequests"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegAcceptedReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegLifeTimeZeroRequests"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPDeRegAcceptedReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegBadRequestFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegUnknownHAAddrFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdValidRequests"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdAcceptedReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdBadRequestFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev1 = cCdmaSystemPdsnGroupRev1.setStatus('obsolete')
cCdmaNotifPdsnGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 4)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegReqFailedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroupRev1 = cCdmaNotifPdsnGroupRev1.setStatus('deprecated')
cCdmaSystemPdsnGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 5)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonlUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpTermReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppInsufResReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev2 = cCdmaSystemPdsnGroupRev2.setStatus('obsolete')
cCdmaSystemPdsnGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 6)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonlUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpTermReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppInsufResReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobileIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowUnknownTypeFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceTotalOptions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionSucesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPdsnHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaIdChangeHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusIS2OOSes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusOOS2ISes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterRole"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalControllers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalMembers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberLoad"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifSeverityLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedCtrlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev3 = cCdmaSystemPdsnGroupRev3.setStatus('deprecated')
cCdmaNotifPdsnGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 7)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegReqFailedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnStatusChange"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionLowReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatusChange"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroupRev2 = cCdmaNotifPdsnGroupRev2.setStatus('deprecated')
cCdmaSystemPdsnGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 8)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistPanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistCanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistBsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonlUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpTermReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppInsufResReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobileIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowUnknownTypeFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceTotalOptions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionSucesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPdsnHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaIdChangeHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusIS2OOSes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusOOS2ISes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterRole"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalControllers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalMembers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberLoad"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifSeverityLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedCtrlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev4 = cCdmaSystemPdsnGroupRev4.setStatus('deprecated')
cCdmaPdsnPcfSoRpRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 9)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegPcfUnknwnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegAdmnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegNoRsrcFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegMNAuthFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegIdMismatFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegBadReqFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegUnkPdsnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegNoRevTunFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegTBitNSetFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegBadCVSEFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdRcvdAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdOtherReaReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdAdmnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdMNAuthFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdIdMismatFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdBadReqFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnPcfSoRpRegGroup = cCdmaPdsnPcfSoRpRegGroup.setStatus('current')
cCdmaPdsnPcfSoPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 10)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppCurrentConns"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnAborts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnPcfSoPppGroup = cCdmaPdsnPcfSoPppGroup.setStatus('current')
cCdmaNotifPdsnGroupRev3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 11)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegReqFailedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnStatusChange"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowReached2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionLowReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatusChange2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatusChange2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroupRev3 = cCdmaNotifPdsnGroupRev3.setStatus('current')
cCdmaSystemPdsnGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 12)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSrEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaActiveSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaDormantSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistPanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistCanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistBsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthAAATimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMissEchoReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobileIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowUnknownTypeFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceTotalOptions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionSucesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPdsnHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaIdChangeHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffAdmProhibFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffMNAuthenFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffIdMismatchFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffBadReqFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegHandoffAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegHandoffDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusIS2OOSes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusOOS2ISes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterRole"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalControllers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalMembers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberLoad"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifSeverityLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev5 = cCdmaSystemPdsnGroupRev5.setStatus('current')
cCdmaSystemPdsnGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 13)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPPPoGRESessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaHDLCoGRESessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaEstablishedSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReleasedSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMSIDFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaVPDNFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAirlinkStarts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdAlwaysON"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdRNPDIT"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReasonParamNotUpdated"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpOptionIssueFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpOptionIssueFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMaxRetransFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNoRemoteIpAddressReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLowerLayerReleaseFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpPhaseReceivedTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpPhaseSentTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPhaseReceivedTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPhaseSentTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpPhaseReceivedTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpPhaseSentTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPreLCPPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPreLCPPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLCPPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLCPPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIPCPPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIPCPPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionOtherFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAnidChanges"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthSkips"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppDeregisterByPcfReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLifetimeExpiryReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTransmittedEchoReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRetransmittedEchoReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppReceivedEchoReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEchoRequestTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppUnknownProtocolPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppBadLengthPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSDBPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSDBOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNoGREKeyPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNoSessionPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInvGREProtoPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInvCheckSumPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInterPCFActiveHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInterPCFDormantHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvPakLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvProtocolErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvFlagsErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMHAEKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMismatchSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvConnectionIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMNIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMNIDTypeErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMSIDLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMissingSSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMissingMHAEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvOrderErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvAppTypeInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDupAppTypeInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvAppSubTypeInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvVendorIDInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDupCVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctUnknwnAttrErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctInvLenAttrErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctDupAttrErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctRecRetransErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctInvSeqNumErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDuplicateGREKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqSameGREKeySetupRcvdErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqGREKeyChngNoSetupErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInitNoSetupErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStartBeforeSetupErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStartOnCloseErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStartOnActiveErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStopOnDormantErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInitRcvdStopErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInitRcvdSDBErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvAirlinkRecErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDeRegNoSessionErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqReRegInDisconnectErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReqMaxSessionReachedErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvPakLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvProtocolErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvRUAEKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvConnectionIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvMNIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvMNIDTypeErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvMSIDLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckMissingSSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckMissingRUAEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvOrderErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckNoSessionErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvPakLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvProtocolErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvRUAEKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvConnectionIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvMNIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvMNIDTypeErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvMSIDLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckMissingSSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckMissingRUAEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvOrderErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckNoSessionErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegRplyInternalErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegRplyMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRplyPCFNoSecOrParseErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdInternalErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdInternalErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdMemFailErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupSup1 = cCdmaSystemPdsnGroupSup1.setStatus('current')
cCdmaPdsnPcfSoRpRegGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 14)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegAirlinkStarts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffAdmProhibFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffMNAuthenFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffIdMismatchFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffBadReqFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdRcvdAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdAlwaysOn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdRNPDIT"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdParamNotUpdated"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdMNAuthFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdIdMismatFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdBadReqFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnPcfSoRpRegGroupSup1 = cCdmaPdsnPcfSoRpRegGroupSup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-MIB", cCdmaSessUpdAckMissingRUAEErrs=cCdmaSessUpdAckMissingRUAEErrs, cCdmaPppOtherReasonReleases=cCdmaPppOtherReasonReleases, cCdmaPdsnMIBComplianceRev1=cCdmaPdsnMIBComplianceRev1, cCdmaPcfSoRpSessUpdNotAckedReqs=cCdmaPcfSoRpSessUpdNotAckedReqs, cCdmaClusterRole=cCdmaClusterRole, cCdmaSoRpUpdHandoffIdMismatchFails=cCdmaSoRpUpdHandoffIdMismatchFails, cCdmaPcfSoRpUpdMNAuthFails=cCdmaPcfSoRpUpdMNAuthFails, cCdmaFailHistFailType=cCdmaFailHistFailType, cCdmaRpRegDiscardedReqs=cCdmaRpRegDiscardedReqs, cCdmaPppAuthPcfA10Releases=cCdmaPppAuthPcfA10Releases, cCdmaPcfIpAddress=cCdmaPcfIpAddress, CCdmaSystemStatus=CCdmaSystemStatus, cCdmaRpSessUpdDiscardedAcks=cCdmaRpSessUpdDiscardedAcks, cCdmaPppCompressStackCons=cCdmaPppCompressStackCons, cCdmaRpUpdHandoffDeniedReqs=cCdmaRpUpdHandoffDeniedReqs, cCdmaRegReqInvMHAEKeyErrs=cCdmaRegReqInvMHAEKeyErrs, cCdmaRpSessUpdReTransmittedReqs=cCdmaRpSessUpdReTransmittedReqs, cCdmaPcfSoRpDeRegAirlinkStops=cCdmaPcfSoRpDeRegAirlinkStops, cCdmaSessionHighReached=cCdmaSessionHighReached, cCdmaServiceOptionStats=cCdmaServiceOptionStats, cCdmaClusterCtrlAddressType=cCdmaClusterCtrlAddressType, cCdmaSessionMaxAllowedNotif=cCdmaSessionMaxAllowedNotif, cCdmaPcfSoRpRegUnkPdsnFails=cCdmaPcfSoRpRegUnkPdsnFails, cCdmaPdsnMIBConformance=cCdmaPdsnMIBConformance, cCdmaRpUpdHandoffNotAckedReqs=cCdmaRpUpdHandoffNotAckedReqs, cCdmaPppAuthChapFailures=cCdmaPppAuthChapFailures, cCdmaPcfSoRpSessUpdStatsTable=cCdmaPcfSoRpSessUpdStatsTable, cCdmaRPUpdBadRequestFailures=cCdmaRPUpdBadRequestFailures, cCdmaRpDeRegAcceptedReqs=cCdmaRpDeRegAcceptedReqs, cCdmaClusterType=cCdmaClusterType, cCdmaAddressStaticSIPs=cCdmaAddressStaticSIPs, cCdmaClusterMemberStatus=cCdmaClusterMemberStatus, cCdmaPcfSoRpSessUpdRcvdAcks=cCdmaPcfSoRpSessUpdRcvdAcks, cCdmaRegReqInvMNIDErrs=cCdmaRegReqInvMNIDErrs, cCdmaNotifPdsnGroupRev1=cCdmaNotifPdsnGroupRev1, cCdmaPdsnMIBCompliances=cCdmaPdsnMIBCompliances, cCdmaRpUpdReasonUnSpecFailures=cCdmaRpUpdReasonUnSpecFailures, cCdmaFlowProxyIpFailures=cCdmaFlowProxyIpFailures, cCdmaAddressStaticVPDNs=cCdmaAddressStaticVPDNs, cCdmaRpInitRegDiscardedReqs=cCdmaRpInitRegDiscardedReqs, cCdmaRPUpdAcceptedReplies=cCdmaRPUpdAcceptedReplies, cCdmaFormatErrorNotifEnabled=cCdmaFormatErrorNotifEnabled, cCdmaPcfEntry=cCdmaPcfEntry, cCdmaRpHandoffRegReceivedReqs=cCdmaRpHandoffRegReceivedReqs, cCdmaFailHistCanId=cCdmaFailHistCanId, cCdmaPppAuthEapSuccesses=cCdmaPppAuthEapSuccesses, cCdmaSessionVJCompressEnabled=cCdmaSessionVJCompressEnabled, cCdmaRpRplyPCFNoSecOrParseErrs=cCdmaRpRplyPCFNoSecOrParseErrs, cCdmaPppAuthSuccesses=cCdmaPppAuthSuccesses, cCdmaRpUpdHandoffReTxdReqs=cCdmaRpUpdHandoffReTxdReqs, cCdmaSessionFormatErrorNotif=cCdmaSessionFormatErrorNotif, cCdmaPppRenegTotalReqs=cCdmaPppRenegTotalReqs, cCdmaSessionPdsnMaxFailHistory=cCdmaSessionPdsnMaxFailHistory, cCdmaSystemPdsnGroupRev2=cCdmaSystemPdsnGroupRev2, cCdmaPdsnPcfSoPppGroup=cCdmaPdsnPcfSoPppGroup, cCdmaRpUpdAcceptedReqs=cCdmaRpUpdAcceptedReqs, cCdmaPppIpcpPhaseSentTermreqs=cCdmaPppIpcpPhaseSentTermreqs, cCdmaFailSessionIndex=cCdmaFailSessionIndex, cCdmaPcfSoRpSessUpdAlwaysOn=cCdmaPcfSoRpSessUpdAlwaysOn, cCdmaPppAuthChapTimeouts=cCdmaPppAuthChapTimeouts, cCdmaPppAuthSkips=cCdmaPppAuthSkips, cCdmaPppInsufResReleases=cCdmaPppInsufResReleases, cCdmaNotifPdsnGroup=cCdmaNotifPdsnGroup, cCdmaPppIpcpFailuresMaxRetrans=cCdmaPppIpcpFailuresMaxRetrans, cCdmaMSIDFlowTotal=cCdmaMSIDFlowTotal, cCdmaPcfSoRpRegRcvdReqs=cCdmaPcfSoRpRegRcvdReqs, ciscoCdmaPdsnMIBObjects=ciscoCdmaPdsnMIBObjects, cCdmaRegUpdAckInvPakLenErrs=cCdmaRegUpdAckInvPakLenErrs, cCdmaSessionTotal=cCdmaSessionTotal, cCdmaRegReqAcctUnknwnAttrErrs=cCdmaRegReqAcctUnknwnAttrErrs, cCdmaClusterSessionHighReached=cCdmaClusterSessionHighReached, cCdmaRpUpdTransmittedReqs=cCdmaRpUpdTransmittedReqs, cCdmaPcfInfo=cCdmaPcfInfo, cCdmaPppRetransmittedEchoReqs=cCdmaPppRetransmittedEchoReqs, cCdmaActiveSessions=cCdmaActiveSessions, cCdmaNotifConfig=cCdmaNotifConfig, cCdmaNotifPdsnGroupRev2=cCdmaNotifPdsnGroupRev2, cCdmaNoGREKeyPktDiscards=cCdmaNoGREKeyPktDiscards, cCdmaInvCheckSumPktDiscards=cCdmaInvCheckSumPktDiscards, cCdmaPppAuthPapSuccesses=cCdmaPppAuthPapSuccesses, cCdmaClusterCtrlEntry=cCdmaClusterCtrlEntry, cCdmaRpHandoffRegDiscardedReqs=cCdmaRpHandoffRegDiscardedReqs, cCdmaTransmittedSDBOctets=cCdmaTransmittedSDBOctets, cCdmaPcfSoRpUpdNotAckedReqs=cCdmaPcfSoRpUpdNotAckedReqs, cCdmaFailSessionMsid=cCdmaFailSessionMsid, cCdmaPppAuthPapTimeouts=cCdmaPppAuthPapTimeouts, cCdmaSystemPdsnGroupRev5=cCdmaSystemPdsnGroupRev5, cCdmaAddressStaticPMIPs=cCdmaAddressStaticPMIPs, cCdmaFlowSimpleIpSuccesses=cCdmaFlowSimpleIpSuccesses, cCdmaRpReRegAirlinkStops=cCdmaRpReRegAirlinkStops, cCdmaPppNegoIpCons=cCdmaPppNegoIpCons, cCdmaRegReqStartBeforeSetupErrs=cCdmaRegReqStartBeforeSetupErrs, cCdmaSessionConnStartTime=cCdmaSessionConnStartTime, cCdmaSessionFlowCount=cCdmaSessionFlowCount, cCdmaServiceOptionSucesses=cCdmaServiceOptionSucesses, cCdmaRpUpdOtherReasonReqs=cCdmaRpUpdOtherReasonReqs, cCdmaFailHistInfo=cCdmaFailHistInfo, cCdmaRpRegAcceptedReqs=cCdmaRpRegAcceptedReqs, cCdmaSessionKey=cCdmaSessionKey, cCdmaAffectedAddress=cCdmaAffectedAddress, cCdmaAddressSchemeStats=cCdmaAddressSchemeStats, cCdmaPppIPCPPcfA10Releases=cCdmaPppIPCPPcfA10Releases, cCdmaPppConnectionsAborted=cCdmaPppConnectionsAborted, cCdmaPcfSoRpHandoffRegAcptdReqs=cCdmaPcfSoRpHandoffRegAcptdReqs, cCdmaPPPoGRESessionTotal=cCdmaPPPoGRESessionTotal, cCdmaRPSessUpdAckErrors=cCdmaRPSessUpdAckErrors, cCdmaRpUpdDiscardedAcks=cCdmaRpUpdDiscardedAcks, cCdmaTransmittedSipKiloOctets=cCdmaTransmittedSipKiloOctets, cCdmaRegReqInvConnectionIDErrs=cCdmaRegReqInvConnectionIDErrs, cCdmaRPRegUpdErrors=cCdmaRPRegUpdErrors, cCdmaPcfSoRpReRegAirlinkStarts=cCdmaPcfSoRpReRegAirlinkStarts, cCdmaPppAuthMschapFailures=cCdmaPppAuthMschapFailures, cCdmaRpDeRegHandoffDeniedReqs=cCdmaRpDeRegHandoffDeniedReqs, cCdmaPcfSoPppSetupStatsEntry=cCdmaPcfSoPppSetupStatsEntry, cCdmaSessionMsid=cCdmaSessionMsid, cCdmaFlowProxyIpSuccesses=cCdmaFlowProxyIpSuccesses, cCdmaPdsnMIBNotifs=cCdmaPdsnMIBNotifs, cCdmaRegReqInvMSIDLenErrs=cCdmaRegReqInvMSIDLenErrs, cCdmaRpRegMNAuthFailures=cCdmaRpRegMNAuthFailures, cCdmaInterPdsnHandoffs=cCdmaInterPdsnHandoffs, cCdmaInterPcfHandoffs=cCdmaInterPcfHandoffs, cCdmaPppAuthPapAttempts=cCdmaPppAuthPapAttempts, cCdmaServingPdsnHostname=cCdmaServingPdsnHostname, cCdmaPppConnectionInitiateReqs=cCdmaPppConnectionInitiateReqs, CCdmaMsidType=CCdmaMsidType, cCdmaRpDeRegHandoffAcceptedReqs=cCdmaRpDeRegHandoffAcceptedReqs, cCdmaSessionMaxNotifEnabled=cCdmaSessionMaxNotifEnabled, cCdmaPppCompressDeflateCons=cCdmaPppCompressDeflateCons, cCdmaPcfSoRpUpdBadReqFails=cCdmaPcfSoRpUpdBadReqFails, cCdmaSessionSentOctets=cCdmaSessionSentOctets, cCdmaRegUpdAckInvVSEErrs=cCdmaRegUpdAckInvVSEErrs, cCdmaFailSessionMsidType=cCdmaFailSessionMsidType, cCdmaPdsnMIBComplianceRev3=cCdmaPdsnMIBComplianceRev3, cCdmaPdsnPcfSoRpRegGroup=cCdmaPdsnPcfSoRpRegGroup, cCdmaSessionMsidType=cCdmaSessionMsidType, cCdmaActiveConnTime=cCdmaActiveConnTime, cCdmaPcfSoRpUpdServiceOption=cCdmaPcfSoRpUpdServiceOption, cCdmaRPUpdIdentMismatchFailures=cCdmaRPUpdIdentMismatchFailures, cCdmaPcfSoPppCurrentConns=cCdmaPcfSoPppCurrentConns, cCdmaFlowUnknownTypeFailures=cCdmaFlowUnknownTypeFailures, cCdmaRpRegBadCVSEFailures=cCdmaRpRegBadCVSEFailures, cCdmaPcfSoRpSessUpdMNAuthFails=cCdmaPcfSoRpSessUpdMNAuthFails, cCdmaRPRegLifeTimeZeroRequests=cCdmaRPRegLifeTimeZeroRequests, cCdmaSoRpUpdHandoffReaUnSpecFails=cCdmaSoRpUpdHandoffReaUnSpecFails, cCdmaSessionLowReached2=cCdmaSessionLowReached2, cCdmaPcfSoRpReRegAirlinkStops=cCdmaPcfSoRpReRegAirlinkStops, cCdmaSimpleIpFlowTotal=cCdmaSimpleIpFlowTotal, cCdmaRpUpdDeniedReqs=cCdmaRpUpdDeniedReqs, cCdmaPppRenegSuccesses=cCdmaPppRenegSuccesses, cCdmaServiceOptionEntry=cCdmaServiceOptionEntry, cCdmaReceivedMipKiloOctets=cCdmaReceivedMipKiloOctets, cCdmaTransmittedMipPkts=cCdmaTransmittedMipPkts, cCdmaSessUpdAckInvConnectionIDErrs=cCdmaSessUpdAckInvConnectionIDErrs, cCdmaRegReqAcctDupAttrErrs=cCdmaRegReqAcctDupAttrErrs, cCdmaNotifSeverityLevel=cCdmaNotifSeverityLevel, cCdmaRpUpdReceivedAcks=cCdmaRpUpdReceivedAcks, cCdmaRpUpdBadReqFailures=cCdmaRpUpdBadReqFailures, cCdmaPppL2tpTunnelReleases=cCdmaPppL2tpTunnelReleases, cCdmaPcfSoRpRegNoRsrcFails=cCdmaPcfSoRpRegNoRsrcFails, cCdmaPppPdsnReleases=cCdmaPppPdsnReleases, cCdmaPcfMaxAllowedNotifEnabled=cCdmaPcfMaxAllowedNotifEnabled, cCdmaPppSetupStats=cCdmaPppSetupStats, cCdmaSessionGREFromIPPkts=cCdmaSessionGREFromIPPkts, cCdmaNotifObjects=cCdmaNotifObjects, cCdmaRegRplyMemFailErrs=cCdmaRegRplyMemFailErrs, cCdmaAffectedCtrlStatus=cCdmaAffectedCtrlStatus, cCdmaPcfSoRpUpdStats=cCdmaPcfSoRpUpdStats, cCdmaPcfSoPppConnAborts=cCdmaPcfSoPppConnAborts, cCdmaPppIpcpFailuresUnknown=cCdmaPppIpcpFailuresUnknown, cCdmaFailHistInfoTable=cCdmaFailHistInfoTable, cCdmaPppConFormedBundles=cCdmaPppConFormedBundles, cCdmaClusterMemberStatusChange=cCdmaClusterMemberStatusChange, cCdmaPcfSoPppSetupStats=cCdmaPcfSoPppSetupStats, cCdmaSoRpUpdHandoffAcceptedReqs=cCdmaSoRpUpdHandoffAcceptedReqs, cCdmaClusterTotalSessions=cCdmaClusterTotalSessions, cCdmaPppTransmittedEchoReqs=cCdmaPppTransmittedEchoReqs, cCdmaAddressDynamicMIPs=cCdmaAddressDynamicMIPs, cCdmaSessUpdAckInvOrderErrs=cCdmaSessUpdAckInvOrderErrs, cCdmaRpReRegDiscardedReqs=cCdmaRpReRegDiscardedReqs, cCdmaRegReqInitRcvdStopErrs=cCdmaRegReqInitRcvdStopErrs, cCdmaSystemPdsnGroupRev1=cCdmaSystemPdsnGroupRev1, cCdmaPppLcpOptionIssueFailures=cCdmaPppLcpOptionIssueFailures, cCdmaFlowMobilIpSuccesses=cCdmaFlowMobilIpSuccesses, cCdmaFlowVpdnSuccesses=cCdmaFlowVpdnSuccesses, cCdmaRegUpdAckInvMSIDLenErrs=cCdmaRegUpdAckInvMSIDLenErrs, cCdmaReceivedSipPkts=cCdmaReceivedSipPkts, cCdmaSystemInfo=cCdmaSystemInfo, cCdmaRpSessUpdMNAuthenFailures=cCdmaRpSessUpdMNAuthenFailures, cCdmaSoRpUpdHandoffReceivedAcks=cCdmaSoRpUpdHandoffReceivedAcks, cCdmaRpInitRegDeniedReqs=cCdmaRpInitRegDeniedReqs, cCdmaRpDeRegReceivedReqs=cCdmaRpDeRegReceivedReqs, cCdmaSessionInfo=cCdmaSessionInfo, cCdmaRegReqDeRegNoSessionErrs=cCdmaRegReqDeRegNoSessionErrs, cCdmaPppMiscStats=cCdmaPppMiscStats, cCdmaPppLcpTermReleases=cCdmaPppLcpTermReleases, cCdmaPcfSoRpUpdDeniedReqs=cCdmaPcfSoRpUpdDeniedReqs, cCdmaPcfSoRpReRegDeniedReqs=cCdmaPcfSoRpReRegDeniedReqs, cCdmaPppAdminReleases=cCdmaPppAdminReleases, cCdmaPdsnMIBComplianceRev4=cCdmaPdsnMIBComplianceRev4, cCdmaSoRpUpdHandoffDeniedReqs=cCdmaSoRpUpdHandoffDeniedReqs, cCdmaSessionTable=cCdmaSessionTable, cCdmaSystemPdsnGroupRev3=cCdmaSystemPdsnGroupRev3, cCdmaSessUpdAckMissingSSEErrs=cCdmaSessUpdAckMissingSSEErrs, cCdmaPcfSoRpRegIpAddrType=cCdmaPcfSoRpRegIpAddrType, cCdmaRpSessUpdAcceptedReqs=cCdmaRpSessUpdAcceptedReqs, cCdmaRegUpdAckInvConnectionIDErrs=cCdmaRegUpdAckInvConnectionIDErrs, cCdmaPcfSoRpRegNoRevTunFails=cCdmaPcfSoRpRegNoRevTunFails, cCdmaPppPreLCPPdsnA10Releases=cCdmaPppPreLCPPdsnA10Releases, cCdmaRegReqInvMNIDTypeErrs=cCdmaRegReqInvMNIDTypeErrs, cCdmaPppUnknownProtocolPktDiscards=cCdmaPppUnknownProtocolPktDiscards, cCdmaRpRegReceivedReqs=cCdmaRpRegReceivedReqs, cCdmaRegReqDupAppTypeInVSEErrs=cCdmaRegReqDupAppTypeInVSEErrs, cCdmaPppAuthChapSuccesses=cCdmaPppAuthChapSuccesses, cCdmaPppLowerLayerReleaseFailures=cCdmaPppLowerLayerReleaseFailures, cCdmaSoRpUpdHandoffMNAuthenFails=cCdmaSoRpUpdHandoffMNAuthenFails, cCdmaPcfSoRpSessUpdReTxdReqs=cCdmaPcfSoRpSessUpdReTxdReqs, cCdmaSessionFailTotal=cCdmaSessionFailTotal, cCdmaFailSessionEsn=cCdmaFailSessionEsn, cCdmaDormantSessions=cCdmaDormantSessions, cCdmaPcfSoRpSessUpdAcptdReqs=cCdmaPcfSoRpSessUpdAcptdReqs, cCdmaRegReqFailedNotifEnabled=cCdmaRegReqFailedNotifEnabled, cCdmaRpRegTBitNotSetFailures=cCdmaRpRegTBitNotSetFailures, cCdmaRpUpdHandoffAcceptedReqs=cCdmaRpUpdHandoffAcceptedReqs, cCdmaSoRpUpdHandoffReTxdReqs=cCdmaSoRpUpdHandoffReTxdReqs, cCdmaFailHistPanId=cCdmaFailHistPanId, cCdmaPppMobileReleases=cCdmaPppMobileReleases, cCdmaPdsnMIBNotifPrefix=cCdmaPdsnMIBNotifPrefix, cCdmaTransmittedSDBPkts=cCdmaTransmittedSDBPkts, cCdmaSessionSentPkts=cCdmaSessionSentPkts, cCdmaRegReqAcctInvSeqNumErrs=cCdmaRegReqAcctInvSeqNumErrs, cCdmaPppBadLengthPktDiscards=cCdmaPppBadLengthPktDiscards, cCdmaPcfSoRpUpdIpAddrType=cCdmaPcfSoRpUpdIpAddrType, cCdmaRegReqInvOrderErrs=cCdmaRegReqInvOrderErrs, cCdmaSessionHaIpAddress=cCdmaSessionHaIpAddress, cCdmaServiceOptionIndex=cCdmaServiceOptionIndex, cCdmaRegUpdAckInvMNIDErrs=cCdmaRegUpdAckInvMNIDErrs, cCdmaSoRpUpdHandoffAdmProhibFails=cCdmaSoRpUpdHandoffAdmProhibFails, cCdmaFailSessionA11FaIp=cCdmaFailSessionA11FaIp, cCdmaPppEchoRequestTimeouts=cCdmaPppEchoRequestTimeouts, cCdmaPdsnPcfSoRpRegGroupSup1=cCdmaPdsnPcfSoRpRegGroupSup1, cCdmaPppSrvIntReleases=cCdmaPppSrvIntReleases, cCdmaPcfSoRpRegIdMismatFails=cCdmaPcfSoRpRegIdMismatFails, cCdmaRpSessUpdReceivedAcks=cCdmaRpSessUpdReceivedAcks, cCdmaClusterControllerInfo=cCdmaClusterControllerInfo, cCdmaRpUpdMNAuthenFailures=cCdmaRpUpdMNAuthenFailures, cCdmaSoRpUpdPcfHandoffs=cCdmaSoRpUpdPcfHandoffs, cCdmaPppCompressAscendCons=cCdmaPppCompressAscendCons, cCdmaPppAuthMsidAttempts=cCdmaPppAuthMsidAttempts, cCdmaPppConnectionSuccesses=cCdmaPppConnectionSuccesses, cCdmaAddressDynamicPMIPs=cCdmaAddressDynamicPMIPs, cCdmaPppNegoVjCompCons=cCdmaPppNegoVjCompCons, cCdmaRPUpdValidRequests=cCdmaRPUpdValidRequests, cCdmaSessionStatus=cCdmaSessionStatus, cCdmaPppRenegAddrMismatchReqs=cCdmaPppRenegAddrMismatchReqs)
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-MIB", cCdmaRpSessUpdInitTransmittedReqs=cCdmaRpSessUpdInitTransmittedReqs, cCdmaPppLcpFailuresUnknown=cCdmaPppLcpFailuresUnknown, cCdmaRpReRegAirlinkStarts=cCdmaRpReRegAirlinkStarts, cCdmaPcfSoRpUpdDiscardedAcks=cCdmaPcfSoRpUpdDiscardedAcks, cCdmaPppAuthMschapAttempts=cCdmaPppAuthMschapAttempts, cCdmaPcfSoRpRegIpAddr=cCdmaPcfSoRpRegIpAddr, cCdmaPcfSoRpInitRegDeniedReqs=cCdmaPcfSoRpInitRegDeniedReqs, cCdmaSessionFlowTechnology=cCdmaSessionFlowTechnology, cCdmaRegReqInvProtocolErrs=cCdmaRegReqInvProtocolErrs, cCdmaPppAuthAAATimeouts=cCdmaPppAuthAAATimeouts, cCdmaPppReceivedEchoReplies=cCdmaPppReceivedEchoReplies, cCdmaRpUpdStats=cCdmaRpUpdStats, cCdmaClusterTotalMembers=cCdmaClusterTotalMembers, cCdmaPcfSoRpRegStats=cCdmaPcfSoRpRegStats, cCdmaFailSessionEsn2=cCdmaFailSessionEsn2, cCdmaMobileIpFlowTotal=cCdmaMobileIpFlowTotal, cCdmaFailHistFailTime=cCdmaFailHistFailTime, cCdmaRPSessUpdErrors=cCdmaRPSessUpdErrors, cCdmaRegReqInvFlagsErrs=cCdmaRegReqInvFlagsErrs, cCdmaPcfSoPppSetupStatsTable=cCdmaPcfSoPppSetupStatsTable, cCdmaRegReqMismatchSPIErrs=cCdmaRegReqMismatchSPIErrs, cCdmaPcfSoRpUpdRpLifeExpReqs=cCdmaPcfSoRpUpdRpLifeExpReqs, cCdmaRegReqMissingMHAEErrs=cCdmaRegReqMissingMHAEErrs, cCdmaPppAuthPapFailures=cCdmaPppAuthPapFailures, cCdmaPcfSoRpRegBadReqFails=cCdmaPcfSoRpRegBadReqFails, cCdmaPppReleaseStats=cCdmaPppReleaseStats, cCdmaRPDeRegAcceptedReplies=cCdmaRPDeRegAcceptedReplies, cCdmaSessUpdAckInvProtocolErrs=cCdmaSessUpdAckInvProtocolErrs, cCdmaRegReqInvAppSubTypeInVSEErrs=cCdmaRegReqInvAppSubTypeInVSEErrs, cCdmaRpReRegAcceptedReqs=cCdmaRpReRegAcceptedReqs, cCdmaPppSessTimeoutReleases=cCdmaPppSessTimeoutReleases, cCdmaSessionConnId=cCdmaSessionConnId, cCdmaPppAuthPhaseSentTermreqs=cCdmaPppAuthPhaseSentTermreqs, cCdmaSessUpdAckInvMNIDErrs=cCdmaSessUpdAckInvMNIDErrs, cCdmaPcfSoPppConnFails=cCdmaPcfSoPppConnFails, cCdmaRPRegReasonUnSpecFailures=cCdmaRPRegReasonUnSpecFailures, cCdmaSessionRegTimeToExpire=cCdmaSessionRegTimeToExpire, cCdmaRegReqInvVendorIDInVSEErrs=cCdmaRegReqInvVendorIDInVSEErrs, cCdmaSessionA11FaIp=cCdmaSessionA11FaIp, cCdmaPcfSoRpRegStatsTable=cCdmaPcfSoRpRegStatsTable, cCdmaRpSessUpdReasonUnSpecFailures=cCdmaRpSessUpdReasonUnSpecFailures, cCdmaPcfSoRpRegDeniedReqs=cCdmaPcfSoRpRegDeniedReqs, cCdmaRegReqInvSPIErrs=cCdmaRegReqInvSPIErrs, cCdmaSystemPdsnGroupRev4=cCdmaSystemPdsnGroupRev4, cCdmaRpSessUpdIdentMismatchFailures=cCdmaRpSessUpdIdentMismatchFailures, cCdmaPppAuthEapFailures=cCdmaPppAuthEapFailures, cCdmaRpUpdPcfHandoffs=cCdmaRpUpdPcfHandoffs, cCdmaRpDeRegDiscardedReqs=cCdmaRpDeRegDiscardedReqs, cCdmaPdsnCluster=cCdmaPdsnCluster, cCdmaFlowTypeStats=cCdmaFlowTypeStats, cCdmaPcfSoRpUpdRcvdAcks=cCdmaPcfSoRpUpdRcvdAcks, cCdmaPcfSoPppConnSuccesses=cCdmaPcfSoPppConnSuccesses, cCdmaPppLcpPhaseReceivedTermreqs=cCdmaPppLcpPhaseReceivedTermreqs, cCdmaPdsnMIBComplianceRev2=cCdmaPdsnMIBComplianceRev2, cCdmaFlowMobileIpFailures=cCdmaFlowMobileIpFailures, cCdmaRpSessUpdRNPDIT=cCdmaRpSessUpdRNPDIT, cCdmaPppAuthMaxRetransFailures=cCdmaPppAuthMaxRetransFailures, cCdmaPppDeregisterByPcfReleases=cCdmaPppDeregisterByPcfReleases, cCdmaRegReqDupCVSEErrs=cCdmaRegReqDupCVSEErrs, cCdmaInvGREProtoPktDiscards=cCdmaInvGREProtoPktDiscards, cCdmaClusterMemberInfo=cCdmaClusterMemberInfo, cCdmaStatusChangeStats=cCdmaStatusChangeStats, cCdmaRpSessUpdDeniedReqs=cCdmaRpSessUpdDeniedReqs, cCdmaPcfSoPppSetupIpAddrType=cCdmaPcfSoPppSetupIpAddrType, cCdmaPppAuthMschapSuccesses=cCdmaPppAuthMschapSuccesses, cCdmaReceivedPmipKiloOctets=cCdmaReceivedPmipKiloOctets, cCdmaRPRegReplyErrors=cCdmaRPRegReplyErrors, cCdmaRegReqInvAirlinkRecErrs=cCdmaRegReqInvAirlinkRecErrs, cCdmaPcfSoRpDeRegRcvdReqs=cCdmaPcfSoRpDeRegRcvdReqs, cCdmaClusterSessLowThreshold=cCdmaClusterSessLowThreshold, cCdmaSessionGREToIPPkts=cCdmaSessionGREToIPPkts, PYSNMP_MODULE_ID=ciscoCdmaPdsnMIB, cCdmaRPRegUpdAckErrors=cCdmaRPRegUpdAckErrors, cCdmaPcfSoRpUpdStatsTable=cCdmaPcfSoRpUpdStatsTable, cCdmaSessionEntry=cCdmaSessionEntry, cCdmaPcfSoRpRegMNAuthFails=cCdmaPcfSoRpRegMNAuthFails, cCdmaRpRegBadReqFailures=cCdmaRpRegBadReqFailures, cCdmaSessUpdAckMemFailErrs=cCdmaSessUpdAckMemFailErrs, cCdmaRegUpdAckInvOrderErrs=cCdmaRegUpdAckInvOrderErrs, cCdmaFailHistBsid=cCdmaFailHistBsid, cCdmaPppNegoBapCons=cCdmaPppNegoBapCons, cCdmaRPUpdReasonUnSpecFailures=cCdmaRPUpdReasonUnSpecFailures, cCdmaPppNoRemoteIpAddressReleases=cCdmaPppNoRemoteIpAddressReleases, cCdmaTransmittedPmipPkts=cCdmaTransmittedPmipPkts, cCdmaPcfSoRpReRegRcvdReqs=cCdmaPcfSoRpReRegRcvdReqs, cCdmaClusterCtrlStatusChange2=cCdmaClusterCtrlStatusChange2, cCdmaRPRegUnknownHAAddrFailures=cCdmaRPRegUnknownHAAddrFailures, cCdmaStatusIS2OOSes=cCdmaStatusIS2OOSes, cCdmaSessionPdsnAuthenTimer=cCdmaSessionPdsnAuthenTimer, cCdmaClusterMemberLoad=cCdmaClusterMemberLoad, cCdmaPcfSoRpUpdAdmnFails=cCdmaPcfSoRpUpdAdmnFails, cCdmaIdChangeHandoffs=cCdmaIdChangeHandoffs, cCdmaRpDeRegDeniedReqs=cCdmaRpDeRegDeniedReqs, cCdmaPcfSoRpUpdStatsEntry=cCdmaPcfSoRpUpdStatsEntry, cCdmaNotifPdsnGroupRev3=cCdmaNotifPdsnGroupRev3, cCdmaFlowSimpleIpFailures=cCdmaFlowSimpleIpFailures, cCdmaHDLCoGRESessionTotal=cCdmaHDLCoGRESessionTotal, cCdmaRpSessUpdTransmittedReqs=cCdmaRpSessUpdTransmittedReqs, cCdmaRegUpdAckInvRUAEKeyErrs=cCdmaRegUpdAckInvRUAEKeyErrs, cCdmaClusterMemberAddressType=cCdmaClusterMemberAddressType, cCdmaRpRegStats=cCdmaRpRegStats, cCdmaRpSessUpdStats=cCdmaRpSessUpdStats, cCdmaPcfSoRpSessUpdRNPDIT=cCdmaPcfSoRpSessUpdRNPDIT, cCdmaAddressStaticMIPs=cCdmaAddressStaticMIPs, cCdmaPcfSoRpSessUpdIpAddr=cCdmaPcfSoRpSessUpdIpAddr, cCdmaPcfTotal=cCdmaPcfTotal, cCdmaRPRegBadRequestFailures=cCdmaRPRegBadRequestFailures, cCdmaPcfSessionMaxTotal=cCdmaPcfSessionMaxTotal, cCdmaPcfSoRpRegTBitNSetFails=cCdmaPcfSoRpRegTBitNSetFails, cCdmaPppNegoMrruCons=cCdmaPppNegoMrruCons, cCdmaClusterMemberEntry=cCdmaClusterMemberEntry, cCdmaSoRpUpdHandoffNotAckedReqs=cCdmaSoRpUpdHandoffNotAckedReqs, cCdmaRpDeRegAirlinkStops=cCdmaRpDeRegAirlinkStops, cCdmaPppCompressMsftCons=cCdmaPppCompressMsftCons, cCdmaPppAuthChapAttempts=cCdmaPppAuthChapAttempts, cCdmaPppReNegoStats=cCdmaPppReNegoStats, cCdmaRPUpdateStats=cCdmaRPUpdateStats, cCdmaSessionFlowEntry=cCdmaSessionFlowEntry, cCdmaPcfSoRpUpdTxdReqs=cCdmaPcfSoRpUpdTxdReqs, cCdmaRegReqInitNoSetupErrs=cCdmaRegReqInitNoSetupErrs, cCdmaPcfSoRpRegAdmnFails=cCdmaPcfSoRpRegAdmnFails, cCdmaSessionDiscardedInPkts=cCdmaSessionDiscardedInPkts, cCdmaSystemStatus=cCdmaSystemStatus, cCdmaPcfSoRpHandoffRegRcvdReqs=cCdmaPcfSoRpHandoffRegRcvdReqs, cCdmaSessionFaIp=cCdmaSessionFaIp, cCdmaPppSrvUnavailReleases=cCdmaPppSrvUnavailReleases, cCdmaReleasedSessions=cCdmaReleasedSessions, cCdmaServiceTotalOptions=cCdmaServiceTotalOptions, cCdmaClusterCommon=cCdmaClusterCommon, cCdmaPppRenegByMobileReqs=cCdmaPppRenegByMobileReqs, cCdmaFailSessionConnId=cCdmaFailSessionConnId, CCdmaServiceAffectedLevel=CCdmaServiceAffectedLevel, cCdmaClusterMemberStatusChange2=cCdmaClusterMemberStatusChange2, cCdmaRPRegNoRevTunnelFailures=cCdmaRPRegNoRevTunnelFailures, cCdmaRpHandoffRegDeniedReqs=cCdmaRpHandoffRegDeniedReqs, cCdmaPppMissEchoReleases=cCdmaPppMissEchoReleases, cCdmaPcfSoRpDeRegAcptdReqs=cCdmaPcfSoRpDeRegAcptdReqs, cCdmaRpSessUpdNotAckedReqs=cCdmaRpSessUpdNotAckedReqs, cCdmaSessionTunnelProt=cCdmaSessionTunnelProt, cCdmaFailSessionKey=cCdmaFailSessionKey, cCdmaRegRplyInternalErrs=cCdmaRegRplyInternalErrs, cCdmaServiceAffectedLevel=cCdmaServiceAffectedLevel, cCdmaSessUpdAckNoSessionErrs=cCdmaSessUpdAckNoSessionErrs, cCdmaSessionEsn=cCdmaSessionEsn, cCdmaRPRegTBitNotSetFailures=cCdmaRPRegTBitNotSetFailures, cCdmaPcfSoRpInitRegRcvdReqs=cCdmaPcfSoRpInitRegRcvdReqs, cCdmaPcfSoRpUpdIdMismatFails=cCdmaPcfSoRpUpdIdMismatFails, cCdmaSessUpdAckInvPakLenErrs=cCdmaSessUpdAckInvPakLenErrs, cCdmaSessionRcvdPkts=cCdmaSessionRcvdPkts, cCdmaServiceOptionFailures=cCdmaServiceOptionFailures, cCdmaPppLcpFailures=cCdmaPppLcpFailures, cCdmaRegReqMissingSSEErrs=cCdmaRegReqMissingSSEErrs, cCdmaSystemVersion=cCdmaSystemVersion, cCdmaPdsnStatusChange=cCdmaPdsnStatusChange, cCdmaPcfSoRpRegAcptdReqs=cCdmaPcfSoRpRegAcptdReqs, cCdmaSessionLowThreshold=cCdmaSessionLowThreshold, cCdmaSoRpUpdHandoffDiscardedAcks=cCdmaSoRpUpdHandoffDiscardedAcks, cCdmaRPRegValidRequests=cCdmaRPRegValidRequests, cCdmaPdsnMIBComplianceRev5=cCdmaPdsnMIBComplianceRev5, cCdmaTrafficStats=cCdmaTrafficStats, cCdmaRpRegDeniedReqs=cCdmaRpRegDeniedReqs, cCdmaRpRegUnknownPdsnFailures=cCdmaRpRegUnknownPdsnFailures, cCdmaPcfSessionTotal=cCdmaPcfSessionTotal, cCdmaRpSessUpdReasonParamNotUpdated=cCdmaRpSessUpdReasonParamNotUpdated, cCdmaRegReqReRegInDisconnectErrs=cCdmaRegReqReRegInDisconnectErrs, cCdmaPcfSoRpDeRegDeniedReqs=cCdmaPcfSoRpDeRegDeniedReqs, cCdmaVPDNFlowTotal=cCdmaVPDNFlowTotal, cCdmaPdsnMIBGroups=cCdmaPdsnMIBGroups, cCdmaPerformanceStats=cCdmaPerformanceStats, cCdmaConfig=cCdmaConfig, cCdmaPppCompressNegoCons=cCdmaPppCompressNegoCons, cCdmaPcfSoRpUpdAcptdReqs=cCdmaPcfSoRpUpdAcptdReqs, cCdmaRpInitRegAcceptedReqs=cCdmaRpInitRegAcceptedReqs, cCdmaPcfSoRpSessUpdIdMismatFails=cCdmaPcfSoRpSessUpdIdMismatFails, cCdmaRpUpdNotAckedReqs=cCdmaRpUpdNotAckedReqs, cCdmaPcfSoRpRegServiceOption=cCdmaPcfSoRpRegServiceOption, cCdmaSessUpdAckInvVSEErrs=cCdmaSessUpdAckInvVSEErrs, cCdmaSessUpdInternalErrs=cCdmaSessUpdInternalErrs, cCdmaClusterCtrlStatus=cCdmaClusterCtrlStatus, ciscoCdmaPdsnMIB=ciscoCdmaPdsnMIB, cCdmaRpUpdHandoffInitTxdReqs=cCdmaRpUpdHandoffInitTxdReqs, cCdmaRegReqInvPakLenErrs=cCdmaRegReqInvPakLenErrs, cCdmaRpHandoffRegAcceptedReqs=cCdmaRpHandoffRegAcceptedReqs, cCdmaPppRenegOtherReasonReqs=cCdmaPppRenegOtherReasonReqs, cCdmaPcfSoPppConnInitiateReqs=cCdmaPcfSoPppConnInitiateReqs, cCdmaRegUpdMemFailErrs=cCdmaRegUpdMemFailErrs, cCdmaPcfSoRpHandoffRegDeniedReqs=cCdmaPcfSoRpHandoffRegDeniedReqs, cCdmaRpSessUpdAlwaysON=cCdmaRpSessUpdAlwaysON, cCdmaPppPreLCPPcfA10Releases=cCdmaPppPreLCPPcfA10Releases, cCdmaRpSessUpdBadReqFailures=cCdmaRpSessUpdBadReqFailures, cCdmaSessionRcvdOctets=cCdmaSessionRcvdOctets, cCdmaPppRenegConnectionsAborted=cCdmaPppRenegConnectionsAborted, cCdmaPcfSoPppServiceOption=cCdmaPcfSoPppServiceOption, cCdmaPppTotalReleases=cCdmaPppTotalReleases, cCdmaRegUpdAckInvMNIDTypeErrs=cCdmaRegUpdAckInvMNIDTypeErrs, cCdmaRpInterPCFDormantHandoffs=cCdmaRpInterPCFDormantHandoffs, cCdmaRPRegInsuffResFailures=cCdmaRPRegInsuffResFailures, cCdmaAffectedAddressType=cCdmaAffectedAddressType, cCdmaReceivedPmipPkts=cCdmaReceivedPmipPkts, cCdmaClusterCtrlAddress=cCdmaClusterCtrlAddress, cCdmaSessionPppCompressEnabled=cCdmaSessionPppCompressEnabled, cCdmaPcfMaxAllowedNotif=cCdmaPcfMaxAllowedNotif, cCdmaRpUpdHandoffReceivedAcks=cCdmaRpUpdHandoffReceivedAcks, cCdmaPppConnectionOtherFailures=cCdmaPppConnectionOtherFailures, cCdmaSessionMoMtInd=cCdmaSessionMoMtInd, cCdmaPcfSoRpSessUpdReaUnSpecFails=cCdmaPcfSoRpSessUpdReaUnSpecFails, cCdmaRpUpdReTransmittedReqs=cCdmaRpUpdReTransmittedReqs, cCdmaPcfMaxAllowed=cCdmaPcfMaxAllowed, cCdmaRegUpdAckMemFailErrs=cCdmaRegUpdAckMemFailErrs, cCdmaPcfSoRpSessUpdStats=cCdmaPcfSoRpSessUpdStats, cCdmaPcfErrorTotal=cCdmaPcfErrorTotal, cCdmaRegUpdAckNoSessionErrs=cCdmaRegUpdAckNoSessionErrs, cCdmaPppCurrentConnections=cCdmaPppCurrentConnections, cCdmaSessUpdAckInvMSIDLenErrs=cCdmaSessUpdAckInvMSIDLenErrs, cCdmaPppIpcpFailures=cCdmaPppIpcpFailures, cCdmaClusterSessHighThreshold=cCdmaClusterSessHighThreshold, cCdmaRPRegBadCVSEFailures=cCdmaRPRegBadCVSEFailures, cCdmaPppIpcpPhaseReceivedTermreqs=cCdmaPppIpcpPhaseReceivedTermreqs, cCdmaRpUpdIdentMismatchFailures=cCdmaRpUpdIdentMismatchFailures, cCdmaRpUpdHandoffDiscardedAcks=cCdmaRpUpdHandoffDiscardedAcks, cCdmaFailSessionA11HaIp=cCdmaFailSessionA11HaIp, cCdmaPppEnterAuthNums=cCdmaPppEnterAuthNums, cCdmaSoRpUpdHandoffInitTxdReqs=cCdmaSoRpUpdHandoffInitTxdReqs, cCdmaRpUpdRpLifeExpReqs=cCdmaRpUpdRpLifeExpReqs, cCdmaRpErrors=cCdmaRpErrors, cCdmaPcfSoRpSessUpdStatsEntry=cCdmaPcfSoRpSessUpdStatsEntry, cCdmaSessionRegReqFailedNotif=cCdmaSessionRegReqFailedNotif, cCdmaSoRpUpdHandoffBadReqFails=cCdmaSoRpUpdHandoffBadReqFails, cCdmaPcfSoRpSessUpdDiscardedAcks=cCdmaPcfSoRpSessUpdDiscardedAcks, cCdmaSessionUserFlowIpAddress=cCdmaSessionUserFlowIpAddress, cCdmaPcfSoRpRegBadCVSEFails=cCdmaPcfSoRpRegBadCVSEFails, CCdmaServiceOption=CCdmaServiceOption, cCdmaClusterMemberTable=cCdmaClusterMemberTable, cCdmaClusterCtrlStatusChange=cCdmaClusterCtrlStatusChange, cCdmaAffectedMemberStatus=cCdmaAffectedMemberStatus, cCdmaRPUpdMNAuthenFailures=cCdmaRPUpdMNAuthenFailures, cCdmaPcfSoRpReRegAcptdReqs=cCdmaPcfSoRpReRegAcptdReqs, cCdmaPcfSoRpReRegDiscardedReqs=cCdmaPcfSoRpReRegDiscardedReqs, cCdmaPcfSoRpUpdPPPtermReqs=cCdmaPcfSoRpUpdPPPtermReqs, cCdmaSessUpdMemFailErrs=cCdmaSessUpdMemFailErrs, cCdmaRPRegMNAuthenFailures=cCdmaRPRegMNAuthenFailures, cCdmaPppRenegAnidChanges=cCdmaPppRenegAnidChanges, cCdmaRpInitRegReceivedReqs=cCdmaRpInitRegReceivedReqs, cCdmaTransmittedMipKiloOctets=cCdmaTransmittedMipKiloOctets, cCdmaSessionDiscardedOutPkts=cCdmaSessionDiscardedOutPkts, cCdmaRegReqStartOnCloseErrs=cCdmaRegReqStartOnCloseErrs, cCdmaRpRegReasonUnSpecFailures=cCdmaRpRegReasonUnSpecFailures, cCdmaFailHistServiceOption=cCdmaFailHistServiceOption, cCdmaRPRegAdminProhibFailures=cCdmaRPRegAdminProhibFailures, cCdmaSessionA11HaIp=cCdmaSessionA11HaIp, cCdmaClusterSessionLowReached=cCdmaClusterSessionLowReached, cCdmaPppIPCPPdsnA10Releases=cCdmaPppIPCPPdsnA10Releases, cCdmaRegReqGREKeyChngNoSetupErrs=cCdmaRegReqGREKeyChngNoSetupErrs, cCdmaPppAuthMsidSuccesses=cCdmaPppAuthMsidSuccesses)
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-MIB", cCdmaSessionNai=cCdmaSessionNai, cCdmaClusterTotalControllers=cCdmaClusterTotalControllers, cCdmaPppRenegFailures=cCdmaPppRenegFailures, cCdmaHandoffStats=cCdmaHandoffStats, cCdmaFlowVpdnFailures=cCdmaFlowVpdnFailures, cCdmaPcfSoRpUpdOtherReaReqs=cCdmaPcfSoRpUpdOtherReaReqs, cCdmaPcfSoRpUpdInitTxdReqs=cCdmaPcfSoRpUpdInitTxdReqs, cCdmaProxyMobileIpFlowTotal=cCdmaProxyMobileIpFlowTotal, cCdmaSessionFlowTable=cCdmaSessionFlowTable, cCdmaPppLcpFailuresMaxRetrans=cCdmaPppLcpFailuresMaxRetrans, cCdmaPppCompressOtherCons=cCdmaPppCompressOtherCons, cCdmaRpUpdHandoffBadReqFails=cCdmaRpUpdHandoffBadReqFails, cCdmaPppAuthPdsnA10Releases=cCdmaPppAuthPdsnA10Releases, cCdmaRegReqInvAppTypeInVSEErrs=cCdmaRegReqInvAppTypeInVSEErrs, cCdmaPppIpcpSuccesses=cCdmaPppIpcpSuccesses, cCdmaPppIdleTimeoutReleases=cCdmaPppIdleTimeoutReleases, cCdmaRpReRegReceivedReqs=cCdmaRpReRegReceivedReqs, cCdmaSessionAddressingScheme=cCdmaSessionAddressingScheme, cCdmaTransmittedPmipKiloOctets=cCdmaTransmittedPmipKiloOctets, cCdmaPcfSoRpUpdReaUnSpecFails=cCdmaPcfSoRpUpdReaUnSpecFails, cCdmaRegReqDuplicateGREKeyErrs=cCdmaRegReqDuplicateGREKeyErrs, cCdmaPcfSoRpUpdReTxdReqs=cCdmaPcfSoRpUpdReTxdReqs, cCdmaSystemPdsnGroup=cCdmaSystemPdsnGroup, cCdmaPppRenegByPdsnReqs=cCdmaPppRenegByPdsnReqs, cCdmaSystemPdsnGroupSup1=cCdmaSystemPdsnGroupSup1, cCdmaRegUpdInternalErrs=cCdmaRegUpdInternalErrs, cCdmaSessionMaxAllowed=cCdmaSessionMaxAllowed, cCdmaAddressDynamicVPDNs=cCdmaAddressDynamicVPDNs, cCdmaPcfSoRpRegDiscardedReqs=cCdmaPcfSoRpRegDiscardedReqs, cCdmaPcfSoRpDeRegDiscardedReqs=cCdmaPcfSoRpDeRegDiscardedReqs, cCdmaPcfSoRpSessUpdBadReqFails=cCdmaPcfSoRpSessUpdBadReqFails, cCdmaSessionHighThreshold=cCdmaSessionHighThreshold, cCdmaRegUpdAckInvSPIErrs=cCdmaRegUpdAckInvSPIErrs, cCdmaPcfSoRpInitRegDiscardedReqs=cCdmaPcfSoRpInitRegDiscardedReqs, cCdmaTransmittedSipPkts=cCdmaTransmittedSipPkts, cCdmaRpUpdPPPtermReqs=cCdmaRpUpdPPPtermReqs, cCdmaPppLifetimeExpiryReleases=cCdmaPppLifetimeExpiryReleases, cCdmaRpUpdAdminProhibFailures=cCdmaRpUpdAdminProhibFailures, cCdmaPppAuthMsidFailures=cCdmaPppAuthMsidFailures, cCdmaNoSessionPktDiscards=cCdmaNoSessionPktDiscards, cCdmaRegReqMemFailErrs=cCdmaRegReqMemFailErrs, cCdmaPppEnterLcpNums=cCdmaPppEnterLcpNums, cCdmaEstablishedSessions=cCdmaEstablishedSessions, cCdmaRPRegReqErrors=cCdmaRPRegReqErrors, cCdmaSessUpdAckInvRUAEKeyErrs=cCdmaSessUpdAckInvRUAEKeyErrs, cCdmaFailHistInfoEntry=cCdmaFailHistInfoEntry, cCdmaPcfSoRpRegStatsEntry=cCdmaPcfSoRpRegStatsEntry, cCdmaPcfSoRpSessUpdParamNotUpdated=cCdmaPcfSoRpSessUpdParamNotUpdated, cCdmaRegReqInitRcvdSDBErrs=cCdmaRegReqInitRcvdSDBErrs, cCdmaRegReqStopOnDormantErrs=cCdmaRegReqStopOnDormantErrs, cCdmaRpUpdHandoffReaUnSpecFails=cCdmaRpUpdHandoffReaUnSpecFails, cCdmaPcfSoRpRegPcfUnknwnFails=cCdmaPcfSoRpRegPcfUnknwnFails, cCdmaPppLcpSuccesses=cCdmaPppLcpSuccesses, cCdmaPppAuthMschapTimeouts=cCdmaPppAuthMschapTimeouts, cCdmaRegReqStartOnActiveErrs=cCdmaRegReqStartOnActiveErrs, cCdmaRpRegIdMismatchFailures=cCdmaRpRegIdMismatchFailures, cCdmaPcfSoRpInitRegAcptdReqs=cCdmaPcfSoRpInitRegAcptdReqs, cCdmaThresholdConfig=cCdmaThresholdConfig, cCdmaPdsnMIBComplianceRev6=cCdmaPdsnMIBComplianceRev6, cCdmaPcfSoRpSessUpdInitTxdReqs=cCdmaPcfSoRpSessUpdInitTxdReqs, cCdmaRegReqAcctInvLenAttrErrs=cCdmaRegReqAcctInvLenAttrErrs, cCdmaRpUpdInitTransmittedReqs=cCdmaRpUpdInitTransmittedReqs, cCdmaPcfSoPppSetupIpAddr=cCdmaPcfSoPppSetupIpAddr, cCdmaRPUpdAdminProhibFailures=cCdmaRPUpdAdminProhibFailures, cCdmaPppNegoIpxCons=cCdmaPppNegoIpxCons, cCdmaSessionPdsnIp=cCdmaSessionPdsnIp, cCdmaRpInterPCFActiveHandoffs=cCdmaRpInterPCFActiveHandoffs, cCdmaRpUpdHandoffMNAuthenFails=cCdmaRpUpdHandoffMNAuthenFails, cCdmaPcfSoRpHandoffRegDiscardedReqs=cCdmaPcfSoRpHandoffRegDiscardedReqs, cCdmaRegUpdAckMissingSSEErrs=cCdmaRegUpdAckMissingSSEErrs, cCdmaPppIpcpOptionIssueFailures=cCdmaPppIpcpOptionIssueFailures, cCdmaPcfSoRpSessUpdDeniedReqs=cCdmaPcfSoRpSessUpdDeniedReqs, cCdmaRpUpdHandoffAdmProhibFails=cCdmaRpUpdHandoffAdmProhibFails, cCdmaRPRegistrationStats=cCdmaRPRegistrationStats, cCdmaRpReRegDeniedReqs=cCdmaRpReRegDeniedReqs, cCdmaRPRegAcceptedReplies=cCdmaRPRegAcceptedReplies, cCdmaPppAuthFailures=cCdmaPppAuthFailures, cCdmaPppAuthEapAttempts=cCdmaPppAuthEapAttempts, cCdmaRpRegNoRevTunnelFailures=cCdmaRpRegNoRevTunnelFailures, cCdmaPppLcpPhaseSentTermreqs=cCdmaPppLcpPhaseSentTermreqs, cCdmaReceivedMipPkts=cCdmaReceivedMipPkts, cCdmaRegUpdAckMissingRUAEErrs=cCdmaRegUpdAckMissingRUAEErrs, cCdmaPppAddrFilterReleases=cCdmaPppAddrFilterReleases, cCdmaPdsnMIBCompliance=cCdmaPdsnMIBCompliance, cCdmaPppLCPPdsnA10Releases=cCdmaPppLCPPdsnA10Releases, cCdmaSessionRegLifeTime=cCdmaSessionRegLifeTime, cCdmaAddressDynamicSIPs=cCdmaAddressDynamicSIPs, cCdmaSessUpdAckInvSPIErrs=cCdmaSessUpdAckInvSPIErrs, cCdmaSessionLowReached=cCdmaSessionLowReached, cCdmaClusterCtrlTable=cCdmaClusterCtrlTable, cCdmaSrEnabled=cCdmaSrEnabled, cCdmaStatusOOS2ISes=cCdmaStatusOOS2ISes, cCdmaRegReqAcctRecRetransErrs=cCdmaRegReqAcctRecRetransErrs, cCdmaClusterMemberAddress=cCdmaClusterMemberAddress, cCdmaPppAuthStats=cCdmaPppAuthStats, cCdmaPppCompressNegoFailures=cCdmaPppCompressNegoFailures, cCdmaPppRenegLcpIpcpReqs=cCdmaPppRenegLcpIpcpReqs, cCdmaRpUpdHandoffIdMismatchFails=cCdmaRpUpdHandoffIdMismatchFails, cCdmaPcfTable=cCdmaPcfTable, cCdmaRpRegAdminProhibFailures=cCdmaRpRegAdminProhibFailures, cCdmaPcfSoRpSessUpdServiceOption=cCdmaPcfSoRpSessUpdServiceOption, cCdmaRegReqSameGREKeySetupRcvdErrs=cCdmaRegReqSameGREKeySetupRcvdErrs, cCdmaSessionServiceOption=cCdmaSessionServiceOption, cCdmaSessUpdAckInvMNIDTypeErrs=cCdmaSessUpdAckInvMNIDTypeErrs, cCdmaPppStats=cCdmaPppStats, cCdmaPppEnterIpcpNums=cCdmaPppEnterIpcpNums, cCdmaPppLCPPcfA10Releases=cCdmaPppLCPPcfA10Releases, cCdmaRpRegInsuffResFailures=cCdmaRpRegInsuffResFailures, cCdmaPppAuthPhaseReceivedTermreqs=cCdmaPppAuthPhaseReceivedTermreqs, cCdmaRpRegReasonlUnSpecFailures=cCdmaRpRegReasonlUnSpecFailures, cCdmaPppConnectionFailures=cCdmaPppConnectionFailures, cCdmaRPRegIdentMismatchFailures=cCdmaRPRegIdentMismatchFailures, cCdmaServiceOptionTable=cCdmaServiceOptionTable, cCdmaRegReqInvVSEErrs=cCdmaRegReqInvVSEErrs, cCdmaRegUpdAckInvProtocolErrs=cCdmaRegUpdAckInvProtocolErrs, cCdmaPcfSoRpUpdIpAddr=cCdmaPcfSoRpUpdIpAddr, cCdmaReceivedSipKiloOctets=cCdmaReceivedSipKiloOctets, cCdmaPcfSoRpSessUpdIpAddrType=cCdmaPcfSoRpSessUpdIpAddrType, cCdmaRpRegReqMaxSessionReachedErrs=cCdmaRpRegReqMaxSessionReachedErrs, cCdmaPcfSoRpSessUpdTxdReqs=cCdmaPcfSoRpSessUpdTxdReqs)
