#
# PySNMP MIB module HPN-ICF-DHCPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DHCPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
hpnicfRhw, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfRhw")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, ObjectIdentity, iso, Gauge32, Counter32, MibIdentifier, Bits, NotificationType, TimeTicks, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "iso", "Gauge32", "Counter32", "MibIdentifier", "Bits", "NotificationType", "TimeTicks", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress")
MacAddress, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "RowStatus")
hpnicfDHCPServerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2))
if mibBuilder.loadTexts: hpnicfDHCPServerMib.setLastUpdated('200602200000Z')
if mibBuilder.loadTexts: hpnicfDHCPServerMib.setOrganization('')
class HpnicfDhcpSEnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enabled", 1), ("disabled", 0))

hpnicfDHCPServerMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1))
hpnicfDHCPSGlobalPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 1), )
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolTable.setStatus('current')
hpnicfDHCPSGlobalPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolEntry.setStatus('current')
hpnicfDHCPSGlobalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolName.setStatus('current')
hpnicfDHCPSGlobalPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolRowStatus.setStatus('current')
hpnicfDHCPSGlobalPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2), )
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolConfigTable.setStatus('current')
hpnicfDHCPSGlobalPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolConfigEntry.setStatus('current')
hpnicfDHCPSGlobalPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("host", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolType.setStatus('current')
hpnicfDHCPSGlobalPoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolNetwork.setStatus('current')
hpnicfDHCPSGlobalPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolNetworkMask.setStatus('current')
hpnicfDHCPSGlobalPoolHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolHostIPAddr.setStatus('current')
hpnicfDHCPSGlobalPoolHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolHostMask.setStatus('current')
hpnicfDHCPSGlobalPoolHostHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolHostHAddr.setStatus('current')
hpnicfDHCPSGlobalPoolConfigUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undonetworkip", 1), ("undohostip", 2), ("undohosthaddr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolConfigUndoFlag.setStatus('current')
hpnicfDHCPSGlobalPoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3), )
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolParaTable.setStatus('current')
hpnicfDHCPSGlobalPoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolParaEntry.setStatus('current')
hpnicfDHCPSGlobalPoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolLeaseDay.setStatus('current')
hpnicfDHCPSGlobalPoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolLeaseHour.setStatus('current')
hpnicfDHCPSGlobalPoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolLeaseMinute.setStatus('current')
hpnicfDHCPSGlobalPoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolLeaseUnlimited.setStatus('current')
hpnicfDHCPSGlobalPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolDomainName.setStatus('current')
hpnicfDHCPSGlobalPoolClientGatewayIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientGatewayIPString.setStatus('current')
hpnicfDHCPSGlobalPoolClientGatewayIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientGatewayIPUndo.setStatus('current')
hpnicfDHCPSGlobalPoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientDNSIPString.setStatus('current')
hpnicfDHCPSGlobalPoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientDNSIPUndo.setStatus('current')
hpnicfDHCPSGlobalPoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientNetbiosType.setStatus('current')
hpnicfDHCPSGlobalPoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientNbnsIPString.setStatus('current')
hpnicfDHCPSGlobalPoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolClientNbnsIPUndo.setStatus('current')
hpnicfDHCPSGlobalPoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoGateway", 3), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolParaUndoFlag.setStatus('current')
hpnicfDHCPSGlobalPoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolIPInUseReset.setStatus('current')
hpnicfDHCPSGlobalPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4), )
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionTable.setStatus('current')
hpnicfDHCPSGlobalPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolName"), (0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionCode"))
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionEntry.setStatus('current')
hpnicfDHCPSGlobalPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionCode.setStatus('current')
hpnicfDHCPSGlobalPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionType.setStatus('current')
hpnicfDHCPSGlobalPoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionAscii.setStatus('current')
hpnicfDHCPSGlobalPoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 143))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionHexString.setStatus('current')
hpnicfDHCPSGlobalPoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionIPString.setStatus('current')
hpnicfDHCPSGlobalPoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolOptionRowStatus.setStatus('current')
hpnicfDHCPSGlobalTreeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 5), )
if mibBuilder.loadTexts: hpnicfDHCPSGlobalTreeTable.setStatus('current')
hpnicfDHCPSGlobalTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSGlobalTreeEntry.setStatus('current')
hpnicfDHCPSGlobalTreeParentNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalTreeParentNodeName.setStatus('current')
hpnicfDHCPSGlobalTreeChildNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalTreeChildNodeName.setStatus('current')
hpnicfDHCPSGlobalTreePreSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalTreePreSiblingNodeName.setStatus('current')
hpnicfDHCPSGlobalTreeSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalTreeSiblingNodeName.setStatus('current')
hpnicfDHCPSInterfacePoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6), )
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolParaTable.setStatus('current')
hpnicfDHCPSInterfacePoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolParaEntry.setStatus('current')
hpnicfDHCPSInterfacePoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolLeaseDay.setStatus('current')
hpnicfDHCPSInterfacePoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolLeaseHour.setStatus('current')
hpnicfDHCPSInterfacePoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolLeaseMinute.setStatus('current')
hpnicfDHCPSInterfacePoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolLeaseUnlimited.setStatus('current')
hpnicfDHCPSInterfacePoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolDomainName.setStatus('current')
hpnicfDHCPSInterfacePoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolClientDNSIPString.setStatus('current')
hpnicfDHCPSInterfacePoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolClientDNSIPUndo.setStatus('current')
hpnicfDHCPSInterfacePoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolClientNetbiosType.setStatus('current')
hpnicfDHCPSInterfacePoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolClientNbnsIPString.setStatus('current')
hpnicfDHCPSInterfacePoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolClientNbnsIPUndo.setStatus('current')
hpnicfDHCPSInterfacePoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolParaUndoFlag.setStatus('current')
hpnicfDHCPSInterfacePoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolIPInUseReset.setStatus('current')
hpnicfDHCPSInterfacePoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7), )
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionTable.setStatus('current')
hpnicfDHCPSInterfacePoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionCode"))
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionEntry.setStatus('current')
hpnicfDHCPSInterfacePoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionCode.setStatus('current')
hpnicfDHCPSInterfacePoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionType.setStatus('current')
hpnicfDHCPSInterfacePoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionAscii.setStatus('current')
hpnicfDHCPSInterfacePoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 143))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionHexString.setStatus('current')
hpnicfDHCPSInterfacePoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionIPString.setStatus('current')
hpnicfDHCPSInterfacePoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolOptionRowStatus.setStatus('current')
hpnicfDHCPSInterfacePoolStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 8), )
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolStaticBindTable.setStatus('current')
hpnicfDHCPSInterfacePoolStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolStaticBindIP"))
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolStaticBindEntry.setStatus('current')
hpnicfDHCPSInterfacePoolStaticBindIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolStaticBindIP.setStatus('current')
hpnicfDHCPSInterfacePoolStaticBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 8, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolStaticBindMac.setStatus('current')
hpnicfDHCPSInterfacePoolStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolStaticBindRowStatus.setStatus('current')
hpnicfDHCPSIPInUseTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9), )
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseTable.setStatus('deprecated')
hpnicfDHCPSIPInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseHAddr"))
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseEntry.setStatus('deprecated')
hpnicfDHCPSIPInUseHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseHAddr.setStatus('deprecated')
hpnicfDHCPSIPInUseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseIP.setStatus('deprecated')
hpnicfDHCPSIPInUseEndLease = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseEndLease.setStatus('deprecated')
hpnicfDHCPSIPInUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseType.setStatus('deprecated')
hpnicfDHCPSIPInUsePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUsePoolName.setStatus('deprecated')
hpnicfDHCPSIPInUseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseInterface.setStatus('deprecated')
hpnicfDHCPSIPInUseVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseVlan.setStatus('deprecated')
hpnicfDHCPSIPInUseAtmpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseAtmpvc.setStatus('deprecated')
hpnicfDHCPSForbiddenIPTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 10), )
if mibBuilder.loadTexts: hpnicfDHCPSForbiddenIPTable.setStatus('current')
hpnicfDHCPSForbiddenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 10, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSForbiddenIPStart"), (0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSForbiddenIPEnd"))
if mibBuilder.loadTexts: hpnicfDHCPSForbiddenIPEntry.setStatus('current')
hpnicfDHCPSForbiddenIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSForbiddenIPStart.setStatus('current')
hpnicfDHCPSForbiddenIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSForbiddenIPEnd.setStatus('current')
hpnicfDHCPSForbiddenIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSForbiddenIPRowStatus.setStatus('current')
hpnicfDHCPSConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 11), )
if mibBuilder.loadTexts: hpnicfDHCPSConflictIPTable.setStatus('current')
hpnicfDHCPSConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 11, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSConflictIP"))
if mibBuilder.loadTexts: hpnicfDHCPSConflictIPEntry.setStatus('current')
hpnicfDHCPSConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSConflictIP.setStatus('current')
hpnicfDHCPSConflictIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("arp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSConflictIPType.setStatus('current')
hpnicfDHCPSConflictIPDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSConflictIPDetectTime.setStatus('current')
hpnicfDHCPSServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 12), HpnicfDhcpSEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSServiceStatus.setStatus('current')
hpnicfDHCPSDetectingServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 13), HpnicfDhcpSEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSDetectingServerStatus.setStatus('current')
hpnicfDHCPSPingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSPingNum.setStatus('current')
hpnicfDHCPSPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSPingTimeout.setStatus('current')
hpnicfDHCPSWriteDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 16), HpnicfDhcpSEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSWriteDataStatus.setStatus('current')
hpnicfDHCPSWriteDataDirection = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSWriteDataDirection.setStatus('current')
hpnicfDHCPSWriteDataDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSWriteDataDelay.setStatus('current')
hpnicfDHCPSWriteDataRecover = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 19), HpnicfDhcpSEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSWriteDataRecover.setStatus('current')
hpnicfDHCPSIPInUseResetIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseResetIP.setStatus('current')
hpnicfDHCPSConflictIPResetIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSConflictIPResetIP.setStatus('current')
hpnicfDHCPSIPResetFlag = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("ipInUse", 1), ("conflictIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSIPResetFlag.setStatus('current')
hpnicfDHCPSGlobalPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolNumber.setStatus('current')
hpnicfDHCPSGlobalPoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolAutoBindingNum.setStatus('current')
hpnicfDHCPSGlobalPoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolManualBindingNum.setStatus('current')
hpnicfDHCPSGlobalPoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSGlobalPoolExpiredBindingNum.setStatus('current')
hpnicfDHCPSInterfacePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolNumber.setStatus('current')
hpnicfDHCPSInterfacePoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolAutoBindingNum.setStatus('current')
hpnicfDHCPSInterfacePoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolManualBindingNum.setStatus('current')
hpnicfDHCPSInterfacePoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInterfacePoolExpiredBindingNum.setStatus('current')
hpnicfDHCPSBadPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSBadPktNum.setStatus('current')
hpnicfDHCPSBootRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSBootRequestPktNum.setStatus('current')
hpnicfDHCPSDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSDiscoverPktNum.setStatus('current')
hpnicfDHCPSRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSRequestPktNum.setStatus('current')
hpnicfDHCPSDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSDeclinePktNum.setStatus('current')
hpnicfDHCPSReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSReleasePktNum.setStatus('current')
hpnicfDHCPSInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSInformPktNum.setStatus('current')
hpnicfDHCPSBootReplyPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSBootReplyPktNum.setStatus('current')
hpnicfDHCPSOfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSOfferPktNum.setStatus('current')
hpnicfDHCPSAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSAckPktNum.setStatus('current')
hpnicfDHCPSNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSNakPktNum.setStatus('current')
hpnicfDHCPSStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSStatisticsReset.setStatus('current')
hpnicfDHCPSIPInUseExTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43), )
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseExTable.setStatus('current')
hpnicfDHCPSIPInUseExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1), ).setIndexNames((0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseHAddrEx"), (0, "HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseVlanIdEx"))
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseExEntry.setStatus('current')
hpnicfDHCPSIPInUseHAddrEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseHAddrEx.setStatus('current')
hpnicfDHCPSIPInUseVlanIdEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(60000, 60000), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseVlanIdEx.setStatus('current')
hpnicfDHCPSIPInUseIPEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseIPEx.setStatus('current')
hpnicfDHCPSIPInUseEndLeaseEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseEndLeaseEx.setStatus('current')
hpnicfDHCPSIPInUseTypeEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseTypeEx.setStatus('current')
hpnicfDHCPSIPInUsePoolNameEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUsePoolNameEx.setStatus('current')
hpnicfDHCPSIPInUseIfIndexEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseIfIndexEx.setStatus('current')
hpnicfDHCPSIPInUseServerPortVlanIdEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseServerPortVlanIdEx.setStatus('current')
hpnicfDHCPSIPInUseAtmpvcEx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 1, 43, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSIPInUseAtmpvcEx.setStatus('current')
hpnicfDHCPServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 2))
hpnicfDHCPServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 2, 1))
hpnicfDHCPServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 2, 2))
hpnicfDHCPServerMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 2, 2, 2, 1)).setObjects(("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolRowStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolNetwork"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolNetworkMask"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolHostIPAddr"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolHostMask"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolHostHAddr"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolConfigUndoFlag"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolLeaseDay"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolLeaseHour"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolLeaseMinute"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolLeaseUnlimited"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolDomainName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientGatewayIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientGatewayIPUndo"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientDNSIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientDNSIPUndo"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientNetbiosType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientNbnsIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolClientNbnsIPUndo"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolParaUndoFlag"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolIPInUseReset"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionCode"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionAscii"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionHexString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolOptionRowStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalTreeParentNodeName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalTreeChildNodeName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalTreePreSiblingNodeName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalTreeSiblingNodeName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolLeaseDay"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolLeaseHour"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolLeaseMinute"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolLeaseUnlimited"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolDomainName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolClientDNSIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolClientDNSIPUndo"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolClientNetbiosType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolClientNbnsIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolClientNbnsIPUndo"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolParaUndoFlag"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolIPInUseReset"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionCode"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionAscii"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionHexString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionIPString"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolOptionRowStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolStaticBindIP"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolStaticBindMac"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolStaticBindRowStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseHAddr"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseIP"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseEndLease"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUsePoolName"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseInterface"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseVlan"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseAtmpvc"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSForbiddenIPStart"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSForbiddenIPEnd"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSForbiddenIPRowStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSConflictIP"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSConflictIPType"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSConflictIPDetectTime"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSServiceStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSDetectingServerStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSPingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSPingTimeout"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSWriteDataStatus"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSWriteDataDirection"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSWriteDataDelay"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSWriteDataRecover"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseResetIP"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSConflictIPResetIP"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPResetFlag"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolNumber"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolAutoBindingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolManualBindingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSGlobalPoolExpiredBindingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolNumber"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolAutoBindingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolManualBindingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInterfacePoolExpiredBindingNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSBadPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSBootRequestPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSDiscoverPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSRequestPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSDeclinePktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSReleasePktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSInformPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSBootReplyPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSOfferPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSAckPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSNakPktNum"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSStatisticsReset"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseHAddrEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseVlanIdEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseIPEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseEndLeaseEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseTypeEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUsePoolNameEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseIfIndexEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseServerPortVlanIdEx"), ("HPN-ICF-DHCPS-MIB", "hpnicfDHCPSIPInUseAtmpvcEx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfDHCPServerMIBGroup = hpnicfDHCPServerMIBGroup.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DHCPS-MIB", hpnicfDHCPSGlobalTreeTable=hpnicfDHCPSGlobalTreeTable, hpnicfDHCPSPingTimeout=hpnicfDHCPSPingTimeout, hpnicfDHCPSIPInUseEndLeaseEx=hpnicfDHCPSIPInUseEndLeaseEx, hpnicfDHCPSInterfacePoolStaticBindTable=hpnicfDHCPSInterfacePoolStaticBindTable, hpnicfDHCPSInterfacePoolDomainName=hpnicfDHCPSInterfacePoolDomainName, hpnicfDHCPSGlobalPoolClientDNSIPString=hpnicfDHCPSGlobalPoolClientDNSIPString, hpnicfDHCPSPingNum=hpnicfDHCPSPingNum, hpnicfDHCPSInformPktNum=hpnicfDHCPSInformPktNum, hpnicfDHCPSIPInUseVlanIdEx=hpnicfDHCPSIPInUseVlanIdEx, hpnicfDHCPSWriteDataDelay=hpnicfDHCPSWriteDataDelay, hpnicfDHCPSInterfacePoolOptionIPString=hpnicfDHCPSInterfacePoolOptionIPString, hpnicfDHCPSGlobalPoolType=hpnicfDHCPSGlobalPoolType, hpnicfDHCPSGlobalPoolHostMask=hpnicfDHCPSGlobalPoolHostMask, hpnicfDHCPSInterfacePoolIPInUseReset=hpnicfDHCPSInterfacePoolIPInUseReset, hpnicfDHCPSGlobalTreePreSiblingNodeName=hpnicfDHCPSGlobalTreePreSiblingNodeName, hpnicfDHCPSConflictIPTable=hpnicfDHCPSConflictIPTable, hpnicfDHCPSBadPktNum=hpnicfDHCPSBadPktNum, hpnicfDHCPSGlobalPoolClientGatewayIPUndo=hpnicfDHCPSGlobalPoolClientGatewayIPUndo, hpnicfDHCPSInterfacePoolManualBindingNum=hpnicfDHCPSInterfacePoolManualBindingNum, hpnicfDHCPSDiscoverPktNum=hpnicfDHCPSDiscoverPktNum, hpnicfDHCPSForbiddenIPRowStatus=hpnicfDHCPSForbiddenIPRowStatus, hpnicfDHCPSIPInUseAtmpvcEx=hpnicfDHCPSIPInUseAtmpvcEx, hpnicfDHCPSIPInUseEntry=hpnicfDHCPSIPInUseEntry, hpnicfDHCPSInterfacePoolOptionAscii=hpnicfDHCPSInterfacePoolOptionAscii, hpnicfDHCPSGlobalPoolConfigEntry=hpnicfDHCPSGlobalPoolConfigEntry, hpnicfDHCPSGlobalPoolExpiredBindingNum=hpnicfDHCPSGlobalPoolExpiredBindingNum, hpnicfDHCPServerMIBGroups=hpnicfDHCPServerMIBGroups, hpnicfDHCPSGlobalPoolParaUndoFlag=hpnicfDHCPSGlobalPoolParaUndoFlag, hpnicfDHCPSIPInUseHAddrEx=hpnicfDHCPSIPInUseHAddrEx, hpnicfDHCPSInterfacePoolOptionType=hpnicfDHCPSInterfacePoolOptionType, hpnicfDHCPSGlobalPoolClientNbnsIPString=hpnicfDHCPSGlobalPoolClientNbnsIPString, hpnicfDHCPSGlobalPoolLeaseUnlimited=hpnicfDHCPSGlobalPoolLeaseUnlimited, hpnicfDHCPSGlobalPoolLeaseMinute=hpnicfDHCPSGlobalPoolLeaseMinute, hpnicfDHCPSInterfacePoolClientDNSIPUndo=hpnicfDHCPSInterfacePoolClientDNSIPUndo, hpnicfDHCPSGlobalPoolOptionAscii=hpnicfDHCPSGlobalPoolOptionAscii, hpnicfDHCPSIPInUseIP=hpnicfDHCPSIPInUseIP, hpnicfDHCPSGlobalPoolDomainName=hpnicfDHCPSGlobalPoolDomainName, hpnicfDHCPSBootReplyPktNum=hpnicfDHCPSBootReplyPktNum, hpnicfDHCPSInterfacePoolStaticBindIP=hpnicfDHCPSInterfacePoolStaticBindIP, hpnicfDHCPSInterfacePoolClientDNSIPString=hpnicfDHCPSInterfacePoolClientDNSIPString, hpnicfDHCPSGlobalPoolEntry=hpnicfDHCPSGlobalPoolEntry, hpnicfDHCPSGlobalTreeParentNodeName=hpnicfDHCPSGlobalTreeParentNodeName, hpnicfDHCPSIPInUseVlan=hpnicfDHCPSIPInUseVlan, hpnicfDHCPSIPInUseServerPortVlanIdEx=hpnicfDHCPSIPInUseServerPortVlanIdEx, hpnicfDHCPSDetectingServerStatus=hpnicfDHCPSDetectingServerStatus, hpnicfDHCPSGlobalTreeChildNodeName=hpnicfDHCPSGlobalTreeChildNodeName, hpnicfDHCPSGlobalPoolClientNbnsIPUndo=hpnicfDHCPSGlobalPoolClientNbnsIPUndo, HpnicfDhcpSEnabledStatus=HpnicfDhcpSEnabledStatus, hpnicfDHCPSInterfacePoolOptionEntry=hpnicfDHCPSInterfacePoolOptionEntry, hpnicfDHCPSServiceStatus=hpnicfDHCPSServiceStatus, hpnicfDHCPSGlobalPoolOptionRowStatus=hpnicfDHCPSGlobalPoolOptionRowStatus, hpnicfDHCPSRequestPktNum=hpnicfDHCPSRequestPktNum, hpnicfDHCPSReleasePktNum=hpnicfDHCPSReleasePktNum, hpnicfDHCPSBootRequestPktNum=hpnicfDHCPSBootRequestPktNum, hpnicfDHCPServerMibObject=hpnicfDHCPServerMibObject, hpnicfDHCPSOfferPktNum=hpnicfDHCPSOfferPktNum, hpnicfDHCPSInterfacePoolParaTable=hpnicfDHCPSInterfacePoolParaTable, hpnicfDHCPSGlobalPoolHostHAddr=hpnicfDHCPSGlobalPoolHostHAddr, hpnicfDHCPSInterfacePoolAutoBindingNum=hpnicfDHCPSInterfacePoolAutoBindingNum, hpnicfDHCPSIPResetFlag=hpnicfDHCPSIPResetFlag, hpnicfDHCPSInterfacePoolLeaseMinute=hpnicfDHCPSInterfacePoolLeaseMinute, hpnicfDHCPSForbiddenIPStart=hpnicfDHCPSForbiddenIPStart, hpnicfDHCPSAckPktNum=hpnicfDHCPSAckPktNum, hpnicfDHCPSInterfacePoolOptionHexString=hpnicfDHCPSInterfacePoolOptionHexString, hpnicfDHCPSIPInUseAtmpvc=hpnicfDHCPSIPInUseAtmpvc, hpnicfDHCPSGlobalPoolConfigUndoFlag=hpnicfDHCPSGlobalPoolConfigUndoFlag, hpnicfDHCPSIPInUseResetIP=hpnicfDHCPSIPInUseResetIP, hpnicfDHCPSNakPktNum=hpnicfDHCPSNakPktNum, hpnicfDHCPSGlobalPoolOptionIPString=hpnicfDHCPSGlobalPoolOptionIPString, hpnicfDHCPSWriteDataRecover=hpnicfDHCPSWriteDataRecover, hpnicfDHCPServerMIBCompliances=hpnicfDHCPServerMIBCompliances, hpnicfDHCPSGlobalPoolOptionCode=hpnicfDHCPSGlobalPoolOptionCode, hpnicfDHCPSGlobalPoolOptionType=hpnicfDHCPSGlobalPoolOptionType, hpnicfDHCPSGlobalPoolAutoBindingNum=hpnicfDHCPSGlobalPoolAutoBindingNum, hpnicfDHCPSGlobalPoolLeaseDay=hpnicfDHCPSGlobalPoolLeaseDay, hpnicfDHCPSInterfacePoolClientNetbiosType=hpnicfDHCPSInterfacePoolClientNetbiosType, hpnicfDHCPSForbiddenIPTable=hpnicfDHCPSForbiddenIPTable, hpnicfDHCPSInterfacePoolClientNbnsIPString=hpnicfDHCPSInterfacePoolClientNbnsIPString, hpnicfDHCPSGlobalPoolClientDNSIPUndo=hpnicfDHCPSGlobalPoolClientDNSIPUndo, hpnicfDHCPSGlobalPoolNetwork=hpnicfDHCPSGlobalPoolNetwork, hpnicfDHCPSIPInUseType=hpnicfDHCPSIPInUseType, hpnicfDHCPSGlobalPoolConfigTable=hpnicfDHCPSGlobalPoolConfigTable, hpnicfDHCPSConflictIPType=hpnicfDHCPSConflictIPType, hpnicfDHCPServerMIBGroup=hpnicfDHCPServerMIBGroup, PYSNMP_MODULE_ID=hpnicfDHCPServerMib, hpnicfDHCPSGlobalPoolClientGatewayIPString=hpnicfDHCPSGlobalPoolClientGatewayIPString, hpnicfDHCPSIPInUsePoolName=hpnicfDHCPSIPInUsePoolName, hpnicfDHCPSConflictIPResetIP=hpnicfDHCPSConflictIPResetIP, hpnicfDHCPSGlobalPoolLeaseHour=hpnicfDHCPSGlobalPoolLeaseHour, hpnicfDHCPSGlobalPoolManualBindingNum=hpnicfDHCPSGlobalPoolManualBindingNum, hpnicfDHCPSInterfacePoolParaEntry=hpnicfDHCPSInterfacePoolParaEntry, hpnicfDHCPSWriteDataDirection=hpnicfDHCPSWriteDataDirection, hpnicfDHCPSIPInUseTable=hpnicfDHCPSIPInUseTable, hpnicfDHCPSIPInUseExTable=hpnicfDHCPSIPInUseExTable, hpnicfDHCPSInterfacePoolStaticBindRowStatus=hpnicfDHCPSInterfacePoolStaticBindRowStatus, hpnicfDHCPSInterfacePoolClientNbnsIPUndo=hpnicfDHCPSInterfacePoolClientNbnsIPUndo, hpnicfDHCPSGlobalPoolRowStatus=hpnicfDHCPSGlobalPoolRowStatus, hpnicfDHCPSInterfacePoolLeaseUnlimited=hpnicfDHCPSInterfacePoolLeaseUnlimited, hpnicfDHCPSIPInUseIfIndexEx=hpnicfDHCPSIPInUseIfIndexEx, hpnicfDHCPSInterfacePoolLeaseDay=hpnicfDHCPSInterfacePoolLeaseDay, hpnicfDHCPSInterfacePoolStaticBindMac=hpnicfDHCPSInterfacePoolStaticBindMac, hpnicfDHCPSInterfacePoolOptionRowStatus=hpnicfDHCPSInterfacePoolOptionRowStatus, hpnicfDHCPSConflictIPEntry=hpnicfDHCPSConflictIPEntry, hpnicfDHCPSForbiddenIPEnd=hpnicfDHCPSForbiddenIPEnd, hpnicfDHCPSGlobalPoolClientNetbiosType=hpnicfDHCPSGlobalPoolClientNetbiosType, hpnicfDHCPSIPInUseInterface=hpnicfDHCPSIPInUseInterface, hpnicfDHCPSConflictIP=hpnicfDHCPSConflictIP, hpnicfDHCPSForbiddenIPEntry=hpnicfDHCPSForbiddenIPEntry, hpnicfDHCPSStatisticsReset=hpnicfDHCPSStatisticsReset, hpnicfDHCPSIPInUseHAddr=hpnicfDHCPSIPInUseHAddr, hpnicfDHCPSConflictIPDetectTime=hpnicfDHCPSConflictIPDetectTime, hpnicfDHCPSGlobalPoolNumber=hpnicfDHCPSGlobalPoolNumber, hpnicfDHCPSInterfacePoolLeaseHour=hpnicfDHCPSInterfacePoolLeaseHour, hpnicfDHCPSInterfacePoolExpiredBindingNum=hpnicfDHCPSInterfacePoolExpiredBindingNum, hpnicfDHCPSGlobalPoolOptionTable=hpnicfDHCPSGlobalPoolOptionTable, hpnicfDHCPSWriteDataStatus=hpnicfDHCPSWriteDataStatus, hpnicfDHCPSIPInUseTypeEx=hpnicfDHCPSIPInUseTypeEx, hpnicfDHCPSInterfacePoolOptionTable=hpnicfDHCPSInterfacePoolOptionTable, hpnicfDHCPSGlobalPoolNetworkMask=hpnicfDHCPSGlobalPoolNetworkMask, hpnicfDHCPSInterfacePoolNumber=hpnicfDHCPSInterfacePoolNumber, hpnicfDHCPSGlobalPoolOptionHexString=hpnicfDHCPSGlobalPoolOptionHexString, hpnicfDHCPSGlobalPoolHostIPAddr=hpnicfDHCPSGlobalPoolHostIPAddr, hpnicfDHCPSGlobalPoolTable=hpnicfDHCPSGlobalPoolTable, hpnicfDHCPSGlobalPoolParaEntry=hpnicfDHCPSGlobalPoolParaEntry, hpnicfDHCPSGlobalPoolIPInUseReset=hpnicfDHCPSGlobalPoolIPInUseReset, hpnicfDHCPServerMIBConformance=hpnicfDHCPServerMIBConformance, hpnicfDHCPServerMib=hpnicfDHCPServerMib, hpnicfDHCPSInterfacePoolParaUndoFlag=hpnicfDHCPSInterfacePoolParaUndoFlag, hpnicfDHCPSDeclinePktNum=hpnicfDHCPSDeclinePktNum, hpnicfDHCPSGlobalTreeEntry=hpnicfDHCPSGlobalTreeEntry, hpnicfDHCPSGlobalPoolOptionEntry=hpnicfDHCPSGlobalPoolOptionEntry, hpnicfDHCPSGlobalTreeSiblingNodeName=hpnicfDHCPSGlobalTreeSiblingNodeName, hpnicfDHCPSGlobalPoolParaTable=hpnicfDHCPSGlobalPoolParaTable, hpnicfDHCPSGlobalPoolName=hpnicfDHCPSGlobalPoolName, hpnicfDHCPSIPInUseEndLease=hpnicfDHCPSIPInUseEndLease, hpnicfDHCPSIPInUseExEntry=hpnicfDHCPSIPInUseExEntry, hpnicfDHCPSInterfacePoolOptionCode=hpnicfDHCPSInterfacePoolOptionCode, hpnicfDHCPSIPInUsePoolNameEx=hpnicfDHCPSIPInUsePoolNameEx, hpnicfDHCPSInterfacePoolStaticBindEntry=hpnicfDHCPSInterfacePoolStaticBindEntry, hpnicfDHCPSIPInUseIPEx=hpnicfDHCPSIPInUseIPEx)
