#
# PySNMP MIB module CISCO-CATOS-ACL-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CATOS-ACL-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
QosLayer2Cos, Percent, QosInterfaceQueueType, Dscp = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "QosLayer2Cos", "Percent", "QosInterfaceQueueType", "Dscp")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
cseFlowDataEntry, = mibBuilder.importSymbols("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataEntry")
CiscoIpProtocol, CiscoPortList = mibBuilder.importSymbols("CISCO-TC", "CiscoIpProtocol", "CiscoPortList")
VlanIndex, = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, ModuleIdentity, Bits, Gauge32, Integer32, MibIdentifier, TimeTicks, ObjectIdentity, Counter32, Counter64, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Bits", "Gauge32", "Integer32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Counter32", "Counter64", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TruthValue, DisplayString, MacAddress, DateAndTime, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "DateAndTime", "RowStatus", "TextualConvention")
ciscoCatOSAclQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 179))
ciscoCatOSAclQosMIB.setRevisions(('2007-11-02 00:00', '2006-07-15 00:00', '2005-07-26 00:00', '2004-05-26 00:00', '2003-11-26 00:00', '2003-10-28 00:00', '2003-09-30 00:00', '2003-07-01 00:00', '2003-03-05 00:00', '2002-10-10 00:00', '2002-01-17 00:00', '2001-10-18 00:00', '2001-02-15 00:00', '2001-02-07 00:00',))
if mibBuilder.loadTexts: ciscoCatOSAclQosMIB.setLastUpdated('200711020000Z')
if mibBuilder.loadTexts: ciscoCatOSAclQosMIB.setOrganization('Cisco Systems Inc. ')
class CaqAclName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '31a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class CaqPolicerName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '31a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class CaqPolicerNameOrEmpty(TextualConvention, OctetString):
    status = 'current'
    displayHint = '31a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class CaqAdjacencyName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '18a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 18)

class CaqDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingress", 1), ("egress", 2))

class CaqIpPrecedence(TextualConvention, Unsigned32):
    reference = 'RFC791 INTERNET PROTOCOL, Chapter 3.1'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class CaqQueueNumber(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class CaqThresholdNumber(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class CaqHitCountAclType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ipSecurity", 1), ("ipxSecurity", 2), ("macSecurity", 3))

ciscoCatOSAclQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1))
caqGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1))
caqInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2))
caqAclObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3))
caqQosStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4))
caqExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5))
caqPbfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6))
caqLoggingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7))
caqArpInspObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8))
caqAclHitCountObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9))
caqDownloadAclObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10))
caqCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 1), )
if mibBuilder.loadTexts: caqCosToDscpTable.setStatus('current')
caqCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqCosToDscpCos"))
if mibBuilder.loadTexts: caqCosToDscpEntry.setStatus('current')
caqCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 1, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: caqCosToDscpCos.setStatus('current')
caqCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 1, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqCosToDscpDscp.setStatus('current')
caqIpPrecToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 2), )
if mibBuilder.loadTexts: caqIpPrecToDscpTable.setStatus('current')
caqIpPrecToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpPrecToDscpIpPrec"))
if mibBuilder.loadTexts: caqIpPrecToDscpEntry.setStatus('current')
caqIpPrecToDscpIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 2, 1, 1), CaqIpPrecedence())
if mibBuilder.loadTexts: caqIpPrecToDscpIpPrec.setStatus('current')
caqIpPrecToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 2, 1, 2), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIpPrecToDscpDscp.setStatus('current')
caqDscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 3), )
if mibBuilder.loadTexts: caqDscpMappingTable.setStatus('current')
caqDscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqDscpMappingDscp"))
if mibBuilder.loadTexts: caqDscpMappingEntry.setStatus('current')
caqDscpMappingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 3, 1, 1), Dscp())
if mibBuilder.loadTexts: caqDscpMappingDscp.setStatus('current')
caqDscpMappingCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 3, 1, 2), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqDscpMappingCos.setStatus('current')
caqDscpMappingNRPolicedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 3, 1, 3), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqDscpMappingNRPolicedDscp.setStatus('current')
caqDscpMappingERPolicedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 3, 1, 4), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqDscpMappingERPolicedDscp.setStatus('current')
caqCosAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 4), )
if mibBuilder.loadTexts: caqCosAssignmentTable.setStatus('current')
caqCosAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqCosAssignQueueType"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqCosAssignCos"))
if mibBuilder.loadTexts: caqCosAssignmentEntry.setStatus('current')
caqCosAssignQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 4, 1, 1), QosInterfaceQueueType())
if mibBuilder.loadTexts: caqCosAssignQueueType.setStatus('current')
caqCosAssignCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 4, 1, 2), QosLayer2Cos())
if mibBuilder.loadTexts: caqCosAssignCos.setStatus('current')
caqCosAssignQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 4, 1, 3), CaqQueueNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqCosAssignQueueNumber.setStatus('current')
caqCosAssignThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 4, 1, 4), CaqThresholdNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqCosAssignThresholdNumber.setStatus('current')
caqQueueThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5), )
if mibBuilder.loadTexts: caqQueueThresholdTable.setStatus('current')
caqQueueThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshQueueType"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshQueueIndex"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshThresholdIndex"))
if mibBuilder.loadTexts: caqQueueThresholdEntry.setStatus('current')
caqQueueThreshQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 1), QosInterfaceQueueType())
if mibBuilder.loadTexts: caqQueueThreshQueueType.setStatus('current')
caqQueueThreshQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 2), CaqQueueNumber())
if mibBuilder.loadTexts: caqQueueThreshQueueIndex.setStatus('current')
caqQueueThreshThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 3), CaqThresholdNumber())
if mibBuilder.loadTexts: caqQueueThreshThresholdIndex.setStatus('current')
caqQueueThreshDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tailDrop", 1), ("wred", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueueThreshDropAlgorithm.setStatus('current')
caqQueueThreshDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQueueThreshDropThreshold.setStatus('current')
caqQueueThreshMinWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 6), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQueueThreshMinWredThreshold.setStatus('current')
caqQueueThreshMaxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQueueThreshMaxWredThreshold.setStatus('current')
caqQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6), )
if mibBuilder.loadTexts: caqQueueTable.setStatus('current')
caqQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqQueueDirection"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqQueueType"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqQueueNumber"))
if mibBuilder.loadTexts: caqQueueEntry.setStatus('current')
caqQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6, 1, 1), CaqDirection())
if mibBuilder.loadTexts: caqQueueDirection.setStatus('current')
caqQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6, 1, 2), QosInterfaceQueueType())
if mibBuilder.loadTexts: caqQueueType.setStatus('current')
caqQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6, 1, 3), CaqQueueNumber())
if mibBuilder.loadTexts: caqQueueNumber.setStatus('current')
caqQueueWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQueueWrrWeight.setStatus('current')
caqQueueBufferSizeRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQueueBufferSizeRatio.setStatus('current')
caqDscpMutationMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 7), )
if mibBuilder.loadTexts: caqDscpMutationMapTable.setStatus('current')
caqDscpMutationMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqDscpMutationTableId"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqDscpMutationOldDscp"))
if mibBuilder.loadTexts: caqDscpMutationMapEntry.setStatus('current')
caqDscpMutationTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: caqDscpMutationTableId.setStatus('current')
caqDscpMutationOldDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 7, 1, 2), Dscp())
if mibBuilder.loadTexts: caqDscpMutationOldDscp.setStatus('current')
caqDscpMutationNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 7, 1, 3), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqDscpMutationNewDscp.setStatus('current')
caqVlanMutationIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 8), )
if mibBuilder.loadTexts: caqVlanMutationIdMapTable.setStatus('current')
caqVlanMutationIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqVlanMutationIndex"))
if mibBuilder.loadTexts: caqVlanMutationIdMapEntry.setStatus('current')
caqVlanMutationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 8, 1, 1), VlanIndex())
if mibBuilder.loadTexts: caqVlanMutationIndex.setStatus('current')
caqVlanMutationTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVlanMutationTableId.setStatus('current')
caqDscpRewriteEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqDscpRewriteEnabled.setStatus('current')
caqMacPktClassifyVlansLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqMacPktClassifyVlansLow.setStatus('current')
caqMacPktClassifyVlansHigh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqMacPktClassifyVlansHigh.setStatus('current')
caqIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1), )
if mibBuilder.loadTexts: caqIfConfigTable.setStatus('current')
caqIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caqIfConfigEntry.setStatus('current')
caqIfCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1, 1, 1), QosLayer2Cos()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfCos.setStatus('current')
caqIfTrustStateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCoS", 2), ("trustIpPrec", 3), ("trustDscp", 4))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfTrustStateConfig.setStatus('current')
caqIfAclBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("port", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfAclBase.setStatus('current')
caqIfTrustDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1, 1, 4), Bits().clone(namedValues=NamedValues(("trustCiscoIPPhone", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfTrustDevice.setStatus('current')
caqIfOperTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrusted", 1), ("trustCoS", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfOperTrustState.setStatus('current')
caqClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 2), )
if mibBuilder.loadTexts: caqClassifierTable.setStatus('current')
caqClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqClassifierAclType"), (1, "CISCO-CATOS-ACL-QOS-MIB", "caqClassifierAclName"))
if mibBuilder.loadTexts: caqClassifierEntry.setStatus('current')
caqClassifierAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ipQos", 1), ("ipxQos", 2), ("macQos", 3), ("ipSecurity", 4), ("ipxSecurity", 5), ("macSecurity", 6))))
if mibBuilder.loadTexts: caqClassifierAclType.setStatus('current')
caqClassifierAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 2, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqClassifierAclName.setStatus('current')
caqClassifierMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqClassifierMapStatus.setStatus('current')
caqClassifierMapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("ingress", 0), ("egress", 1))).clone(namedValues=NamedValues(("ingress", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqClassifierMapDirection.setStatus('current')
caqIfSecurityAclConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 3), )
if mibBuilder.loadTexts: caqIfSecurityAclConfigTable.setStatus('current')
caqIfSecurityAclConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caqIfSecurityAclConfigEntry.setStatus('current')
caqIfSecurityAclBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2), ("merge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfSecurityAclBase.setStatus('current')
caqIpOperClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 4), )
if mibBuilder.loadTexts: caqIpOperClassifierTable.setStatus('current')
caqIpOperClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpOperAclFeature"))
if mibBuilder.loadTexts: caqIpOperClassifierEntry.setStatus('current')
caqIpOperAclFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingressIpQos", 1), ("egressIpQos", 2), ("ipSecurity", 3))))
if mibBuilder.loadTexts: caqIpOperAclFeature.setStatus('current')
caqIpOperAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpOperAclName.setStatus('current')
caqIpOperAclMapSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 4, 1, 3), Bits().clone(namedValues=NamedValues(("configured", 0), ("dot1x", 1), ("macAuth", 2), ("webAuth", 3), ("eou", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpOperAclMapSource.setStatus('current')
caqDownloadClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 5), )
if mibBuilder.loadTexts: caqDownloadClassifierTable.setStatus('current')
caqDownloadClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqDownloadAclFeature"))
if mibBuilder.loadTexts: caqDownloadClassifierEntry.setStatus('current')
caqDownloadAclFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingressIpQos", 1), ("egressIpQos", 2), ("ipSecurity", 3))))
if mibBuilder.loadTexts: caqDownloadAclFeature.setStatus('current')
caqDownloadClassifierAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 5, 1, 2), CaqAclName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqDownloadClassifierAclName.setStatus('current')
caqDownloadMapSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1x", 1), ("macAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqDownloadMapSource.setStatus('current')
caqDownloadAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pacl", 1), ("vacl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqDownloadAclType.setStatus('current')
caqAclCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 1), Bits().clone(namedValues=NamedValues(("ipQos", 0), ("ipxQos", 1), ("macQos", 2), ("ipSecurity", 3), ("ipxSecurity", 4), ("macSecurity", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAclCapabilities.setStatus('current')
caqIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2), )
if mibBuilder.loadTexts: caqIpAceTable.setStatus('current')
caqIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpAceFeature"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpAclName"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpAceIndex"))
if mibBuilder.loadTexts: caqIpAceEntry.setStatus('current')
caqIpAceFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qos", 1), ("security", 2))))
if mibBuilder.loadTexts: caqIpAceFeature.setStatus('current')
caqIpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqIpAclName.setStatus('current')
caqIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqIpAceIndex.setStatus('current')
caqIpAceMatchedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceMatchedAction.setStatus('current')
caqIpAceProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceProtocolType.setStatus('current')
caqIpAceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpAceAddrType.setStatus('current')
caqIpAceSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSrcIp.setStatus('current')
caqIpAceSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSrcIpMask.setStatus('current')
caqIpAceSrcPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noOperator", 1), ("lt", 2), ("gt", 3), ("eq", 4), ("neq", 5), ("range", 6))).clone('noOperator')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSrcPortOp.setStatus('current')
caqIpAceSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSrcPort.setStatus('current')
caqIpAceSrcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSrcPortRange.setStatus('current')
caqIpAceDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 12), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDestIp.setStatus('current')
caqIpAceDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 13), InetAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDestIpMask.setStatus('current')
caqIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noOperator", 1), ("lt", 2), ("gt", 3), ("eq", 4), ("neq", 5), ("range", 6))).clone('noOperator')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDestPortOp.setStatus('current')
caqIpAceDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDestPort.setStatus('current')
caqIpAceDestPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDestPortRange.setStatus('current')
caqIpAceTosMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("matchDscp", 2), ("matchIpPrec", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceTosMatchCriteria.setStatus('current')
caqIpAceIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 18), CaqIpPrecedence()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceIpPrec.setStatus('current')
caqIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 19), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDscp.setStatus('current')
caqIpAceProtocolMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("matchIgmpType", 2), ("matchIcmpType", 3), ("matchIcmpTypeAndCode", 4), ("matchEstablished", 5), ("matchSecurityId", 6), ("matchEapoudp", 7), ("matchUrlRedirect", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceProtocolMatchCriteria.setStatus('current')
caqIpAceIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceIcmpType.setStatus('current')
caqIpAceIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceIcmpCode.setStatus('current')
caqIpAceIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceIgmpType.setStatus('current')
caqIpAceOrderPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpAceOrderPosition.setStatus('current')
caqIpAceBeforePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceBeforePosition.setStatus('current')
caqIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceStatus.setStatus('current')
caqIpAceSecurityId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 233), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSecurityId.setStatus('current')
caqIpAceSrcGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 28), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceSrcGroup.setStatus('current')
caqIpAceDestGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 29), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpAceDestGroup.setStatus('current')
caqIpAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("systemGenerated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpAceType.setStatus('current')
caqIpxAceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3), )
if mibBuilder.loadTexts: caqIpxAceTable.setStatus('current')
caqIpxAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceFeature"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpxAclName"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceIndex"))
if mibBuilder.loadTexts: caqIpxAceEntry.setStatus('current')
caqIpxAceFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qos", 1), ("security", 2))))
if mibBuilder.loadTexts: caqIpxAceFeature.setStatus('current')
caqIpxAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqIpxAclName.setStatus('current')
caqIpxAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqIpxAceIndex.setStatus('current')
caqIpxAceMatchedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceMatchedAction.setStatus('current')
caqIpxAceSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceSrcNet.setStatus('current')
caqIpxAceDestMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 6), Bits().clone(namedValues=NamedValues(("matchProtocol", 0), ("matchIpxDestNet", 1), ("matchIpxDestNode", 2), ("matchIpxDestNetMask", 3), ("matchIpxDestNodeMask", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceDestMatchCriteria.setStatus('current')
caqIpxAceProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceProtocolType.setStatus('current')
caqIpxAceDestNet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceDestNet.setStatus('current')
caqIpxAceDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceDestNode.setStatus('current')
caqIpxAceDestNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceDestNetMask.setStatus('current')
caqIpxAceDestNodeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceDestNodeMask.setStatus('current')
caqIpxAceOrderPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpxAceOrderPosition.setStatus('current')
caqIpxAceBeforePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceBeforePosition.setStatus('current')
caqIpxAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 3, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqIpxAceStatus.setStatus('current')
caqMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4), )
if mibBuilder.loadTexts: caqMacAceTable.setStatus('current')
caqMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqMacAceFeature"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqMacAclName"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqMacAceIndex"))
if mibBuilder.loadTexts: caqMacAceEntry.setStatus('current')
caqMacAceFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qos", 1), ("security", 2))))
if mibBuilder.loadTexts: caqMacAceFeature.setStatus('current')
caqMacAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqMacAclName.setStatus('current')
caqMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqMacAceIndex.setStatus('current')
caqMacAceMatchedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceMatchedAction.setStatus('current')
caqMacAceSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceSrcMac.setStatus('current')
caqMacAceSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceSrcMacMask.setStatus('current')
caqMacAceDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceDestMac.setStatus('current')
caqMacAceDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceDestMacMask.setStatus('current')
caqMacAceEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceEthertype.setStatus('current')
caqMacAceOrderPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqMacAceOrderPosition.setStatus('current')
caqMacAceBeforePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceBeforePosition.setStatus('current')
caqMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceStatus.setStatus('current')
caqMacAceMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 13), Bits().clone(namedValues=NamedValues(("matchCos", 0), ("matchVlan", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceMatchCriteria.setStatus('current')
caqMacAceCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 14), QosLayer2Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceCos.setStatus('current')
caqMacAceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 4, 1, 15), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAceVlan.setStatus('current')
caqFlowPolicingCpb = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 5), Bits().clone(namedValues=NamedValues(("microFlow", 0), ("aggregate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicingCpb.setStatus('current')
caqQosActionSelectTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6), )
if mibBuilder.loadTexts: caqQosActionSelectTable.setStatus('current')
caqQosActionSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqQosActionSelectIndex"))
if mibBuilder.loadTexts: caqQosActionSelectEntry.setStatus('current')
caqQosActionSelectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqQosActionSelectIndex.setStatus('current')
caqQosActionSelectTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTrust", 1), ("trustCos", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqQosActionSelectTrust.setStatus('current')
caqQosActionSelectDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1, 4), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqQosActionSelectDscp.setStatus('current')
caqQosActionSelectMicroflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1, 5), CaqPolicerNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqQosActionSelectMicroflow.setStatus('current')
caqQosActionSelectAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1, 6), CaqPolicerNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqQosActionSelectAggregate.setStatus('current')
caqQosActionSelectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqQosActionSelectStatus.setStatus('current')
caqFlowPolicerExcessRateSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicerExcessRateSupport.setStatus('current')
caqFlowPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8), )
if mibBuilder.loadTexts: caqFlowPolicerTable.setStatus('current')
caqFlowPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1), ).setIndexNames((1, "CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerName"))
if mibBuilder.loadTexts: caqFlowPolicerEntry.setStatus('current')
caqFlowPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 1), CaqPolicerName())
if mibBuilder.loadTexts: caqFlowPolicerName.setStatus('current')
caqFlowPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("microflow", 1), ("aggregate", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerType.setStatus('current')
caqFlowPolicerNormalRateRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(32, 8000000), ))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerNormalRateRequest.setStatus('current')
caqFlowPolicerNormalRateGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 4), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicerNormalRateGrant.setStatus('current')
caqFlowPolicerNormalRateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("policedDscp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerNormalRateAction.setStatus('current')
caqFlowPolicerExcessRateRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(32, 8000000), ))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerExcessRateRequest.setStatus('current')
caqFlowPolicerExcessRateGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 7), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicerExcessRateGrant.setStatus('current')
caqFlowPolicerExcessRateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("policedDscp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerExcessRateAction.setStatus('current')
caqFlowPolicerBurstSizeRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000))).setUnits('kilo-bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerBurstSizeRequest.setStatus('current')
caqFlowPolicerBurstSizeGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 10), Integer32()).setUnits('kilo-bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicerBurstSizeGrant.setStatus('current')
caqFlowPolicerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerStatus.setStatus('current')
caqFlowPolicerExcessBurstRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000))).setUnits('kilo-bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqFlowPolicerExcessBurstRequest.setStatus('current')
caqFlowPolicerExcessBurstGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 8, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000))).setUnits('kilo-bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicerExcessBurstGrant.setStatus('current')
caqSecurityActionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9), )
if mibBuilder.loadTexts: caqSecurityActionTable.setStatus('current')
caqSecurityActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqSecurityActionIndex"))
if mibBuilder.loadTexts: caqSecurityActionEntry.setStatus('current')
caqSecurityActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqSecurityActionIndex.setStatus('current')
caqSecurityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("redirect", 3), ("redirectWithAdj", 4), ("denyWithLog", 5), ("denyArpInspection", 6), ("denyArpInspWithLog", 7), ("permitArpInspection", 8), ("include", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityAction.setStatus('current')
caqSecurityRedirectPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityRedirectPortList.setStatus('deprecated')
caqSecurityCapture = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityCapture.setStatus('current')
caqSecurityActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityActionStatus.setStatus('current')
caqSecurityAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityAdjIndex.setStatus('current')
caqSecurityArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 7), MacAddress().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityArpMacAddress.setStatus('current')
caqSecurityRedirect2kPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityRedirect2kPortList.setStatus('current')
caqSecurityDownloadedAceFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("dot1x", 2), ("macAuth", 3), ("webAuth", 4), ("eou", 5), ("ipPhone", 6))).clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqSecurityDownloadedAceFeature.setStatus('current')
caqSecurityAclCaptureIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 10), )
if mibBuilder.loadTexts: caqSecurityAclCaptureIfTable.setStatus('current')
caqSecurityAclCaptureIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caqSecurityAclCaptureIfEntry.setStatus('current')
caqSecurityAclCaptureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 10, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqSecurityAclCaptureEnable.setStatus('current')
caqFlowPolicerExcessBurstSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowPolicerExcessBurstSupport.setStatus('current')
caqSecurityRateLimitFeatures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 12), Bits().clone(namedValues=NamedValues(("arpInspection", 0), ("dot1xDHCP", 1), ("dhcpSnooping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqSecurityRateLimitFeatures.setStatus('current')
caqSecurityAclRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 13), Unsigned32()).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqSecurityAclRateLimit.setStatus('current')
caqQosDefaultActionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14), )
if mibBuilder.loadTexts: caqQosDefaultActionTable.setStatus('current')
caqQosDefaultActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqQosTrafficDirection"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqQosTrafficType"))
if mibBuilder.loadTexts: caqQosDefaultActionEntry.setStatus('current')
caqQosTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1, 1), CaqDirection())
if mibBuilder.loadTexts: caqQosTrafficDirection.setStatus('current')
caqQosTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2), ("ipx", 3))))
if mibBuilder.loadTexts: caqQosTrafficType.setStatus('current')
caqQosDefaultTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTrust", 1), ("trustCos", 2), ("trustIpPrec", 3), ("trustDscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQosDefaultTrustState.setStatus('current')
caqQosDefaultDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1, 4), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQosDefaultDscp.setStatus('current')
caqQosDefaultMicroflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1, 5), CaqPolicerNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQosDefaultMicroflow.setStatus('current')
caqQosDefaultAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 14, 1, 6), CaqPolicerNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqQosDefaultAggregate.setStatus('current')
caqAclFeatureCpb = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 3, 15), Bits().clone(namedValues=NamedValues(("vlanAclHitCount", 0), ("portAclHitCount", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAclFeatureCpb.setStatus('current')
caqL3PacketsDropByPolicer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqL3PacketsDropByPolicer.setStatus('current')
caqTosChangedIpPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqTosChangedIpPackets.setStatus('current')
caqCosChangedIpPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqCosChangedIpPackets.setStatus('current')
caqCosChangedNonIpPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqCosChangedNonIpPackets.setStatus('current')
caqPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5), )
if mibBuilder.loadTexts: caqPortStatsTable.setStatus('current')
caqPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqPortStatsDirection"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqPortStatsQueueNumber"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqPortStatsThresholdNumber"))
if mibBuilder.loadTexts: caqPortStatsEntry.setStatus('current')
caqPortStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1, 1), CaqDirection())
if mibBuilder.loadTexts: caqPortStatsDirection.setStatus('current')
caqPortStatsQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1, 2), CaqQueueNumber())
if mibBuilder.loadTexts: caqPortStatsQueueNumber.setStatus('current')
caqPortStatsThresholdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1, 3), CaqThresholdNumber())
if mibBuilder.loadTexts: caqPortStatsThresholdNumber.setStatus('current')
caqPortStatsDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqPortStatsDropPkts.setStatus('current')
caqPortStatsDropPktsAveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1, 5), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqPortStatsDropPktsAveRate.setStatus('current')
caqPortStatsDropPktsPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 5, 1, 6), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqPortStatsDropPktsPeakRate.setStatus('current')
caqFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 6), )
if mibBuilder.loadTexts: caqFlowStatsTable.setStatus('current')
caqFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 6, 1), )
cseFlowDataEntry.registerAugmentions(("CISCO-CATOS-ACL-QOS-MIB", "caqFlowStatsEntry"))
caqFlowStatsEntry.setIndexNames(*cseFlowDataEntry.getIndexNames())
if mibBuilder.loadTexts: caqFlowStatsEntry.setStatus('current')
caqFlowStatsOutOfProfilePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqFlowStatsOutOfProfilePackets.setStatus('current')
caqAggPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7), )
if mibBuilder.loadTexts: caqAggPolicerStatsTable.setStatus('current')
caqAggPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1), ).setIndexNames((1, "CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerName"))
if mibBuilder.loadTexts: caqAggPolicerStatsEntry.setStatus('current')
caqAggPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 1), CaqPolicerName())
if mibBuilder.loadTexts: caqAggPolicerName.setStatus('current')
caqAggPolicerPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerPackets.setStatus('current')
caqAggPolicerNRExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerNRExceedPackets.setStatus('current')
caqAggPolicerERExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerERExceedPackets.setStatus('current')
caqAggPolicerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerOctets.setStatus('current')
caqAggPolicerNRExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerNRExceedOctets.setStatus('current')
caqAggPolicerERExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerERExceedOctets.setStatus('current')
caqAggPolicerOctetsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 8), CounterBasedGauge64()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerOctetsRate.setStatus('current')
caqAggPolicerNRExceedOctetsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 9), CounterBasedGauge64()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerNRExceedOctetsRate.setStatus('current')
caqAggPolicerERExceedOctetsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 10), CounterBasedGauge64()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerERExceedOctetsRate.setStatus('current')
caqAggPolicerOctetsPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 11), CounterBasedGauge64()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerOctetsPeakRate.setStatus('current')
caqAggPolicerPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 12), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerPacketsRate.setStatus('current')
caqAggPolicerNRExceedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 13), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerNRExceedPacketsRate.setStatus('current')
caqAggPolicerERExceedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 14), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerERExceedPacketsRate.setStatus('current')
caqAggPolicerPacketsPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 7, 1, 15), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAggPolicerPacketsPeakRate.setStatus('current')
caqL3PacketsDropByPolicerAveRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 8), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqL3PacketsDropByPolicerAveRate.setStatus('current')
caqL3PacketsDropByPolicerPeakRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 9), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqL3PacketsDropByPolicerPeakRate.setStatus('current')
caqTosChangedIpPacketsAveRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 10), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqTosChangedIpPacketsAveRate.setStatus('current')
caqTosChangedIpPacketsPeakRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 11), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqTosChangedIpPacketsPeakRate.setStatus('current')
caqCosChangedIpPacketsAveRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 12), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqCosChangedIpPacketsAveRate.setStatus('current')
caqCosChangedIpPacketsPeakRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 13), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqCosChangedIpPacketsPeakRate.setStatus('current')
caqCosChangedNonIpPacketsAveRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 14), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqCosChangedNonIpPacketsAveRate.setStatus('current')
caqCosChangedNonIpPacketPeakRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 4, 15), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqCosChangedNonIpPacketPeakRate.setStatus('current')
caqBridgedPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 1), )
if mibBuilder.loadTexts: caqBridgedPolicerTable.setStatus('current')
caqBridgedPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqBridgedFlowVlanIndex"))
if mibBuilder.loadTexts: caqBridgedPolicerEntry.setStatus('current')
caqBridgedFlowVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: caqBridgedFlowVlanIndex.setStatus('current')
caqBridgedFlowEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqBridgedFlowEnabled.setStatus('current')
caqCosMacVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2), )
if mibBuilder.loadTexts: caqCosMacVlanRouterTable.setStatus('current')
caqCosMacVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqCosMacAddress"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqCosVlanNumber"))
if mibBuilder.loadTexts: caqCosMacVlanRouterEntry.setStatus('current')
caqCosMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: caqCosMacAddress.setStatus('current')
caqCosVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2, 1, 2), VlanIndex())
if mibBuilder.loadTexts: caqCosVlanNumber.setStatus('current')
caqMacAddressCpb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2, 1, 3), Bits().clone(namedValues=NamedValues(("routerMac", 0), ("cosVlanMac", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqMacAddressCpb.setStatus('current')
caqCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2, 1, 4), QosLayer2Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqCosValue.setStatus('current')
caqCosMacVlanRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 5, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqCosMacVlanRouterStatus.setStatus('current')
caqPbfStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAddrOk", 1), ("macAddrNotSet", 2), ("msfcPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqPbfStatus.setStatus('current')
caqPbfMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqPbfMacAddress.setStatus('current')
caqAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3), )
if mibBuilder.loadTexts: caqAdjacencyTable.setStatus('current')
caqAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqAdjIndex"))
if mibBuilder.loadTexts: caqAdjacencyEntry.setStatus('current')
caqAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqAdjIndex.setStatus('current')
caqAdjDstVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqAdjDstVlanNumber.setStatus('current')
caqAdjDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqAdjDstMacAddress.setStatus('current')
caqAdjSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqAdjSrcMacAddress.setStatus('current')
caqAdjName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 5), CaqAdjacencyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqAdjName.setStatus('current')
caqAdjMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(576, 18190)).clone(9216)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqAdjMtu.setStatus('current')
caqAdjHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAdjHitCount.setStatus('current')
caqAdjStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 6, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caqAdjStatus.setStatus('current')
caqAclLogMaxFlow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclLogMaxFlow.setStatus('current')
caqAclSecurityLoggingRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 5000))).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclSecurityLoggingRateLimit.setStatus('current')
caqAclRouterAclRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclRouterAclRateLimit.setStatus('current')
caqIpFlowLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4), )
if mibBuilder.loadTexts: caqIpFlowLoggingTable.setStatus('current')
caqIpFlowLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowLoggingIndex"))
if mibBuilder.loadTexts: caqIpFlowLoggingEntry.setStatus('current')
caqIpFlowLoggingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqIpFlowLoggingIndex.setStatus('current')
caqIpFlowVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowVlan.setStatus('current')
caqIpFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowIfIndex.setStatus('current')
caqIpFlowProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowProtocolType.setStatus('current')
caqIpFlowAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowAddrType.setStatus('current')
caqIpFlowSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowSrcIp.setStatus('current')
caqIpFlowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowSrcPort.setStatus('current')
caqIpFlowDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowDestIp.setStatus('current')
caqIpFlowDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowDestPort.setStatus('current')
caqIpFlowIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowIcmpType.setStatus('current')
caqIpFlowIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowIcmpCode.setStatus('current')
caqIpFlowIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowIgmpType.setStatus('current')
caqIpFlowArpOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("request", 2), ("reply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowArpOpcode.setStatus('current')
caqIpFlowArpSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowArpSrcMacAddr.setStatus('current')
caqIpFlowArpHeaderSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowArpHeaderSrcMacAddr.setStatus('current')
caqIpFlowPacketsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowPacketsCount.setStatus('current')
caqIpFlowLoggingTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowLoggingTTL.setStatus('current')
caqIpFlowArpLoggingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("dai", 2), ("acl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowArpLoggingSource.setStatus('current')
caqIpFlowArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowArpAclName.setStatus('current')
caqIpFlowArpAceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 7, 4, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpFlowArpAceNumber.setStatus('current')
caqAclArpInspMatchMac = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("drop", 3), ("dropAndLog", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclArpInspMatchMac.setStatus('current')
caqAclArpInspAddrValidation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("drop", 3), ("dropAndLog", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclArpInspAddrValidation.setStatus('current')
caqArpInspGlobalForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqArpInspGlobalForwardedPkts.setStatus('current')
caqArpInspGlobalDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqArpInspGlobalDroppedPkts.setStatus('current')
caqRARPForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqRARPForwardedPkts.setStatus('current')
caqMatchedMacFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqMatchedMacFailedPkts.setStatus('current')
caqAddrValidationFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAddrValidationFailedPkts.setStatus('current')
caqArpInspIpDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqArpInspIpDroppedPkts.setStatus('current')
caqArpInspStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 10), )
if mibBuilder.loadTexts: caqArpInspStatsTable.setStatus('current')
caqArpInspStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 10, 1), ).setIndexNames((1, "CISCO-CATOS-ACL-QOS-MIB", "caqArpInspAclName"))
if mibBuilder.loadTexts: caqArpInspStatsEntry.setStatus('current')
caqArpInspAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 10, 1, 1), CaqAclName())
if mibBuilder.loadTexts: caqArpInspAclName.setStatus('current')
caqArpInspForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 10, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqArpInspForwardedPackets.setStatus('current')
caqArpInspDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 10, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caqArpInspDroppedPackets.setStatus('current')
caqIfArpInspConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 11), )
if mibBuilder.loadTexts: caqIfArpInspConfigTable.setStatus('current')
caqIfArpInspConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caqIfArpInspConfigEntry.setStatus('current')
caqIfArpInspDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfArpInspDropThreshold.setStatus('current')
caqIfArpInspShutdownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 8, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqIfArpInspShutdownThreshold.setStatus('current')
caqAclHitCountVlansLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclHitCountVlansLow.setStatus('current')
caqAclHitCountVlansHigh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclHitCountVlansHigh.setStatus('current')
caqAclHitCountPortList = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 3), CiscoPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclHitCountPortList.setStatus('current')
caqAclHitCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 4), )
if mibBuilder.loadTexts: caqAclHitCountTable.setStatus('current')
caqAclHitCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 4, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountAclType"), (1, "CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountAclName"))
if mibBuilder.loadTexts: caqAclHitCountEntry.setStatus('current')
caqAclHitCountAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 4, 1, 1), CaqHitCountAclType())
if mibBuilder.loadTexts: caqAclHitCountAclType.setStatus('current')
caqAclHitCountAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 4, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqAclHitCountAclName.setStatus('current')
caqAclHitCountEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAclHitCountEnable.setStatus('current')
caqAceHitCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5), )
if mibBuilder.loadTexts: caqAceHitCountTable.setStatus('current')
caqAceHitCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqAceHitCountAclType"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqAceHitCountAclName"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqAceHitCountAceIndex"))
if mibBuilder.loadTexts: caqAceHitCountEntry.setStatus('current')
caqAceHitCountAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1, 1), CaqHitCountAclType())
if mibBuilder.loadTexts: caqAceHitCountAclType.setStatus('current')
caqAceHitCountAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqAceHitCountAclName.setStatus('current')
caqAceHitCountAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqAceHitCountAceIndex.setStatus('current')
caqAceHitCountEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqAceHitCountEnable.setStatus('current')
caqAceIngressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAceIngressHitCount.setStatus('current')
caqAceEgressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqAceEgressHitCount.setStatus('current')
caqIfAclHitCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6), )
if mibBuilder.loadTexts: caqIfAclHitCountTable.setStatus('current')
caqIfAclHitCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIfAclHitCountAclType"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIfAclHitCountAclName"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIfAclHitCountAceIndex"))
if mibBuilder.loadTexts: caqIfAclHitCountEntry.setStatus('current')
caqIfAclHitCountAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6, 1, 1), CaqHitCountAclType())
if mibBuilder.loadTexts: caqIfAclHitCountAclType.setStatus('current')
caqIfAclHitCountAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6, 1, 2), CaqAclName())
if mibBuilder.loadTexts: caqIfAclHitCountAclName.setStatus('current')
caqIfAclHitCountAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: caqIfAclHitCountAceIndex.setStatus('current')
caqIfAclIngressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfAclIngressHitCount.setStatus('current')
caqIfAclEgressHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 9, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfAclEgressHitCount.setStatus('current')
caqDownloadAclInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 1), )
if mibBuilder.loadTexts: caqDownloadAclInfoTable.setStatus('current')
caqDownloadAclInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 1, 1), ).setIndexNames((1, "CISCO-CATOS-ACL-QOS-MIB", "caqDownloadAclName"))
if mibBuilder.loadTexts: caqDownloadAclInfoEntry.setStatus('current')
caqDownloadAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: caqDownloadAclName.setStatus('current')
caqDownloadAclUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqDownloadAclUserCount.setStatus('current')
caqDownloadAclDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqDownloadAclDownloadTime.setStatus('current')
caqIpDownloadAceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2), )
if mibBuilder.loadTexts: caqIpDownloadAceTable.setStatus('current')
caqIpDownloadAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1), ).setIndexNames((0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAclName"), (0, "CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceIndex"))
if mibBuilder.loadTexts: caqIpDownloadAceEntry.setStatus('current')
caqIpDownloadAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: caqIpDownloadAclName.setStatus('current')
caqIpDownloadAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: caqIpDownloadAceIndex.setStatus('current')
caqIpDownloadAceMatchedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("denyAndLog", 3), ("permitAndCapture", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceMatchedAction.setStatus('current')
caqIpDownloadAceProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 4), CiscoIpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceProtocolType.setStatus('current')
caqIpDownloadAceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceAddrType.setStatus('current')
caqIpDownloadAceSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceSrcIp.setStatus('current')
caqIpDownloadAceSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceSrcIpMask.setStatus('current')
caqIpDownloadAceSrcPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noOperator", 1), ("lt", 2), ("gt", 3), ("eq", 4), ("neq", 5), ("range", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceSrcPortOp.setStatus('current')
caqIpDownloadAceSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceSrcPort.setStatus('current')
caqIpDownloadAceSrcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceSrcPortRange.setStatus('current')
caqIpDownloadAceDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceDestIp.setStatus('current')
caqIpDownloadAceDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceDestIpMask.setStatus('current')
caqIpDownloadAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noOperator", 1), ("lt", 2), ("gt", 3), ("eq", 4), ("neq", 5), ("range", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceDestPortOp.setStatus('current')
caqIpDownloadAceDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceDestPort.setStatus('current')
caqIpDownloadAceDestPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 15), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceDestPortRange.setStatus('current')
caqIpDownloadAceTosMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("matchDscp", 2), ("matchIpPrec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceTosMatchCriteria.setStatus('current')
caqIpDownloadAceIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 17), CaqIpPrecedence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceIpPrec.setStatus('current')
caqIpDownloadAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 18), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceDscp.setStatus('current')
caqIpDnldAcePrtocolMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("matchIcmpType", 2), ("matchIcmpTypeAndCode", 3), ("matchEstablished", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDnldAcePrtocolMatchCriteria.setStatus('current')
caqIpDownloadAceIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceIcmpType.setStatus('current')
caqIpDownloadAceIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIpDownloadAceIcmpCode.setStatus('current')
caqIfDownloadAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 3), )
if mibBuilder.loadTexts: caqIfDownloadAclTable.setStatus('current')
caqIfDownloadAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (1, "CISCO-CATOS-ACL-QOS-MIB", "caqDownloadAclName"))
if mibBuilder.loadTexts: caqIfDownloadAclEntry.setStatus('current')
caqIfDownloadAclFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1x", 1), ("eou", 2), ("macAuth", 3), ("webAuth", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfDownloadAclFeature.setStatus('current')
caqIfDownloadAclAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfDownloadAclAddressType.setStatus('current')
caqIfDownloadAclHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfDownloadAclHostAddress.setStatus('current')
caqIfIpPhoneMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 4), )
if mibBuilder.loadTexts: caqIfIpPhoneMapTable.setStatus('current')
caqIfIpPhoneMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caqIfIpPhoneMapEntry.setStatus('current')
caqIfIpPhoneAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfIpPhoneAddressType.setStatus('current')
caqIfIpPhoneHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 179, 1, 10, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqIfIpPhoneHostAddress.setStatus('current')
caqMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 2))
caqMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 3))
caqMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 1))
caqMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2))
caqMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 1, 1)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicingCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueAssignmentGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosStatsGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMappingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPolicingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqActionGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosBridgedFlowPolicerGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMacVlanGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosExcessRateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMIBCompliance = caqMIBCompliance.setStatus('deprecated')
caqMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 1, 2)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicingCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueAssignmentGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosStatsGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMappingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPolicingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqActionGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosBridgedFlowPolicerGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMacVlanGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqLoggingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMIBCompliance2 = caqMIBCompliance2.setStatus('deprecated')
caqMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 1, 3)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicingCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueAssignmentGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosStatsGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMappingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPolicingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqActionGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityGroup2"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosBridgedFlowPolicerGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMacVlanGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqLoggingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMIBCompliance3 = caqMIBCompliance3.setStatus('deprecated')
caqMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 1, 4)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicingCpbGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueAssignmentGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosStatsGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMappingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPolicingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqActionGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityGroup2"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosBridgedFlowPolicerGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosMacVlanGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqLoggingGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosStatsGroup2"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityPBFGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosExcessBurstGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfTrustDeviceGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityRateLimitGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDscpMutationGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosDefaultActionGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclConfigGroup2"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpEspGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDscpRewriteGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerOctetStatsGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfSecurityAclConfigGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceExtGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceExtGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacPktClassifyVlanGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclFeatureGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPortAclHitCountGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqVlanAclHitCountGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMIBCompliance4 = caqMIBCompliance4.setStatus('current')
caqIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 1)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfTrustStateConfig"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfConfigGroup = caqIfConfigGroup.setStatus('current')
caqIfAclConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 2)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclBase"), ("CISCO-CATOS-ACL-QOS-MIB", "caqClassifierMapStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfAclConfigGroup = caqIfAclConfigGroup.setStatus('current')
caqAclCpbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 3)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAclCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAclCpbGroup = caqAclCpbGroup.setStatus('current')
caqIpAceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 4)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceMatchedAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceProtocolType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceAddrType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSrcIp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSrcIpMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSrcPortOp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSrcPort"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSrcPortRange"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDestIp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDestIpMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDestPortOp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDestPort"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDestPortRange"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceTosMatchCriteria"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceProtocolMatchCriteria"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceIpPrec"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceIcmpType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceIcmpCode"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceIgmpType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceOrderPosition"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceBeforePosition"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIpAceGroup = caqIpAceGroup.setStatus('current')
caqIpxAceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 5)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceMatchedAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceSrcNet"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceDestMatchCriteria"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceDestNet"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceProtocolType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceDestNode"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceDestNetMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceDestNodeMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceOrderPosition"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceBeforePosition"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpxAceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIpxAceGroup = caqIpxAceGroup.setStatus('current')
caqMacAceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 6)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceMatchedAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceSrcMac"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceSrcMacMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceDestMac"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceDestMacMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceEthertype"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceOrderPosition"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceBeforePosition"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMacAceGroup = caqMacAceGroup.setStatus('current')
caqActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 7)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqQosActionSelectTrust"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosActionSelectDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosActionSelectMicroflow"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosActionSelectAggregate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosActionSelectStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqActionGroup = caqActionGroup.setStatus('current')
caqPolicingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 8)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessRateSupport"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerNormalRateRequest"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerNormalRateGrant"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerBurstSizeRequest"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerBurstSizeGrant"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerNormalRateAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqPolicingGroup = caqPolicingGroup.setStatus('current')
caqQosExcessRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 9)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessRateRequest"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessRateGrant"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessRateAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosExcessRateGroup = caqQosExcessRateGroup.setStatus('current')
caqQosMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 10)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqCosToDscpDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpPrecToDscpDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDscpMappingCos"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDscpMappingNRPolicedDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDscpMappingERPolicedDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosMappingGroup = caqQosMappingGroup.setStatus('current')
caqQueueAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 11)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqCosAssignQueueNumber"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosAssignThresholdNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQueueAssignmentGroup = caqQueueAssignmentGroup.setStatus('current')
caqQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 12)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshDropAlgorithm"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshDropThreshold"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshMinWredThreshold"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueThreshMaxWredThreshold"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueWrrWeight"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQueueBufferSizeRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQueueGroup = caqQueueGroup.setStatus('current')
caqQosBridgedFlowPolicerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 13)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqBridgedFlowEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosBridgedFlowPolicerGroup = caqQosBridgedFlowPolicerGroup.setStatus('current')
caqQosMacVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 14)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqMacAddressCpb"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosValue"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosMacVlanRouterStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosMacVlanGroup = caqQosMacVlanGroup.setStatus('current')
caqQosStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 15)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqL3PacketsDropByPolicer"), ("CISCO-CATOS-ACL-QOS-MIB", "caqTosChangedIpPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosChangedIpPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosChangedNonIpPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPortStatsDropPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowStatsOutOfProfilePackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosStatsGroup = caqQosStatsGroup.setStatus('current')
caqSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 16)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityCapture"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityRedirectPortList"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityActionStatus"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityAclCaptureEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityGroup = caqSecurityGroup.setStatus('deprecated')
caqFlowPolicingCpbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 17)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicingCpb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqFlowPolicingCpbGroup = caqFlowPolicingCpbGroup.setStatus('current')
caqQosStatsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 18)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerNRExceedPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerERExceedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosStatsGroup2 = caqQosStatsGroup2.setStatus('current')
caqSecurityPBFGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 19)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqPbfStatus"), ("CISCO-CATOS-ACL-QOS-MIB", "caqPbfMacAddress"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjDstVlanNumber"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjDstMacAddress"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjSrcMacAddress"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjName"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjMtu"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjHitCount"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAdjStatus"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityAdjIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityPBFGroup = caqSecurityPBFGroup.setStatus('current')
caqQosExcessBurstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 20)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessBurstSupport"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessBurstRequest"), ("CISCO-CATOS-ACL-QOS-MIB", "caqFlowPolicerExcessBurstGrant"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosExcessBurstGroup = caqQosExcessBurstGroup.setStatus('current')
caqIfTrustDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 21)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfTrustDevice"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfOperTrustState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfTrustDeviceGroup = caqIfTrustDeviceGroup.setStatus('current')
caqLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 22)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAclLogMaxFlow"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclSecurityLoggingRateLimit"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclRouterAclRateLimit"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowVlan"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowIfIndex"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowProtocolType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowAddrType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowSrcIp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowSrcPort"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowDestIp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowDestPort"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowIcmpType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowIcmpCode"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowIgmpType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowArpOpcode"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowArpSrcMacAddr"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowArpHeaderSrcMacAddr"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowPacketsCount"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowLoggingTTL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqLoggingGroup = caqLoggingGroup.setStatus('current')
caqArpInspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 23)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityArpMacAddress"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclArpInspMatchMac"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclArpInspAddrValidation"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspGlobalForwardedPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspGlobalDroppedPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqRARPForwardedPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMatchedMacFailedPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAddrValidationFailedPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspIpDroppedPkts"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspForwardedPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqArpInspDroppedPackets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfArpInspDropThreshold"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfArpInspShutdownThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqArpInspGroup = caqArpInspGroup.setStatus('current')
caqSecurityRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 24)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityRateLimitFeatures"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityAclRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityRateLimitGroup = caqSecurityRateLimitGroup.setStatus('current')
caqDscpMutationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 25)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqDscpMutationNewDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqVlanMutationTableId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqDscpMutationGroup = caqDscpMutationGroup.setStatus('current')
caqQosDefaultActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 26)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqQosDefaultTrustState"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosDefaultDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosDefaultMicroflow"), ("CISCO-CATOS-ACL-QOS-MIB", "caqQosDefaultAggregate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosDefaultActionGroup = caqQosDefaultActionGroup.setStatus('current')
caqIfAclConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 27)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqClassifierMapDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfAclConfigGroup2 = caqIfAclConfigGroup2.setStatus('current')
caqIpEspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 28)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSecurityId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIpEspGroup = caqIpEspGroup.setStatus('current')
caqDscpRewriteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 29)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqDscpRewriteEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqDscpRewriteGroup = caqDscpRewriteGroup.setStatus('current')
caqAggPolicerOctetStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 30)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerOctets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerNRExceedOctets"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerERExceedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAggPolicerOctetStatsGroup = caqAggPolicerOctetStatsGroup.setStatus('current')
caqSecurityGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 31)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityCapture"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityRedirect2kPortList"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityActionStatus"), ("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityAclCaptureEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityGroup2 = caqSecurityGroup2.setStatus('current')
caqIfSecurityAclConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 32)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfSecurityAclBase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfSecurityAclConfigGroup = caqIfSecurityAclConfigGroup.setStatus('current')
caqIpAceExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 33)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceSrcGroup"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceDestGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIpAceExtGroup = caqIpAceExtGroup.setStatus('current')
caqAclHitCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 34)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountEnable"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAceHitCountEnable"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAceIngressHitCount"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAceEgressHitCount"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclIngressHitCount"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfAclEgressHitCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAclHitCountGroup = caqAclHitCountGroup.setStatus('current')
caqMacAceExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 35)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceMatchCriteria"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceVlan"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacAceCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMacAceExtGroup = caqMacAceExtGroup.setStatus('current')
caqMacPktClassifyVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 36)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqMacPktClassifyVlansLow"), ("CISCO-CATOS-ACL-QOS-MIB", "caqMacPktClassifyVlansHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqMacPktClassifyVlanGroup = caqMacPktClassifyVlanGroup.setStatus('current')
caqAclFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 37)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAclFeatureCpb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAclFeatureGroup = caqAclFeatureGroup.setStatus('current')
caqPortAclHitCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 38)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountPortList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqPortAclHitCountGroup = caqPortAclHitCountGroup.setStatus('current')
caqVlanAclHitCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 39)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountVlansLow"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAclHitCountVlansHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqVlanAclHitCountGroup = caqVlanAclHitCountGroup.setStatus('current')
caqQosL3StatsRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 40)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqL3PacketsDropByPolicerAveRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqTosChangedIpPacketsAveRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosChangedNonIpPacketsAveRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosChangedIpPacketsAveRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosL3StatsRateGroup = caqQosL3StatsRateGroup.setStatus('current')
caqQosL3StatsPeakGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 41)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqCosChangedNonIpPacketPeakRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqCosChangedIpPacketsPeakRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqL3PacketsDropByPolicerPeakRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqTosChangedIpPacketsPeakRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosL3StatsPeakGroup = caqQosL3StatsPeakGroup.setStatus('current')
caqAggPolicerOctetsRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 42)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerOctetsRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerNRExceedOctetsRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerERExceedOctetsRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAggPolicerOctetsRateGroup = caqAggPolicerOctetsRateGroup.setStatus('current')
caqAggPolicerPacketsRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 43)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerPacketsRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerNRExceedPacketsRate"), ("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerERExceedPacketsRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAggPolicerPacketsRateGroup = caqAggPolicerPacketsRateGroup.setStatus('current')
caqAggPolicerOctetsPeakGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 44)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerOctetsPeakRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAggPolicerOctetsPeakGroup = caqAggPolicerOctetsPeakGroup.setStatus('current')
caqAggPolicerPacketsPeakGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 45)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqAggPolicerPacketsPeakRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqAggPolicerPacketsPeakGroup = caqAggPolicerPacketsPeakGroup.setStatus('current')
caqQosPortRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 46)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqPortStatsDropPktsAveRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosPortRateGroup = caqQosPortRateGroup.setStatus('current')
caqQosPortPeakGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 47)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqPortStatsDropPktsPeakRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqQosPortPeakGroup = caqQosPortPeakGroup.setStatus('current')
caqSecurityActionDnldAceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 48)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqSecurityDownloadedAceFeature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityActionDnldAceGroup = caqSecurityActionDnldAceGroup.setStatus('current')
caqSecurityDownloadAclInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 49)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqDownloadAclUserCount"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDownloadAclDownloadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityDownloadAclInfoGroup = caqSecurityDownloadAclInfoGroup.setStatus('current')
caqSecurityDownloadIpAceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 50)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceMatchedAction"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceProtocolType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceAddrType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceSrcIp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceSrcIpMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceSrcPortOp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceSrcPort"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceSrcPortRange"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceDestIp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceDestIpMask"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceDestPortOp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceDestPort"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceDestPortRange"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceTosMatchCriteria"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceIpPrec"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceDscp"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDnldAcePrtocolMatchCriteria"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceIcmpType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpDownloadAceIcmpCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqSecurityDownloadIpAceGroup = caqSecurityDownloadIpAceGroup.setStatus('current')
caqIfDownloadAclMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 51)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfDownloadAclFeature"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfDownloadAclAddressType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfDownloadAclHostAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfDownloadAclMapGroup = caqIfDownloadAclMapGroup.setStatus('current')
caqIfIpPhoneMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 52)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIfIpPhoneAddressType"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIfIpPhoneHostAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIfIpPhoneMapGroup = caqIfIpPhoneMapGroup.setStatus('current')
caqIpAceTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 53)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpAceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIpAceTypeGroup = caqIpAceTypeGroup.setStatus('current')
caqIpOperClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 54)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpOperAclName"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpOperAclMapSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqIpOperClassifierGroup = caqIpOperClassifierGroup.setStatus('current')
caqDownloadClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 55)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqDownloadClassifierAclName"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDownloadMapSource"), ("CISCO-CATOS-ACL-QOS-MIB", "caqDownloadAclType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqDownloadClassifierGroup = caqDownloadClassifierGroup.setStatus('current')
caqArpLoggingSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 179, 3, 2, 56)).setObjects(("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowArpLoggingSource"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowArpAclName"), ("CISCO-CATOS-ACL-QOS-MIB", "caqIpFlowArpAceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caqArpLoggingSourceGroup = caqArpLoggingSourceGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CATOS-ACL-QOS-MIB", caqIpAceDestIp=caqIpAceDestIp, caqAclHitCountAclName=caqAclHitCountAclName, caqL3PacketsDropByPolicerAveRate=caqL3PacketsDropByPolicerAveRate, caqSecurityAclCaptureEnable=caqSecurityAclCaptureEnable, caqSecurityAclRateLimit=caqSecurityAclRateLimit, caqIpDownloadAceIpPrec=caqIpDownloadAceIpPrec, caqIpAceIndex=caqIpAceIndex, caqQosDefaultMicroflow=caqQosDefaultMicroflow, caqIpxAceIndex=caqIpxAceIndex, caqIpFlowLoggingIndex=caqIpFlowLoggingIndex, caqQueueNumber=caqQueueNumber, caqIfConfigGroup=caqIfConfigGroup, caqSecurityGroup2=caqSecurityGroup2, caqIpAceIcmpType=caqIpAceIcmpType, caqAceHitCountAclName=caqAceHitCountAclName, caqFlowPolicerNormalRateRequest=caqFlowPolicerNormalRateRequest, caqIpPrecToDscpTable=caqIpPrecToDscpTable, caqPortStatsDropPktsAveRate=caqPortStatsDropPktsAveRate, caqQosDefaultActionTable=caqQosDefaultActionTable, caqVlanMutationIdMapTable=caqVlanMutationIdMapTable, CaqAdjacencyName=CaqAdjacencyName, caqIpAceDscp=caqIpAceDscp, CaqDirection=CaqDirection, caqPortStatsDirection=caqPortStatsDirection, caqMacAceIndex=caqMacAceIndex, caqAdjDstVlanNumber=caqAdjDstVlanNumber, caqCosToDscpEntry=caqCosToDscpEntry, caqCosToDscpDscp=caqCosToDscpDscp, caqCosMacVlanRouterStatus=caqCosMacVlanRouterStatus, caqIfConfigEntry=caqIfConfigEntry, caqSecurityActionTable=caqSecurityActionTable, caqQueueTable=caqQueueTable, caqCosAssignCos=caqCosAssignCos, caqAclSecurityLoggingRateLimit=caqAclSecurityLoggingRateLimit, caqQosDefaultActionEntry=caqQosDefaultActionEntry, caqPbfStatus=caqPbfStatus, caqCosChangedIpPacketsPeakRate=caqCosChangedIpPacketsPeakRate, caqQueueThreshQueueType=caqQueueThreshQueueType, caqIfSecurityAclConfigTable=caqIfSecurityAclConfigTable, caqCosMacAddress=caqCosMacAddress, caqIpFlowArpSrcMacAddr=caqIpFlowArpSrcMacAddr, caqCosVlanNumber=caqCosVlanNumber, PYSNMP_MODULE_ID=ciscoCatOSAclQosMIB, caqIpAceIgmpType=caqIpAceIgmpType, caqQosActionSelectAggregate=caqQosActionSelectAggregate, caqIpFlowArpAceNumber=caqIpFlowArpAceNumber, caqDscpMappingCos=caqDscpMappingCos, caqIfIpPhoneMapGroup=caqIfIpPhoneMapGroup, caqAggPolicerERExceedPacketsRate=caqAggPolicerERExceedPacketsRate, caqIpAceEntry=caqIpAceEntry, caqIpDownloadAceProtocolType=caqIpDownloadAceProtocolType, caqIfAclHitCountTable=caqIfAclHitCountTable, caqDscpRewriteEnabled=caqDscpRewriteEnabled, caqIpFlowLoggingTTL=caqIpFlowLoggingTTL, caqIpxAceTable=caqIpxAceTable, caqIpxAceSrcNet=caqIpxAceSrcNet, caqIpFlowLoggingTable=caqIpFlowLoggingTable, caqCosAssignmentEntry=caqCosAssignmentEntry, caqArpInspObjects=caqArpInspObjects, caqIfAclBase=caqIfAclBase, caqAdjIndex=caqAdjIndex, caqIpFlowIcmpCode=caqIpFlowIcmpCode, caqQosBridgedFlowPolicerGroup=caqQosBridgedFlowPolicerGroup, caqIpAceTypeGroup=caqIpAceTypeGroup, caqQosL3StatsPeakGroup=caqQosL3StatsPeakGroup, caqIpPrecToDscpIpPrec=caqIpPrecToDscpIpPrec, caqIpFlowSrcPort=caqIpFlowSrcPort, caqIfAclEgressHitCount=caqIfAclEgressHitCount, caqAceHitCountTable=caqAceHitCountTable, caqMacAddressCpb=caqMacAddressCpb, caqIfAclConfigGroup=caqIfAclConfigGroup, caqIpOperAclFeature=caqIpOperAclFeature, caqL3PacketsDropByPolicer=caqL3PacketsDropByPolicer, caqIpxAceGroup=caqIpxAceGroup, caqQueueThreshMinWredThreshold=caqQueueThreshMinWredThreshold, caqClassifierMapDirection=caqClassifierMapDirection, caqAggPolicerStatsEntry=caqAggPolicerStatsEntry, caqQosActionSelectTable=caqQosActionSelectTable, caqIpAceSecurityId=caqIpAceSecurityId, caqDscpMappingEntry=caqDscpMappingEntry, caqSecurityDownloadAclInfoGroup=caqSecurityDownloadAclInfoGroup, CaqQueueNumber=CaqQueueNumber, caqIpFlowIcmpType=caqIpFlowIcmpType, caqIfTrustDevice=caqIfTrustDevice, ciscoCatOSAclQosMIB=ciscoCatOSAclQosMIB, caqCosChangedNonIpPacketsAveRate=caqCosChangedNonIpPacketsAveRate, caqAclArpInspAddrValidation=caqAclArpInspAddrValidation, caqAdjSrcMacAddress=caqAdjSrcMacAddress, caqDscpMutationMapTable=caqDscpMutationMapTable, caqIpAceIcmpCode=caqIpAceIcmpCode, caqIpAceDestGroup=caqIpAceDestGroup, caqIpAceDestPortOp=caqIpAceDestPortOp, CaqPolicerName=CaqPolicerName, caqTosChangedIpPacketsPeakRate=caqTosChangedIpPacketsPeakRate, caqPbfObjects=caqPbfObjects, caqAggPolicerOctetStatsGroup=caqAggPolicerOctetStatsGroup, caqIpDownloadAceAddrType=caqIpDownloadAceAddrType, caqDscpMappingNRPolicedDscp=caqDscpMappingNRPolicedDscp, caqIpxAceDestNode=caqIpxAceDestNode, caqAclLogMaxFlow=caqAclLogMaxFlow, caqSecurityArpMacAddress=caqSecurityArpMacAddress, caqIfArpInspConfigEntry=caqIfArpInspConfigEntry, caqSecurityRateLimitFeatures=caqSecurityRateLimitFeatures, caqVlanMutationTableId=caqVlanMutationTableId, caqAclFeatureCpb=caqAclFeatureCpb, caqArpInspForwardedPackets=caqArpInspForwardedPackets, caqMIBNotifications=caqMIBNotifications, caqArpInspDroppedPackets=caqArpInspDroppedPackets, caqAdjDstMacAddress=caqAdjDstMacAddress, caqMacAceSrcMac=caqMacAceSrcMac, caqIpAceSrcPort=caqIpAceSrcPort, caqDscpMutationGroup=caqDscpMutationGroup, caqIpOperAclName=caqIpOperAclName, caqGlobalObjects=caqGlobalObjects, caqAclObjects=caqAclObjects, caqMIBCompliance3=caqMIBCompliance3, caqIfDownloadAclFeature=caqIfDownloadAclFeature, caqIpFlowArpHeaderSrcMacAddr=caqIpFlowArpHeaderSrcMacAddr, caqAggPolicerOctetsRateGroup=caqAggPolicerOctetsRateGroup, caqIfSecurityAclConfigEntry=caqIfSecurityAclConfigEntry, caqAceEgressHitCount=caqAceEgressHitCount, caqIfAclHitCountAceIndex=caqIfAclHitCountAceIndex, caqSecurityAclCaptureIfEntry=caqSecurityAclCaptureIfEntry, caqIfIpPhoneHostAddress=caqIfIpPhoneHostAddress, caqAclFeatureGroup=caqAclFeatureGroup, caqIpDownloadAceDestPortOp=caqIpDownloadAceDestPortOp, caqSecurityCapture=caqSecurityCapture, caqQosL3StatsRateGroup=caqQosL3StatsRateGroup, CaqAclName=CaqAclName, caqAclHitCountEntry=caqAclHitCountEntry, caqMacAceDestMac=caqMacAceDestMac, caqIfArpInspShutdownThreshold=caqIfArpInspShutdownThreshold, caqAdjMtu=caqAdjMtu, caqMIBCompliances=caqMIBCompliances, caqQosStatsGroup2=caqQosStatsGroup2, caqIpDownloadAceIndex=caqIpDownloadAceIndex, caqAclHitCountGroup=caqAclHitCountGroup, ciscoCatOSAclQosMIBObjects=ciscoCatOSAclQosMIBObjects, caqIpxAceDestMatchCriteria=caqIpxAceDestMatchCriteria, caqIfIpPhoneMapTable=caqIfIpPhoneMapTable, caqAceHitCountAclType=caqAceHitCountAclType, caqLoggingGroup=caqLoggingGroup, caqAggPolicerPacketsRateGroup=caqAggPolicerPacketsRateGroup, caqIpDownloadAceTable=caqIpDownloadAceTable, caqAggPolicerOctets=caqAggPolicerOctets, caqQueueGroup=caqQueueGroup, caqArpInspGroup=caqArpInspGroup, caqMacAceVlan=caqMacAceVlan, caqCosAssignmentTable=caqCosAssignmentTable, caqVlanMutationIdMapEntry=caqVlanMutationIdMapEntry, caqMacAceMatchCriteria=caqMacAceMatchCriteria, caqQosStatsGroup=caqQosStatsGroup, caqIpxAceProtocolType=caqIpxAceProtocolType, caqPortStatsTable=caqPortStatsTable, caqIpFlowProtocolType=caqIpFlowProtocolType, caqDscpMutationTableId=caqDscpMutationTableId, caqDownloadAclInfoTable=caqDownloadAclInfoTable, caqAdjacencyEntry=caqAdjacencyEntry, caqPortStatsDropPktsPeakRate=caqPortStatsDropPktsPeakRate, caqAceHitCountAceIndex=caqAceHitCountAceIndex, caqMacAceDestMacMask=caqMacAceDestMacMask, caqDownloadAclType=caqDownloadAclType, caqIpFlowArpAclName=caqIpFlowArpAclName, CaqThresholdNumber=CaqThresholdNumber, caqMIBCompliance4=caqMIBCompliance4, caqActionGroup=caqActionGroup, caqAggPolicerOctetsPeakRate=caqAggPolicerOctetsPeakRate, caqIpAceDestIpMask=caqIpAceDestIpMask, caqMacAceSrcMacMask=caqMacAceSrcMacMask, caqMacPktClassifyVlansHigh=caqMacPktClassifyVlansHigh, caqAggPolicerNRExceedOctetsRate=caqAggPolicerNRExceedOctetsRate, caqDscpMutationMapEntry=caqDscpMutationMapEntry, caqFlowPolicerTable=caqFlowPolicerTable, caqIpxAceDestNet=caqIpxAceDestNet, caqMacPktClassifyVlanGroup=caqMacPktClassifyVlanGroup, caqDownloadAclObjects=caqDownloadAclObjects, caqDownloadClassifierAclName=caqDownloadClassifierAclName, caqAclHitCountObjects=caqAclHitCountObjects, caqAddrValidationFailedPkts=caqAddrValidationFailedPkts, caqSecurityGroup=caqSecurityGroup, caqDscpMappingERPolicedDscp=caqDscpMappingERPolicedDscp, caqQosActionSelectDscp=caqQosActionSelectDscp, caqBridgedPolicerEntry=caqBridgedPolicerEntry, caqFlowPolicerName=caqFlowPolicerName, caqIpAceAddrType=caqIpAceAddrType, caqTosChangedIpPacketsAveRate=caqTosChangedIpPacketsAveRate, caqIfTrustStateConfig=caqIfTrustStateConfig, caqQosDefaultActionGroup=caqQosDefaultActionGroup, caqQueueThreshQueueIndex=caqQueueThreshQueueIndex, caqClassifierTable=caqClassifierTable, caqIpAceProtocolType=caqIpAceProtocolType, caqQueueBufferSizeRatio=caqQueueBufferSizeRatio, caqFlowPolicerExcessRateRequest=caqFlowPolicerExcessRateRequest, caqDownloadMapSource=caqDownloadMapSource, caqFlowPolicerNormalRateAction=caqFlowPolicerNormalRateAction, caqQosDefaultTrustState=caqQosDefaultTrustState, caqSecurityRateLimitGroup=caqSecurityRateLimitGroup, caqFlowPolicerNormalRateGrant=caqFlowPolicerNormalRateGrant, caqVlanAclHitCountGroup=caqVlanAclHitCountGroup, caqIfAclConfigGroup2=caqIfAclConfigGroup2, caqIpFlowVlan=caqIpFlowVlan, caqIfAclHitCountAclName=caqIfAclHitCountAclName, caqLoggingObjects=caqLoggingObjects, caqIpDownloadAceSrcIp=caqIpDownloadAceSrcIp, caqFlowPolicerType=caqFlowPolicerType, caqAclHitCountPortList=caqAclHitCountPortList, caqQosDefaultAggregate=caqQosDefaultAggregate, caqIpDownloadAceDscp=caqIpDownloadAceDscp, caqQosExcessBurstGroup=caqQosExcessBurstGroup, caqIfIpPhoneAddressType=caqIfIpPhoneAddressType, caqIpAceExtGroup=caqIpAceExtGroup, caqMIBConformance=caqMIBConformance, caqFlowPolicerEntry=caqFlowPolicerEntry, caqQueueWrrWeight=caqQueueWrrWeight, caqQosActionSelectIndex=caqQosActionSelectIndex, caqAceHitCountEntry=caqAceHitCountEntry, caqDscpMutationOldDscp=caqDscpMutationOldDscp, caqAggPolicerPacketsPeakRate=caqAggPolicerPacketsPeakRate, caqPbfMacAddress=caqPbfMacAddress, caqIpDnldAcePrtocolMatchCriteria=caqIpDnldAcePrtocolMatchCriteria, caqQosStatsObjects=caqQosStatsObjects, caqIpDownloadAceIcmpType=caqIpDownloadAceIcmpType, caqAclRouterAclRateLimit=caqAclRouterAclRateLimit, caqAggPolicerNRExceedPackets=caqAggPolicerNRExceedPackets, caqIpDownloadAceDestIpMask=caqIpDownloadAceDestIpMask, caqCosChangedNonIpPackets=caqCosChangedNonIpPackets, caqDownloadAclUserCount=caqDownloadAclUserCount, caqDscpMappingTable=caqDscpMappingTable, caqIfDownloadAclMapGroup=caqIfDownloadAclMapGroup, caqFlowStatsEntry=caqFlowStatsEntry, caqAggPolicerERExceedOctets=caqAggPolicerERExceedOctets, caqVlanMutationIndex=caqVlanMutationIndex, caqAclHitCountVlansLow=caqAclHitCountVlansLow, caqFlowPolicerExcessBurstGrant=caqFlowPolicerExcessBurstGrant, caqIpDownloadAceSrcPortRange=caqIpDownloadAceSrcPortRange, caqIpFlowSrcIp=caqIpFlowSrcIp, caqIpAceTable=caqIpAceTable, caqFlowPolicingCpb=caqFlowPolicingCpb, caqIpFlowDestPort=caqIpFlowDestPort, caqQueueThreshThresholdIndex=caqQueueThreshThresholdIndex, caqFlowPolicerExcessRateGrant=caqFlowPolicerExcessRateGrant, caqAggPolicerERExceedOctetsRate=caqAggPolicerERExceedOctetsRate, caqBridgedFlowEnabled=caqBridgedFlowEnabled, caqClassifierAclName=caqClassifierAclName, caqFlowPolicingCpbGroup=caqFlowPolicingCpbGroup, caqAclHitCountVlansHigh=caqAclHitCountVlansHigh, caqQosActionSelectMicroflow=caqQosActionSelectMicroflow, caqIpAceDestPortRange=caqIpAceDestPortRange, caqBridgedPolicerTable=caqBridgedPolicerTable, caqIfIpPhoneMapEntry=caqIfIpPhoneMapEntry, caqCosToDscpTable=caqCosToDscpTable, caqIpAceBeforePosition=caqIpAceBeforePosition, caqPortAclHitCountGroup=caqPortAclHitCountGroup, caqArpInspGlobalDroppedPkts=caqArpInspGlobalDroppedPkts)
mibBuilder.exportSymbols("CISCO-CATOS-ACL-QOS-MIB", caqIpDownloadAceDestPort=caqIpDownloadAceDestPort, caqIpAceFeature=caqIpAceFeature, caqArpInspAclName=caqArpInspAclName, caqIpOperClassifierTable=caqIpOperClassifierTable, caqTosChangedIpPackets=caqTosChangedIpPackets, caqIfDownloadAclTable=caqIfDownloadAclTable, caqIpAceSrcPortOp=caqIpAceSrcPortOp, caqIpPrecToDscpEntry=caqIpPrecToDscpEntry, caqQosExcessRateGroup=caqQosExcessRateGroup, caqFlowPolicerExcessRateSupport=caqFlowPolicerExcessRateSupport, caqIpAceType=caqIpAceType, caqPortStatsQueueNumber=caqPortStatsQueueNumber, caqIpAceSrcGroup=caqIpAceSrcGroup, caqCosMacVlanRouterEntry=caqCosMacVlanRouterEntry, caqArpInspStatsTable=caqArpInspStatsTable, caqFlowPolicerExcessBurstSupport=caqFlowPolicerExcessBurstSupport, caqQueueThreshDropThreshold=caqQueueThreshDropThreshold, caqAclHitCountAclType=caqAclHitCountAclType, caqDownloadAclFeature=caqDownloadAclFeature, caqAggPolicerERExceedPackets=caqAggPolicerERExceedPackets, CaqHitCountAclType=CaqHitCountAclType, caqIpxAceDestNetMask=caqIpxAceDestNetMask, caqAclArpInspMatchMac=caqAclArpInspMatchMac, caqIpDownloadAceTosMatchCriteria=caqIpDownloadAceTosMatchCriteria, caqSecurityRedirectPortList=caqSecurityRedirectPortList, caqAggPolicerOctetsRate=caqAggPolicerOctetsRate, caqFlowStatsOutOfProfilePackets=caqFlowStatsOutOfProfilePackets, caqIfArpInspConfigTable=caqIfArpInspConfigTable, caqAggPolicerNRExceedOctets=caqAggPolicerNRExceedOctets, caqIfArpInspDropThreshold=caqIfArpInspDropThreshold, caqIpAceProtocolMatchCriteria=caqIpAceProtocolMatchCriteria, caqAggPolicerNRExceedPacketsRate=caqAggPolicerNRExceedPacketsRate, caqSecurityPBFGroup=caqSecurityPBFGroup, caqIpEspGroup=caqIpEspGroup, caqAggPolicerStatsTable=caqAggPolicerStatsTable, caqIpDownloadAceSrcIpMask=caqIpDownloadAceSrcIpMask, caqDscpRewriteGroup=caqDscpRewriteGroup, caqMacAceGroup=caqMacAceGroup, caqFlowStatsTable=caqFlowStatsTable, caqIfSecurityAclBase=caqIfSecurityAclBase, caqIpFlowLoggingEntry=caqIpFlowLoggingEntry, caqMacAceOrderPosition=caqMacAceOrderPosition, caqAclHitCountTable=caqAclHitCountTable, caqIfSecurityAclConfigGroup=caqIfSecurityAclConfigGroup, caqQosPortPeakGroup=caqQosPortPeakGroup, caqFlowPolicerExcessRateAction=caqFlowPolicerExcessRateAction, caqMacAceStatus=caqMacAceStatus, caqCosToDscpCos=caqCosToDscpCos, caqQosActionSelectStatus=caqQosActionSelectStatus, caqIpAceTosMatchCriteria=caqIpAceTosMatchCriteria, caqDownloadAclDownloadTime=caqDownloadAclDownloadTime, caqIpDownloadAceDestIp=caqIpDownloadAceDestIp, caqAggPolicerName=caqAggPolicerName, caqCosValue=caqCosValue, caqAdjacencyTable=caqAdjacencyTable, caqCosAssignQueueType=caqCosAssignQueueType, caqDownloadAclName=caqDownloadAclName, caqQosDefaultDscp=caqQosDefaultDscp, caqIpAclName=caqIpAclName, caqDownloadClassifierGroup=caqDownloadClassifierGroup, caqFlowPolicerBurstSizeRequest=caqFlowPolicerBurstSizeRequest, caqPortStatsDropPkts=caqPortStatsDropPkts, caqMacAceFeature=caqMacAceFeature, caqClassifierEntry=caqClassifierEntry, caqSecurityActionStatus=caqSecurityActionStatus, caqIpFlowIgmpType=caqIpFlowIgmpType, caqPortStatsEntry=caqPortStatsEntry, caqArpInspIpDroppedPkts=caqArpInspIpDroppedPkts, caqExtObjects=caqExtObjects, caqFlowPolicerBurstSizeGrant=caqFlowPolicerBurstSizeGrant, caqCosMacVlanRouterTable=caqCosMacVlanRouterTable, caqFlowPolicerExcessBurstRequest=caqFlowPolicerExcessBurstRequest, caqIpOperClassifierGroup=caqIpOperClassifierGroup, caqIpFlowIfIndex=caqIpFlowIfIndex, caqIpPrecToDscpDscp=caqIpPrecToDscpDscp, caqIpxAceFeature=caqIpxAceFeature, caqIpxAceEntry=caqIpxAceEntry, caqIpFlowDestIp=caqIpFlowDestIp, caqIpOperAclMapSource=caqIpOperAclMapSource, caqIpDownloadAceEntry=caqIpDownloadAceEntry, caqQueueThresholdTable=caqQueueThresholdTable, caqMacAceEntry=caqMacAceEntry, caqAggPolicerPacketsRate=caqAggPolicerPacketsRate, caqIpAceOrderPosition=caqIpAceOrderPosition, caqInterfaceObjects=caqInterfaceObjects, caqSecurityActionIndex=caqSecurityActionIndex, CaqPolicerNameOrEmpty=CaqPolicerNameOrEmpty, caqSecurityDownloadedAceFeature=caqSecurityDownloadedAceFeature, caqIpxAclName=caqIpxAclName, caqIfOperTrustState=caqIfOperTrustState, caqIpAceSrcIp=caqIpAceSrcIp, caqIpAceDestPort=caqIpAceDestPort, caqQueueThreshDropAlgorithm=caqQueueThreshDropAlgorithm, caqQueueThreshMaxWredThreshold=caqQueueThreshMaxWredThreshold, caqMacAceMatchedAction=caqMacAceMatchedAction, caqIfAclHitCountAclType=caqIfAclHitCountAclType, caqMIBGroups=caqMIBGroups, caqSecurityDownloadIpAceGroup=caqSecurityDownloadIpAceGroup, caqIpDownloadAceIcmpCode=caqIpDownloadAceIcmpCode, caqAceHitCountEnable=caqAceHitCountEnable, caqQueueDirection=caqQueueDirection, caqIpAceIpPrec=caqIpAceIpPrec, caqRARPForwardedPkts=caqRARPForwardedPkts, caqCosChangedIpPacketsAveRate=caqCosChangedIpPacketsAveRate, caqQueueThresholdEntry=caqQueueThresholdEntry, caqIfConfigTable=caqIfConfigTable, caqAceIngressHitCount=caqAceIngressHitCount, caqArpLoggingSourceGroup=caqArpLoggingSourceGroup, caqQueueEntry=caqQueueEntry, caqQueueType=caqQueueType, caqClassifierMapStatus=caqClassifierMapStatus, caqMacAceCos=caqMacAceCos, caqIpDownloadAclName=caqIpDownloadAclName, caqQosMappingGroup=caqQosMappingGroup, caqIfCos=caqIfCos, caqCosAssignThresholdNumber=caqCosAssignThresholdNumber, caqIpxAceDestNodeMask=caqIpxAceDestNodeMask, caqArpInspGlobalForwardedPkts=caqArpInspGlobalForwardedPkts, caqAggPolicerPacketsPeakGroup=caqAggPolicerPacketsPeakGroup, caqDscpMappingDscp=caqDscpMappingDscp, caqSecurityActionEntry=caqSecurityActionEntry, caqQosPortRateGroup=caqQosPortRateGroup, caqAdjStatus=caqAdjStatus, caqIpFlowArpLoggingSource=caqIpFlowArpLoggingSource, caqIpAceStatus=caqIpAceStatus, caqClassifierAclType=caqClassifierAclType, caqQosActionSelectEntry=caqQosActionSelectEntry, caqAclCpbGroup=caqAclCpbGroup, caqIfAclHitCountEntry=caqIfAclHitCountEntry, caqIfDownloadAclEntry=caqIfDownloadAclEntry, caqMatchedMacFailedPkts=caqMatchedMacFailedPkts, caqAdjName=caqAdjName, caqIpDownloadAceSrcPort=caqIpDownloadAceSrcPort, caqDownloadClassifierEntry=caqDownloadClassifierEntry, CaqIpPrecedence=CaqIpPrecedence, caqDownloadAclInfoEntry=caqDownloadAclInfoEntry, caqMacAceBeforePosition=caqMacAceBeforePosition, caqBridgedFlowVlanIndex=caqBridgedFlowVlanIndex, caqIpFlowArpOpcode=caqIpFlowArpOpcode, caqMIBCompliance2=caqMIBCompliance2, caqIpDownloadAceDestPortRange=caqIpDownloadAceDestPortRange, caqMacAceExtGroup=caqMacAceExtGroup, caqIpxAceMatchedAction=caqIpxAceMatchedAction, caqIpFlowAddrType=caqIpFlowAddrType, caqIfTrustDeviceGroup=caqIfTrustDeviceGroup, caqMacPktClassifyVlansLow=caqMacPktClassifyVlansLow, caqAclCapabilities=caqAclCapabilities, caqMIBCompliance=caqMIBCompliance, caqQosTrafficDirection=caqQosTrafficDirection, caqQosMacVlanGroup=caqQosMacVlanGroup, caqQosTrafficType=caqQosTrafficType, caqAggPolicerOctetsPeakGroup=caqAggPolicerOctetsPeakGroup, caqSecurityAdjIndex=caqSecurityAdjIndex, caqSecurityAclCaptureIfTable=caqSecurityAclCaptureIfTable, caqMacAclName=caqMacAclName, caqIpxAceOrderPosition=caqIpxAceOrderPosition, caqIpDownloadAceSrcPortOp=caqIpDownloadAceSrcPortOp, caqDscpMutationNewDscp=caqDscpMutationNewDscp, caqCosChangedNonIpPacketPeakRate=caqCosChangedNonIpPacketPeakRate, caqDownloadClassifierTable=caqDownloadClassifierTable, caqMacAceTable=caqMacAceTable, caqQueueAssignmentGroup=caqQueueAssignmentGroup, caqPortStatsThresholdNumber=caqPortStatsThresholdNumber, caqL3PacketsDropByPolicerPeakRate=caqL3PacketsDropByPolicerPeakRate, caqCosChangedIpPackets=caqCosChangedIpPackets, caqPolicingGroup=caqPolicingGroup, caqCosAssignQueueNumber=caqCosAssignQueueNumber, caqIpAceGroup=caqIpAceGroup, caqIfDownloadAclHostAddress=caqIfDownloadAclHostAddress, caqAggPolicerPackets=caqAggPolicerPackets, caqQosActionSelectTrust=caqQosActionSelectTrust, caqIpAceMatchedAction=caqIpAceMatchedAction, caqSecurityRedirect2kPortList=caqSecurityRedirect2kPortList, caqSecurityAction=caqSecurityAction, caqIfDownloadAclAddressType=caqIfDownloadAclAddressType, caqFlowPolicerStatus=caqFlowPolicerStatus, caqIpxAceBeforePosition=caqIpxAceBeforePosition, caqIpAceSrcIpMask=caqIpAceSrcIpMask, caqIpOperClassifierEntry=caqIpOperClassifierEntry, caqIfAclIngressHitCount=caqIfAclIngressHitCount, caqIpxAceStatus=caqIpxAceStatus, caqIpAceSrcPortRange=caqIpAceSrcPortRange, caqSecurityActionDnldAceGroup=caqSecurityActionDnldAceGroup, caqIpFlowPacketsCount=caqIpFlowPacketsCount, caqAdjHitCount=caqAdjHitCount, caqArpInspStatsEntry=caqArpInspStatsEntry, caqMacAceEthertype=caqMacAceEthertype, caqIpDownloadAceMatchedAction=caqIpDownloadAceMatchedAction, caqAclHitCountEnable=caqAclHitCountEnable)
