#
# PySNMP MIB module CXGwMux-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXGwMux-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
Alias, cxGwMux = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxGwMux")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, ObjectIdentity, Unsigned32, TimeTicks, IpAddress, iso, Bits, Counter64, MibIdentifier, Integer32, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "TimeTicks", "IpAddress", "iso", "Bits", "Counter64", "MibIdentifier", "Integer32", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

gmfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1))
gmfMuxInterPassPeriodInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfMuxInterPassPeriodInMs.setStatus('mandatory')
gmfVoiceOverDataPriorityFactor = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfVoiceOverDataPriorityFactor.setStatus('mandatory')
gmfStatSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfStatSamplingPeriod.setStatus('mandatory')
gmfNoOfLinkSupported = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfNoOfLinkSupported.setStatus('mandatory')
gmfNoOfEntryPerFiFo = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 10000)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfNoOfEntryPerFiFo.setStatus('mandatory')
gmfToFrCouplingLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfToFrCouplingLevel.setStatus('mandatory')
gmfOutputFlowControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfOutputFlowControlFactor.setStatus('mandatory')
gmfState = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dead", 1), ("gmf-task-conf", 2), ("general-conf", 3), ("sap-conf", 4), ("route-conf", 5), ("init-gmf-completed", 6), ("init-appl-completed", 7), ("mci-only", 8), ("reg-to-iam", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfState.setStatus('mandatory')
gmfCntInfoMsgRelFromBus = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromBus.setStatus('mandatory')
gmfCntInfoMsgRelFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromWan.setStatus('mandatory')
gmfCntTxAckToWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntTxAckToWan.setStatus('mandatory')
gmfCntUnexpLinkNoFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntUnexpLinkNoFromWan.setStatus('mandatory')
gmfCntFrmTooShortFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntFrmTooShortFromWan.setStatus('mandatory')
gmfCntFrmTooLongFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntFrmTooLongFromWan.setStatus('mandatory')
gmfLongestTimeToMux = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLongestTimeToMux.setStatus('mandatory')
gmfCntSilentConnections = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSilentConnections.setStatus('mandatory')
gmfCntMuxPassTimeExceeded = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntMuxPassTimeExceeded.setStatus('obsolete')
gmfMciCurrentConnection = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfMciCurrentConnection.setStatus('obsolete')
gmfCntInfoMsgRelFromVce = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromVce.setStatus('mandatory')
gmfCntGlobalFlowCtlCond = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntGlobalFlowCtlCond.setStatus('mandatory')
gmfNoOfVoicePacketQueued = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfNoOfVoicePacketQueued.setStatus('mandatory')
gmfControlStats = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gmfControlStats.setStatus('mandatory')
gmfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2), )
if mibBuilder.loadTexts: gmfRouteTable.setStatus('mandatory')
gmfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1), ).setIndexNames((0, "CXGwMux-MIB", "gmfOrigin"), (0, "CXGwMux-MIB", "gmfLink"))
if mibBuilder.loadTexts: gmfRouteEntry.setStatus('mandatory')
gmfOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfOrigin.setStatus('mandatory')
gmfLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLink.setStatus('mandatory')
gmfDest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfDest.setStatus('mandatory')
gmfRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfRouteRowStatus.setStatus('mandatory')
gmfLinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3), )
if mibBuilder.loadTexts: gmfLinkStatTable.setStatus('mandatory')
gmfLinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1), ).setIndexNames((0, "CXGwMux-MIB", "gmfLinkIndex"))
if mibBuilder.loadTexts: gmfLinkStatEntry.setStatus('mandatory')
gmfLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkIndex.setStatus('mandatory')
gmfLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkStatus.setStatus('mandatory')
gmfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bound-to-FR", 1), ("routed-to-IAM", 2), ("in-loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkType.setStatus('mandatory')
gmfCntDataFrmMx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntDataFrmMx.setStatus('mandatory')
gmfCntDataFrmDmx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntDataFrmDmx.setStatus('mandatory')
gmfCntVoiceFrmMx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceFrmMx.setStatus('mandatory')
gmfCntVoiceFrmDmx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceFrmDmx.setStatus('mandatory')
gmfCntLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntLinkDown.setStatus('mandatory')
gmfLinkUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkUtilizationTx.setStatus('mandatory')
gmfLinkUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkUtilizationRx.setStatus('mandatory')
gmfLinkErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkErrorRate.setStatus('mandatory')
gmfCntInFlowCtrlMuxSide = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInFlowCtrlMuxSide.setStatus('mandatory')
gmfCntOutFlowCtrlWanSide = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntOutFlowCtrlWanSide.setStatus('mandatory')
gmfCntSeqErrorFromMux = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSeqErrorFromMux.setStatus('mandatory')
gmfCntSeqErrorFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSeqErrorFromWan.setStatus('mandatory')
gmfCntSilentLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSilentLink.setStatus('mandatory')
gmfCntSeqErrorForced = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSeqErrorForced.setStatus('mandatory')
gmfCntUnexpLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntUnexpLoopBack.setStatus('mandatory')
gmfCntRemoteRestarted = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntRemoteRestarted.setStatus('mandatory')
gmfCntVoiceMuxInterrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceMuxInterrupted.setStatus('mandatory')
gmfCntDataQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntDataQueueFull.setStatus('mandatory')
gmfCntVoiceQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceQueueFull.setStatus('mandatory')
gmfCntUnexpSliceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntUnexpSliceType.setStatus('mandatory')
gmfCntRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntRouteChange.setStatus('mandatory')
gmfCntTooManyCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntTooManyCodes.setStatus('mandatory')
gmfCntPosValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntPosValidation.setStatus('mandatory')
gmfCntNegValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntNegValidation.setStatus('mandatory')
gmfControlLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forceNormal", 1), ("forceLoopback", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gmfControlLink.setStatus('mandatory')
gmfDataOutWindowWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfDataOutWindowWidth.setStatus('mandatory')
gmfDataOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfDataOutPriority.setStatus('mandatory')
gmfSRTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4), )
if mibBuilder.loadTexts: gmfSRTable.setStatus('mandatory')
gmfSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1), ).setIndexNames((0, "CXGwMux-MIB", "gmfSRLink"))
if mibBuilder.loadTexts: gmfSREntry.setStatus('mandatory')
gmfSRLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfSRLink.setStatus('mandatory')
gmfSRDestCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfSRDestCircuitAlias.setStatus('mandatory')
gmfSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 3), SubRef().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfSRSubRef.setStatus('mandatory')
gmfSRConStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-init", 1), ("closed", 2), ("waitForQueryConf", 3), ("waitForOpenConf", 4), ("opened", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfSRConStatus.setStatus('mandatory')
gmfSRFailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localMemAllocFailure", 3), ("remoteMemAllocFailure", 4), ("remoteNoAccess", 5), ("remotePvcDown", 6), ("remotePvcBusy", 7), ("localFcnFailure", 8), ("remoteFcnFailure", 9), ("localDsnFailure", 10), ("remoteAliasNotFound", 11), ("remoteNoPvcService", 12), ("openReqTimeout", 13), ("adjaCardReset", 14), ("linkNotSupported", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfSRFailStatus.setStatus('mandatory')
gmfSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfSRRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CXGwMux-MIB", gmfMciCurrentConnection=gmfMciCurrentConnection, gmfCntUnexpLinkNoFromWan=gmfCntUnexpLinkNoFromWan, gmfLinkStatus=gmfLinkStatus, gmfCntVoiceFrmDmx=gmfCntVoiceFrmDmx, gmfCntVoiceMuxInterrupted=gmfCntVoiceMuxInterrupted, gmfSRDestCircuitAlias=gmfSRDestCircuitAlias, gmfCntNegValidation=gmfCntNegValidation, gmfLinkStatEntry=gmfLinkStatEntry, gmfCntDataFrmDmx=gmfCntDataFrmDmx, gmfCntInFlowCtrlMuxSide=gmfCntInFlowCtrlMuxSide, gmfSRLink=gmfSRLink, gmfNoOfVoicePacketQueued=gmfNoOfVoicePacketQueued, gmfCntDataFrmMx=gmfCntDataFrmMx, gmfCntSeqErrorFromWan=gmfCntSeqErrorFromWan, gmfCntSeqErrorForced=gmfCntSeqErrorForced, gmfControlLink=gmfControlLink, gmfSRFailStatus=gmfSRFailStatus, gmfSRTable=gmfSRTable, gmfOrigin=gmfOrigin, gmfCntInfoMsgRelFromBus=gmfCntInfoMsgRelFromBus, gmfRouteTable=gmfRouteTable, gmfSREntry=gmfSREntry, gmfConfig=gmfConfig, gmfLinkUtilizationTx=gmfLinkUtilizationTx, gmfNoOfLinkSupported=gmfNoOfLinkSupported, gmfDataOutPriority=gmfDataOutPriority, gmfMuxInterPassPeriodInMs=gmfMuxInterPassPeriodInMs, gmfCntFrmTooLongFromWan=gmfCntFrmTooLongFromWan, gmfDataOutWindowWidth=gmfDataOutWindowWidth, gmfCntInfoMsgRelFromVce=gmfCntInfoMsgRelFromVce, gmfLink=gmfLink, gmfRouteEntry=gmfRouteEntry, gmfCntPosValidation=gmfCntPosValidation, gmfCntLinkDown=gmfCntLinkDown, gmfCntInfoMsgRelFromWan=gmfCntInfoMsgRelFromWan, gmfRouteRowStatus=gmfRouteRowStatus, gmfLinkIndex=gmfLinkIndex, gmfSRRowStatus=gmfSRRowStatus, gmfNoOfEntryPerFiFo=gmfNoOfEntryPerFiFo, gmfCntOutFlowCtrlWanSide=gmfCntOutFlowCtrlWanSide, gmfLinkErrorRate=gmfLinkErrorRate, gmfCntSeqErrorFromMux=gmfCntSeqErrorFromMux, gmfStatSamplingPeriod=gmfStatSamplingPeriod, gmfLinkUtilizationRx=gmfLinkUtilizationRx, gmfCntDataQueueFull=gmfCntDataQueueFull, gmfCntVoiceQueueFull=gmfCntVoiceQueueFull, gmfState=gmfState, gmfOutputFlowControlFactor=gmfOutputFlowControlFactor, gmfCntRemoteRestarted=gmfCntRemoteRestarted, gmfCntRouteChange=gmfCntRouteChange, gmfCntSilentConnections=gmfCntSilentConnections, gmfDest=gmfDest, gmfSRConStatus=gmfSRConStatus, SubRef=SubRef, gmfVoiceOverDataPriorityFactor=gmfVoiceOverDataPriorityFactor, gmfControlStats=gmfControlStats, gmfLongestTimeToMux=gmfLongestTimeToMux, gmfCntTxAckToWan=gmfCntTxAckToWan, gmfCntMuxPassTimeExceeded=gmfCntMuxPassTimeExceeded, gmfCntGlobalFlowCtlCond=gmfCntGlobalFlowCtlCond, gmfSRSubRef=gmfSRSubRef, gmfCntUnexpLoopBack=gmfCntUnexpLoopBack, gmfCntTooManyCodes=gmfCntTooManyCodes, gmfCntSilentLink=gmfCntSilentLink, gmfLinkStatTable=gmfLinkStatTable, gmfToFrCouplingLevel=gmfToFrCouplingLevel, gmfCntFrmTooShortFromWan=gmfCntFrmTooShortFromWan, gmfCntUnexpSliceType=gmfCntUnexpSliceType, gmfLinkType=gmfLinkType, gmfCntVoiceFrmMx=gmfCntVoiceFrmMx)
