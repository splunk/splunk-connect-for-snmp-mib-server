#
# PySNMP MIB module HH3C-MINM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-MINM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
hh3cVsiIndex, = mibBuilder.importSymbols("HH3C-VSI-MIB", "hh3cVsiIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, ObjectIdentity, Unsigned32, Bits, IpAddress, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ModuleIdentity, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "ObjectIdentity", "Unsigned32", "Bits", "IpAddress", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ModuleIdentity", "TimeTicks", "Integer32")
RowStatus, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TextualConvention")
hh3cMinm = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 107))
hh3cMinm.setRevisions(('2009-08-08 10:00',))
if mibBuilder.loadTexts: hh3cMinm.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: hh3cMinm.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cMinmEnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hh3cMinmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1))
hh3cMinmScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 1))
hh3cMinmCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 1, 1), Bits().clone(namedValues=NamedValues(("reEncapsulation", 0), ("uplink", 1), ("vsiShareConnection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMinmCapabilities.setStatus('current')
hh3cMinmBmac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMinmBmac.setStatus('current')
hh3cMinmVsiTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 2), )
if mibBuilder.loadTexts: hh3cMinmVsiTable.setStatus('current')
hh3cMinmVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 2, 1), ).setIndexNames((0, "HH3C-VSI-MIB", "hh3cVsiIndex"))
if mibBuilder.loadTexts: hh3cMinmVsiEntry.setStatus('current')
hh3cMinmVsiBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMinmVsiBvlan.setStatus('current')
hh3cMinmVsiReEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 2, 1, 2), Hh3cMinmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMinmVsiReEncapsulation.setStatus('current')
hh3cMinmVsiNextAvailableLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMinmVsiNextAvailableLinkId.setStatus('current')
hh3cMinmUplinkTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 3), )
if mibBuilder.loadTexts: hh3cMinmUplinkTable.setStatus('current')
hh3cMinmUplinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 3, 1), ).setIndexNames((0, "HH3C-VSI-MIB", "hh3cVsiIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cMinmUplinkEntry.setStatus('current')
hh3cMinmUplinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmUplinkRowStatus.setStatus('current')
hh3cMinmConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4), )
if mibBuilder.loadTexts: hh3cMinmConnectionTable.setStatus('current')
hh3cMinmConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1), ).setIndexNames((0, "HH3C-VSI-MIB", "hh3cVsiIndex"), (0, "HH3C-MINM-MIB", "hh3cMinmConnectionLinkId"))
if mibBuilder.loadTexts: hh3cMinmConnectionEntry.setStatus('current')
hh3cMinmConnectionLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cMinmConnectionLinkId.setStatus('current')
hh3cMinmConnectionBmac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmConnectionBmac.setStatus('current')
hh3cMinmConnectionBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmConnectionBvlan.setStatus('current')
hh3cMinmConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmConnectionPort.setStatus('current')
hh3cMinmConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("learned", 1), ("configDynamic", 2), ("configStatic", 3), ("blackhole", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmConnectionStatus.setStatus('current')
hh3cMinmConnectionAgingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aging", 1), ("noAged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMinmConnectionAgingStatus.setStatus('current')
hh3cMinmConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 107, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmConnectionRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-MINM-MIB", hh3cMinmVsiNextAvailableLinkId=hh3cMinmVsiNextAvailableLinkId, hh3cMinmBmac=hh3cMinmBmac, hh3cMinmCapabilities=hh3cMinmCapabilities, hh3cMinmConnectionLinkId=hh3cMinmConnectionLinkId, PYSNMP_MODULE_ID=hh3cMinm, hh3cMinmConnectionRowStatus=hh3cMinmConnectionRowStatus, hh3cMinmUplinkEntry=hh3cMinmUplinkEntry, hh3cMinmUplinkRowStatus=hh3cMinmUplinkRowStatus, Hh3cMinmEnabledStatus=Hh3cMinmEnabledStatus, hh3cMinmVsiReEncapsulation=hh3cMinmVsiReEncapsulation, hh3cMinmConnectionAgingStatus=hh3cMinmConnectionAgingStatus, hh3cMinmVsiBvlan=hh3cMinmVsiBvlan, hh3cMinmVsiTable=hh3cMinmVsiTable, hh3cMinmUplinkTable=hh3cMinmUplinkTable, hh3cMinmVsiEntry=hh3cMinmVsiEntry, hh3cMinmConnectionStatus=hh3cMinmConnectionStatus, hh3cMinmConnectionBvlan=hh3cMinmConnectionBvlan, hh3cMinmConnectionPort=hh3cMinmConnectionPort, hh3cMinmObjects=hh3cMinmObjects, hh3cMinmConnectionTable=hh3cMinmConnectionTable, hh3cMinmConnectionEntry=hh3cMinmConnectionEntry, hh3cMinmScalarGroup=hh3cMinmScalarGroup, hh3cMinm=hh3cMinm, hh3cMinmConnectionBmac=hh3cMinmConnectionBmac)
