#
# PySNMP MIB module CROSSSTREAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CROSSSTREAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:12:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, iso, Integer32, enterprises, Gauge32, NotificationType, IpAddress, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, NotificationType, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "iso", "Integer32", "enterprises", "Gauge32", "NotificationType", "IpAddress", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "NotificationType", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
artel = MibIdentifier((1, 3, 6, 1, 4, 1, 4962))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 1))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 1, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2))
crossStream = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1))
cstrmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1))
cstrmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2))
cstrmEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3))
cstrmDiags = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4))
cstrmStreamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5))
cstrmStreamPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6))
class ConnectionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("inactive", 2), ("underCreation", 3), ("createAndGo", 4), ("createAndWait", 5), ("delete", 6))

class StreamDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingress", 1), ("egress", 2))

class StreamState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class StreamType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("atm", 1), ("asi", 2), ("ethernet", 3))

class StreamIndex(Integer32):
    pass

class ProgIndex(Integer32):
    pass

class PidIndex(Integer32):
    pass

class ConnectionIndex(Integer32):
    pass

deviceName = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
deviceSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNum.setStatus('mandatory')
deviceModelNum = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceModelNum.setStatus('mandatory')
deviceFwVer = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFwVer.setStatus('mandatory')
deviceHwVer = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHwVer.setStatus('mandatory')
deviceTime = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceTime.setStatus('mandatory')
deviceUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUpTime.setStatus('mandatory')
deviceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIpAddress.setStatus('mandatory')
deviceIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIpNetmask.setStatus('mandatory')
deviceGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGwAddress.setStatus('mandatory')
deviceHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceHostAddress.setStatus('mandatory')
deviceReset = MibScalar((1, 3, 6, 1, 4, 1, 4962, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceReset.setStatus('mandatory')
vsarReset = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsarReset.setStatus('mandatory')
vsarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vsarConfigTable.setStatus('mandatory')
vsarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1, 2, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "vsarConfigIndex"))
if mibBuilder.loadTexts: vsarConfigEntry.setStatus('mandatory')
vsarConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsarConfigIndex.setStatus('mandatory')
vsarConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsarConfigType.setStatus('mandatory')
vsarConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("load", 1), ("store", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsarConfigAction.setStatus('mandatory')
usedAtmStreamsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedAtmStreamsNumber.setStatus('mandatory')
activeAtmStreamsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAtmStreamsNumber.setStatus('mandatory')
maxAtmStreamsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxAtmStreamsNumber.setStatus('mandatory')
usedAsiStreamsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedAsiStreamsNumber.setStatus('mandatory')
activeAsiStreamsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAsiStreamsNumber.setStatus('mandatory')
maxAsiStreamsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxAsiStreamsNumber.setStatus('mandatory')
usedProgsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedProgsNumber.setStatus('mandatory')
activeProgsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProgsNumber.setStatus('mandatory')
maxProgsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxProgsNumber.setStatus('mandatory')
usedPidsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedPidsNumber.setStatus('mandatory')
activePidsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activePidsNumber.setStatus('mandatory')
maxPidsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxPidsNumber.setStatus('mandatory')
usedConnectionsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedConnectionsNumber.setStatus('mandatory')
maxConnectionsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxConnectionsNumber.setStatus('mandatory')
cstrmATMPhyTrapID = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 1), Integer32())
if mibBuilder.loadTexts: cstrmATMPhyTrapID.setStatus('mandatory')
cstrmATMPhyTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: cstrmATMPhyTrapStatus.setStatus('mandatory')
cstrmOAMVCTrapID = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 2), Integer32())
if mibBuilder.loadTexts: cstrmOAMVCTrapID.setStatus('mandatory')
cstrmOAMVCTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 2, 1), Integer32())
if mibBuilder.loadTexts: cstrmOAMVCTrapStatus.setStatus('mandatory')
cstrmOAMVPTrapID = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 3), Integer32())
if mibBuilder.loadTexts: cstrmOAMVPTrapID.setStatus('mandatory')
cstrmOAMVPTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 3, 1), Integer32())
if mibBuilder.loadTexts: cstrmOAMVPTrapStatus.setStatus('mandatory')
cstrmSONETTrapID = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 4), Integer32())
if mibBuilder.loadTexts: cstrmSONETTrapID.setStatus('mandatory')
cstrmSONETTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 4, 1), Integer32())
if mibBuilder.loadTexts: cstrmSONETTrapStatus.setStatus('mandatory')
cstrmActDeActTrapID = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 5), Integer32())
if mibBuilder.loadTexts: cstrmActDeActTrapID.setStatus('mandatory')
cstrmActDeActTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 5, 1), Integer32())
if mibBuilder.loadTexts: cstrmActDeActTrapStatus.setStatus('mandatory')
cstrmIngressPidsChangedTrapID = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 6), Integer32())
if mibBuilder.loadTexts: cstrmIngressPidsChangedTrapID.setStatus('mandatory')
cstrmIngressPidsChangedTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 6, 6, 1), Integer32())
if mibBuilder.loadTexts: cstrmIngressPidsChangedTrapStatus.setStatus('mandatory')
cstrmAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrmAirTemp.setStatus('mandatory')
cstrmCoreRegTemp = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrmCoreRegTemp.setStatus('mandatory')
cstrm3VRegTemp = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrm3VRegTemp.setStatus('mandatory')
cstrmHotICTemp = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrmHotICTemp.setStatus('mandatory')
cstrm5VCoreVoltage = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrm5VCoreVoltage.setStatus('mandatory')
cstrm3VCoreVoltage = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrm3VCoreVoltage.setStatus('mandatory')
cstrm3VIOVoltage = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrm3VIOVoltage.setStatus('mandatory')
streamNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: streamNextIndex.setStatus('mandatory')
streamTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2), )
if mibBuilder.loadTexts: streamTable.setStatus('mandatory')
streamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"))
if mibBuilder.loadTexts: streamEntry.setStatus('mandatory')
streamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: streamIndex.setStatus('mandatory')
ingressState = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1, 2), StreamState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressState.setStatus('mandatory')
egressState = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1, 3), StreamState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressState.setStatus('mandatory')
streamType = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1, 4), StreamType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamType.setStatus('mandatory')
streamName = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamName.setStatus('mandatory')
streamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 2, 1, 6), ConnectionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamStatus.setStatus('mandatory')
ingressStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 3), )
if mibBuilder.loadTexts: ingressStreamTable.setStatus('mandatory')
ingressStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 3, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"))
if mibBuilder.loadTexts: ingressStreamEntry.setStatus('mandatory')
ingressStreamCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressStreamCellRate.setStatus('mandatory')
egressStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4), )
if mibBuilder.loadTexts: egressStreamTable.setStatus('mandatory')
egressStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"))
if mibBuilder.loadTexts: egressStreamEntry.setStatus('mandatory')
egressStreamTsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressStreamTsRate.setStatus('mandatory')
egressStreamNumBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressStreamNumBufs.setStatus('mandatory')
egressStreamBufThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressStreamBufThreshold.setStatus('mandatory')
egressStreamBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressStreamBufSize.setStatus('mandatory')
egressStreamJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressStreamJitter.setStatus('mandatory')
atmStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 5), )
if mibBuilder.loadTexts: atmStreamTable.setStatus('mandatory')
atmStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 5, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"))
if mibBuilder.loadTexts: atmStreamEntry.setStatus('mandatory')
atmStreamVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmStreamVpi.setStatus('mandatory')
atmStreamVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmStreamVci.setStatus('mandatory')
asiStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 6), )
if mibBuilder.loadTexts: asiStreamTable.setStatus('mandatory')
asiStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 6, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"))
if mibBuilder.loadTexts: asiStreamEntry.setStatus('mandatory')
asiStreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiStreamPort.setStatus('mandatory')
asiStreamChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asiStreamChannel.setStatus('mandatory')
progNextTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 7), )
if mibBuilder.loadTexts: progNextTable.setStatus('mandatory')
progNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 7, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"))
if mibBuilder.loadTexts: progNextEntry.setStatus('mandatory')
progNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: progNextIndex.setStatus('mandatory')
progTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8), )
if mibBuilder.loadTexts: progTable.setStatus('mandatory')
progEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"), (0, "CROSSSTREAM-MIB", "progIndex"))
if mibBuilder.loadTexts: progEntry.setStatus('mandatory')
progIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: progIndex.setStatus('mandatory')
progNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progNumber.setStatus('mandatory')
progName = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progName.setStatus('mandatory')
progTsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progTsRate.setStatus('mandatory')
progTsLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progTsLen.setStatus('mandatory')
progStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 8, 1, 6), ConnectionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progStatus.setStatus('mandatory')
pidNextTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 9), )
if mibBuilder.loadTexts: pidNextTable.setStatus('mandatory')
pidNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 9, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"), (0, "CROSSSTREAM-MIB", "progIndex"))
if mibBuilder.loadTexts: pidNextEntry.setStatus('mandatory')
pidNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidNextIndex.setStatus('mandatory')
pidTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10), )
if mibBuilder.loadTexts: pidTable.setStatus('mandatory')
pidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "streamIndex"), (0, "CROSSSTREAM-MIB", "progIndex"), (0, "CROSSSTREAM-MIB", "pidIndex"))
if mibBuilder.loadTexts: pidEntry.setStatus('mandatory')
pidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidIndex.setStatus('mandatory')
pidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pidNumber.setStatus('mandatory')
pidTableID = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pidTableID.setStatus('mandatory')
pidRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pidRate.setStatus('mandatory')
pidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 10, 1, 5), ConnectionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pidStatus.setStatus('mandatory')
cstrmConnNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrmConnNextIndex.setStatus('mandatory')
cstrmConnTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12), )
if mibBuilder.loadTexts: cstrmConnTable.setStatus('mandatory')
cstrmConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "cstrmConnIndex"))
if mibBuilder.loadTexts: cstrmConnEntry.setStatus('mandatory')
cstrmConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cstrmConnIndex.setStatus('mandatory')
ingressStreamIndexVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressStreamIndexVal.setStatus('mandatory')
egressStreamIndexVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressStreamIndexVal.setStatus('mandatory')
ingressProgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressProgIndex.setStatus('mandatory')
ingressPidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressPidIndex.setStatus('mandatory')
egressProgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressProgNum.setStatus('mandatory')
egressPidNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressPidNum.setStatus('mandatory')
pcrAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcrAdjust.setStatus('mandatory')
cstrmConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 12, 1, 9), ConnectionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cstrmConnStatus.setStatus('mandatory')
connectionStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 13), )
if mibBuilder.loadTexts: connectionStreamTable.setStatus('mandatory')
connectionStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 13, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "StreamDirection"), (0, "CROSSSTREAM-MIB", "StreamIndex"), (0, "CROSSSTREAM-MIB", "ConnectionIndex"))
if mibBuilder.loadTexts: connectionStreamEntry.setStatus('mandatory')
connectionStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionStreamIndex.setStatus('mandatory')
connectionProgTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 14), )
if mibBuilder.loadTexts: connectionProgTable.setStatus('mandatory')
connectionProgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 14, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "StreamDirection"), (0, "CROSSSTREAM-MIB", "StreamIndex"), (0, "CROSSSTREAM-MIB", "ProgIndex"), (0, "CROSSSTREAM-MIB", "ConnectionIndex"))
if mibBuilder.loadTexts: connectionProgEntry.setStatus('mandatory')
connectionProgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionProgIndex.setStatus('mandatory')
connectionPidTable = MibTable((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 15), )
if mibBuilder.loadTexts: connectionPidTable.setStatus('mandatory')
connectionPidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 15, 1), ).setIndexNames((0, "CROSSSTREAM-MIB", "StreamDirection"), (0, "CROSSSTREAM-MIB", "StreamIndex"), (0, "CROSSSTREAM-MIB", "ProgIndex"), (0, "CROSSSTREAM-MIB", "PidIndex"), (0, "CROSSSTREAM-MIB", "ConnectionIndex"))
if mibBuilder.loadTexts: connectionPidEntry.setStatus('mandatory')
connectionPidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4962, 2, 1, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionPidIndex.setStatus('mandatory')
cstrmOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,1)).setObjects(("CROSSSTREAM-MIB", "cstrmAirTemp"), ("CROSSSTREAM-MIB", "cstrmCoreRegTemp"), ("CROSSSTREAM-MIB", "cstrm3VRegTemp"), ("CROSSSTREAM-MIB", "cstrmHotICTemp"))
cstrmCoolFail = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,2))
cstrmPowerMonitor = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,3)).setObjects(("CROSSSTREAM-MIB", "cstrm5VCoreVoltage"), ("CROSSSTREAM-MIB", "cstrm3VCoreVoltage"), ("CROSSSTREAM-MIB", "cstrm3VIOVoltage"))
cstrmATMPhyTrap = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,4)).setObjects(("IF-MIB", "ifIndex"), ("CROSSSTREAM-MIB", "cstrmATMPhyTrapID"), ("CROSSSTREAM-MIB", "cstrmATMPhyTrapStatus"))
cstrmOAMVPTrap = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,5)).setObjects(("IF-MIB", "ifIndex"), ("CROSSSTREAM-MIB", "cstrmOAMVPTrapID"), ("CROSSSTREAM-MIB", "atmStreamVpi"), ("CROSSSTREAM-MIB", "cstrmOAMVPTrapStatus"))
cstrmOAMVCTrap = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,6)).setObjects(("IF-MIB", "ifIndex"), ("CROSSSTREAM-MIB", "cstrmOAMVCTrapID"), ("CROSSSTREAM-MIB", "atmStreamVpi"), ("CROSSSTREAM-MIB", "atmStreamVci"), ("CROSSSTREAM-MIB", "cstrmOAMVCTrapStatus"))
cstrmSONETTrap = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,7)).setObjects(("IF-MIB", "ifIndex"), ("CROSSSTREAM-MIB", "cstrmSONETTrapID"), ("CROSSSTREAM-MIB", "cstrmSONETTrapStatus"))
cstrmActDeActTrap = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,8)).setObjects(("IF-MIB", "ifIndex"), ("CROSSSTREAM-MIB", "cstrmActDeActTrapID"), ("CROSSSTREAM-MIB", "cstrmActDeActTrapStatus"))
cstrmIngressPidsChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4962, 2, 1, 3) + (0,9)).setObjects(("IF-MIB", "ifIndex"), ("CROSSSTREAM-MIB", "cstrmIngressPidsChangedTrapID"), ("CROSSSTREAM-MIB", "cstrmIngressPidsChangedTrapStatus"))
mibBuilder.exportSymbols("CROSSSTREAM-MIB", deviceUpTime=deviceUpTime, cstrmConnStatus=cstrmConnStatus, deviceTime=deviceTime, atmStreamVpi=atmStreamVpi, asiStreamChannel=asiStreamChannel, ProgIndex=ProgIndex, cstrmConnIndex=cstrmConnIndex, ingressPidIndex=ingressPidIndex, ConnectionIndex=ConnectionIndex, pidNextTable=pidNextTable, ingressStreamEntry=ingressStreamEntry, ingressStreamIndexVal=ingressStreamIndexVal, pidTableID=pidTableID, products=products, ConnectionStatus=ConnectionStatus, cstrmOverTemp=cstrmOverTemp, cstrmIngressPidsChangedTrap=cstrmIngressPidsChangedTrap, atmStreamVci=atmStreamVci, cstrmDiags=cstrmDiags, crossStream=crossStream, vsarConfigEntry=vsarConfigEntry, pidTable=pidTable, cstrmStreamGroup=cstrmStreamGroup, activeAtmStreamsNumber=activeAtmStreamsNumber, deviceModelNum=deviceModelNum, cstrmIngressPidsChangedTrapStatus=cstrmIngressPidsChangedTrapStatus, pidEntry=pidEntry, deviceHwVer=deviceHwVer, maxAsiStreamsNumber=maxAsiStreamsNumber, connectionProgTable=connectionProgTable, connectionProgEntry=connectionProgEntry, cstrmCoreRegTemp=cstrmCoreRegTemp, pidNumber=pidNumber, cstrmControl=cstrmControl, progTable=progTable, progNextEntry=progNextEntry, cstrm3VIOVoltage=cstrm3VIOVoltage, StreamIndex=StreamIndex, pidRate=pidRate, atmStreamEntry=atmStreamEntry, connectionStreamTable=connectionStreamTable, activePidsNumber=activePidsNumber, cstrmOAMVPTrapID=cstrmOAMVPTrapID, maxPidsNumber=maxPidsNumber, atmStreamTable=atmStreamTable, asiStreamEntry=asiStreamEntry, vsarReset=vsarReset, usedPidsNumber=usedPidsNumber, ingressStreamCellRate=ingressStreamCellRate, cstrmOAMVCTrap=cstrmOAMVCTrap, cstrmActDeActTrapStatus=cstrmActDeActTrapStatus, PidIndex=PidIndex, deviceName=deviceName, cstrmATMPhyTrap=cstrmATMPhyTrap, cstrmEvents=cstrmEvents, progNumber=progNumber, cstrmOAMVCTrapID=cstrmOAMVCTrapID, connectionProgIndex=connectionProgIndex, deviceReset=deviceReset, egressStreamEntry=egressStreamEntry, maxConnectionsNumber=maxConnectionsNumber, asiStreamTable=asiStreamTable, cstrmAirTemp=cstrmAirTemp, common=common, StreamType=StreamType, pidStatus=pidStatus, deviceSerialNum=deviceSerialNum, deviceGwAddress=deviceGwAddress, ingressProgIndex=ingressProgIndex, vsarConfigType=vsarConfigType, asiStreamPort=asiStreamPort, vsarConfigIndex=vsarConfigIndex, cstrmATMPhyTrapStatus=cstrmATMPhyTrapStatus, egressStreamTable=egressStreamTable, cstrmConnEntry=cstrmConnEntry, activeProgsNumber=activeProgsNumber, cstrmInfo=cstrmInfo, deviceIpNetmask=deviceIpNetmask, activeAsiStreamsNumber=activeAsiStreamsNumber, progTsRate=progTsRate, maxAtmStreamsNumber=maxAtmStreamsNumber, egressStreamJitter=egressStreamJitter, progIndex=progIndex, egressStreamNumBufs=egressStreamNumBufs, connectionPidIndex=connectionPidIndex, egressStreamBufSize=egressStreamBufSize, connectionPidTable=connectionPidTable, cstrmActDeActTrapID=cstrmActDeActTrapID, pcrAdjust=pcrAdjust, cstrmSONETTrapID=cstrmSONETTrapID, progName=progName, progNextIndex=progNextIndex, deviceIpAddress=deviceIpAddress, egressProgNum=egressProgNum, vsarConfigTable=vsarConfigTable, ingressState=ingressState, cstrmSONETTrap=cstrmSONETTrap, cstrmSONETTrapStatus=cstrmSONETTrapStatus, cstrmCoolFail=cstrmCoolFail, pidIndex=pidIndex, cstrmIngressPidsChangedTrapID=cstrmIngressPidsChangedTrapID, cstrmConnNextIndex=cstrmConnNextIndex, progStatus=progStatus, streamNextIndex=streamNextIndex, deviceHostAddress=deviceHostAddress, streamTable=streamTable, egressStreamTsRate=egressStreamTsRate, egressStreamBufThreshold=egressStreamBufThreshold, egressState=egressState, device=device, egressStreamIndexVal=egressStreamIndexVal, StreamDirection=StreamDirection, cstrmStreamPrivate=cstrmStreamPrivate, usedConnectionsNumber=usedConnectionsNumber, maxProgsNumber=maxProgsNumber, cstrmOAMVPTrapStatus=cstrmOAMVPTrapStatus, ingressStreamTable=ingressStreamTable, pidNextIndex=pidNextIndex, cstrmOAMVPTrap=cstrmOAMVPTrap, streamStatus=streamStatus, cstrmOAMVCTrapStatus=cstrmOAMVCTrapStatus, StreamState=StreamState, cstrm3VRegTemp=cstrm3VRegTemp, usedAtmStreamsNumber=usedAtmStreamsNumber, cstrmATMPhyTrapID=cstrmATMPhyTrapID, cstrmHotICTemp=cstrmHotICTemp, streamEntry=streamEntry, progNextTable=progNextTable, egressPidNum=egressPidNum, cstrmActDeActTrap=cstrmActDeActTrap, cstrmPowerMonitor=cstrmPowerMonitor, cstrm3VCoreVoltage=cstrm3VCoreVoltage, cstrmConnTable=cstrmConnTable, pidNextEntry=pidNextEntry, streamName=streamName, usedAsiStreamsNumber=usedAsiStreamsNumber, streamType=streamType, connectionPidEntry=connectionPidEntry, deviceFwVer=deviceFwVer, cstrm5VCoreVoltage=cstrm5VCoreVoltage, progTsLen=progTsLen, connectionStreamIndex=connectionStreamIndex, usedProgsNumber=usedProgsNumber, progEntry=progEntry, vsarConfigAction=vsarConfigAction, streamIndex=streamIndex, artel=artel, connectionStreamEntry=connectionStreamEntry)
