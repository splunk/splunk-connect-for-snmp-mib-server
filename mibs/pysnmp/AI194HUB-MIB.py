#
# PySNMP MIB module AI194HUB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AI194HUB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, ModuleIdentity, enterprises, Integer32, MibIdentifier, NotificationType, IpAddress, Gauge32, TimeTicks, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "ModuleIdentity", "enterprises", "Integer32", "MibIdentifier", "NotificationType", "IpAddress", "Gauge32", "TimeTicks", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 1))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4))
aiISISGre = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 5))
aiManager = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 6))
aiSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 7))
aiSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 8))
aiGroup194 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194))
aiGroup194Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7))
aiGroup194Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 1))
aiGroup194Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 2))
aiGroup194Ver73 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 3))
aiGroup194Ver74 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 4, 194, 7, 4))
aiHub = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 3))
if mibBuilder.loadTexts: aiHub.setLastUpdated('9505081700Z')
if mibBuilder.loadTexts: aiHub.setOrganization('Applied Innovation Incorporated')
aiHubTwistedPairPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubTwistedPairPortNumber.setStatus('mandatory')
aiHubNonTwistedPairPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubNonTwistedPairPortNumber.setStatus('mandatory')
aiHubPortTable = MibTable((1, 3, 6, 1, 4, 1, 539, 3, 3), )
if mibBuilder.loadTexts: aiHubPortTable.setStatus('mandatory')
aiHubPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 3, 3, 1), ).setIndexNames((0, "AI194HUB-MIB", "aiHubPortIndex"))
if mibBuilder.loadTexts: aiHubPortEntry.setStatus('mandatory')
aiHubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortIndex.setStatus('mandatory')
aiHubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortName.setStatus('mandatory')
aiHubPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortAdminState.setStatus('mandatory')
aiHubPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notAutoPartitioned", 2), ("autoPartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortAutoPartitionState.setStatus('mandatory')
aiHubPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortErrors.setStatus('mandatory')
aiHubPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortCollisions.setStatus('mandatory')
aiHubPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortStatus.setStatus('mandatory')
aiHubPortLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortLinkErrors.setStatus('mandatory')
aiHubPortShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortShortPackets.setStatus('mandatory')
aiHubPortJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortJabbers.setStatus('mandatory')
aiHubPortPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortPartition.setStatus('mandatory')
aiHubPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortZero.setStatus('mandatory')
aiHubPortZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 3, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiHubPortZeroTime.setStatus('mandatory')
aiHubLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubLogMessage.setStatus('mandatory')
aiHubPortAutoPartitionLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coll31", 1), ("coll63", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiHubPortAutoPartitionLimit.setStatus('mandatory')
mibBuilder.exportSymbols("AI194HUB-MIB", aiManager=aiManager, aiHubPortShortPackets=aiHubPortShortPackets, aiHubPortAdminState=aiHubPortAdminState, aiGroup=aiGroup, aiHubPortTable=aiHubPortTable, aiGroup194Ver72=aiGroup194Ver72, aiSystem=aiSystem, aiHubPortStatus=aiHubPortStatus, aiHubPortJabbers=aiHubPortJabbers, aiHub=aiHub, aiHubPortPartition=aiHubPortPartition, aiGroup194Ver7=aiGroup194Ver7, aiGroup194=aiGroup194, aiHubPortErrors=aiHubPortErrors, aiHubPortName=aiHubPortName, aiHubNonTwistedPairPortNumber=aiHubNonTwistedPairPortNumber, aiProxy=aiProxy, aiHubPortIndex=aiHubPortIndex, aiHubPortEntry=aiHubPortEntry, aiHubPortLinkErrors=aiHubPortLinkErrors, aiSystemOID=aiSystemOID, aiISISGre=aiISISGre, PYSNMP_MODULE_ID=aiHub, aii=aii, aiHubPortZeroTime=aiHubPortZeroTime, aiHubPortZero=aiHubPortZero, aiSoftware=aiSoftware, aiHubPortAutoPartitionLimit=aiHubPortAutoPartitionLimit, aiGroup194Ver73=aiGroup194Ver73, aiHubPortCollisions=aiHubPortCollisions, aiGroup194Ver74=aiGroup194Ver74, aiGroup194Ver71=aiGroup194Ver71, aiHubPortAutoPartitionState=aiHubPortAutoPartitionState, aiHubTwistedPairPortNumber=aiHubTwistedPairPortNumber, aiHubLogMessage=aiHubLogMessage)
