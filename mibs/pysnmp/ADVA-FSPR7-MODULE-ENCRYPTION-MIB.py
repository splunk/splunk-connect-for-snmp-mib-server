#
# PySNMP MIB module ADVA-FSPR7-MODULE-ENCRYPTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADVA-FSPR7-MODULE-ENCRYPTION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:59:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
entityEqptSlotNo, entityEqptExtNo, entityFacilityExtNo, entityFacilityClassName, entityEqptClassName, entityEqptShelfNo, entityFacilityShelfNo, entityFacilityPortNo, entityEqptPortNo, entityFacilitySlotNo = mibBuilder.importSymbols("ADVA-FSPR7-MIB", "entityEqptSlotNo", "entityEqptExtNo", "entityFacilityExtNo", "entityFacilityClassName", "entityEqptClassName", "entityEqptShelfNo", "entityFacilityShelfNo", "entityFacilityPortNo", "entityEqptPortNo", "entityFacilitySlotNo")
entityIndex, EntityIndex, fspR7 = mibBuilder.importSymbols("ADVA-MIB", "entityIndex", "EntityIndex", "fspR7")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Counter32, Unsigned32, IpAddress, ModuleIdentity, iso, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Unsigned32", "IpAddress", "ModuleIdentity", "iso", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "Counter64")
TextualConvention, DateAndTime, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue")
moduleEncryptionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5))
moduleEncryptionMIB.setRevisions(('2013-08-20 00:00', '2011-02-16 00:00',))
if mibBuilder.loadTexts: moduleEncryptionMIB.setLastUpdated('201308200000Z')
if mibBuilder.loadTexts: moduleEncryptionMIB.setOrganization('ADVA Optical Networking')
encryptionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1))
moduleEncryptionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2))
portEncryptionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3))
encryptionPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4))
class CryptoFspR7EnableDisable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class CryptoFspR7EnableDisableCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class CryptoFspR7EncryptionReset(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("rtf", 2))

class CryptoFspR7EncryptionResetCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capRtf", 2))

class CryptoFspR7EncryptionSwitch(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprCryptoOff", 2))

class CryptoFspR7EncryptionSwitchCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprCryptoOff", 2))

class CryptoFspR7ForceKeyExchange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprKeyExchg", 2))

class CryptoFspR7ForceKeyExchangeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprKeyExchg", 2))

class CryptoFspR7KeyExchangeForcedClear(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("reset", 2))

class CryptoFspR7KeyExchangeForcedClearCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capReset", 2))

class CryptoFspR7SelfTestOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprSelfTest", 2))

class CryptoFspR7SelfTestOperationCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprSelfTest", 2))

class CryptoFspR7SessionKeyLifetime(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("undefined", 0), ("lifetime30min", 1), ("lifetime1h", 2), ("lifetime2h", 3), ("lifetime3h", 4), ("lifetime6h", 5), ("lifetime12h", 6), ("lifetime1d", 7), ("lifetime2d", 8), ("lifetime3d", 9), ("lifetime1w", 10), ("lifetime2w", 11), ("lifetime3w", 12), ("lifetimeMax", 13))

class CryptoFspR7SessionKeyLifetimeCaps(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLifetime30min", 1), ("capLifetime1h", 2), ("capLifetime2h", 3), ("capLifetime3h", 4), ("capLifetime6h", 5), ("capLifetime12h", 6), ("capLifetime1d", 7), ("capLifetime2d", 8), ("capLifetime3d", 9), ("capLifetime1w", 10), ("capLifetime2w", 11), ("capLifetime3w", 12), ("capLifetimeMax", 13))

cryptoOfficerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoOfficerPassword.setStatus('current')
cryptoOfficerPasswordError = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("passwdOk", 1), ("passwdInvalid", 2), ("passwdRejected", 3), ("passwdNotInit", 4), ("passwdTooSimple", 5), ("passwdValidationAborted", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoOfficerPasswordError.setStatus('current')
cryptoOfficerPasswordReqId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoOfficerPasswordReqId.setStatus('current')
cryptoModuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10), )
if mibBuilder.loadTexts: cryptoModuleConfigTable.setStatus('current')
cryptoModuleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigIndex"))
if mibBuilder.loadTexts: cryptoModuleConfigEntry.setStatus('current')
cryptoModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoModuleConfigIndex.setStatus('current')
cryptoModuleConfigCryptoOfficerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigCryptoOfficerPassword.setStatus('current')
cryptoModuleConfigResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 3), CryptoFspR7EncryptionReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigResetToFactory.setStatus('current')
cryptoModuleConfigFirmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 4), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigFirmwareUpdateState.setStatus('current')
cryptoModuleConfigFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigFirmwareVersion.setStatus('current')
cryptoModuleConfigSelfTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 6), CryptoFspR7SelfTestOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigSelfTestOperation.setStatus('current')
cryptoModuleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11), )
if mibBuilder.loadTexts: cryptoModuleStatusTable.setStatus('current')
cryptoModuleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigIndex"))
if mibBuilder.loadTexts: cryptoModuleStatusEntry.setStatus('current')
cryptoModuleStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoModuleStatusIndex.setStatus('current')
cryptoModuleStatusFailureLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusFailureLoginCount.setStatus('current')
cryptoModuleStatusSuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusSuccessfulLoginDateAndTime.setStatus('current')
cryptoModuleStatusUnsuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusUnsuccessfulLoginDateAndTime.setStatus('current')
cryptoModuleStatusResetToFactoryCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 5), CryptoFspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusResetToFactoryCapability.setStatus('current')
cryptoModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20), )
if mibBuilder.loadTexts: cryptoModuleTable.setStatus('current')
cryptoModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: cryptoModuleEntry.setStatus('current')
cryptoModuleCryptoOfficerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleCryptoOfficerPassword.setStatus('current')
cryptoModuleResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 2), CryptoFspR7EncryptionReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleResetToFactory.setStatus('current')
cryptoModuleFirmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 3), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleFirmwareUpdateState.setStatus('current')
cryptoModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleFirmwareVersion.setStatus('current')
cryptoModuleSelfTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 5), CryptoFspR7SelfTestOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleSelfTestOperation.setStatus('current')
cryptoModuleFailureLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleFailureLoginCount.setStatus('current')
cryptoModuleSuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleSuccessfulLoginDateAndTime.setStatus('current')
cryptoModuleUnsuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleUnsuccessfulLoginDateAndTime.setStatus('current')
cryptoModuleCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21), )
if mibBuilder.loadTexts: cryptoModuleCapTable.setStatus('current')
cryptoModuleCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: cryptoModuleCapEntry.setStatus('current')
cryptoModuleCapCryptoOfficerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapCryptoOfficerPassword.setStatus('current')
cryptoModuleCapResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 2), CryptoFspR7EncryptionResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapResetToFactory.setStatus('current')
cryptoModuleCapFirmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 3), CryptoFspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapFirmwareUpdateState.setStatus('current')
cryptoModuleCapFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapFirmwareVersion.setStatus('current')
cryptoModuleCapSelfTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 5), CryptoFspR7SelfTestOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapSelfTestOperation.setStatus('current')
cryptoPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12), )
if mibBuilder.loadTexts: cryptoPortConfigTable.setStatus('current')
cryptoPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigIndex"))
if mibBuilder.loadTexts: cryptoPortConfigEntry.setStatus('current')
cryptoPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoPortConfigIndex.setStatus('current')
cryptoPortConfigAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigAuthKey.setStatus('current')
cryptoPortConfigAuthKeyLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 3), CryptoFspR7SessionKeyLifetime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigAuthKeyLifeTime.setStatus('current')
cryptoPortConfigEncryptionOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 4), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigEncryptionOffState.setStatus('current')
cryptoPortConfigEncryptionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 5), CryptoFspR7EncryptionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigEncryptionOff.setStatus('current')
cryptoPortConfigForceKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 6), CryptoFspR7ForceKeyExchange()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigForceKeyExchange.setStatus('current')
cryptoPortConfigKeyExchangeForcedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 7), CryptoFspR7KeyExchangeForcedClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigKeyExchangeForcedClear.setStatus('current')
cryptoPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13), )
if mibBuilder.loadTexts: cryptoPortStatusTable.setStatus('current')
cryptoPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusIndex"))
if mibBuilder.loadTexts: cryptoPortStatusEntry.setStatus('current')
cryptoPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoPortStatusIndex.setStatus('current')
cryptoPortStatusEncryptionOffTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 2), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusEncryptionOffTimeRemaining.setStatus('current')
cryptoPortStatusFailureKeyExchangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusFailureKeyExchangeCount.setStatus('current')
cryptoPortStatusSuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusSuccessfulKeyExchangeDateAndTime.setStatus('current')
cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime.setStatus('current')
cryptoPortStatusAuthKeyLifeTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusAuthKeyLifeTimeRemaining.setStatus('current')
cryptoPortStatusEncryptionOffCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 7), CryptoFspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusEncryptionOffCapability.setStatus('current')
cryptoPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20), )
if mibBuilder.loadTexts: cryptoPortTable.setStatus('current')
cryptoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryptoPortEntry.setStatus('current')
cryptoPortAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortAuthKey.setStatus('current')
cryptoPortAuthKeyLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 2), CryptoFspR7SessionKeyLifetime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortAuthKeyLifeTime.setStatus('current')
cryptoPortEncryptionOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 3), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortEncryptionOffState.setStatus('current')
cryptoPortEncryptionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 4), CryptoFspR7EncryptionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortEncryptionOff.setStatus('current')
cryptoPortForceKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 5), CryptoFspR7ForceKeyExchange()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortForceKeyExchange.setStatus('current')
cryptoPortKeyExchangeForcedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 6), CryptoFspR7KeyExchangeForcedClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortKeyExchangeForcedClear.setStatus('current')
cryptoPortEncryptionOffTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortEncryptionOffTimeRemaining.setStatus('current')
cryptoPortFailureKeyExchangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortFailureKeyExchangeCount.setStatus('current')
cryptoPortSuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortSuccessfulKeyExchangeDateAndTime.setStatus('current')
cryptoPortUnsuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortUnsuccessfulKeyExchangeDateAndTime.setStatus('current')
cryptoPortAuthKeyLifeTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortAuthKeyLifeTimeRemaining.setStatus('current')
cryptoPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21), )
if mibBuilder.loadTexts: cryptoPortCapTable.setStatus('current')
cryptoPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryptoPortCapEntry.setStatus('current')
cryptoPortCapAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapAuthKey.setStatus('current')
cryptoPortCapAuthKeyLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 2), CryptoFspR7SessionKeyLifetimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapAuthKeyLifeTime.setStatus('current')
cryptoPortCapEncryptionOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 3), CryptoFspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapEncryptionOffState.setStatus('current')
cryptoPortCapEncryptionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 4), CryptoFspR7EncryptionSwitchCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapEncryptionOff.setStatus('current')
cryptoPortCapForceKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 5), CryptoFspR7ForceKeyExchangeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapForceKeyExchange.setStatus('current')
cryptoPortCapKeyExchangeForcedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 6), CryptoFspR7KeyExchangeForcedClearCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapKeyExchangeForcedClear.setStatus('current')
intervalEncryptionSublayerPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1), )
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minTable.setStatus('current')
intervalEncryptionSublayerPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minNumber"))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEntry.setStatus('current')
intervalEncryptionSublayerPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minNumber.setStatus('current')
intervalEncryptionSublayerPm15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunSeconds.setStatus('current')
intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds.setStatus('current')
intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds.setStatus('current')
intervalEncryptionSublayerPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minValidFlag.setStatus('current')
intervalEncryptionSublayerPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minTimeStamp.setStatus('current')
intervalEncryptionSublayerPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2), )
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayTable.setStatus('current')
intervalEncryptionSublayerPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayNumber"))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEntry.setStatus('current')
intervalEncryptionSublayerPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayNumber.setStatus('current')
intervalEncryptionSublayerPm1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunSeconds.setStatus('current')
intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds.setStatus('current')
intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds.setStatus('current')
intervalEncryptionSublayerPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayValidFlag.setStatus('current')
intervalEncryptionSublayerPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayTimeStamp.setStatus('current')
currentEncryptionSublayerPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3), )
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minTable.setStatus('current')
currentEncryptionSublayerPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEntry.setStatus('current')
currentEncryptionSublayerPm15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunSeconds.setStatus('current')
currentEncryptionSublayerPm15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunErrorSeconds.setStatus('current')
currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds.setStatus('current')
currentEncryptionSublayerPm15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minElapsedTime.setStatus('current')
currentEncryptionSublayerPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4), )
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayTable.setStatus('current')
currentEncryptionSublayerPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEntry.setStatus('current')
currentEncryptionSublayerPm1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunSeconds.setStatus('current')
currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds.setStatus('current')
currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds.setStatus('current')
currentEncryptionSublayerPm1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayElapsedTime.setStatus('current')
cryFacilityCurrent15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10), )
if mibBuilder.loadTexts: cryFacilityCurrent15minTable.setStatus('current')
cryFacilityCurrent15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryFacilityCurrent15minEntry.setStatus('current')
cryFacilityCurrent15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunSeconds.setStatus('current')
cryFacilityCurrent15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunErrorSeconds.setStatus('current')
cryFacilityCurrent15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunDegradeSeconds.setStatus('current')
cryFacilityCurrent15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minElapsedTime.setStatus('current')
cryFacilityCurrent1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11), )
if mibBuilder.loadTexts: cryFacilityCurrent1dayTable.setStatus('current')
cryFacilityCurrent1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryFacilityCurrent1dayEntry.setStatus('current')
cryFacilityCurrent1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunSeconds.setStatus('current')
cryFacilityCurrent1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunErrorSeconds.setStatus('current')
cryFacilityCurrent1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunDegradeSeconds.setStatus('current')
cryFacilityCurrent1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayElapsedTime.setStatus('current')
cryFacilityHistorical15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12), )
if mibBuilder.loadTexts: cryFacilityHistorical15minTable.setStatus('current')
cryFacilityHistorical15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryFacilityHistorical15minNumber"))
if mibBuilder.loadTexts: cryFacilityHistorical15minEntry.setStatus('current')
cryFacilityHistorical15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cryFacilityHistorical15minNumber.setStatus('current')
cryFacilityHistorical15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunSeconds.setStatus('current')
cryFacilityHistorical15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunErrorSeconds.setStatus('current')
cryFacilityHistorical15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunDegradeSeconds.setStatus('current')
cryFacilityHistorical15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minValidFlag.setStatus('current')
cryFacilityHistorical15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minTimeStamp.setStatus('current')
cryFacilityHistorical1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13), )
if mibBuilder.loadTexts: cryFacilityHistorical1dayTable.setStatus('current')
cryFacilityHistorical1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryFacilityHistorical1dayNumber"))
if mibBuilder.loadTexts: cryFacilityHistorical1dayEntry.setStatus('current')
cryFacilityHistorical1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: cryFacilityHistorical1dayNumber.setStatus('current')
cryFacilityHistorical1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunSeconds.setStatus('current')
cryFacilityHistorical1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunErrorSeconds.setStatus('current')
cryFacilityHistorical1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunDegradeSeconds.setStatus('current')
cryFacilityHistorical1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayValidFlag.setStatus('current')
cryFacilityHistorical1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayTimeStamp.setStatus('current')
encryptionMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 1))
encryptionMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 1, 1))
encryptionMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 1, 2))
encryptionMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 1, 1, 1)).setObjects(("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "encryptionMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionMIBCompliance = encryptionMIBCompliance.setStatus('current')
encryptionMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 1, 2, 1)).setObjects(("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoOfficerPassword"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigCryptoOfficerPassword"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigResetToFactory"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigFirmwareUpdateState"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigFirmwareVersion"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleStatusFailureLoginCount"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleStatusSuccessfulLoginDateAndTime"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleStatusUnsuccessfulLoginDateAndTime"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigAuthKey"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigAuthKeyLifeTime"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigEncryptionOffState"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigEncryptionOff"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigForceKeyExchange"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigKeyExchangeForcedClear"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusEncryptionOffTimeRemaining"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusFailureKeyExchangeCount"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusSuccessfulKeyExchangeDateAndTime"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusAuthKeyLifeTimeRemaining"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minEncryptionRunSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minValidFlag"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minTimeStamp"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayEncryptionRunSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayValidFlag"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayTimeStamp"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm15minEncryptionRunSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm15minEncryptionRunErrorSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm15minElapsedTime"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm1dayEncryptionRunSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds"), ("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "currentEncryptionSublayerPm1dayElapsedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionMIBGroup = encryptionMIBGroup.setStatus('current')
mibBuilder.exportSymbols("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", cryptoModuleCapFirmwareUpdateState=cryptoModuleCapFirmwareUpdateState, cryptoPortConfigTable=cryptoPortConfigTable, cryptoModuleStatusFailureLoginCount=cryptoModuleStatusFailureLoginCount, cryptoPortAuthKey=cryptoPortAuthKey, cryptoModuleStatusSuccessfulLoginDateAndTime=cryptoModuleStatusSuccessfulLoginDateAndTime, intervalEncryptionSublayerPm1dayTable=intervalEncryptionSublayerPm1dayTable, cryptoPortCapForceKeyExchange=cryptoPortCapForceKeyExchange, cryptoPortStatusIndex=cryptoPortStatusIndex, cryptoPortConfigEncryptionOff=cryptoPortConfigEncryptionOff, cryFacilityCurrent15minEncryptionRunErrorSeconds=cryFacilityCurrent15minEncryptionRunErrorSeconds, cryFacilityCurrent1dayEncryptionRunDegradeSeconds=cryFacilityCurrent1dayEncryptionRunDegradeSeconds, cryFacilityHistorical15minEncryptionRunDegradeSeconds=cryFacilityHistorical15minEncryptionRunDegradeSeconds, encryptionMIBConformance=encryptionMIBConformance, cryptoModuleTable=cryptoModuleTable, cryptoPortKeyExchangeForcedClear=cryptoPortKeyExchangeForcedClear, cryptoPortStatusEncryptionOffCapability=cryptoPortStatusEncryptionOffCapability, cryptoPortStatusEntry=cryptoPortStatusEntry, currentEncryptionSublayerPm15minEncryptionRunErrorSeconds=currentEncryptionSublayerPm15minEncryptionRunErrorSeconds, cryptoPortConfigEncryptionOffState=cryptoPortConfigEncryptionOffState, cryptoOfficerPasswordError=cryptoOfficerPasswordError, currentEncryptionSublayerPm15minEncryptionRunSeconds=currentEncryptionSublayerPm15minEncryptionRunSeconds, cryFacilityHistorical1dayValidFlag=cryFacilityHistorical1dayValidFlag, cryptoModuleCapSelfTestOperation=cryptoModuleCapSelfTestOperation, intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds=intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds, currentEncryptionSublayerPm15minElapsedTime=currentEncryptionSublayerPm15minElapsedTime, encryptionMIBGroup=encryptionMIBGroup, CryptoFspR7EncryptionResetCaps=CryptoFspR7EncryptionResetCaps, cryFacilityHistorical15minTimeStamp=cryFacilityHistorical15minTimeStamp, cryFacilityHistorical1dayTable=cryFacilityHistorical1dayTable, currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds=currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds, cryFacilityHistorical1dayEncryptionRunDegradeSeconds=cryFacilityHistorical1dayEncryptionRunDegradeSeconds, intervalEncryptionSublayerPm15minTimeStamp=intervalEncryptionSublayerPm15minTimeStamp, cryptoPortCapEncryptionOff=cryptoPortCapEncryptionOff, cryFacilityCurrent15minEncryptionRunDegradeSeconds=cryFacilityCurrent15minEncryptionRunDegradeSeconds, cryptoPortStatusTable=cryptoPortStatusTable, intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds=intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds, intervalEncryptionSublayerPm15minValidFlag=intervalEncryptionSublayerPm15minValidFlag, cryptoPortConfigForceKeyExchange=cryptoPortConfigForceKeyExchange, cryFacilityCurrent1dayEntry=cryFacilityCurrent1dayEntry, intervalEncryptionSublayerPm1dayValidFlag=intervalEncryptionSublayerPm1dayValidFlag, moduleEncryptionObjects=moduleEncryptionObjects, cryFacilityCurrent1dayEncryptionRunErrorSeconds=cryFacilityCurrent1dayEncryptionRunErrorSeconds, cryptoModuleFirmwareVersion=cryptoModuleFirmwareVersion, currentEncryptionSublayerPm1dayEntry=currentEncryptionSublayerPm1dayEntry, cryFacilityHistorical15minTable=cryFacilityHistorical15minTable, cryptoPortConfigAuthKey=cryptoPortConfigAuthKey, cryptoPortEncryptionOff=cryptoPortEncryptionOff, moduleEncryptionMIB=moduleEncryptionMIB, intervalEncryptionSublayerPm15minTable=intervalEncryptionSublayerPm15minTable, cryptoPortCapTable=cryptoPortCapTable, cryptoPortStatusAuthKeyLifeTimeRemaining=cryptoPortStatusAuthKeyLifeTimeRemaining, intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds=intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds, cryFacilityHistorical1dayEncryptionRunSeconds=cryFacilityHistorical1dayEncryptionRunSeconds, cryptoPortUnsuccessfulKeyExchangeDateAndTime=cryptoPortUnsuccessfulKeyExchangeDateAndTime, cryptoOfficerPasswordReqId=cryptoOfficerPasswordReqId, cryptoPortEncryptionOffState=cryptoPortEncryptionOffState, intervalEncryptionSublayerPm15minEncryptionRunSeconds=intervalEncryptionSublayerPm15minEncryptionRunSeconds, intervalEncryptionSublayerPm15minNumber=intervalEncryptionSublayerPm15minNumber, cryptoPortSuccessfulKeyExchangeDateAndTime=cryptoPortSuccessfulKeyExchangeDateAndTime, cryFacilityCurrent1dayEncryptionRunSeconds=cryFacilityCurrent1dayEncryptionRunSeconds, cryptoPortCapKeyExchangeForcedClear=cryptoPortCapKeyExchangeForcedClear, cryFacilityCurrent1dayElapsedTime=cryFacilityCurrent1dayElapsedTime, cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime=cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime, CryptoFspR7EnableDisableCaps=CryptoFspR7EnableDisableCaps, currentEncryptionSublayerPm15minEntry=currentEncryptionSublayerPm15minEntry, cryptoPortForceKeyExchange=cryptoPortForceKeyExchange, cryFacilityHistorical1dayNumber=cryFacilityHistorical1dayNumber, cryFacilityHistorical1dayTimeStamp=cryFacilityHistorical1dayTimeStamp, cryFacilityHistorical1dayEntry=cryFacilityHistorical1dayEntry, CryptoFspR7KeyExchangeForcedClearCaps=CryptoFspR7KeyExchangeForcedClearCaps, cryptoModuleStatusEntry=cryptoModuleStatusEntry, cryptoModuleConfigFirmwareVersion=cryptoModuleConfigFirmwareVersion, cryptoPortConfigIndex=cryptoPortConfigIndex, cryFacilityCurrent1dayTable=cryFacilityCurrent1dayTable, cryFacilityHistorical15minValidFlag=cryFacilityHistorical15minValidFlag, portEncryptionObjects=portEncryptionObjects, encryptionMIBCompliance=encryptionMIBCompliance, cryptoModuleConfigSelfTestOperation=cryptoModuleConfigSelfTestOperation, intervalEncryptionSublayerPm1dayNumber=intervalEncryptionSublayerPm1dayNumber, cryptoModuleConfigTable=cryptoModuleConfigTable, CryptoFspR7EncryptionSwitchCaps=CryptoFspR7EncryptionSwitchCaps, cryptoModuleCapEntry=cryptoModuleCapEntry, cryFacilityCurrent15minEncryptionRunSeconds=cryFacilityCurrent15minEncryptionRunSeconds, cryptoModuleSuccessfulLoginDateAndTime=cryptoModuleSuccessfulLoginDateAndTime, cryptoPortFailureKeyExchangeCount=cryptoPortFailureKeyExchangeCount, cryptoPortConfigKeyExchangeForcedClear=cryptoPortConfigKeyExchangeForcedClear, cryptoPortConfigEntry=cryptoPortConfigEntry, intervalEncryptionSublayerPm1dayTimeStamp=intervalEncryptionSublayerPm1dayTimeStamp, currentEncryptionSublayerPm1dayEncryptionRunSeconds=currentEncryptionSublayerPm1dayEncryptionRunSeconds, cryptoModuleConfigFirmwareUpdateState=cryptoModuleConfigFirmwareUpdateState, cryptoPortEntry=cryptoPortEntry, cryptoModuleConfigIndex=cryptoModuleConfigIndex, CryptoFspR7SessionKeyLifetime=CryptoFspR7SessionKeyLifetime, cryptoPortAuthKeyLifeTime=cryptoPortAuthKeyLifeTime, intervalEncryptionSublayerPm1dayEntry=intervalEncryptionSublayerPm1dayEntry, cryptoPortTable=cryptoPortTable, CryptoFspR7ForceKeyExchange=CryptoFspR7ForceKeyExchange, CryptoFspR7SelfTestOperation=CryptoFspR7SelfTestOperation, cryFacilityHistorical15minEntry=cryFacilityHistorical15minEntry, cryptoModuleFirmwareUpdateState=cryptoModuleFirmwareUpdateState, cryptoPortEncryptionOffTimeRemaining=cryptoPortEncryptionOffTimeRemaining, cryptoModuleCapTable=cryptoModuleCapTable, cryptoPortStatusFailureKeyExchangeCount=cryptoPortStatusFailureKeyExchangeCount, cryptoPortStatusSuccessfulKeyExchangeDateAndTime=cryptoPortStatusSuccessfulKeyExchangeDateAndTime, PYSNMP_MODULE_ID=moduleEncryptionMIB, cryptoModuleResetToFactory=cryptoModuleResetToFactory, cryptoModuleSelfTestOperation=cryptoModuleSelfTestOperation, cryptoModuleCapFirmwareVersion=cryptoModuleCapFirmwareVersion, cryFacilityHistorical15minNumber=cryFacilityHistorical15minNumber, cryptoModuleCryptoOfficerPassword=cryptoModuleCryptoOfficerPassword, cryptoModuleConfigEntry=cryptoModuleConfigEntry, CryptoFspR7SelfTestOperationCaps=CryptoFspR7SelfTestOperationCaps, cryFacilityCurrent15minTable=cryFacilityCurrent15minTable, currentEncryptionSublayerPm1dayElapsedTime=currentEncryptionSublayerPm1dayElapsedTime, cryptoModuleStatusUnsuccessfulLoginDateAndTime=cryptoModuleStatusUnsuccessfulLoginDateAndTime, cryptoModuleStatusResetToFactoryCapability=cryptoModuleStatusResetToFactoryCapability, encryptionMIBCompliances=encryptionMIBCompliances, encryptionMIBGroups=encryptionMIBGroups, cryptoOfficerPassword=cryptoOfficerPassword, CryptoFspR7EncryptionReset=CryptoFspR7EncryptionReset, cryptoPortCapAuthKeyLifeTime=cryptoPortCapAuthKeyLifeTime, cryFacilityCurrent15minEntry=cryFacilityCurrent15minEntry, cryptoModuleEntry=cryptoModuleEntry, cryFacilityHistorical1dayEncryptionRunErrorSeconds=cryFacilityHistorical1dayEncryptionRunErrorSeconds, currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds=currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds, cryptoPortCapEntry=cryptoPortCapEntry, cryptoModuleUnsuccessfulLoginDateAndTime=cryptoModuleUnsuccessfulLoginDateAndTime, intervalEncryptionSublayerPm1dayEncryptionRunSeconds=intervalEncryptionSublayerPm1dayEncryptionRunSeconds, cryptoPortAuthKeyLifeTimeRemaining=cryptoPortAuthKeyLifeTimeRemaining, cryptoModuleFailureLoginCount=cryptoModuleFailureLoginCount, cryFacilityHistorical15minEncryptionRunSeconds=cryFacilityHistorical15minEncryptionRunSeconds, cryptoPortConfigAuthKeyLifeTime=cryptoPortConfigAuthKeyLifeTime, cryptoPortStatusEncryptionOffTimeRemaining=cryptoPortStatusEncryptionOffTimeRemaining, CryptoFspR7KeyExchangeForcedClear=CryptoFspR7KeyExchangeForcedClear, CryptoFspR7SessionKeyLifetimeCaps=CryptoFspR7SessionKeyLifetimeCaps, cryptoModuleConfigResetToFactory=cryptoModuleConfigResetToFactory, cryptoModuleCapCryptoOfficerPassword=cryptoModuleCapCryptoOfficerPassword, cryptoModuleStatusTable=cryptoModuleStatusTable, CryptoFspR7EnableDisable=CryptoFspR7EnableDisable, intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds=intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds, cryFacilityHistorical15minEncryptionRunErrorSeconds=cryFacilityHistorical15minEncryptionRunErrorSeconds, cryptoModuleStatusIndex=cryptoModuleStatusIndex, cryptoModuleConfigCryptoOfficerPassword=cryptoModuleConfigCryptoOfficerPassword, cryptoModuleCapResetToFactory=cryptoModuleCapResetToFactory, currentEncryptionSublayerPm1dayTable=currentEncryptionSublayerPm1dayTable, encryptionMIB=encryptionMIB, CryptoFspR7EncryptionSwitch=CryptoFspR7EncryptionSwitch, cryptoPortCapAuthKey=cryptoPortCapAuthKey, cryptoPortCapEncryptionOffState=cryptoPortCapEncryptionOffState, currentEncryptionSublayerPm15minTable=currentEncryptionSublayerPm15minTable, currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds=currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds, cryFacilityCurrent15minElapsedTime=cryFacilityCurrent15minElapsedTime, intervalEncryptionSublayerPm15minEntry=intervalEncryptionSublayerPm15minEntry, CryptoFspR7ForceKeyExchangeCaps=CryptoFspR7ForceKeyExchangeCaps, encryptionPerformanceMonitoring=encryptionPerformanceMonitoring)
