#
# PySNMP MIB module CASTLEROCK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CASTLEROCK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, Counter32, NotificationType, Unsigned32, MibIdentifier, ObjectIdentity, enterprises, ModuleIdentity, NotificationType, Bits, Integer32, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Counter32", "NotificationType", "Unsigned32", "MibIdentifier", "ObjectIdentity", "enterprises", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
castleRock = MibIdentifier((1, 3, 6, 1, 4, 1, 56))
snmpc = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12))
snmpc_Events = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1)).setLabel("snmpc-Events")
addressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 2))
objectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 3))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 4))
mibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 5))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 6))
defunctGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 7))
availGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 8))
appGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 9))
global_Defaults = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 1)).setLabel("global-Defaults")
snmpc_Status_Polling = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 2)).setLabel("snmpc-Status-Polling")
snmpc_Threshold_Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 3)).setLabel("snmpc-Threshold-Alarm")
snmpc_System_Info = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 5)).setLabel("snmpc-System-Info")
snmpc_Mib_Compiler = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 6)).setLabel("snmpc-Mib-Compiler")
snmpc_App_Events = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 7)).setLabel("snmpc-App-Events")
respTime_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 1), Gauge32()).setLabel("respTime-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Poll.setStatus('mandatory')
respTime_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 2), Gauge32()).setLabel("respTime-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Web.setStatus('mandatory')
respTime_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 3), Gauge32()).setLabel("respTime-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Ftp.setStatus('mandatory')
respTime_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 4), Gauge32()).setLabel("respTime-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Smtp.setStatus('mandatory')
respTime_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 5), Gauge32()).setLabel("respTime-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Telnet.setStatus('mandatory')
respTime_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 6), Gauge32()).setLabel("respTime-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User1.setStatus('mandatory')
respTime_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 7), Gauge32()).setLabel("respTime-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User2.setStatus('mandatory')
pollOK_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 8), Counter32()).setLabel("pollOK-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Poll.setStatus('mandatory')
pollOK_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 9), Counter32()).setLabel("pollOK-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Web.setStatus('mandatory')
pollOK_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 10), Counter32()).setLabel("pollOK-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Ftp.setStatus('mandatory')
pollOK_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 11), Counter32()).setLabel("pollOK-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Smtp.setStatus('mandatory')
pollOK_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 12), Counter32()).setLabel("pollOK-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Telnet.setStatus('mandatory')
pollOK_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 13), Counter32()).setLabel("pollOK-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User1.setStatus('mandatory')
pollOK_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 14), Counter32()).setLabel("pollOK-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User2.setStatus('mandatory')
pollFail_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 15), Counter32()).setLabel("pollFail-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Poll.setStatus('mandatory')
pollFail_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 16), Counter32()).setLabel("pollFail-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Web.setStatus('mandatory')
pollFail_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 17), Counter32()).setLabel("pollFail-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Ftp.setStatus('mandatory')
pollFail_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 18), Counter32()).setLabel("pollFail-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Smtp.setStatus('mandatory')
pollFail_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 19), Counter32()).setLabel("pollFail-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Telnet.setStatus('mandatory')
pollFail_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 20), Counter32()).setLabel("pollFail-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User1.setStatus('mandatory')
pollFail_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 21), Counter32()).setLabel("pollFail-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User2.setStatus('mandatory')
pctFail_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 22), Gauge32()).setLabel("pctFail-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Poll.setStatus('mandatory')
pctFail_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 23), Gauge32()).setLabel("pctFail-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Web.setStatus('mandatory')
pctFail_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 24), Gauge32()).setLabel("pctFail-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Ftp.setStatus('mandatory')
pctFail_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 25), Gauge32()).setLabel("pctFail-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Smtp.setStatus('mandatory')
pctFail_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 26), Gauge32()).setLabel("pctFail-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Telnet.setStatus('mandatory')
pctFail_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 27), Gauge32()).setLabel("pctFail-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User1.setStatus('mandatory')
pctFail_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 28), Gauge32()).setLabel("pctFail-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User2.setStatus('mandatory')
curState_POLL = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-POLL").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_POLL.setStatus('mandatory')
curState_WEB = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-WEB").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_WEB.setStatus('mandatory')
curState_FTP = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-FTP").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_FTP.setStatus('mandatory')
curState_SMTP = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-SMTP").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_SMTP.setStatus('mandatory')
curState_TELNET = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-TELNET").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_TELNET.setStatus('mandatory')
curState_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User1.setStatus('mandatory')
curState_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User2.setStatus('mandatory')
respTime_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 52), Gauge32()).setLabel("respTime-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User3.setStatus('mandatory')
respTime_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 53), Gauge32()).setLabel("respTime-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User4.setStatus('mandatory')
pollOK_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 54), Counter32()).setLabel("pollOK-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User3.setStatus('mandatory')
pollOK_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 55), Counter32()).setLabel("pollOK-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User4.setStatus('mandatory')
pollFail_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 56), Counter32()).setLabel("pollFail-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User3.setStatus('mandatory')
pollFail_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 57), Counter32()).setLabel("pollFail-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User4.setStatus('mandatory')
pctFail_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 58), Gauge32()).setLabel("pctFail-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User3.setStatus('mandatory')
pctFail_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 59), Gauge32()).setLabel("pctFail-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User4.setStatus('mandatory')
curState_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User3.setStatus('mandatory')
curState_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User4.setStatus('mandatory')
pollSvcType = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("regpoll", 1), ("web", 2), ("ftp", 3), ("smtp", 4), ("telnet", 5), ("user1", 6), ("user2", 7), ("user3", 8), ("user4", 9))))
if mibBuilder.loadTexts: pollSvcType.setStatus('mandatory')
avgRespTime_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 38), Gauge32()).setLabel("avgRespTime-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Poll.setStatus('mandatory')
avgRespTime_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 39), Gauge32()).setLabel("avgRespTime-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Web.setStatus('mandatory')
avgRespTime_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 40), Gauge32()).setLabel("avgRespTime-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Ftp.setStatus('mandatory')
avgRespTime_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 41), Gauge32()).setLabel("avgRespTime-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Smtp.setStatus('mandatory')
avgRespTime_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 42), Gauge32()).setLabel("avgRespTime-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Telnet.setStatus('mandatory')
avgRespTime_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 43), Gauge32()).setLabel("avgRespTime-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User1.setStatus('mandatory')
avgRespTime_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 44), Gauge32()).setLabel("avgRespTime-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User2.setStatus('mandatory')
avgPctFail_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 45), Gauge32()).setLabel("avgPctFail-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Poll.setStatus('mandatory')
avgPctFail_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 46), Gauge32()).setLabel("avgPctFail-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Web.setStatus('mandatory')
avgPctFail_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 47), Gauge32()).setLabel("avgPctFail-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Ftp.setStatus('mandatory')
avgPctFail_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 48), Gauge32()).setLabel("avgPctFail-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Smtp.setStatus('mandatory')
avgPctFail_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 49), Gauge32()).setLabel("avgPctFail-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Telnet.setStatus('mandatory')
avgPctFail_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 50), Gauge32()).setLabel("avgPctFail-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User1.setStatus('mandatory')
avgPctFail_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 51), Gauge32()).setLabel("avgPctFail-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User2.setStatus('mandatory')
avgRespTime_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 62), Gauge32()).setLabel("avgRespTime-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User3.setStatus('mandatory')
avgRespTime_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 63), Gauge32()).setLabel("avgRespTime-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User4.setStatus('mandatory')
avgPctFail_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 64), Gauge32()).setLabel("avgPctFail-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User3.setStatus('mandatory')
avgPctFail_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 65), Gauge32()).setLabel("avgPctFail-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User4.setStatus('mandatory')
systemComponent = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discoveryStatusPoller", 1), ("historyPoller", 2), ("domainMaster", 3), ("userConsole", 4), ("domainSlave", 5), ("snmpcServer", 6))))
if mibBuilder.loadTexts: systemComponent.setStatus('mandatory')
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))))
if mibBuilder.loadTexts: systemStatus.setStatus('mandatory')
systemLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 3), DisplayString())
if mibBuilder.loadTexts: systemLogMessage.setStatus('mandatory')
systemErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 4), Integer32())
if mibBuilder.loadTexts: systemErrorCode.setStatus('mandatory')
deviceAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 1), OctetString())
if mibBuilder.loadTexts: deviceAddress.setStatus('mandatory')
deviceMapID = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 2), Integer32())
if mibBuilder.loadTexts: deviceMapID.setStatus('mandatory')
pollAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 3), IpAddress())
if mibBuilder.loadTexts: pollAgentAddress.setStatus('mandatory')
serverAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 4), IpAddress())
if mibBuilder.loadTexts: serverAddress.setStatus('mandatory')
consAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 5), IpAddress())
if mibBuilder.loadTexts: consAddress.setStatus('mandatory')
consUser = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 6), DisplayString())
if mibBuilder.loadTexts: consUser.setStatus('mandatory')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 3, 1), DisplayString())
if mibBuilder.loadTexts: objectName.setStatus('mandatory')
objectNumber = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 3, 2), Integer32())
if mibBuilder.loadTexts: objectNumber.setStatus('mandatory')
alarmVariable = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 1), DisplayString())
if mibBuilder.loadTexts: alarmVariable.setStatus('mandatory')
alarmInstance = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 2), DisplayString())
if mibBuilder.loadTexts: alarmInstance.setStatus('mandatory')
alarmValue = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 3), Integer32())
if mibBuilder.loadTexts: alarmValue.setStatus('mandatory')
alarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 4), Integer32())
if mibBuilder.loadTexts: alarmThreshold.setStatus('mandatory')
alarmExpression = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 5), DisplayString())
if mibBuilder.loadTexts: alarmExpression.setStatus('mandatory')
mibSourceFile = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 5, 1), DisplayString())
if mibBuilder.loadTexts: mibSourceFile.setStatus('mandatory')
appName = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 9, 1), DisplayString())
if mibBuilder.loadTexts: appName.setStatus('mandatory')
appMessage = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 9, 2), DisplayString())
if mibBuilder.loadTexts: appMessage.setStatus('mandatory')
dummyTrap = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 1) + (0,1))
pollLastStateDown = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))))
if mibBuilder.loadTexts: pollLastStateDown.setStatus('mandatory')
pollSnmpErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 1, 2, 2), Integer32())
if mibBuilder.loadTexts: pollSnmpErrorCode.setStatus('mandatory')
pollResponse = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,1)).setObjects(("CASTLEROCK-MIB", "pollLastStateDown"))
pollNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,2))
pollStatusTestPass = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,3)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmValue"))
pollStatusTestFail = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,4)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmValue"))
pollRequestRejected = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,5)).setObjects(("CASTLEROCK-MIB", "pollSnmpErrorCode"))
pollDeviceDown = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,6))
pollServiceResponding = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,7)).setObjects(("CASTLEROCK-MIB", "pollSvcType"), ("CASTLEROCK-MIB", "pollLastStateDown"))
pollServiceNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,8)).setObjects(("CASTLEROCK-MIB", "pollSvcType"))
pollServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,9)).setObjects(("CASTLEROCK-MIB", "pollSvcType"))
alarmAutoThresholdTrigger = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,1)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmValue"), ("CASTLEROCK-MIB", "alarmThreshold"))
alarmAutoThresholdSet = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,2)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmThreshold"))
alarmAutoThresholdExpand = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,3)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmThreshold"))
alarmAutoThresholdReduce = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,4)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmThreshold"))
alarmManualThresholdTrigger = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,5)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmValue"), ("CASTLEROCK-MIB", "alarmExpression"))
alarmManualThresholdReset = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,6)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmValue"), ("CASTLEROCK-MIB", "alarmExpression"))
pollAgentConnect = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,1)).setObjects(("CASTLEROCK-MIB", "systemComponent"))
pollAgentDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,2)).setObjects(("CASTLEROCK-MIB", "systemComponent"))
systemInfo = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,3)).setObjects(("CASTLEROCK-MIB", "systemComponent"), ("CASTLEROCK-MIB", "systemLogMessage"))
systemWarn = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,4)).setObjects(("CASTLEROCK-MIB", "systemComponent"), ("CASTLEROCK-MIB", "systemLogMessage"), ("CASTLEROCK-MIB", "systemErrorCode"))
systemError = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,5)).setObjects(("CASTLEROCK-MIB", "systemComponent"), ("CASTLEROCK-MIB", "systemLogMessage"), ("CASTLEROCK-MIB", "systemErrorCode"))
diskLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,6))
diskLowError = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,7))
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 7) + (0,1)).setObjects(("CASTLEROCK-MIB", "appName"), ("CASTLEROCK-MIB", "appMessage"))
appWarn = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 7) + (0,2)).setObjects(("CASTLEROCK-MIB", "appName"), ("CASTLEROCK-MIB", "appMessage"))
appError = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 7) + (0,3)).setObjects(("CASTLEROCK-MIB", "appName"), ("CASTLEROCK-MIB", "appMessage"))
mibBuilder.exportSymbols("CASTLEROCK-MIB", mibGroup=mibGroup, pctFail_Smtp=pctFail_Smtp, curState_User2=curState_User2, alarmAutoThresholdReduce=alarmAutoThresholdReduce, alarmManualThresholdReset=alarmManualThresholdReset, pollAgentAddress=pollAgentAddress, avgRespTime_User2=avgRespTime_User2, appGroup=appGroup, respTime_Telnet=respTime_Telnet, pollFail_Web=pollFail_Web, systemLogMessage=systemLogMessage, pctFail_Telnet=pctFail_Telnet, alarmAutoThresholdTrigger=alarmAutoThresholdTrigger, pollFail_User1=pollFail_User1, curState_User1=curState_User1, pollDeviceDown=pollDeviceDown, alarmInstance=alarmInstance, respTime_Web=respTime_Web, respTime_User2=respTime_User2, appWarn=appWarn, pollOK_User2=pollOK_User2, avgRespTime_User4=avgRespTime_User4, pollSvcType=pollSvcType, pollAgentConnect=pollAgentConnect, systemError=systemError, alarmThreshold=alarmThreshold, pollNoResponse=pollNoResponse, avgPctFail_Smtp=avgPctFail_Smtp, diskLowWarning=diskLowWarning, diskLowError=diskLowError, systemInfo=systemInfo, consUser=consUser, pollServiceDown=pollServiceDown, pollFail_User2=pollFail_User2, avgPctFail_Telnet=avgPctFail_Telnet, pollOK_User1=pollOK_User1, curState_User4=curState_User4, respTime_Poll=respTime_Poll, pollFail_Smtp=pollFail_Smtp, snmpc=snmpc, alarmGroup=alarmGroup, pollSnmpErrorCode=pollSnmpErrorCode, pctFail_User3=pctFail_User3, respTime_User3=respTime_User3, systemErrorCode=systemErrorCode, alarmAutoThresholdSet=alarmAutoThresholdSet, avgRespTime_Web=avgRespTime_Web, deviceMapID=deviceMapID, pollFail_User3=pollFail_User3, snmpc_Events=snmpc_Events, systemWarn=systemWarn, pctFail_Poll=pctFail_Poll, systemComponent=systemComponent, appMessage=appMessage, addressGroup=addressGroup, pollOK_User3=pollOK_User3, avgRespTime_Telnet=avgRespTime_Telnet, alarmManualThresholdTrigger=alarmManualThresholdTrigger, alarmVariable=alarmVariable, avgRespTime_User3=avgRespTime_User3, avgPctFail_Poll=avgPctFail_Poll, consAddress=consAddress, snmpc_Status_Polling=snmpc_Status_Polling, avgPctFail_User1=avgPctFail_User1, avgPctFail_Ftp=avgPctFail_Ftp, avgPctFail_User3=avgPctFail_User3, pollServiceResponding=pollServiceResponding, pollServiceNoResponse=pollServiceNoResponse, pctFail_Web=pctFail_Web, availGroup=availGroup, appError=appError, pollFail_Ftp=pollFail_Ftp, deviceAddress=deviceAddress, pollStatusTestPass=pollStatusTestPass, pollResponse=pollResponse, avgRespTime_Ftp=avgRespTime_Ftp, castleRock=castleRock, mibSourceFile=mibSourceFile, snmpc_App_Events=snmpc_App_Events, pctFail_User4=pctFail_User4, appName=appName, pollOK_Telnet=pollOK_Telnet, respTime_Ftp=respTime_Ftp, respTime_User1=respTime_User1, curState_POLL=curState_POLL, avgPctFail_Web=avgPctFail_Web, objectName=objectName, curState_WEB=curState_WEB, avgRespTime_User1=avgRespTime_User1, alarmValue=alarmValue, pollRequestRejected=pollRequestRejected, avgPctFail_User2=avgPctFail_User2, pollStatusTestFail=pollStatusTestFail, snmpc_System_Info=snmpc_System_Info, pollLastStateDown=pollLastStateDown, snmpc_Mib_Compiler=snmpc_Mib_Compiler, pollOK_Poll=pollOK_Poll, systemGroup=systemGroup, pollAgentDisconnect=pollAgentDisconnect, pollOK_Smtp=pollOK_Smtp, avgPctFail_User4=avgPctFail_User4, alarmExpression=alarmExpression, appInfo=appInfo, pollFail_Telnet=pollFail_Telnet, pollFail_User4=pollFail_User4, serverAddress=serverAddress, curState_SMTP=curState_SMTP, pctFail_Ftp=pctFail_Ftp, pctFail_User1=pctFail_User1, avgRespTime_Smtp=avgRespTime_Smtp, avgRespTime_Poll=avgRespTime_Poll, defunctGroup=defunctGroup, systemStatus=systemStatus, snmpc_Threshold_Alarm=snmpc_Threshold_Alarm, respTime_User4=respTime_User4, dummyTrap=dummyTrap, pollFail_Poll=pollFail_Poll, curState_TELNET=curState_TELNET, curState_User3=curState_User3, alarmAutoThresholdExpand=alarmAutoThresholdExpand, respTime_Smtp=respTime_Smtp, pctFail_User2=pctFail_User2, pollOK_User4=pollOK_User4, pollOK_Ftp=pollOK_Ftp, objectGroup=objectGroup, curState_FTP=curState_FTP, global_Defaults=global_Defaults, pollOK_Web=pollOK_Web, objectNumber=objectNumber)
