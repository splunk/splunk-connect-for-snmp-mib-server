#
# PySNMP MIB module INXNMM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INXNMM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, Counter64, NotificationType, Unsigned32, MibIdentifier, iso, ObjectIdentity, ModuleIdentity, Counter32, Gauge32, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Counter64", "NotificationType", "Unsigned32", "MibIdentifier", "iso", "ObjectIdentity", "ModuleIdentity", "Counter32", "Gauge32", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
internet = MibIdentifier((1, 3, 6, 1))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
interlan = MibIdentifier((1, 3, 6, 1, 4, 1, 28))
dot3 = MibIdentifier((1, 3, 6, 1, 3, 3))
riTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 3))
riBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 16))
riThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 17))
riSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 18))
riTsRates = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 22))
riLdcNmm = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 10))
riPort = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 13))
riHotFail = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 10, 14))
riProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1))
riProdLdc = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1, 3))
riPLdcNMM = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1, 3, 1))
dot3Table = MibTable((1, 3, 6, 1, 3, 3, 1), )
if mibBuilder.loadTexts: dot3Table.setStatus('mandatory')
dot3Entry = MibTableRow((1, 3, 6, 1, 3, 3, 1, 1), ).setIndexNames((0, "INXNMM-MIB", "dot3Index"))
if mibBuilder.loadTexts: dot3Entry.setStatus('mandatory')
dot3Index = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3Index.setStatus('mandatory')
dot3InitializeMAC = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("initialize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3InitializeMAC.setStatus('mandatory')
dot3MACSubLayerStatus = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3MACSubLayerStatus.setStatus('mandatory')
dot3MulticastReceiveEnabled = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3MulticastReceiveEnabled.setStatus('mandatory')
dot3AlignmentErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3AlignmentErrors.setStatus('mandatory')
dot3FCSErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3FCSErrors.setStatus('mandatory')
dot3TxTable = MibTable((1, 3, 6, 1, 3, 3, 2), )
if mibBuilder.loadTexts: dot3TxTable.setStatus('mandatory')
dot3TxEntry = MibTableRow((1, 3, 6, 1, 3, 3, 2, 1), ).setIndexNames((0, "INXNMM-MIB", "dot3TxIndex"))
if mibBuilder.loadTexts: dot3TxEntry.setStatus('mandatory')
dot3TxIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxIndex.setStatus('mandatory')
dot3TxSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxSingleCollisionFrames.setStatus('mandatory')
dot3TxMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxMultipleCollisionFrames.setStatus('mandatory')
dot3TxSQETestErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxSQETestErrors.setStatus('mandatory')
dot3XRxTable = MibTable((1, 3, 6, 1, 3, 3, 3), )
if mibBuilder.loadTexts: dot3XRxTable.setStatus('mandatory')
dot3XRxEntry = MibTableRow((1, 3, 6, 1, 3, 3, 3, 1), ).setIndexNames((0, "INXNMM-MIB", "dot3XRxIndex"))
if mibBuilder.loadTexts: dot3XRxEntry.setStatus('mandatory')
dot3XRxIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxIndex.setStatus('mandatory')
dot3XRxFrameTooLongs = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxFrameTooLongs.setStatus('mandatory')
dot3XRxInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxInRangeLengthErrors.setStatus('mandatory')
dot3XRxOutOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxOutOfRangeLengthFields.setStatus('mandatory')
dot3XRxInternalMACReceiveErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxInternalMACReceiveErrors.setStatus('mandatory')
dot3XRxAutoPartitionStatus = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3XRxAutoPartitionStatus.setStatus('mandatory')
dot3XRxAutoPartitionLog = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxAutoPartitionLog.setStatus('mandatory')
dot3XRxLastSourceAddress = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxLastSourceAddress.setStatus('mandatory')
dot3XRxSourceAddressLog = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxSourceAddressLog.setStatus('mandatory')
dot3XTxTable = MibTable((1, 3, 6, 1, 3, 3, 4), )
if mibBuilder.loadTexts: dot3XTxTable.setStatus('mandatory')
dot3XTxEntry = MibTableRow((1, 3, 6, 1, 3, 3, 4, 1), ).setIndexNames((0, "INXNMM-MIB", "dot3XTxIndex"))
if mibBuilder.loadTexts: dot3XTxEntry.setStatus('mandatory')
dot3XTxIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxIndex.setStatus('mandatory')
dot3XTxEnabled = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3XTxEnabled.setStatus('mandatory')
dot3XTxDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxDeferredTransmissions.setStatus('mandatory')
dot3XTxLateCollisions = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxLateCollisions.setStatus('mandatory')
dot3XTxExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxExcessiveCollisions.setStatus('mandatory')
dot3XTxInternalMACTransmitErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxInternalMACTransmitErrors.setStatus('mandatory')
dot3XTxCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxCarrierSenseErrors.setStatus('mandatory')
dot3XTxExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxExcessiveDeferrals.setStatus('mandatory')
dot3XTxTDR = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxTDR.setStatus('mandatory')
dot3CollTable = MibTable((1, 3, 6, 1, 3, 3, 5), )
if mibBuilder.loadTexts: dot3CollTable.setStatus('mandatory')
dot3CollEntry = MibTableRow((1, 3, 6, 1, 3, 3, 5, 1), ).setIndexNames((0, "INXNMM-MIB", "dot3CollIndex"), (0, "INXNMM-MIB", "dot3CollCount"))
if mibBuilder.loadTexts: dot3CollEntry.setStatus('mandatory')
dot3CollIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollIndex.setStatus('mandatory')
dot3CollCount = MibTableColumn((1, 3, 6, 1, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollCount.setStatus('mandatory')
dot3CollFrequency = MibTableColumn((1, 3, 6, 1, 3, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollFrequency.setStatus('mandatory')
riNumBoots = MibScalar((1, 3, 6, 1, 4, 1, 28, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riNumBoots.setStatus('mandatory')
riBootServiceOffered = MibScalar((1, 3, 6, 1, 4, 1, 28, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootServiceOffered.setStatus('mandatory')
riBootTable = MibTable((1, 3, 6, 1, 4, 1, 28, 16, 3), )
if mibBuilder.loadTexts: riBootTable.setStatus('mandatory')
riBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 16, 3, 1), ).setIndexNames((0, "INXNMM-MIB", "riBootIndex"))
if mibBuilder.loadTexts: riBootEntry.setStatus('mandatory')
riBootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riBootIndex.setStatus('mandatory')
riBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootFileName.setStatus('mandatory')
riBootIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootIPAddress.setStatus('mandatory')
riBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootVersion.setStatus('mandatory')
riBootGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootGateway.setStatus('mandatory')
riSystemHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemHardwareRev.setStatus('mandatory')
riSystemFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemFirmwareRev.setStatus('mandatory')
riSystemSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemSoftwareRev.setStatus('mandatory')
riSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemSerialNumber.setStatus('mandatory')
riSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("notreset", 1), ("resetupdate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riSystemReset.setStatus('mandatory')
riSystemTicksPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemTicksPerSecond.setStatus('mandatory')
riSystemRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riSystemRateInterval.setStatus('mandatory')
riSystemNVRamWriteCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemNVRamWriteCount.setStatus('mandatory')
tnCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnCount.setStatus('mandatory')
tnTable = MibTable((1, 3, 6, 1, 4, 1, 28, 3, 2), )
if mibBuilder.loadTexts: tnTable.setStatus('mandatory')
tnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 3, 2, 1), ).setIndexNames((0, "INXNMM-MIB", "tnLocalIpAddress"), (0, "INXNMM-MIB", "tnLocalPort"), (0, "INXNMM-MIB", "tnRemoteIpAddress"), (0, "INXNMM-MIB", "tnRemotePort"))
if mibBuilder.loadTexts: tnEntry.setStatus('mandatory')
tnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnPort.setStatus('mandatory')
tnLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnLocalIpAddress.setStatus('mandatory')
tnRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnRemoteIpAddress.setStatus('mandatory')
tnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnLocalPort.setStatus('mandatory')
tnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnRemotePort.setStatus('mandatory')
tnUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnUpTime.setStatus('mandatory')
tnOptionsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnOptionsOn.setStatus('mandatory')
tnState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("serverActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnState.setStatus('mandatory')
tnUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnUserId.setStatus('mandatory')
riLdcHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHardwareRev.setStatus('mandatory')
riLdcFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcFirmwareRev.setStatus('mandatory')
riLdcChassisSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcChassisSoftwareRev.setStatus('mandatory')
riLdcChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcChassisSerialNumber.setStatus('mandatory')
riLdcChassisStatus = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 200))).clone(namedValues=NamedValues(("reset", 1), ("enabled", 6), ("disabled", 7), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcChassisStatus.setStatus('mandatory')
riLdcChassisSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcChassisSlotCount.setStatus('mandatory')
riLdcNumPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcNumPowerSupplies.setStatus('mandatory')
riLdcNumBusMons = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcNumBusMons.setStatus('mandatory')
riLdcNumFans = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcNumFans.setStatus('mandatory')
riLdcChassisSlotTable = MibTable((1, 3, 6, 1, 4, 1, 28, 10, 10), )
if mibBuilder.loadTexts: riLdcChassisSlotTable.setStatus('mandatory')
riLdcSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 10, 10, 1), ).setIndexNames((0, "INXNMM-MIB", "riLdcSlotIndex"))
if mibBuilder.loadTexts: riLdcSlotEntry.setStatus('mandatory')
riLdcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotIndex.setStatus('mandatory')
riLdcSlotContents = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotContents.setStatus('mandatory')
riLdcSlotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 31, 34, 200))).clone(namedValues=NamedValues(("reboot", 1), ("enabled", 6), ("disabled", 7), ("empty", 31), ("booting", 34), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotAdminStatus.setStatus('mandatory')
riLdcSlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 31, 34, 200))).clone(namedValues=NamedValues(("enabled", 6), ("disabled", 7), ("empty", 31), ("booting", 34), ("other", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotOperStatus.setStatus('mandatory')
riLdcSlotBus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 200))).clone(namedValues=NamedValues(("bus-a", 2), ("bus-b", 3), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotBus.setStatus('mandatory')
riLdcSlotHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotHwRev.setStatus('mandatory')
riLdcSlotFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotFwRev.setStatus('mandatory')
riLdcSlotSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotSwRev.setStatus('mandatory')
riLdcSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotSerialNumber.setStatus('mandatory')
riLdcSlotDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(92, 93, 200))).clone(namedValues=NamedValues(("pass", 92), ("fail", 93), ("other", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotDiagnostic.setStatus('mandatory')
riLdcSlotDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotDiagnosticCode.setStatus('mandatory')
riLdcSlotResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotResetTime.setStatus('mandatory')
riLdcSlotTempCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(60, 61, 62))).clone(namedValues=NamedValues(("unknown", 60), ("ok", 61), ("too-hot", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotTempCondition.setStatus('mandatory')
riLdcSlotConnectivityType = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotConnectivityType.setStatus('mandatory')
riLdcSlotConnectivityRev = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotConnectivityRev.setStatus('mandatory')
riLdcSlotConnectivitySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotConnectivitySerialNumber.setStatus('mandatory')
riLdcSlotConnectivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 19, 200))).clone(namedValues=NamedValues(("disabled", 10), ("enabled", 19), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotConnectivityState.setStatus('mandatory')
riLdcSlotConnectivityBus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 200))).clone(namedValues=NamedValues(("bus-a", 8), ("bus-b", 9), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotConnectivityBus.setStatus('mandatory')
riLdcSlotConnectivityMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 17, 18, 33, 34, 49, 81, 82, 200))).clone(namedValues=NamedValues(("backbone-thick", 11), ("backbone-thin", 12), ("backbone-fiber", 13), ("nts-telco", 17), ("nts-rj45", 18), ("bt-10-telco", 33), ("bt-10-rj45", 34), ("foirl-fiber", 49), ("bridge-v35", 81), ("bridge-x21", 82), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotConnectivityMedia.setStatus('mandatory')
riLdcSlotSonicBus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 16, 200))).clone(namedValues=NamedValues(("bus-a", 15), ("bus-b", 16), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotSonicBus.setStatus('mandatory')
riLdcSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 31, 200))).clone(namedValues=NamedValues(("inx-nmm", 1), ("inx-nts", 2), ("inx-10bt", 3), ("inx-cmm", 4), ("inx-rbr", 5), ("inx-foirl", 6), ("inx-lbr", 7), ("empty", 31), ("other", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcSlotModuleType.setStatus('mandatory')
riLdcSlotStandbyNMM = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 200))).clone(namedValues=NamedValues(("standby-NMM", 3), ("non-standby-NMM", 4), ("other", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcSlotStandbyNMM.setStatus('mandatory')
riLdcPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 28, 10, 11), )
if mibBuilder.loadTexts: riLdcPowerSupplyTable.setStatus('mandatory')
riLdcPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 10, 11, 1), ).setIndexNames((0, "INXNMM-MIB", "riLdcPSIndex"))
if mibBuilder.loadTexts: riLdcPSEntry.setStatus('mandatory')
riLdcPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcPSIndex.setStatus('mandatory')
riLdcPSActualStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(71, 72, 200))).clone(namedValues=NamedValues(("off", 71), ("active", 72), ("other", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcPSActualStatus.setStatus('mandatory')
riLdcBusMonTable = MibTable((1, 3, 6, 1, 4, 1, 28, 10, 12), )
if mibBuilder.loadTexts: riLdcBusMonTable.setStatus('mandatory')
riLdcBusMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 10, 12, 1), ).setIndexNames((0, "INXNMM-MIB", "riLdcBusMonIndex"))
if mibBuilder.loadTexts: riLdcBusMonEntry.setStatus('mandatory')
riLdcBusMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonIndex.setStatus('mandatory')
riLdcBusMonBus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 16))).clone(namedValues=NamedValues(("bus-a", 15), ("bus-b", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonBus.setStatus('mandatory')
riLdcBusMonFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonFramesReceivedOK.setStatus('mandatory')
riLdcBusMonFramesReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonFramesReceivedOKRate.setStatus('mandatory')
riLdcBusMonOctetsReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonOctetsReceivedOK.setStatus('mandatory')
riLdcBusMonOctetsReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonOctetsReceivedOKRate.setStatus('mandatory')
riLdcBusMonMCastFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonMCastFramesReceivedOK.setStatus('mandatory')
riLdcBusMonMCastFramesReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonMCastFramesReceivedOKRate.setStatus('mandatory')
riLdcBusMonBCastFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonBCastFramesReceivedOK.setStatus('mandatory')
riLdcBusMonBCastFramesReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonBCastFramesReceivedOKRate.setStatus('mandatory')
riLdcBusMonCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonCollisions.setStatus('mandatory')
riLdcBusMonCollisionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonCollisionsRate.setStatus('mandatory')
riLdcBusMonLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonLateCollisions.setStatus('mandatory')
riLdcBusMonLateCollisionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonLateCollisionsRate.setStatus('mandatory')
riLdcBusMonCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonCRCErrors.setStatus('mandatory')
riLdcBusMonCRCErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonCRCErrorsRate.setStatus('mandatory')
riLdcBusMonPygmies = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonPygmies.setStatus('mandatory')
riLdcBusMonPygmiesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonPygmiesRate.setStatus('mandatory')
riLdcBusMonShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonShortFrames.setStatus('mandatory')
riLdcBusMonShortFramesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonShortFramesRate.setStatus('mandatory')
riLdcBusMonInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonInRangeLengthErrors.setStatus('mandatory')
riLdcBusMonInRangeLengthErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonInRangeLengthErrorsRate.setStatus('mandatory')
riLdcBusMonOutOfRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonOutOfRangeLengthErrors.setStatus('mandatory')
riLdcBusMonOutOfRangeLengthErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonOutOfRangeLengthErrorsRate.setStatus('mandatory')
riLdcBusMonFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonFramesTooLong.setStatus('mandatory')
riLdcBusMonFramesTooLongRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonFramesTooLongRate.setStatus('mandatory')
riLdcBusMonAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonAlignmentErrors.setStatus('mandatory')
riLdcBusMonAlignmentErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonAlignmentErrorsRate.setStatus('mandatory')
riLdcBusMonMissedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonMissedPackets.setStatus('mandatory')
riLdcBusMonMissedPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonMissedPacketsRate.setStatus('mandatory')
riLdcBusMonErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonErrorFrames.setStatus('mandatory')
riLdcBusMonErrorFramesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonErrorFramesRate.setStatus('mandatory')
riLdcBusMonUtilPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 33), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcBusMonUtilPeak.setStatus('mandatory')
riLdcBusMonUtilPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 34), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonUtilPeakTime.setStatus('mandatory')
riLdcBusMonUtilCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 12, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcBusMonUtilCurrent.setStatus('mandatory')
riLdcFanTable = MibTable((1, 3, 6, 1, 4, 1, 28, 10, 13), )
if mibBuilder.loadTexts: riLdcFanTable.setStatus('mandatory')
riLdcFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 10, 13, 1), ).setIndexNames((0, "INXNMM-MIB", "riLdcFanIndex"))
if mibBuilder.loadTexts: riLdcFanEntry.setStatus('mandatory')
riLdcFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcFanIndex.setStatus('mandatory')
riLdcFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(81, 82, 200))).clone(namedValues=NamedValues(("off", 81), ("on", 82), ("other", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcFanStatus.setStatus('mandatory')
riLdcHfAPrimaryAui = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfAPrimaryAui.setStatus('mandatory')
riLdcHfAPrimaryMedia = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13))).clone(namedValues=NamedValues(("backbone-thick", 11), ("backbone-thin", 12), ("backbone-fiber", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfAPrimaryMedia.setStatus('mandatory')
riLdcHfBPrimaryAui = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfBPrimaryAui.setStatus('mandatory')
riLdcHfBPrimaryMedia = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13))).clone(namedValues=NamedValues(("backbone-thick", 11), ("backbone-thin", 12), ("backbone-fiber", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfBPrimaryMedia.setStatus('mandatory')
riLdcHfABackupAui = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfABackupAui.setStatus('mandatory')
riLdcHfABackupMedia = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13))).clone(namedValues=NamedValues(("backbone-thick", 11), ("backbone-thin", 12), ("backbone-fiber", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfABackupMedia.setStatus('mandatory')
riLdcHfBBackupAui = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfBBackupAui.setStatus('mandatory')
riLdcHfBBackupMedia = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13))).clone(namedValues=NamedValues(("backbone-thick", 11), ("backbone-thin", 12), ("backbone-fiber", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfBBackupMedia.setStatus('mandatory')
riLdcHfIntState = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("dis-no-A-config", 3), ("dis-no-B-config", 4), ("dis-A-B-conflict", 5), ("dis-zero-frequency", 6), ("dis-no-backbone", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfIntState.setStatus('mandatory')
riLdcHfIntPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfIntPollFreq.setStatus('mandatory')
riLdcHfIntRetries = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfIntRetries.setStatus('mandatory')
riLdcHfExtState = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("dis-no-A-config", 3), ("dis-no-B-config", 4), ("dis-A-B-conflict", 5), ("dis-zero-frequency", 6), ("dis-no-backbone", 7), ("dis-zero-p1-addr", 8), ("dis-wrong-ext-bus", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfExtState.setStatus('mandatory')
riLdcHfExtPing1 = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfExtPing1.setStatus('mandatory')
riLdcHfExtPing2 = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfExtPing2.setStatus('mandatory')
riLdcHfExtPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfExtPollFreq.setStatus('mandatory')
riLdcHfExtResponseTmo = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfExtResponseTmo.setStatus('mandatory')
riLdcHfExtRetries = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfExtRetries.setStatus('mandatory')
riLdcHfHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 28, 10, 14, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riLdcHfHysteresis.setStatus('mandatory')
riLdcHfTable = MibTable((1, 3, 6, 1, 4, 1, 28, 10, 14, 19), )
if mibBuilder.loadTexts: riLdcHfTable.setStatus('mandatory')
riLdcHfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1), ).setIndexNames((0, "INXNMM-MIB", "riLdcHfIndex"))
if mibBuilder.loadTexts: riLdcHfEntry.setStatus('mandatory')
riLdcHfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfIndex.setStatus('mandatory')
riLdcHfPrimBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 200))).clone(namedValues=NamedValues(("using-prim-config", 1), ("using-bkup-config", 2), ("not-in-use", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfPrimBkupState.setStatus('mandatory')
riLdcHfLastFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfLastFailover.setStatus('mandatory')
riLdcHfIntFailovers = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfIntFailovers.setStatus('mandatory')
riLdcHfExtFailovers = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfExtFailovers.setStatus('mandatory')
riLdcHfPrimReason = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nofailover", 1), ("autopartitioned", 3), ("bus-clock-failure", 4), ("internal-tx-failure", 5), ("external-ping-failure", 6), ("config-change", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfPrimReason.setStatus('mandatory')
riLdcHfBkupReason = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nofailover", 1), ("autopartitioned", 3), ("bus-clock-failure", 4), ("internal-tx-failure", 5), ("external-ping-failure", 6), ("config-change", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfBkupReason.setStatus('mandatory')
riLdcHfIntTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 200))).clone(namedValues=NamedValues(("internal-bus-OK", 1), ("lost-crs", 2), ("excess-collisions", 3), ("other-tx-error", 4), ("not-in-use", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfIntTxStatus.setStatus('mandatory')
riLdcHfIntTxFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfIntTxFailures.setStatus('mandatory')
riLdcHfAutopartState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 200))).clone(namedValues=NamedValues(("aui-OK", 1), ("aui-autopartitioned", 2), ("not-configured", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfAutopartState.setStatus('mandatory')
riLdcHfBusAutopartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfBusAutopartitions.setStatus('mandatory')
riLdcHfBusClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bus-clock-ok", 1), ("bus-clock-failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfBusClockStatus.setStatus('mandatory')
riLdcHfBusClockFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfBusClockFailures.setStatus('mandatory')
riLdcHfBusConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("config-ok", 1), ("two-backbones-enabled", 2), ("no-backbones-enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfBusConfigStatus.setStatus('mandatory')
riLdcHfBusConfigChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfBusConfigChanges.setStatus('mandatory')
riLdcHfExtPing1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 200))).clone(namedValues=NamedValues(("external-bus-OK", 1), ("host-unreachable", 2), ("not-configured", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfExtPing1Status.setStatus('mandatory')
riLdcHfExtPing1Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfExtPing1Failures.setStatus('mandatory')
riLdcHfExtPing2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 200))).clone(namedValues=NamedValues(("external-bus-OK", 1), ("host-unreachable", 2), ("not-configured", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfExtPing2Status.setStatus('mandatory')
riLdcHfExtPing2Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 10, 14, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riLdcHfExtPing2Failures.setStatus('mandatory')
riPortTable = MibTable((1, 3, 6, 1, 4, 1, 28, 13, 1), )
if mibBuilder.loadTexts: riPortTable.setStatus('mandatory')
riPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 13, 1, 1), ).setIndexNames((0, "INXNMM-MIB", "riPortSlotNumber"), (0, "INXNMM-MIB", "riPortPortNumber"))
if mibBuilder.loadTexts: riPortEntry.setStatus('mandatory')
riPortSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortSlotNumber.setStatus('mandatory')
riPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortPortNumber.setStatus('mandatory')
riPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 200, 41))).clone(namedValues=NamedValues(("auto-partitioned", 3), ("enabled", 4), ("disabled", 5), ("other", 200), ("empty", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riPortState.setStatus('mandatory')
riPortFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortFramesReceivedOK.setStatus('mandatory')
riPortFramesReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortFramesReceivedOKRate.setStatus('mandatory')
riPortOctetsReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortOctetsReceivedOK.setStatus('mandatory')
riPortOctetsReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortOctetsReceivedOKRate.setStatus('mandatory')
riPortMulticastFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortMulticastFramesReceivedOK.setStatus('mandatory')
riPortMulticastFramesReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortMulticastFramesReceivedOKRate.setStatus('mandatory')
riPortBroadcastFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortBroadcastFramesReceivedOK.setStatus('mandatory')
riPortBroadcastFramesReceivedOKRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortBroadcastFramesReceivedOKRate.setStatus('mandatory')
riPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortCollisions.setStatus('mandatory')
riPortCollisionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortCollisionsRate.setStatus('mandatory')
riPortCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortCRCErrors.setStatus('mandatory')
riPortCRCErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortCRCErrorsRate.setStatus('mandatory')
riPortShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortShortFrames.setStatus('mandatory')
riPortShortFramesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortShortFramesRate.setStatus('mandatory')
riPortInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortInRangeLengthErrors.setStatus('mandatory')
riPortInRangeLengthErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortInRangeLengthErrorsRate.setStatus('mandatory')
riPortOutOfRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortOutOfRangeLengthErrors.setStatus('mandatory')
riPortOutOfRangeLengthErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortOutOfRangeLengthErrorsRate.setStatus('mandatory')
riPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortFramesTooLong.setStatus('mandatory')
riPortFramesTooLongRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortFramesTooLongRate.setStatus('mandatory')
riPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortAlignmentErrors.setStatus('mandatory')
riPortAlignmentErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortAlignmentErrorsRate.setStatus('mandatory')
riPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortAutoPartitions.setStatus('mandatory')
riPortAutoPartitionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortAutoPartitionsRate.setStatus('mandatory')
riPortTransmitClockViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortTransmitClockViolations.setStatus('mandatory')
riPortTransmitClockViolationsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortTransmitClockViolationsRate.setStatus('mandatory')
riPortLastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortLastSourceAddress.setStatus('mandatory')
riPortSourceAddressChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortSourceAddressChanges.setStatus('mandatory')
riPortSourceAddressChangesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortSourceAddressChangesRate.setStatus('mandatory')
riPortLinkIntegrityChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortLinkIntegrityChanges.setStatus('mandatory')
riPortLinkIntegrityChangesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortLinkIntegrityChangesRate.setStatus('mandatory')
riPortLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortLateCollisions.setStatus('mandatory')
riPortLateCollisionsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortLateCollisionsRate.setStatus('mandatory')
riPortMauJabberLockups = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortMauJabberLockups.setStatus('mandatory')
riPortMauJabberpLockupsRate = MibScalar((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortMauJabberpLockupsRate.setStatus('mandatory')
riPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 13, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 200))).clone(namedValues=NamedValues(("link-status-led-on", 1), ("link-status-led-off", 2), ("other", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riPortLinkStatus.setStatus('mandatory')
riThCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThCount.setStatus('mandatory')
riThMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThMaxCount.setStatus('mandatory')
riThUniqueIndex = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThUniqueIndex.setStatus('mandatory')
riThInterval = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThInterval.setStatus('mandatory')
riThTable = MibTable((1, 3, 6, 1, 4, 1, 28, 17, 5), )
if mibBuilder.loadTexts: riThTable.setStatus('mandatory')
riThEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 17, 5, 1), ).setIndexNames((0, "INXNMM-MIB", "riThIndex"))
if mibBuilder.loadTexts: riThEntry.setStatus('mandatory')
riThIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThIndex.setStatus('mandatory')
riThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("unset", 2), ("armed", 3), ("safety", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThStatus.setStatus('mandatory')
riThObject = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThObject.setStatus('mandatory')
riThThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThThreshold.setStatus('mandatory')
riThHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThHysteresis.setStatus('mandatory')
riThDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThDirection.setStatus('mandatory')
riThTriggeredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThTriggeredCount.setStatus('mandatory')
riThCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThCommunity.setStatus('mandatory')
riThPhysDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThPhysDestination.setStatus('mandatory')
riThIPDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThIPDestination.setStatus('mandatory')
riRateTxSingleCollisionFrames = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxSingleCollisionFrames.setStatus('mandatory')
riRateTxMultipleCollisionFrames = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxMultipleCollisionFrames.setStatus('mandatory')
riRateTxDeferredTransmissions = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxDeferredTransmissions.setStatus('mandatory')
riRateTxLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxLateCollisions.setStatus('mandatory')
riRateTxInternalMACTransmitErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxInternalMACTransmitErrors.setStatus('mandatory')
riRateTxCarrierSenseErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxCarrierSenseErrors.setStatus('mandatory')
riRateTxExcessiveDeferrals = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxExcessiveDeferrals.setStatus('mandatory')
riRateRxInternalMACReceiveErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxInternalMACReceiveErrors.setStatus('mandatory')
riRateRxFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxFCSErrors.setStatus('mandatory')
riRateRxAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxAlignmentErrors.setStatus('mandatory')
riRateRxInRangeLengthErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxInRangeLengthErrors.setStatus('mandatory')
riRateRxOutofRangeLengthFields = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxOutofRangeLengthFields.setStatus('mandatory')
riRateRxFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxFrameTooLongs.setStatus('mandatory')
mibBuilder.exportSymbols("INXNMM-MIB", riLdcHfIntPollFreq=riLdcHfIntPollFreq, riPortAutoPartitionsRate=riPortAutoPartitionsRate, riBootTable=riBootTable, riLdcBusMonIndex=riLdcBusMonIndex, riHotFail=riHotFail, riLdcBusMonLateCollisionsRate=riLdcBusMonLateCollisionsRate, riPortFramesReceivedOKRate=riPortFramesReceivedOKRate, riLdcSlotStandbyNMM=riLdcSlotStandbyNMM, riPortBroadcastFramesReceivedOK=riPortBroadcastFramesReceivedOK, riRateTxExcessiveDeferrals=riRateTxExcessiveDeferrals, riBootIPAddress=riBootIPAddress, riLdcHfAutopartState=riLdcHfAutopartState, riLdcHfBBackupMedia=riLdcHfBBackupMedia, riLdcBusMonUtilPeak=riLdcBusMonUtilPeak, riThObject=riThObject, riLdcHfBusConfigStatus=riLdcHfBusConfigStatus, riPortFramesReceivedOK=riPortFramesReceivedOK, interlan=interlan, riLdcChassisSlotTable=riLdcChassisSlotTable, riThStatus=riThStatus, riLdcHfPrimBkupState=riLdcHfPrimBkupState, riLdcHfExtState=riLdcHfExtState, riSystem=riSystem, riLdcBusMonCRCErrorsRate=riLdcBusMonCRCErrorsRate, riPortAlignmentErrorsRate=riPortAlignmentErrorsRate, riPortLateCollisionsRate=riPortLateCollisionsRate, riBootServiceOffered=riBootServiceOffered, dot3XTxIndex=dot3XTxIndex, riLdcHfBkupReason=riLdcHfBkupReason, tnLocalPort=tnLocalPort, dot3XRxOutOfRangeLengthFields=dot3XRxOutOfRangeLengthFields, riLdcHfExtFailovers=riLdcHfExtFailovers, riPortTable=riPortTable, riLdcHfExtRetries=riLdcHfExtRetries, riLdcHfExtPing2Failures=riLdcHfExtPing2Failures, dot3MulticastReceiveEnabled=dot3MulticastReceiveEnabled, riLdcSlotSwRev=riLdcSlotSwRev, riPortMauJabberpLockupsRate=riPortMauJabberpLockupsRate, riThTable=riThTable, riThEntry=riThEntry, dot3MACSubLayerStatus=dot3MACSubLayerStatus, riRateTxLateCollisions=riRateTxLateCollisions, riLdcSlotModuleType=riLdcSlotModuleType, riLdcBusMonCollisions=riLdcBusMonCollisions, riLdcSlotConnectivityType=riLdcSlotConnectivityType, riTsRates=riTsRates, riSystemReset=riSystemReset, riLdcSlotIndex=riLdcSlotIndex, riLdcHfAPrimaryAui=riLdcHfAPrimaryAui, riRateTxMultipleCollisionFrames=riRateTxMultipleCollisionFrames, riLdcBusMonOutOfRangeLengthErrorsRate=riLdcBusMonOutOfRangeLengthErrorsRate, riSystemFirmwareRev=riSystemFirmwareRev, riLdcSlotEntry=riLdcSlotEntry, riLdcPSIndex=riLdcPSIndex, riLdcBusMonShortFrames=riLdcBusMonShortFrames, riSystemRateInterval=riSystemRateInterval, riPortShortFrames=riPortShortFrames, riLdcBusMonFramesReceivedOKRate=riLdcBusMonFramesReceivedOKRate, riThIndex=riThIndex, riLdcPSEntry=riLdcPSEntry, riRateTxInternalMACTransmitErrors=riRateTxInternalMACTransmitErrors, riLdcFanStatus=riLdcFanStatus, riLdcSlotConnectivityRev=riLdcSlotConnectivityRev, riLdcHfABackupMedia=riLdcHfABackupMedia, dot3XTxTable=dot3XTxTable, dot3XTxExcessiveCollisions=dot3XTxExcessiveCollisions, riSystemTicksPerSecond=riSystemTicksPerSecond, riLdcSlotSerialNumber=riLdcSlotSerialNumber, riLdcHfABackupAui=riLdcHfABackupAui, dot3XRxEntry=dot3XRxEntry, dot3XTxTDR=dot3XTxTDR, riLdcBusMonBus=riLdcBusMonBus, riPortOctetsReceivedOKRate=riPortOctetsReceivedOKRate, private=private, riPortState=riPortState, riPortLinkStatus=riPortLinkStatus, dot3AlignmentErrors=dot3AlignmentErrors, dot3=dot3, riLdcHfHysteresis=riLdcHfHysteresis, riLdcHfExtPing1Failures=riLdcHfExtPing1Failures, tnRemoteIpAddress=tnRemoteIpAddress, experimental=experimental, riBootEntry=riBootEntry, dot3TxSingleCollisionFrames=dot3TxSingleCollisionFrames, riLdcSlotResetTime=riLdcSlotResetTime, tnPort=tnPort, riLdcHfIntState=riLdcHfIntState, riPortMulticastFramesReceivedOKRate=riPortMulticastFramesReceivedOKRate, riLdcChassisStatus=riLdcChassisStatus, riPortMauJabberLockups=riPortMauJabberLockups, riLdcSlotConnectivityBus=riLdcSlotConnectivityBus, riLdcBusMonFramesReceivedOK=riLdcBusMonFramesReceivedOK, dot3FCSErrors=dot3FCSErrors, riRateTxDeferredTransmissions=riRateTxDeferredTransmissions, riThCount=riThCount, riLdcHfBPrimaryMedia=riLdcHfBPrimaryMedia, riLdcPSActualStatus=riLdcPSActualStatus, riLdcHfIntTxStatus=riLdcHfIntTxStatus, dot3Table=dot3Table, internet=internet, riPortShortFramesRate=riPortShortFramesRate, riLdcBusMonBCastFramesReceivedOK=riLdcBusMonBCastFramesReceivedOK, riLdcHfIntTxFailures=riLdcHfIntTxFailures, riPortInRangeLengthErrorsRate=riPortInRangeLengthErrorsRate, dot3XTxCarrierSenseErrors=dot3XTxCarrierSenseErrors, riLdcBusMonUtilCurrent=riLdcBusMonUtilCurrent, dot3CollTable=dot3CollTable, riLdcBusMonInRangeLengthErrorsRate=riLdcBusMonInRangeLengthErrorsRate, riPortSlotNumber=riPortSlotNumber, tnCount=tnCount, riProdLdc=riProdLdc, riLdcSlotDiagnosticCode=riLdcSlotDiagnosticCode, riLdcHfTable=riLdcHfTable, riPortOutOfRangeLengthErrors=riPortOutOfRangeLengthErrors, riPortAutoPartitions=riPortAutoPartitions, riLdcChassisSlotCount=riLdcChassisSlotCount, riRateRxFCSErrors=riRateRxFCSErrors, dot3XRxAutoPartitionStatus=dot3XRxAutoPartitionStatus, dot3XRxLastSourceAddress=dot3XRxLastSourceAddress, riLdcChassisSerialNumber=riLdcChassisSerialNumber, riLdcBusMonMCastFramesReceivedOKRate=riLdcBusMonMCastFramesReceivedOKRate, riLdcBusMonShortFramesRate=riLdcBusMonShortFramesRate, riLdcHfBusConfigChanges=riLdcHfBusConfigChanges, riLdcBusMonAlignmentErrors=riLdcBusMonAlignmentErrors, dot3InitializeMAC=dot3InitializeMAC, dot3CollIndex=dot3CollIndex, riLdcBusMonInRangeLengthErrors=riLdcBusMonInRangeLengthErrors, riNumBoots=riNumBoots, dot3Entry=dot3Entry, riPortFramesTooLongRate=riPortFramesTooLongRate, dot3CollCount=dot3CollCount, riPortLinkIntegrityChangesRate=riPortLinkIntegrityChangesRate, riLdcHfExtResponseTmo=riLdcHfExtResponseTmo, dot3CollFrequency=dot3CollFrequency, riPLdcNMM=riPLdcNMM, riLdcHfBusClockFailures=riLdcHfBusClockFailures, riPortCollisionsRate=riPortCollisionsRate, riThCommunity=riThCommunity, riThDirection=riThDirection, tnUserId=tnUserId, tnEntry=tnEntry, riPortSourceAddressChangesRate=riPortSourceAddressChangesRate, riRateRxInRangeLengthErrors=riRateRxInRangeLengthErrors, riRateRxInternalMACReceiveErrors=riRateRxInternalMACReceiveErrors, riLdcSlotConnectivityState=riLdcSlotConnectivityState, riLdcHfLastFailover=riLdcHfLastFailover, riBootVersion=riBootVersion, riPortLateCollisions=riPortLateCollisions, tnUpTime=tnUpTime, riLdcFanEntry=riLdcFanEntry, riLdcSlotSonicBus=riLdcSlotSonicBus, riBoot=riBoot, riPortCRCErrors=riPortCRCErrors, riLdcSlotConnectivityMedia=riLdcSlotConnectivityMedia, riSystemHardwareRev=riSystemHardwareRev, riLdcHfIndex=riLdcHfIndex, riLdcBusMonMCastFramesReceivedOK=riLdcBusMonMCastFramesReceivedOK, dot3XRxIndex=dot3XRxIndex, riRateRxFrameTooLongs=riRateRxFrameTooLongs, dot3TxSQETestErrors=dot3TxSQETestErrors, riThIPDestination=riThIPDestination, riThPhysDestination=riThPhysDestination, riLdcFanIndex=riLdcFanIndex, riLdcBusMonPygmiesRate=riLdcBusMonPygmiesRate, dot3XRxTable=dot3XRxTable, riPortEntry=riPortEntry, riLdcBusMonOutOfRangeLengthErrors=riLdcBusMonOutOfRangeLengthErrors, riThTriggeredCount=riThTriggeredCount, riBootGateway=riBootGateway, riLdcBusMonPygmies=riLdcBusMonPygmies, riPortLinkIntegrityChanges=riPortLinkIntegrityChanges, riLdcBusMonLateCollisions=riLdcBusMonLateCollisions, riLdcBusMonUtilPeakTime=riLdcBusMonUtilPeakTime, dot3CollEntry=dot3CollEntry, riBootIndex=riBootIndex, riLdcSlotBus=riLdcSlotBus, riThUniqueIndex=riThUniqueIndex, riLdcSlotConnectivitySerialNumber=riLdcSlotConnectivitySerialNumber, riPortSourceAddressChanges=riPortSourceAddressChanges, enterprises=enterprises, riLdcFirmwareRev=riLdcFirmwareRev, riLdcBusMonErrorFrames=riLdcBusMonErrorFrames, riLdcPowerSupplyTable=riLdcPowerSupplyTable, riSystemSerialNumber=riSystemSerialNumber, riLdcNumPowerSupplies=riLdcNumPowerSupplies, dot3XTxEnabled=dot3XTxEnabled, dot3XTxExcessiveDeferrals=dot3XTxExcessiveDeferrals, riThThreshold=riThThreshold, riRateTxSingleCollisionFrames=riRateTxSingleCollisionFrames, riLdcBusMonAlignmentErrorsRate=riLdcBusMonAlignmentErrorsRate, riLdcBusMonMissedPackets=riLdcBusMonMissedPackets, riLdcBusMonFramesTooLong=riLdcBusMonFramesTooLong, riLdcHfEntry=riLdcHfEntry, riPortAlignmentErrors=riPortAlignmentErrors, riPortFramesTooLong=riPortFramesTooLong, dot3XTxInternalMACTransmitErrors=dot3XTxInternalMACTransmitErrors, riRateRxOutofRangeLengthFields=riRateRxOutofRangeLengthFields, riLdcSlotContents=riLdcSlotContents, riLdcHfIntFailovers=riLdcHfIntFailovers, riThInterval=riThInterval, dot3XTxEntry=dot3XTxEntry, riPortLastSourceAddress=riPortLastSourceAddress, riPortTransmitClockViolations=riPortTransmitClockViolations, riSystemNVRamWriteCount=riSystemNVRamWriteCount, riLdcSlotAdminStatus=riLdcSlotAdminStatus, riLdcSlotTempCondition=riLdcSlotTempCondition, riLdcBusMonBCastFramesReceivedOKRate=riLdcBusMonBCastFramesReceivedOKRate, riPort=riPort, tnLocalIpAddress=tnLocalIpAddress, riPortCollisions=riPortCollisions, riLdcBusMonMissedPacketsRate=riLdcBusMonMissedPacketsRate, riPortBroadcastFramesReceivedOKRate=riPortBroadcastFramesReceivedOKRate, riPortOutOfRangeLengthErrorsRate=riPortOutOfRangeLengthErrorsRate, dot3XTxDeferredTransmissions=dot3XTxDeferredTransmissions, riLdcHardwareRev=riLdcHardwareRev, dot3XRxSourceAddressLog=dot3XRxSourceAddressLog, riLdcHfBusAutopartitions=riLdcHfBusAutopartitions, riLdcBusMonOctetsReceivedOKRate=riLdcBusMonOctetsReceivedOKRate, riPortOctetsReceivedOK=riPortOctetsReceivedOK, tnRemotePort=tnRemotePort, riLdcHfExtPing2Status=riLdcHfExtPing2Status, riLdcBusMonErrorFramesRate=riLdcBusMonErrorFramesRate, riRateTxCarrierSenseErrors=riRateTxCarrierSenseErrors, riLdcBusMonOctetsReceivedOK=riLdcBusMonOctetsReceivedOK, riThHysteresis=riThHysteresis, riLdcBusMonEntry=riLdcBusMonEntry, riPortMulticastFramesReceivedOK=riPortMulticastFramesReceivedOK, riThresh=riThresh, riLdcBusMonCollisionsRate=riLdcBusMonCollisionsRate, dot3XRxFrameTooLongs=dot3XRxFrameTooLongs, riLdcNumBusMons=riLdcNumBusMons, riLdcBusMonTable=riLdcBusMonTable, dot3TxMultipleCollisionFrames=dot3TxMultipleCollisionFrames, dot3XTxLateCollisions=dot3XTxLateCollisions, riLdcChassisSoftwareRev=riLdcChassisSoftwareRev, riLdcNmm=riLdcNmm, riPortInRangeLengthErrors=riPortInRangeLengthErrors, riLdcBusMonCRCErrors=riLdcBusMonCRCErrors, riLdcSlotDiagnostic=riLdcSlotDiagnostic, riLdcSlotOperStatus=riLdcSlotOperStatus, riSystemSoftwareRev=riSystemSoftwareRev, riLdcHfBPrimaryAui=riLdcHfBPrimaryAui, riLdcHfIntRetries=riLdcHfIntRetries, riLdcHfBusClockStatus=riLdcHfBusClockStatus, riRateRxAlignmentErrors=riRateRxAlignmentErrors, riLdcHfPrimReason=riLdcHfPrimReason, riPortCRCErrorsRate=riPortCRCErrorsRate, riProducts=riProducts, riLdcHfBBackupAui=riLdcHfBBackupAui, riLdcNumFans=riLdcNumFans, riLdcFanTable=riLdcFanTable, riLdcHfExtPing2=riLdcHfExtPing2, riThMaxCount=riThMaxCount, tnState=tnState)
mibBuilder.exportSymbols("INXNMM-MIB", riPortTransmitClockViolationsRate=riPortTransmitClockViolationsRate, riLdcBusMonFramesTooLongRate=riLdcBusMonFramesTooLongRate, dot3TxTable=dot3TxTable, riLdcHfAPrimaryMedia=riLdcHfAPrimaryMedia, dot3XRxInRangeLengthErrors=dot3XRxInRangeLengthErrors, riLdcHfExtPing1=riLdcHfExtPing1, riLdcSlotHwRev=riLdcSlotHwRev, riLdcHfExtPollFreq=riLdcHfExtPollFreq, dot3Index=dot3Index, tnTable=tnTable, riLdcSlotFwRev=riLdcSlotFwRev, riLdcHfExtPing1Status=riLdcHfExtPing1Status, dot3TxEntry=dot3TxEntry, dot3XRxAutoPartitionLog=dot3XRxAutoPartitionLog, riBootFileName=riBootFileName, dot3TxIndex=dot3TxIndex, riPortPortNumber=riPortPortNumber, dot3XRxInternalMACReceiveErrors=dot3XRxInternalMACReceiveErrors, tnOptionsOn=tnOptionsOn, riTelnet=riTelnet)
