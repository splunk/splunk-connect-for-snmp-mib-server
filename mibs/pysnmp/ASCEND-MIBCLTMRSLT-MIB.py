#
# PySNMP MIB module ASCEND-MIBCLTMRSLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBCLTMRSLT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Gauge32, IpAddress, MibIdentifier, ObjectIdentity, Counter32, iso, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Gauge32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Counter32", "iso", "Bits", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibcltmRslt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 68))
mibcltmRsltTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 1), )
if mibBuilder.loadTexts: mibcltmRsltTable.setStatus('mandatory')
mibcltmRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1), ).setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-Index-o"))
if mibBuilder.loadTexts: mibcltmRsltEntry.setStatus('mandatory')
cltmRslt_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 1), Integer32()).setLabel("cltmRslt-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_Index_o.setStatus('mandatory')
cltmRslt_CltmSlot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17)))).setLabel("cltmRslt-CltmSlot").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CltmSlot.setStatus('mandatory')
cltmRslt_TestResultTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 3), Integer32()).setLabel("cltmRslt-TestResultTimeStamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TestResultTimeStamp.setStatus('mandatory')
cltmRslt_TestResultSequence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 4), Integer32()).setLabel("cltmRslt-TestResultSequence").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TestResultSequence.setStatus('mandatory')
cltmRslt_TestResultStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notReady", 1), ("notValid", 2), ("overRange", 3), ("valid", 4)))).setLabel("cltmRslt-TestResultStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TestResultStatus.setStatus('mandatory')
cltmRslt_DmmResult = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 6), Integer32()).setLabel("cltmRslt-DmmResult").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmResult.setStatus('mandatory')
cltmRslt_LoopResistance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 7), Integer32()).setLabel("cltmRslt-LoopResistance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistance.setStatus('mandatory')
cltmRslt_LoopResistanceLength1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 8), Integer32()).setLabel("cltmRslt-LoopResistanceLength1").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength1.setStatus('mandatory')
cltmRslt_LoopResistanceLength2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 9), Integer32()).setLabel("cltmRslt-LoopResistanceLength2").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength2.setStatus('mandatory')
cltmRslt_LoopResistanceLength3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 10), Integer32()).setLabel("cltmRslt-LoopResistanceLength3").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength3.setStatus('mandatory')
cltmRslt_CoilDetectionCoilCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 11), Integer32()).setLabel("cltmRslt-CoilDetectionCoilCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CoilDetectionCoilCount.setStatus('mandatory')
cltmRslt_ImpulseNoiseReadLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 12), Integer32()).setLabel("cltmRslt-ImpulseNoiseReadLowThreshold").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadLowThreshold.setStatus('mandatory')
cltmRslt_ImpulseNoiseReadMidThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 13), Integer32()).setLabel("cltmRslt-ImpulseNoiseReadMidThreshold").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadMidThreshold.setStatus('mandatory')
cltmRslt_ImpulseNoiseReadHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 14), Integer32()).setLabel("cltmRslt-ImpulseNoiseReadHighThreshold").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadHighThreshold.setStatus('mandatory')
cltmRslt_RcvToneFrequency = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 15), Integer32()).setLabel("cltmRslt-RcvToneFrequency").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_RcvToneFrequency.setStatus('mandatory')
cltmRslt_RcvToneLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 16), Integer32()).setLabel("cltmRslt-RcvToneLevel").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_RcvToneLevel.setStatus('mandatory')
cltmRslt_TdrManualSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 17), Integer32()).setLabel("cltmRslt-TdrManualSampleCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrManualSampleCount.setStatus('mandatory')
cltmRslt_TdrAutomaticFaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 18), Integer32()).setLabel("cltmRslt-TdrAutomaticFaultDistance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrAutomaticFaultDistance.setStatus('mandatory')
cltmRslt_HardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 19), Integer32()).setLabel("cltmRslt-HardwareRevision").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_HardwareRevision.setStatus('mandatory')
cltmRslt_SofwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 20), Integer32()).setLabel("cltmRslt-SofwareRevision").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_SofwareRevision.setStatus('mandatory')
cltmRslt_DcDeltaResistanceTR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 21), Integer32()).setLabel("cltmRslt-DcDeltaResistanceTR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceTR.setStatus('mandatory')
cltmRslt_DcDeltaResistanceTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 22), Integer32()).setLabel("cltmRslt-DcDeltaResistanceTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceTS.setStatus('mandatory')
cltmRslt_DcDeltaResistanceRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 23), Integer32()).setLabel("cltmRslt-DcDeltaResistanceRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceRS.setStatus('mandatory')
cltmRslt_DcDeltaVoltageTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 24), Integer32()).setLabel("cltmRslt-DcDeltaVoltageTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaVoltageTS.setStatus('mandatory')
cltmRslt_DcDeltaVoltageRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 25), Integer32()).setLabel("cltmRslt-DcDeltaVoltageRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaVoltageRS.setStatus('mandatory')
cltmRslt_CapEquivalentTR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 26), Integer32()).setLabel("cltmRslt-CapEquivalentTR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CapEquivalentTR.setStatus('mandatory')
cltmRslt_CapEquivalentTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 27), Integer32()).setLabel("cltmRslt-CapEquivalentTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CapEquivalentTS.setStatus('mandatory')
cltmRslt_CapEquivalentRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 28), Integer32()).setLabel("cltmRslt-CapEquivalentRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CapEquivalentRS.setStatus('mandatory')
cltmRslt_DmmAllTR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 29), Integer32()).setLabel("cltmRslt-DmmAllTR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmAllTR.setStatus('mandatory')
cltmRslt_DmmAllTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 30), Integer32()).setLabel("cltmRslt-DmmAllTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmAllTS.setStatus('mandatory')
cltmRslt_DmmAllRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 31), Integer32()).setLabel("cltmRslt-DmmAllRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmAllRS.setStatus('mandatory')
cltmRslt_Ringer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 32), Integer32()).setLabel("cltmRslt-Ringer").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_Ringer.setStatus('mandatory')
cltmRslt_AtuR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 33), Integer32()).setLabel("cltmRslt-AtuR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_AtuR.setStatus('mandatory')
cltmRslt_BridgeTapNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 34), Integer32()).setLabel("cltmRslt-BridgeTapNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapNumber.setStatus('mandatory')
cltmRslt_BridgeTapLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 35), Integer32()).setLabel("cltmRslt-BridgeTapLength").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapLength.setStatus('mandatory')
cltmRslt_VoiceDetection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 37), Integer32()).setLabel("cltmRslt-VoiceDetection").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_VoiceDetection.setStatus('mandatory')
cltmRslt_FirstCoilLocation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 38), Integer32()).setLabel("cltmRslt-FirstCoilLocation").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_FirstCoilLocation.setStatus('mandatory')
cltmRslt_ShortLocation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 39), Integer32()).setLabel("cltmRslt-ShortLocation").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ShortLocation.setStatus('mandatory')
cltmRslt_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("cltmRslt-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmRslt_Action_o.setStatus('mandatory')
mibcltmRslt_BridgeTapTableTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 2), ).setLabel("mibcltmRslt-BridgeTapTableTable")
if mibBuilder.loadTexts: mibcltmRslt_BridgeTapTableTable.setStatus('mandatory')
mibcltmRslt_BridgeTapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1), ).setLabel("mibcltmRslt-BridgeTapTableEntry").setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-BridgeTapTable-Index-o"), (0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-BridgeTapTable-Index1-o"))
if mibBuilder.loadTexts: mibcltmRslt_BridgeTapTableEntry.setStatus('mandatory')
cltmRslt_BridgeTapTable_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 1), Integer32()).setLabel("cltmRslt-BridgeTapTable-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Index_o.setStatus('mandatory')
cltmRslt_BridgeTapTable_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 2), Integer32()).setLabel("cltmRslt-BridgeTapTable-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Index1_o.setStatus('mandatory')
cltmRslt_BridgeTapTable_Distance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 3), Integer32()).setLabel("cltmRslt-BridgeTapTable-Distance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Distance.setStatus('mandatory')
cltmRslt_BridgeTapTable_Length = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 4), Integer32()).setLabel("cltmRslt-BridgeTapTable-Length").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Length.setStatus('mandatory')
cltmRslt_BridgeTapTable_Confidence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 5), Integer32()).setLabel("cltmRslt-BridgeTapTable-Confidence").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Confidence.setStatus('mandatory')
mibcltmRslt_TdrDistanceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 3), ).setLabel("mibcltmRslt-TdrDistanceLevelTable")
if mibBuilder.loadTexts: mibcltmRslt_TdrDistanceLevelTable.setStatus('mandatory')
mibcltmRslt_TdrDistanceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1), ).setLabel("mibcltmRslt-TdrDistanceLevelEntry").setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-TdrDistanceLevel-Index-o"), (0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-TdrDistanceLevel-Index1-o"))
if mibBuilder.loadTexts: mibcltmRslt_TdrDistanceLevelEntry.setStatus('mandatory')
cltmRslt_TdrDistanceLevel_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 1), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Index_o.setStatus('mandatory')
cltmRslt_TdrDistanceLevel_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 2), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Index1_o.setStatus('mandatory')
cltmRslt_TdrDistanceLevel_Distance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 3), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Distance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Distance.setStatus('mandatory')
cltmRslt_TdrDistanceLevel_Level = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 4), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Level").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Level.setStatus('mandatory')
mibcltmRslt_PsdFrequencyLevelTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 4), ).setLabel("mibcltmRslt-PsdFrequencyLevelTable")
if mibBuilder.loadTexts: mibcltmRslt_PsdFrequencyLevelTable.setStatus('mandatory')
mibcltmRslt_PsdFrequencyLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1), ).setLabel("mibcltmRslt-PsdFrequencyLevelEntry").setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-PsdFrequencyLevel-Index-o"), (0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-PsdFrequencyLevel-Index1-o"))
if mibBuilder.loadTexts: mibcltmRslt_PsdFrequencyLevelEntry.setStatus('mandatory')
cltmRslt_PsdFrequencyLevel_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 1), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Index_o.setStatus('mandatory')
cltmRslt_PsdFrequencyLevel_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 2), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Index1_o.setStatus('mandatory')
cltmRslt_PsdFrequencyLevel_Frequency = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 3), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Frequency").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Frequency.setStatus('mandatory')
cltmRslt_PsdFrequencyLevel_Level = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 4), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Level").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Level.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBCLTMRSLT-MIB", cltmRslt_CoilDetectionCoilCount=cltmRslt_CoilDetectionCoilCount, cltmRslt_DcDeltaResistanceTS=cltmRslt_DcDeltaResistanceTS, mibcltmRslt_PsdFrequencyLevelTable=mibcltmRslt_PsdFrequencyLevelTable, cltmRslt_BridgeTapTable_Confidence=cltmRslt_BridgeTapTable_Confidence, cltmRslt_TdrDistanceLevel_Index_o=cltmRslt_TdrDistanceLevel_Index_o, mibcltmRslt_PsdFrequencyLevelEntry=mibcltmRslt_PsdFrequencyLevelEntry, cltmRslt_DmmAllRS=cltmRslt_DmmAllRS, cltmRslt_LoopResistanceLength2=cltmRslt_LoopResistanceLength2, cltmRslt_DcDeltaVoltageTS=cltmRslt_DcDeltaVoltageTS, cltmRslt_AtuR=cltmRslt_AtuR, mibcltmRslt=mibcltmRslt, cltmRslt_DmmResult=cltmRslt_DmmResult, cltmRslt_HardwareRevision=cltmRslt_HardwareRevision, cltmRslt_FirstCoilLocation=cltmRslt_FirstCoilLocation, mibcltmRslt_BridgeTapTableEntry=mibcltmRslt_BridgeTapTableEntry, cltmRslt_TestResultTimeStamp=cltmRslt_TestResultTimeStamp, cltmRslt_BridgeTapNumber=cltmRslt_BridgeTapNumber, cltmRslt_TdrDistanceLevel_Level=cltmRslt_TdrDistanceLevel_Level, cltmRslt_Ringer=cltmRslt_Ringer, cltmRslt_ImpulseNoiseReadHighThreshold=cltmRslt_ImpulseNoiseReadHighThreshold, cltmRslt_SofwareRevision=cltmRslt_SofwareRevision, mibcltmRsltEntry=mibcltmRsltEntry, cltmRslt_DcDeltaResistanceRS=cltmRslt_DcDeltaResistanceRS, cltmRslt_RcvToneFrequency=cltmRslt_RcvToneFrequency, cltmRslt_PsdFrequencyLevel_Index_o=cltmRslt_PsdFrequencyLevel_Index_o, cltmRslt_RcvToneLevel=cltmRslt_RcvToneLevel, cltmRslt_TestResultSequence=cltmRslt_TestResultSequence, cltmRslt_ImpulseNoiseReadLowThreshold=cltmRslt_ImpulseNoiseReadLowThreshold, cltmRslt_PsdFrequencyLevel_Frequency=cltmRslt_PsdFrequencyLevel_Frequency, cltmRslt_BridgeTapLength=cltmRslt_BridgeTapLength, cltmRslt_VoiceDetection=cltmRslt_VoiceDetection, cltmRslt_Index_o=cltmRslt_Index_o, cltmRslt_BridgeTapTable_Length=cltmRslt_BridgeTapTable_Length, mibcltmRslt_TdrDistanceLevelEntry=mibcltmRslt_TdrDistanceLevelEntry, cltmRslt_TdrDistanceLevel_Index1_o=cltmRslt_TdrDistanceLevel_Index1_o, cltmRslt_PsdFrequencyLevel_Index1_o=cltmRslt_PsdFrequencyLevel_Index1_o, cltmRslt_TestResultStatus=cltmRslt_TestResultStatus, cltmRslt_ShortLocation=cltmRslt_ShortLocation, cltmRslt_BridgeTapTable_Index1_o=cltmRslt_BridgeTapTable_Index1_o, cltmRslt_CltmSlot=cltmRslt_CltmSlot, cltmRslt_Action_o=cltmRslt_Action_o, cltmRslt_LoopResistanceLength1=cltmRslt_LoopResistanceLength1, cltmRslt_CapEquivalentTR=cltmRslt_CapEquivalentTR, cltmRslt_DmmAllTR=cltmRslt_DmmAllTR, cltmRslt_LoopResistance=cltmRslt_LoopResistance, mibcltmRsltTable=mibcltmRsltTable, cltmRslt_DcDeltaVoltageRS=cltmRslt_DcDeltaVoltageRS, cltmRslt_DmmAllTS=cltmRslt_DmmAllTS, cltmRslt_LoopResistanceLength3=cltmRslt_LoopResistanceLength3, cltmRslt_DcDeltaResistanceTR=cltmRslt_DcDeltaResistanceTR, cltmRslt_CapEquivalentRS=cltmRslt_CapEquivalentRS, cltmRslt_BridgeTapTable_Distance=cltmRslt_BridgeTapTable_Distance, mibcltmRslt_TdrDistanceLevelTable=mibcltmRslt_TdrDistanceLevelTable, cltmRslt_ImpulseNoiseReadMidThreshold=cltmRslt_ImpulseNoiseReadMidThreshold, cltmRslt_TdrManualSampleCount=cltmRslt_TdrManualSampleCount, cltmRslt_PsdFrequencyLevel_Level=cltmRslt_PsdFrequencyLevel_Level, DisplayString=DisplayString, cltmRslt_TdrDistanceLevel_Distance=cltmRslt_TdrDistanceLevel_Distance, cltmRslt_TdrAutomaticFaultDistance=cltmRslt_TdrAutomaticFaultDistance, cltmRslt_BridgeTapTable_Index_o=cltmRslt_BridgeTapTable_Index_o, mibcltmRslt_BridgeTapTableTable=mibcltmRslt_BridgeTapTableTable, cltmRslt_CapEquivalentTS=cltmRslt_CapEquivalentTS)
