#
# PySNMP MIB module CXSnaLinkConversionModule-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXSnaLinkConversionModule-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cxSnalc, SapIndex, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxSnalc", "SapIndex", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, Gauge32, Bits, NotificationType, ModuleIdentity, Counter32, IpAddress, ObjectIdentity, MibIdentifier, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "Gauge32", "Bits", "NotificationType", "ModuleIdentity", "Counter32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Integer32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snalcMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcMibLevel.setStatus('mandatory')
snalcSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10), )
if mibBuilder.loadTexts: snalcSapTable.setStatus('mandatory')
snalcSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1), ).setIndexNames((0, "CXSnaLinkConversionModule-MIB", "snalcSapNumber"))
if mibBuilder.loadTexts: snalcSapEntry.setStatus('mandatory')
snalcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcSapNumber.setStatus('mandatory')
snalcSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcSapRowStatus.setStatus('mandatory')
snalcSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcSapAlias.setStatus('mandatory')
snalcSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcSapCompanionAlias.setStatus('mandatory')
snalcSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("bound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcSapState.setStatus('mandatory')
snalcCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11), )
if mibBuilder.loadTexts: snalcCrossConnectTable.setStatus('mandatory')
snalcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1), ).setIndexNames((0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectSrcSapNumber"), (0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectSrcLinkAddrIndex"), (0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectDstSapNumber"), (0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectDstLinkAddrIndex"))
if mibBuilder.loadTexts: snalcCrossConnectEntry.setStatus('mandatory')
snalcCrossConnectSrcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectSrcSapNumber.setStatus('mandatory')
snalcCrossConnectSrcLinkAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectSrcLinkAddrIndex.setStatus('mandatory')
snalcCrossConnectDstSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 3), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectDstSapNumber.setStatus('mandatory')
snalcCrossConnectDstLinkAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectDstLinkAddrIndex.setStatus('mandatory')
snalcCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectRowStatus.setStatus('mandatory')
snalcCrossConnectPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectPuId.setStatus('mandatory')
snalcCrossConnectMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectMaxRetries.setStatus('mandatory')
snalcCrossConnectConnectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectConnectInterval.setStatus('mandatory')
snalcCrossConnectSlowConnectThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectSlowConnectThreshold.setStatus('mandatory')
snalcCrossConnectSlowConnectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectSlowConnectInterval.setStatus('mandatory')
snalcCrossConnectWaitContactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectWaitContactTimer.setStatus('mandatory')
snalcCrossConnectConnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("endToEnd", 2))).clone('endToEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectConnectMethod.setStatus('mandatory')
snalcCrossConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectAdminStatus.setStatus('mandatory')
snalcCrossConnectSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("connecting", 3), ("waitXid", 4), ("setMode", 5), ("waitPartner", 6), ("sendXid", 7), ("waitSetMode", 8), ("delayConnect", 9), ("associated", 10), ("disconnecting", 11), ("linkDisconnecting", 12), ("waitDisconnect", 13), ("failed", 14), ("data", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectSrcOperStatus.setStatus('mandatory')
snalcCrossConnectDstOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("connecting", 3), ("waitXid", 4), ("setMode", 5), ("waitPartner", 6), ("sendXid", 7), ("waitSetMode", 8), ("delayConnect", 9), ("associated", 10), ("disconnecting", 11), ("linkDisconnecting", 12), ("waitDisconnect", 13), ("failed", 14), ("data", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectDstOperStatus.setStatus('mandatory')
snalcCrossConnectXidTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonTransparent", 1), ("transparent", 2))).clone('nonTransparent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectXidTransparent.setStatus('mandatory')
snalcCrossConnectDataLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sna", 1), ("bsc", 2))).clone('sna')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectDataLinkType.setStatus('mandatory')
mibBuilder.exportSymbols("CXSnaLinkConversionModule-MIB", snalcCrossConnectAdminStatus=snalcCrossConnectAdminStatus, snalcCrossConnectDstLinkAddrIndex=snalcCrossConnectDstLinkAddrIndex, snalcCrossConnectDataLinkType=snalcCrossConnectDataLinkType, snalcCrossConnectWaitContactTimer=snalcCrossConnectWaitContactTimer, snalcCrossConnectTable=snalcCrossConnectTable, snalcCrossConnectDstSapNumber=snalcCrossConnectDstSapNumber, snalcCrossConnectEntry=snalcCrossConnectEntry, snalcCrossConnectSrcLinkAddrIndex=snalcCrossConnectSrcLinkAddrIndex, snalcSapRowStatus=snalcSapRowStatus, snalcCrossConnectSrcSapNumber=snalcCrossConnectSrcSapNumber, snalcSapEntry=snalcSapEntry, snalcCrossConnectMaxRetries=snalcCrossConnectMaxRetries, snalcSapNumber=snalcSapNumber, snalcCrossConnectXidTransparent=snalcCrossConnectXidTransparent, snalcCrossConnectSlowConnectInterval=snalcCrossConnectSlowConnectInterval, snalcCrossConnectSlowConnectThreshold=snalcCrossConnectSlowConnectThreshold, snalcSapState=snalcSapState, snalcSapTable=snalcSapTable, snalcSapCompanionAlias=snalcSapCompanionAlias, snalcCrossConnectPuId=snalcCrossConnectPuId, snalcMibLevel=snalcMibLevel, snalcSapAlias=snalcSapAlias, snalcCrossConnectRowStatus=snalcCrossConnectRowStatus, snalcCrossConnectSrcOperStatus=snalcCrossConnectSrcOperStatus, snalcCrossConnectDstOperStatus=snalcCrossConnectDstOperStatus, snalcCrossConnectConnectInterval=snalcCrossConnectConnectInterval, snalcCrossConnectConnectMethod=snalcCrossConnectConnectMethod)
