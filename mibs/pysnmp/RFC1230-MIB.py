#
# PySNMP MIB module RFC1230-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1230-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:48:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, ObjectIdentity, Counter64, MibIdentifier, iso, TimeTicks, Integer32, Gauge32, Unsigned32, Bits, transmission, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Counter64", "MibIdentifier", "iso", "TimeTicks", "Integer32", "Gauge32", "Unsigned32", "Bits", "transmission", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dot4 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class OctetTime(Integer32):
    pass

dot4Table = MibTable((1, 3, 6, 1, 2, 1, 10, 8, 1), )
if mibBuilder.loadTexts: dot4Table.setStatus('mandatory')
dot4Entry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 8, 1, 1), ).setIndexNames((0, "RFC1230-MIB", "dot4IfIndex"))
if mibBuilder.loadTexts: dot4Entry.setStatus('mandatory')
dot4IfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4IfIndex.setStatus('mandatory')
dot4Options = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4Options.setStatus('mandatory')
dot4State = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("offline", 2), ("outOfRing", 3), ("enteringRing", 4), ("inRing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4State.setStatus('mandatory')
dot4Commands = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-op", 1), ("enterRing", 2), ("exitRing", 3), ("reset", 4), ("initialize", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4Commands.setStatus('mandatory')
dot4MacAddrLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sixteenBit", 1), ("forty-eightBit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4MacAddrLen.setStatus('mandatory')
dot4NextStation = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4NextStation.setStatus('mandatory')
dot4PreviousStation = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4PreviousStation.setStatus('mandatory')
dot4SlotTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 8), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4SlotTime.setStatus('mandatory')
dot4LastTokenRotTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 9), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4LastTokenRotTime.setStatus('mandatory')
dot4HiPriTokenHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 10), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4HiPriTokenHoldTime.setStatus('mandatory')
dot4TargetRotTimeClass4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 11), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4TargetRotTimeClass4.setStatus('mandatory')
dot4TargetRotTimeClass2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 12), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4TargetRotTimeClass2.setStatus('mandatory')
dot4TargetRotTimeClass0 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 13), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4TargetRotTimeClass0.setStatus('mandatory')
dot4TargetRotTimeRingMaint = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 14), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4TargetRotTimeRingMaint.setStatus('mandatory')
dot4RingMaintTimerInitValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 15), OctetTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4RingMaintTimerInitValue.setStatus('mandatory')
dot4MaxInterSolicitCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4MaxInterSolicitCount.setStatus('mandatory')
dot4MaxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4MaxRetries.setStatus('mandatory')
dot4MinPostSilencePreambLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4MinPostSilencePreambLen.setStatus('mandatory')
dot4StandardRevision = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("rev2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StandardRevision.setStatus('mandatory')
dot4InitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 8, 2), )
if mibBuilder.loadTexts: dot4InitTable.setStatus('mandatory')
dot4InitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 8, 2, 1), ).setIndexNames((0, "RFC1230-MIB", "dot4InitIfIndex"))
if mibBuilder.loadTexts: dot4InitEntry.setStatus('mandatory')
dot4InitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4InitIfIndex.setStatus('mandatory')
dot4InitSlotTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 2), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitSlotTime.setStatus('mandatory')
dot4InitMaxInterSolicitCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitMaxInterSolicitCount.setStatus('mandatory')
dot4InitMaxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitMaxRetries.setStatus('mandatory')
dot4InitHiPriTokenHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 5), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitHiPriTokenHoldTime.setStatus('mandatory')
dot4InitTargetRotTimeClass4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 6), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitTargetRotTimeClass4.setStatus('mandatory')
dot4InitTargetRotTimeClass2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 7), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitTargetRotTimeClass2.setStatus('mandatory')
dot4InitTargetRotTimeClass0 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 8), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitTargetRotTimeClass0.setStatus('mandatory')
dot4InitTargetRotTimeRingMaint = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 9), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitTargetRotTimeRingMaint.setStatus('mandatory')
dot4InitRingMaintTimerInitValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 10), OctetTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitRingMaintTimerInitValue.setStatus('mandatory')
dot4InitMinPostSilencePreambLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitMinPostSilencePreambLen.setStatus('mandatory')
dot4InitInRingDesired = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inRing", 1), ("outOfRing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot4InitInRingDesired.setStatus('mandatory')
dot4StatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 8, 3), )
if mibBuilder.loadTexts: dot4StatsTable.setStatus('mandatory')
dot4StatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 8, 3, 1), ).setIndexNames((0, "RFC1230-MIB", "dot4StatsIfIndex"))
if mibBuilder.loadTexts: dot4StatsEntry.setStatus('mandatory')
dot4StatsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsIfIndex.setStatus('mandatory')
dot4StatsTokenPasses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsTokenPasses.setStatus('optional')
dot4StatsTokenHeards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsTokenHeards.setStatus('optional')
dot4StatsNoSuccessors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsNoSuccessors.setStatus('mandatory')
dot4StatsWhoFollows = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsWhoFollows.setStatus('mandatory')
dot4StatsTokenPassFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsTokenPassFails.setStatus('mandatory')
dot4StatsNonSilences = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsNonSilences.setStatus('mandatory')
dot4StatsFcsErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsFcsErrors.setStatus('mandatory')
dot4StatsEbitErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsEbitErrors.setStatus('mandatory')
dot4StatsFrameFrags = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsFrameFrags.setStatus('mandatory')
dot4StatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsFrameTooLongs.setStatus('mandatory')
dot4StatsOverRuns = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsOverRuns.setStatus('mandatory')
dot4StatsDupAddresses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 8, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot4StatsDupAddresses.setStatus('mandatory')
dot4Tests = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 5))
dot4Errors = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 4))
dot4ModemInitFailed = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 4, 1))
testFifoPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 5, 1))
testExternalLoopback = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 5, 2))
dot4ChipSets = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 6))
chipSetMc68824 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 8, 6, 1))
mibBuilder.exportSymbols("RFC1230-MIB", dot4PreviousStation=dot4PreviousStation, dot4InitTargetRotTimeClass0=dot4InitTargetRotTimeClass0, dot4InitMinPostSilencePreambLen=dot4InitMinPostSilencePreambLen, dot4TargetRotTimeClass0=dot4TargetRotTimeClass0, dot4StatsIfIndex=dot4StatsIfIndex, dot4Errors=dot4Errors, OctetTime=OctetTime, dot4TargetRotTimeRingMaint=dot4TargetRotTimeRingMaint, dot4StatsFcsErrors=dot4StatsFcsErrors, dot4Table=dot4Table, dot4StatsWhoFollows=dot4StatsWhoFollows, dot4Tests=dot4Tests, dot4InitMaxRetries=dot4InitMaxRetries, dot4StatsDupAddresses=dot4StatsDupAddresses, dot4StatsNoSuccessors=dot4StatsNoSuccessors, dot4StatsFrameFrags=dot4StatsFrameFrags, dot4ChipSets=dot4ChipSets, chipSetMc68824=chipSetMc68824, dot4StatsFrameTooLongs=dot4StatsFrameTooLongs, dot4MaxRetries=dot4MaxRetries, dot4InitIfIndex=dot4InitIfIndex, dot4=dot4, dot4MinPostSilencePreambLen=dot4MinPostSilencePreambLen, dot4Entry=dot4Entry, dot4MaxInterSolicitCount=dot4MaxInterSolicitCount, dot4TargetRotTimeClass2=dot4TargetRotTimeClass2, dot4NextStation=dot4NextStation, dot4StatsTokenHeards=dot4StatsTokenHeards, dot4Commands=dot4Commands, dot4StatsEbitErrors=dot4StatsEbitErrors, dot4ModemInitFailed=dot4ModemInitFailed, dot4RingMaintTimerInitValue=dot4RingMaintTimerInitValue, dot4InitTargetRotTimeClass4=dot4InitTargetRotTimeClass4, dot4StatsNonSilences=dot4StatsNonSilences, dot4LastTokenRotTime=dot4LastTokenRotTime, dot4StatsOverRuns=dot4StatsOverRuns, dot4State=dot4State, dot4InitRingMaintTimerInitValue=dot4InitRingMaintTimerInitValue, dot4InitHiPriTokenHoldTime=dot4InitHiPriTokenHoldTime, testFifoPath=testFifoPath, dot4InitEntry=dot4InitEntry, dot4IfIndex=dot4IfIndex, dot4HiPriTokenHoldTime=dot4HiPriTokenHoldTime, dot4InitMaxInterSolicitCount=dot4InitMaxInterSolicitCount, dot4Options=dot4Options, MacAddress=MacAddress, dot4MacAddrLen=dot4MacAddrLen, dot4InitTable=dot4InitTable, dot4StatsTable=dot4StatsTable, dot4InitSlotTime=dot4InitSlotTime, dot4InitTargetRotTimeRingMaint=dot4InitTargetRotTimeRingMaint, dot4StandardRevision=dot4StandardRevision, dot4InitInRingDesired=dot4InitInRingDesired, dot4StatsEntry=dot4StatsEntry, dot4StatsTokenPasses=dot4StatsTokenPasses, testExternalLoopback=testExternalLoopback, dot4TargetRotTimeClass4=dot4TargetRotTimeClass4, dot4SlotTime=dot4SlotTime, dot4StatsTokenPassFails=dot4StatsTokenPassFails, dot4InitTargetRotTimeClass2=dot4InitTargetRotTimeClass2)
