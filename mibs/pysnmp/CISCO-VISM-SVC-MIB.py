#
# PySNMP MIB module CISCO-VISM-SVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-SVC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:02:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Counter64, ObjectIdentity, TimeTicks, Unsigned32, Integer32, ModuleIdentity, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32", "Integer32", "ModuleIdentity", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoVismSvcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 90))
ciscoVismSvcMIB.setRevisions(('2003-10-09 00:00',))
if mibBuilder.loadTexts: ciscoVismSvcMIB.setLastUpdated('200310090000Z')
if mibBuilder.loadTexts: ciscoVismSvcMIB.setOrganization('Cisco Systems, Inc.')
vismSvcGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10))
vismSvcCnfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19))
vismSvcAtmQosGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1))
vismSvcTrfScalingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2))
vismSvcAal2CidGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3))
vismSvcTxSetups = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxSetups.setStatus('current')
vismSvcRxSetups = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxSetups.setStatus('current')
vismSvcTxCallProcs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxCallProcs.setStatus('current')
vismSvcRxCallProcs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxCallProcs.setStatus('current')
vismSvcTxConns = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxConns.setStatus('current')
vismSvcTxConnAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxConnAcks.setStatus('current')
vismSvcRxConns = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxConns.setStatus('current')
vismSvcRxConnAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxConnAcks.setStatus('current')
vismSvcTxReleases = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxReleases.setStatus('current')
vismSvcTxReleaseCompls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxReleaseCompls.setStatus('current')
vismSvcRxReleases = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxReleases.setStatus('current')
vismSvcRxReleaseCompls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxReleaseCompls.setStatus('current')
vismSvcTxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxRestarts.setStatus('current')
vismSvcTxRestartAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxRestartAcks.setStatus('current')
vismSvcRxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxRestarts.setStatus('current')
vismSvcRxRestartAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxRestartAcks.setStatus('current')
vismSvcTxResyncStrts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncStrts.setStatus('current')
vismSvcTxResyncStrtAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncStrtAcks.setStatus('current')
vismSvcRxResyncStrts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncStrts.setStatus('current')
vismSvcRxResyncStrtAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncStrtAcks.setStatus('current')
vismSvcTxResyncEnds = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncEnds.setStatus('current')
vismSvcTxResyncEndAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncEndAcks.setStatus('current')
vismSvcRxResyncEnds = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncEnds.setStatus('current')
vismSvcRxResyncEndAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncEndAcks.setStatus('current')
vismSvcTxBulkResyncs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxBulkResyncs.setStatus('current')
vismSvcRxBulkResyncs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxBulkResyncs.setStatus('current')
vismSvcCallProcExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcCallProcExpiries.setStatus('current')
vismSvcReleasExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcReleasExpiries.setStatus('current')
vismSvcConnExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcConnExpiries.setStatus('current')
vismSvcConnAckExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcConnAckExpiries.setStatus('current')
vismSvcRestartExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRestartExpiries.setStatus('current')
vismSvcResyncExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcResyncExpiries.setStatus('current')
vismSvcAtmQosCdv = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 20000)).clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosCdv.setStatus('current')
vismSvcAtmQosCtd = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 150000)).clone(150000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosCtd.setStatus('current')
vismSvcAtmQosClr = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosClr.setStatus('current')
vismSvcTrfScalingFactor = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcTrfScalingFactor.setStatus('current')
vismSvcAal2CidNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAal2CidNumber.setStatus('current')
ciscoVismSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 90, 2))
ciscoVismSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1))
ciscoVismSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 2))
ciscoVismSvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 2, 1)).setObjects(("CISCO-VISM-SVC-MIB", "ciscoVismSvcCounterGroup"), ("CISCO-VISM-SVC-MIB", "ciscoVismSvcAtmQosGroup"), ("CISCO-VISM-SVC-MIB", "ciscoVismSvcTrfScalingGrp"), ("CISCO-VISM-SVC-MIB", "ciscoVismSvcAal2CidGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcCompliance = ciscoVismSvcCompliance.setStatus('current')
ciscoVismSvcCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 1)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcTxSetups"), ("CISCO-VISM-SVC-MIB", "vismSvcRxSetups"), ("CISCO-VISM-SVC-MIB", "vismSvcTxCallProcs"), ("CISCO-VISM-SVC-MIB", "vismSvcRxCallProcs"), ("CISCO-VISM-SVC-MIB", "vismSvcTxConns"), ("CISCO-VISM-SVC-MIB", "vismSvcTxConnAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxConns"), ("CISCO-VISM-SVC-MIB", "vismSvcRxConnAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxReleases"), ("CISCO-VISM-SVC-MIB", "vismSvcTxReleaseCompls"), ("CISCO-VISM-SVC-MIB", "vismSvcRxReleases"), ("CISCO-VISM-SVC-MIB", "vismSvcRxReleaseCompls"), ("CISCO-VISM-SVC-MIB", "vismSvcTxRestarts"), ("CISCO-VISM-SVC-MIB", "vismSvcTxRestartAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxRestarts"), ("CISCO-VISM-SVC-MIB", "vismSvcRxRestartAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncStrts"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncStrtAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncStrts"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncStrtAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncEnds"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncEndAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncEnds"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncEndAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxBulkResyncs"), ("CISCO-VISM-SVC-MIB", "vismSvcRxBulkResyncs"), ("CISCO-VISM-SVC-MIB", "vismSvcCallProcExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcReleasExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcConnExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcConnAckExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcRestartExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcResyncExpiries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcCounterGroup = ciscoVismSvcCounterGroup.setStatus('current')
ciscoVismSvcAtmQosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 2)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcAtmQosCdv"), ("CISCO-VISM-SVC-MIB", "vismSvcAtmQosCtd"), ("CISCO-VISM-SVC-MIB", "vismSvcAtmQosClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcAtmQosGroup = ciscoVismSvcAtmQosGroup.setStatus('current')
ciscoVismSvcTrfScalingGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 3)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcTrfScalingFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcTrfScalingGrp = ciscoVismSvcTrfScalingGrp.setStatus('current')
ciscoVismSvcAal2CidGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 4)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcAal2CidNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcAal2CidGrp = ciscoVismSvcAal2CidGrp.setStatus('current')
mibBuilder.exportSymbols("CISCO-VISM-SVC-MIB", vismSvcTxResyncEndAcks=vismSvcTxResyncEndAcks, vismSvcTxRestarts=vismSvcTxRestarts, vismSvcRxConnAcks=vismSvcRxConnAcks, vismSvcRxCallProcs=vismSvcRxCallProcs, vismSvcTxResyncStrts=vismSvcTxResyncStrts, ciscoVismSvcCounterGroup=ciscoVismSvcCounterGroup, vismSvcTxCallProcs=vismSvcTxCallProcs, vismSvcRxResyncStrtAcks=vismSvcRxResyncStrtAcks, PYSNMP_MODULE_ID=ciscoVismSvcMIB, vismSvcTxConnAcks=vismSvcTxConnAcks, vismSvcReleasExpiries=vismSvcReleasExpiries, ciscoVismSvcCompliance=ciscoVismSvcCompliance, ciscoVismSvcMIBGroups=ciscoVismSvcMIBGroups, vismSvcRxReleaseCompls=vismSvcRxReleaseCompls, vismSvcRxResyncStrts=vismSvcRxResyncStrts, ciscoVismSvcAal2CidGrp=ciscoVismSvcAal2CidGrp, ciscoVismSvcMIB=ciscoVismSvcMIB, vismSvcRxBulkResyncs=vismSvcRxBulkResyncs, ciscoVismSvcAtmQosGroup=ciscoVismSvcAtmQosGroup, vismSvcRxResyncEndAcks=vismSvcRxResyncEndAcks, ciscoVismSvcMIBConformance=ciscoVismSvcMIBConformance, vismSvcRxSetups=vismSvcRxSetups, vismSvcRxRestartAcks=vismSvcRxRestartAcks, vismSvcTxResyncStrtAcks=vismSvcTxResyncStrtAcks, vismSvcTxSetups=vismSvcTxSetups, ciscoVismSvcTrfScalingGrp=ciscoVismSvcTrfScalingGrp, vismSvcTxResyncEnds=vismSvcTxResyncEnds, vismSvcAtmQosCtd=vismSvcAtmQosCtd, vismSvcCallProcExpiries=vismSvcCallProcExpiries, vismSvcCnfGroups=vismSvcCnfGroups, vismSvcRxConns=vismSvcRxConns, vismSvcRxRestarts=vismSvcRxRestarts, vismSvcRestartExpiries=vismSvcRestartExpiries, vismSvcTrfScalingFactor=vismSvcTrfScalingFactor, vismSvcTrfScalingGrp=vismSvcTrfScalingGrp, vismSvcAal2CidGrp=vismSvcAal2CidGrp, vismSvcAtmQosGrp=vismSvcAtmQosGrp, vismSvcTxConns=vismSvcTxConns, vismSvcGrp=vismSvcGrp, vismSvcTxReleaseCompls=vismSvcTxReleaseCompls, vismSvcConnAckExpiries=vismSvcConnAckExpiries, vismSvcConnExpiries=vismSvcConnExpiries, vismSvcResyncExpiries=vismSvcResyncExpiries, ciscoVismSvcMIBCompliances=ciscoVismSvcMIBCompliances, vismSvcTxRestartAcks=vismSvcTxRestartAcks, vismSvcAtmQosClr=vismSvcAtmQosClr, vismSvcAtmQosCdv=vismSvcAtmQosCdv, vismSvcTxReleases=vismSvcTxReleases, vismSvcRxResyncEnds=vismSvcRxResyncEnds, vismSvcAal2CidNumber=vismSvcAal2CidNumber, vismSvcTxBulkResyncs=vismSvcTxBulkResyncs, vismSvcRxReleases=vismSvcRxReleases)
