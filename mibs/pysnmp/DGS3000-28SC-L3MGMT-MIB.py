#
# PySNMP MIB module DGS3000-28SC-L3MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3000-28SC-L3MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:30:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, IpAddress, Bits, TimeTicks, Counter32, Counter64, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "IpAddress", "Bits", "TimeTicks", "Counter32", "Counter64", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "NotificationType", "ObjectIdentity")
TimeStamp, PhysAddress, MacAddress, TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "PhysAddress", "MacAddress", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
dlink_Dgs3000Proj_DGS3000_28SCax, = mibBuilder.importSymbols("SWDGS3000PRIMGMT-MIB", "dlink-Dgs3000Proj-DGS3000-28SCax")
swL3MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3))
if mibBuilder.loadTexts: swL3MgmtMIB.setLastUpdated('201408180000Z')
if mibBuilder.loadTexts: swL3MgmtMIB.setOrganization(' ')
class NodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

swL3IpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2))
swL3RelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3))
swL3IpCtrlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1))
swL3IpFdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2))
swL3RelayDnsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2))
class VrId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

swL3IpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: swL3IpCtrlTable.setStatus('current')
swL3IpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3IpCtrlInterfaceName"))
if mibBuilder.loadTexts: swL3IpCtrlEntry.setStatus('current')
swL3IpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setStatus('current')
swL3IpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setStatus('current')
swL3IpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setStatus('current')
swL3IpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setStatus('current')
swL3IpCtrlVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setStatus('current')
swL3IpCtrlProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlProxyArp.setStatus('current')
swL3IpCtrlSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setStatus('current')
swL3IpCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlMode.setStatus('current')
swL3IpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setStatus('current')
swL3IpCtrlIpv4AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv4AdminState.setStatus('current')
swL3IpCtrlIpv6AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AdminState.setStatus('current')
swL3IpCtrlIpv6LinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 14), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAddress.setStatus('current')
swL3IpCtrlIpv6LinkLocalPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalPrefixLen.setStatus('current')
swL3IpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlState.setStatus('current')
swL3IpCtrlIpv6LinkLocalAutoState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAutoState.setStatus('current')
swL3IpCtrlLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlLocalProxyArp.setStatus('current')
swL3IpCtrlIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 19), Integer32().clone(1500)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlIpMtu.setStatus('current')
swL3IpCtrlDhcpv6ClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientState.setStatus('current')
swL3IpCtrlIpDirectedBroadcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDirectedBroadcastState.setStatus('current')
swL3IpCtrlIpDhcpOption12State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12State.setStatus('current')
swL3IpCtrlIpDhcpOption12HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12HostName.setStatus('current')
swL3IpCtrlDhcpv6ClientPDState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDState.setStatus('current')
swL3IpCtrlDhcpv6ClientPDPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixName.setStatus('current')
swL3IpCtrlDhcpv6ClientPDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 26), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefix.setStatus('current')
swL3IpCtrlDhcpv6ClientPDPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixLen.setStatus('current')
swL3IpCtrlIpv6AutoConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigState.setStatus('current')
swL3IpCtrlIpv6AutoConfigDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigDefault.setStatus('current')
swL3IpCtrlDhcpv6ClientRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientRapidCommit.setStatus('current')
swL3IpCtrlDhcpv6ClientPDRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 3, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDRapidCommit.setStatus('current')
swL3Ipv6CtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4), )
if mibBuilder.loadTexts: swL3Ipv6CtrlTable.setStatus('current')
swL3Ipv6CtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6CtrlInterfaceName"))
if mibBuilder.loadTexts: swL3Ipv6CtrlEntry.setStatus('current')
swL3Ipv6CtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6CtrlInterfaceName.setStatus('current')
swL3Ipv6CtrlMaxReassmblySize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6CtrlMaxReassmblySize.setStatus('current')
swL3Ipv6CtrlNsRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlNsRetransTimer.setStatus('current')
swL3Ipv6CtrlRaState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaState.setStatus('current')
swL3Ipv6CtrlRaMinRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMinRtrAdvInterval.setStatus('current')
swL3Ipv6CtrlRaMaxRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMaxRtrAdvInterval.setStatus('current')
swL3Ipv6CtrlRaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaLifeTime.setStatus('current')
swL3Ipv6CtrlRaReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaReachableTime.setStatus('current')
swL3Ipv6CtrlRaRetransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaRetransTime.setStatus('current')
swL3Ipv6CtrlRaHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaHopLimit.setStatus('current')
swL3Ipv6CtrlRaManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaManagedFlag.setStatus('current')
swL3Ipv6CtrlRaOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaOtherConfigFlag.setStatus('current')
swL3Ipv6CtrlDadRetransNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlDadRetransNum.setStatus('current')
swL3Ipv6AddressCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5), )
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlTable.setStatus('current')
swL3Ipv6AddressCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6AddressCtrlInterfaceName"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6Address"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6AddressCtrlPrefixLen"))
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlEntry.setStatus('current')
swL3Ipv6AddressCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlInterfaceName.setStatus('current')
swL3Ipv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6Address.setStatus('current')
swL3Ipv6AddressCtrlPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPrefixLen.setStatus('current')
swL3Ipv6AddressCtrlPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPreferredLifeTime.setStatus('current')
swL3Ipv6AddressCtrlValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlValidLifeTime.setStatus('current')
swL3Ipv6AddressCtrlOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlOnLinkFlag.setStatus('current')
swL3Ipv6AddressCtrlAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAutonomousFlag.setStatus('current')
swL3Ipv6AddressCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlState.setStatus('current')
swL3Ipv6AddressCtrlAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcpv6", 2), ("stateless", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAddressType.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6), )
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlTable.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlPrefixName"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen"))
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlEntry.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixName.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlState.setStatus('current')
swL3IpCtrlAllIpIfState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlAllIpIfState.setStatus('current')
swL3LoopBackIpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8), )
if mibBuilder.loadTexts: swL3LoopBackIpCtrlTable.setStatus('current')
swL3LoopBackIpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3LoopBackIpCtrlInterfaceName"))
if mibBuilder.loadTexts: swL3LoopBackIpCtrlEntry.setStatus('current')
swL3LoopBackIpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlInterfaceName.setStatus('current')
swL3LoopBackIpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIfIndex.setStatus('current')
swL3LoopBackIpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpAddr.setStatus('current')
swL3LoopBackIpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpSubnetMask.setStatus('current')
swL3LoopBackIpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlAdminState.setStatus('current')
swL3LoopBackIpCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlRowStatus.setStatus('current')
swL3IpFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setStatus('current')
swL3IpFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3IpFdbInfoIpAddr"))
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setStatus('current')
swL3IpFdbInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setStatus('current')
swL3IpFdbInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setStatus('current')
swL3IpFdbInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setStatus('current')
swL3IpFdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoType.setStatus('current')
swL3IpArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpArpAgingTime.setStatus('current')
swL3IpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5), )
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setStatus('current')
swL3IpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3IpStaticRouteNextHop"))
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setStatus('current')
swL3IpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setStatus('current')
swL3IpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setStatus('current')
swL3IpStaticRouteBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setStatus('current')
swL3IpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setStatus('current')
swL3IpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setStatus('current')
swL3IpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3), ("active", 4), ("inActive", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setStatus('current')
swL3IpStaticRouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteWeight.setStatus('current')
swL3IpStaticRouteInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteInterfaceName.setStatus('current')
swL3IpStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteCost.setStatus('current')
swL3RelayDnsState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsState.setStatus('current')
swL3RelayDnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setStatus('current')
swL3RelayDnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setStatus('current')
swL3RelayDnsCacheState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setStatus('current')
swL3RelayDnsStaticTableState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setStatus('current')
swL3RelayDnsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 6), )
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setStatus('current')
swL3RelayDnsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 6, 1), ).setIndexNames((0, "DGS3000-28SC-L3MGMT-MIB", "swL3RelayDnsCtrlDomainName"), (0, "DGS3000-28SC-L3MGMT-MIB", "swL3RelayDnsCtrlIpAddr"))
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setStatus('current')
swL3RelayDnsCtrlDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setStatus('current')
swL3RelayDnsCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setStatus('current')
swL3RelayDnsCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 3, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setStatus('current')
mibBuilder.exportSymbols("DGS3000-28SC-L3MGMT-MIB", swL3IpCtrlIpAddr=swL3IpCtrlIpAddr, swL3IpCtrlDhcpv6ClientPDRapidCommit=swL3IpCtrlDhcpv6ClientPDRapidCommit, swL3Ipv6CtrlRaMinRtrAdvInterval=swL3Ipv6CtrlRaMinRtrAdvInterval, swL3Ipv6DHCPv6CPDAddrCtrlTable=swL3Ipv6DHCPv6CPDAddrCtrlTable, swL3IpCtrlState=swL3IpCtrlState, swL3IpFdbInfoIpSubnetMask=swL3IpFdbInfoIpSubnetMask, swL3IpCtrlAllIpIfState=swL3IpCtrlAllIpIfState, swL3IpCtrlIpSubnetMask=swL3IpCtrlIpSubnetMask, swL3IpFdbMgmt=swL3IpFdbMgmt, swL3IpStaticRouteBkupState=swL3IpStaticRouteBkupState, swL3Ipv6DHCPv6CPDAddrCtrlPrefixName=swL3Ipv6DHCPv6CPDAddrCtrlPrefixName, swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr=swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr, swL3Ipv6CtrlEntry=swL3Ipv6CtrlEntry, swL3Ipv6AddressCtrlValidLifeTime=swL3Ipv6AddressCtrlValidLifeTime, swL3IpCtrlDhcpv6ClientPDPrefixName=swL3IpCtrlDhcpv6ClientPDPrefixName, swL3Ipv6AddressCtrlOnLinkFlag=swL3Ipv6AddressCtrlOnLinkFlag, swL3IpStaticRouteDest=swL3IpStaticRouteDest, swL3IpCtrlSecondary=swL3IpCtrlSecondary, swL3IpStaticRouteMask=swL3IpStaticRouteMask, swL3IpStaticRouteNextHop=swL3IpStaticRouteNextHop, swL3IpCtrlInterfaceName=swL3IpCtrlInterfaceName, swL3IpCtrlMgmt=swL3IpCtrlMgmt, swL3Ipv6Address=swL3Ipv6Address, swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen=swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen, swL3IpCtrlVlanName=swL3IpCtrlVlanName, swL3IpMgmt=swL3IpMgmt, swL3IpCtrlDhcpv6ClientRapidCommit=swL3IpCtrlDhcpv6ClientRapidCommit, swL3IpArpAgingTime=swL3IpArpAgingTime, swL3IpFdbInfoPort=swL3IpFdbInfoPort, swL3IpStaticRouteTable=swL3IpStaticRouteTable, swL3Ipv6DHCPv6CPDAddrCtrlState=swL3Ipv6DHCPv6CPDAddrCtrlState, swL3LoopBackIpCtrlInterfaceName=swL3LoopBackIpCtrlInterfaceName, NetAddress=NetAddress, swL3LoopBackIpCtrlEntry=swL3LoopBackIpCtrlEntry, swL3RelayDnsPrimaryServer=swL3RelayDnsPrimaryServer, swL3Ipv6AddressCtrlPrefixLen=swL3Ipv6AddressCtrlPrefixLen, swL3Ipv6CtrlMaxReassmblySize=swL3Ipv6CtrlMaxReassmblySize, swL3RelayDnsCtrlDomainName=swL3RelayDnsCtrlDomainName, swL3Ipv6AddressCtrlInterfaceName=swL3Ipv6AddressCtrlInterfaceName, swL3Ipv6CtrlRaState=swL3Ipv6CtrlRaState, swL3IpCtrlDhcpv6ClientState=swL3IpCtrlDhcpv6ClientState, PYSNMP_MODULE_ID=swL3MgmtMIB, swL3IpCtrlTable=swL3IpCtrlTable, swL3Ipv6CtrlRaLifeTime=swL3Ipv6CtrlRaLifeTime, swL3Ipv6CtrlRaRetransTime=swL3Ipv6CtrlRaRetransTime, swL3Ipv6AddressCtrlState=swL3Ipv6AddressCtrlState, swL3RelayDnsSecondaryServer=swL3RelayDnsSecondaryServer, swL3IpCtrlIpMtu=swL3IpCtrlIpMtu, swL3Ipv6AddressCtrlAddressType=swL3Ipv6AddressCtrlAddressType, swL3RelayDnsCtrlState=swL3RelayDnsCtrlState, swL3Ipv6AddressCtrlEntry=swL3Ipv6AddressCtrlEntry, swL3IpCtrlIfIndex=swL3IpCtrlIfIndex, swL3Ipv6CtrlInterfaceName=swL3Ipv6CtrlInterfaceName, swL3IpCtrlIpv6LinkLocalAddress=swL3IpCtrlIpv6LinkLocalAddress, swL3IpCtrlLocalProxyArp=swL3IpCtrlLocalProxyArp, swL3LoopBackIpCtrlIpSubnetMask=swL3LoopBackIpCtrlIpSubnetMask, swL3RelayDnsStaticTableState=swL3RelayDnsStaticTableState, swL3IpStaticRouteEntry=swL3IpStaticRouteEntry, swL3IpCtrlMode=swL3IpCtrlMode, NodeAddress=NodeAddress, swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName=swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName, swL3RelayMgmt=swL3RelayMgmt, swL3IpStaticRouteWeight=swL3IpStaticRouteWeight, swL3RelayDnsMgmt=swL3RelayDnsMgmt, swL3Ipv6AddressCtrlPreferredLifeTime=swL3Ipv6AddressCtrlPreferredLifeTime, swL3Ipv6AddressCtrlTable=swL3Ipv6AddressCtrlTable, swL3IpStaticRouteCost=swL3IpStaticRouteCost, swL3RelayDnsCacheState=swL3RelayDnsCacheState, swL3IpCtrlDhcpv6ClientPDPrefixLen=swL3IpCtrlDhcpv6ClientPDPrefixLen, swL3Ipv6CtrlNsRetransTimer=swL3Ipv6CtrlNsRetransTimer, VrId=VrId, swL3RelayDnsCtrlEntry=swL3RelayDnsCtrlEntry, swL3IpCtrlIpv4AdminState=swL3IpCtrlIpv4AdminState, swL3IpCtrlIpDhcpOption12State=swL3IpCtrlIpDhcpOption12State, swL3IpCtrlIpv6AutoConfigDefault=swL3IpCtrlIpv6AutoConfigDefault, swL3LoopBackIpCtrlTable=swL3LoopBackIpCtrlTable, swL3MgmtMIB=swL3MgmtMIB, swL3IpFdbInfoTable=swL3IpFdbInfoTable, swL3IpCtrlAdminState=swL3IpCtrlAdminState, swL3IpFdbInfoIpAddr=swL3IpFdbInfoIpAddr, swL3RelayDnsCtrlIpAddr=swL3RelayDnsCtrlIpAddr, swL3Ipv6CtrlRaManagedFlag=swL3Ipv6CtrlRaManagedFlag, swL3IpCtrlEntry=swL3IpCtrlEntry, swL3Ipv6AddressCtrlAutonomousFlag=swL3Ipv6AddressCtrlAutonomousFlag, swL3RelayDnsState=swL3RelayDnsState, swL3RelayDnsCtrlTable=swL3RelayDnsCtrlTable, swL3IpCtrlIpv6AutoConfigState=swL3IpCtrlIpv6AutoConfigState, swL3Ipv6CtrlRaReachableTime=swL3Ipv6CtrlRaReachableTime, swL3IpCtrlDhcpv6ClientPDPrefix=swL3IpCtrlDhcpv6ClientPDPrefix, swL3LoopBackIpCtrlRowStatus=swL3LoopBackIpCtrlRowStatus, swL3IpFdbInfoEntry=swL3IpFdbInfoEntry, swL3IpCtrlIpDhcpOption12HostName=swL3IpCtrlIpDhcpOption12HostName, swL3LoopBackIpCtrlAdminState=swL3LoopBackIpCtrlAdminState, swL3IpStaticRouteMetric=swL3IpStaticRouteMetric, swL3IpCtrlDhcpv6ClientPDState=swL3IpCtrlDhcpv6ClientPDState, swL3IpCtrlIpv6AdminState=swL3IpCtrlIpv6AdminState, swL3Ipv6DHCPv6CPDAddrCtrlEntry=swL3Ipv6DHCPv6CPDAddrCtrlEntry, swL3IpCtrlIpv6LinkLocalPrefixLen=swL3IpCtrlIpv6LinkLocalPrefixLen, swL3LoopBackIpCtrlIpAddr=swL3LoopBackIpCtrlIpAddr, swL3IpCtrlProxyArp=swL3IpCtrlProxyArp, swL3Ipv6CtrlRaHopLimit=swL3Ipv6CtrlRaHopLimit, swL3IpFdbInfoType=swL3IpFdbInfoType, swL3Ipv6CtrlDadRetransNum=swL3Ipv6CtrlDadRetransNum, swL3Ipv6CtrlRaMaxRtrAdvInterval=swL3Ipv6CtrlRaMaxRtrAdvInterval, swL3LoopBackIpCtrlIfIndex=swL3LoopBackIpCtrlIfIndex, swL3Ipv6CtrlRaOtherConfigFlag=swL3Ipv6CtrlRaOtherConfigFlag, swL3IpCtrlIpv6LinkLocalAutoState=swL3IpCtrlIpv6LinkLocalAutoState, swL3IpCtrlIpDirectedBroadcastState=swL3IpCtrlIpDirectedBroadcastState, swL3IpStaticRouteInterfaceName=swL3IpStaticRouteInterfaceName, swL3IpStaticRouteStatus=swL3IpStaticRouteStatus, swL3Ipv6CtrlTable=swL3Ipv6CtrlTable)
