#
# PySNMP MIB module ZYXEL-accessSwitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-accessSwitch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:46:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, enterprises, Counter32, Unsigned32, TimeTicks, Counter64, Bits, iso, NotificationType, Gauge32, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "Counter32", "Unsigned32", "TimeTicks", "Counter64", "Bits", "iso", "NotificationType", "Gauge32", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
accessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5))
accessSwitchCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 1))
accessSwitchMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1))
accessSwitchSystemCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSystemCurrentStatus.setStatus('mandatory')
accessSwitchProblemCause = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchProblemCause.setStatus('mandatory')
accessSwitchSystemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSystemTemperature.setStatus('mandatory')
accessSwitchFanRpmTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4), )
if mibBuilder.loadTexts: accessSwitchFanRpmTable.setStatus('mandatory')
accessSwitchFanRpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1), ).setIndexNames((0, "ZYXEL-accessSwitch-MIB", "accessSwitchFanRpmIndex"))
if mibBuilder.loadTexts: accessSwitchFanRpmEntry.setStatus('mandatory')
accessSwitchFanRpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFanRpmIndex.setStatus('mandatory')
accessSwitchFanRpmCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFanRpmCurValue.setStatus('mandatory')
accessSwitchFanRpmMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFanRpmMaxValue.setStatus('mandatory')
accessSwitchFanRpmMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFanRpmMinValue.setStatus('mandatory')
accessSwitchFanRpmLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFanRpmLowThresh.setStatus('mandatory')
accessSwitchFanRpmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFanRpmDescr.setStatus('mandatory')
accessSwitchVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5), )
if mibBuilder.loadTexts: accessSwitchVoltageTable.setStatus('mandatory')
accessSwitchVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1), ).setIndexNames((0, "ZYXEL-accessSwitch-MIB", "accessSwitchVoltageIndex"))
if mibBuilder.loadTexts: accessSwitchVoltageEntry.setStatus('mandatory')
accessSwitchVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageIndex.setStatus('mandatory')
accessSwitchVoltageCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageCurValue.setStatus('mandatory')
accessSwitchVoltageMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageMaxValue.setStatus('mandatory')
accessSwitchVoltageMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageMinValue.setStatus('mandatory')
accessSwitchVoltageNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageNominalValue.setStatus('mandatory')
accessSwitchVoltageLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageLowThresh.setStatus('mandatory')
accessSwitchVoltageDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchVoltageDescr.setStatus('mandatory')
accessSwitchSysTempTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6), )
if mibBuilder.loadTexts: accessSwitchSysTempTable.setStatus('mandatory')
accessSwitchSysTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1), ).setIndexNames((0, "ZYXEL-accessSwitch-MIB", "accessSwitchSysTempIndex"))
if mibBuilder.loadTexts: accessSwitchSysTempEntry.setStatus('mandatory')
accessSwitchSysTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSysTempIndex.setStatus('mandatory')
accessSwitchSysTempCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSysTempCurValue.setStatus('mandatory')
accessSwitchSysTempMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSysTempMaxValue.setStatus('mandatory')
accessSwitchSysTempMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSysTempMinValue.setStatus('mandatory')
accessSwitchSysTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSysTempHighThresh.setStatus('mandatory')
accessSwitchSysTempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchSysTempDescr.setStatus('mandatory')
accessSwitchMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchMaintenance.setStatus('mandatory')
accessSwitchMaintenancePort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchMaintenancePort.setStatus('mandatory')
accessSwitchMaxNumOfStaticVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchMaxNumOfStaticVlans.setStatus('mandatory')
class ASSlotNum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("slot1", 1), ("slot2", 2))

class ASModuleType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("aes-100", 1), ("aes-100-1", 2), ("aam1008-61", 3), ("aam1008-63", 4), ("sam1008", 5))

acccessSwitchChassisId = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acccessSwitchChassisId.setStatus('mandatory')
accessSwitchSlotId = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 11), ASSlotNum()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchSlotId.setStatus('mandatory')
accessSwitchModuleType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 12), ASModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchModuleType.setStatus('mandatory')
accessSwitchFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchFWVersion.setStatus('mandatory')
accessSwitchDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchDriverVersion.setStatus('mandatory')
accessSwitchModemCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessSwitchModemCodeVersion.setStatus('mandatory')
accessSwitchDSLConfOps = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchDSLConfOps.setStatus('mandatory')
accessSwitchDSLConfTarget = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchDSLConfTarget.setStatus('mandatory')
accessSwitchDSLConfProfileName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchDSLConfProfileName.setStatus('mandatory')
accessSwitchDSLConfMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessSwitchDSLConfMode.setStatus('mandatory')
asPacketForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 20), )
if mibBuilder.loadTexts: asPacketForwardingTable.setStatus('mandatory')
asPacketForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: asPacketForwardingEntry.setStatus('mandatory')
asPacketForwardingPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 20, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asPacketForwardingPortList.setStatus('mandatory')
asDhcpRelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDhcpRelayEnable.setStatus('mandatory')
asDhcpRelayOption82Enable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDhcpRelayOption82Enable.setStatus('mandatory')
asDhcpRelayOption82Info = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDhcpRelayOption82Info.setStatus('mandatory')
asMaxNumOfDhcpServers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asMaxNumOfDhcpServers.setStatus('mandatory')
asDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 25), )
if mibBuilder.loadTexts: asDhcpServerTable.setStatus('mandatory')
asDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 25, 1), ).setIndexNames((0, "ZYXEL-accessSwitch-MIB", "asDhcpServerIp"))
if mibBuilder.loadTexts: asDhcpServerEntry.setStatus('mandatory')
asDhcpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 25, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDhcpServerIp.setStatus('mandatory')
asDhcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 25, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDhcpServerRowStatus.setStatus('mandatory')
asMaxNumberOfRadiusServers = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asMaxNumberOfRadiusServers.setStatus('mandatory')
asRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29), )
if mibBuilder.loadTexts: asRadiusServerTable.setStatus('mandatory')
asRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29, 1), ).setIndexNames((0, "ZYXEL-accessSwitch-MIB", "asRadiusServerIndex"))
if mibBuilder.loadTexts: asRadiusServerEntry.setStatus('mandatory')
asRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRadiusServerIndex.setStatus('mandatory')
asRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asRadiusServerIp.setStatus('mandatory')
asRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asRadiusServerPort.setStatus('mandatory')
asRadiusSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asRadiusSharedSecret.setStatus('mandatory')
asRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 29, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asRadiusServerRowStatus.setStatus('mandatory')
asDot1xEnable = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDot1xEnable.setStatus('mandatory')
asDot1xPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 31), )
if mibBuilder.loadTexts: asDot1xPortTable.setStatus('mandatory')
asDot1xPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: asDot1xPortEntry.setStatus('mandatory')
asDot1xPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDot1xPortEnable.setStatus('mandatory')
asDot1xPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("forceAuth", 2), ("forceUnAuth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDot1xPortControl.setStatus('mandatory')
asDot1xPortReAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDot1xPortReAuthEnable.setStatus('mandatory')
asDot1xPortReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 1, 1, 31, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asDot1xPortReAuthPeriod.setStatus('mandatory')
reboot = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,1)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchProblemCause"))
systemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,2)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchProblemCause"))
overheat = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,3)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchSysTempIndex"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSysTempCurValue"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSystemCurrentStatus"))
overheatOver = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,4)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchSysTempIndex"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSysTempCurValue"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSystemCurrentStatus"))
errLog = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,5)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchProblemCause"))
fanRpmLow = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,6)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchFanRpmIndex"), ("ZYXEL-accessSwitch-MIB", "accessSwitchFanRpmCurValue"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSystemCurrentStatus"))
fanRpmNormal = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,7)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchFanRpmIndex"), ("ZYXEL-accessSwitch-MIB", "accessSwitchFanRpmCurValue"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSystemCurrentStatus"))
voltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,8)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchVoltageIndex"), ("ZYXEL-accessSwitch-MIB", "accessSwitchVoltageCurValue"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSystemCurrentStatus"))
voltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,9)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchVoltageIndex"), ("ZYXEL-accessSwitch-MIB", "accessSwitchVoltageCurValue"), ("ZYXEL-accessSwitch-MIB", "accessSwitchSystemCurrentStatus"))
systemMaintenanceFailure = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,10)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchProblemCause"))
configChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,11)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchProblemCause"))
thermalSensorFailure = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5) + (0,12)).setObjects(("ZYXEL-accessSwitch-MIB", "accessSwitchProblemCause"))
mibBuilder.exportSymbols("ZYXEL-accessSwitch-MIB", accessSwitchSysTempHighThresh=accessSwitchSysTempHighThresh, ASModuleType=ASModuleType, asDhcpServerRowStatus=asDhcpServerRowStatus, overheat=overheat, accessSwitchSysTempIndex=accessSwitchSysTempIndex, asDhcpRelayOption82Info=asDhcpRelayOption82Info, accessSwitchVoltageTable=accessSwitchVoltageTable, accessSwitchModemCodeVersion=accessSwitchModemCodeVersion, errLog=errLog, asDhcpServerEntry=asDhcpServerEntry, accessSwitchVoltageEntry=accessSwitchVoltageEntry, accessSwitchCommon=accessSwitchCommon, accessSwitchProblemCause=accessSwitchProblemCause, asDot1xPortTable=asDot1xPortTable, asRadiusServerRowStatus=asRadiusServerRowStatus, accessSwitchVoltageMinValue=accessSwitchVoltageMinValue, accessSwitchMaintenancePort=accessSwitchMaintenancePort, accessSwitchSystemCurrentStatus=accessSwitchSystemCurrentStatus, asRadiusServerIndex=asRadiusServerIndex, accessSwitchFanRpmLowThresh=accessSwitchFanRpmLowThresh, configChange=configChange, accessSwitchSlotId=accessSwitchSlotId, asMaxNumberOfRadiusServers=asMaxNumberOfRadiusServers, asPacketForwardingTable=asPacketForwardingTable, asDot1xPortReAuthPeriod=asDot1xPortReAuthPeriod, products=products, accessSwitchMaxNumOfStaticVlans=accessSwitchMaxNumOfStaticVlans, asMaxNumOfDhcpServers=asMaxNumOfDhcpServers, accessSwitchDriverVersion=accessSwitchDriverVersion, accessSwitchMaintenance=accessSwitchMaintenance, accessSwitchVoltageDescr=accessSwitchVoltageDescr, systemMaintenanceFailure=systemMaintenanceFailure, accessSwitchDSLConfProfileName=accessSwitchDSLConfProfileName, asPacketForwardingPortList=asPacketForwardingPortList, reboot=reboot, ASSlotNum=ASSlotNum, accessSwitchMgnt=accessSwitchMgnt, accessSwitchFanRpmMinValue=accessSwitchFanRpmMinValue, accessSwitchSysTempCurValue=accessSwitchSysTempCurValue, accessSwitchSysTempMinValue=accessSwitchSysTempMinValue, asDhcpRelayEnable=asDhcpRelayEnable, asDot1xPortEntry=asDot1xPortEntry, acccessSwitchChassisId=acccessSwitchChassisId, accessSwitchDSLConfMode=accessSwitchDSLConfMode, accessSwitchVoltageIndex=accessSwitchVoltageIndex, asRadiusSharedSecret=asRadiusSharedSecret, accessSwitchFanRpmMaxValue=accessSwitchFanRpmMaxValue, accessSwitchFanRpmDescr=accessSwitchFanRpmDescr, accessSwitchVoltageMaxValue=accessSwitchVoltageMaxValue, accessSwitchVoltageLowThresh=accessSwitchVoltageLowThresh, accessSwitchSysTempEntry=accessSwitchSysTempEntry, asRadiusServerEntry=asRadiusServerEntry, accessSwitchVoltageNominalValue=accessSwitchVoltageNominalValue, thermalSensorFailure=thermalSensorFailure, zyxel=zyxel, accessSwitchFWVersion=accessSwitchFWVersion, accessSwitchFanRpmTable=accessSwitchFanRpmTable, asDot1xPortEnable=asDot1xPortEnable, accessSwitchSysTempDescr=accessSwitchSysTempDescr, voltageOutOfRange=voltageOutOfRange, accessSwitchSystemTemperature=accessSwitchSystemTemperature, asRadiusServerTable=asRadiusServerTable, asDot1xEnable=asDot1xEnable, fanRpmLow=fanRpmLow, asDot1xPortControl=asDot1xPortControl, accessSwitchModuleType=accessSwitchModuleType, systemShutdown=systemShutdown, asDhcpServerTable=asDhcpServerTable, asDhcpRelayOption82Enable=asDhcpRelayOption82Enable, overheatOver=overheatOver, accessSwitchFanRpmIndex=accessSwitchFanRpmIndex, voltageNormal=voltageNormal, accessSwitchVoltageCurValue=accessSwitchVoltageCurValue, asRadiusServerIp=asRadiusServerIp, asDot1xPortReAuthEnable=asDot1xPortReAuthEnable, accessSwitchDSLConfOps=accessSwitchDSLConfOps, asRadiusServerPort=asRadiusServerPort, accessSwitchDSLConfTarget=accessSwitchDSLConfTarget, accessSwitchSysTempTable=accessSwitchSysTempTable, accessSwitch=accessSwitch, accessSwitchFanRpmCurValue=accessSwitchFanRpmCurValue, asPacketForwardingEntry=asPacketForwardingEntry, accessSwitchFanRpmEntry=accessSwitchFanRpmEntry, accessSwitchSysTempMaxValue=accessSwitchSysTempMaxValue, fanRpmNormal=fanRpmNormal, asDhcpServerIp=asDhcpServerIp)
