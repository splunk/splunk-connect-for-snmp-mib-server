#
# PySNMP MIB module DWL-3200 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DWL-3200
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, MibIdentifier, Counter64, private, Integer32, Gauge32, ModuleIdentity, ObjectIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "MibIdentifier", "Counter64", "private", "Integer32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "IpAddress")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_dwlfamily = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37)).setLabel("dlink-dwlfamily")
dwl_3200AP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20)).setLabel("dwl-3200AP")
systemInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1))
systemDescr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDescr.setStatus('mandatory')
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('mandatory')
systemContact = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContact.setStatus('mandatory')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('mandatory')
systemModelName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemModelName.setStatus('mandatory')
systemFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFirmwareVersion.setStatus('mandatory')
systemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIpAddress.setStatus('mandatory')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('mandatory')
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2))
lan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1))
lanIfSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1))
lanIfSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1), )
if mibBuilder.loadTexts: lanIfSettingTable.setStatus('mandatory')
lanIfSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lanIfSettingEntry.setStatus('mandatory')
lanIfGetIpAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfGetIpAddressFrom.setStatus('mandatory')
lanIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfIpAddress.setStatus('mandatory')
lanIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfSubnetMask.setStatus('mandatory')
lanIfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfDefaultGateway.setStatus('mandatory')
lanIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIfMacAddress.setStatus('mandatory')
wirelesslan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3))
wirelessLanIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLanIfNumber.setStatus('mandatory')
ieee802dot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3))
dot11Parameters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1))
dot11ParametersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: dot11ParametersTable.setStatus('mandatory')
dot11ParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ParametersEntry.setStatus('mandatory')
dot11Ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Ssid.setStatus('mandatory')
dot11SsidBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SsidBroadcast.setStatus('mandatory')
dot11Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Channel.setStatus('mandatory')
dot11ChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelList.setStatus('mandatory')
dot11DynamicChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DynamicChannelList.setStatus('mandatory')
dot11WdsChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsChannelList.setStatus('mandatory')
dot11WdsDynamicChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsDynamicChannelList.setStatus('mandatory')
dot11Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Frequency.setStatus('mandatory')
dot11DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate.setStatus('mandatory')
dot11bModeDataRateList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11bModeDataRateList.setStatus('mandatory')
dot11gModeDataRateList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11gModeDataRateList.setStatus('mandatory')
dot11WifiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 4), ("dot11b-dot11g", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WifiMode.setStatus('mandatory')
dot11BeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BeaconInterval.setStatus('mandatory')
dot11Dtim = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Dtim.setStatus('mandatory')
dot11FragmentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FragmentLength.setStatus('mandatory')
dot11RtsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RtsLength.setStatus('mandatory')
dot11TransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("quarter", 3), ("eighth", 4), ("min", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TransmitPower.setStatus('mandatory')
dot11SuperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("super", 1), ("dynamic", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SuperMode.setStatus('mandatory')
dot11RadioWave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadioWave.setStatus('mandatory')
dot11AutoChannelScan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoChannelScan.setStatus('mandatory')
dot11Wmm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Wmm.setStatus('mandatory')
dot11Preamble = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("longOnly", 0), ("longAndShort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Preamble.setStatus('mandatory')
dot11Antenna = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("ant1", 1), ("ant2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Antenna.setStatus('mandatory')
dot11ApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ap", 1), ("wdsWithAp", 2), ("wdsWithoutAp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ApMode.setStatus('mandatory')
dot11IgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11IgmpSnooping.setStatus('mandatory')
dot11RemoteApMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2), )
if mibBuilder.loadTexts: dot11RemoteApMacAddressTable.setStatus('mandatory')
dot11RemoteApMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11RemoteApMacAddressIndex"))
if mibBuilder.loadTexts: dot11RemoteApMacAddressEntry.setStatus('mandatory')
dot11RemoteApMacAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11RemoteApMacAddressIndex.setStatus('mandatory')
dot11RemoteApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RemoteApMacAddress.setStatus('mandatory')
dot11SiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3))
dot11SiteSurveyRefreshTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dot11SiteSurveyRefreshTable.setStatus('mandatory')
dot11SiteSurveyRefreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SiteSurveyRefreshEntry.setStatus('mandatory')
dot11SiteSurveyRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SiteSurveyRefresh.setStatus('mandatory')
dot11SiteSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2), )
if mibBuilder.loadTexts: dot11SiteSurveyTable.setStatus('mandatory')
dot11SiteSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11SiteSurveyIndex"))
if mibBuilder.loadTexts: dot11SiteSurveyEntry.setStatus('mandatory')
dot11SiteSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: dot11SiteSurveyIndex.setStatus('mandatory')
dot11SiteSurveyBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyBssType.setStatus('mandatory')
dot11SiteSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyChannel.setStatus('mandatory')
dot11SiteSurveyRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyRssi.setStatus('mandatory')
dot11SiteSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyBssid.setStatus('mandatory')
dot11SiteSurveyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyEncryption.setStatus('mandatory')
dot11SiteSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveySsid.setStatus('mandatory')
dot11SiteSurveyWirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyWirelessMode.setStatus('mandatory')
dot11SiteSurveySupportWds = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveySupportWds.setStatus('mandatory')
dot11Securities = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2))
dot11SecuritiesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: dot11SecuritiesTable.setStatus('mandatory')
dot11SecuritiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SecuritiesEntry.setStatus('mandatory')
dot11Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa-auto-psk", 8), ("wpa-auto-eap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Authentication.setStatus('mandatory')
dot11Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Encryption.setStatus('mandatory')
dot11KeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KeyIndex.setStatus('mandatory')
dot11PassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PassPhrase.setStatus('mandatory')
dot11CipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("aes", 2), ("tkip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CipherType.setStatus('mandatory')
dot11GroupKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupKeyUpdateInterval.setStatus('mandatory')
dot11KeyEntryMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KeyEntryMethod.setStatus('mandatory')
dot11RadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusServer.setStatus('mandatory')
dot11RadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusPort.setStatus('mandatory')
dot11RadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusSecret.setStatus('mandatory')
dot11SecRADIUSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSServer.setStatus('mandatory')
dot11SecRADIUSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSPort.setStatus('mandatory')
dot11SecRADIUSSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSSecret.setStatus('mandatory')
dot11SecRADIUSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSStatus.setStatus('mandatory')
dot11WepKeyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: dot11WepKeyTable.setStatus('mandatory')
dot11WepKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11wepKeyIndex"))
if mibBuilder.loadTexts: dot11WepKeyEntry.setStatus('mandatory')
dot11wepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11wepKeyIndex.setStatus('mandatory')
dot11WepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WepKey.setStatus('mandatory')
dot11Filter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3))
dot11PartionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1), )
if mibBuilder.loadTexts: dot11PartionTable.setStatus('mandatory')
dot11LanPartionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11LanPartionEntry.setStatus('mandatory')
dot11InternalStationConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InternalStationConnection.setStatus('mandatory')
dot11EthernetToWlanAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EthernetToWlanAccess.setStatus('mandatory')
dot11MacAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 2), )
if mibBuilder.loadTexts: dot11MacAccessControlTable.setStatus('mandatory')
dot11MacAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11MacAccessControlEntry.setStatus('mandatory')
dot11MacAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControl.setStatus('mandatory')
dot11MacAccessControlListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3), )
if mibBuilder.loadTexts: dot11MacAccessControlListTable.setStatus('mandatory')
dot11MacAccessControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11MacAccessControlListIndex"))
if mibBuilder.loadTexts: dot11MacAccessControlListEntry.setStatus('mandatory')
dot11MacAccessControlListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dot11MacAccessControlListIndex.setStatus('mandatory')
dot11MacAccessControlListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControlListMacAddress.setStatus('mandatory')
dot11Accounting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3))
dot11AccountingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: dot11AccountingTable.setStatus('mandatory')
dot11AccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11AccountingEntry.setStatus('mandatory')
dot11AccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AccountingStatus.setStatus('mandatory')
dot11AccountingServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AccountingServer.setStatus('mandatory')
dot11AccountingServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AccountingServerPort.setStatus('mandatory')
dot11SecAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: dot11SecAccountingTable.setStatus('mandatory')
dot11SecAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SecAccountingEntry.setStatus('mandatory')
dot11SecAccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecAccountingStatus.setStatus('mandatory')
dot11SecAccountingServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecAccountingServer.setStatus('mandatory')
dot11SecAccountingServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecAccountingServerPort.setStatus('mandatory')
dot11ClientInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4))
dot11GetClientInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: dot11GetClientInformationTable.setStatus('mandatory')
dot11GetClientInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11GetClientInformationEntry.setStatus('mandatory')
dot11ClientInformationRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ClientInformationRefresh.setStatus('mandatory')
dot11ClientInformationAssNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientInformationAssNum.setStatus('mandatory')
dot11ClientInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: dot11ClientInformationTable.setStatus('mandatory')
dot11ClientInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11ClinetIndex"))
if mibBuilder.loadTexts: dot11ClientInformationEntry.setStatus('mandatory')
dot11ClinetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: dot11ClinetIndex.setStatus('mandatory')
dot11ClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientMacAddress.setStatus('mandatory')
dot11ClientBand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11g", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientBand.setStatus('mandatory')
dot11ClientAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa-auto-psk", 8), ("wpa-auto-eap", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientAuthentication.setStatus('mandatory')
dot11ClientRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientRssi.setStatus('mandatory')
dot11ClientPsm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientPsm.setStatus('mandatory')
dot11SSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SSIDIndex.setStatus('mandatory')
dot11ClientKickOff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 3))
dot11KickOffClientMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 3, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KickOffClientMacAddress.setStatus('mandatory')
dot11KickOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KickOff.setStatus('mandatory')
advance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3))
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1))
dhcpServerControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerControl.setStatus('mandatory')
dhcpServerDynamicTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2))
dynamicIpPoolStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicIpPoolStart.setStatus('mandatory')
dynamicIpPoolRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicIpPoolRange.setStatus('mandatory')
dynamicMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicMask.setStatus('mandatory')
dynamicGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicGateway.setStatus('mandatory')
dynamicWins = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicWins.setStatus('mandatory')
dynamicDns = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDns.setStatus('mandatory')
dynamicDomainName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDomainName.setStatus('mandatory')
dynamicLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 31536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLeaseTime.setStatus('mandatory')
dynamicFunction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicFunction.setStatus('mandatory')
dhcpServerStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3), )
if mibBuilder.loadTexts: dhcpServerStaticTable.setStatus('mandatory')
dhcpServerStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1), ).setIndexNames((0, "DWL-3200", "staticIndex"))
if mibBuilder.loadTexts: dhcpServerStaticEntry.setStatus('mandatory')
staticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: staticIndex.setStatus('mandatory')
staticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIP.setStatus('mandatory')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMac.setStatus('mandatory')
staticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMask.setStatus('mandatory')
staticGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticGateway.setStatus('mandatory')
staticDns = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDns.setStatus('mandatory')
staticWins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticWins.setStatus('mandatory')
staticDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDomainName.setStatus('mandatory')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('mandatory')
dhcpServerCurrentListTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4))
currentDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1), )
if mibBuilder.loadTexts: currentDynamicTable.setStatus('mandatory')
currentDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1), ).setIndexNames((0, "DWL-3200", "currentDynamicIndex"))
if mibBuilder.loadTexts: currentDynamicEntry.setStatus('mandatory')
currentDynamicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: currentDynamicIndex.setStatus('mandatory')
currentDynamicMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicMacAddress.setStatus('mandatory')
currentDynamicAssignedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicAssignedIP.setStatus('mandatory')
currentDynamicLease = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicLease.setStatus('mandatory')
currentStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2), )
if mibBuilder.loadTexts: currentStaticTable.setStatus('mandatory')
currentStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1), ).setIndexNames((0, "DWL-3200", "currentStaticIndex"))
if mibBuilder.loadTexts: currentStaticEntry.setStatus('mandatory')
currentStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: currentStaticIndex.setStatus('mandatory')
currentStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticMacAddress.setStatus('mandatory')
currentStaticAssignedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticAssignedIP.setStatus('mandatory')
ieee802dot11Grouping = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2))
ieee802dot11GroupingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1), )
if mibBuilder.loadTexts: ieee802dot11GroupingTable.setStatus('mandatory')
ieee802dot11GroupingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11GroupingEntry.setStatus('mandatory')
dot11LoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LoadBalance.setStatus('mandatory')
dot11UserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11UserLimit.setStatus('mandatory')
dot11LinkIntegrate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LinkIntegrate.setStatus('mandatory')
ieee802dot11MultiSsid = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3))
ieee802dot11MssidStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 1), )
if mibBuilder.loadTexts: ieee802dot11MssidStateTable.setStatus('mandatory')
ieee802dot11MssidStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11MssidStateEntry.setStatus('mandatory')
dot11MssidState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidState.setStatus('mandatory')
ieee802dot11VlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 2), )
if mibBuilder.loadTexts: ieee802dot11VlanTable.setStatus('mandatory')
ieee802dot11VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11VlanEntry.setStatus('mandatory')
dot11VlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11VlanState.setStatus('mandatory')
ieee802dot11MssidTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3), )
if mibBuilder.loadTexts: ieee802dot11MssidTable.setStatus('mandatory')
ieee802dot11MssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11MssidIndex"))
if mibBuilder.loadTexts: ieee802dot11MssidEntry.setStatus('mandatory')
dot11MssidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: dot11MssidIndex.setStatus('mandatory')
dot11MssIndividualState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssIndividualState.setStatus('mandatory')
dot11MssidSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidSsid.setStatus('mandatory')
dot11MssidSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidSuppress.setStatus('mandatory')
dot11MssidAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa-auto-psk", 8), ("wpa-auto-eap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAuthentication.setStatus('mandatory')
dot11MssidEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidEncryption.setStatus('mandatory')
dot11MssidWepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWepKeyIndex.setStatus('mandatory')
dot11MssidWepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWepKey.setStatus('mandatory')
dot11MssidVlanTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidVlanTagID.setStatus('mandatory')
dot11MssidCipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("aes", 2), ("tkip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidCipherType.setStatus('mandatory')
dot11MssidPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPassPhrase.setStatus('mandatory')
dot11MssidKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidKeyType.setStatus('mandatory')
dot11MssidAccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAccountingStatus.setStatus('mandatory')
dot11MssidWMM = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWMM.setStatus('mandatory')
dot11MssidDynamicVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidDynamicVlan.setStatus('mandatory')
dot11MssidEthNoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidEthNoTag.setStatus('mandatory')
dot11MssidPriorityBySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPriorityBySsid.setStatus('mandatory')
dot11MssidInternalStationConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidInternalStationConnection.setStatus('mandatory')
ieee802dot11functionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 4), )
if mibBuilder.loadTexts: ieee802dot11functionTable.setStatus('mandatory')
ieee802dot11functionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11functionEntry.setStatus('mandatory')
dot11PrioritySsidState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrioritySsidState.setStatus('mandatory')
ieee802dot11RogueApDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4))
dot11RogueApBssType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("infrastructure", 1), ("independent", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApBssType.setStatus('mandatory')
dot11RogueApBandType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApBandType.setStatus('mandatory')
dot11RogueApSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApSecurityType.setStatus('mandatory')
ieee802dot11RogueApSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4))
dot11RogueApSurveyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApSurveyRefresh.setStatus('mandatory')
dot11RogueApAddtoApList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAddtoApList.setStatus('mandatory')
dot11RrogueApDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RrogueApDelete.setStatus('mandatory')
ieee802dot11RogueApSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4), )
if mibBuilder.loadTexts: ieee802dot11RogueApSurveyTable.setStatus('mandatory')
dot11RogueApSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1), ).setIndexNames((0, "DWL-3200", "dot11RogueApSurveyIndex"))
if mibBuilder.loadTexts: dot11RogueApSurveyEntry.setStatus('mandatory')
dot11RogueApSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RogueApSurveyIndex.setStatus('mandatory')
dot11RogueApSurveyBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyBssType.setStatus('mandatory')
dot11RogueApSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyChannel.setStatus('mandatory')
dot11RogueApSurveyRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyRssi.setStatus('mandatory')
dot11RogueApSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyBssid.setStatus('mandatory')
dot11RogueApSurveyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("wep", 1), ("wpa-eap", 2), ("wpa-psk", 3), ("wpa2-eap", 4), ("wpa2-psk", 5), ("wpa-auto-eap", 6), ("wpa-auto-psk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyAuthentication.setStatus('mandatory')
dot11RogueApSurveyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyEncryption.setStatus('mandatory')
dot11RogueApSurveyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyMode.setStatus('mandatory')
dot11RogueApSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveySsid.setStatus('mandatory')
dot11RogueApListRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5))
dot11RogueApDeleteFromRecord = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApDeleteFromRecord.setStatus('mandatory')
dot11RogueApListRecordTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2), )
if mibBuilder.loadTexts: dot11RogueApListRecordTable.setStatus('mandatory')
dot11RogueApListRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1), ).setIndexNames((0, "DWL-3200", "dot11RogueApListRecordIndex"))
if mibBuilder.loadTexts: dot11RogueApListRecordEntry.setStatus('mandatory')
dot11RogueApListRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RogueApListRecordIndex.setStatus('mandatory')
dot11RogueApListRecordBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordBssType.setStatus('mandatory')
dot11RogueApListRecordChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordChannel.setStatus('mandatory')
dot11RogueApListRecordRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordRssi.setStatus('mandatory')
dot11RogueApListRecordBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordBssid.setStatus('mandatory')
dot11RogueApListRecordAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("wep", 1), ("wpa-eap", 2), ("wpa-psk", 3), ("wpa2-eap", 4), ("wpa2-psk", 5), ("wpa-auto-eap", 6), ("wpa-auto-psk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordAuthentication.setStatus('mandatory')
dot11RogueApListRecordEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordEncryption.setStatus('mandatory')
dot11RogueApListRecordMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordMode.setStatus('mandatory')
dot11RogueApListRecordSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordSsid.setStatus('mandatory')
dot11RogueApProtection = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApProtection.setStatus('mandatory')
ieee802dot11DataRateControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5))
ieee802dot11DataRateControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1), )
if mibBuilder.loadTexts: ieee802dot11DataRateControlTable.setStatus('mandatory')
ieee802dot11DataRateControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11DataRateControlEntry.setStatus('mandatory')
dot11DataRateControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRateControl.setStatus('mandatory')
dot11DataRateSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRateSetDefault.setStatus('mandatory')
ieee802dot11DataRateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2), )
if mibBuilder.loadTexts: ieee802dot11DataRateTable.setStatus('mandatory')
ieee802dot11DataRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11DataRateEntry.setStatus('mandatory')
dot11DataRate1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate1Mb.setStatus('mandatory')
dot11DataRate2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate2Mb.setStatus('mandatory')
dot11DataRate5dot5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate5dot5Mb.setStatus('mandatory')
dot11DataRate6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate6Mb.setStatus('mandatory')
dot11DataRate9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate9Mb.setStatus('mandatory')
dot11DataRate11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate11Mb.setStatus('mandatory')
dot11DataRate12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate12Mb.setStatus('mandatory')
dot11DataRate18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate18Mb.setStatus('mandatory')
dot11DataRate24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate24Mb.setStatus('mandatory')
dot11DataRate36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate36Mb.setStatus('mandatory')
dot11DataRate48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate48Mb.setStatus('mandatory')
dot11DataRate54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate54Mb.setStatus('mandatory')
administration = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1))
usersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1), )
if mibBuilder.loadTexts: usersTable.setStatus('mandatory')
usersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1), ).setIndexNames((0, "DWL-3200", "usersIndex"))
if mibBuilder.loadTexts: usersEntry.setStatus('mandatory')
usersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: usersIndex.setStatus('mandatory')
usersName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usersName.setStatus('mandatory')
usersPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usersPassword.setStatus('mandatory')
device = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 2))
deviceRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRestart.setStatus('mandatory')
deviceFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFactoryDefault.setStatus('mandatory')
update = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3))
updateFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateFirmwareVersion.setStatus('mandatory')
tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2))
tftpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIPAddress.setStatus('mandatory')
tftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRemoteFileName.setStatus('mandatory')
tftpCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connect", 1), ("get", 2), ("put", 3), ("nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCommand.setStatus('mandatory')
tftpUpgradeSettingCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("firmwareUpdate", 1), ("configSave", 3), ("reboot", 4), ("factoryReset", 5), ("nothing", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpUpgradeSettingCommand.setStatus('mandatory')
ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3))
ftpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpServerIPAddress.setStatus('mandatory')
ftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUserName.setStatus('mandatory')
ftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPassword.setStatus('mandatory')
ftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpRemoteFileName.setStatus('mandatory')
ftpCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connect", 1), ("get", 2), ("put", 3), ("nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpCommand.setStatus('mandatory')
discardChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("discard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discardChanges.setStatus('mandatory')
ftpUpgradeSettingCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("firmwareUpdate", 1), ("configSetting", 2), ("configSave", 3), ("reboot", 4), ("factoryReset", 5), ("nothing", 6), ("certificateFileUpdate", 7), ("keyFileUpdate", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUpgradeSettingCommand.setStatus('mandatory')
console = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4))
telnet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnet.setStatus('mandatory')
ssh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssh.setStatus('mandatory')
timeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("never", 0), ("s60", 1), ("s180", 2), ("s300", 3), ("s600", 4), ("s900", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeout.setStatus('mandatory')
web = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 5))
ssl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 7))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8))
sntpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('mandatory')
sntpTimeZoneIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneIndex.setStatus('mandatory')
sntpDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDayLightSaving.setStatus('mandatory')
sntpTimeofDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpTimeofDay.setStatus('mandatory')
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('mandatory')
smtpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerIpAddress.setStatus('mandatory')
smtpSender = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSender.setStatus('mandatory')
smtpRecipient = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecipient.setStatus('mandatory')
managerIpAddressSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10))
managerIpAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddressStatus.setStatus('mandatory')
managerIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2), )
if mibBuilder.loadTexts: managerIpAddressTable.setStatus('mandatory')
managerIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2, 1), ).setIndexNames((0, "DWL-3200", "managerIpAddressIndex"))
if mibBuilder.loadTexts: managerIpAddressEntry.setStatus('mandatory')
managerIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: managerIpAddressIndex.setStatus('mandatory')
managerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddress.setStatus('mandatory')
managerIpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3), )
if mibBuilder.loadTexts: managerIpRangeTable.setStatus('mandatory')
managerIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1), ).setIndexNames((0, "DWL-3200", "managerIpRangeIndex"))
if mibBuilder.loadTexts: managerIpRangeEntry.setStatus('mandatory')
managerIpRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: managerIpRangeIndex.setStatus('mandatory')
managerStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerStartIpAddress.setStatus('mandatory')
managerEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerEndIpAddress.setStatus('mandatory')
control = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 11))
pingcontrol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingcontrol.setStatus('mandatory')
adminAPwithWlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAPwithWlan.setStatus('mandatory')
managerVLANIDSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 12))
managerVLANIDStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerVLANIDStatus.setStatus('mandatory')
managerVLANID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerVLANID.setStatus('mandatory')
report = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5))
deviceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1))
deviceInformationFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationFirmwareVersion.setStatus('mandatory')
interfaceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2))
interfaceInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1), )
if mibBuilder.loadTexts: interfaceInformationTable.setStatus('mandatory')
interfaceInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: interfaceInformationEntry.setStatus('mandatory')
ifGetIpAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifGetIpAddressFrom.setStatus('mandatory')
ifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIpAddress.setStatus('mandatory')
ifSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSubnetMask.setStatus('mandatory')
ifDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDefaultGateway.setStatus('mandatory')
ifMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMacAddress.setStatus('mandatory')
apstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 3))
deviceInformationCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationCpuUtilization.setStatus('mandatory')
deviceInformationMemUtilization = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationMemUtilization.setStatus('mandatory')
trafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2))
trafficStatisticsWired = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1))
dot3TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1))
dot3TrafficStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1), )
if mibBuilder.loadTexts: dot3TrafficStatisticsTable.setStatus('mandatory')
dot3TrafficStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot3TrafficStatisticsEntry.setStatus('mandatory')
dot3TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedFrameCount.setStatus('mandatory')
dot3ReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedFrameCount.setStatus('mandatory')
dot3TransmittedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedByteCount.setStatus('mandatory')
dot3ReceivedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedByteCount.setStatus('mandatory')
trafficStatisticsWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2))
dot11TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1))
dot11TrafficStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1), )
if mibBuilder.loadTexts: dot11TrafficStatisticsTable.setStatus('mandatory')
dot11TrafficStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11TrafficStatisticsEntry.setStatus('mandatory')
dot11TransmitSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitSuccessRate.setStatus('mandatory')
dot11TransmitRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitRetryRate.setStatus('mandatory')
dot11ReceiveSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveSuccessRate.setStatus('mandatory')
dot11ReceiveDuplicateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveDuplicateRate.setStatus('mandatory')
dot11RtsSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RtsSuccessCount.setStatus('mandatory')
dot11RtsFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RtsFailureCount.setStatus('mandatory')
dot11TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setStatus('mandatory')
dot11MulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastTransmittedFrameCount.setStatus('mandatory')
dot11TransmittedErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedErrorCount.setStatus('mandatory')
dot11TransmittedTotalRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedTotalRetryCount.setStatus('mandatory')
dot11TransmittedMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedMultipleRetryCount.setStatus('mandatory')
dot11ReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFrameCount.setStatus('mandatory')
dot11MulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastReceivedFrameCount.setStatus('mandatory')
dot11ReceivedFrameFcsErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFrameFcsErrorCount.setStatus('mandatory')
dot11ReceivedFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFrameDuplicateCount.setStatus('mandatory')
dot11AckReceivedFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AckReceivedFailureCount.setStatus('mandatory')
dot11WepExcludedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WepExcludedFrameCount.setStatus('mandatory')
dot11WepIcvErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WepIcvErrorCount.setStatus('mandatory')
dot11TransmitedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitedByteCount.setStatus('mandatory')
dot11ReceivedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedByteCount.setStatus('mandatory')
dot16TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 3))
trafficStatisticsOn11aEverySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4))
trafficStatisticsOn11APrimarySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1))
onPrimarySSIDdot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aReceivedByteCount.setStatus('mandatory')
onPrimarySSIDdot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aTransmitByteCount.setStatus('mandatory')
on11aPrimarySSIDdot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ReceivedByteCount.setStatus('mandatory')
on11aPrimarySSIDdot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3TransmitByteCount.setStatus('mandatory')
onPrimarySSIDdot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aCRCErrorCount.setStatus('mandatory')
onPrimarySSIDdot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aPHYErrorCount.setStatus('mandatory')
onPrimarySSIDdot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aMICErrorCount.setStatus('mandatory')
onPrimarySSIDdot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aKEYDecrErrorCount.setStatus('mandatory')
on11aPrimarySSIDdot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ReceivedPKTCount.setStatus('mandatory')
onPrimarySSIDdot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aUserReceivedByteCount.setStatus('mandatory')
onPrimarySSIDdot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnPrimarySSIDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnPrimarySSIDTable.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry.setStatus('mandatory')
onPrimarySSIDdot11aAssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aAssociatedMACCount.setStatus('mandatory')
onPrimarySSIDdot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aErrorFrameRate.setStatus('mandatory')
on11aPrimarySSIDdot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ErrorFrameRate.setStatus('mandatory')
onPrimarySSIDdot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID1 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2))
onSSID1dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aReceivedByteCount.setStatus('mandatory')
onSSID1dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID1dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID1dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3TransmitByteCount.setStatus('mandatory')
onSSID1dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aCRCErrorCount.setStatus('mandatory')
onSSID1dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aPHYErrorCount.setStatus('mandatory')
onSSID1dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aMICErrorCount.setStatus('mandatory')
onSSID1dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID1dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3ReceivedPKTCount.setStatus('mandatory')
onSSID1dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID1dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID1Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID1Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID1Entry.setStatus('mandatory')
onSSID1dot11AssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11AssociatedMACCount.setStatus('mandatory')
onSSID1dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID1dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3ErrorFrameRate.setStatus('mandatory')
onSSID1dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID2 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3))
onSSID2dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aReceivedByteCount.setStatus('mandatory')
onSSID2dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID2dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID2dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3TransmitByteCount.setStatus('mandatory')
onSSID2dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aCRCErrorCount.setStatus('mandatory')
onSSID2dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aPHYErrorCount.setStatus('mandatory')
onSSID2dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aMICErrorCount.setStatus('mandatory')
onSSID2dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID2dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3ReceivedPKTCount.setStatus('mandatory')
onSSID2dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID2dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID2Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID2Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID2Entry.setStatus('mandatory')
onSSID2dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11associatedMACCount.setStatus('mandatory')
onSSID2dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID2dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3ErrorFrameRate.setStatus('mandatory')
onSSID2dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4))
onSSID3dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aReceivedByteCount.setStatus('mandatory')
onSSID3dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID3dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID3dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3TransmitByteCount.setStatus('mandatory')
onSSID3dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aCRCErrorCount.setStatus('mandatory')
onSSID3dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aPHYErrorCount.setStatus('mandatory')
onSSID3dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aMICErrorCount.setStatus('mandatory')
onSSID3dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID3dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3ReceivedPKTCount.setStatus('mandatory')
onSSID3dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID3dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID3Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID3Entry.setStatus('mandatory')
onSSID3dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11associatedMACCount.setStatus('mandatory')
onSSID3dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID3dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3ErrorFrameRate.setStatus('mandatory')
onSSID3dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID4 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5))
onSSID4dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aReceivedByteCount.setStatus('mandatory')
onSSID4dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID4dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID4dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3TransmitByteCount.setStatus('mandatory')
onSSID4dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aCRCErrorCount.setStatus('mandatory')
onSSID4dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aPHYErrorCount.setStatus('mandatory')
onSSID4dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aMICErrorCount.setStatus('mandatory')
onSSID4dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID4dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3ReceivedPKTCount.setStatus('mandatory')
onSSID4dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID4dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID4Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID4Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID4Entry.setStatus('mandatory')
onSSID4dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11associatedMACCount.setStatus('mandatory')
onSSID4dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID4dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3ErrorFrameRate.setStatus('mandatory')
onSSID4dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID5 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6))
onSSID5dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aReceivedByteCount.setStatus('mandatory')
onSSID5dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID5dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID5dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3TransmitByteCount.setStatus('mandatory')
onSSID5dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aCRCErrorCount.setStatus('mandatory')
onSSID5dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aPHYErrorCount.setStatus('mandatory')
onSSID5dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aMICErrorCount.setStatus('mandatory')
onSSID5dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID5dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3ReceivedPKTCount.setStatus('mandatory')
onSSID5dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID5dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID5Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID5Entry.setStatus('mandatory')
onSSID5dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11associatedMACCount.setStatus('mandatory')
onSSID5dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID5dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3ErrorFrameRate.setStatus('mandatory')
onSSID5dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID6 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7))
onSSID6dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aReceivedByteCount.setStatus('mandatory')
onSSID6dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID6dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID6dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3TransmitByteCount.setStatus('mandatory')
onSSID6dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aCRCErrorCount.setStatus('mandatory')
onSSID6dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aPHYErrorCount.setStatus('mandatory')
onSSID6dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aMICErrorCount.setStatus('mandatory')
onSSID6dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID6dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3ReceivedPKTCount.setStatus('mandatory')
onSSID6dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID6dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID6Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID6Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID6Entry.setStatus('mandatory')
onSSID6dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11associatedMACCount.setStatus('mandatory')
onSSID6dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID6dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3ErrorFrameRate.setStatus('mandatory')
onSSID6dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11aSSID7 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8))
onSSID7dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aReceivedByteCount.setStatus('mandatory')
onSSID7dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aTransmitByteCount.setStatus('mandatory')
on11aSSID7dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3ReceivedByteCount.setStatus('mandatory')
on11aSSID7dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3TransmitByteCount.setStatus('mandatory')
onSSID7dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aCRCErrorCount.setStatus('mandatory')
onSSID7dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aPHYErrorCount.setStatus('mandatory')
onSSID7dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aMICErrorCount.setStatus('mandatory')
onSSID7dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aKEYDecrErrorCount.setStatus('mandatory')
on11aSSID7dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3ReceivedPKTCount.setStatus('mandatory')
onSSID7dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aUserReceivedByteCount.setStatus('mandatory')
onSSID7dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aUserTransmitByteCount.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID7Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID7Table.setStatus('mandatory')
dot11aTrafficStatisticsByTimeOnSSID7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID7Entry.setStatus('mandatory')
onSSID7dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11associatedMACCount.setStatus('mandatory')
onSSID7dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aErrorFrameRate.setStatus('mandatory')
on11aSSID7dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3ErrorFrameRate.setStatus('mandatory')
onSSID7dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aWirelessUsage.setStatus('mandatory')
trafficStatisticsOn11gEverySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5))
trafficStatisticson11gPrimarySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1))
onPrimarySSIDdot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gReceivedByteCount.setStatus('mandatory')
onPrimarySSIDdot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gTransmitByteCount.setStatus('mandatory')
on11gPrimarySSIDdot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ReceivedByteCount.setStatus('mandatory')
on11gPrimarySSIDdot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3TransmitByteCount.setStatus('mandatory')
onPrimarySSIDdot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gCRCErrorCount.setStatus('mandatory')
onPrimarySSIDdot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gPHYErrorCount.setStatus('mandatory')
onPrimarySSIDdot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gMICErrorCount.setStatus('mandatory')
onPrimarySSIDdot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gKEYDecrErrorCount.setStatus('mandatory')
on11gPrimarySSIDdot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ReceivedPKTCount.setStatus('mandatory')
onPrimarySSIDdot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gUserReceivedByteCount.setStatus('mandatory')
onPrimarySSIDdot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnPrimarySSIDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnPrimarySSIDTable.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry.setStatus('mandatory')
onPrimarySSIDdot11gAssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gAssociatedMACCount.setStatus('mandatory')
onPrimarySSIDdot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gErrorFrameRate.setStatus('mandatory')
on11gPrimarySSIDdot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ErrorFrameRate.setStatus('mandatory')
onPrimarySSIDdot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID1 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2))
onSSID1dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gReceivedByteCount.setStatus('mandatory')
onSSID1dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID1dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID1dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3TransmitByteCount.setStatus('mandatory')
onSSID1dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gCRCErrorCount.setStatus('mandatory')
onSSID1dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gPHYErrorCount.setStatus('mandatory')
onSSID1dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gMICErrorCount.setStatus('mandatory')
onSSID1dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID1dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3ReceivedPKTCount.setStatus('mandatory')
onSSID1dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID1dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID1Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID1Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID1Entry.setStatus('mandatory')
onSSID1dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gssociatedMACCount.setStatus('mandatory')
onSSID1dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID1dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3ErrorFrameRate.setStatus('mandatory')
onSSID1dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID2 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3))
onSSID2dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gReceivedByteCount.setStatus('mandatory')
onSSID2dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID2dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID2dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3TransmitByteCount.setStatus('mandatory')
onSSID2dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gCRCErrorCount.setStatus('mandatory')
onSSID2dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gPHYErrorCount.setStatus('mandatory')
onSSID2dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gMICErrorCount.setStatus('mandatory')
onSSID2dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID2dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3ReceivedPKTCount.setStatus('mandatory')
onSSID2dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID2dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID2Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID2Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID2Entry.setStatus('mandatory')
onSSID2dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gssociatedMACCount.setStatus('mandatory')
onSSID2dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID2dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3ErrorFrameRate.setStatus('mandatory')
onSSID2dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4))
onSSID3dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gReceivedByteCount.setStatus('mandatory')
onSSID3dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID3dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID3dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3TransmitByteCount.setStatus('mandatory')
onSSID3dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gCRCErrorCount.setStatus('mandatory')
onSSID3dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gPHYErrorCount.setStatus('mandatory')
onSSID3dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gMICErrorCount.setStatus('mandatory')
onSSID3dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID3dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3ReceivedPKTCount.setStatus('mandatory')
onSSID3dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID3dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID3Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID3Entry.setStatus('mandatory')
onSSID3dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gssociatedMACCount.setStatus('mandatory')
onSSID3dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID3dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3ErrorFrameRate.setStatus('mandatory')
onSSID3dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID4 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5))
onSSID4dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gReceivedByteCount.setStatus('mandatory')
onSSID4dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID4dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID4dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3TransmitByteCount.setStatus('mandatory')
onSSID4dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gCRCErrorCount.setStatus('mandatory')
onSSID4dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gPHYErrorCount.setStatus('mandatory')
onSSID4dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gMICErrorCount.setStatus('mandatory')
onSSID4dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID4dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3ReceivedPKTCount.setStatus('mandatory')
onSSID4dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID4dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID4Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID4Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID4Entry.setStatus('mandatory')
onSSID4dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gssociatedMACCount.setStatus('mandatory')
onSSID4dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID4dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3ErrorFrameRate.setStatus('mandatory')
onSSID4dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID5 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6))
onSSID5dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gReceivedByteCount.setStatus('mandatory')
onSSID5dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID5dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID5dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3TransmitByteCount.setStatus('mandatory')
onSSID5dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gCRCErrorCount.setStatus('mandatory')
onSSID5dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gPHYErrorCount.setStatus('mandatory')
onSSID5dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gMICErrorCount.setStatus('mandatory')
onSSID5dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID5dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3ReceivedPKTCount.setStatus('mandatory')
onSSID5dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID5dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID5Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID5Entry.setStatus('mandatory')
onSSID5dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gssociatedMACCount.setStatus('mandatory')
onSSID5dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID5dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3ErrorFrameRate.setStatus('mandatory')
onSSID5dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID6 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7))
onSSID6dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gReceivedByteCount.setStatus('mandatory')
onSSID6dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID6dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID6dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3TransmitByteCount.setStatus('mandatory')
onSSID6dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gCRCErrorCount.setStatus('mandatory')
onSSID6dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gPHYErrorCount.setStatus('mandatory')
onSSID6dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gMICErrorCount.setStatus('mandatory')
onSSID6dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID6dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3ReceivedPKTCount.setStatus('mandatory')
onSSID6dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID6dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID6Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID6Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID6Entry.setStatus('mandatory')
onSSID6dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gssociatedMACCount.setStatus('mandatory')
onSSID6dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID6dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3ErrorFrameRate.setStatus('mandatory')
onSSID6dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gWirelessUsage.setStatus('mandatory')
trafficStatisticson11gSSID7 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8))
onSSID7dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gReceivedByteCount.setStatus('mandatory')
onSSID7dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gTransmitByteCount.setStatus('mandatory')
on11gSSID7dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3ReceivedByteCount.setStatus('mandatory')
on11gSSID7dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3TransmitByteCount.setStatus('mandatory')
onSSID7dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gCRCErrorCount.setStatus('mandatory')
onSSID7dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gPHYErrorCount.setStatus('mandatory')
onSSID7dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gMICErrorCount.setStatus('mandatory')
onSSID7dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gKEYDecrErrorCount.setStatus('mandatory')
on11gSSID7dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3ReceivedPKTCount.setStatus('mandatory')
onSSID7dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gUserReceivedByteCount.setStatus('mandatory')
onSSID7dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gUserTransmitByteCount.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID7Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID7Table.setStatus('mandatory')
dot11gTrafficStatisticsByTimeOnSSID7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID7Entry.setStatus('mandatory')
onSSID7dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gssociatedMACCount.setStatus('mandatory')
onSSID7dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gErrorFrameRate.setStatus('mandatory')
on11gSSID7dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3ErrorFrameRate.setStatus('mandatory')
onSSID7dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gWirelessUsage.setStatus('mandatory')
systemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4))
systemLogSystemLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogSystemLevel.setStatus('mandatory')
systemLogWirelessLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogWirelessLevel.setStatus('mandatory')
systemLogNoticeLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogNoticeLevel.setStatus('mandatory')
systemLogTFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogTFTPServerIPAddress.setStatus('mandatory')
systemLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogFileName.setStatus('mandatory')
systemLogGetLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogGetLog.setStatus('mandatory')
systemLogLocalLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogLocalLogState.setStatus('mandatory')
systemLogRemoteLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogRemoteLogState.setStatus('mandatory')
systemLogServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogServerIPAddress.setStatus('mandatory')
systemLogClearLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogClearLocalLog.setStatus('mandatory')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7))
trapsNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1))
trapSSHLogin = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 1)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapSSHLogin.setStatus('current')
trapWebLogin = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 2)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapWebLogin.setStatus('current')
trapTelLogin = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 3)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapTelLogin.setStatus('current')
trapCPULoad = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 4)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapCPULoad.setStatus('current')
trapMEMPoor = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 5)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapMEMPoor.setStatus('current')
trapAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 6)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapSTAMACaddr"))
if mibBuilder.loadTexts: trapAuthFail.setStatus('current')
trapWirelessLinkUP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 7)).setObjects(("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapBand"))
if mibBuilder.loadTexts: trapWirelessLinkUP.setStatus('current')
trapDeAuthAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 8)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapDeAuthAttack.setStatus('current')
trapDeAssocAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 9)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapDeAssocAttack.setStatus('current')
trapBCastAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 10)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapBCastAttack.setStatus('current')
trapWebLogout = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 11)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapWebLogout.setStatus('current')
trapFWUpdate = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 12)).setObjects(("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapFWUpdate.setStatus('current')
trapWirelessLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 13)).setObjects(("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapBand"))
if mibBuilder.loadTexts: trapWirelessLinkDown.setStatus('current')
trapSTALinkUP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 14)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapSTAMACaddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapSTALinkUP.setStatus('current')
trapSTALinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 15)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapSTAMACaddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapSTALinkDown.setStatus('current')
trapsNotifyBiding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2))
trapAPMACaddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAPMACaddr.setStatus('mandatory')
trapSTAMACaddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSTAMACaddr.setStatus('mandatory')
trapAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("wlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAlarmLevel.setStatus('mandatory')
trapPCIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPCIPAddr.setStatus('mandatory')
swNotiResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNotiResult.setStatus('mandatory')
trapBand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wlan0", 0), ("wlan1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapBand.setStatus('mandatory')
miscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6))
compatible = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1))
compatibleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1), )
if mibBuilder.loadTexts: compatibleTable.setStatus('mandatory')
compatibleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: compatibleEntry.setStatus('mandatory')
apmodes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apmodes.setStatus('mandatory')
turbomodes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTurbo", 0), ("allTurbo", 1), ("onlyDynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turbomodes.setStatus('mandatory')
aclnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclnumber.setStatus('mandatory')
xrsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xrsupported.setStatus('mandatory')
codebase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codebase.setStatus('mandatory')
countrycode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: countrycode.setStatus('mandatory')
clientinfosupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientinfosupported.setStatus('mandatory')
singlefirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singlefirmware.setStatus('mandatory')
mssidsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidsupported.setStatus('mandatory')
rogueapsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueapsupported.setStatus('mandatory')
syslogsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogsupported.setStatus('mandatory')
wmmsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmmsupported.setStatus('mandatory')
mssidisolatedsecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidisolatedsecurity.setStatus('mandatory')
mssidindication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidindication.setStatus('mandatory')
keytypeselection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keytypeselection.setStatus('mandatory')
clustersupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clustersupported.setStatus('mandatory')
greenpacketsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: greenpacketsupported.setStatus('mandatory')
sshsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshsupported.setStatus('mandatory')
wdschannellist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdschannellist.setStatus('mandatory')
mSSIDSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mSSIDSuppress.setStatus('mandatory')
antennasupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antennasupported.setStatus('mandatory')
vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlan.setStatus('mandatory')
bgmodesupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgmodesupported.setStatus('mandatory')
wdssitesurvey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdssitesurvey.setStatus('mandatory')
accounting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accounting.setStatus('mandatory')
mssidaccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidaccounting.setStatus('mandatory')
mSSIDWmmSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mSSIDWmmSupported.setStatus('mandatory')
sMTPSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPSupported.setStatus('mandatory')
dfsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsSupported.setStatus('mandatory')
wmmOverWDSSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmmOverWDSSupported.setStatus('mandatory')
priorityBySsidSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priorityBySsidSupported.setStatus('mandatory')
mibBuilder.exportSymbols("DWL-3200", ieee802dot11DataRateEntry=ieee802dot11DataRateEntry, dot11AutoChannelScan=dot11AutoChannelScan, ifSubnetMask=ifSubnetMask, staticMask=staticMask, staticMac=staticMac, ieee802dot11MssidStateTable=ieee802dot11MssidStateTable, dot11Securities=dot11Securities, onSSID6dot11gPHYErrorCount=onSSID6dot11gPHYErrorCount, dot11RemoteApMacAddress=dot11RemoteApMacAddress, smtpStatus=smtpStatus, on11aSSID5dot3ReceivedPKTCount=on11aSSID5dot3ReceivedPKTCount, onSSID5dot11gTransmitByteCount=onSSID5dot11gTransmitByteCount, managerIpRangeEntry=managerIpRangeEntry, web=web, console=console, lanIfSettingEntry=lanIfSettingEntry, trapBCastAttack=trapBCastAttack, dot11DataRate36Mb=dot11DataRate36Mb, onSSID3dot11aWirelessUsage=onSSID3dot11aWirelessUsage, lanIfGetIpAddressFrom=lanIfGetIpAddressFrom, dot11DataRate2Mb=dot11DataRate2Mb, systemLogLocalLogState=systemLogLocalLogState, dot11GetClientInformationTable=dot11GetClientInformationTable, onSSID2dot11aMICErrorCount=onSSID2dot11aMICErrorCount, dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry=dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry, systemLogFileName=systemLogFileName, dot11SecRADIUSSecret=dot11SecRADIUSSecret, trafficStatisticsWireless=trafficStatisticsWireless, on11aSSID4dot3TransmitByteCount=on11aSSID4dot3TransmitByteCount, onSSID1dot11gKEYDecrErrorCount=onSSID1dot11gKEYDecrErrorCount, dot11RogueApDeleteFromRecord=dot11RogueApDeleteFromRecord, ftpPassword=ftpPassword, dot11WdsChannelList=dot11WdsChannelList, dot11AccountingEntry=dot11AccountingEntry, onSSID1dot11aTransmitByteCount=onSSID1dot11aTransmitByteCount, mSSIDWmmSupported=mSSIDWmmSupported, dot11gTrafficStatisticsByTimeOnSSID6Entry=dot11gTrafficStatisticsByTimeOnSSID6Entry, dot11SiteSurveyRssi=dot11SiteSurveyRssi, dot11aTrafficStatisticsByTimeOnSSID4Entry=dot11aTrafficStatisticsByTimeOnSSID4Entry, dot11Authentication=dot11Authentication, onSSID4dot11gMICErrorCount=onSSID4dot11gMICErrorCount, dynamicDomainName=dynamicDomainName, ieee802dot11VlanTable=ieee802dot11VlanTable, on11aSSID6dot3ReceivedByteCount=on11aSSID6dot3ReceivedByteCount, dot11MssidVlanTagID=dot11MssidVlanTagID, dot11DataRate9Mb=dot11DataRate9Mb, currentStaticTable=currentStaticTable, onSSID7dot11aReceivedByteCount=onSSID7dot11aReceivedByteCount, onSSID2dot11aUserTransmitByteCount=onSSID2dot11aUserTransmitByteCount, smtpRecipient=smtpRecipient, on11gPrimarySSIDdot3TransmitByteCount=on11gPrimarySSIDdot3TransmitByteCount, lan=lan, managerIpRangeIndex=managerIpRangeIndex, managerIpAddress=managerIpAddress, dot11gTrafficStatisticsByTimeOnSSID6Table=dot11gTrafficStatisticsByTimeOnSSID6Table, dot11RogueApBssType=dot11RogueApBssType, onPrimarySSIDdot11aUserReceivedByteCount=onPrimarySSIDdot11aUserReceivedByteCount, dot11SecAccountingServer=dot11SecAccountingServer, ftpUserName=ftpUserName, sntp=sntp, onSSID4dot11aTransmitByteCount=onSSID4dot11aTransmitByteCount, ssh=ssh, dot11gTrafficStatisticsByTimeOnSSID2Table=dot11gTrafficStatisticsByTimeOnSSID2Table, onSSID4dot11aUserTransmitByteCount=onSSID4dot11aUserTransmitByteCount, dot11PrioritySsidState=dot11PrioritySsidState, on11aSSID7dot3ReceivedByteCount=on11aSSID7dot3ReceivedByteCount, dot11CipherType=dot11CipherType, mssidisolatedsecurity=mssidisolatedsecurity, wdssitesurvey=wdssitesurvey, staticDns=staticDns, on11gSSID2dot3ReceivedPKTCount=on11gSSID2dot3ReceivedPKTCount, dot11MssidState=dot11MssidState, ieee802dot11Grouping=ieee802dot11Grouping, dot11MssidWMM=dot11MssidWMM, dot11SiteSurveyEntry=dot11SiteSurveyEntry, dot11ClinetIndex=dot11ClinetIndex, dot11MacAccessControlListEntry=dot11MacAccessControlListEntry, singlefirmware=singlefirmware, onSSID4dot11gReceivedByteCount=onSSID4dot11gReceivedByteCount, dot3TransmittedByteCount=dot3TransmittedByteCount, onSSID3dot11gPHYErrorCount=onSSID3dot11gPHYErrorCount, apstatus=apstatus, dot3ReceivedByteCount=dot3ReceivedByteCount, dot11MssidEncryption=dot11MssidEncryption, onSSID5dot11gUserReceivedByteCount=onSSID5dot11gUserReceivedByteCount, onSSID5dot11gUserTransmitByteCount=onSSID5dot11gUserTransmitByteCount, managerIpAddressIndex=managerIpAddressIndex, dhcpServerControl=dhcpServerControl, onSSID6dot11aCRCErrorCount=onSSID6dot11aCRCErrorCount, dot11ReceivedByteCount=dot11ReceivedByteCount, on11aSSID1dot3TransmitByteCount=on11aSSID1dot3TransmitByteCount, greenpacketsupported=greenpacketsupported, dot11SecAccountingEntry=dot11SecAccountingEntry, trapAlarmLevel=trapAlarmLevel, on11gSSID3dot3ErrorFrameRate=on11gSSID3dot3ErrorFrameRate, ieee802dot11DataRateControlEntry=ieee802dot11DataRateControlEntry, dot11AccountingServer=dot11AccountingServer, dot11aTrafficStatisticsByTimeOnPrimarySSIDTable=dot11aTrafficStatisticsByTimeOnPrimarySSIDTable, dot11MssidKeyType=dot11MssidKeyType, on11aSSID6dot3TransmitByteCount=on11aSSID6dot3TransmitByteCount, dot11gTrafficStatisticsByTimeOnSSID3Entry=dot11gTrafficStatisticsByTimeOnSSID3Entry, trapAPMACaddr=trapAPMACaddr, dot11MssidWepKeyIndex=dot11MssidWepKeyIndex, managerIpAddressTable=managerIpAddressTable, dot11gTrafficStatisticsByTimeOnSSID5Table=dot11gTrafficStatisticsByTimeOnSSID5Table, dot11ReceivedFrameFcsErrorCount=dot11ReceivedFrameFcsErrorCount, on11gSSID2dot3ErrorFrameRate=on11gSSID2dot3ErrorFrameRate, lanIfMacAddress=lanIfMacAddress, dot11aTrafficStatisticsByTimeOnSSID3Entry=dot11aTrafficStatisticsByTimeOnSSID3Entry, dot11RogueApListRecordMode=dot11RogueApListRecordMode, dot11RogueApProtection=dot11RogueApProtection, wirelessLanIfNumber=wirelessLanIfNumber, ieee802dot11MssidEntry=ieee802dot11MssidEntry, dot11RogueApSurveyRssi=dot11RogueApSurveyRssi, currentDynamicAssignedIP=currentDynamicAssignedIP, onSSID6dot11gWirelessUsage=onSSID6dot11gWirelessUsage, on11gSSID2dot3TransmitByteCount=on11gSSID2dot3TransmitByteCount, dynamicMask=dynamicMask, onSSID5dot11aMICErrorCount=onSSID5dot11aMICErrorCount, dot11TrafficStatisticsTable=dot11TrafficStatisticsTable, dot11RtsSuccessCount=dot11RtsSuccessCount, dot11RadioWave=dot11RadioWave, dot11RemoteApMacAddressEntry=dot11RemoteApMacAddressEntry, dot11UserLimit=dot11UserLimit, interfaceInformationEntry=interfaceInformationEntry, on11gSSID5dot3TransmitByteCount=on11gSSID5dot3TransmitByteCount, interface=interface, dot11VlanState=dot11VlanState, managerVLANIDStatus=managerVLANIDStatus, dhcpServerStaticEntry=dhcpServerStaticEntry, onSSID4dot11aMICErrorCount=onSSID4dot11aMICErrorCount, onPrimarySSIDdot11aAssociatedMACCount=onPrimarySSIDdot11aAssociatedMACCount, dot11RrogueApDelete=dot11RrogueApDelete, ieee802dot11GroupingEntry=ieee802dot11GroupingEntry, ftp=ftp, systemLogGetLog=systemLogGetLog, onSSID6dot11aTransmitByteCount=onSSID6dot11aTransmitByteCount, dot11Frequency=dot11Frequency, managerIpRangeTable=managerIpRangeTable, dot11TransmittedMultipleRetryCount=dot11TransmittedMultipleRetryCount, trafficStatisticsOn11aSSID1=trafficStatisticsOn11aSSID1, dot11RogueApAddtoApList=dot11RogueApAddtoApList, onSSID7dot11gCRCErrorCount=onSSID7dot11gCRCErrorCount, discardChanges=discardChanges, smtpSender=smtpSender, onSSID3dot11gCRCErrorCount=onSSID3dot11gCRCErrorCount, systemLogRemoteLogState=systemLogRemoteLogState, on11gSSID6dot3ReceivedByteCount=on11gSSID6dot3ReceivedByteCount, onSSID5dot11gReceivedByteCount=onSSID5dot11gReceivedByteCount, dot11gTrafficStatisticsByTimeOnPrimarySSIDTable=dot11gTrafficStatisticsByTimeOnPrimarySSIDTable, onSSID3dot11aCRCErrorCount=onSSID3dot11aCRCErrorCount, on11gPrimarySSIDdot3ReceivedPKTCount=on11gPrimarySSIDdot3ReceivedPKTCount, lanIfSettingTable=lanIfSettingTable, on11gSSID2dot3ReceivedByteCount=on11gSSID2dot3ReceivedByteCount, trafficStatisticson11gSSID4=trafficStatisticson11gSSID4, wdschannellist=wdschannellist, managerVLANID=managerVLANID, onSSID7dot11aUserTransmitByteCount=onSSID7dot11aUserTransmitByteCount, deviceRestart=deviceRestart, onSSID2dot11gErrorFrameRate=onSSID2dot11gErrorFrameRate, onSSID7dot11aPHYErrorCount=onSSID7dot11aPHYErrorCount, onSSID1dot11aUserReceivedByteCount=onSSID1dot11aUserReceivedByteCount, trapDeAuthAttack=trapDeAuthAttack, systemLogTFTPServerIPAddress=systemLogTFTPServerIPAddress, dot11SiteSurveyChannel=dot11SiteSurveyChannel, staticDomainName=staticDomainName, onSSID4dot11gErrorFrameRate=onSSID4dot11gErrorFrameRate, onSSID7dot11aUserReceivedByteCount=onSSID7dot11aUserReceivedByteCount, dot11MacAccessControlTable=dot11MacAccessControlTable, systemLogClearLocalLog=systemLogClearLocalLog, tftpUpgradeSettingCommand=tftpUpgradeSettingCommand, trafficStatisticsOn11aSSID3=trafficStatisticsOn11aSSID3, systemDescr=systemDescr, onSSID3dot11aUserReceivedByteCount=onSSID3dot11aUserReceivedByteCount, dot11SecAccountingServerPort=dot11SecAccountingServerPort, dhcpServer=dhcpServer, trapWirelessLinkUP=trapWirelessLinkUP, ieee802dot11RogueApSurveyTable=ieee802dot11RogueApSurveyTable, control=control, dot11SecuritiesEntry=dot11SecuritiesEntry, bgmodesupported=bgmodesupported, dot11TransmitedByteCount=dot11TransmitedByteCount, dot11MssidEthNoTag=dot11MssidEthNoTag, dot11RogueApListRecordRssi=dot11RogueApListRecordRssi, onSSID1dot11gTransmitByteCount=onSSID1dot11gTransmitByteCount, accounting=accounting, trapSTALinkUP=trapSTALinkUP, trapAuthFail=trapAuthFail, dot3ReceivedFrameCount=dot3ReceivedFrameCount, dot11InternalStationConnection=dot11InternalStationConnection, keytypeselection=keytypeselection, dot11MacAccessControlEntry=dot11MacAccessControlEntry, trafficStatisticson11gSSID6=trafficStatisticson11gSSID6, onSSID7dot11aMICErrorCount=onSSID7dot11aMICErrorCount, onSSID3dot11gReceivedByteCount=onSSID3dot11gReceivedByteCount, onPrimarySSIDdot11aPHYErrorCount=onPrimarySSIDdot11aPHYErrorCount, on11aSSID6dot3ReceivedPKTCount=on11aSSID6dot3ReceivedPKTCount, on11aSSID1dot3ErrorFrameRate=on11aSSID1dot3ErrorFrameRate, on11aSSID4dot3ReceivedByteCount=on11aSSID4dot3ReceivedByteCount, onSSID6dot11gTransmitByteCount=onSSID6dot11gTransmitByteCount, dot11MssidIndex=dot11MssidIndex, aclnumber=aclnumber, onSSID4dot11aUserReceivedByteCount=onSSID4dot11aUserReceivedByteCount, onSSID4dot11gUserTransmitByteCount=onSSID4dot11gUserTransmitByteCount, trafficStatisticson11gSSID5=trafficStatisticson11gSSID5, dot11RogueApListRecordEncryption=dot11RogueApListRecordEncryption, dot11ClientBand=dot11ClientBand, dot11RogueApListRecordTable=dot11RogueApListRecordTable, dot11Parameters=dot11Parameters, sntpServerIpAddress=sntpServerIpAddress, onSSID5dot11aTransmitByteCount=onSSID5dot11aTransmitByteCount, on11gSSID3dot3TransmitByteCount=on11gSSID3dot3TransmitByteCount, on11aSSID2dot3ReceivedPKTCount=on11aSSID2dot3ReceivedPKTCount, on11gSSID1dot3ReceivedByteCount=on11gSSID1dot3ReceivedByteCount, ieee802dot11MultiSsid=ieee802dot11MultiSsid, dot11GetClientInformationEntry=dot11GetClientInformationEntry, onSSID7dot11gssociatedMACCount=onSSID7dot11gssociatedMACCount, dynamicIpPoolRange=dynamicIpPoolRange, dot11Filter=dot11Filter, lanIfSubnetMask=lanIfSubnetMask, onSSID6dot11aUserTransmitByteCount=onSSID6dot11aUserTransmitByteCount, onSSID5dot11gKEYDecrErrorCount=onSSID5dot11gKEYDecrErrorCount, dot11MssidPriorityBySsid=dot11MssidPriorityBySsid, DisplayString=DisplayString, onPrimarySSIDdot11gTransmitByteCount=onPrimarySSIDdot11gTransmitByteCount, dot11RogueApSecurityType=dot11RogueApSecurityType, mssidindication=mssidindication, staticIP=staticIP, telnet=telnet, onPrimarySSIDdot11aTransmitByteCount=onPrimarySSIDdot11aTransmitByteCount, onSSID6dot11aKEYDecrErrorCount=onSSID6dot11aKEYDecrErrorCount, dot11gTrafficStatisticsByTimeOnSSID1Table=dot11gTrafficStatisticsByTimeOnSSID1Table, onSSID5dot11gPHYErrorCount=onSSID5dot11gPHYErrorCount, device=device, dot11aTrafficStatisticsByTimeOnSSID7Entry=dot11aTrafficStatisticsByTimeOnSSID7Entry, dot11SiteSurvey=dot11SiteSurvey, dot11aTrafficStatisticsByTimeOnSSID4Table=dot11aTrafficStatisticsByTimeOnSSID4Table, onPrimarySSIDdot11gReceivedByteCount=onPrimarySSIDdot11gReceivedByteCount, onSSID3dot11gTransmitByteCount=onSSID3dot11gTransmitByteCount, currentStaticMacAddress=currentStaticMacAddress, onSSID7dot11gWirelessUsage=onSSID7dot11gWirelessUsage, dhcpServerDynamicTable=dhcpServerDynamicTable, onSSID5dot11aCRCErrorCount=onSSID5dot11aCRCErrorCount, onSSID4dot11aErrorFrameRate=onSSID4dot11aErrorFrameRate, sntpTimeZoneIndex=sntpTimeZoneIndex, dot11MssidSuppress=dot11MssidSuppress, tftpRemoteFileName=tftpRemoteFileName, onPrimarySSIDdot11gAssociatedMACCount=onPrimarySSIDdot11gAssociatedMACCount, ieee802dot11RogueApDetection=ieee802dot11RogueApDetection, report=report, onSSID7dot11gKEYDecrErrorCount=onSSID7dot11gKEYDecrErrorCount, dot11KeyEntryMethod=dot11KeyEntryMethod, miscellaneous=miscellaneous, onSSID2dot11gPHYErrorCount=onSSID2dot11gPHYErrorCount)
mibBuilder.exportSymbols("DWL-3200", onSSID1dot11gUserReceivedByteCount=onSSID1dot11gUserReceivedByteCount, onSSID3dot11aErrorFrameRate=onSSID3dot11aErrorFrameRate, on11aSSID2dot3TransmitByteCount=on11aSSID2dot3TransmitByteCount, dot11DataRate12Mb=dot11DataRate12Mb, dot11gTrafficStatisticsByTimeOnSSID2Entry=dot11gTrafficStatisticsByTimeOnSSID2Entry, on11aSSID3dot3ReceivedByteCount=on11aSSID3dot3ReceivedByteCount, systemLogServerIPAddress=systemLogServerIPAddress, dot11MssIndividualState=dot11MssIndividualState, usersIndex=usersIndex, onSSID1dot11gUserTransmitByteCount=onSSID1dot11gUserTransmitByteCount, usersEntry=usersEntry, dot11BeaconInterval=dot11BeaconInterval, dot11MssidWepKey=dot11MssidWepKey, priorityBySsidSupported=priorityBySsidSupported, dot11RogueApSurveyEncryption=dot11RogueApSurveyEncryption, interfaceInformationTable=interfaceInformationTable, onSSID5dot11aWirelessUsage=onSSID5dot11aWirelessUsage, ieee802dot11DataRateTable=ieee802dot11DataRateTable, onSSID3dot11aTransmitByteCount=onSSID3dot11aTransmitByteCount, dot11aTrafficStatisticsByTimeOnSSID6Entry=dot11aTrafficStatisticsByTimeOnSSID6Entry, ifGetIpAddressFrom=ifGetIpAddressFrom, onSSID6dot11gCRCErrorCount=onSSID6dot11gCRCErrorCount, mssidaccounting=mssidaccounting, dot11SecRADIUSStatus=dot11SecRADIUSStatus, systemModelName=systemModelName, deviceInformation=deviceInformation, onSSID5dot11gMICErrorCount=onSSID5dot11gMICErrorCount, dot11WepKeyEntry=dot11WepKeyEntry, xrsupported=xrsupported, countrycode=countrycode, dot11RogueApSurveyEntry=dot11RogueApSurveyEntry, onSSID1dot11aCRCErrorCount=onSSID1dot11aCRCErrorCount, staticStatus=staticStatus, trafficStatisticson11gSSID3=trafficStatisticson11gSSID3, enterprises=enterprises, on11aSSID7dot3ErrorFrameRate=on11aSSID7dot3ErrorFrameRate, trafficStatisticson11gSSID2=trafficStatisticson11gSSID2, dot11ReceivedFrameCount=dot11ReceivedFrameCount, dot11SiteSurveyBssType=dot11SiteSurveyBssType, onSSID4dot11gTransmitByteCount=onSSID4dot11gTransmitByteCount, trafficStatisticson11gSSID1=trafficStatisticson11gSSID1, dot11SecRADIUSServer=dot11SecRADIUSServer, dot11SsidBroadcast=dot11SsidBroadcast, onSSID2dot11aPHYErrorCount=onSSID2dot11aPHYErrorCount, dot11ReceivedFrameDuplicateCount=dot11ReceivedFrameDuplicateCount, dot11WepKeyTable=dot11WepKeyTable, onPrimarySSIDdot11aUserTransmitByteCount=onPrimarySSIDdot11aUserTransmitByteCount, trafficStatisticsOn11aSSID7=trafficStatisticsOn11aSSID7, onSSID6dot11gErrorFrameRate=onSSID6dot11gErrorFrameRate, sntpDayLightSaving=sntpDayLightSaving, dfsSupported=dfsSupported, dot11SiteSurveyRefreshEntry=dot11SiteSurveyRefreshEntry, currentStaticAssignedIP=currentStaticAssignedIP, dot11TrafficStatistics=dot11TrafficStatistics, dot11ApMode=dot11ApMode, managerIpAddressEntry=managerIpAddressEntry, dot11SuperMode=dot11SuperMode, onSSID4dot11gWirelessUsage=onSSID4dot11gWirelessUsage, dot11SiteSurveyEncryption=dot11SiteSurveyEncryption, antennasupported=antennasupported, onSSID6dot11associatedMACCount=onSSID6dot11associatedMACCount, onSSID7dot11aErrorFrameRate=onSSID7dot11aErrorFrameRate, on11gSSID5dot3ReceivedByteCount=on11gSSID5dot3ReceivedByteCount, currentDynamicIndex=currentDynamicIndex, dot11ClientInformationEntry=dot11ClientInformationEntry, onSSID1dot11aErrorFrameRate=onSSID1dot11aErrorFrameRate, trafficStatisticsOn11aSSID5=trafficStatisticsOn11aSSID5, onSSID5dot11associatedMACCount=onSSID5dot11associatedMACCount, systemUpTime=systemUpTime, rogueapsupported=rogueapsupported, dwl_3200AP=dwl_3200AP, onSSID1dot11aKEYDecrErrorCount=onSSID1dot11aKEYDecrErrorCount, trapWebLogout=trapWebLogout, dot11PartionTable=dot11PartionTable, on11gSSID6dot3TransmitByteCount=on11gSSID6dot3TransmitByteCount, dot11ClientInformationAssNum=dot11ClientInformationAssNum, dot11MacAccessControl=dot11MacAccessControl, currentStaticIndex=currentStaticIndex, on11aSSID6dot3ErrorFrameRate=on11aSSID6dot3ErrorFrameRate, dot11MssidInternalStationConnection=dot11MssidInternalStationConnection, onSSID2dot11gCRCErrorCount=onSSID2dot11gCRCErrorCount, dot11SiteSurveySupportWds=dot11SiteSurveySupportWds, dot11gTrafficStatisticsByTimeOnSSID1Entry=dot11gTrafficStatisticsByTimeOnSSID1Entry, dot11Accounting=dot11Accounting, on11aSSID5dot3TransmitByteCount=on11aSSID5dot3TransmitByteCount, dot11DynamicChannelList=dot11DynamicChannelList, dot11ClientInformation=dot11ClientInformation, dot11aTrafficStatisticsByTimeOnSSID2Entry=dot11aTrafficStatisticsByTimeOnSSID2Entry, trapSTAMACaddr=trapSTAMACaddr, onPrimarySSIDdot11gUserReceivedByteCount=onPrimarySSIDdot11gUserReceivedByteCount, currentDynamicTable=currentDynamicTable, onSSID7dot11associatedMACCount=onSSID7dot11associatedMACCount, dot11Channel=dot11Channel, onSSID7dot11gPHYErrorCount=onSSID7dot11gPHYErrorCount, dot11SiteSurveyTable=dot11SiteSurveyTable, dot11KeyIndex=dot11KeyIndex, on11gSSID7dot3TransmitByteCount=on11gSSID7dot3TransmitByteCount, trafficStatistics=trafficStatistics, dot11DataRate54Mb=dot11DataRate54Mb, dot11aTrafficStatisticsByTimeOnSSID7Table=dot11aTrafficStatisticsByTimeOnSSID7Table, onPrimarySSIDdot11gWirelessUsage=onPrimarySSIDdot11gWirelessUsage, dot11ReceiveDuplicateRate=dot11ReceiveDuplicateRate, onPrimarySSIDdot11aKEYDecrErrorCount=onPrimarySSIDdot11aKEYDecrErrorCount, dot11SiteSurveyIndex=dot11SiteSurveyIndex, dot11WifiMode=dot11WifiMode, dot11SecuritiesTable=dot11SecuritiesTable, dot11ClientAuthentication=dot11ClientAuthentication, dot11RogueApSurveyRefresh=dot11RogueApSurveyRefresh, onSSID3dot11aReceivedByteCount=onSSID3dot11aReceivedByteCount, dot11DataRate1Mb=dot11DataRate1Mb, onSSID3dot11gMICErrorCount=onSSID3dot11gMICErrorCount, onPrimarySSIDdot11aErrorFrameRate=onPrimarySSIDdot11aErrorFrameRate, dot11aTrafficStatisticsByTimeOnSSID6Table=dot11aTrafficStatisticsByTimeOnSSID6Table, dlink=dlink, systemContact=systemContact, trapTelLogin=trapTelLogin, onSSID2dot11aErrorFrameRate=onSSID2dot11aErrorFrameRate, onSSID6dot11aErrorFrameRate=onSSID6dot11aErrorFrameRate, onSSID7dot11aWirelessUsage=onSSID7dot11aWirelessUsage, dot11RadiusSecret=dot11RadiusSecret, ssl=ssl, systemLogNoticeLevel=systemLogNoticeLevel, onSSID4dot11gKEYDecrErrorCount=onSSID4dot11gKEYDecrErrorCount, wmmOverWDSSupported=wmmOverWDSSupported, advance=advance, dot11IgmpSnooping=dot11IgmpSnooping, onSSID2dot11aKEYDecrErrorCount=onSSID2dot11aKEYDecrErrorCount, onSSID4dot11aPHYErrorCount=onSSID4dot11aPHYErrorCount, on11gSSID7dot3ReceivedPKTCount=on11gSSID7dot3ReceivedPKTCount, dot11RogueApListRecord=dot11RogueApListRecord, onSSID7dot11gReceivedByteCount=onSSID7dot11gReceivedByteCount, dot11ParametersTable=dot11ParametersTable, dynamicFunction=dynamicFunction, trapSSHLogin=trapSSHLogin, onSSID6dot11gssociatedMACCount=onSSID6dot11gssociatedMACCount, dot11gTrafficStatisticsByTimeOnSSID7Entry=dot11gTrafficStatisticsByTimeOnSSID7Entry, dot11DataRate11Mb=dot11DataRate11Mb, trapCPULoad=trapCPULoad, on11aSSID7dot3ReceivedPKTCount=on11aSSID7dot3ReceivedPKTCount, pingcontrol=pingcontrol, on11gSSID5dot3ErrorFrameRate=on11gSSID5dot3ErrorFrameRate, on11gSSID3dot3ReceivedPKTCount=on11gSSID3dot3ReceivedPKTCount, onSSID1dot11gMICErrorCount=onSSID1dot11gMICErrorCount, dot11RogueApListRecordBssid=dot11RogueApListRecordBssid, ftpRemoteFileName=ftpRemoteFileName, dot11ReceiveSuccessRate=dot11ReceiveSuccessRate, dot11KickOff=dot11KickOff, onSSID4dot11aWirelessUsage=onSSID4dot11aWirelessUsage, onPrimarySSIDdot11gUserTransmitByteCount=onPrimarySSIDdot11gUserTransmitByteCount, dynamicWins=dynamicWins, compatibleTable=compatibleTable, onSSID5dot11aKEYDecrErrorCount=onSSID5dot11aKEYDecrErrorCount, usersTable=usersTable, dot11gModeDataRateList=dot11gModeDataRateList, dot16TrafficStatistics=dot16TrafficStatistics, trapDeAssocAttack=trapDeAssocAttack, trapWebLogin=trapWebLogin, ieee802dot11DataRateControlTable=ieee802dot11DataRateControlTable, dot11RogueApSurveyBssType=dot11RogueApSurveyBssType, onSSID2dot11aReceivedByteCount=onSSID2dot11aReceivedByteCount, ieee802dot11functionTable=ieee802dot11functionTable, ieee802dot11MssidStateEntry=ieee802dot11MssidStateEntry, dot11aTrafficStatisticsByTimeOnSSID3Table=dot11aTrafficStatisticsByTimeOnSSID3Table, compatible=compatible, dot11MulticastTransmittedFrameCount=dot11MulticastTransmittedFrameCount, dlink_products=dlink_products, on11aSSID5dot3ErrorFrameRate=on11aSSID5dot3ErrorFrameRate, dot11AccountingServerPort=dot11AccountingServerPort, mSSIDSuppress=mSSIDSuppress, onSSID6dot11gUserTransmitByteCount=onSSID6dot11gUserTransmitByteCount, dot11DataRate6Mb=dot11DataRate6Mb, dot11WepKey=dot11WepKey, onSSID3dot11gWirelessUsage=onSSID3dot11gWirelessUsage, tftpServerIPAddress=tftpServerIPAddress, dot11MssidCipherType=dot11MssidCipherType, onSSID1dot11aUserTransmitByteCount=onSSID1dot11aUserTransmitByteCount, trafficStatisticsOn11gEverySSID=trafficStatisticsOn11gEverySSID, mssidsupported=mssidsupported, dot11SiteSurveyRefresh=dot11SiteSurveyRefresh, dot11DataRate5dot5Mb=dot11DataRate5dot5Mb, onSSID6dot11gUserReceivedByteCount=onSSID6dot11gUserReceivedByteCount, trapsNotifyBiding=trapsNotifyBiding, onSSID4dot11aKEYDecrErrorCount=onSSID4dot11aKEYDecrErrorCount, dot11RogueApListRecordChannel=dot11RogueApListRecordChannel, dot11DataRateControl=dot11DataRateControl, on11aSSID2dot3ReceivedByteCount=on11aSSID2dot3ReceivedByteCount, dot11SecAccountingTable=dot11SecAccountingTable, dot11RogueApSurveyMode=dot11RogueApSurveyMode, vlan=vlan, onSSID4dot11aCRCErrorCount=onSSID4dot11aCRCErrorCount, ieee802dot11VlanEntry=ieee802dot11VlanEntry, onSSID6dot11aMICErrorCount=onSSID6dot11aMICErrorCount, onSSID2dot11gWirelessUsage=onSSID2dot11gWirelessUsage, ieee802dot11MssidTable=ieee802dot11MssidTable, dot11wepKeyIndex=dot11wepKeyIndex, dot11Wmm=dot11Wmm, dot3TransmittedFrameCount=dot3TransmittedFrameCount, dot11RogueApSurveyAuthentication=dot11RogueApSurveyAuthentication, dot11DataRate48Mb=dot11DataRate48Mb, onSSID7dot11aKEYDecrErrorCount=onSSID7dot11aKEYDecrErrorCount, onPrimarySSIDdot11aReceivedByteCount=onPrimarySSIDdot11aReceivedByteCount, dot11AccountingTable=dot11AccountingTable, traps=traps, dot11PassPhrase=dot11PassPhrase, on11gSSID4dot3ErrorFrameRate=on11gSSID4dot3ErrorFrameRate, deviceFactoryDefault=deviceFactoryDefault, on11aPrimarySSIDdot3ErrorFrameRate=on11aPrimarySSIDdot3ErrorFrameRate, dot11bModeDataRateList=dot11bModeDataRateList, onSSID2dot11gReceivedByteCount=onSSID2dot11gReceivedByteCount, onSSID5dot11aErrorFrameRate=onSSID5dot11aErrorFrameRate, onSSID2dot11gUserReceivedByteCount=onSSID2dot11gUserReceivedByteCount, dot11SSIDIndex=dot11SSIDIndex, onSSID4dot11associatedMACCount=onSSID4dot11associatedMACCount, onSSID7dot11gErrorFrameRate=onSSID7dot11gErrorFrameRate, trafficStatisticsOn11APrimarySSID=trafficStatisticsOn11APrimarySSID, dot11aTrafficStatisticsByTimeOnSSID2Table=dot11aTrafficStatisticsByTimeOnSSID2Table, dot11gTrafficStatisticsByTimeOnSSID4Table=dot11gTrafficStatisticsByTimeOnSSID4Table, dynamicGateway=dynamicGateway, ieee802dot11functionEntry=ieee802dot11functionEntry, tftp=tftp, onSSID1dot11AssociatedMACCount=onSSID1dot11AssociatedMACCount, dot11RogueApBandType=dot11RogueApBandType, dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry=dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry, on11aSSID3dot3TransmitByteCount=on11aSSID3dot3TransmitByteCount, systemLog=systemLog, dot11Antenna=dot11Antenna, trafficStatisticsOn11aSSID2=trafficStatisticsOn11aSSID2, trafficStatisticsOn11aSSID6=trafficStatisticsOn11aSSID6, dot11ParametersEntry=dot11ParametersEntry, update=update, onSSID6dot11aReceivedByteCount=onSSID6dot11aReceivedByteCount, dot11RemoteApMacAddressIndex=dot11RemoteApMacAddressIndex, ifIpAddress=ifIpAddress, systemIpAddress=systemIpAddress, dot11RadiusPort=dot11RadiusPort, on11gSSID4dot3TransmitByteCount=on11gSSID4dot3TransmitByteCount, on11gSSID4dot3ReceivedPKTCount=on11gSSID4dot3ReceivedPKTCount, onSSID6dot11gKEYDecrErrorCount=onSSID6dot11gKEYDecrErrorCount, dlink_dwlfamily=dlink_dwlfamily, on11gPrimarySSIDdot3ErrorFrameRate=on11gPrimarySSIDdot3ErrorFrameRate, on11gSSID5dot3ReceivedPKTCount=on11gSSID5dot3ReceivedPKTCount, dot3TrafficStatisticsTable=dot3TrafficStatisticsTable, dot11RtsLength=dot11RtsLength, systemLocation=systemLocation, dot3TrafficStatistics=dot3TrafficStatistics, onSSID2dot11gssociatedMACCount=onSSID2dot11gssociatedMACCount, onSSID3dot11gUserTransmitByteCount=onSSID3dot11gUserTransmitByteCount, trapBand=trapBand, dot11SecAccountingStatus=dot11SecAccountingStatus, trafficStatisticsOn11aEverySSID=trafficStatisticsOn11aEverySSID, deviceInformationMemUtilization=deviceInformationMemUtilization, dot11MulticastReceivedFrameCount=dot11MulticastReceivedFrameCount, ftpCommand=ftpCommand, onSSID2dot11aUserReceivedByteCount=onSSID2dot11aUserReceivedByteCount)
mibBuilder.exportSymbols("DWL-3200", on11aSSID3dot3ReceivedPKTCount=on11aSSID3dot3ReceivedPKTCount, dot11RtsFailureCount=dot11RtsFailureCount, dot11ClientMacAddress=dot11ClientMacAddress, ifDefaultGateway=ifDefaultGateway, on11aSSID7dot3TransmitByteCount=on11aSSID7dot3TransmitByteCount, dot11DataRate24Mb=dot11DataRate24Mb, onPrimarySSIDdot11aCRCErrorCount=onPrimarySSIDdot11aCRCErrorCount, dynamicIpPoolStart=dynamicIpPoolStart, staticGateway=staticGateway, currentDynamicMacAddress=currentDynamicMacAddress, dot11RogueApSurveyIndex=dot11RogueApSurveyIndex, onSSID5dot11aUserReceivedByteCount=onSSID5dot11aUserReceivedByteCount, dot3TrafficStatisticsEntry=dot3TrafficStatisticsEntry, dot11gTrafficStatisticsByTimeOnSSID7Table=dot11gTrafficStatisticsByTimeOnSSID7Table, on11gSSID7dot3ErrorFrameRate=on11gSSID7dot3ErrorFrameRate, sshsupported=sshsupported, dot11ChannelList=dot11ChannelList, dot11gTrafficStatisticsByTimeOnSSID4Entry=dot11gTrafficStatisticsByTimeOnSSID4Entry, on11gSSID1dot3TransmitByteCount=on11gSSID1dot3TransmitByteCount, onSSID7dot11gUserTransmitByteCount=onSSID7dot11gUserTransmitByteCount, onSSID2dot11aWirelessUsage=onSSID2dot11aWirelessUsage, dot11TransmitRetryRate=dot11TransmitRetryRate, dot11aTrafficStatisticsByTimeOnSSID5Table=dot11aTrafficStatisticsByTimeOnSSID5Table, dot11MssidAuthentication=dot11MssidAuthentication, onSSID6dot11gMICErrorCount=onSSID6dot11gMICErrorCount, dot11RogueApListRecordSsid=dot11RogueApListRecordSsid, managerIpAddressStatus=managerIpAddressStatus, sMTPSupported=sMTPSupported, users=users, onSSID2dot11associatedMACCount=onSSID2dot11associatedMACCount, sntpTimeofDay=sntpTimeofDay, onSSID7dot11aTransmitByteCount=onSSID7dot11aTransmitByteCount, compatibleEntry=compatibleEntry, onSSID4dot11gPHYErrorCount=onSSID4dot11gPHYErrorCount, ftpServerIPAddress=ftpServerIPAddress, onSSID3dot11associatedMACCount=onSSID3dot11associatedMACCount, onPrimarySSIDdot11aWirelessUsage=onPrimarySSIDdot11aWirelessUsage, trapPCIPAddr=trapPCIPAddr, dot11MacAccessControlListIndex=dot11MacAccessControlListIndex, dot11aTrafficStatisticsByTimeOnSSID5Entry=dot11aTrafficStatisticsByTimeOnSSID5Entry, on11aSSID4dot3ErrorFrameRate=on11aSSID4dot3ErrorFrameRate, clientinfosupported=clientinfosupported, dot11WepIcvErrorCount=dot11WepIcvErrorCount, clustersupported=clustersupported, dot11KickOffClientMacAddress=dot11KickOffClientMacAddress, onPrimarySSIDdot11gKEYDecrErrorCount=onPrimarySSIDdot11gKEYDecrErrorCount, trapWirelessLinkDown=trapWirelessLinkDown, currentStaticEntry=currentStaticEntry, dot11MssidDynamicVlan=dot11MssidDynamicVlan, dot11TransmitSuccessRate=dot11TransmitSuccessRate, smtpServerIpAddress=smtpServerIpAddress, on11aSSID3dot3ErrorFrameRate=on11aSSID3dot3ErrorFrameRate, on11gSSID3dot3ReceivedByteCount=on11gSSID3dot3ReceivedByteCount, apmodes=apmodes, systemInformation=systemInformation, onSSID2dot11gTransmitByteCount=onSSID2dot11gTransmitByteCount, onSSID5dot11aReceivedByteCount=onSSID5dot11aReceivedByteCount, dot11RogueApListRecordEntry=dot11RogueApListRecordEntry, dot11MacAccessControlListMacAddress=dot11MacAccessControlListMacAddress, onSSID5dot11aPHYErrorCount=onSSID5dot11aPHYErrorCount, on11aSSID5dot3ReceivedByteCount=on11aSSID5dot3ReceivedByteCount, dot11SiteSurveySsid=dot11SiteSurveySsid, onSSID1dot11aPHYErrorCount=onSSID1dot11aPHYErrorCount, dot11DataRate=dot11DataRate, dot11RogueApSurveySsid=dot11RogueApSurveySsid, dot11MacAccessControlListTable=dot11MacAccessControlListTable, on11gPrimarySSIDdot3ReceivedByteCount=on11gPrimarySSIDdot3ReceivedByteCount, trafficStatisticson11gSSID7=trafficStatisticson11gSSID7, timeout=timeout, dot11DataRateSetDefault=dot11DataRateSetDefault, onSSID1dot11gReceivedByteCount=onSSID1dot11gReceivedByteCount, managerEndIpAddress=managerEndIpAddress, dot11ClientRssi=dot11ClientRssi, onSSID5dot11gCRCErrorCount=onSSID5dot11gCRCErrorCount, on11gSSID7dot3ReceivedByteCount=on11gSSID7dot3ReceivedByteCount, onSSID2dot11aTransmitByteCount=onSSID2dot11aTransmitByteCount, dot11SiteSurveyWirelessMode=dot11SiteSurveyWirelessMode, onSSID3dot11gUserReceivedByteCount=onSSID3dot11gUserReceivedByteCount, onSSID6dot11aUserReceivedByteCount=onSSID6dot11aUserReceivedByteCount, dot11WdsDynamicChannelList=dot11WdsDynamicChannelList, onSSID6dot11aWirelessUsage=onSSID6dot11aWirelessUsage, codebase=codebase, systemLogSystemLevel=systemLogSystemLevel, on11aSSID1dot3ReceivedPKTCount=on11aSSID1dot3ReceivedPKTCount, dot11Preamble=dot11Preamble, on11gSSID6dot3ReceivedPKTCount=on11gSSID6dot3ReceivedPKTCount, dot11TransmittedTotalRetryCount=dot11TransmittedTotalRetryCount, dot11aTrafficStatisticsByTimeOnSSID1Table=dot11aTrafficStatisticsByTimeOnSSID1Table, updateFirmwareVersion=updateFirmwareVersion, systemFirmwareVersion=systemFirmwareVersion, smtp=smtp, onSSID6dot11aPHYErrorCount=onSSID6dot11aPHYErrorCount, onSSID1dot11gPHYErrorCount=onSSID1dot11gPHYErrorCount, dot11ClientPsm=dot11ClientPsm, dot11RogueApListRecordAuthentication=dot11RogueApListRecordAuthentication, on11gSSID1dot3ReceivedPKTCount=on11gSSID1dot3ReceivedPKTCount, dot11Ssid=dot11Ssid, dot11RogueApSurveyBssid=dot11RogueApSurveyBssid, administration=administration, dot11ClientInformationTable=dot11ClientInformationTable, ieee802dot11GroupingTable=ieee802dot11GroupingTable, on11aSSID2dot3ErrorFrameRate=on11aSSID2dot3ErrorFrameRate, dynamicLeaseTime=dynamicLeaseTime, staticWins=staticWins, onSSID3dot11gKEYDecrErrorCount=onSSID3dot11gKEYDecrErrorCount, dot11RogueApListRecordIndex=dot11RogueApListRecordIndex, onPrimarySSIDdot11gCRCErrorCount=onPrimarySSIDdot11gCRCErrorCount, staticIndex=staticIndex, dot11SecRADIUSPort=dot11SecRADIUSPort, deviceInformationFirmwareVersion=deviceInformationFirmwareVersion, on11aPrimarySSIDdot3TransmitByteCount=on11aPrimarySSIDdot3TransmitByteCount, dot11RogueApSurveyChannel=dot11RogueApSurveyChannel, onSSID3dot11aKEYDecrErrorCount=onSSID3dot11aKEYDecrErrorCount, swNotiResult=swNotiResult, dot11GroupKeyUpdateInterval=dot11GroupKeyUpdateInterval, dot11ClientKickOff=dot11ClientKickOff, managerIpAddressSetting=managerIpAddressSetting, onSSID1dot11gErrorFrameRate=onSSID1dot11gErrorFrameRate, dot11WepExcludedFrameCount=dot11WepExcludedFrameCount, onSSID1dot11aReceivedByteCount=onSSID1dot11aReceivedByteCount, dot11LinkIntegrate=dot11LinkIntegrate, systemLogWirelessLevel=systemLogWirelessLevel, trapSTALinkDown=trapSTALinkDown, onSSID3dot11gssociatedMACCount=onSSID3dot11gssociatedMACCount, trafficStatisticsOn11aSSID4=trafficStatisticsOn11aSSID4, dot11DataRate18Mb=dot11DataRate18Mb, dot11ClientInformationRefresh=dot11ClientInformationRefresh, dot11gTrafficStatisticsByTimeOnSSID3Table=dot11gTrafficStatisticsByTimeOnSSID3Table, tftpCommand=tftpCommand, onSSID6dot11gReceivedByteCount=onSSID6dot11gReceivedByteCount, onSSID5dot11aUserTransmitByteCount=onSSID5dot11aUserTransmitByteCount, currentDynamicEntry=currentDynamicEntry, wirelesslan=wirelesslan, onSSID2dot11aCRCErrorCount=onSSID2dot11aCRCErrorCount, systemTime=systemTime, onSSID4dot11aReceivedByteCount=onSSID4dot11aReceivedByteCount, onSSID3dot11aMICErrorCount=onSSID3dot11aMICErrorCount, onPrimarySSIDdot11gPHYErrorCount=onPrimarySSIDdot11gPHYErrorCount, onPrimarySSIDdot11gMICErrorCount=onPrimarySSIDdot11gMICErrorCount, ftpUpgradeSettingCommand=ftpUpgradeSettingCommand, onSSID1dot11gssociatedMACCount=onSSID1dot11gssociatedMACCount, managerStartIpAddress=managerStartIpAddress, dot11FragmentLength=dot11FragmentLength, dot11MssidSsid=dot11MssidSsid, on11gSSID6dot3ErrorFrameRate=on11gSSID6dot3ErrorFrameRate, onSSID1dot11aWirelessUsage=onSSID1dot11aWirelessUsage, onSSID3dot11gErrorFrameRate=onSSID3dot11gErrorFrameRate, dot11Dtim=dot11Dtim, dot11AccountingStatus=dot11AccountingStatus, dot11AckReceivedFailureCount=dot11AckReceivedFailureCount, trapsNotify=trapsNotify, onSSID7dot11aCRCErrorCount=onSSID7dot11aCRCErrorCount, on11aPrimarySSIDdot3ReceivedPKTCount=on11aPrimarySSIDdot3ReceivedPKTCount, dot11LoadBalance=dot11LoadBalance, dot11Encryption=dot11Encryption, onSSID2dot11gMICErrorCount=onSSID2dot11gMICErrorCount, onSSID3dot11aUserTransmitByteCount=onSSID3dot11aUserTransmitByteCount, lanIfSetting=lanIfSetting, on11gSSID1dot3ErrorFrameRate=on11gSSID1dot3ErrorFrameRate, onSSID7dot11gTransmitByteCount=onSSID7dot11gTransmitByteCount, onSSID3dot11aPHYErrorCount=onSSID3dot11aPHYErrorCount, onSSID1dot11gCRCErrorCount=onSSID1dot11gCRCErrorCount, on11aSSID1dot3ReceivedByteCount=on11aSSID1dot3ReceivedByteCount, trapFWUpdate=trapFWUpdate, adminAPwithWlan=adminAPwithWlan, dot11EthernetToWlanAccess=dot11EthernetToWlanAccess, lanIfIpAddress=lanIfIpAddress, dhcpServerCurrentListTable=dhcpServerCurrentListTable, ieee802dot11=ieee802dot11, onSSID2dot11gKEYDecrErrorCount=onSSID2dot11gKEYDecrErrorCount, usersPassword=usersPassword, dot11TransmittedErrorCount=dot11TransmittedErrorCount, dot11aTrafficStatisticsByTimeOnSSID1Entry=dot11aTrafficStatisticsByTimeOnSSID1Entry, onSSID4dot11gCRCErrorCount=onSSID4dot11gCRCErrorCount, onSSID7dot11gUserReceivedByteCount=onSSID7dot11gUserReceivedByteCount, onSSID5dot11gssociatedMACCount=onSSID5dot11gssociatedMACCount, on11aPrimarySSIDdot3ReceivedByteCount=on11aPrimarySSIDdot3ReceivedByteCount, onSSID1dot11gWirelessUsage=onSSID1dot11gWirelessUsage, currentDynamicLease=currentDynamicLease, dot11TransmitPower=dot11TransmitPower, trafficStatisticsWired=trafficStatisticsWired, dot11MssidAccountingStatus=dot11MssidAccountingStatus, onSSID1dot11aMICErrorCount=onSSID1dot11aMICErrorCount, on11gSSID4dot3ReceivedByteCount=on11gSSID4dot3ReceivedByteCount, onSSID5dot11gErrorFrameRate=onSSID5dot11gErrorFrameRate, trafficStatisticson11gPrimarySSID=trafficStatisticson11gPrimarySSID, usersName=usersName, dot11SiteSurveyBssid=dot11SiteSurveyBssid, dot11RadiusServer=dot11RadiusServer, onSSID4dot11gUserReceivedByteCount=onSSID4dot11gUserReceivedByteCount, onPrimarySSIDdot11aMICErrorCount=onPrimarySSIDdot11aMICErrorCount, managerVLANIDSetting=managerVLANIDSetting, on11aSSID4dot3ReceivedPKTCount=on11aSSID4dot3ReceivedPKTCount, onPrimarySSIDdot11gErrorFrameRate=onPrimarySSIDdot11gErrorFrameRate, onSSID5dot11gWirelessUsage=onSSID5dot11gWirelessUsage, onSSID4dot11gssociatedMACCount=onSSID4dot11gssociatedMACCount, dynamicDns=dynamicDns, trapMEMPoor=trapMEMPoor, ifMacAddress=ifMacAddress, dot11gTrafficStatisticsByTimeOnSSID5Entry=dot11gTrafficStatisticsByTimeOnSSID5Entry, dot11TrafficStatisticsEntry=dot11TrafficStatisticsEntry, dot11RemoteApMacAddressTable=dot11RemoteApMacAddressTable, ieee802dot11DataRateControl=ieee802dot11DataRateControl, lanIfDefaultGateway=lanIfDefaultGateway, turbomodes=turbomodes, dot11TransmittedFrameCount=dot11TransmittedFrameCount, ieee802dot11RogueApSurvey=ieee802dot11RogueApSurvey, dot11SiteSurveyRefreshTable=dot11SiteSurveyRefreshTable, dot11LanPartionEntry=dot11LanPartionEntry, onSSID2dot11gUserTransmitByteCount=onSSID2dot11gUserTransmitByteCount, syslogsupported=syslogsupported, onSSID7dot11gMICErrorCount=onSSID7dot11gMICErrorCount, deviceInformationCpuUtilization=deviceInformationCpuUtilization, interfaceInformation=interfaceInformation, dhcpServerStaticTable=dhcpServerStaticTable, wmmsupported=wmmsupported, dot11MssidPassPhrase=dot11MssidPassPhrase, dot11RogueApListRecordBssType=dot11RogueApListRecordBssType)
