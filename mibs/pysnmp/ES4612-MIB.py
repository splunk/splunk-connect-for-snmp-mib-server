#
# PySNMP MIB module ES4612-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES4612-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
Timeout, BridgeId, dot1dStpPort = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout", "BridgeId", "dot1dStpPort")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
dot1dTrafficClassPriority, dot1dTrafficClass, EnabledStatus = mibBuilder.importSymbols("P-BRIDGE-MIB", "dot1dTrafficClassPriority", "dot1dTrafficClass", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, IpAddress, enterprises, Counter32, NotificationType, Gauge32, TimeTicks, MibIdentifier, iso, Bits, ObjectIdentity, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "IpAddress", "enterprises", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "MibIdentifier", "iso", "Bits", "ObjectIdentity", "Integer32", "Unsigned32")
DisplayString, RowStatus, TextualConvention, DateAndTime, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime", "TruthValue", "MacAddress")
vrrpOperVrId, = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId")
accton = MibIdentifier((1, 3, 6, 1, 4, 1, 259))
snmpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6))
cheetahSwitchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10))
es4612MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 259, 6, 10, 57))
es4612MIB.setRevisions(('2001-09-06 00:00',))
if mibBuilder.loadTexts: es4612MIB.setLastUpdated('200109060000Z')
if mibBuilder.loadTexts: es4612MIB.setOrganization('Accton Technology Corp.')
es4612MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1))
es4612MIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2))
es4612MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17))
layer3Mgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24))
dnsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26))
hsrpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29))
mvrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44))
class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class OspfAreaID(TextualConvention, IpAddress):
    status = 'current'

class OspfBigMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777214)

class HsrpState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("initial", 1), ("learn", 2), ("listen", 3), ("speak", 4), ("standby", 5), ("active", 6))

class StaPathCostMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchManagementVlan.setStatus('current')
switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1), ).setIndexNames((0, "ES4612-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
swExpansionSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExpansionSlot1.setStatus('current')
swExpansionSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExpansionSlot2.setStatus('current')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
swModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModelNumber.setStatus('current')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1), ).setIndexNames((0, "ES4612-MIB", "swIndivPowerUnitIndex"), (0, "ES4612-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("green", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
switchJumboFrameStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchJumboFrameStatus.setStatus('current')
amtrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 8))
amtrMacAddrAgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setStatus('current')
switchFanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9), )
if mibBuilder.loadTexts: switchFanTable.setStatus('current')
switchFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1), ).setIndexNames((0, "ES4612-MIB", "switchUnitIndex"), (0, "ES4612-MIB", "switchFanIndex"))
if mibBuilder.loadTexts: switchFanEntry.setStatus('current')
switchUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: switchUnitIndex.setStatus('current')
switchFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: switchFanIndex.setStatus('current')
switchFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFanStatus.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
portComboForcedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("copperForced", 2), ("copperPreferredAuto", 3), ("sfpForced", 4), ("sfpPreferredAuto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portComboForcedMode.setStatus('current')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1), ).setIndexNames((0, "ES4612-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1, 1), ).setIndexNames((0, "ES4612-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setStatus('current')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1), ).setIndexNames((0, "ES4612-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
staPortFastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortFastForward.setStatus('current')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 5), StaPathCostMode().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6))
mstName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstName.setStatus('current')
mstRevision = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevision.setStatus('current')
mstMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMaxHops.setStatus('current')
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1), ).setIndexNames((0, "ES4612-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 16), StaPathCostMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1), ).setIndexNames((0, "ES4612-MIB", "xstInstancePortInstance"), (0, "ES4612-MIB", "xstInstancePortPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
xstInstancePortInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: xstInstancePortInstance.setStatus('current')
xstInstancePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: xstInstancePortPort.setStatus('current')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
xstInstancePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPathCost.setStatus('current')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
mstInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6), )
if mibBuilder.loadTexts: mstInstanceEditTable.setStatus('current')
mstInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1), ).setIndexNames((0, "ES4612-MIB", "mstInstanceEditIndex"))
if mibBuilder.loadTexts: mstInstanceEditEntry.setStatus('current')
mstInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceEditIndex.setStatus('current')
mstInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setStatus('current')
mstInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setStatus('current')
mstInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setStatus('current')
mstInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setStatus('current')
mstInstanceEditRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setStatus('current')
mstInstanceOperTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7), )
if mibBuilder.loadTexts: mstInstanceOperTable.setStatus('current')
mstInstanceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1), ).setIndexNames((0, "ES4612-MIB", "mstInstanceOperIndex"))
if mibBuilder.loadTexts: mstInstanceOperEntry.setStatus('current')
mstInstanceOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceOperIndex.setStatus('current')
mstInstanceOperVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setStatus('current')
mstInstanceOperVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setStatus('current')
mstInstanceOperVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setStatus('current')
mstInstanceOperVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setStatus('current')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1), ).setIndexNames((0, "ES4612-MIB", "mirrorDestinationPort"), (0, "ES4612-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "ES4612-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
igmpSnoopMulticastCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setStatus('current')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "ES4612-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
iPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16), )
if mibBuilder.loadTexts: iPAddrTable.setStatus('current')
iPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1), ).setIndexNames((0, "ES4612-MIB", "iPAddrIPAddress"), (0, "ES4612-MIB", "iPAddrSubnetMask"))
if mibBuilder.loadTexts: iPAddrEntry.setStatus('current')
iPAddrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 1), IpAddress())
if mibBuilder.loadTexts: iPAddrIPAddress.setStatus('current')
iPAddrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 2), IpAddress())
if mibBuilder.loadTexts: iPAddrSubnetMask.setStatus('current')
iPAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrIfIndex.setStatus('current')
iPAddrPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrPrimaryInterface.setStatus('current')
iPAddrUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPAddrUnnumbered.setStatus('current')
iPAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrStatus.setStatus('current')
dhcpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11))
dhcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1))
dhcpcOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1))
dhcpcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1), )
if mibBuilder.loadTexts: dhcpcInterfaceTable.setStatus('current')
dhcpcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpcIfIndex"))
if mibBuilder.loadTexts: dhcpcInterfaceEntry.setStatus('current')
dhcpcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpcIfIndex.setStatus('current')
dhcpcIfClientIdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("text", 2), ("hex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfClientIdMode.setStatus('current')
dhcpcIfClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfClientId.setStatus('current')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2))
dhcpRelayServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2), )
if mibBuilder.loadTexts: dhcpRelayServerAddrTable.setStatus('current')
dhcpRelayServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpRelayServerAddrIfIndex"), (0, "ES4612-MIB", "dhcpRelayServerAddrIndex"))
if mibBuilder.loadTexts: dhcpRelayServerAddrEntry.setStatus('current')
dhcpRelayServerAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpRelayServerAddrIfIndex.setStatus('current')
dhcpRelayServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: dhcpRelayServerAddrIndex.setStatus('current')
dhcpRelayServerAddrServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerAddrServerIp.setStatus('current')
dhcpRelayRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayRestart.setStatus('current')
dhcpServerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3))
dhcpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1), )
if mibBuilder.loadTexts: dhcpPoolTable.setStatus('current')
dhcpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolPoolName"))
if mibBuilder.loadTexts: dhcpPoolEntry.setStatus('current')
dhcpPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolPoolName.setStatus('current')
dhcpPoolPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("netWork", 2), ("host", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolPoolType.setStatus('current')
dhcpPoolPoolAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolPoolAddress.setStatus('current')
dhcpPoolSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolSubnetMask.setStatus('current')
dhcpPoolHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSpecify", 1), ("ethernet", 2), ("ieee802", 3), ("fddi", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolHardwareType.setStatus('current')
dhcpPoolMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMacAddress.setStatus('current')
dhcpPoolstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 7), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolstatus.setStatus('current')
dhcpPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2), )
if mibBuilder.loadTexts: dhcpPoolOptionTable.setStatus('current')
dhcpPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptionPoolName"))
if mibBuilder.loadTexts: dhcpPoolOptionEntry.setStatus('current')
dhcpPoolOptionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptionPoolName.setStatus('current')
dhcpPoolOptionNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionNextServer.setStatus('current')
dhcpPoolOptionNetbiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("b-node", 2), ("p-node", 3), ("m-node", 4), ("h-node", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionNetbiosNodeType.setStatus('current')
dhcpPoolOptionDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionDomainName.setStatus('current')
dhcpPoolOptionBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionBootFile.setStatus('current')
dhcpPoolOptionLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionLeaseTime.setStatus('current')
dhcpPoolOptionCidMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("text", 2), ("hex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionCidMode.setStatus('current')
dhcpPoolOptionCidBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionCidBuffer.setStatus('current')
dhcpPoolOptionDnsSerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3), )
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerTable.setStatus('current')
dhcpPoolOptionDnsSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptionDnsSerPoolName"), (0, "ES4612-MIB", "dhcpPoolOptionDnsSerIndex"))
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerEntry.setStatus('current')
dhcpPoolOptionDnsSerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerPoolName.setStatus('current')
dhcpPoolOptionDnsSerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerIndex.setStatus('current')
dhcpPoolOptionDnsSerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerIpAddress.setStatus('current')
dhcpPoolOptDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4), )
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterTable.setStatus('current')
dhcpPoolOptDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptDefaultRouterPoolName"), (0, "ES4612-MIB", "dhcpPoolOptDefaultRouterIndex"))
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterEntry.setStatus('current')
dhcpPoolOptDefaultRouterPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterPoolName.setStatus('current')
dhcpPoolOptDefaultRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterIndex.setStatus('current')
dhcpPoolOptDefaultRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterIpAddress.setStatus('current')
dhcpPoolOptNetbiosServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5), )
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerTable.setStatus('current')
dhcpPoolOptNetbiosServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptNetbiosServerPoolName"), (0, "ES4612-MIB", "dhcpPoolOptNetbiosServerIndex"))
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerEntry.setStatus('current')
dhcpPoolOptNetbiosServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerPoolName.setStatus('current')
dhcpPoolOptNetbiosServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerIndex.setStatus('current')
dhcpPoolOptNetbiosServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerIpAddress.setStatus('current')
dhcpServerExcludedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6), )
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrTable.setStatus('current')
dhcpServerExcludedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpServerExcludedIpAddrLowIp"), (0, "ES4612-MIB", "dhcpServerExcludedIpAddrHiIp"))
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrEntry.setStatus('current')
dhcpServerExcludedIpAddrLowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrLowIp.setStatus('current')
dhcpServerExcludedIpAddrHiIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrHiIp.setStatus('current')
dhcpServerExcludedIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrStatus.setStatus('current')
dhcpServerLeaseBindingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7), )
if mibBuilder.loadTexts: dhcpServerLeaseBindingTable.setStatus('current')
dhcpServerLeaseBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpServerLeaseBindingIp"))
if mibBuilder.loadTexts: dhcpServerLeaseBindingEntry.setStatus('current')
dhcpServerLeaseBindingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpServerLeaseBindingIp.setStatus('current')
dhcpServerLeaseBindingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingMac.setStatus('current')
dhcpServerLeaseBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingLeaseTime.setStatus('current')
dhcpServerLeaseBindingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingStartTime.setStatus('current')
dhcpServerLeaseBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 5), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerLeaseBindingStatus.setStatus('current')
dhcpServerServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerServiceStatus.setStatus('current')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1), ).setIndexNames((0, "ES4612-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
bcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pkt-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormSampleType.setStatus('current')
bcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPktRate.setStatus('current')
bcastStormOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRate.setStatus('current')
bcastStormPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPercent.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1, 1), ).setIndexNames((0, "ES4612-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2, 1), ).setIndexNames((0, "ES4612-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
prioIpPrecDscpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("precedence", 2), ("dscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setStatus('current')
prioIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2), )
if mibBuilder.loadTexts: prioIpPrecTable.setStatus('current')
prioIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1), ).setIndexNames((0, "ES4612-MIB", "prioIpPrecPort"), (0, "ES4612-MIB", "prioIpPrecValue"))
if mibBuilder.loadTexts: prioIpPrecEntry.setStatus('current')
prioIpPrecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpPrecPort.setStatus('current')
prioIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpPrecValue.setStatus('current')
prioIpPrecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecCos.setStatus('current')
prioIpPrecRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setStatus('current')
prioIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4), )
if mibBuilder.loadTexts: prioIpDscpTable.setStatus('current')
prioIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1), ).setIndexNames((0, "ES4612-MIB", "prioIpDscpPort"), (0, "ES4612-MIB", "prioIpDscpValue"))
if mibBuilder.loadTexts: prioIpDscpEntry.setStatus('current')
prioIpDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpDscpPort.setStatus('current')
prioIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioIpDscpValue.setStatus('current')
prioIpDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpCos.setStatus('current')
prioIpDscpRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setStatus('current')
prioIpPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPortEnableStatus.setStatus('current')
prioIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7), )
if mibBuilder.loadTexts: prioIpPortTable.setStatus('current')
prioIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1), ).setIndexNames((0, "ES4612-MIB", "prioIpPortPhysPort"), (0, "ES4612-MIB", "prioIpPortValue"))
if mibBuilder.loadTexts: prioIpPortEntry.setStatus('current')
prioIpPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpPortPhysPort.setStatus('current')
prioIpPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prioIpPortValue.setStatus('current')
prioIpPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortCos.setStatus('current')
prioIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortStatus.setStatus('current')
prioCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8))
prioCopyIpPrec = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPrec.setStatus('current')
prioCopyIpDscp = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpDscp.setStatus('current')
prioCopyIpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPort.setStatus('current')
prioQueueMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueMode.setStatus('current')
prioWrrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12), )
if mibBuilder.loadTexts: prioWrrPortTable.setStatus('current')
prioWrrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1), ).setIndexNames((0, "ES4612-MIB", "prioWrrPortIfIndex"), (0, "ES4612-MIB", "prioWrrPortTrafficClass"))
if mibBuilder.loadTexts: prioWrrPortEntry.setStatus('current')
prioWrrPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: prioWrrPortIfIndex.setStatus('current')
prioWrrPortTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setStatus('current')
prioWrrPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrPortWeight.setStatus('current')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1), ).setIndexNames((0, "ES4612-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
trapDestUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestUdpPort.setStatus('current')
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6))
aclMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9))
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
radiusServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPortNumber.setStatus('current')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
tacacsServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerAddress.setStatus('current')
tacacsServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerPortNumber.setStatus('current')
tacacsServerKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerKey.setStatus('current')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1), ).setIndexNames((0, "ES4612-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sshConnID.setStatus('current')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
sshConnEncryptionTypeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setStatus('current')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
sshRsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey1.setStatus('current')
sshRsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey2.setStatus('current')
sshRsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey3.setStatus('current')
sshRsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey4.setStatus('current')
sshRsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey5.setStatus('current')
sshRsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey6.setStatus('current')
sshRsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey7.setStatus('current')
sshRsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey8.setStatus('current')
sshDsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey1.setStatus('current')
sshDsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey2.setStatus('current')
sshDsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey3.setStatus('current')
sshDsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey4.setStatus('current')
sshDsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey5.setStatus('current')
sshDsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey6.setStatus('current')
sshDsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey7.setStatus('current')
sshDsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey8.setStatus('current')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
sshHostKeyGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeyGenStatus.setStatus('current')
sshHostKeySaveAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeySaveAction.setStatus('current')
sshHostKeySaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeySaveStatus.setStatus('current')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
sshUserTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29), )
if mibBuilder.loadTexts: sshUserTable.setStatus('current')
sshUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1), ).setIndexNames((1, "ES4612-MIB", "sshUserName"))
if mibBuilder.loadTexts: sshUserEntry.setStatus('current')
sshUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: sshUserName.setStatus('current')
sshUserRsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey1.setStatus('current')
sshUserRsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey2.setStatus('current')
sshUserRsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey3.setStatus('current')
sshUserRsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey4.setStatus('current')
sshUserRsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey5.setStatus('current')
sshUserRsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey6.setStatus('current')
sshUserRsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey7.setStatus('current')
sshUserRsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey8.setStatus('current')
sshUserDsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey1.setStatus('current')
sshUserDsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey2.setStatus('current')
sshUserDsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey3.setStatus('current')
sshUserDsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey4.setStatus('current')
sshUserDsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey5.setStatus('current')
sshUserDsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey6.setStatus('current')
sshUserDsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey7.setStatus('current')
sshUserDsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey8.setStatus('current')
sshUserKeyDelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserKeyDelAction.setStatus('current')
aclIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1), )
if mibBuilder.loadTexts: aclIpAceTable.setStatus('current')
aclIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1), ).setIndexNames((0, "ES4612-MIB", "aclIpAceName"), (0, "ES4612-MIB", "aclIpAceIndex"))
if mibBuilder.loadTexts: aclIpAceEntry.setStatus('current')
aclIpAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclIpAceName.setStatus('current')
aclIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclIpAceIndex.setStatus('current')
aclIpAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpAcePrecedence.setStatus('current')
aclIpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceAction.setStatus('current')
aclIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setStatus('current')
aclIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setStatus('current')
aclIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setStatus('current')
aclIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setStatus('current')
aclIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceProtocol.setStatus('current')
aclIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAcePrec.setStatus('current')
aclIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceTos.setStatus('current')
aclIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDscp.setStatus('current')
aclIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setStatus('current')
aclIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setStatus('current')
aclIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setStatus('current')
aclIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortBitmask.setStatus('current')
aclIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortOp.setStatus('current')
aclIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinDestPort.setStatus('current')
aclIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setStatus('current')
aclIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortBitmask.setStatus('current')
aclIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCode.setStatus('current')
aclIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setStatus('current')
aclIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceStatus.setStatus('current')
aclMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2), )
if mibBuilder.loadTexts: aclMacAceTable.setStatus('current')
aclMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1), ).setIndexNames((0, "ES4612-MIB", "aclMacAceName"), (0, "ES4612-MIB", "aclMacAceIndex"))
if mibBuilder.loadTexts: aclMacAceEntry.setStatus('current')
aclMacAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclMacAceName.setStatus('current')
aclMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclMacAceIndex.setStatus('current')
aclMacAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacAcePrecedence.setStatus('current')
aclMacAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceAction.setStatus('current')
aclMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAcePktformat.setStatus('current')
aclMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setStatus('current')
aclMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setStatus('current')
aclMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setStatus('current')
aclMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setStatus('current')
aclMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidOp.setStatus('current')
aclMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinVid.setStatus('current')
aclMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidBitmask.setStatus('current')
aclMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxVid.setStatus('current')
aclMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setStatus('current')
aclMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeBitmask.setStatus('current')
aclMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinEtherType.setStatus('current')
aclMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setStatus('current')
aclMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceStatus.setStatus('current')
aclAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3), )
if mibBuilder.loadTexts: aclAclGroupTable.setStatus('current')
aclAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1), ).setIndexNames((0, "ES4612-MIB", "aclAclGroupIfIndex"))
if mibBuilder.loadTexts: aclAclGroupEntry.setStatus('current')
aclAclGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclAclGroupIfIndex.setStatus('current')
aclAclGroupIngressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setStatus('current')
aclAclGroupEgressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setStatus('current')
aclAclGroupIngressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setStatus('current')
aclAclGroupEgressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setStatus('current')
aclIngressIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4), )
if mibBuilder.loadTexts: aclIngressIpMaskTable.setStatus('current')
aclIngressIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1), ).setIndexNames((0, "ES4612-MIB", "aclIngressIpMaskIndex"))
if mibBuilder.loadTexts: aclIngressIpMaskEntry.setStatus('current')
aclIngressIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclIngressIpMaskIndex.setStatus('current')
aclIngressIpMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIngressIpMaskPrecedence.setStatus('current')
aclIngressIpMaskIsEnableTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableTos.setStatus('current')
aclIngressIpMaskIsEnableDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableDscp.setStatus('current')
aclIngressIpMaskIsEnablePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnablePrecedence.setStatus('current')
aclIngressIpMaskIsEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableProtocol.setStatus('current')
aclIngressIpMaskSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskSourceIpAddrBitmask.setStatus('current')
aclIngressIpMaskDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskDestIpAddrBitmask.setStatus('current')
aclIngressIpMaskSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskSourcePortBitmask.setStatus('current')
aclIngressIpMaskDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskDestPortBitmask.setStatus('current')
aclIngressIpMaskControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskControlCodeBitmask.setStatus('current')
aclIngressIpMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskStatus.setStatus('current')
aclEgressIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5), )
if mibBuilder.loadTexts: aclEgressIpMaskTable.setStatus('current')
aclEgressIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1), ).setIndexNames((0, "ES4612-MIB", "aclEgressIpMaskIndex"))
if mibBuilder.loadTexts: aclEgressIpMaskEntry.setStatus('current')
aclEgressIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclEgressIpMaskIndex.setStatus('current')
aclEgressIpMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEgressIpMaskPrecedence.setStatus('current')
aclEgressIpMaskIsEnableTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableTos.setStatus('current')
aclEgressIpMaskIsEnableDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableDscp.setStatus('current')
aclEgressIpMaskIsEnablePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnablePrecedence.setStatus('current')
aclEgressIpMaskIsEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableProtocol.setStatus('current')
aclEgressIpMaskSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskSourceIpAddrBitmask.setStatus('current')
aclEgressIpMaskDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskDestIpAddrBitmask.setStatus('current')
aclEgressIpMaskSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskSourcePortBitmask.setStatus('current')
aclEgressIpMaskDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskDestPortBitmask.setStatus('current')
aclEgressIpMaskControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskControlCodeBitmask.setStatus('current')
aclEgressIpMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskStatus.setStatus('current')
aclIngressMacMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6), )
if mibBuilder.loadTexts: aclIngressMacMaskTable.setStatus('current')
aclIngressMacMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1), ).setIndexNames((0, "ES4612-MIB", "aclIngressMacMaskIndex"))
if mibBuilder.loadTexts: aclIngressMacMaskEntry.setStatus('current')
aclIngressMacMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclIngressMacMaskIndex.setStatus('current')
aclIngressMacMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIngressMacMaskPrecedence.setStatus('current')
aclIngressMacMaskSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskSourceMacAddrBitmask.setStatus('current')
aclIngressMacMaskDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskDestMacAddrBitmask.setStatus('current')
aclIngressMacMaskVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskVidBitmask.setStatus('current')
aclIngressMacMaskEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskEtherTypeBitmask.setStatus('current')
aclIngressMacMaskIsEnablePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskIsEnablePktformat.setStatus('current')
aclIngressMacMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskStatus.setStatus('current')
aclEgressMacMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7), )
if mibBuilder.loadTexts: aclEgressMacMaskTable.setStatus('current')
aclEgressMacMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1), ).setIndexNames((0, "ES4612-MIB", "aclEgressMacMaskIndex"))
if mibBuilder.loadTexts: aclEgressMacMaskEntry.setStatus('current')
aclEgressMacMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclEgressMacMaskIndex.setStatus('current')
aclEgressMacMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEgressMacMaskPrecedence.setStatus('current')
aclEgressMacMaskSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskSourceMacAddrBitmask.setStatus('current')
aclEgressMacMaskDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskDestMacAddrBitmask.setStatus('current')
aclEgressMacMaskVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskVidBitmask.setStatus('current')
aclEgressMacMaskEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskEtherTypeBitmask.setStatus('current')
aclEgressMacMaskIsEnablePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskIsEnablePktformat.setStatus('current')
aclEgressMacMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskStatus.setStatus('current')
ipFilterSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1), )
if mibBuilder.loadTexts: ipFilterSnmpTable.setStatus('current')
ipFilterSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1), ).setIndexNames((0, "ES4612-MIB", "ipFilterSnmpStartAddress"))
if mibBuilder.loadTexts: ipFilterSnmpEntry.setStatus('current')
ipFilterSnmpStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpStartAddress.setStatus('current')
ipFilterSnmpEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpEndAddress.setStatus('current')
ipFilterSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpStatus.setStatus('current')
ipFilterHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2), )
if mibBuilder.loadTexts: ipFilterHTTPTable.setStatus('current')
ipFilterHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1), ).setIndexNames((0, "ES4612-MIB", "ipFilterHTTPStartAddress"))
if mibBuilder.loadTexts: ipFilterHTTPEntry.setStatus('current')
ipFilterHTTPStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPStartAddress.setStatus('current')
ipFilterHTTPEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPEndAddress.setStatus('current')
ipFilterHTTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPStatus.setStatus('current')
ipFilterTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3), )
if mibBuilder.loadTexts: ipFilterTelnetTable.setStatus('current')
ipFilterTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1), ).setIndexNames((0, "ES4612-MIB", "ipFilterTelnetStartAddress"))
if mibBuilder.loadTexts: ipFilterTelnetEntry.setStatus('current')
ipFilterTelnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetStartAddress.setStatus('current')
ipFilterTelnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetEndAddress.setStatus('current')
ipFilterTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetStatus.setStatus('current')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4, 1), ).setIndexNames((0, "ES4612-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
smtpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('current')
smtpSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSeverityLevel.setStatus('current')
smtpSourceEMail = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSourceEMail.setStatus('current')
smtpServerIpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4), )
if mibBuilder.loadTexts: smtpServerIpTable.setStatus('current')
smtpServerIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4, 1), ).setIndexNames((0, "ES4612-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: smtpServerIpEntry.setStatus('current')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
smtpServerIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpServerIpStatus.setStatus('current')
smtpDestEMailTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5), )
if mibBuilder.loadTexts: smtpDestEMailTable.setStatus('current')
smtpDestEMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5, 1), ).setIndexNames((0, "ES4612-MIB", "smtpDestEMail"))
if mibBuilder.loadTexts: smtpDestEMailEntry.setStatus('current')
smtpDestEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41)))
if mibBuilder.loadTexts: smtpDestEMail.setStatus('current')
smtpDestEMailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpDestEMailStatus.setStatus('current')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
consoleAdminBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleAdminBaudRate.setStatus('current')
consoleOperBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleOperBaudRate.setStatus('current')
telnetExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetExecTimeout.setStatus('current')
telnetPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPasswordThreshold.setStatus('current')
telnetStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 4), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetStatus.setStatus('current')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1))
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1), ).setIndexNames((0, "ES4612-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
rlPortInputLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLimit.setStatus('current')
rlPortOutputLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLimit.setStatus('current')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
markerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2))
markerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1), )
if mibBuilder.loadTexts: markerTable.setStatus('current')
markerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "markerIfIndex"), (0, "ES4612-MIB", "markerAclName"))
if mibBuilder.loadTexts: markerEntry.setStatus('current')
markerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: markerIfIndex.setStatus('current')
markerAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: markerAclName.setStatus('current')
markerActionBitList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("dscp", 0), ("precedence", 1), ("priority", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerActionBitList.setStatus('current')
markerDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerDscp.setStatus('current')
markerPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerPrecedence.setStatus('current')
markerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerPriority.setStatus('current')
markerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerStatus.setStatus('current')
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3))
prioAclToCosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1), )
if mibBuilder.loadTexts: prioAclToCosMappingTable.setStatus('current')
prioAclToCosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1), ).setIndexNames((0, "ES4612-MIB", "prioAclToCosMappingIfIndex"), (0, "ES4612-MIB", "prioAclToCosMappingAclName"))
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setStatus('current')
prioAclToCosMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setStatus('current')
prioAclToCosMappingAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setStatus('current')
prioAclToCosMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setStatus('current')
prioAclToCosMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setStatus('current')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4, 1), ).setIndexNames((0, "ES4612-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
sntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('current')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
fileCopyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyTftpServer.setStatus('current')
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
fileCopyTftpErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setStatus('current')
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2))
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "fileInfoUnitID"), (1, "ES4612-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
dnsDomainLookup = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainLookup.setStatus('current')
dnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainName.setStatus('current')
dnsHostTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3), )
if mibBuilder.loadTexts: dnsHostTable.setStatus('current')
dnsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1), ).setIndexNames((0, "ES4612-MIB", "dnsHostName"), (0, "ES4612-MIB", "dnsHostIndex"))
if mibBuilder.loadTexts: dnsHostEntry.setStatus('current')
dnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsHostName.setStatus('current')
dnsHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dnsHostIndex.setStatus('current')
dnsHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsHostIp.setStatus('current')
dnsAliasTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4), )
if mibBuilder.loadTexts: dnsAliasTable.setStatus('current')
dnsAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4, 1), ).setIndexNames((0, "ES4612-MIB", "dnsAliasName"), (0, "ES4612-MIB", "dnaAliasAlias"))
if mibBuilder.loadTexts: dnsAliasEntry.setStatus('current')
dnsAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAliasName.setStatus('current')
dnaAliasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnaAliasAlias.setStatus('current')
dnsDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5), )
if mibBuilder.loadTexts: dnsDomainListTable.setStatus('current')
dnsDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5, 1), ).setIndexNames((0, "ES4612-MIB", "dnsDomainListName"))
if mibBuilder.loadTexts: dnsDomainListEntry.setStatus('current')
dnsDomainListName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsDomainListName.setStatus('current')
dnsDomainListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsDomainListStatus.setStatus('current')
dnsNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6), )
if mibBuilder.loadTexts: dnsNameServerTable.setStatus('current')
dnsNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6, 1), ).setIndexNames((0, "ES4612-MIB", "dnsNameServerIp"))
if mibBuilder.loadTexts: dnsNameServerEntry.setStatus('current')
dnsNameServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dnsNameServerIp.setStatus('current')
dnsNameServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsNameServerStatus.setStatus('current')
dnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7), )
if mibBuilder.loadTexts: dnsCacheTable.setStatus('current')
dnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1), ).setIndexNames((0, "ES4612-MIB", "dnsCacheIndex"))
if mibBuilder.loadTexts: dnsCacheEntry.setStatus('current')
dnsCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: dnsCacheIndex.setStatus('current')
dnsCacheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheFlag.setStatus('current')
dnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("address", 1), ("cname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheType.setStatus('current')
dnsCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheIp.setStatus('current')
dnsCacheTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 876000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheTtl.setStatus('current')
dnsCacheDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheDomain.setStatus('current')
arpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1))
ripMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2))
ospfMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3))
dvmrpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4))
routeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5))
arpCacheDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("noDelete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheDeleteAll.setStatus('current')
arpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheTimeout.setStatus('current')
arpTrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3))
arpStatSendRequestPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatSendRequestPackets.setStatus('current')
arpStatRcvRequestPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatRcvRequestPackets.setStatus('current')
arpStatSendReplyPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatSendReplyPackets.setStatus('current')
arpStatRcvReplyPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatRcvReplyPackets.setStatus('current')
arpProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4), )
if mibBuilder.loadTexts: arpProxyArpTable.setStatus('current')
arpProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4, 1), ).setIndexNames((0, "ES4612-MIB", "arpProxyArpIfIndex"))
if mibBuilder.loadTexts: arpProxyArpEntry.setStatus('current')
arpProxyArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: arpProxyArpIfIndex.setStatus('current')
arpProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpProxyArpStatus.setStatus('current')
ripTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1))
ripUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripUpdateTime.setStatus('current')
ripTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 360)).clone(180)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTimeoutTime.setStatus('current')
ripGarbageCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 240)).clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripGarbageCollectionTime.setStatus('current')
ripRoutingProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRoutingProcessStatus.setStatus('current')
ripRouterVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byInterface", 1), ("rip1", 2), ("rip2", 3))).clone('rip2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRouterVersion.setStatus('current')
ripInstabilityPreventingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4), )
if mibBuilder.loadTexts: ripInstabilityPreventingTable.setStatus('current')
ripInstabilityPreventingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4, 1), ).setIndexNames((0, "ES4612-MIB", "ripVlanIndex"))
if mibBuilder.loadTexts: ripInstabilityPreventingEntry.setStatus('current')
ripVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: ripVlanIndex.setStatus('current')
ripSplitHorizonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("splitHorizon", 1), ("poisonReverse", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSplitHorizonStatus.setStatus('current')
ripStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripStatisticsReset.setStatus('current')
ripNetworkAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6), )
if mibBuilder.loadTexts: ripNetworkAddrTable.setStatus('current')
ripNetworkAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6, 1), ).setIndexNames((0, "ES4612-MIB", "ripNetworkAddrAddress"))
if mibBuilder.loadTexts: ripNetworkAddrEntry.setStatus('current')
ripNetworkAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: ripNetworkAddrAddress.setStatus('current')
ripNetworkAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNetworkAddrStatus.setStatus('current')
ospfSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1))
ospfRouterIdType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRouterIdType.setStatus('current')
ospfRfc1583CompatibleState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRfc1583CompatibleState.setStatus('current')
ospfAutoCost = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 3), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoCost.setStatus('current')
ospfOriginateDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfOriginateDefaultRoute.setStatus('current')
ospfAdvertiseDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("notAlways", 2))).clone('notAlways')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAdvertiseDefaultRoute.setStatus('current')
ospfExternalMetricType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfExternalMetricType.setStatus('current')
ospfDefaultExternalMetric = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 7), OspfBigMetric().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfDefaultExternalMetric.setStatus('current')
ospfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfHoldTime.setStatus('current')
ospfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfDelayTime.setStatus('current')
ospfAreaNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNumber.setStatus('current')
ospfNssaTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2), )
if mibBuilder.loadTexts: ospfNssaTable.setStatus('current')
ospfNssaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1), ).setIndexNames((0, "ES4612-MIB", "ospfNssaAreaId"))
if mibBuilder.loadTexts: ospfNssaEntry.setStatus('current')
ospfNssaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 1), OspfAreaID())
if mibBuilder.loadTexts: ospfNssaAreaId.setStatus('current')
ospfNssaRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaRedistributeStatus.setStatus('current')
ospfNssaOriginateDefaultInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaOriginateDefaultInfoStatus.setStatus('current')
ospfNssaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaStatus.setStatus('current')
ospfRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3), )
if mibBuilder.loadTexts: ospfRedistributeTable.setStatus('current')
ospfRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1), ).setIndexNames((0, "ES4612-MIB", "ospfRedistributeProtocol"))
if mibBuilder.loadTexts: ospfRedistributeEntry.setStatus('current')
ospfRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rip", 1), ("static", 2), ("connected", 3))))
if mibBuilder.loadTexts: ospfRedistributeProtocol.setStatus('current')
ospfRedistributeMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetricType.setStatus('current')
ospfRedistributeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 3), OspfBigMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetric.setStatus('current')
ospfRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeStatus.setStatus('current')
ospfSummaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4), )
if mibBuilder.loadTexts: ospfSummaryAddressTable.setStatus('current')
ospfSummaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1), ).setIndexNames((0, "ES4612-MIB", "ospfSummaryAddress"), (0, "ES4612-MIB", "ospfSummaryMask"))
if mibBuilder.loadTexts: ospfSummaryAddressEntry.setStatus('current')
ospfSummaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ospfSummaryAddress.setStatus('current')
ospfSummaryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: ospfSummaryMask.setStatus('current')
ospfSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfSummaryStatus.setStatus('current')
ospfNetworkAreaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5), )
if mibBuilder.loadTexts: ospfNetworkAreaAddressTable.setStatus('current')
ospfNetworkAreaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1), ).setIndexNames((0, "ES4612-MIB", "ospfNetworkAareaAddress"), (0, "ES4612-MIB", "ospfNetworkAreaMask"))
if mibBuilder.loadTexts: ospfNetworkAreaAddressEntry.setStatus('current')
ospfNetworkAareaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ospfNetworkAareaAddress.setStatus('current')
ospfNetworkAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: ospfNetworkAreaMask.setStatus('current')
ospfNetworkAreaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNetworkAreaAreaId.setStatus('current')
ospfNetworkAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNetworkAreaStatus.setStatus('current')
dvmrpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1))
dvmrpVersionString = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpVersionString.setStatus('current')
dvmrpNumRoutes = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNumRoutes.setStatus('current')
dvmrpReachableRoutes = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpReachableRoutes.setStatus('current')
dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2), )
if mibBuilder.loadTexts: dvmrpInterfaceTable.setStatus('current')
dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpInterfaceIndex"))
if mibBuilder.loadTexts: dvmrpInterfaceEntry.setStatus('current')
dvmrpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dvmrpInterfaceIndex.setStatus('current')
dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceLocalAddress.setStatus('current')
dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceMetric.setStatus('current')
dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceStatus.setStatus('current')
dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadPkts.setStatus('current')
dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadRoutes.setStatus('current')
dvmrpInterfaceSentRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceSentRoutes.setStatus('current')
dvmrpInterfaceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceKey.setStatus('current')
dvmrpInterfaceKeyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceKeyVersion.setStatus('current')
dvmrpInterfaceGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceGenerationId.setStatus('current')
dvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3), )
if mibBuilder.loadTexts: dvmrpNeighborTable.setStatus('current')
dvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpNeighborIfIndex"), (0, "ES4612-MIB", "dvmrpNeighborAddress"))
if mibBuilder.loadTexts: dvmrpNeighborEntry.setStatus('current')
dvmrpNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dvmrpNeighborIfIndex.setStatus('current')
dvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpNeighborAddress.setStatus('current')
dvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborUpTime.setStatus('current')
dvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborExpiryTime.setStatus('current')
dvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborGenerationId.setStatus('current')
dvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMajorVersion.setStatus('current')
dvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMinorVersion.setStatus('current')
dvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 8), Bits().clone(namedValues=NamedValues(("leaf", 0), ("prune", 1), ("generationID", 2), ("mtrace", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborCapabilities.setStatus('current')
dvmrpNeighborRcvRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvRoutes.setStatus('current')
dvmrpNeighborRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadPkts.setStatus('current')
dvmrpNeighborRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadRoutes.setStatus('current')
dvmrpNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneway", 1), ("active", 2), ("ignoring", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborState.setStatus('current')
dvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4), )
if mibBuilder.loadTexts: dvmrpRouteTable.setStatus('current')
dvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpRouteSource"), (0, "ES4612-MIB", "dvmrpRouteSourceMask"))
if mibBuilder.loadTexts: dvmrpRouteEntry.setStatus('current')
dvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteSource.setStatus('current')
dvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteSourceMask.setStatus('current')
dvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpstreamNeighbor.setStatus('current')
dvmrpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteIfIndex.setStatus('current')
dvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteMetric.setStatus('current')
dvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteExpiryTime.setStatus('current')
dvmrpRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpTime.setStatus('current')
dvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5), )
if mibBuilder.loadTexts: dvmrpRouteNextHopTable.setStatus('current')
dvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpRouteNextHopSource"), (0, "ES4612-MIB", "dvmrpRouteNextHopSourceMask"), (0, "ES4612-MIB", "dvmrpRouteNextHopIfIndex"))
if mibBuilder.loadTexts: dvmrpRouteNextHopEntry.setStatus('current')
dvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteNextHopSource.setStatus('current')
dvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteNextHopSourceMask.setStatus('current')
dvmrpRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: dvmrpRouteNextHopIfIndex.setStatus('current')
dvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopType.setStatus('current')
dvmrpPruneTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6), )
if mibBuilder.loadTexts: dvmrpPruneTable.setStatus('current')
dvmrpPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpPruneGroup"), (0, "ES4612-MIB", "dvmrpPruneSource"), (0, "ES4612-MIB", "dvmrpPruneSourceMask"))
if mibBuilder.loadTexts: dvmrpPruneEntry.setStatus('current')
dvmrpPruneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dvmrpPruneGroup.setStatus('current')
dvmrpPruneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpPruneSource.setStatus('current')
dvmrpPruneSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: dvmrpPruneSourceMask.setStatus('current')
dvmrpPruneExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneExpiryTime.setStatus('current')
ipCidrRouteExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2), )
if mibBuilder.loadTexts: ipCidrRouteExtTable.setStatus('current')
ipCidrRouteExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1), ).setIndexNames((0, "ES4612-MIB", "ipCidrRouteExtDest"), (0, "ES4612-MIB", "ipCidrRouteExtMask"), (0, "ES4612-MIB", "ipCidrRouteExtTos"), (0, "ES4612-MIB", "ipCidrRouteExtNextHop"))
if mibBuilder.loadTexts: ipCidrRouteExtEntry.setStatus('current')
ipCidrRouteExtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipCidrRouteExtDest.setStatus('current')
ipCidrRouteExtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipCidrRouteExtMask.setStatus('current')
ipCidrRouteExtTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: ipCidrRouteExtTos.setStatus('current')
ipCidrRouteExtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: ipCidrRouteExtNextHop.setStatus('current')
ipCidrRouteExtOspfSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ospfInter", 2), ("ospfIntra", 3), ("ospfNssa1", 4), ("ospfNssa2", 5), ("ospfType1", 6), ("ospfType2", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCidrRouteExtOspfSubType.setStatus('current')
cHsrpGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 1))
cHsrpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2))
cHsrpConfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cHsrpConfigTimeout.setStatus('current')
cHsrpGrpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1), )
if mibBuilder.loadTexts: cHsrpGrpTable.setStatus('current')
cHsrpGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ES4612-MIB", "cHsrpGrpNumber"))
if mibBuilder.loadTexts: cHsrpGrpEntry.setStatus('current')
cHsrpGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cHsrpGrpNumber.setStatus('current')
cHsrpGrpAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone('cisco')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpAuth.setStatus('current')
cHsrpGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpPriority.setStatus('current')
cHsrpGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpPreempt.setStatus('current')
cHsrpGrpPreemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpPreemptDelay.setStatus('current')
cHsrpGrpUseConfiguredTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpUseConfiguredTimers.setStatus('current')
cHsrpGrpConfiguredHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 7), Unsigned32().clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpConfiguredHelloTime.setStatus('current')
cHsrpGrpConfiguredHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 8), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpConfiguredHoldTime.setStatus('current')
cHsrpGrpLearnedHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 9), Unsigned32().clone(3000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpLearnedHelloTime.setStatus('current')
cHsrpGrpLearnedHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 10), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpLearnedHoldTime.setStatus('current')
cHsrpGrpVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpVirtualIpAddr.setStatus('current')
cHsrpGrpUseConfigVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpUseConfigVirtualIpAddr.setStatus('current')
cHsrpGrpActiveRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpActiveRouter.setStatus('current')
cHsrpGrpStandbyRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpStandbyRouter.setStatus('current')
cHsrpGrpStandbyState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 15), HsrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpStandbyState.setStatus('current')
cHsrpGrpVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpVirtualMacAddr.setStatus('current')
cHsrpGrpEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpEntryRowStatus.setStatus('current')
cHsrpExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3))
cHsrpExtIfTrackedTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1), )
if mibBuilder.loadTexts: cHsrpExtIfTrackedTable.setStatus('current')
cHsrpExtIfTrackedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ES4612-MIB", "cHsrpGrpNumber"), (0, "ES4612-MIB", "cHsrpExtIfTracked"))
if mibBuilder.loadTexts: cHsrpExtIfTrackedEntry.setStatus('current')
cHsrpExtIfTracked = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cHsrpExtIfTracked.setStatus('current')
cHsrpExtIfTrackedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedPriority.setStatus('current')
cHsrpExtIfTrackedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedRowStatus.setStatus('current')
cHsrpExtSecAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2), )
if mibBuilder.loadTexts: cHsrpExtSecAddrTable.setStatus('current')
cHsrpExtSecAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ES4612-MIB", "cHsrpGrpNumber"), (0, "ES4612-MIB", "cHsrpExtSecAddrAddress"))
if mibBuilder.loadTexts: cHsrpExtSecAddrEntry.setStatus('current')
cHsrpExtSecAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cHsrpExtSecAddrAddress.setStatus('current')
cHsrpExtSecAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtSecAddrRowStatus.setStatus('current')
mvrStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrStatus.setStatus('current')
mvrVlanId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrVlanId.setStatus('current')
mvrMaxGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrMaxGroups.setStatus('current')
mvrCurrentGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrCurrentGroups.setStatus('current')
mvrGroupsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5))
mvrGroupsCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlId.setStatus('current')
mvrGroupsCtlCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlCount.setStatus('current')
mvrGroupsCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlAction.setStatus('current')
mvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6), )
if mibBuilder.loadTexts: mvrGroupTable.setStatus('current')
mvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1), ).setIndexNames((0, "ES4612-MIB", "mvrGroupId"))
if mibBuilder.loadTexts: mvrGroupEntry.setStatus('current')
mvrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupId.setStatus('current')
mvrGroutActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroutActive.setStatus('current')
mvrGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStatus.setStatus('current')
mvrGroupStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7), )
if mibBuilder.loadTexts: mvrGroupStaticTable.setStatus('current')
mvrGroupStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1), ).setIndexNames((0, "ES4612-MIB", "mvrGroupStaticAddress"))
if mibBuilder.loadTexts: mvrGroupStaticEntry.setStatus('current')
mvrGroupStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupStaticAddress.setStatus('current')
mvrGroupStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticPorts.setStatus('current')
mvrGroupStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticStatus.setStatus('current')
mvrGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8), )
if mibBuilder.loadTexts: mvrGroupCurrentTable.setStatus('current')
mvrGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8, 1), ).setIndexNames((0, "ES4612-MIB", "mvrGroupCurrentAddress"))
if mibBuilder.loadTexts: mvrGroupCurrentEntry.setStatus('current')
mvrGroupCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupCurrentAddress.setStatus('current')
mvrGroupCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroupCurrentPorts.setStatus('current')
mvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9), )
if mibBuilder.loadTexts: mvrPortTable.setStatus('current')
mvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1), ).setIndexNames((0, "ES4612-MIB", "mvrIfIndex"))
if mibBuilder.loadTexts: mvrPortEntry.setStatus('current')
mvrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mvrIfIndex.setStatus('current')
mvrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("source", 1), ("receiver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortType.setStatus('current')
mvrPortImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortImmediateLeave.setStatus('current')
mvrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortActive.setStatus('current')
mvrRunningStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrRunningStatus.setStatus('current')
es4612Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1))
es4612TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0))
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 1)).setObjects(("ES4612-MIB", "swIndivPowerUnitIndex"), ("ES4612-MIB", "swIndivPowerIndex"), ("ES4612-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
swFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 17)).setObjects(("ES4612-MIB", "switchUnitIndex"), ("ES4612-MIB", "switchFanIndex"))
if mibBuilder.loadTexts: swFanFailureTrap.setStatus('current')
swFanRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 18)).setObjects(("ES4612-MIB", "switchUnitIndex"), ("ES4612-MIB", "switchFanIndex"))
if mibBuilder.loadTexts: swFanRecoverTrap.setStatus('current')
swPortSecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 36)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swPortSecurityTrap.setStatus('current')
swSmtpConnFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 41)).setObjects(("ES4612-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: swSmtpConnFailureTrap.setStatus('current')
mibBuilder.exportSymbols("ES4612-MIB", portSpeedDpxStatus=portSpeedDpxStatus, ripStatisticsReset=ripStatisticsReset, ospfSpfDelayTime=ospfSpfDelayTime, fileCopyTftpErrMsg=fileCopyTftpErrMsg, ospfSummaryAddress=ospfSummaryAddress, dvmrpRouteTable=dvmrpRouteTable, aclIngressIpMaskPrecedence=aclIngressIpMaskPrecedence, aclEgressMacMaskStatus=aclEgressMacMaskStatus, ipCidrRouteExtTable=ipCidrRouteExtTable, mirrorStatus=mirrorStatus, prioIpPortPhysPort=prioIpPortPhysPort, swSerialNumber=swSerialNumber, ipCidrRouteExtDest=ipCidrRouteExtDest, aclEgressIpMaskPrecedence=aclEgressIpMaskPrecedence, markerMgt=markerMgt, rlPortOutputStatus=rlPortOutputStatus, dvmrpNeighborUpTime=dvmrpNeighborUpTime, tacacsServerKey=tacacsServerKey, trapDestStatus=trapDestStatus, xstInstancePortPriority=xstInstancePortPriority, prioQueueMode=prioQueueMode, aclEgressIpMaskIsEnableDscp=aclEgressIpMaskIsEnableDscp, ipFilterSnmpTable=ipFilterSnmpTable, swHardwareVer=swHardwareVer, aclIpAceSourcePortBitmask=aclIpAceSourcePortBitmask, swSmtpConnFailureTrap=swSmtpConnFailureTrap, dhcpPoolOptDefaultRouterIpAddress=dhcpPoolOptDefaultRouterIpAddress, dvmrpNeighborAddress=dvmrpNeighborAddress, dvmrpRouteNextHopTable=dvmrpRouteNextHopTable, dvmrpPruneSource=dvmrpPruneSource, cHsrpGrpUseConfigVirtualIpAddr=cHsrpGrpUseConfigVirtualIpAddr, ospfNssaOriginateDefaultInfoStatus=ospfNssaOriginateDefaultInfoStatus, vlanIndex=vlanIndex, dvmrpRouteIfIndex=dvmrpRouteIfIndex, dhcpPoolOptionDomainName=dhcpPoolOptionDomainName, aclIngressMacMaskDestMacAddrBitmask=aclIngressMacMaskDestMacAddrBitmask, radiusServerRetransmit=radiusServerRetransmit, portTable=portTable, aclIngressIpMaskIsEnableProtocol=aclIngressIpMaskIsEnableProtocol, aclIngressIpMaskEntry=aclIngressIpMaskEntry, ospfRedistributeProtocol=ospfRedistributeProtocol, dvmrpInterfaceRcvBadRoutes=dvmrpInterfaceRcvBadRoutes, fileCopySrcOperType=fileCopySrcOperType, aclMacAceDestMacAddr=aclMacAceDestMacAddr, sysTimeMgt=sysTimeMgt, fileInfoFileSize=fileInfoFileSize, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, igmpSnoopMulticastCurrentStatus=igmpSnoopMulticastCurrentStatus, mvrGroupCurrentAddress=mvrGroupCurrentAddress, ipFilterSnmpEndAddress=ipFilterSnmpEndAddress, dhcpPoolOptionBootFile=dhcpPoolOptionBootFile, aclIngressMacMaskVidBitmask=aclIngressMacMaskVidBitmask, swFanRecoverTrap=swFanRecoverTrap, switchFanTable=switchFanTable, aclMacAceMinEtherType=aclMacAceMinEtherType, arpProxyArpEntry=arpProxyArpEntry, mstInstanceOperEntry=mstInstanceOperEntry, dvmrpNeighborRcvRoutes=dvmrpNeighborRcvRoutes, dhcpcIfIndex=dhcpcIfIndex, tacacsMgt=tacacsMgt, prioIpPrecCos=prioIpPrecCos, sshDsaHostKey1=sshDsaHostKey1, ripSplitHorizonStatus=ripSplitHorizonStatus, portEntry=portEntry, prioIpPrecPort=prioIpPrecPort, aclIngressMacMaskTable=aclIngressMacMaskTable, aclEgressIpMaskControlCodeBitmask=aclEgressIpMaskControlCodeBitmask, aclIpAceSourcePortOp=aclIpAceSourcePortOp, iPAddrSubnetMask=iPAddrSubnetMask, vlanEntry=vlanEntry, telnetMgt=telnetMgt, arpStatSendRequestPackets=arpStatSendRequestPackets, dhcpPoolMacAddress=dhcpPoolMacAddress, aclMacAceSourceMacAddrBitmask=aclMacAceSourceMacAddrBitmask, aclIpAceTable=aclIpAceTable, prioAclToCosMappingStatus=prioAclToCosMappingStatus, swIdentifier=swIdentifier, staPortIndex=staPortIndex, aclMacAceAction=aclMacAceAction, dhcpPoolOptionPoolName=dhcpPoolOptionPoolName, dhcpPoolOptDefaultRouterEntry=dhcpPoolOptDefaultRouterEntry, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, sshHostKeyDelAction=sshHostKeyDelAction, rateLimitMgt=rateLimitMgt, aclEgressIpMaskDestPortBitmask=aclEgressIpMaskDestPortBitmask, ipCidrRouteExtMask=ipCidrRouteExtMask, dhcpPoolOptionDnsSerPoolName=dhcpPoolOptionDnsSerPoolName, swIndivPowerIndex=swIndivPowerIndex, mstInstanceEditTable=mstInstanceEditTable, aclIpAceTos=aclIpAceTos, ospfSummaryStatus=ospfSummaryStatus, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, ipFilterTelnetEndAddress=ipFilterTelnetEndAddress, cHsrpExtIfTracked=cHsrpExtIfTracked, restartControl=restartControl, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, sshServerMinorVersion=sshServerMinorVersion, smtpMgt=smtpMgt, dvmrpNeighborEntry=dvmrpNeighborEntry, swPortNumber=swPortNumber, sshConnID=sshConnID, PYSNMP_MODULE_ID=es4612MIB, lacpPortIndex=lacpPortIndex, sshMgt=sshMgt, mvrGroupId=mvrGroupId, xstInstancePortPort=xstInstancePortPort, rateLimitPortEntry=rateLimitPortEntry, ipFilterMgt=ipFilterMgt, ipFilterTelnetEntry=ipFilterTelnetEntry, iPAddrUnnumbered=iPAddrUnnumbered, radiusServerTimeout=radiusServerTimeout, ospfNetworkAareaAddress=ospfNetworkAareaAddress, swModelNumber=swModelNumber, swIndivPowerStatus=swIndivPowerStatus, vlanPortTable=vlanPortTable, remoteLogServerStatus=remoteLogServerStatus, trunkStatus=trunkStatus, dnsNameServerTable=dnsNameServerTable, switchIndivPowerEntry=switchIndivPowerEntry, prioIpPortEnableStatus=prioIpPortEnableStatus, sshAuthRetries=sshAuthRetries, sshUserRsaKey4=sshUserRsaKey4, switchFanEntry=switchFanEntry, ripTimers=ripTimers, mirrorSourcePort=mirrorSourcePort, trapDestAddress=trapDestAddress, smtpServerIpEntry=smtpServerIpEntry, cHsrpGroup=cHsrpGroup, prioCopyIpDscp=prioCopyIpDscp, ripInstabilityPreventingEntry=ripInstabilityPreventingEntry, dnsCacheType=dnsCacheType, sysLogMgt=sysLogMgt, prioIpPortEntry=prioIpPortEntry, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, ipMgt=ipMgt, tacacsServerAddress=tacacsServerAddress, markerPriority=markerPriority, arpStatRcvReplyPackets=arpStatRcvReplyPackets, vlanTable=vlanTable, xstInstanceCfgPriority=xstInstanceCfgPriority, trapDestCommunity=trapDestCommunity, sshServerMajorVersion=sshServerMajorVersion, sshConnMinorVersion=sshConnMinorVersion, dhcpServerExcludedIpAddrTable=dhcpServerExcludedIpAddrTable, ipFilterTelnetTable=ipFilterTelnetTable, staPortAdminEdgePort=staPortAdminEdgePort, ospfMgt=ospfMgt, consoleStopBits=consoleStopBits, iPAddrEntry=iPAddrEntry, mvrGroupsCtlId=mvrGroupsCtlId, dhcpPoolOptionCidBuffer=dhcpPoolOptionCidBuffer, layer3Mgt=layer3Mgt, cHsrpGrpPriority=cHsrpGrpPriority, igmpSnoopQueryCount=igmpSnoopQueryCount, switchIndivPowerTable=switchIndivPowerTable, aclIpAceDestPortBitmask=aclIpAceDestPortBitmask, sysCurrentTime=sysCurrentTime, ospfNetworkAreaAddressTable=ospfNetworkAreaAddressTable, dnsCacheDomain=dnsCacheDomain, cosMgt=cosMgt, mvrGroupStatus=mvrGroupStatus, aclEgressIpMaskEntry=aclEgressIpMaskEntry, swExpansionSlot2=swExpansionSlot2, prioIpPrecRestoreDefault=prioIpPrecRestoreDefault, aclEgressMacMaskVidBitmask=aclEgressMacMaskVidBitmask, ipHttpPort=ipHttpPort, securityMgt=securityMgt, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, dhcpPoolTable=dhcpPoolTable, iPAddrPrimaryInterface=iPAddrPrimaryInterface, portSecAction=portSecAction, prioWrrPortTable=prioWrrPortTable, sntpServiceMode=sntpServiceMode, mvrGroutActive=mvrGroutActive, cHsrpExtSecAddrTable=cHsrpExtSecAddrTable, dhcpPoolSubnetMask=dhcpPoolSubnetMask, mstInstanceOperIndex=mstInstanceOperIndex, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, staSystemStatus=staSystemStatus, sshUserKeyDelAction=sshUserKeyDelAction, consolePasswordThreshold=consolePasswordThreshold, arpStatSendReplyPackets=arpStatSendReplyPackets, telnetStatus=telnetStatus, sntpStatus=sntpStatus, dhcpPoolOptionDnsSerIndex=dhcpPoolOptionDnsSerIndex, ripInstabilityPreventingTable=ripInstabilityPreventingTable, ipFilterHTTPStartAddress=ipFilterHTTPStartAddress, dnsDomainLookup=dnsDomainLookup, prioIpDscpCos=prioIpDscpCos, cHsrpExtGroup=cHsrpExtGroup, dvmrpRouteNextHopEntry=dvmrpRouteNextHopEntry, ospfNssaRedistributeStatus=ospfNssaRedistributeStatus, dnsNameServerStatus=dnsNameServerStatus, aclIngressIpMaskDestPortBitmask=aclIngressIpMaskDestPortBitmask, prioIpPrecDscpStatus=prioIpPrecDscpStatus, aclIngressIpMaskStatus=aclIngressIpMaskStatus, ipFilterSnmpStartAddress=ipFilterSnmpStartAddress, iPAddrTable=iPAddrTable, dhcpPoolHardwareType=dhcpPoolHardwareType, fileInfoEntry=fileInfoEntry, dnsDomainListTable=dnsDomainListTable, switchInfoEntry=switchInfoEntry, mvrMgt=mvrMgt, ripMgt=ripMgt, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, ospfSummaryAddressTable=ospfSummaryAddressTable, ipCidrRouteExtNextHop=ipCidrRouteExtNextHop, aclMacAcePrecedence=aclMacAcePrecedence, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, ipHttpsPort=ipHttpsPort, swProdDescription=swProdDescription, dhcpcIfClientIdMode=dhcpcIfClientIdMode, dhcpPoolOptionCidMode=dhcpPoolOptionCidMode, sshHostKeySaveAction=sshHostKeySaveAction, arpTrafficStatistics=arpTrafficStatistics, aclIpAceName=aclIpAceName, fileCopyAction=fileCopyAction, portSecPortTable=portSecPortTable, swOpCodeVer=swOpCodeVer, dhcpPoolstatus=dhcpPoolstatus, xstInstanceCfgRootCost=xstInstanceCfgRootCost, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, rlPortInputLimit=rlPortInputLimit, prioIpDscpEntry=prioIpDscpEntry, sntpPollInterval=sntpPollInterval, sshRsaHostKey2=sshRsaHostKey2, dnsHostTable=dnsHostTable, swBootRomVer=swBootRomVer, swProdName=swProdName, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, consoleParity=consoleParity, sntpMgt=sntpMgt, aclIpAceIndex=aclIpAceIndex, dhcpPoolOptDefaultRouterTable=dhcpPoolOptDefaultRouterTable, fileMgt=fileMgt, aclIpAceControlCodeBitmask=aclIpAceControlCodeBitmask, aclIngressMacMaskEntry=aclIngressMacMaskEntry, swExpansionSlot1=swExpansionSlot1, portSecPortEntry=portSecPortEntry, aclIpAceMaxDestPort=aclIpAceMaxDestPort, mvrGroupStaticStatus=mvrGroupStaticStatus, mstInstanceEditRemainingHops=mstInstanceEditRemainingHops, es4612MIBObjects=es4612MIBObjects, smtpServerIpTable=smtpServerIpTable, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, switchFanStatus=switchFanStatus, sshUserTable=sshUserTable, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, dhcpPoolOptDefaultRouterIndex=dhcpPoolOptDefaultRouterIndex, vlanPortEntry=vlanPortEntry, staPortLongPathCost=staPortLongPathCost, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, ospfNssaStatus=ospfNssaStatus, aclMacAceEtherTypeOp=aclMacAceEtherTypeOp)
mibBuilder.exportSymbols("ES4612-MIB", fileInfoIsStartUp=fileInfoIsStartUp, remoteLogFacilityType=remoteLogFacilityType, sshUserDsaKey4=sshUserDsaKey4, dhcpcIfClientId=dhcpcIfClientId, portCapabilities=portCapabilities, markerIfIndex=markerIfIndex, mvrGroupsCtlAction=mvrGroupsCtlAction, dhcpPoolOptionEntry=dhcpPoolOptionEntry, vlanPortMode=vlanPortMode, swMicrocodeVer=swMicrocodeVer, sshHostKeyGenStatus=sshHostKeyGenStatus, switchFanIndex=switchFanIndex, staMgt=staMgt, fileCopyFileType=fileCopyFileType, staPortOperPointToPoint=staPortOperPointToPoint, sshUserRsaKey7=sshUserRsaKey7, dvmrpRouteNextHopType=dvmrpRouteNextHopType, radiusServerAddress=radiusServerAddress, aclIpAceMinDestPort=aclIpAceMinDestPort, mvrGroupStaticAddress=mvrGroupStaticAddress, dvmrpNeighborIfIndex=dvmrpNeighborIfIndex, dnsAliasTable=dnsAliasTable, bcastStormSampleType=bcastStormSampleType, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, aclEgressIpMaskDestIpAddrBitmask=aclEgressIpMaskDestIpAddrBitmask, sshDsaHostKey3=sshDsaHostKey3, ipCidrRouteExtTos=ipCidrRouteExtTos, aclIngressMacMaskPrecedence=aclIngressMacMaskPrecedence, switchJumboFrameStatus=switchJumboFrameStatus, fileInfoFileType=fileInfoFileType, sshRsaHostKey7=sshRsaHostKey7, markerEntry=markerEntry, dhcpPoolOptNetbiosServerIpAddress=dhcpPoolOptNetbiosServerIpAddress, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, dhcpPoolOptionLeaseTime=dhcpPoolOptionLeaseTime, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, restartConfigFile=restartConfigFile, aclAclGroupIfIndex=aclAclGroupIfIndex, OspfBigMetric=OspfBigMetric, dnsNameServerIp=dnsNameServerIp, prioAclToCosMappingAclName=prioAclToCosMappingAclName, dnsAliasName=dnsAliasName, trapDestVersion=trapDestVersion, dhcpServerLeaseBindingLeaseTime=dhcpServerLeaseBindingLeaseTime, sshConnInfoEntry=sshConnInfoEntry, trunkEntry=trunkEntry, aclIpAceDestIpAddrBitmask=aclIpAceDestIpAddrBitmask, dvmrpPruneEntry=dvmrpPruneEntry, dhcpRelay=dhcpRelay, dhcpPoolOptNetbiosServerPoolName=dhcpPoolOptNetbiosServerPoolName, prioIpDscpValue=prioIpDscpValue, cHsrpGrpTable=cHsrpGrpTable, dnsDomainListEntry=dnsDomainListEntry, aclMacAceMaxEtherType=aclMacAceMaxEtherType, aclMacAceName=aclMacAceName, dhcpPoolOptionNextServer=dhcpPoolOptionNextServer, vlanAddressMethod=vlanAddressMethod, arpMgt=arpMgt, fileCopyMgt=fileCopyMgt, es4612Traps=es4612Traps, dhcpServerMgt=dhcpServerMgt, sshConnStatus=sshConnStatus, aclIngressMacMaskStatus=aclIngressMacMaskStatus, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, xstInstanceCfgIndex=xstInstanceCfgIndex, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, smtpSourceEMail=smtpSourceEMail, ospfNssaAreaId=ospfNssaAreaId, trapDestUdpPort=trapDestUdpPort, prioCopy=prioCopy, fileInfoFileName=fileInfoFileName, dvmrpRouteEntry=dvmrpRouteEntry, dvmrpRouteMetric=dvmrpRouteMetric, bcastStormPercent=bcastStormPercent, portAutonegotiation=portAutonegotiation, cHsrpGrpLearnedHoldTime=cHsrpGrpLearnedHoldTime, fileInfoTable=fileInfoTable, dvmrpInterfaceRcvBadPkts=dvmrpInterfaceRcvBadPkts, cHsrpGrpStandbyState=cHsrpGrpStandbyState, trapDestEntry=trapDestEntry, lineMgt=lineMgt, ripNetworkAddrStatus=ripNetworkAddrStatus, ospfNssaEntry=ospfNssaEntry, mvrGroupStaticEntry=mvrGroupStaticEntry, trunkTable=trunkTable, dvmrpInterfaceEntry=dvmrpInterfaceEntry, staTxHoldCount=staTxHoldCount, dhcpServerExcludedIpAddrHiIp=dhcpServerExcludedIpAddrHiIp, bcastStormIfIndex=bcastStormIfIndex, ospfSummaryMask=ospfSummaryMask, sshUserDsaKey2=sshUserDsaKey2, swServiceTag=swServiceTag, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, swIndivPowerUnitIndex=swIndivPowerUnitIndex, aclIpAcePrecedence=aclIpAcePrecedence, dvmrpNeighborRcvBadRoutes=dvmrpNeighborRcvBadRoutes, markerAclName=markerAclName, cHsrpGrpAuth=cHsrpGrpAuth, swChassisServiceTag=swChassisServiceTag, sshRsaHostKey8=sshRsaHostKey8, dvmrpRouteUpstreamNeighbor=dvmrpRouteUpstreamNeighbor, dnsDomainListStatus=dnsDomainListStatus, prioIpDscpPort=prioIpDscpPort, ospfNetworkAreaAreaId=ospfNetworkAreaAreaId, ipFilterHTTPStatus=ipFilterHTTPStatus, mstInstanceEditVlansMap4k=mstInstanceEditVlansMap4k, swRoleInSystem=swRoleInSystem, portName=portName, aclAclGroupEntry=aclAclGroupEntry, aclAclGroupEgressMacAcl=aclAclGroupEgressMacAcl, switchOperState=switchOperState, arpProxyArpIfIndex=arpProxyArpIfIndex, prioIpDscpTable=prioIpDscpTable, dhcpPoolOptionDnsSerEntry=dhcpPoolOptionDnsSerEntry, aclEgressIpMaskIsEnableProtocol=aclEgressIpMaskIsEnableProtocol, aclIpAceDestPortOp=aclIpAceDestPortOp, aclIngressMacMaskEtherTypeBitmask=aclIngressMacMaskEtherTypeBitmask, smtpServerIpStatus=smtpServerIpStatus, dhcpRelayServerAddrIndex=dhcpRelayServerAddrIndex, cHsrpGrpVirtualIpAddr=cHsrpGrpVirtualIpAddr, fileCopyDestFileName=fileCopyDestFileName, dvmrpPruneSourceMask=dvmrpPruneSourceMask, prioIpPrecValue=prioIpPrecValue, aclIngressIpMaskTable=aclIngressIpMaskTable, dhcpServerLeaseBindingStartTime=dhcpServerLeaseBindingStartTime, dhcpRelayRestart=dhcpRelayRestart, dhcpServerExcludedIpAddrEntry=dhcpServerExcludedIpAddrEntry, bcastStormPktRate=bcastStormPktRate, iPAddrStatus=iPAddrStatus, cHsrpGrpActiveRouter=cHsrpGrpActiveRouter, mvrPortEntry=mvrPortEntry, sshUserDsaKey3=sshUserDsaKey3, cHsrpExtIfTrackedEntry=cHsrpExtIfTrackedEntry, mvrCurrentGroups=mvrCurrentGroups, aclIpAceDscp=aclIpAceDscp, bcastStormStatus=bcastStormStatus, iPAddrIfIndex=iPAddrIfIndex, sshUserDsaKey8=sshUserDsaKey8, ospfAutoCost=ospfAutoCost, smtpStatus=smtpStatus, dhcpcOptions=dhcpcOptions, dhcpMgt=dhcpMgt, dvmrpInterfaceGenerationId=dvmrpInterfaceGenerationId, xstMgt=xstMgt, sshConnMajorVersion=sshConnMajorVersion, prioWrrPortWeight=prioWrrPortWeight, ipHttpsState=ipHttpsState, dnsCacheTable=dnsCacheTable, fileCopyStatus=fileCopyStatus, switchNumber=switchNumber, dnsHostEntry=dnsHostEntry, dvmrpRouteSource=dvmrpRouteSource, dvmrpReachableRoutes=dvmrpReachableRoutes, remoteLogMgt=remoteLogMgt, mirrorTable=mirrorTable, aclEgressMacMaskPrecedence=aclEgressMacMaskPrecedence, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, mstInstanceEditVlansMap=mstInstanceEditVlansMap, aclMacAceTable=aclMacAceTable, consoleExecTimeout=consoleExecTimeout, cHsrpGrpConfiguredHoldTime=cHsrpGrpConfiguredHoldTime, bcastStormEntry=bcastStormEntry, mstInstanceOperVlansMap4k=mstInstanceOperVlansMap4k, ipFilterHTTPEntry=ipFilterHTTPEntry, dnsDomainListName=dnsDomainListName, ripNetworkAddrEntry=ripNetworkAddrEntry, cHsrpGrpStandbyRouter=cHsrpGrpStandbyRouter, mvrMaxGroups=mvrMaxGroups, mvrIfIndex=mvrIfIndex, cHsrpGrpPreemptDelay=cHsrpGrpPreemptDelay, mvrGroupTable=mvrGroupTable, switchManagementVlan=switchManagementVlan, mstInstanceOperVlansMap=mstInstanceOperVlansMap, consoleAdminBaudRate=consoleAdminBaudRate, trunkIndex=trunkIndex, radiusMgt=radiusMgt, portSecPortIndex=portSecPortIndex, rateLimitPortTable=rateLimitPortTable, aclIpAceSourceIpAddrBitmask=aclIpAceSourceIpAddrBitmask, restartMgt=restartMgt, cHsrpGrpVirtualMacAddr=cHsrpGrpVirtualMacAddr, lacpPortTable=lacpPortTable, remoteLogStatus=remoteLogStatus, iPAddrIPAddress=iPAddrIPAddress, prioIpPortValue=prioIpPortValue, ospfNetworkAreaStatus=ospfNetworkAreaStatus, dnaAliasAlias=dnaAliasAlias, dhcpcInterfaceTable=dhcpcInterfaceTable, sshUserDsaKey7=sshUserDsaKey7, aclIpAceMinSourcePort=aclIpAceMinSourcePort, arpProxyArpStatus=arpProxyArpStatus, mvrGroupCurrentPorts=mvrGroupCurrentPorts, swProdVersion=swProdVersion, dnsCacheTtl=dnsCacheTtl, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, fileCopyDestOperType=fileCopyDestOperType, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, OspfAreaID=OspfAreaID, sshRsaHostKey1=sshRsaHostKey1, snmpMgt=snmpMgt, sysTimeZone=sysTimeZone, igmpSnoopStatus=igmpSnoopStatus, ospfOriginateDefaultRoute=ospfOriginateDefaultRoute, cHsrpGrpLearnedHelloTime=cHsrpGrpLearnedHelloTime, swPowerStatusChangeTrap=swPowerStatusChangeTrap, dvmrpRouteUpTime=dvmrpRouteUpTime, aclMacAceMaxVid=aclMacAceMaxVid, aclEgressIpMaskIsEnableTos=aclEgressIpMaskIsEnableTos, prioIpPrecTable=prioIpPrecTable, mstMaxHops=mstMaxHops, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, aclMacAceMinVid=aclMacAceMinVid, dvmrpPruneGroup=dvmrpPruneGroup, sshUserRsaKey1=sshUserRsaKey1, fileInfoDelete=fileInfoDelete, dvmrpInterfaceSentRoutes=dvmrpInterfaceSentRoutes, aclAclGroupTable=aclAclGroupTable, telnetPortNumber=telnetPortNumber, cHsrpExtSecAddrEntry=cHsrpExtSecAddrEntry, aclMacAceIndex=aclMacAceIndex, mstRevision=mstRevision, sshRsaHostKey4=sshRsaHostKey4, mvrGroupsCtl=mvrGroupsCtl, dhcpServerLeaseBindingMac=dhcpServerLeaseBindingMac, sshUserRsaKey3=sshUserRsaKey3, mvrPortTable=mvrPortTable, ospfSystemGroup=ospfSystemGroup, prioAclToCosMappingEntry=prioAclToCosMappingEntry, smtpDestEMailEntry=smtpDestEMailEntry, prioAclToCosMappingIfIndex=prioAclToCosMappingIfIndex, mirrorEntry=mirrorEntry, portType=portType, vlanPortIndex=vlanPortIndex, sshUserEntry=sshUserEntry, sshDisconnect=sshDisconnect, radiusServerKey=radiusServerKey, dnsHostIndex=dnsHostIndex, xstInstancePortEntry=xstInstancePortEntry, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, ospfSummaryAddressEntry=ospfSummaryAddressEntry, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, dhcpServerLeaseBindingStatus=dhcpServerLeaseBindingStatus, prioCopyIpPort=prioCopyIpPort, sshUserRsaKey2=sshUserRsaKey2, sshDsaHostKey6=sshDsaHostKey6, aclAclGroupIngressIpAcl=aclAclGroupIngressIpAcl, markerPrecedence=markerPrecedence, igmpSnoopVersion=igmpSnoopVersion, xstInstancePortEnable=xstInstancePortEnable, staPortFastForward=staPortFastForward, sshUserDsaKey6=sshUserDsaKey6, vlanMgt=vlanMgt, ospfRedistributeEntry=ospfRedistributeEntry)
mibBuilder.exportSymbols("ES4612-MIB", cHsrpGlobalConfig=cHsrpGlobalConfig, ospfRedistributeStatus=ospfRedistributeStatus, markerTable=markerTable, ipCidrRouteExtEntry=ipCidrRouteExtEntry, portSpeedDpxCfg=portSpeedDpxCfg, dvmrpInterfaceTable=dvmrpInterfaceTable, sshTimeout=sshTimeout, rlPortOutputLimit=rlPortOutputLimit, dnsCacheEntry=dnsCacheEntry, cHsrpExtSecAddrRowStatus=cHsrpExtSecAddrRowStatus, prioWrrPortTrafficClass=prioWrrPortTrafficClass, dnsHostName=dnsHostName, mvrPortActive=mvrPortActive, staPathCostMethod=staPathCostMethod, mirrorMgt=mirrorMgt, dnsCacheIp=dnsCacheIp, sntpServerIpAddress=sntpServerIpAddress, ipFilterHTTPTable=ipFilterHTTPTable, aclEgressIpMaskSourceIpAddrBitmask=aclEgressIpMaskSourceIpAddrBitmask, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, aclMgt=aclMgt, ospfNetworkAreaAddressEntry=ospfNetworkAreaAddressEntry, aclEgressIpMaskIsEnablePrecedence=aclEgressIpMaskIsEnablePrecedence, dhcpPoolOptionTable=dhcpPoolOptionTable, arpCacheTimeout=arpCacheTimeout, ipFilterTelnetStartAddress=ipFilterTelnetStartAddress, prioAclToCosMappingTable=prioAclToCosMappingTable, cHsrpGrpEntry=cHsrpGrpEntry, aclAclGroupIngressMacAcl=aclAclGroupIngressMacAcl, dhcpRelayServerAddrServerIp=dhcpRelayServerAddrServerIp, markerActionBitList=markerActionBitList, switchMgt=switchMgt, dvmrpNeighborState=dvmrpNeighborState, aclMacAceEtherTypeBitmask=aclMacAceEtherTypeBitmask, trunkValidNumber=trunkValidNumber, dnsMgt=dnsMgt, prioIpDscpRestoreDefault=prioIpDscpRestoreDefault, lacpMgt=lacpMgt, sshConnEncryptionTypeStr=sshConnEncryptionTypeStr, aclEgressMacMaskSourceMacAddrBitmask=aclEgressMacMaskSourceMacAddrBitmask, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, mvrGroupCurrentTable=mvrGroupCurrentTable, mvrRunningStatus=mvrRunningStatus, ripRoutingProcessStatus=ripRoutingProcessStatus, igmpSnoopMgt=igmpSnoopMgt, sshUserName=sshUserName, smtpServerIp=smtpServerIp, dhcpPoolPoolName=dhcpPoolPoolName, dhcpServerLeaseBindingIp=dhcpServerLeaseBindingIp, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, dnsHostIp=dnsHostIp, aclIngressIpMaskIsEnableTos=aclIngressIpMaskIsEnableTos, cHsrpGrpEntryRowStatus=cHsrpGrpEntryRowStatus, portSecPortStatus=portSecPortStatus, sntpServerIndex=sntpServerIndex, routeMgt=routeMgt, cHsrpGrpNumber=cHsrpGrpNumber, sshHostKeyGenAction=sshHostKeyGenAction, dnsCacheFlag=dnsCacheFlag, dvmrpInterfaceKeyVersion=dvmrpInterfaceKeyVersion, fileInfoCreationTime=fileInfoCreationTime, trunkPorts=trunkPorts, dnsCacheIndex=dnsCacheIndex, mvrGroupCurrentEntry=mvrGroupCurrentEntry, switchUnitIndex=switchUnitIndex, aclEgressMacMaskEtherTypeBitmask=aclEgressMacMaskEtherTypeBitmask, dvmrpNumRoutes=dvmrpNumRoutes, lacpPortEntry=lacpPortEntry, aclIngressMacMaskIsEnablePktformat=aclIngressMacMaskIsEnablePktformat, dhcpServerServiceStatus=dhcpServerServiceStatus, ospfRedistributeMetric=ospfRedistributeMetric, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, sysTimeZoneName=sysTimeZoneName, smtpDestEMail=smtpDestEMail, dvmrpPruneTable=dvmrpPruneTable, dvmrpVersionString=dvmrpVersionString, aclMacAceSourceMacAddr=aclMacAceSourceMacAddr, sysLogHistoryRamLevel=sysLogHistoryRamLevel, es4612TrapsPrefix=es4612TrapsPrefix, staPortSystemStatus=staPortSystemStatus, ospfAdvertiseDefaultRoute=ospfAdvertiseDefaultRoute, dvmrpNeighborMinorVersion=dvmrpNeighborMinorVersion, aclEgressMacMaskEntry=aclEgressMacMaskEntry, cHsrpGrpConfiguredHelloTime=cHsrpGrpConfiguredHelloTime, cHsrpExtSecAddrAddress=cHsrpExtSecAddrAddress, ipFilterTelnetStatus=ipFilterTelnetStatus, smtpDestEMailTable=smtpDestEMailTable, es4612MIBConformance=es4612MIBConformance, trunkMaxId=trunkMaxId, dvmrpRouteNextHopSource=dvmrpRouteNextHopSource, qosMgt=qosMgt, ripVlanIndex=ripVlanIndex, cHsrpConfigTimeout=cHsrpConfigTimeout, aclIngressMacMaskSourceMacAddrBitmask=aclIngressMacMaskSourceMacAddrBitmask, mvrVlanId=mvrVlanId, arpProxyArpTable=arpProxyArpTable, ripNetworkAddrTable=ripNetworkAddrTable, amtrMgt=amtrMgt, dvmrpNeighborExpiryTime=dvmrpNeighborExpiryTime, swUnitIndex=swUnitIndex, aclIngressMacMaskIndex=aclIngressMacMaskIndex, fileCopyTftpServer=fileCopyTftpServer, portFlowCtrlStatus=portFlowCtrlStatus, accton=accton, staPortEntry=staPortEntry, sshDsaHostKey8=sshDsaHostKey8, aclIngressIpMaskIsEnableDscp=aclIngressIpMaskIsEnableDscp, ipDhcpRestart=ipDhcpRestart, sshDsaHostKey2=sshDsaHostKey2, trapDestMgt=trapDestMgt, sshDsaHostKey4=sshDsaHostKey4, sshUserRsaKey5=sshUserRsaKey5, sshUserDsaKey1=sshUserDsaKey1, remoteLogLevel=remoteLogLevel, prioAclToCosMappingCosValue=prioAclToCosMappingCosValue, bcastStormTable=bcastStormTable, ripTimeoutTime=ripTimeoutTime, aclMacAcePktformat=aclMacAcePktformat, portMgt=portMgt, aclIpAceStatus=aclIpAceStatus, staPortAdminPointToPoint=staPortAdminPointToPoint, telnetExecTimeout=telnetExecTimeout, ospfRedistributeMetricType=ospfRedistributeMetricType, ospfNssaTable=ospfNssaTable, ospfExternalMetricType=ospfExternalMetricType, aclIpAceEntry=aclIpAceEntry, remoteLogServerTable=remoteLogServerTable, trunkCreation=trunkCreation, aclIngressIpMaskIndex=aclIngressIpMaskIndex, remoteLogServerIp=remoteLogServerIp, prioWrrPortEntry=prioWrrPortEntry, prioIpPrecEntry=prioIpPrecEntry, mvrPortImmediateLeave=mvrPortImmediateLeave, mirrorDestinationPort=mirrorDestinationPort, ospfRouterIdType=ospfRouterIdType, portSecMaxMacCount=portSecMaxMacCount, xstInstancePortPathCost=xstInstancePortPathCost, staProtocolType=staProtocolType, cHsrpGrpUseConfiguredTimers=cHsrpGrpUseConfiguredTimers, aclMacAceEntry=aclMacAceEntry, dhcpPoolOptionNetbiosNodeType=dhcpPoolOptionNetbiosNodeType, trapDestTable=trapDestTable, ospfRedistributeTable=ospfRedistributeTable, dvmrpInterfaceStatus=dvmrpInterfaceStatus, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, fileInfoMgt=fileInfoMgt, sshConnInfoTable=sshConnInfoTable, ripRouterVersion=ripRouterVersion, dvmrpNeighborGenerationId=dvmrpNeighborGenerationId, trunkMgt=trunkMgt, dhcpPoolOptNetbiosServerTable=dhcpPoolOptNetbiosServerTable, mvrPortType=mvrPortType, aclIpAceSourceIpAddr=aclIpAceSourceIpAddr, aclIpAcePrec=aclIpAcePrec, xstInstanceCfgTable=xstInstanceCfgTable, ripUpdateTime=ripUpdateTime, dhcpRelayServerAddrEntry=dhcpRelayServerAddrEntry, hsrpMgt=hsrpMgt, aclIngressIpMaskSourcePortBitmask=aclIngressIpMaskSourcePortBitmask, staPortOperEdgePort=staPortOperEdgePort, bcastStormOctetRate=bcastStormOctetRate, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, staPortTable=staPortTable, sntpServerEntry=sntpServerEntry, xstInstancePortInstance=xstInstancePortInstance, aclIngressIpMaskSourceIpAddrBitmask=aclIngressIpMaskSourceIpAddrBitmask, markerDscp=markerDscp, ValidStatus=ValidStatus, ospfSpfHoldTime=ospfSpfHoldTime, dvmrpRouteNextHopIfIndex=dvmrpRouteNextHopIfIndex, sysLogStatus=sysLogStatus, swPortSecurityTrap=swPortSecurityTrap, prioWrrPortIfIndex=prioWrrPortIfIndex, cHsrpExtIfTrackedRowStatus=cHsrpExtIfTrackedRowStatus, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, cHsrpExtIfTrackedTable=cHsrpExtIfTrackedTable, cHsrpExtIfTrackedPriority=cHsrpExtIfTrackedPriority, aclIpAceProtocol=aclIpAceProtocol, rlPortIndex=rlPortIndex, dnsDomainName=dnsDomainName, arpStatRcvRequestPackets=arpStatRcvRequestPackets, sshUserRsaKey6=sshUserRsaKey6, xstInstancePortState=xstInstancePortState, swPowerStatus=swPowerStatus, xstInstanceCfgRootPort=xstInstanceCfgRootPort, xstInstancePortPortRole=xstInstancePortPortRole, ipFilterSnmpStatus=ipFilterSnmpStatus, sshRsaHostKey6=sshRsaHostKey6, dhcpPoolOptDefaultRouterPoolName=dhcpPoolOptDefaultRouterPoolName, fileCopySrcFileName=fileCopySrcFileName, aclEgressIpMaskStatus=aclEgressIpMaskStatus, dnsNameServerEntry=dnsNameServerEntry, ospfRfc1583CompatibleState=ospfRfc1583CompatibleState, dhcpClient=dhcpClient, dhcpPoolEntry=dhcpPoolEntry, dvmrpMgt=dvmrpMgt, fileCopyUnitId=fileCopyUnitId, dvmrpNeighborTable=dvmrpNeighborTable, swLoaderVer=swLoaderVer, aclEgressIpMaskSourcePortBitmask=aclEgressIpMaskSourcePortBitmask, dvmrpInterfaceMetric=dvmrpInterfaceMetric, rlPortInputStatus=rlPortInputStatus, portComboForcedMode=portComboForcedMode, aclMacAceVidOp=aclMacAceVidOp, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, sshDsaHostKey5=sshDsaHostKey5, staPortProtocolMigration=staPortProtocolMigration, dvmrpNeighborMajorVersion=dvmrpNeighborMajorVersion, dhcpPoolPoolAddress=dhcpPoolPoolAddress, tacacsServerPortNumber=tacacsServerPortNumber, sshRsaHostKey3=sshRsaHostKey3, mstInstanceEditEntry=mstInstanceEditEntry, mstName=mstName, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, sshUserRsaKey8=sshUserRsaKey8, ipFilterSnmpEntry=ipFilterSnmpEntry, consoleMgt=consoleMgt, StaPathCostMode=StaPathCostMode, priorityMgt=priorityMgt, sshHostKeySaveStatus=sshHostKeySaveStatus, sshUserDsaKey5=sshUserDsaKey5, smtpSeverityLevel=smtpSeverityLevel, HsrpState=HsrpState, aclIpAceMaxSourcePort=aclIpAceMaxSourcePort, cHsrpGrpPreempt=cHsrpGrpPreempt, mstInstanceEditVlansMap3k=mstInstanceEditVlansMap3k, dhcpRelayServerAddrTable=dhcpRelayServerAddrTable, swProdUrl=swProdUrl, lacpPortStatus=lacpPortStatus, ipCidrRouteExtOspfSubType=ipCidrRouteExtOspfSubType, mvrGroupStaticPorts=mvrGroupStaticPorts, prioIpPortStatus=prioIpPortStatus, dvmrpInterfaceIndex=dvmrpInterfaceIndex, aclAclGroupEgressIpAcl=aclAclGroupEgressIpAcl, ipHttpState=ipHttpState, cheetahSwitchMgt=cheetahSwitchMgt, xstInstancePortTable=xstInstancePortTable, dhcpPoolPoolType=dhcpPoolPoolType, ospfAreaNumber=ospfAreaNumber, consoleOperBaudRate=consoleOperBaudRate, xstInstanceCfgEntry=xstInstanceCfgEntry, mstInstanceOperTable=mstInstanceOperTable, dhcpServerLeaseBindingEntry=dhcpServerLeaseBindingEntry, dvmrpInterfaceKey=dvmrpInterfaceKey, dhcpServerLeaseBindingTable=dhcpServerLeaseBindingTable, mvrGroupEntry=mvrGroupEntry, dhcpServerExcludedIpAddrStatus=dhcpServerExcludedIpAddrStatus, radiusServerPortNumber=radiusServerPortNumber, sshConnUserName=sshConnUserName, dvmrpPruneExpiryTime=dvmrpPruneExpiryTime, aclEgressMacMaskIsEnablePktformat=aclEgressMacMaskIsEnablePktformat, arpCacheDeleteAll=arpCacheDeleteAll, mstInstanceOperVlansMap3k=mstInstanceOperVlansMap3k, dhcpServerExcludedIpAddrLowIp=dhcpServerExcludedIpAddrLowIp)
mibBuilder.exportSymbols("ES4612-MIB", ospfNetworkAreaMask=ospfNetworkAreaMask, dhcpPoolOptionDnsSerTable=dhcpPoolOptionDnsSerTable, dhcpPoolOptNetbiosServerIndex=dhcpPoolOptNetbiosServerIndex, aclEgressMacMaskDestMacAddrBitmask=aclEgressMacMaskDestMacAddrBitmask, aclEgressIpMaskIndex=aclEgressIpMaskIndex, mirrorType=mirrorType, aclIpAceControlCode=aclIpAceControlCode, sntpServerTable=sntpServerTable, aclIngressIpMaskControlCodeBitmask=aclIngressIpMaskControlCodeBitmask, consoleSilentTime=consoleSilentTime, swFanFailureTrap=swFanFailureTrap, restartOpCodeFile=restartOpCodeFile, portFlowCtrlCfg=portFlowCtrlCfg, ripNetworkAddrAddress=ripNetworkAddrAddress, aclMacAceDestMacAddrBitmask=aclMacAceDestMacAddrBitmask, prioIpPortCos=prioIpPortCos, sshServerStatus=sshServerStatus, aclIpAceDestIpAddr=aclIpAceDestIpAddr, dvmrpInterfaceLocalAddress=dvmrpInterfaceLocalAddress, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, igmpSnoopQueryInterval=igmpSnoopQueryInterval, es4612MIBNotifications=es4612MIBNotifications, aclEgressIpMaskTable=aclEgressIpMaskTable, smtpDestEMailStatus=smtpDestEMailStatus, sshKeySize=sshKeySize, aclIngressIpMaskIsEnablePrecedence=aclIngressIpMaskIsEnablePrecedence, telnetPasswordThreshold=telnetPasswordThreshold, dhcpPoolOptionDnsSerIpAddress=dhcpPoolOptionDnsSerIpAddress, aclEgressMacMaskIndex=aclEgressMacMaskIndex, ipFilterHTTPEndAddress=ipFilterHTTPEndAddress, swProdManufacturer=swProdManufacturer, dvmrpRouteNextHopSourceMask=dvmrpRouteNextHopSourceMask, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, switchProductId=switchProductId, mstInstanceEditVlansMap2k=mstInstanceEditVlansMap2k, igmpSnoopQuerier=igmpSnoopQuerier, amtrMacAddrAgingStatus=amtrMacAddrAgingStatus, sshDsaHostKey7=sshDsaHostKey7, aclMacAceStatus=aclMacAceStatus, dvmrpScalar=dvmrpScalar, dvmrpRouteExpiryTime=dvmrpRouteExpiryTime, prioIpPortTable=prioIpPortTable, es4612MIB=es4612MIB, dhcpPoolOptNetbiosServerEntry=dhcpPoolOptNetbiosServerEntry, dvmrpNeighborCapabilities=dvmrpNeighborCapabilities, prioCopyIpPrec=prioCopyIpPrec, portSecurityMgt=portSecurityMgt, netDefaultGateway=netDefaultGateway, dvmrpRouteSourceMask=dvmrpRouteSourceMask, portTrunkIndex=portTrunkIndex, portIndex=portIndex, aclIngressIpMaskDestIpAddrBitmask=aclIngressIpMaskDestIpAddrBitmask, dnsAliasEntry=dnsAliasEntry, mstInstanceOperVlansMap2k=mstInstanceOperVlansMap2k, mstInstanceEditIndex=mstInstanceEditIndex, switchInfoTable=switchInfoTable, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, dhcpRelayServerAddrIfIndex=dhcpRelayServerAddrIfIndex, remoteLogServerEntry=remoteLogServerEntry, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, fileInfoUnitID=fileInfoUnitID, dhcpcInterfaceEntry=dhcpcInterfaceEntry, ripGarbageCollectionTime=ripGarbageCollectionTime, mvrGroupsCtlCount=mvrGroupsCtlCount, mvrGroupStaticTable=mvrGroupStaticTable, bcastStormMgt=bcastStormMgt, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, aclIpAceAction=aclIpAceAction, aclEgressMacMaskTable=aclEgressMacMaskTable, aclMacAceVidBitmask=aclMacAceVidBitmask, consoleDataBits=consoleDataBits, sshRsaHostKey5=sshRsaHostKey5, mvrStatus=mvrStatus, markerStatus=markerStatus, ospfDefaultExternalMetric=ospfDefaultExternalMetric, dvmrpNeighborRcvBadPkts=dvmrpNeighborRcvBadPkts)
