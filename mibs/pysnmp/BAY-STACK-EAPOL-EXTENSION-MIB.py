#
# PySNMP MIB module BAY-STACK-EAPOL-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-EAPOL-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanId, VlanIdOrNone, VlanIdOrAny = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone", "VlanIdOrAny")
LPortSet, = mibBuilder.importSymbols("RAPID-CITY", "LPortSet")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, NotificationType, Counter32, Integer32, Bits, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, MibIdentifier, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "NotificationType", "Counter32", "Integer32", "Bits", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackEapExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 3))
bayStackEapExtMib.setRevisions(('2015-09-10 00:00', '2015-08-05 00:00', '2015-07-20 00:00', '2015-03-31 00:00', '2014-12-22 00:00', '2014-09-01 00:00', '2013-03-04 00:00', '2013-02-08 00:00', '2013-01-17 00:00', '2012-11-27 00:00', '2012-11-05 00:00', '2012-08-01 00:00', '2012-05-23 00:00', '2012-03-01 00:00', '2011-10-06 00:00', '2011-07-22 00:00', '2011-06-26 00:00', '2010-09-07 00:00', '2010-01-25 00:00', '2010-01-11 00:00', '2008-11-11 00:00', '2008-07-03 00:00', '2008-06-30 00:00', '2008-04-14 00:00', '2008-03-28 00:00', '2007-11-09 00:00', '2006-11-01 00:00', '2006-05-24 00:00', '2005-06-27 00:00', '2005-03-10 00:00', '2005-02-17 00:00', '2004-11-11 00:00', '2004-08-31 00:00', '2004-07-20 00:00', '2003-09-18 00:00',))
if mibBuilder.loadTexts: bayStackEapExtMib.setLastUpdated('201509100000Z')
if mibBuilder.loadTexts: bayStackEapExtMib.setOrganization('Avaya')
bseeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 2))
bseeNotifications0 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 2, 0))
bseeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 1))
bseeUserBasedPoliciesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeUserBasedPoliciesEnabled.setStatus('current')
bseeGuestVlanId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeGuestVlanId.setStatus('current')
bseeRemediationVlanId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeRemediationVlanId.setStatus('current')
bseeMaximumEapClientMacs = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMaximumEapClientMacs.setStatus('current')
bseeMaximumNonEapClientMacs = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMaximumNonEapClientMacs.setStatus('current')
bseeGuestVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeGuestVlanEnabled.setStatus('current')
bseeRemediationVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeRemediationVlanEnabled.setStatus('current')
bseeMultiHostAllowNonEapClient = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapClient.setStatus('current')
bseeMultiHostRadiusAuthNonEapClient = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostRadiusAuthNonEapClient.setStatus('current')
bseeMultiHostSingleAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostSingleAuthEnabled.setStatus('current')
bseeUserBasedPoliciesFilterOnMac = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeUserBasedPoliciesFilterOnMac.setStatus('current')
bseeMultiHostNonEapUserBasedPoliciesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapUserBasedPoliciesEnabled.setStatus('current')
bseeMultiHostNonEapUserBasedPoliciesFilterOnMac = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapUserBasedPoliciesFilterOnMac.setStatus('current')
bseeMultihostNonEapRadiusPasswordAttributeFormat = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 14), Bits().clone(namedValues=NamedValues(("ipAddr", 0), ("macAddr", 1), ("portNumber", 2), ("key", 3), ("padding", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultihostNonEapRadiusPasswordAttributeFormat.setStatus('current')
bseeMultiHostAllowNonEapPhones = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapPhones.setStatus('current')
bseeMultiHostAllowRadiusAssignedVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowRadiusAssignedVlan.setStatus('current')
bseeMultiHostEapPacketMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2))).clone('multicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostEapPacketMode.setStatus('current')
bseeMultiHostEapRadiusTimeoutMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("doNotFail", 2))).clone('fail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostEapRadiusTimeoutMode.setStatus('current')
bseeMultiHostAllowNonEapRadiusAssignedVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapRadiusAssignedVlan.setStatus('current')
bseeMultiHostEapProtocolEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostEapProtocolEnabled.setStatus('current')
bseeMultiHostUseMostRecentRadiusAssignedVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostUseMostRecentRadiusAssignedVlan.setStatus('current')
bseeMultiHostFailOpenVlanId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 22), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanId.setStatus('current')
bseeMultiHostFailOpenVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanEnabled.setStatus('current')
bseeMultiHostMultiVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostMultiVlan.setStatus('current')
bseeMultiHostNeapReauthenticationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNeapReauthenticationEnabled.setStatus('current')
bseeMultiHostBlockDifferentVlanAuth = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostBlockDifferentVlanAuth.setStatus('current')
bseeMultiHostAdacDummyRadiusRequests = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAdacDummyRadiusRequests.setStatus('current')
bseeAllowPortMirroringOnEap = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeAllowPortMirroringOnEap.setStatus('current')
bseeMultiHostAdacNonEapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAdacNonEapEnabled.setStatus('current')
bseeMultiHostFailOpenVlanContinuityModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanContinuityModeEnabled.setStatus('current')
bseeMultiHostNonEapRadiusPasswordFreeformKey = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapRadiusPasswordFreeformKey.setStatus('current')
bseeMultiHostFailOpenVlanDisableEapMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanDisableEapMode.setStatus('current')
bseePaeSystemOperState = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseePaeSystemOperState.setStatus('current')
bseeDefaultEapAll = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeDefaultEapAll.setStatus('current')
bseeAutoPortConfigModeSwitchToMHMV = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 35), LPortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMV.setStatus('current')
bseeAutoPortConfigModeSwitchToMHMVAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMVAction.setStatus('current')
bseeAutoPortConfigModeSwitchToMHMVStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passed", 1), ("inProgress", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMVStatus.setStatus('current')
bseePortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 3), )
if mibBuilder.loadTexts: bseePortConfigTable.setStatus('current')
bseePortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseePortConfigPortNumber"))
if mibBuilder.loadTexts: bseePortConfigEntry.setStatus('current')
bseePortConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseePortConfigPortNumber.setStatus('current')
bseePortConfigGuestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 2), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigGuestVlanId.setStatus('current')
bseePortConfigMultiHostEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEnabled.setStatus('current')
bseePortConfigMultiHostEapMaxNumMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEapMaxNumMacs.setStatus('current')
bseePortConfigMultiHostAllowNonEapClient = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapClient.setStatus('current')
bseePortConfigMultiHostNonEapMacSource = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoLearn", 1), ("userConfig", 2), ("radius", 3))).clone('userConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostNonEapMacSource.setStatus('deprecated')
bseePortConfigMultiHostNonEapMaxNumMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostNonEapMaxNumMacs.setStatus('current')
bseePortConfigGuestVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigGuestVlanEnabled.setStatus('current')
bseePortConfigMultiHostRadiusAuthNonEapClient = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostRadiusAuthNonEapClient.setStatus('current')
bseePortConfigMultiHostSingleAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostSingleAuthEnabled.setStatus('current')
bseePortConfigMultiHostAllowNonEapPhones = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapPhones.setStatus('current')
bseePortConfigMultiHostAllowRadiusAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowRadiusAssignedVlan.setStatus('current')
bseePortConfigMultiHostEapPacketMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2))).clone('multicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEapPacketMode.setStatus('current')
bseePortConfigMultiHostEapRadiusTimeoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("doNotFail", 2))).clone('fail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEapRadiusTimeoutMode.setStatus('current')
bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan.setStatus('current')
bseePortConfigProcessRadiusRequestsServerPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigProcessRadiusRequestsServerPackets.setStatus('current')
bseePortConfigEapProtocolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigEapProtocolEnabled.setStatus('current')
bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan.setStatus('current')
bseePortConfigMultiHostClearNeap = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 19), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostClearNeap.setStatus('current')
bseePortConfigMultiHostBlockDifferentVlanAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostBlockDifferentVlanAuth.setStatus('current')
bseePortConfigMultiHostAdacNonEapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAdacNonEapEnabled.setStatus('current')
bseePortConfigDefaultEapAll = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigDefaultEapAll.setStatus('current')
bseePortConfigMultiHostMaxMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostMaxMacs.setStatus('current')
bseePortConfigMultiHostSingleAuthNoLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostSingleAuthNoLimit.setStatus('current')
bseePortConfigFailOpenVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanId.setStatus('current')
bseePortConfigFailOpenVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanEnabled.setStatus('current')
bseePortConfigFailOpenVlanUBP = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanUBP.setStatus('current')
bseeMultiHostStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 4), )
if mibBuilder.loadTexts: bseeMultiHostStatusTable.setStatus('current')
bseeMultiHostStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostStatusPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostStatusClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostStatusEntry.setStatus('current')
bseeMultiHostStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostStatusPortNumber.setStatus('current')
bseeMultiHostStatusClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostStatusClientMACAddr.setStatus('current')
bseeMultiHostStatusPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusPaeState.setStatus('current')
bseeMultiHostStatusBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusBackendAuthState.setStatus('current')
bseeMultiHostStatusReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reauthenticate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostStatusReauthenticate.setStatus('current')
bseeMultiHostStatusVid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 6), VlanIdOrAny()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusVid.setStatus('current')
bseeMultiHostStatusPri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusPri.setStatus('current')
bseeMultiHostStatusFaBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusFaBindings.setStatus('current')
bseeMultiHostSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 5), )
if mibBuilder.loadTexts: bseeMultiHostSessionStatsTable.setStatus('current')
bseeMultiHostSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostSessionStatsPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostSessionStatsClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostSessionStatsEntry.setStatus('current')
bseeMultiHostSessionStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostSessionStatsPortNumber.setStatus('current')
bseeMultiHostSessionStatsClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostSessionStatsClientMACAddr.setStatus('current')
bseeMultiHostSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionId.setStatus('current')
bseeMultiHostSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionAuthenticMethod.setStatus('current')
bseeMultiHostSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionTime.setStatus('current')
bseeMultiHostSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionTerminateCause.setStatus('current')
bseeMultiHostSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionUserName.setStatus('current')
bseeMultiHostNonEapMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 6), )
if mibBuilder.loadTexts: bseeMultiHostNonEapMacTable.setStatus('current')
bseeMultiHostNonEapMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapMacPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapMacClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostNonEapMacEntry.setStatus('current')
bseeMultiHostNonEapMacPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostNonEapMacPortNumber.setStatus('current')
bseeMultiHostNonEapMacClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostNonEapMacClientMACAddr.setStatus('current')
bseeMultiHostNonEapMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bseeMultiHostNonEapMacRowStatus.setStatus('current')
bseeMultiHostNonEapStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 7), )
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusTable.setStatus('current')
bseeMultiHostNonEapStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapStatusPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapStatusClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusEntry.setStatus('current')
bseeMultiHostNonEapStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusPortNumber.setStatus('current')
bseeMultiHostNonEapStatusClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusClientMACAddr.setStatus('current')
bseeMultiHostNonEapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rejected", 1), ("locallyAuthenticated", 2), ("radiusPending", 3), ("radiusAuthenticated", 4), ("adacAuthenticated", 5), ("mhsaAuthenticated", 6), ("lldpAuthenticated", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusState.setStatus('current')
bseeMultiHostNonEapStatusReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reauthenticate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusReauthenticate.setStatus('current')
bseeMultiHostNonEapStatusVid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 5), VlanIdOrAny()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusVid.setStatus('current')
bseeMultiHostNonEapStatusPri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusPri.setStatus('current')
bseeMultiHostNonEapStatusFaBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusFaBindings.setStatus('current')
bseeSupplicantObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 8))
bseeSupplicantEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantEnabled.setStatus('current')
bseeSupplicantUserTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 9), )
if mibBuilder.loadTexts: bseeSupplicantUserTable.setStatus('current')
bseeSupplicantUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeSupplicantPortNumber"))
if mibBuilder.loadTexts: bseeSupplicantUserEntry.setStatus('current')
bseeSupplicantPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeSupplicantPortNumber.setStatus('current')
bseeSupplicantUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantUserName.setStatus('current')
bseeSupplicantPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantPassword.setStatus('current')
bseeSupplicantUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("logoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantUserState.setStatus('current')
bseeMultiHostVoipVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 10), )
if mibBuilder.loadTexts: bseeMultiHostVoipVlanTable.setStatus('current')
bseeMultiHostVoipVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostVoipVlanIndex"))
if mibBuilder.loadTexts: bseeMultiHostVoipVlanEntry.setStatus('current')
bseeMultiHostVoipVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: bseeMultiHostVoipVlanIndex.setStatus('current')
bseeMultiHostVoipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostVoipVlanId.setStatus('current')
bseeMultiHostVoipVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostVoipVlanEnabled.setStatus('current')
bseeMultiHostDhcpAuthPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 11), )
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneTable.setStatus('current')
bseeMultiHostDhcpAuthPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostDhcpAuthPhonePortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostDhcpAuthPhoneClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneEntry.setStatus('current')
bseeMultiHostDhcpAuthPhonePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhonePortNumber.setStatus('current')
bseeMultiHostDhcpAuthPhoneClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneClientMACAddr.setStatus('current')
bseeMultiHostDhcpAuthPhoneUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneUserName.setStatus('current')
mibBuilder.exportSymbols("BAY-STACK-EAPOL-EXTENSION-MIB", bseeNotifications=bseeNotifications, bseePortConfigMultiHostAllowNonEapClient=bseePortConfigMultiHostAllowNonEapClient, bseeMultiHostNonEapStatusReauthenticate=bseeMultiHostNonEapStatusReauthenticate, bseeMultiHostEapProtocolEnabled=bseeMultiHostEapProtocolEnabled, bseeMultiHostAllowNonEapClient=bseeMultiHostAllowNonEapClient, bseeMultiHostNonEapStatusTable=bseeMultiHostNonEapStatusTable, bseeMultiHostEapRadiusTimeoutMode=bseeMultiHostEapRadiusTimeoutMode, bseePortConfigTable=bseePortConfigTable, bseeMultiHostNonEapStatusState=bseeMultiHostNonEapStatusState, bseeSupplicantPassword=bseeSupplicantPassword, bseeMultiHostDhcpAuthPhoneClientMACAddr=bseeMultiHostDhcpAuthPhoneClientMACAddr, bseeMultiHostRadiusAuthNonEapClient=bseeMultiHostRadiusAuthNonEapClient, bseePortConfigGuestVlanEnabled=bseePortConfigGuestVlanEnabled, bseeMultiHostFailOpenVlanDisableEapMode=bseeMultiHostFailOpenVlanDisableEapMode, bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan=bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan, bseeMultiHostNonEapStatusVid=bseeMultiHostNonEapStatusVid, bseeMultiHostVoipVlanTable=bseeMultiHostVoipVlanTable, bseeMultiHostStatusTable=bseeMultiHostStatusTable, bseePortConfigMultiHostClearNeap=bseePortConfigMultiHostClearNeap, bseePortConfigFailOpenVlanEnabled=bseePortConfigFailOpenVlanEnabled, bseeMultiHostStatusVid=bseeMultiHostStatusVid, bseeMultiHostMultiVlan=bseeMultiHostMultiVlan, bseeMultiHostVoipVlanId=bseeMultiHostVoipVlanId, bseeMultiHostDhcpAuthPhoneTable=bseeMultiHostDhcpAuthPhoneTable, bseeRemediationVlanEnabled=bseeRemediationVlanEnabled, bseeSupplicantPortNumber=bseeSupplicantPortNumber, bseeMultiHostAllowNonEapRadiusAssignedVlan=bseeMultiHostAllowNonEapRadiusAssignedVlan, bseeMultiHostAllowNonEapPhones=bseeMultiHostAllowNonEapPhones, bseePortConfigMultiHostSingleAuthNoLimit=bseePortConfigMultiHostSingleAuthNoLimit, bseeMultiHostFailOpenVlanEnabled=bseeMultiHostFailOpenVlanEnabled, bseeMultiHostStatusPaeState=bseeMultiHostStatusPaeState, bseePortConfigMultiHostBlockDifferentVlanAuth=bseePortConfigMultiHostBlockDifferentVlanAuth, bseePortConfigProcessRadiusRequestsServerPackets=bseePortConfigProcessRadiusRequestsServerPackets, bseeMultiHostNonEapMacEntry=bseeMultiHostNonEapMacEntry, bseeMultiHostNonEapUserBasedPoliciesEnabled=bseeMultiHostNonEapUserBasedPoliciesEnabled, bseeUserBasedPoliciesFilterOnMac=bseeUserBasedPoliciesFilterOnMac, bseeMultiHostSessionStatsEntry=bseeMultiHostSessionStatsEntry, bseeMultiHostUseMostRecentRadiusAssignedVlan=bseeMultiHostUseMostRecentRadiusAssignedVlan, bseeSupplicantUserEntry=bseeSupplicantUserEntry, bseeGuestVlanId=bseeGuestVlanId, bseePortConfigMultiHostAdacNonEapEnabled=bseePortConfigMultiHostAdacNonEapEnabled, bseePortConfigGuestVlanId=bseePortConfigGuestVlanId, bseePortConfigMultiHostMaxMacs=bseePortConfigMultiHostMaxMacs, bseePortConfigFailOpenVlanUBP=bseePortConfigFailOpenVlanUBP, bseeMultiHostBlockDifferentVlanAuth=bseeMultiHostBlockDifferentVlanAuth, bseePortConfigMultiHostAllowRadiusAssignedVlan=bseePortConfigMultiHostAllowRadiusAssignedVlan, bseeAutoPortConfigModeSwitchToMHMV=bseeAutoPortConfigModeSwitchToMHMV, bseeMultiHostDhcpAuthPhonePortNumber=bseeMultiHostDhcpAuthPhonePortNumber, bseeMultiHostEapPacketMode=bseeMultiHostEapPacketMode, bseeMultiHostDhcpAuthPhoneUserName=bseeMultiHostDhcpAuthPhoneUserName, bseePortConfigPortNumber=bseePortConfigPortNumber, bseeMultiHostNonEapMacRowStatus=bseeMultiHostNonEapMacRowStatus, bseeUserBasedPoliciesEnabled=bseeUserBasedPoliciesEnabled, bseeMultiHostVoipVlanEntry=bseeMultiHostVoipVlanEntry, bseeMultiHostFailOpenVlanId=bseeMultiHostFailOpenVlanId, bseeSupplicantObjects=bseeSupplicantObjects, bseeGuestVlanEnabled=bseeGuestVlanEnabled, bseePortConfigMultiHostEapMaxNumMacs=bseePortConfigMultiHostEapMaxNumMacs, bseeMultiHostNeapReauthenticationEnabled=bseeMultiHostNeapReauthenticationEnabled, bseeMultiHostSessionStatsTable=bseeMultiHostSessionStatsTable, bseeSupplicantUserTable=bseeSupplicantUserTable, bseeMultiHostSessionId=bseeMultiHostSessionId, bseeSupplicantEnabled=bseeSupplicantEnabled, bseeMultiHostAdacNonEapEnabled=bseeMultiHostAdacNonEapEnabled, bseeMultiHostSingleAuthEnabled=bseeMultiHostSingleAuthEnabled, bseeMultiHostNonEapMacClientMACAddr=bseeMultiHostNonEapMacClientMACAddr, bseeMultiHostDhcpAuthPhoneEntry=bseeMultiHostDhcpAuthPhoneEntry, bseeMultiHostNonEapStatusEntry=bseeMultiHostNonEapStatusEntry, bseeMultiHostNonEapMacTable=bseeMultiHostNonEapMacTable, bseeMultiHostSessionStatsClientMACAddr=bseeMultiHostSessionStatsClientMACAddr, bseeMultiHostStatusPortNumber=bseeMultiHostStatusPortNumber, bseeMultiHostNonEapRadiusPasswordFreeformKey=bseeMultiHostNonEapRadiusPasswordFreeformKey, bseeAutoPortConfigModeSwitchToMHMVAction=bseeAutoPortConfigModeSwitchToMHMVAction, bseeMultiHostVoipVlanEnabled=bseeMultiHostVoipVlanEnabled, bseeMultiHostSessionAuthenticMethod=bseeMultiHostSessionAuthenticMethod, bseeMultiHostStatusClientMACAddr=bseeMultiHostStatusClientMACAddr, bseeMultiHostNonEapStatusClientMACAddr=bseeMultiHostNonEapStatusClientMACAddr, bseePortConfigDefaultEapAll=bseePortConfigDefaultEapAll, bseeMultiHostNonEapStatusPortNumber=bseeMultiHostNonEapStatusPortNumber, bseeMultiHostNonEapStatusFaBindings=bseeMultiHostNonEapStatusFaBindings, bseePortConfigMultiHostSingleAuthEnabled=bseePortConfigMultiHostSingleAuthEnabled, bseePortConfigMultiHostAllowNonEapPhones=bseePortConfigMultiHostAllowNonEapPhones, bseeObjects=bseeObjects, bseeMultiHostSessionUserName=bseeMultiHostSessionUserName, bayStackEapExtMib=bayStackEapExtMib, bseeMultiHostStatusEntry=bseeMultiHostStatusEntry, bseeMultiHostStatusReauthenticate=bseeMultiHostStatusReauthenticate, bseePortConfigFailOpenVlanId=bseePortConfigFailOpenVlanId, bseeMultiHostAllowRadiusAssignedVlan=bseeMultiHostAllowRadiusAssignedVlan, bseeNotifications0=bseeNotifications0, bseeMultiHostSessionTime=bseeMultiHostSessionTime, bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan=bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan, bseeMultiHostSessionStatsPortNumber=bseeMultiHostSessionStatsPortNumber, bseeMultiHostAdacDummyRadiusRequests=bseeMultiHostAdacDummyRadiusRequests, bseeMultiHostNonEapMacPortNumber=bseeMultiHostNonEapMacPortNumber, bseeAutoPortConfigModeSwitchToMHMVStatus=bseeAutoPortConfigModeSwitchToMHMVStatus, bseePortConfigMultiHostNonEapMacSource=bseePortConfigMultiHostNonEapMacSource, bseeMultiHostStatusFaBindings=bseeMultiHostStatusFaBindings, bseePortConfigEntry=bseePortConfigEntry, bseeMultiHostNonEapStatusPri=bseeMultiHostNonEapStatusPri, bseePortConfigMultiHostEapPacketMode=bseePortConfigMultiHostEapPacketMode, bseeMultiHostFailOpenVlanContinuityModeEnabled=bseeMultiHostFailOpenVlanContinuityModeEnabled, bseeMaximumEapClientMacs=bseeMaximumEapClientMacs, bseePortConfigMultiHostRadiusAuthNonEapClient=bseePortConfigMultiHostRadiusAuthNonEapClient, bseeDefaultEapAll=bseeDefaultEapAll, bseeMultihostNonEapRadiusPasswordAttributeFormat=bseeMultihostNonEapRadiusPasswordAttributeFormat, bseePaeSystemOperState=bseePaeSystemOperState, bseeMultiHostNonEapUserBasedPoliciesFilterOnMac=bseeMultiHostNonEapUserBasedPoliciesFilterOnMac, bseeSupplicantUserState=bseeSupplicantUserState, bseePortConfigMultiHostEapRadiusTimeoutMode=bseePortConfigMultiHostEapRadiusTimeoutMode, bseeAllowPortMirroringOnEap=bseeAllowPortMirroringOnEap, bseeSupplicantUserName=bseeSupplicantUserName, bseeMultiHostStatusPri=bseeMultiHostStatusPri, bseeMaximumNonEapClientMacs=bseeMaximumNonEapClientMacs, bseePortConfigEapProtocolEnabled=bseePortConfigEapProtocolEnabled, PYSNMP_MODULE_ID=bayStackEapExtMib, bseeMultiHostStatusBackendAuthState=bseeMultiHostStatusBackendAuthState, bseePortConfigMultiHostNonEapMaxNumMacs=bseePortConfigMultiHostNonEapMaxNumMacs, bseeRemediationVlanId=bseeRemediationVlanId, bseeMultiHostSessionTerminateCause=bseeMultiHostSessionTerminateCause, bseePortConfigMultiHostEnabled=bseePortConfigMultiHostEnabled, bseeMultiHostVoipVlanIndex=bseeMultiHostVoipVlanIndex)
