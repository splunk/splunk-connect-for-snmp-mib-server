#
# PySNMP MIB module HH3C-DISK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DISK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
Hh3cStorageActionType, hh3cStorageRef, Hh3cStorageEnableState = mibBuilder.importSymbols("HH3C-STORAGE-REF-MIB", "Hh3cStorageActionType", "hh3cStorageRef", "Hh3cStorageEnableState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, IpAddress, Counter32, ModuleIdentity, Integer32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "ModuleIdentity", "Integer32", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hh3cDisk = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 10, 3))
if mibBuilder.loadTexts: hh3cDisk.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: hh3cDisk.setOrganization('H3C Technologies Co., Ltd.')
hh3cDiskMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1))
hh3cDiskTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1), )
if mibBuilder.loadTexts: hh3cDiskTable.setStatus('current')
hh3cDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1), ).setIndexNames((0, "HH3C-DISK-MIB", "hh3cDiskIndex"))
if mibBuilder.loadTexts: hh3cDiskEntry.setStatus('current')
hh3cDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDiskIndex.setStatus('current')
hh3cDiskPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sata", 1), ("pata", 2), ("sas", 3), ("scsi", 4), ("ieee1394", 5), ("fcal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskPortType.setStatus('current')
hh3cDiskPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 3), Integer32()).setUnits('MB/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskPortSpeed.setStatus('current')
hh3cDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskSize.setStatus('current')
hh3cDiskFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskFreeSpace.setStatus('current')
hh3cDiskLocationState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 6), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDiskLocationState.setStatus('current')
hh3cDiskRunLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("blink", 2), ("fastblink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskRunLedState.setStatus('current')
hh3cDiskFaultLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("blink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskFaultLedState.setStatus('current')
hh3cDiskInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 9), Hh3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDiskInitialize.setStatus('current')
hh3cDiskGlobalSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("globalSpare", 1), ("nonglobalSpare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDiskGlobalSpare.setStatus('current')
hh3cDiskLocalSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localSpare", 1), ("nonlocalSpare", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskLocalSpare.setStatus('current')
hh3cDiskReadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 12), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDiskReadCache.setStatus('current')
hh3cDiskWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 13), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDiskWriteCache.setStatus('current')
hh3cDiskPowerOffReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("environmentUnstable", 1), ("mediumError", 2), ("smartCheckError", 3), ("generalError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDiskPowerOffReason.setStatus('current')
mibBuilder.exportSymbols("HH3C-DISK-MIB", hh3cDiskWriteCache=hh3cDiskWriteCache, hh3cDiskPortSpeed=hh3cDiskPortSpeed, PYSNMP_MODULE_ID=hh3cDisk, hh3cDiskReadCache=hh3cDiskReadCache, hh3cDiskRunLedState=hh3cDiskRunLedState, hh3cDiskFaultLedState=hh3cDiskFaultLedState, hh3cDiskLocationState=hh3cDiskLocationState, hh3cDiskPowerOffReason=hh3cDiskPowerOffReason, hh3cDiskSize=hh3cDiskSize, hh3cDiskFreeSpace=hh3cDiskFreeSpace, hh3cDiskMibObjects=hh3cDiskMibObjects, hh3cDiskTable=hh3cDiskTable, hh3cDiskPortType=hh3cDiskPortType, hh3cDiskIndex=hh3cDiskIndex, hh3cDiskGlobalSpare=hh3cDiskGlobalSpare, hh3cDiskLocalSpare=hh3cDiskLocalSpare, hh3cDisk=hh3cDisk, hh3cDiskEntry=hh3cDiskEntry, hh3cDiskInitialize=hh3cDiskInitialize)
