#
# PySNMP MIB module SW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
bcsiModules, fcSwitch = mibBuilder.importSymbols("Brocade-REG-MIB", "bcsiModules", "fcSwitch")
SwTrunkMaster, SwSensorIndex, SwPortIndex, SwNbIndex, FcWwn, SwDomainIndex = mibBuilder.importSymbols("Brocade-TC", "SwTrunkMaster", "SwSensorIndex", "SwPortIndex", "SwNbIndex", "FcWwn", "SwDomainIndex")
connUnitPortEntry, connUnitPortStatEntry = mibBuilder.importSymbols("FCMGMT-MIB", "connUnitPortEntry", "connUnitPortStatEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, NotificationType, TimeTicks, Counter32, MibIdentifier, iso, Bits, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "NotificationType", "TimeTicks", "Counter32", "MibIdentifier", "iso", "Bits", "ModuleIdentity", "Unsigned32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
swMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 1588, 3, 1, 3))
swMibModule.setRevisions(('2003-01-13 14:30', '2003-07-20 14:30', '2004-04-15 10:30', '2004-08-06 18:30', '2005-04-29 20:16', '2006-01-09 09:00', '2006-05-17 09:00', '2007-01-23 09:00', '2007-06-08 12:00', '2007-06-27 10:30', '2007-08-01 12:20', '2007-08-29 04:42', '2008-01-29 07:59', '2008-07-17 03:45', '2008-07-24 02:32', '2008-07-25 02:32', '2008-09-09 09:00', '2009-09-28 09:00', '2009-02-21 09:00', '2009-03-30 09:00', '2009-06-25 12:00', '2009-06-29 01:00', '2009-06-30 13:06', '2009-06-30 06:00', '2009-10-30 05:00', '2009-11-03 13:06', '2009-11-05 12:00', '2009-11-05 05:00', '2009-11-06 11:30', '2009-11-30 10:30', '2009-12-03 17:30', '2010-01-30 17:30', '2010-07-08 11:30', '2010-07-15 11:30', '2010-07-21 11:30', '2010-08-06 11:30', '2010-08-20 10:30', '2010-10-07 10:30', '2010-10-09 10:30', '2010-10-25 10:30', '2010-11-01 06:00', '2010-11-02 10:30', '2010-12-02 10:30', '2010-12-08 10:30', '2010-12-20 10:00', '2010-12-21 04:00', '2010-12-22 10:00', '2010-12-30 10:00', '2011-01-06 10:30', '2011-01-07 10:30', '2011-02-18 06:00', '2012-02-23 10:30', '2012-03-05 03:33', '2012-05-15 14:25', '2012-06-04 17:20', '2012-06-14 10:00', '2012-06-29 15:20', '2012-07-10 16:00', '2012-09-26 14:00', '2013-03-21 13:00', '2013-04-04 17:48', '2013-04-22 11:30', '2013-04-25 18:03', '2013-05-15 14:30', '2013-06-05 16:00', '2013-06-29 10:00', '2013-09-12 10:00', '2013-10-04 13:40',))
if mibBuilder.loadTexts: swMibModule.setLastUpdated('201310041340Z')
if mibBuilder.loadTexts: swMibModule.setOrganization('Brocade Communications Systems, Inc.,')
sw = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1))
if mibBuilder.loadTexts: sw.setStatus('current')
sw28k = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 2))
if mibBuilder.loadTexts: sw28k.setStatus('current')
sw21kN24k = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 3))
if mibBuilder.loadTexts: sw21kN24k.setStatus('current')
sw20x0 = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 4))
if mibBuilder.loadTexts: sw20x0.setStatus('current')
class SwSevType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("critical", 1), ("error", 2), ("warning", 3), ("informational", 4), ("debug", 5))

class FcPortFlag(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("physical", 0), ("virtual", 1))

swSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1))
if mibBuilder.loadTexts: swSystem.setStatus('current')
swFabric = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2))
if mibBuilder.loadTexts: swFabric.setStatus('current')
swModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 3))
if mibBuilder.loadTexts: swModule.setStatus('current')
swAgtCfg = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4))
if mibBuilder.loadTexts: swAgtCfg.setStatus('current')
swFCport = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6))
if mibBuilder.loadTexts: swFCport.setStatus('current')
swNs = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7))
if mibBuilder.loadTexts: swNs.setStatus('current')
swEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8))
if mibBuilder.loadTexts: swEvent.setStatus('current')
swFwSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10))
if mibBuilder.loadTexts: swFwSystem.setStatus('current')
swEndDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21))
if mibBuilder.loadTexts: swEndDevice.setStatus('current')
swGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22))
if mibBuilder.loadTexts: swGroup.setStatus('obsolete')
swBlmPerfMnt = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23))
if mibBuilder.loadTexts: swBlmPerfMnt.setStatus('current')
swTrunk = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24))
if mibBuilder.loadTexts: swTrunk.setStatus('current')
swTopTalker = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25))
if mibBuilder.loadTexts: swTopTalker.setStatus('current')
swCpuOrMemoryUsage = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26))
if mibBuilder.loadTexts: swCpuOrMemoryUsage.setStatus('current')
swConnUnitPortStatExtentionTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27), )
if mibBuilder.loadTexts: swConnUnitPortStatExtentionTable.setStatus('current')
swCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCurrentDate.setStatus('current')
swBootDate = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootDate.setStatus('current')
swFWLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFWLastUpdated.setStatus('current')
swFlashLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFlashLastUpdated.setStatus('current')
swBootPromLastUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootPromLastUpdated.setStatus('current')
swFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareVersion.setStatus('current')
swOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOperStatus.setStatus('current')
swAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("reboot", 5), ("fastboot", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAdmStatus.setStatus('current')
swTelnetShellAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("terminated", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTelnetShellAdmStatus.setStatus('current')
swSsn = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSsn.setStatus('current')
swFlashDLOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("swCurrent", 1), ("swFwUpgraded", 2), ("swCfUploaded", 3), ("swCfDownloaded", 4), ("swFwCorrupted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFlashDLOperStatus.setStatus('current')
swFlashDLAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("swCurrent", 1), ("swFwUpgrade", 2), ("swCfUpload", 3), ("swCfDownload", 4), ("swFwCorrupted", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLAdmStatus.setStatus('current')
swFlashDLHost = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLHost.setStatus('current')
swFlashDLUser = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLUser.setStatus('current')
swFlashDLFile = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLFile.setStatus('current')
swFlashDLPassword = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFlashDLPassword.setStatus('current')
swBeaconOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBeaconOperStatus.setStatus('current')
swBeaconAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBeaconAdmStatus.setStatus('current')
swDiagResult = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sw-ok", 1), ("sw-faulty", 2), ("sw-embedded-port-fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDiagResult.setStatus('current')
swNumSensors = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNumSensors.setStatus('current')
swSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22), )
if mibBuilder.loadTexts: swSensorTable.setStatus('current')
swSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1), ).setIndexNames((0, "SW-MIB", "swSensorIndex"))
if mibBuilder.loadTexts: swSensorEntry.setStatus('current')
swSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 1), SwSensorIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorIndex.setStatus('current')
swSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("temperature", 1), ("fan", 2), ("power-supply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorType.setStatus('current')
swSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("faulty", 2), ("below-min", 3), ("nominal", 4), ("above-max", 5), ("absent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorStatus.setStatus('current')
swSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorValue.setStatus('current')
swSensorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSensorInfo.setStatus('current')
swTrackChangesInfo = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrackChangesInfo.setStatus('current')
swID = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swID.setStatus('current')
swEtherIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEtherIPAddress.setStatus('current')
swEtherIPMask = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEtherIPMask.setStatus('current')
swFCIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCIPAddress.setStatus('current')
swFCIPMask = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCIPMask.setStatus('current')
swIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 29), DisplayString())
if mibBuilder.loadTexts: swIPv6Address.setStatus('current')
swIPv6Status = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tentative", 1), ("preferred", 2), ("ipdeprecated", 3), ("inactive", 4))))
if mibBuilder.loadTexts: swIPv6Status.setStatus('current')
swModel = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch7500", 1), ("switch7500E", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModel.setStatus('current')
swTestString = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: swTestString.setStatus('current')
swPortList = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 33), OctetString())
if mibBuilder.loadTexts: swPortList.setStatus('current')
swBrcdTrapBitMask = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 34), Integer32())
if mibBuilder.loadTexts: swBrcdTrapBitMask.setStatus('current')
swFCPortPrevType = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("fl-port", 3), ("f-port", 4), ("e-port", 5), ("g-port", 6), ("ex-port", 7))))
if mibBuilder.loadTexts: swFCPortPrevType.setStatus('current')
swDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("login", 1), ("logout", 2), ("unknown", 3))))
if mibBuilder.loadTexts: swDeviceStatus.setStatus('current')
swDomainID = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 1), SwDomainIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDomainID.setStatus('current')
swPrincipalSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPrincipalSwitch.setStatus('current')
swNumNbs = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNumNbs.setStatus('current')
swNbTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9), )
if mibBuilder.loadTexts: swNbTable.setStatus('current')
swNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1), ).setIndexNames((0, "SW-MIB", "swNbIndex"))
if mibBuilder.loadTexts: swNbEntry.setStatus('current')
swNbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 1), SwNbIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbIndex.setStatus('current')
swNbMyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 2), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbMyPort.setStatus('current')
swNbRemDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 3), SwDomainIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbRemDomain.setStatus('current')
swNbRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 4), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbRemPort.setStatus('current')
swNbBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512))).clone(namedValues=NamedValues(("other", 1), ("oneEighth", 2), ("quarter", 4), ("half", 8), ("full", 16), ("double", 32), ("quadruple", 64), ("octuple", 128), ("decuple", 256), ("sexdecuple", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbBaudRate.setStatus('current')
swNbIslState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sw-down", 0), ("sw-init", 1), ("sw-internal2", 2), ("sw-internal3", 3), ("sw-internal4", 4), ("sw-active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbIslState.setStatus('current')
swNbIslCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swNbIslCost.setStatus('current')
swNbRemPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNbRemPortName.setStatus('current')
swFabricMemTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10), )
if mibBuilder.loadTexts: swFabricMemTable.setStatus('current')
swFabricMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1), ).setIndexNames((0, "SW-MIB", "swFabricMemWwn"))
if mibBuilder.loadTexts: swFabricMemEntry.setStatus('current')
swFabricMemWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 1), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemWwn.setStatus('current')
swFabricMemDid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 2), SwDomainIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemDid.setStatus('current')
swFabricMemName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemName.setStatus('current')
swFabricMemEIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemEIP.setStatus('current')
swFabricMemFCIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemFCIP.setStatus('current')
swFabricMemGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemGWIP.setStatus('current')
swFabricMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemType.setStatus('current')
swFabricMemShortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFabricMemShortVersion.setStatus('current')
swIDIDMode = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIDIDMode.setStatus('current')
swPmgrEventType = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("create", 0), ("delete", 1), ("moveport", 2), ("fidchange", 3), ("basechange", 4), ("vfstatechange", 6))))
if mibBuilder.loadTexts: swPmgrEventType.setStatus('current')
swPmgrEventTime = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: swPmgrEventTime.setStatus('current')
swPmgrEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: swPmgrEventDescr.setStatus('current')
swVfId = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVfId.setStatus('current')
swVfName = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVfName.setStatus('current')
swAgtCmtyTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11), )
if mibBuilder.loadTexts: swAgtCmtyTable.setStatus('deprecated')
swauthProtocolPassword = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swauthProtocolPassword.setStatus('current')
swprivProtocolPassword = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swprivProtocolPassword.setStatus('current')
swAgtCmtyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1), ).setIndexNames((0, "SW-MIB", "swAgtCmtyIdx"))
if mibBuilder.loadTexts: swAgtCmtyEntry.setStatus('deprecated')
swAgtCmtyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAgtCmtyIdx.setStatus('deprecated')
swAgtCmtyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAgtCmtyStr.setStatus('deprecated')
swAgtTrapRcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAgtTrapRcp.setStatus('deprecated')
swAgtTrapSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 4, 11, 1, 4), SwSevType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAgtTrapSeverityLevel.setStatus('deprecated')
swFCPortCapacity = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortCapacity.setStatus('current')
swFCPortTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: swFCPortTable.setStatus('current')
swFCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "SW-MIB", "swFCPortIndex"))
if mibBuilder.loadTexts: swFCPortEntry.setStatus('current')
swFCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortIndex.setStatus('current')
swFCPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stitch", 1), ("flannel", 2), ("loom", 3), ("bloom", 4), ("rdbloom", 5), ("wormhole", 6), ("other", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortType.setStatus('current')
swFCPortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 255))).clone(namedValues=NamedValues(("noCard", 1), ("noTransceiver", 2), ("laserFault", 3), ("noLight", 4), ("noSync", 5), ("inSync", 6), ("portFault", 7), ("diagFault", 8), ("lockRef", 9), ("validating", 10), ("invalidModule", 11), ("noSigDet", 14), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortPhyState.setStatus('current')
swFCPortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortOpStatus.setStatus('current')
swFCPortAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFCPortAdmStatus.setStatus('current')
swFCPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFCPortLinkState.setStatus('current')
swFCPortTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("lw", 2), ("sw", 3), ("ld", 4), ("cu", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxType.setStatus('current')
swFCPortTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxWords.setStatus('current')
swFCPortRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxWords.setStatus('current')
swFCPortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxFrames.setStatus('current')
swFCPortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxFrames.setStatus('current')
swFCPortRxC2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxC2Frames.setStatus('current')
swFCPortRxC3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxC3Frames.setStatus('current')
swFCPortRxLCs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxLCs.setStatus('current')
swFCPortRxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxMcasts.setStatus('current')
swFCPortTooManyRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTooManyRdys.setStatus('current')
swFCPortNoTxCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortNoTxCredits.setStatus('current')
swFCPortRxEncInFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxEncInFrs.setStatus('current')
swFCPortRxCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxCrcs.setStatus('current')
swFCPortRxTruncs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxTruncs.setStatus('current')
swFCPortRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxTooLongs.setStatus('current')
swFCPortRxBadEofs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxBadEofs.setStatus('current')
swFCPortRxEncOutFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxEncOutFrs.setStatus('current')
swFCPortRxBadOs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortRxBadOs.setStatus('current')
swFCPortC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortC3Discards.setStatus('current')
swFCPortMcastTimedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortMcastTimedOuts.setStatus('current')
swFCPortTxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortTxMcasts.setStatus('current')
swFCPortLipIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortLipIns.setStatus('current')
swFCPortLipOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortLipOuts.setStatus('current')
swFCPortLipLastAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortLipLastAlpa.setStatus('current')
swFCPortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortWwn.setStatus('current')
swFCPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("one-GB", 1), ("two-GB", 2), ("auto-Negotiate", 3), ("four-GB", 4), ("eight-GB", 5), ("ten-GB", 6), ("unknown", 7), ("sixteen-GB", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFCPortSpeed.setStatus('obsolete')
swFCPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortName.setStatus('current')
swFCPortSpecifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortSpecifier.setStatus('current')
swFCPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 38), FcPortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortFlag.setStatus('current')
swFCPortBrcdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("fl-port", 3), ("f-port", 4), ("e-port", 5), ("g-port", 6), ("ex-port", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFCPortBrcdType.setStatus('current')
swFCPortDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 6, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230))).clone(namedValues=NamedValues(("r-recover-fail", 1), ("r-invalid-reason", 2), ("r-forced", 3), ("r-sw-disabled", 4), ("r-bl-disabled", 5), ("r-slot-off", 6), ("r-sw-enabled", 7), ("r-bl-enabled", 8), ("r-slot-on", 9), ("r-persistid", 10), ("r-sw-violation", 11), ("r-prv-dev-violation", 12), ("r-pub-dev-violation", 13), ("r-port-data-fail", 14), ("r-online-incomplete", 15), ("r-online-route-fail", 16), ("r-inconsistent", 17), ("r-set-vcc-fail", 18), ("r-ecp-in-testing", 19), ("r-elp-in-testing", 20), ("r-ecp-retries-exceeded", 21), ("r-invalid-ecp-state", 22), ("r-bad-ecp-rcvd", 23), ("r-send-rtmark-fail", 24), ("r-send-ecp-fail", 25), ("r-save-link-rtt-fail", 26), ("r-em-incnst", 27), ("r-pci-attach-fail", 28), ("r-buf-starv", 29), ("r-elp-fctl-mismatch", 30), ("r-eport-disabled", 31), ("r-trunk-with-vcxlt", 32), ("r-sw-fl-port-not-ready", 33), ("r-link-reinit", 34), ("r-domain-id-change", 35), ("r-auth-rejected", 36), ("r-auth-timeout", 37), ("r-auth-fail-retry", 38), ("r-fcr-conf-mismatch1", 39), ("r-fcr-conf-mismatch2", 40), ("r-fcr-port-ld-mode-mismatch", 41), ("r-fcr-ld-credit-mismatch", 42), ("r-fcr-set-vcc-failed", 43), ("r-fcr-set-rtc-failed", 44), ("r-fcr-elp-ver-inconsis", 45), ("r-fcr-elp-fctl-mismatch", 46), ("r-fcr-pid-mismatch", 47), ("r-fcr-tov-mismatch", 48), ("r-fcr-ld-incompat", 49), ("r-fcr-isolated", 50), ("r-elp-retries-exceeded", 51), ("r-fcr-exports-exceeded", 52), ("r-fcr-license", 53), ("r-fcr-conf-ex", 54), ("r-fcr-ftag-over", 55), ("r-fcr-ftag-conflict", 56), ("r-fcr-fowner-conflict", 57), ("r-fcr-zone-resource", 58), ("r-fcr-port-state-to", 59), ("r-fcr-authn-reject", 60), ("r-fcr-sec-fcs-list", 61), ("r-fcr-sec-failure", 62), ("r-fcr-incompatible-mode", 63), ("r-fcr-sec-scc-list", 64), ("r-fcr-generic", 65), ("r-sw-ex-port-not-ready", 66), ("r-fcr-class-f-incompat", 67), ("r-fcr-class-n-incompat", 68), ("r-fcr-invalid-flow-rcvd", 69), ("r-fcr-state-disabled", 70), ("r-fdd-strict-exist", 71), ("r-last-port-disable-msg", 72), ("r-sw-l-port-not-support", 73), ("r-peer-port-in-di-zone", 74), ("r-zone-incompat", 75), ("r-sw-config-l-port-not-support", 76), ("r-sw-port-mirror-configured", 77), ("r-nportlogin-inprogress", 78), ("r-nonpiv", 79), ("r-nomapping", 80), ("r-unknowntype", 81), ("r-nportoffline", 82), ("r-flogifailed", 83), ("r-nportbusy", 84), ("r-noflogi", 85), ("r-noflogiresp", 86), ("r-flogidupalpa", 87), ("r-loopcfg", 88), ("r-noenclicense", 89), ("r-nofiportmapping", 90), ("r-brcdfabconn", 91), ("r-port-reset", 92), ("r-floginport", 93), ("r-fdd-strict-conflict", 94), ("r-fdd-cfg-conflict", 95), ("r-fdd-cfg-conflict-na-neigh", 96), ("r-fcr-insistent-front-did-mismatch", 97), ("r-fcr-fabric-binding-failure", 98), ("r-fcr-non-standard-domain-offset", 99), ("r-area-in-use", 100), ("r-mstr-diff-pg", 101), ("r-mstr-diff-area", 102), ("r-ta-not-supported", 103), ("r-eport-not-supported", 104), ("r-fport-not-supported", 105), ("r-cfg-not-supported", 106), ("r-port-ll-th-exceeded", 107), ("r-port-synl-th-exceeded", 108), ("r-port-pe-th-exceeded", 109), ("f-port-disable-no-trk-lic", 110), ("r-port-inw-th-exceeded", 111), ("r-port-crc-th-exceeded", 112), ("f-port-tr-disable-speed-not-ok", 113), ("r-port-auto-disable", 114), ("r-fcr-export-in-non-base-sw", 115), ("r-base-switch-supports-no-device", 116), ("r-port-trunk-proto-error", 117), ("r-no-area-avail", 118), ("r-cannot-unbind-existing-area", 119), ("r-cannot-use-10bit-area", 120), ("r-authentication-required", 121), ("r-port-lr-th-exceeded", 122), ("r-fcr-export-lf-conflict", 123), ("r-incompat", 124), ("r-did-overlap", 125), ("r-zone-conflict", 126), ("r-eport-seg", 127), ("r-no-license", 128), ("r-platform-db", 129), ("r-sec-incompat", 130), ("r-sec-violation", 131), ("r-ecp-longdist", 132), ("r-dup-wwn", 133), ("r-eport-isolated", 134), ("r-ad", 135), ("r-esc-did-offset", 136), ("r-esc-etiz", 137), ("r-esc-fid", 138), ("r-safe-zone", 139), ("r-vf", 140), ("r-vf-bs-incompat", 141), ("r-pers-pid-on-lport", 142), ("r-pers-pid-portaddr-collision", 143), ("r-pers-pid-port-on-same-area", 144), ("r-pers-pid-port-addr-bnd", 145), ("r-msfr", 146), ("r-sw-halfbw-lic", 147), ("r-1g-mode-incompat", 148), ("r-10g-mode-incompat", 149), ("r-dual-mode-incompat", 150), ("r-implict-plt-service-block", 151), ("r-port-st-th-exceeded", 152), ("r-port-c3txto-th-exceeded", 153), ("r-eport-not-supported-def-sw", 154), ("r-eport-ll-th-exceeded", 155), ("r-eport-synl-th-exceeded", 156), ("r-eport-pe-th-exceeded", 157), ("r-eport-inw-th-exceeded", 158), ("r-eport-crc-th-exceeded", 159), ("r-eport-lr-th-exceeded", 160), ("r-eport-st-th-exceeded", 161), ("r-eport-c3txto-th-exceeded", 162), ("r-fopport-ll-th-exceeded", 163), ("r-fopport-synl-th-exceeded", 164), ("r-fopport-pe-th-exceeded", 165), ("r-fopport-inw-th-exceeded", 166), ("r-fopport-crc-th-exceeded", 167), ("r-fopport-lr-th-exceeded", 168), ("r-fopport-st-th-exceeded", 169), ("r-fopport-c3txto-th-exceeded", 170), ("r-fcuport-ll-th-exceeded", 171), ("r-fcuport-synl-th-exceeded", 172), ("r-fcuport-pe-th-exceeded", 173), ("r-fcuport-inw-th-exceeded", 174), ("r-fcuport-crc-th-exceeded", 175), ("r-fcuport-lr-th-exceeded", 176), ("r-fcuport-st-th-exceeded", 177), ("r-fcuport-c3txto-th-exceeded", 178), ("r-port-no-area-avail-pers-disable", 179), ("r-eport-locked", 180), ("r-enh-tizone", 181), ("r-sw-port-swap-not-supported", 182), ("r-fport-slow-drain-condition", 183), ("r-esc-vlanid", 184), ("r-port-recov-state", 185), ("r-port-auto-disable-losn", 186), ("r-port-auto-disable-losg", 187), ("r-port-auto-disable-ols", 188), ("r-port-auto-disable-nos", 189), ("r-port-auto-disable-lip", 190), ("r-port-compression", 191), ("r-port-encryption", 192), ("r-port-enccomp-res", 193), ("r-port-decommissioned", 194), ("r-port-dportmode", 195), ("r-port-dport-incompat", 196), ("r-port-enc-comp-mismatch", 197), ("r-non-rcs-rem-dom", 198), ("r-port-fips-comp-mismatch", 199), ("r-port-non-fips-comp-mismatch", 200), ("r-port-enc-auth-disabled", 201), ("r-port-disable-on-zeroize", 202), ("r-cfgspeed-not-supported", 203), ("r-fcr-ex-port-not-allowed", 204), ("r-port-duplicate-pwwn", 205), ("r-fcr-trunk-master-sfid-not-set", 206), ("r-nportistrunkmem", 207), ("r-policynotsupported", 208), ("r-no-icl-license", 209), ("r-no-ten-gig-license", 210), ("r-fdd-strict-scc-conflict", 211), ("r-fdd-strict-dcc-conflict", 212), ("r-fdd-strict-fcs-conflict", 213), ("r-fdd-strict-fabwide-conflict", 214), ("r-fdd-strict-pwd-conflict", 215), ("r-fcr-interop-conf", 216), ("r-port-enc-interop-conflict", 217), ("r-port-comp-interop-conflict", 218), ("r-no-port-open-rsp", 219), ("r-no-eicl-license", 220), ("r-eicl-license-limited", 221), ("r-esc-base-sw", 222), ("r-sw-cpu-overload", 223), ("r-no-icl-pod2-license", 224), ("r-port-area-mismatch-pers-disable", 225), ("r-unauthorized-device", 226), ("r-max-flogi-reached", 227), ("r-auth-not-supported-in-switch", 228), ("r-icl-ex-on-non-vf", 229), ("r-user-disabled-reason", 230))))
if mibBuilder.loadTexts: swFCPortDisableReason.setStatus('current')
swNsLocalNumEntry = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsLocalNumEntry.setStatus('current')
swNsLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: swNsLocalTable.setStatus('current')
swNsLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "SW-MIB", "swNsEntryIndex"))
if mibBuilder.loadTexts: swNsLocalEntry.setStatus('current')
swNsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsEntryIndex.setStatus('current')
swNsPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortID.setStatus('current')
swNsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nPort", 1), ("nlPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortType.setStatus('current')
swNsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 4), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortName.setStatus('current')
swNsPortSymb = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsPortSymb.setStatus('current')
swNsNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 6), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsNodeName.setStatus('current')
swNsNodeSymb = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsNodeSymb.setStatus('current')
swNsIPA = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsIPA.setStatus('current')
swNsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsIpAddress.setStatus('current')
swNsCos = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("class-F", 1), ("class-1", 2), ("class-F-1", 3), ("class-2", 4), ("class-F-2", 5), ("class-1-2", 6), ("class-F-1-2", 7), ("class-3", 8), ("class-F-3", 9), ("class-1-3", 10), ("class-F-1-3", 11), ("class-2-3", 12), ("class-F-2-3", 13), ("class-1-2-3", 14), ("class-F-1-2-3", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsCos.setStatus('current')
swNsFc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsFc4.setStatus('current')
swNsIpNxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsIpNxPort.setStatus('current')
swNsWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsWwn.setStatus('current')
swNsHardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 7, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNsHardAddr.setStatus('current')
swEventTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("critical", 1), ("error", 2), ("warning", 3), ("informational", 4), ("debug", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEventTrapLevel.setStatus('deprecated')
swEventNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventNumEntries.setStatus('current')
swEventTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5), )
if mibBuilder.loadTexts: swEventTable.setStatus('current')
swEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1), ).setIndexNames((0, "SW-MIB", "swEventIndex"))
if mibBuilder.loadTexts: swEventEntry.setStatus('current')
swEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventIndex.setStatus('current')
swEventTimeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventTimeInfo.setStatus('current')
swEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("error", 2), ("warning", 3), ("informational", 4), ("debug", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventLevel.setStatus('current')
swEventRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventRepeatCount.setStatus('current')
swEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventDescr.setStatus('current')
swEventVfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEventVfId.setStatus('current')
class SwFwActs(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))
    namedValues = NamedValues(("swFwNoAction", 0), ("swFwErrlog", 1), ("swFwSnmptrap", 2), ("swFwErrlogSnmptrap", 3), ("swFwPortloglock", 4), ("swFwErrlogPortloglock", 5), ("swFwSnmptrapPortloglock", 6), ("swFwErrlogSnmptrapPortloglock", 7), ("swFwRn", 8), ("swFwElRn", 9), ("swFwStRn", 10), ("swFwElStRn", 11), ("swFwPlRn", 12), ("swFwElPlRn", 13), ("swFwStPlRn", 14), ("swFwElStPlRn", 15), ("swFwMailAlert", 16), ("swFwMailAlertErrlog", 17), ("swFwMailAlertSnmptrap", 18), ("swFwMailAlertErrlogSnmptrap", 19), ("swFwMailAlertPortloglock", 20), ("swFwMailAlertErrlogPortloglock", 21), ("swFwMailAlertSnmptrapPortloglock", 22), ("swFwMailAlertErrlogSnmptrapPortloglock", 23), ("swFwMailAlertRn", 24), ("swFwElMailAlertRn", 25), ("swFwMailAlertStRn", 26), ("swFwMailAlertElStRn", 27), ("swFwMailAlertPlRn", 28), ("swFwMailAlertElPlRn", 29), ("swFwMailAlertStPlRn", 30), ("swFwMailAlertElStPlRn", 31), ("swFwPf", 32), ("swFwElPf", 33), ("swFwStPf", 34), ("swFwElStPf", 35), ("swFwPlPf", 36), ("swFwElPlPf", 37), ("swFwStPlPf", 38), ("swFwElStPlPf", 39), ("swFwRnPf", 40), ("swFwElRnPf", 41), ("swFwStRnPf", 42), ("swFwElStRnPf", 43), ("swFwPlRnPf", 44), ("swFwElPlRnPf", 45), ("swFwStPlRnPf", 46), ("swFwElStPlRnPf", 47), ("swFwMailAlertPf", 48), ("swFwMailAlertElPf", 49), ("swFwMailAlertStPf", 50), ("swFwMailAlertElStPf", 51), ("swFwMailAlertPlPf", 52), ("swFwMailAlertElPlPf", 53), ("swFwMailAlertStPlPf", 54), ("swFwMailAlertElStPlPf", 55), ("swFwMailAlertRnPf", 56), ("swFwMailAlertElRnPf", 57), ("swFwMailAlertStRnPf", 58), ("swFwMailAlertElStRnPf", 59), ("swFwMailAlertPlRnPf", 60), ("swFwMailAlertElPlRnPf", 61), ("swFwMailAlertStPlRnPf", 62), ("swFwMailAlertElStPlRnPf", 63))

class SwFwLevels(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("swFwReserved", 1), ("swFwDefault", 2), ("swFwCustom", 3))

class SwFwClassesAreas(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152))
    namedValues = NamedValues(("swFwEnvTemp", 1), ("swFwEnvFan", 2), ("swFwEnvPs", 3), ("swFwTransceiverTemp", 4), ("swFwTransceiverRxp", 5), ("swFwTransceiverTxp", 6), ("swFwTransceiverCurrent", 7), ("swFwPortLink", 8), ("swFwPortSync", 9), ("swFwPortSignal", 10), ("swFwPortPe", 11), ("swFwPortWords", 12), ("swFwPortCrcs", 13), ("swFwPortRXPerf", 14), ("swFwPortTXPerf", 15), ("swFwPortState", 16), ("swFwFabricEd", 17), ("swFwFabricFr", 18), ("swFwFabricDi", 19), ("swFwFabricSc", 20), ("swFwFabricZc", 21), ("swFwFabricFq", 22), ("swFwFabricFl", 23), ("swFwFabricGs", 24), ("swFwEPortLink", 25), ("swFwEPortSync", 26), ("swFwEPortSignal", 27), ("swFwEPortPe", 28), ("swFwEPortWords", 29), ("swFwEPortCrcs", 30), ("swFwEPortRXPerf", 31), ("swFwEPortTXPerf", 32), ("swFwEPortState", 33), ("swFwFCUPortLink", 34), ("swFwFCUPortSync", 35), ("swFwFCUPortSignal", 36), ("swFwFCUPortPe", 37), ("swFwFCUPortWords", 38), ("swFwFCUPortCrcs", 39), ("swFwFCUPortRXPerf", 40), ("swFwFCUPortTXPerf", 41), ("swFwFCUPortState", 42), ("swFwFOPPortLink", 43), ("swFwFOPPortSync", 44), ("swFwFOPPortSignal", 45), ("swFwFOPPortPe", 46), ("swFwFOPPortWords", 47), ("swFwFOPPortCrcs", 48), ("swFwFOPPortRXPerf", 49), ("swFwFOPPortTXPerf", 50), ("swFwFOPPortState", 51), ("swFwPerfALPACRC", 52), ("swFwPerfEToECRC", 53), ("swFwPerfEToERxCnt", 54), ("swFwPerfEToETxCnt", 55), ("swFwPerffltCusDef", 56), ("swFwTransceiverVoltage", 57), ("swFwSecTelnetViolations", 58), ("swFwSecHTTPViolations", 59), ("swFwSecAPIViolations", 60), ("swFwSecRSNMPViolations", 61), ("swFwSecWSNMPViolations", 62), ("swFwSecSESViolations", 63), ("swFwSecMSViolations", 64), ("swFwSecSerialViolations", 65), ("swFwSecFPViolations", 66), ("swFwSecSCCViolations", 67), ("swFwSecDCCViolations", 68), ("swFwSecLoginViolations", 69), ("swFwSecInvalidTS", 70), ("swFwSecInvalidSign", 71), ("swFwSecInvalidCert", 72), ("swFwSecSlapFail", 73), ("swFwSecSlapBadPkt", 74), ("swFwSecTSOutSync", 75), ("swFwSecNoFcs", 76), ("swFwSecIncompDB", 77), ("swFwSecIllegalCmd", 78), ("swFwSAMTotalDownTime", 79), ("swFwSAMTotalUpTime", 80), ("swFwSAMDurationOfOccur", 81), ("swFwSAMFreqOfOccur", 82), ("swFwResourceFlash", 83), ("swFwEPortUtil", 84), ("swFwEPortPktl", 85), ("swFwPortLr", 86), ("swFwEPortLr", 87), ("swFwFCUPortLr", 88), ("swFwFOPPortLr", 89), ("swFwPortC3Discard", 90), ("swFwEPortC3Discard", 91), ("swFwFCUPortC3Discard", 92), ("swFwFOPPortC3Discard", 93), ("swFwVEPortStateChange", 94), ("swFwVEPortUtil", 95), ("swFwVEPortPktLoss", 96), ("swFwEPortTrunkUtil", 97), ("swFwFCUPortTrunkUtil", 98), ("swFwFOPPortTrunkUtil", 99), ("swFwCPUMemUsage", 100), ("filterFmCfg1", 101), ("filterFmCfg2", 102), ("filterFmCfg3", 103), ("filterFmCfg4", 104), ("filterFmCfg5", 105), ("filterFmCfg6", 106), ("filterFmCfg7", 107), ("filterFmCfg8", 108), ("filterFmCfg9", 109), ("filterFmCfg10", 110), ("filterFmCfg11", 111), ("filterFmCfg12", 112), ("filterFmCfg13", 113), ("filterFmCfg14", 114), ("filterFmCfg15", 115), ("filterFmCfg16", 116), ("filterFmCfg17", 117), ("filterFmCfg18", 118), ("filterFmCfg19", 119), ("filterFmCfg20", 120), ("filterFmCfg21", 121), ("filterFmCfg22", 122), ("filterFmCfg23", 123), ("filterFmCfg24", 124), ("filterFmCfg25", 125), ("filterFmCfg26", 126), ("filterFmCfg27", 127), ("filterFmCfg28", 128), ("filterFmCfg29", 129), ("filterFmCfg30", 130), ("filterFmCfg31", 131), ("filterFmCfg32", 132), ("filterFmCfg33", 133), ("filterFmCfg34", 134), ("filterFmCfg35", 135), ("filterFmCfg36", 136), ("filterFmCfg37", 137), ("filterFmCfg38", 138), ("filterFmCfg39", 139), ("filterFmCfg40", 140), ("filterFmCfg41", 141), ("filterFmCfg42", 142), ("filterFmCfg43", 143), ("filterFmCfg44", 144), ("filterFmCfg45", 145), ("filterFmCfg46", 146), ("filterFmCfg47", 147), ("filterFmCfg48", 148), ("filterFmCfg49", 149), ("filterFmCfg50", 150), ("filterFmCfg51", 151), ("swFwPowerOnHours", 152))

class SwFwWriteVals(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("swFwCancelWrite", 1), ("swFwApplyWrite", 2))

class SwFwTimebase(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("swFwTbNone", 1), ("swFwTbSec", 2), ("swFwTbMin", 3), ("swFwTbHour", 4), ("swFwTbDay", 5))

class SwFwStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class SwFwEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("started", 1), ("changed", 2), ("exceeded", 3), ("below", 4), ("above", 5), ("inBetween", 6), ("lowBufferCrsd", 7))

class SwFwBehavior(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("triggered", 1), ("continuous", 2))

class SwFwState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("swFwInformative", 1), ("swFwNormal", 2), ("swFwFaulty", 3))

class SwFwLicense(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("swFwLicensed", 1), ("swFwNotLicensed", 2))

swFwFabricWatchLicense = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 1), SwFwLicense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwFabricWatchLicense.setStatus('current')
swFwClassAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2), )
if mibBuilder.loadTexts: swFwClassAreaTable.setStatus('current')
swFwClassAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1), ).setIndexNames((0, "SW-MIB", "swFwClassAreaIndex"))
if mibBuilder.loadTexts: swFwClassAreaEntry.setStatus('current')
swFwClassAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 1), SwFwClassesAreas()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwClassAreaIndex.setStatus('current')
swFwWriteThVals = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 2), SwFwWriteVals()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwWriteThVals.setStatus('current')
swFwDefaultUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultUnit.setStatus('current')
swFwDefaultTimebase = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 4), SwFwTimebase()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultTimebase.setStatus('current')
swFwDefaultLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultLow.setStatus('current')
swFwDefaultHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultHigh.setStatus('current')
swFwDefaultBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultBufSize.setStatus('current')
swFwCustUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwCustUnit.setStatus('current')
swFwCustTimebase = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 9), SwFwTimebase()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustTimebase.setStatus('current')
swFwCustLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustLow.setStatus('current')
swFwCustHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustHigh.setStatus('current')
swFwCustBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustBufSize.setStatus('current')
swFwThLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 13), SwFwLevels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwThLevel.setStatus('current')
swFwWriteActVals = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 14), SwFwWriteVals()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwWriteActVals.setStatus('current')
swFwDefaultChangedActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 15), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultChangedActs.setStatus('current')
swFwDefaultExceededActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 16), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultExceededActs.setStatus('current')
swFwDefaultBelowActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 17), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultBelowActs.setStatus('current')
swFwDefaultAboveActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 18), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultAboveActs.setStatus('current')
swFwDefaultInBetweenActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 19), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwDefaultInBetweenActs.setStatus('current')
swFwCustChangedActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 20), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustChangedActs.setStatus('current')
swFwCustExceededActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 21), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustExceededActs.setStatus('current')
swFwCustBelowActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 22), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustBelowActs.setStatus('current')
swFwCustAboveActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 23), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustAboveActs.setStatus('current')
swFwCustInBetweenActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 24), SwFwActs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwCustInBetweenActs.setStatus('current')
swFwValidActs = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 25), SwFwActs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwValidActs.setStatus('current')
swFwActLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 2, 1, 26), SwFwLevels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwActLevel.setStatus('current')
swFwThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3), )
if mibBuilder.loadTexts: swFwThresholdTable.setStatus('current')
swFwThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1), ).setIndexNames((0, "SW-MIB", "swFwClassAreaIndex"), (0, "SW-MIB", "swFwThresholdIndex"))
if mibBuilder.loadTexts: swFwThresholdEntry.setStatus('current')
swFwThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwThresholdIndex.setStatus('current')
swFwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 2), SwFwStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwStatus.setStatus('current')
swFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwName.setStatus('current')
swFwLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLabel.setStatus('current')
swFwCurVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwCurVal.setStatus('current')
swFwLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 6), SwFwEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastEvent.setStatus('current')
swFwLastEventVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastEventVal.setStatus('current')
swFwLastEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastEventTime.setStatus('current')
swFwLastState = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 9), SwFwState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastState.setStatus('current')
swFwBehaviorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 10), SwFwBehavior()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwBehaviorType.setStatus('current')
swFwBehaviorInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFwBehaviorInt.setStatus('current')
swFwLastSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 10, 3, 1, 12), SwSevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwLastSeverityLevel.setStatus('current')
swEndDeviceRlsTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1), )
if mibBuilder.loadTexts: swEndDeviceRlsTable.setStatus('current')
swEndDeviceRlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1), ).setIndexNames((0, "SW-MIB", "swEndDevicePort"), (0, "SW-MIB", "swEndDeviceAlpa"))
if mibBuilder.loadTexts: swEndDeviceRlsEntry.setStatus('current')
swEndDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: swEndDevicePort.setStatus('current')
swEndDeviceAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: swEndDeviceAlpa.setStatus('current')
swEndDevicePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDevicePortID.setStatus('current')
swEndDeviceLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceLinkFailure.setStatus('current')
swEndDeviceSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceSyncLoss.setStatus('current')
swEndDeviceSigLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceSigLoss.setStatus('current')
swEndDeviceProtoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceProtoErr.setStatus('current')
swEndDeviceInvalidWord = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceInvalidWord.setStatus('current')
swEndDeviceInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 21, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEndDeviceInvalidCRC.setStatus('current')
swGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1), )
if mibBuilder.loadTexts: swGroupTable.setStatus('obsolete')
swGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1), ).setIndexNames((0, "SW-MIB", "swGroupIndex"))
if mibBuilder.loadTexts: swGroupEntry.setStatus('obsolete')
swGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupIndex.setStatus('obsolete')
swGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupName.setStatus('obsolete')
swGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupType.setStatus('obsolete')
swGroupMemTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2), )
if mibBuilder.loadTexts: swGroupMemTable.setStatus('obsolete')
swGroupMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1), ).setIndexNames((0, "SW-MIB", "swGroupId"), (0, "SW-MIB", "swGroupMemWwn"))
if mibBuilder.loadTexts: swGroupMemEntry.setStatus('obsolete')
swGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupId.setStatus('obsolete')
swGroupMemWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1, 2), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupMemWwn.setStatus('obsolete')
swGroupMemPos = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGroupMemPos.setStatus('obsolete')
swBlmPerfALPAMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1), )
if mibBuilder.loadTexts: swBlmPerfALPAMntTable.setStatus('current')
swBlmPerfALPAMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1), ).setIndexNames((0, "SW-MIB", "swBlmPerfAlpaPort"), (0, "SW-MIB", "swBlmPerfAlpaIndx"))
if mibBuilder.loadTexts: swBlmPerfALPAMntEntry.setStatus('current')
swBlmPerfAlpaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpaPort.setStatus('current')
swBlmPerfAlpaIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpaIndx.setStatus('current')
swBlmPerfAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpa.setStatus('current')
swBlmPerfAlpaCRCCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfAlpaCRCCnt.setStatus('current')
swBlmPerfEEMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2), )
if mibBuilder.loadTexts: swBlmPerfEEMntTable.setStatus('current')
swBlmPerfEEMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1), ).setIndexNames((0, "SW-MIB", "swBlmPerfEEPort"), (0, "SW-MIB", "swBlmPerfEERefKey"))
if mibBuilder.loadTexts: swBlmPerfEEMntEntry.setStatus('current')
swBlmPerfEEPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEPort.setStatus('current')
swBlmPerfEERefKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEERefKey.setStatus('current')
swBlmPerfEECRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEECRC.setStatus('current')
swBlmPerfEEFCWRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEFCWRx.setStatus('current')
swBlmPerfEEFCWTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEFCWTx.setStatus('current')
swBlmPerfEESid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEESid.setStatus('current')
swBlmPerfEEDid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfEEDid.setStatus('current')
swBlmPerfFltMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3), )
if mibBuilder.loadTexts: swBlmPerfFltMntTable.setStatus('current')
swBlmPerfFltMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1), ).setIndexNames((0, "SW-MIB", "swBlmPerfFltPort"), (0, "SW-MIB", "swBlmPerfFltRefkey"))
if mibBuilder.loadTexts: swBlmPerfFltMntEntry.setStatus('current')
swBlmPerfFltPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltPort.setStatus('current')
swBlmPerfFltRefkey = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltRefkey.setStatus('current')
swBlmPerfFltCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltCnt.setStatus('current')
swBlmPerfFltAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 23, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBlmPerfFltAlias.setStatus('current')
swSwitchTrunkable = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 0))).clone(namedValues=NamedValues(("yes", 8), ("no", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSwitchTrunkable.setStatus('current')
swTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2), )
if mibBuilder.loadTexts: swTrunkTable.setStatus('current')
swTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1), ).setIndexNames((0, "SW-MIB", "swTrunkPortIndex"))
if mibBuilder.loadTexts: swTrunkEntry.setStatus('current')
swTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkPortIndex.setStatus('current')
swTrunkGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGroupNumber.setStatus('current')
swTrunkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 3), SwTrunkMaster()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkMaster.setStatus('current')
swPortTrunked = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunked.setStatus('current')
swTrunkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3), )
if mibBuilder.loadTexts: swTrunkGrpTable.setStatus('current')
swTrunkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1), ).setIndexNames((0, "SW-MIB", "swTrunkGrpNumber"))
if mibBuilder.loadTexts: swTrunkGrpEntry.setStatus('current')
swTrunkGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpNumber.setStatus('current')
swTrunkGrpMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 2), SwTrunkMaster()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpMaster.setStatus('current')
swTrunkGrpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpTx.setStatus('current')
swTrunkGrpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 24, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrunkGrpRx.setStatus('current')
swTopTalkerMntMode = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fabricmode", 1), ("portmode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntMode.setStatus('current')
swTopTalkerMntNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntNumEntries.setStatus('current')
swTopTalkerMntTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3), )
if mibBuilder.loadTexts: swTopTalkerMntTable.setStatus('current')
swTopTalkerMntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1), ).setIndexNames((0, "SW-MIB", "swTopTalkerMntIndex"))
if mibBuilder.loadTexts: swTopTalkerMntEntry.setStatus('current')
swTopTalkerMntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntIndex.setStatus('current')
swTopTalkerMntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntPort.setStatus('current')
swTopTalkerMntSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntSpid.setStatus('current')
swTopTalkerMntDpid = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntDpid.setStatus('current')
swTopTalkerMntflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntflow.setStatus('current')
swTopTalkerMntSwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 6), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntSwwn.setStatus('current')
swTopTalkerMntDwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 25, 3, 1, 7), FcWwn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTopTalkerMntDwwn.setStatus('current')
swCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuUsage.setStatus('current')
swCpuNoOfRetries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuNoOfRetries.setStatus('current')
swCpuUsageLimit = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuUsageLimit.setStatus('current')
swCpuPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuPollingInterval.setStatus('current')
swCpuAction = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("raslog", 1), ("snmp", 2), ("raslogandSnmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAction.setStatus('current')
swMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsage.setStatus('current')
swMemNoOfRetries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemNoOfRetries.setStatus('current')
swMemUsageLimit = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsageLimit.setStatus('current')
swMemPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemPollingInterval.setStatus('current')
swMemAction = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("raslog", 1), ("snmp", 2), ("raslogandSnmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemAction.setStatus('current')
swMemUsageLimit1 = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsageLimit1.setStatus('current')
swMemUsageLimit3 = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 26, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsageLimit3.setStatus('current')
swConnUnitPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1), )
connUnitPortStatEntry.registerAugmentions(("SW-MIB", "swConnUnitPortStatEntry"))
swConnUnitPortStatEntry.setIndexNames(*connUnitPortStatEntry.getIndexNames())
if mibBuilder.loadTexts: swConnUnitPortStatEntry.setStatus('current')
swConnUnitCRCWithBadEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitCRCWithBadEOF.setStatus('current')
swConnUnitZeroTenancy = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitZeroTenancy.setStatus('current')
swConnUnitFLNumOfTenancy = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFLNumOfTenancy.setStatus('current')
swConnUnitNLNumOfTenancy = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitNLNumOfTenancy.setStatus('current')
swConnUnitStopTenancyStarVation = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitStopTenancyStarVation.setStatus('current')
swConnUnitOpend = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitOpend.setStatus('current')
swConnUnitTransferConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitTransferConnection.setStatus('current')
swConnUnitOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitOpen.setStatus('current')
swConnUnitInvalidARB = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitInvalidARB.setStatus('current')
swConnUnitFTB1Miss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFTB1Miss.setStatus('current')
swConnUnitFTB2Miss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFTB2Miss.setStatus('current')
swConnUnitFTB6Miss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFTB6Miss.setStatus('current')
swConnUnitZoneMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitZoneMiss.setStatus('current')
swConnUnitLunZoneMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitLunZoneMiss.setStatus('current')
swConnUnitBadEOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitBadEOF.setStatus('current')
swConnUnitLCRX = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitLCRX.setStatus('current')
swConnUnitRDYPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitRDYPriority.setStatus('current')
swConnUnitLli = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitLli.setStatus('current')
swConnUnitInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitInterrupts.setStatus('current')
swConnUnitUnknownInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitUnknownInterrupts.setStatus('current')
swConnUnitTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitTimedOut.setStatus('current')
swConnUnitProcRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitProcRequired.setStatus('current')
swConnUnitTxBufferUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitTxBufferUnavailable.setStatus('current')
swConnUnitStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitStateChange.setStatus('current')
swConnUnitC3DiscardDueToRXTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToRXTimeout.setStatus('current')
swConnUnitC3DiscardDueToDestUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToDestUnreachable.setStatus('current')
swConnUnitC3DiscardDueToTXTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardDueToTXTimeout.setStatus('current')
swConnUnitC3DiscardOther = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitC3DiscardOther.setStatus('current')
swConnUnitPCSErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitPCSErrorCounter.setStatus('current')
swConnUnitUnroutableFrameCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitUnroutableFrameCounter.setStatus('current')
swConnUnitFECCorrectedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFECCorrectedCounter.setStatus('current')
swConnUnitFECUnCorrectedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 27, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swConnUnitFECUnCorrectedCounter.setStatus('current')
swTrapsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0))
if mibBuilder.loadTexts: swTrapsV2.setStatus('current')
swFault = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 1)).setObjects(("SW-MIB", "swDiagResult"), ("SW-MIB", "swSsn"))
if mibBuilder.loadTexts: swFault.setStatus('obsolete')
swSensorScn = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 2)).setObjects(("SW-MIB", "swSensorStatus"), ("SW-MIB", "swSensorIndex"), ("SW-MIB", "swSensorType"), ("SW-MIB", "swSensorValue"), ("SW-MIB", "swSensorInfo"), ("SW-MIB", "swSsn"))
if mibBuilder.loadTexts: swSensorScn.setStatus('current')
swFCPortScn = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 3)).setObjects(("SW-MIB", "swFCPortOpStatus"), ("SW-MIB", "swFCPortIndex"), ("SW-MIB", "swFCPortName"), ("SW-MIB", "swFCPortWwn"), ("SW-MIB", "swFCPortPrevType"), ("SW-MIB", "swFCPortBrcdType"), ("SW-MIB", "swSsn"), ("SW-MIB", "swFCPortFlag"), ("SW-MIB", "swFCPortDisableReason"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swFCPortScn.setStatus('current')
swEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 4)).setObjects(("SW-MIB", "swEventIndex"), ("SW-MIB", "swEventTimeInfo"), ("SW-MIB", "swEventLevel"), ("SW-MIB", "swEventRepeatCount"), ("SW-MIB", "swEventDescr"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swEventTrap.setStatus('current')
swFabricWatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 5)).setObjects(("SW-MIB", "swFwClassAreaIndex"), ("SW-MIB", "swFwThresholdIndex"), ("SW-MIB", "swFwName"), ("SW-MIB", "swFwLabel"), ("SW-MIB", "swFwLastEventVal"), ("SW-MIB", "swFwLastEventTime"), ("SW-MIB", "swFwLastEvent"), ("SW-MIB", "swFwLastState"), ("SW-MIB", "swFwLastSeverityLevel"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swFabricWatchTrap.setStatus('current')
swTrackChangesTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 6)).setObjects(("SW-MIB", "swTrackChangesInfo"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swTrackChangesTrap.setStatus('current')
swIPv6ChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 7)).setObjects(("SW-MIB", "swIPv6Address"), ("SW-MIB", "swIPv6Status"))
if mibBuilder.loadTexts: swIPv6ChangeTrap.setStatus('current')
swPmgrEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 8)).setObjects(("SW-MIB", "swPmgrEventType"), ("SW-MIB", "swPmgrEventTime"), ("SW-MIB", "swPmgrEventDescr"), ("SW-MIB", "swSsn"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swPmgrEventTrap.setStatus('current')
swFabricReconfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 9)).setObjects(("SW-MIB", "swDomainID"))
if mibBuilder.loadTexts: swFabricReconfigTrap.setStatus('current')
swFabricSegmentTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 10)).setObjects(("SW-MIB", "swFCPortIndex"), ("SW-MIB", "swFCPortName"), ("SW-MIB", "swSsn"), ("SW-MIB", "swFCPortFlag"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swFabricSegmentTrap.setStatus('current')
swExtTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 11))
if mibBuilder.loadTexts: swExtTrap.setStatus('current')
swStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 12)).setObjects(("SW-MIB", "swOperStatus"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swStateChangeTrap.setStatus('current')
swPortMoveTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 13)).setObjects(("SW-MIB", "swPortList"), ("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swPortMoveTrap.setStatus('current')
swBrcdGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 14)).setObjects(("SW-MIB", "swBrcdTrapBitMask"))
if mibBuilder.loadTexts: swBrcdGenericTrap.setStatus('current')
swDeviceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 15)).setObjects(("SW-MIB", "swFCPortSpecifier"), ("SW-MIB", "swDeviceStatus"), ("SW-MIB", "swEndDevicePortID"), ("SW-MIB", "swNsNodeName"))
if mibBuilder.loadTexts: swDeviceStatusTrap.setStatus('current')
swZoneConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 1, 0, 16)).setObjects(("SW-MIB", "swVfId"))
if mibBuilder.loadTexts: swZoneConfigChangeTrap.setStatus('current')
mibBuilder.exportSymbols("SW-MIB", swConnUnitProcRequired=swConnUnitProcRequired, swFabricMemFCIP=swFabricMemFCIP, swID=swID, swMibModule=swMibModule, swDeviceStatus=swDeviceStatus, swFCPortName=swFCPortName, swFwDefaultChangedActs=swFwDefaultChangedActs, swNsNodeName=swNsNodeName, swNsCos=swNsCos, swGroupMemWwn=swGroupMemWwn, swNbEntry=swNbEntry, swEndDeviceSyncLoss=swEndDeviceSyncLoss, swFwLastSeverityLevel=swFwLastSeverityLevel, PYSNMP_MODULE_ID=swMibModule, swConnUnitOpend=swConnUnitOpend, swNsLocalNumEntry=swNsLocalNumEntry, swTrapsV2=swTrapsV2, swEndDeviceInvalidWord=swEndDeviceInvalidWord, swPortList=swPortList, swConnUnitFTB6Miss=swConnUnitFTB6Miss, swFCPortRxEncOutFrs=swFCPortRxEncOutFrs, swAgtTrapRcp=swAgtTrapRcp, swTopTalker=swTopTalker, swMemUsageLimit=swMemUsageLimit, swMemPollingInterval=swMemPollingInterval, swNsLocalEntry=swNsLocalEntry, swTrunkPortIndex=swTrunkPortIndex, sw21kN24k=sw21kN24k, swDomainID=swDomainID, swNbIndex=swNbIndex, swNbRemDomain=swNbRemDomain, swFabric=swFabric, swSensorStatus=swSensorStatus, swGroupName=swGroupName, swFCPortLinkState=swFCPortLinkState, swNbIslCost=swNbIslCost, swFCPortTxMcasts=swFCPortTxMcasts, swConnUnitC3DiscardDueToDestUnreachable=swConnUnitC3DiscardDueToDestUnreachable, swFCPortRxBadEofs=swFCPortRxBadEofs, swTopTalkerMntDwwn=swTopTalkerMntDwwn, swEventTrap=swEventTrap, swBlmPerfFltAlias=swBlmPerfFltAlias, swAgtCfg=swAgtCfg, swEventIndex=swEventIndex, swNsHardAddr=swNsHardAddr, swFCPortC3Discards=swFCPortC3Discards, SwFwWriteVals=SwFwWriteVals, swBlmPerfEECRC=swBlmPerfEECRC, swIPv6ChangeTrap=swIPv6ChangeTrap, swFCPortSpeed=swFCPortSpeed, swFwValidActs=swFwValidActs, swBlmPerfFltPort=swBlmPerfFltPort, swAgtCmtyEntry=swAgtCmtyEntry, swFwWriteActVals=swFwWriteActVals, swFwCustUnit=swFwCustUnit, swFCPortRxBadOs=swFCPortRxBadOs, swConnUnitFTB1Miss=swConnUnitFTB1Miss, swNbBaudRate=swNbBaudRate, swBlmPerfEEMntEntry=swBlmPerfEEMntEntry, swFwCustHigh=swFwCustHigh, swConnUnitFECUnCorrectedCounter=swConnUnitFECUnCorrectedCounter, swFCPortScn=swFCPortScn, swNbMyPort=swNbMyPort, swTrunkMaster=swTrunkMaster, swBlmPerfFltRefkey=swBlmPerfFltRefkey, swConnUnitTimedOut=swConnUnitTimedOut, swFwStatus=swFwStatus, swFCPortAdmStatus=swFCPortAdmStatus, swSensorType=swSensorType, swBlmPerfEEPort=swBlmPerfEEPort, swFCPortRxTooLongs=swFCPortRxTooLongs, swBlmPerfEEMntTable=swBlmPerfEEMntTable, swVfName=swVfName, swGroupTable=swGroupTable, swSensorTable=swSensorTable, swFwDefaultLow=swFwDefaultLow, swMemUsageLimit1=swMemUsageLimit1, swConnUnitLunZoneMiss=swConnUnitLunZoneMiss, swAdmStatus=swAdmStatus, swNsIpNxPort=swNsIpNxPort, swConnUnitFLNumOfTenancy=swConnUnitFLNumOfTenancy, SwFwActs=SwFwActs, swEndDeviceAlpa=swEndDeviceAlpa, swConnUnitCRCWithBadEOF=swConnUnitCRCWithBadEOF, swConnUnitC3DiscardDueToRXTimeout=swConnUnitC3DiscardDueToRXTimeout, swFwLastEvent=swFwLastEvent, swIPv6Status=swIPv6Status, swEndDeviceLinkFailure=swEndDeviceLinkFailure, swPmgrEventType=swPmgrEventType, swTrunkGrpEntry=swTrunkGrpEntry, swEventTrapLevel=swEventTrapLevel, swFabricMemGWIP=swFabricMemGWIP, swNsPortID=swNsPortID, swFCPortDisableReason=swFCPortDisableReason, swEvent=swEvent, swFlashDLOperStatus=swFlashDLOperStatus, swFCIPAddress=swFCIPAddress, swFwDefaultHigh=swFwDefaultHigh, swTrackChangesInfo=swTrackChangesInfo, swFCPortSpecifier=swFCPortSpecifier, swNsPortSymb=swNsPortSymb, swOperStatus=swOperStatus, swDiagResult=swDiagResult, swVfId=swVfId, swPortTrunked=swPortTrunked, swFCPortPrevType=swFCPortPrevType, swFwCustAboveActs=swFwCustAboveActs, swConnUnitC3DiscardDueToTXTimeout=swConnUnitC3DiscardDueToTXTimeout, swFault=swFault, swConnUnitStateChange=swConnUnitStateChange, swEndDeviceRlsTable=swEndDeviceRlsTable, swBlmPerfEEFCWTx=swBlmPerfEEFCWTx, swFCPortTxWords=swFCPortTxWords, swBlmPerfEERefKey=swBlmPerfEERefKey, swTopTalkerMntflow=swTopTalkerMntflow, swFCPortTxType=swFCPortTxType, swSsn=swSsn, swModule=swModule, swSensorIndex=swSensorIndex, swBlmPerfALPAMntTable=swBlmPerfALPAMntTable, swFwBehaviorType=swFwBehaviorType, swFlashDLUser=swFlashDLUser, swFwDefaultAboveActs=swFwDefaultAboveActs, swPmgrEventTrap=swPmgrEventTrap, swConnUnitTransferConnection=swConnUnitTransferConnection, swFabricMemEntry=swFabricMemEntry, swEventDescr=swEventDescr, swBeaconAdmStatus=swBeaconAdmStatus, swNbIslState=swNbIslState, swFCPortRxLCs=swFCPortRxLCs, swFCPortTooManyRdys=swFCPortTooManyRdys, swSwitchTrunkable=swSwitchTrunkable, swEndDevicePortID=swEndDevicePortID, swTopTalkerMntDpid=swTopTalkerMntDpid, swMemUsage=swMemUsage, swTrackChangesTrap=swTrackChangesTrap, swFCPortCapacity=swFCPortCapacity, swFwDefaultTimebase=swFwDefaultTimebase, swFabricMemWwn=swFabricMemWwn, swFCPortMcastTimedOuts=swFCPortMcastTimedOuts, swCpuNoOfRetries=swCpuNoOfRetries, swGroupIndex=swGroupIndex, swGroupType=swGroupType, swTrunkGrpRx=swTrunkGrpRx, swBootPromLastUpdated=swBootPromLastUpdated, swConnUnitFTB2Miss=swConnUnitFTB2Miss, swFCPortTxFrames=swFCPortTxFrames, swNbRemPort=swNbRemPort, swNsPortName=swNsPortName, swFwCustBufSize=swFwCustBufSize, swMemUsageLimit3=swMemUsageLimit3, swFwCustTimebase=swFwCustTimebase, swMemAction=swMemAction, swFWLastUpdated=swFWLastUpdated, swFCPortTable=swFCPortTable, swFwFabricWatchLicense=swFwFabricWatchLicense, swConnUnitZoneMiss=swConnUnitZoneMiss, swFwSystem=swFwSystem, swZoneConfigChangeTrap=swZoneConfigChangeTrap, swFCPortRxFrames=swFCPortRxFrames, swFwCustInBetweenActs=swFwCustInBetweenActs, swBrcdGenericTrap=swBrcdGenericTrap, swGroupEntry=swGroupEntry, swCpuUsage=swCpuUsage, SwFwLevels=SwFwLevels, SwFwEvent=SwFwEvent, swConnUnitInvalidARB=swConnUnitInvalidARB, swConnUnitRDYPriority=swConnUnitRDYPriority, swConnUnitFECCorrectedCounter=swConnUnitFECCorrectedCounter, swFwClassAreaTable=swFwClassAreaTable, swConnUnitC3DiscardOther=swConnUnitC3DiscardOther, swFCPortLipOuts=swFCPortLipOuts, swNsPortType=swNsPortType, swSensorInfo=swSensorInfo, swFabricMemName=swFabricMemName, swTrunkGrpMaster=swTrunkGrpMaster, swEventTable=swEventTable, swMemNoOfRetries=swMemNoOfRetries, swBlmPerfMnt=swBlmPerfMnt, swFCPortRxTruncs=swFCPortRxTruncs, swBeaconOperStatus=swBeaconOperStatus, swStateChangeTrap=swStateChangeTrap, swCpuOrMemoryUsage=swCpuOrMemoryUsage, swFabricMemTable=swFabricMemTable, swFCPortType=swFCPortType, swConnUnitPortStatEntry=swConnUnitPortStatEntry, swGroupMemPos=swGroupMemPos, swBootDate=swBootDate, sw20x0=sw20x0, swFabricMemType=swFabricMemType, swFwDefaultExceededActs=swFwDefaultExceededActs, swFlashDLAdmStatus=swFlashDLAdmStatus, swBlmPerfAlpa=swBlmPerfAlpa, swFwWriteThVals=swFwWriteThVals, swBlmPerfFltMntTable=swBlmPerfFltMntTable, swTopTalkerMntEntry=swTopTalkerMntEntry, swNbRemPortName=swNbRemPortName, swFCPortLipIns=swFCPortLipIns, swNsWwn=swNsWwn, swEventNumEntries=swEventNumEntries, swFwActLevel=swFwActLevel, SwFwLicense=SwFwLicense, swGroupId=swGroupId, swFlashDLPassword=swFlashDLPassword, swEndDeviceProtoErr=swEndDeviceProtoErr, swFCport=swFCport, swFCPortRxCrcs=swFCPortRxCrcs, swEventTimeInfo=swEventTimeInfo, swEventVfId=swEventVfId, swEtherIPAddress=swEtherIPAddress, swFwBehaviorInt=swFwBehaviorInt, swFabricMemShortVersion=swFabricMemShortVersion, swGroupMemTable=swGroupMemTable, swCurrentDate=swCurrentDate, swNs=swNs, swFCPortNoTxCredits=swFCPortNoTxCredits, swFwThresholdTable=swFwThresholdTable, swConnUnitLCRX=swConnUnitLCRX, swBlmPerfALPAMntEntry=swBlmPerfALPAMntEntry, swTelnetShellAdmStatus=swTelnetShellAdmStatus, SwSevType=SwSevType, swFwThLevel=swFwThLevel, swEndDeviceSigLoss=swEndDeviceSigLoss, swFirmwareVersion=swFirmwareVersion, SwFwTimebase=SwFwTimebase, swFwLastState=swFwLastState, swNumNbs=swNumNbs, swFCPortIndex=swFCPortIndex, swPortMoveTrap=swPortMoveTrap, swFwCurVal=swFwCurVal, swFCPortRxMcasts=swFCPortRxMcasts, swSystem=swSystem, swFCPortBrcdType=swFCPortBrcdType, swEndDeviceRlsEntry=swEndDeviceRlsEntry, sw=sw, swBlmPerfEEDid=swBlmPerfEEDid, swConnUnitBadEOF=swConnUnitBadEOF, swConnUnitStopTenancyStarVation=swConnUnitStopTenancyStarVation, swTrunkGrpNumber=swTrunkGrpNumber, swauthProtocolPassword=swauthProtocolPassword, swFabricReconfigTrap=swFabricReconfigTrap, swConnUnitLli=swConnUnitLli, swFwDefaultInBetweenActs=swFwDefaultInBetweenActs, swNbTable=swNbTable, swTopTalkerMntSwwn=swTopTalkerMntSwwn, swEventRepeatCount=swEventRepeatCount, swEventEntry=swEventEntry, swDeviceStatusTrap=swDeviceStatusTrap, swEventLevel=swEventLevel, swPmgrEventDescr=swPmgrEventDescr, swprivProtocolPassword=swprivProtocolPassword, swFCPortPhyState=swFCPortPhyState, swFabricSegmentTrap=swFabricSegmentTrap, sw28k=sw28k)
mibBuilder.exportSymbols("SW-MIB", swFwCustExceededActs=swFwCustExceededActs, swFCPortEntry=swFCPortEntry, swFabricMemEIP=swFabricMemEIP, swIPv6Address=swIPv6Address, swAgtCmtyIdx=swAgtCmtyIdx, swSensorScn=swSensorScn, swFCPortRxC2Frames=swFCPortRxC2Frames, swModel=swModel, swConnUnitUnroutableFrameCounter=swConnUnitUnroutableFrameCounter, swTopTalkerMntPort=swTopTalkerMntPort, swSensorEntry=swSensorEntry, swConnUnitPortStatExtentionTable=swConnUnitPortStatExtentionTable, swBrcdTrapBitMask=swBrcdTrapBitMask, swTopTalkerMntTable=swTopTalkerMntTable, swNsFc4=swNsFc4, SwFwClassesAreas=SwFwClassesAreas, swCpuAction=swCpuAction, swAgtCmtyStr=swAgtCmtyStr, swTopTalkerMntNumEntries=swTopTalkerMntNumEntries, swTestString=swTestString, swGroupMemEntry=swGroupMemEntry, swEtherIPMask=swEtherIPMask, swFabricWatchTrap=swFabricWatchTrap, swFwDefaultBelowActs=swFwDefaultBelowActs, swSensorValue=swSensorValue, swNsIpAddress=swNsIpAddress, swTopTalkerMntIndex=swTopTalkerMntIndex, swFwName=swFwName, swBlmPerfAlpaCRCCnt=swBlmPerfAlpaCRCCnt, swFwDefaultBufSize=swFwDefaultBufSize, swEndDevice=swEndDevice, swNumSensors=swNumSensors, swFCIPMask=swFCIPMask, swFwLastEventVal=swFwLastEventVal, swGroup=swGroup, swTrunkGrpTx=swTrunkGrpTx, swTrunk=swTrunk, swNsIPA=swNsIPA, swFCPortRxWords=swFCPortRxWords, swTopTalkerMntMode=swTopTalkerMntMode, swFCPortWwn=swFCPortWwn, swTrunkEntry=swTrunkEntry, swAgtTrapSeverityLevel=swAgtTrapSeverityLevel, FcPortFlag=FcPortFlag, swFwThresholdEntry=swFwThresholdEntry, swConnUnitUnknownInterrupts=swConnUnitUnknownInterrupts, swPmgrEventTime=swPmgrEventTime, swCpuPollingInterval=swCpuPollingInterval, swFwClassAreaIndex=swFwClassAreaIndex, swFabricMemDid=swFabricMemDid, swConnUnitOpen=swConnUnitOpen, swFwLabel=swFwLabel, swBlmPerfEEFCWRx=swBlmPerfEEFCWRx, swFlashDLHost=swFlashDLHost, swFwCustLow=swFwCustLow, SwFwBehavior=SwFwBehavior, swConnUnitInterrupts=swConnUnitInterrupts, swFwCustChangedActs=swFwCustChangedActs, swPrincipalSwitch=swPrincipalSwitch, swBlmPerfFltCnt=swBlmPerfFltCnt, swBlmPerfAlpaIndx=swBlmPerfAlpaIndx, swIDIDMode=swIDIDMode, swBlmPerfAlpaPort=swBlmPerfAlpaPort, swEndDeviceInvalidCRC=swEndDeviceInvalidCRC, swBlmPerfFltMntEntry=swBlmPerfFltMntEntry, swConnUnitPCSErrorCounter=swConnUnitPCSErrorCounter, swTrunkGrpTable=swTrunkGrpTable, swFwClassAreaEntry=swFwClassAreaEntry, swNsNodeSymb=swNsNodeSymb, swFwThresholdIndex=swFwThresholdIndex, swNsLocalTable=swNsLocalTable, swFwDefaultUnit=swFwDefaultUnit, SwFwStatus=SwFwStatus, swEndDevicePort=swEndDevicePort, swTrunkGroupNumber=swTrunkGroupNumber, swFCPortFlag=swFCPortFlag, swAgtCmtyTable=swAgtCmtyTable, swTrunkTable=swTrunkTable, swConnUnitNLNumOfTenancy=swConnUnitNLNumOfTenancy, swFwLastEventTime=swFwLastEventTime, swFlashLastUpdated=swFlashLastUpdated, swFwCustBelowActs=swFwCustBelowActs, swNsEntryIndex=swNsEntryIndex, swBlmPerfEESid=swBlmPerfEESid, swExtTrap=swExtTrap, swFCPortLipLastAlpa=swFCPortLipLastAlpa, swCpuUsageLimit=swCpuUsageLimit, swTopTalkerMntSpid=swTopTalkerMntSpid, swFCPortRxC3Frames=swFCPortRxC3Frames, swConnUnitZeroTenancy=swConnUnitZeroTenancy, swFCPortOpStatus=swFCPortOpStatus, swConnUnitTxBufferUnavailable=swConnUnitTxBufferUnavailable, swFCPortRxEncInFrs=swFCPortRxEncInFrs, SwFwState=SwFwState, swFlashDLFile=swFlashDLFile)
