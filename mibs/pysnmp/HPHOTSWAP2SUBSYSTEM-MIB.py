#
# PySNMP MIB module HPHOTSWAP2SUBSYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPHOTSWAP2SUBSYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Counter64, ObjectIdentity, TimeTicks, MibIdentifier, Bits, Integer32, iso, IpAddress, enterprises, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Counter64", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Bits", "Integer32", "iso", "IpAddress", "enterprises", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaHotswap2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 27))
hpnsaHS2MibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 1))
hpnsaHS2Cage = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2))
hpnsaHS2Slot = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3))
hpnsaHS2MibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2MibRevMajor.setStatus('mandatory')
hpnsaHS2MibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2MibRevMinor.setStatus('mandatory')
hpnsaHS2CageTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1), )
if mibBuilder.loadTexts: hpnsaHS2CageTable.setStatus('mandatory')
hpnsaHS2CageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1), ).setIndexNames((0, "HPHOTSWAP2SUBSYSTEM-MIB", "hpnsaHS2CageIndex"))
if mibBuilder.loadTexts: hpnsaHS2CageEntry.setStatus('mandatory')
hpnsaHS2CageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageIndex.setStatus('mandatory')
hpnsaHS2Cage12VPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2Cage12VPower.setStatus('mandatory')
hpnsaHS2CageTerminator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-attached", 1), ("attached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageTerminator1.setStatus('mandatory')
hpnsaHS2CageTerminator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-attached", 1), ("attached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageTerminator2.setStatus('mandatory')
hpnsaHS2CageSCSICable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-attached", 1), ("attached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageSCSICable1.setStatus('mandatory')
hpnsaHS2CageSCSICable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-attached", 1), ("attached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageSCSICable2.setStatus('mandatory')
hpnsaHS2CageBaseSCSIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaHS2CageBaseSCSIAddress.setStatus('mandatory')
hpnsaHS2CageTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageTemperature.setStatus('mandatory')
hpnsaHS2CageTemperatureWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaHS2CageTemperatureWarningThreshold.setStatus('mandatory')
hpnsaHS2CageTemperatureAlertThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaHS2CageTemperatureAlertThreshold.setStatus('mandatory')
hpnsaHS2CageManagementBoardFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageManagementBoardFRU.setStatus('mandatory')
hpnsaHS2CageInterconnectFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageInterconnectFRU.setStatus('mandatory')
hpnsaHS2CageFirmwareMajorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageFirmwareMajorRev.setStatus('mandatory')
hpnsaHS2CageFirmwareMinorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2CageFirmwareMinorRev.setStatus('mandatory')
hpnsaHS2SlotTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1), )
if mibBuilder.loadTexts: hpnsaHS2SlotTable.setStatus('mandatory')
hpnsaHS2SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1, 1), ).setIndexNames((0, "HPHOTSWAP2SUBSYSTEM-MIB", "hpnsaHS2SlotCageIndex"), (0, "HPHOTSWAP2SUBSYSTEM-MIB", "hpnsaHS2SlotIndex"))
if mibBuilder.loadTexts: hpnsaHS2SlotEntry.setStatus('mandatory')
hpnsaHS2SlotCageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2SlotCageIndex.setStatus('mandatory')
hpnsaHS2SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2SlotIndex.setStatus('mandatory')
hpnsaHS2DrivePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-present", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2DrivePresent.setStatus('mandatory')
hpnsaHS2DriveSCSIBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("se", 1), ("lvd", 2), ("hvd", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHS2DriveSCSIBusType.setStatus('mandatory')
hpnsaHS2DriveIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 27, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaHS2DriveIdentify.setStatus('mandatory')
mibBuilder.exportSymbols("HPHOTSWAP2SUBSYSTEM-MIB", hpnsaHS2Cage=hpnsaHS2Cage, hp=hp, hpnsaHS2MibRevMinor=hpnsaHS2MibRevMinor, hpnsaHS2CageTerminator1=hpnsaHS2CageTerminator1, nm=nm, hpnsaHS2CageTemperature=hpnsaHS2CageTemperature, hpnsaHS2MibRev=hpnsaHS2MibRev, hpnsaHS2CageSCSICable2=hpnsaHS2CageSCSICable2, hpnsaHS2CageBaseSCSIAddress=hpnsaHS2CageBaseSCSIAddress, hpnsaHS2CageTerminator2=hpnsaHS2CageTerminator2, hpnsaHS2SlotTable=hpnsaHS2SlotTable, hpnsaHS2CageEntry=hpnsaHS2CageEntry, hpnsaHS2CageTemperatureAlertThreshold=hpnsaHS2CageTemperatureAlertThreshold, hpnsaHS2CageManagementBoardFRU=hpnsaHS2CageManagementBoardFRU, hpnsa=hpnsa, hpnsaHS2CageInterconnectFRU=hpnsaHS2CageInterconnectFRU, hpnsaHS2CageFirmwareMinorRev=hpnsaHS2CageFirmwareMinorRev, hpnsaHS2CageTable=hpnsaHS2CageTable, hpnsaHS2SlotIndex=hpnsaHS2SlotIndex, hpnsaHS2CageSCSICable1=hpnsaHS2CageSCSICable1, hpnsaHotswap2=hpnsaHotswap2, hpnsaHS2CageIndex=hpnsaHS2CageIndex, hpnsaHS2DriveIdentify=hpnsaHS2DriveIdentify, hpnsaHS2MibRevMajor=hpnsaHS2MibRevMajor, hpnsaHS2CageFirmwareMajorRev=hpnsaHS2CageFirmwareMajorRev, hpnsaHS2DrivePresent=hpnsaHS2DrivePresent, hpnsaHS2CageTemperatureWarningThreshold=hpnsaHS2CageTemperatureWarningThreshold, hpnsaHS2SlotCageIndex=hpnsaHS2SlotCageIndex, hpnsaHS2DriveSCSIBusType=hpnsaHS2DriveSCSIBusType, hpnsaHS2Cage12VPower=hpnsaHS2Cage12VPower, hpnsaHS2Slot=hpnsaHS2Slot, hpnsaHS2SlotEntry=hpnsaHS2SlotEntry)
