#
# PySNMP MIB module NPSYSTEM (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NPSYSTEM
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Integer32, TimeTicks, Counter64, MibIdentifier, iso, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Integer32", "TimeTicks", "Counter64", "MibIdentifier", "iso", "Gauge32", "Unsigned32")
DateAndTime, DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
npsystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11))
if mibBuilder.loadTexts: npsystem.setLastUpdated('200711260000Z')
if mibBuilder.loadTexts: npsystem.setOrganization('Zhone Technologies MIB Working Group Other information about group editing the MIB')
systemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1))
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
systemDate = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDate.setStatus('current')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTime.setStatus('current')
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('current')
systemReboot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReboot.setStatus('current')
systemHostName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHostName.setStatus('current')
systemDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDomainName.setStatus('current')
systemPrimaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPrimaryDnsServer.setStatus('current')
systemSecondaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSecondaryDnsServer.setStatus('current')
systemGateway = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGateway.setStatus('current')
systemRemoteSyslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteSyslogStatus.setStatus('current')
systemRemoteSyslogServer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteSyslogServer.setStatus('current')
systemSyslogLocalStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSyslogLocalStatus.setStatus('current')
systemSyslogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSyslogMaxSize.setStatus('current')
systemSyslogRotateNum = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSyslogRotateNum.setStatus('current')
systemTimezone = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTimezone.setStatus('current')
systemDaylightSavingStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDaylightSavingStatus.setStatus('current')
systemNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServer.setStatus('current')
systemNtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpStatus.setStatus('current')
systemAction = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 21), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAction.setStatus('current')
systemRemoteSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteSyslogServerPort.setStatus('current')
systemServicesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 23), )
if mibBuilder.loadTexts: systemServicesTable.setStatus('current')
systemServicesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 23, 1), ).setIndexNames((0, "NPSYSTEM", "serviceName"))
if mibBuilder.loadTexts: systemServicesTableEntry.setStatus('current')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceName.setStatus('current')
serviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceStatus.setStatus('current')
serviceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 11, 1, 23, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAction.setStatus('current')
mibBuilder.exportSymbols("NPSYSTEM", systemDaylightSavingStatus=systemDaylightSavingStatus, systemSyslogRotateNum=systemSyslogRotateNum, PYSNMP_MODULE_ID=npsystem, systemSyslogMaxSize=systemSyslogMaxSize, serviceName=serviceName, systemHostName=systemHostName, systemSyslogLocalStatus=systemSyslogLocalStatus, systemNtpServer=systemNtpServer, firmwareVersion=firmwareVersion, systemDate=systemDate, systemRemoteSyslogStatus=systemRemoteSyslogStatus, systemSecondaryDnsServer=systemSecondaryDnsServer, systemPrimaryDnsServer=systemPrimaryDnsServer, systemNtpStatus=systemNtpStatus, systemUpTime=systemUpTime, systemRemoteSyslogServerPort=systemRemoteSyslogServerPort, systemRemoteSyslogServer=systemRemoteSyslogServer, systemReboot=systemReboot, systemServicesTableEntry=systemServicesTableEntry, systemServicesTable=systemServicesTable, systemTimezone=systemTimezone, systemTime=systemTime, systemGateway=systemGateway, systemAction=systemAction, systemObjects=systemObjects, systemDomainName=systemDomainName, serviceStatus=serviceStatus, serviceAction=serviceAction, npsystem=npsystem, serialNumber=serialNumber)
