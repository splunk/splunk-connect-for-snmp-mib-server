#
# PySNMP MIB module CALISTA-DPA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CALISTA-DPA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, enterprises, Counter64, NotificationType, Unsigned32, Gauge32, IpAddress, ModuleIdentity, TimeTicks, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "enterprises", "Counter64", "NotificationType", "Unsigned32", "Gauge32", "IpAddress", "ModuleIdentity", "TimeTicks", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

calista = MibIdentifier((1, 3, 6, 1, 4, 1, 7505))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 7505, 1))
dpa = MibIdentifier((1, 3, 6, 1, 4, 1, 7505, 1, 1))
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('mandatory')
loaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loaderVersion.setStatus('mandatory')
integrationMode = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconfigured", 1), ("simple", 2), ("hybrid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: integrationMode.setStatus('mandatory')
pbxType = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbxType.setStatus('mandatory')
receivedCalls = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivedCalls.setStatus('mandatory')
outgoingCallsMade = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingCallsMade.setStatus('mandatory')
mwiCommandsReceived = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mwiCommandsReceived.setStatus('mandatory')
pbxQueuedMWICommands = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbxQueuedMWICommands.setStatus('mandatory')
pbxCompletedMWICommands = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbxCompletedMWICommands.setStatus('mandatory')
pbxMWIErrors = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbxMWIErrors.setStatus('mandatory')
callManagerQueuedMWICommands = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callManagerQueuedMWICommands.setStatus('mandatory')
callManagerCompletedMWICommands = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callManagerCompletedMWICommands.setStatus('mandatory')
callManagerMWIErrors = MibScalar((1, 3, 6, 1, 4, 1, 7505, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callManagerMWIErrors.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1), ).setIndexNames((0, "CALISTA-DPA-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInUse", 1), ("octel", 2), ("pbx", 3), ("virtual", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portTelephonyLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("down", 2), ("registering", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTelephonyLinkState.setStatus('mandatory')
portCallManagerLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("down", 2), ("registering", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCallManagerLinkState.setStatus('mandatory')
portCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("notApplicable", 2), ("onHook", 3), ("callIn", 4), ("callOut", 5), ("onCall", 6), ("offHook", 7), ("transfer", 8), ("outCall", 9), ("hangingUp", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCallState.setStatus('mandatory')
portDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDeviceName.setStatus('mandatory')
portCodecInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("g711ALaw", 2), ("g711MuLaw", 3), ("g723dot1", 4), ("g729a", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCodecInUse.setStatus('mandatory')
portErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portErrors.setStatus('mandatory')
portDacLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDacLevel.setStatus('mandatory')
callManagerConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16), )
if mibBuilder.loadTexts: callManagerConnectionTable.setStatus('mandatory')
callManagerConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1), ).setIndexNames((0, "CALISTA-DPA-MIB", "portIndex"), (0, "CALISTA-DPA-MIB", "cmConnectionIndex"))
if mibBuilder.loadTexts: callManagerConnectionEntry.setStatus('mandatory')
cmConnectionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmConnectionPortIndex.setStatus('mandatory')
cmConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmConnectionIndex.setStatus('mandatory')
cmConnectionCallManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmConnectionCallManagerName.setStatus('mandatory')
cmConnectionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmConnectionIpAddress.setStatus('mandatory')
cmConnectionIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmConnectionIpPort.setStatus('mandatory')
cmConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 7505, 1, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("retryBackOff", 3), ("connectPending", 4), ("active", 5), ("standby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmConnectionState.setStatus('mandatory')
mibBuilder.exportSymbols("CALISTA-DPA-MIB", pbxQueuedMWICommands=pbxQueuedMWICommands, dpa=dpa, cmConnectionPortIndex=cmConnectionPortIndex, DisplayString=DisplayString, portType=portType, callManagerConnectionTable=callManagerConnectionTable, portErrors=portErrors, callManagerQueuedMWICommands=callManagerQueuedMWICommands, cmConnectionIpPort=cmConnectionIpPort, cmConnectionIndex=cmConnectionIndex, portCallState=portCallState, callManagerConnectionEntry=callManagerConnectionEntry, receivedCalls=receivedCalls, portDeviceName=portDeviceName, pbxCompletedMWICommands=pbxCompletedMWICommands, portTelephonyLinkState=portTelephonyLinkState, serialNumber=serialNumber, cmConnectionCallManagerName=cmConnectionCallManagerName, integrationMode=integrationMode, portCallManagerLinkState=portCallManagerLinkState, pbxType=pbxType, calista=calista, pbxMWIErrors=pbxMWIErrors, callManagerMWIErrors=callManagerMWIErrors, imageVersion=imageVersion, portEntry=portEntry, outgoingCallsMade=outgoingCallsMade, portCodecInUse=portCodecInUse, loaderVersion=loaderVersion, products=products, callManagerCompletedMWICommands=callManagerCompletedMWICommands, portTable=portTable, cmConnectionIpAddress=cmConnectionIpAddress, cmConnectionState=cmConnectionState, mwiCommandsReceived=mwiCommandsReceived, portDacLevel=portDacLevel, portIndex=portIndex)
