#
# PySNMP MIB module IPAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPAD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Counter32, Counter64, NotificationType, Gauge32, iso, Bits, enterprises, MibIdentifier, ObjectIdentity, Unsigned32, Integer32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "NotificationType", "Gauge32", "iso", "Bits", "enterprises", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
verilink = MibIdentifier((1, 3, 6, 1, 4, 1, 321))
hbu = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100))
ipad = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1))
ipadFrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 1))
ipadService = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 2))
ipadChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 3))
ipadDLCI = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 4))
ipadEndpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 5))
ipadUser = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 6))
ipadPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 7))
ipadModem = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 8))
ipadSvcAware = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 9))
ipadPktSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 10))
ipadTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 11))
ipadMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 12))
ipadRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 13))
ipadSoftKey = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 14))
ipadFrPortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1), )
if mibBuilder.loadTexts: ipadFrPortTable.setStatus('optional')
ipadFrPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadFrPortService"))
if mibBuilder.loadTexts: ipadFrPortTableEntry.setStatus('mandatory')
ipadFrPortService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortService.setStatus('mandatory')
ipadFrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortActive.setStatus('mandatory')
ipadFrPortLMIType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ccitt", 2), ("ansi", 3), ("lmi", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIType.setStatus('mandatory')
ipadFrPortLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sourcing", 2), ("monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIMode.setStatus('mandatory')
ipadFrPortRxInvAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmThreshold.setStatus('mandatory')
ipadFrPortRxInvAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmAlarm.setStatus('mandatory')
ipadFrPortTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortTxAlmThreshold.setStatus('mandatory')
ipadFrPortTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortTxAlmAlarm.setStatus('mandatory')
ipadFrPortRxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxAlmThreshold.setStatus('mandatory')
ipadFrPortRxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxAlmAlarm.setStatus('mandatory')
ipadServiceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1), )
if mibBuilder.loadTexts: ipadServiceTable.setStatus('optional')
ipadServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadServiceIndex"))
if mibBuilder.loadTexts: ipadServiceTableEntry.setStatus('mandatory')
ipadServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadServiceIndex.setStatus('mandatory')
ipadServiceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceifIndex.setStatus('mandatory')
ipadServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("ppp", 3), ("pppMonitor", 4), ("frameRelay", 5), ("frameRelayMonitor", 6), ("ip", 7), ("serial", 8), ("tty", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceType.setStatus('mandatory')
ipadServicePair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServicePair.setStatus('mandatory')
ipadServiceAddService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("addService", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceAddService.setStatus('mandatory')
ipadServiceDeleteService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceDeleteService.setStatus('mandatory')
ipadChannelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1), )
if mibBuilder.loadTexts: ipadChannelTable.setStatus('optional')
ipadChannelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadChannelifIndex"), (0, "IPAD-MIB", "ipadChannelIndex"))
if mibBuilder.loadTexts: ipadChannelTableEntry.setStatus('mandatory')
ipadChannelifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelifIndex.setStatus('mandatory')
ipadChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelIndex.setStatus('mandatory')
ipadChannelService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelService.setStatus('mandatory')
ipadChannelPair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelPair.setStatus('mandatory')
ipadChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rate56", 2), ("rate64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelRate.setStatus('mandatory')
ipadDLCITable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1), )
if mibBuilder.loadTexts: ipadDLCITable.setStatus('optional')
ipadDLCITableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadDLCIservice"), (0, "IPAD-MIB", "ipadDLCInumber"))
if mibBuilder.loadTexts: ipadDLCITableEntry.setStatus('mandatory')
ipadDLCIservice = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIservice.setStatus('mandatory')
ipadDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCInumber.setStatus('mandatory')
ipadDLCIactive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3), ("pending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIactive.setStatus('mandatory')
ipadDLCIcongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIcongestion.setStatus('mandatory')
ipadDLCIremote = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremote.setStatus('mandatory')
ipadDLCIremoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteUnit.setStatus('mandatory')
ipadDLCIremoteEquipActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("sosAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteEquipActive.setStatus('mandatory')
ipadDLCIencapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rfc1490", 2), ("proprietary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIencapsulation.setStatus('mandatory')
ipadDLCIproprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3), ("ethertype", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIproprietary.setStatus('mandatory')
ipadDLCIpropOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIpropOffset.setStatus('mandatory')
ipadDLCIinBand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIinBand.setStatus('mandatory')
ipadDLCICIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCICIR.setStatus('mandatory')
ipadDLCIBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIBe.setStatus('mandatory')
ipadDLCIminBC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIminBC.setStatus('mandatory')
ipadDLCIrxMon = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxMon.setStatus('mandatory')
ipadDLCIdEctrl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIdEctrl.setStatus('mandatory')
ipadDLCIenableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIenableDelay.setStatus('mandatory')
ipadDLCItxExCIRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExCIRThreshold.setStatus('mandatory')
ipadDLCItxExCIRAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExCIRAlarm.setStatus('mandatory')
ipadDLCItxExBeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExBeThreshold.setStatus('mandatory')
ipadDLCItxExBeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExBeAlarm.setStatus('mandatory')
ipadDLCIrxCongThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxCongThreshold.setStatus('mandatory')
ipadDLCIrxCongAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxCongAlarm.setStatus('mandatory')
ipadDLCIrxBECNinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("alarmCondition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxBECNinCIR.setStatus('mandatory')
ipadDLCIUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIUASThreshold.setStatus('mandatory')
ipadDLCIUASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIUASAlarm.setStatus('mandatory')
ipadDLCILastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCILastChange.setStatus('mandatory')
ipadEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1), )
if mibBuilder.loadTexts: ipadEndpointTable.setStatus('optional')
ipadEndpointTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadEndpointIndex"))
if mibBuilder.loadTexts: ipadEndpointTableEntry.setStatus('mandatory')
ipadEndpointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointIndex.setStatus('mandatory')
ipadEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointName.setStatus('mandatory')
ipadEndpointService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointService.setStatus('mandatory')
ipadEndpointDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDLCInumber.setStatus('mandatory')
ipadEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("switched", 3), ("ipRoute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointType.setStatus('mandatory')
ipadEndpointForward = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointForward.setStatus('mandatory')
ipadEndpointBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointBackup.setStatus('mandatory')
ipadEndpointRefSLP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRefSLP.setStatus('mandatory')
ipadEndpointRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpAddr.setStatus('mandatory')
ipadEndpointRemoteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpMask.setStatus('mandatory')
ipadEndpointAddEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointAddEndpoint.setStatus('mandatory')
ipadEndpointDeleteEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDeleteEndpoint.setStatus('mandatory')
ipadEndpointLastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointLastChange.setStatus('mandatory')
ipadUserTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1), )
if mibBuilder.loadTexts: ipadUserTable.setStatus('optional')
ipadUserTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadUserIndex"))
if mibBuilder.loadTexts: ipadUserTableEntry.setStatus('mandatory')
ipadUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIndex.setStatus('mandatory')
ipadUserFilterByDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByDLCI.setStatus('mandatory')
ipadUserService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserService.setStatus('mandatory')
ipadUserDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserDLCI.setStatus('mandatory')
ipadUserFilterByIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPAddress.setStatus('mandatory')
ipadUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPAddress.setStatus('mandatory')
ipadUserIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPMask.setStatus('mandatory')
ipadUserFilterByIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPPort.setStatus('mandatory')
ipadUserIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7, 11, 17, 20, 21, 23, 25, 31, 37, 42, 53, 66, 69, 70, 79, 80, 88, 92, 101, 107, 109, 110, 111, 113, 119, 137, 138, 139, 153, 161, 162, 163, 164, 169, 179, 194, 201, 202, 204, 206, 213, 395, 396, 444, 494, 533, 540, 541, 600, 749))).clone(namedValues=NamedValues(("rje", 5), ("echo", 7), ("systat", 11), ("qotd", 17), ("ftpdata", 20), ("ftp", 21), ("telnet", 23), ("smtp", 25), ("msgauth", 31), ("time", 37), ("nameserver", 42), ("domain", 53), ("sqlnet", 66), ("tftp", 69), ("gopher", 70), ("finger", 79), ("http", 80), ("kerberos", 88), ("npp", 92), ("hostname", 101), ("rtelnet", 107), ("pop2", 109), ("pop3", 110), ("sunrpc", 111), ("auth", 113), ("nntp", 119), ("netbiosns", 137), ("netbiosdgm", 138), ("netbiosssn", 139), ("sgmp", 153), ("snmp", 161), ("snmptrap", 162), ("cmipman", 163), ("cmipagent", 164), ("send", 169), ("bgp", 179), ("irc", 194), ("atrtmp", 201), ("atnbp", 202), ("atecho", 204), ("atzis", 206), ("ipx", 213), ("netcp", 395), ("netwareip", 396), ("snpp", 444), ("povray", 494), ("netwall", 533), ("uucp", 540), ("uucprlogin", 541), ("ipcserver", 600), ("kerberosadm", 749)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPPort.setStatus('mandatory')
ipadUserTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserTxAlmThreshold.setStatus('mandatory')
ipadUserTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserTxAlmAlarm.setStatus('mandatory')
ipadUserIPStatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatTimeRemaining.setStatus('mandatory')
ipadUserIPStatTimeDuration = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatTimeDuration.setStatus('mandatory')
ipadUserIPStatStartTime = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatStartTime.setStatus('mandatory')
ipadUserIPStatRequestedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatRequestedReportSize.setStatus('mandatory')
ipadUserIPStatGrantedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatGrantedReportSize.setStatus('mandatory')
ipadUserIPStatReportNumber = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatReportNumber.setStatus('mandatory')
ipadUserIPStatDiscardType = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byTime", 1), ("byFrames", 2), ("byOctets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatDiscardType.setStatus('mandatory')
ipadPPPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1), )
if mibBuilder.loadTexts: ipadPPPCfgTable.setStatus('optional')
ipadPPPCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPPPCfgService"))
if mibBuilder.loadTexts: ipadPPPCfgTableEntry.setStatus('mandatory')
ipadPPPCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCfgService.setStatus('mandatory')
ipadPPPCfgDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("direct", 2), ("dialup", 3), ("demanddial", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgDialMode.setStatus('mandatory')
ipadPPPCfgInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgInactivityTimer.setStatus('mandatory')
ipadPPPCfgNegotiationInit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegotiationInit.setStatus('mandatory')
ipadPPPCfgMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgMRU.setStatus('mandatory')
ipadPPPCfgACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgACCM.setStatus('mandatory')
ipadPPPCfgNegMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMRU.setStatus('mandatory')
ipadPPPCfgNegACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegACCM.setStatus('mandatory')
ipadPPPCfgNegMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMagic.setStatus('mandatory')
ipadPPPCfgNegCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCompression.setStatus('mandatory')
ipadPPPCfgNegAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegAddress.setStatus('mandatory')
ipadPPPCfgNegPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegPAP.setStatus('mandatory')
ipadPPPCfgNegCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCHAP.setStatus('mandatory')
ipadPPPCfgAllowPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowPAP.setStatus('mandatory')
ipadPPPCfgAllowCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowCHAP.setStatus('mandatory')
ipadPPPCfgPAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPUsername.setStatus('mandatory')
ipadPPPCfgPAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPPassword.setStatus('mandatory')
ipadPPPCfgCHAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPUsername.setStatus('mandatory')
ipadPPPCfgCHAPSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPSecret.setStatus('mandatory')
ipadPPPCfgPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPortIpAddress.setStatus('mandatory')
ipadPPPCfgPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPeerIpAddress.setStatus('mandatory')
ipadPPPCfgNegIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIpAddress.setStatus('mandatory')
ipadPPPCfgNegIPCPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIPCPCompression.setStatus('mandatory')
ipadPPPCfgSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgSubnetMask.setStatus('mandatory')
ipadPPPCfgAuthChallengeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAuthChallengeInterval.setStatus('mandatory')
ipadPPPPAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2), )
if mibBuilder.loadTexts: ipadPPPPAPTable.setStatus('optional')
ipadPPPPAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPPPPAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPPAPTableEntry.setStatus('mandatory')
ipadPPPPAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPPAPTableIndex.setStatus('mandatory')
ipadPPPPAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTableUsername.setStatus('mandatory')
ipadPPPPAPTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTablePassword.setStatus('mandatory')
ipadPPPCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3), )
if mibBuilder.loadTexts: ipadPPPCHAPTable.setStatus('optional')
ipadPPPCHAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPPPCHAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPCHAPTableEntry.setStatus('mandatory')
ipadPPPCHAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCHAPTableIndex.setStatus('mandatory')
ipadPPPCHAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableUsername.setStatus('mandatory')
ipadPPPCHAPTableSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableSecret.setStatus('mandatory')
ipadModemDialTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1), )
if mibBuilder.loadTexts: ipadModemDialTable.setStatus('optional')
ipadModemDialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadModemDialTableIndex"))
if mibBuilder.loadTexts: ipadModemDialTableEntry.setStatus('mandatory')
ipadModemDialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDialTableIndex.setStatus('mandatory')
ipadModemDialDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDataIndex.setStatus('mandatory')
ipadModemDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialNumber.setStatus('mandatory')
ipadModemDialAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialAbortTimer.setStatus('mandatory')
ipadModemDialRedialAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialRedialAttempts.setStatus('mandatory')
ipadModemDialDelayBeforeRedial = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDelayBeforeRedial.setStatus('mandatory')
ipadModemDialLoginScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialLoginScript.setStatus('mandatory')
ipadModemDialUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialUsername.setStatus('mandatory')
ipadModemDialPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialPassword.setStatus('mandatory')
ipadModemDataTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2), )
if mibBuilder.loadTexts: ipadModemDataTable.setStatus('optional')
ipadModemDataTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadModemDataTableIndex"))
if mibBuilder.loadTexts: ipadModemDataTableEntry.setStatus('mandatory')
ipadModemDataTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDataTableIndex.setStatus('mandatory')
ipadModemDataModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataModemName.setStatus('mandatory')
ipadModemDataSetupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript.setStatus('mandatory')
ipadModemDataDialingScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataDialingScript.setStatus('mandatory')
ipadModemDataAnswerScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataAnswerScript.setStatus('mandatory')
ipadModemDataHangupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataHangupScript.setStatus('mandatory')
ipadFrPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1), )
if mibBuilder.loadTexts: ipadFrPortStatsTable.setStatus('optional')
ipadFrPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadFrPortStatsService"), (0, "IPAD-MIB", "ipadFrPortStatsPeriod"))
if mibBuilder.loadTexts: ipadFrPortStatsEntry.setStatus('mandatory')
ipadFrPortStatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsService.setStatus('mandatory')
ipadFrPortStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("portStatsSummary", 1), ("portStatsCurrent", 2), ("portStatsperiod1", 3), ("portStatsperiod2", 4), ("portStatsperiod3", 5), ("portStatsperiod4", 6), ("portStatsperiod5", 7), ("portStatsperiod6", 8), ("portStatsperiod7", 9), ("portStatsperiod8", 10), ("portStatsperiod9", 11), ("portStatsperiod10", 12), ("portStatsperiod11", 13), ("portStatsperiod12", 14), ("portStatsperiod13", 15), ("portStatsperiod14", 16), ("portStatsperiod15", 17), ("portStatsperiod16", 18), ("portStatsperiod17", 19), ("portStatsperiod18", 20), ("portStatsperiod19", 21), ("portStatsperiod20", 22), ("portStatsperiod21", 23), ("portStatsperiod22", 24), ("portStatsperiod23", 25), ("portStatsperiod24", 26), ("portStatsperiod25", 27), ("portStatsperiod26", 28), ("portStatsperiod27", 29), ("portStatsperiod28", 30), ("portStatsperiod29", 31), ("portStatsperiod30", 32), ("portStatsperiod31", 33), ("portStatsperiod32", 34), ("portStatsperiod33", 35), ("portStatsperiod34", 36), ("portStatsperiod35", 37), ("portStatsperiod36", 38), ("portStatsperiod37", 39), ("portStatsperiod38", 40), ("portStatsperiod39", 41), ("portStatsperiod40", 42), ("portStatsperiod41", 43), ("portStatsperiod42", 44), ("portStatsperiod43", 45), ("portStatsperiod44", 46), ("portStatsperiod45", 47), ("portStatsperiod46", 48), ("portStatsperiod47", 49), ("portStatsperiod48", 50), ("portStatsperiod49", 51), ("portStatsperiod50", 52), ("portStatsperiod51", 53), ("portStatsperiod52", 54), ("portStatsperiod53", 55), ("portStatsperiod54", 56), ("portStatsperiod55", 57), ("portStatsperiod56", 58), ("portStatsperiod57", 59), ("portStatsperiod58", 60), ("portStatsperiod59", 61), ("portStatsperiod60", 62), ("portStatsperiod61", 63), ("portStatsperiod62", 64), ("portStatsperiod63", 65), ("portStatsperiod64", 66), ("portStatsperiod65", 67), ("portStatsperiod66", 68), ("portStatsperiod67", 69), ("portStatsperiod68", 70), ("portStatsperiod69", 71), ("portStatsperiod70", 72), ("portStatsperiod71", 73), ("portStatsperiod72", 74), ("portStatsperiod73", 75), ("portStatsperiod74", 76), ("portStatsperiod75", 77), ("portStatsperiod76", 78), ("portStatsperiod77", 79), ("portStatsperiod78", 80), ("portStatsperiod79", 81), ("portStatsperiod80", 82), ("portStatsperiod81", 83), ("portStatsperiod82", 84), ("portStatsperiod83", 85), ("portStatsperiod84", 86), ("portStatsperiod85", 87), ("portStatsperiod86", 88), ("portStatsperiod87", 89), ("portStatsperiod88", 90), ("portStatsperiod89", 91), ("portStatsperiod90", 92), ("portStatsperiod91", 93), ("portStatsperiod92", 94), ("portStatsperiod93", 95), ("portStatsperiod94", 96), ("portStatsperiod95", 97), ("portStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeriod.setStatus('mandatory')
ipadFrPortStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxFrames.setStatus('mandatory')
ipadFrPortStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFrames.setStatus('mandatory')
ipadFrPortStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxOctets.setStatus('mandatory')
ipadFrPortStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxOctets.setStatus('mandatory')
ipadFrPortStatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtFrames.setStatus('mandatory')
ipadFrPortStatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtFrames.setStatus('mandatory')
ipadFrPortStatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtOctets.setStatus('mandatory')
ipadFrPortStatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtOctets.setStatus('mandatory')
ipadFrPortStatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFECN.setStatus('mandatory')
ipadFrPortStatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxBECN.setStatus('mandatory')
ipadFrPortStatsRxInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvalid.setStatus('mandatory')
ipadFrPortStatsTxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatInq.setStatus('mandatory')
ipadFrPortStatsRxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatInq.setStatus('mandatory')
ipadFrPortStatsTxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatResp.setStatus('mandatory')
ipadFrPortStatsRxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatResp.setStatus('mandatory')
ipadFrPortStatsRxInvLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvLMI.setStatus('mandatory')
ipadFrPortStatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeak.setStatus('mandatory')
ipadFrPortStatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsAverage.setStatus('mandatory')
ipadDLCIstatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2), )
if mibBuilder.loadTexts: ipadDLCIstatsTable.setStatus('optional')
ipadDLCIstatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadDLCIstatsService"), (0, "IPAD-MIB", "ipadDLCIstatsDLCI"), (0, "IPAD-MIB", "ipadDLCIstatsPeriod"))
if mibBuilder.loadTexts: ipadDLCIstatsEntry.setStatus('mandatory')
ipadDLCIstatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsService.setStatus('mandatory')
ipadDLCIstatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDLCI.setStatus('mandatory')
ipadDLCIstatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("dlciStatsSummary", 1), ("dlciStatsCurrent", 2), ("dlciStatsperiod1", 3), ("dlciStatsperiod2", 4), ("dlciStatsperiod3", 5), ("dlciStatsperiod4", 6), ("dlciStatsperiod5", 7), ("dlciStatsperiod6", 8), ("dlciStatsperiod7", 9), ("dlciStatsperiod8", 10), ("dlciStatsperiod9", 11), ("dlciStatsperiod10", 12), ("dlciStatsperiod11", 13), ("dlciStatsperiod12", 14), ("dlciStatsperiod13", 15), ("dlciStatsperiod14", 16), ("dlciStatsperiod15", 17), ("dlciStatsperiod16", 18), ("dlciStatsperiod17", 19), ("dlciStatsperiod18", 20), ("dlciStatsperiod19", 21), ("dlciStatsperiod20", 22), ("dlciStatsperiod21", 23), ("dlciStatsperiod22", 24), ("dlciStatsperiod23", 25), ("dlciStatsperiod24", 26), ("dlciStatsperiod25", 27), ("dlciStatsperiod26", 28), ("dlciStatsperiod27", 29), ("dlciStatsperiod28", 30), ("dlciStatsperiod29", 31), ("dlciStatsperiod30", 32), ("dlciStatsperiod31", 33), ("dlciStatsperiod32", 34), ("dlciStatsperiod33", 35), ("dlciStatsperiod34", 36), ("dlciStatsperiod35", 37), ("dlciStatsperiod36", 38), ("dlciStatsperiod37", 39), ("dlciStatsperiod38", 40), ("dlciStatsperiod39", 41), ("dlciStatsperiod40", 42), ("dlciStatsperiod41", 43), ("dlciStatsperiod42", 44), ("dlciStatsperiod43", 45), ("dlciStatsperiod44", 46), ("dlciStatsperiod45", 47), ("dlciStatsperiod46", 48), ("dlciStatsperiod47", 49), ("dlciStatsperiod48", 50), ("dlciStatsperiod49", 51), ("dlciStatsperiod50", 52), ("dlciStatsperiod51", 53), ("dlciStatsperiod52", 54), ("dlciStatsperiod53", 55), ("dlciStatsperiod54", 56), ("dlciStatsperiod55", 57), ("dlciStatsperiod56", 58), ("dlciStatsperiod57", 59), ("dlciStatsperiod58", 60), ("dlciStatsperiod59", 61), ("dlciStatsperiod60", 62), ("dlciStatsperiod61", 63), ("dlciStatsperiod62", 64), ("dlciStatsperiod63", 65), ("dlciStatsperiod64", 66), ("dlciStatsperiod65", 67), ("dlciStatsperiod66", 68), ("dlciStatsperiod67", 69), ("dlciStatsperiod68", 70), ("dlciStatsperiod69", 71), ("dlciStatsperiod70", 72), ("dlciStatsperiod71", 73), ("dlciStatsperiod72", 74), ("dlciStatsperiod73", 75), ("dlciStatsperiod74", 76), ("dlciStatsperiod75", 77), ("dlciStatsperiod76", 78), ("dlciStatsperiod77", 79), ("dlciStatsperiod78", 80), ("dlciStatsperiod79", 81), ("dlciStatsperiod80", 82), ("dlciStatsperiod81", 83), ("dlciStatsperiod82", 84), ("dlciStatsperiod83", 85), ("dlciStatsperiod84", 86), ("dlciStatsperiod85", 87), ("dlciStatsperiod86", 88), ("dlciStatsperiod87", 89), ("dlciStatsperiod88", 90), ("dlciStatsperiod89", 91), ("dlciStatsperiod90", 92), ("dlciStatsperiod91", 93), ("dlciStatsperiod92", 94), ("dlciStatsperiod93", 95), ("dlciStatsperiod94", 96), ("dlciStatsperiod95", 97), ("dlciStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeriod.setStatus('mandatory')
ipadDLCIstatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxFrames.setStatus('mandatory')
ipadDLCIstatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFrames.setStatus('mandatory')
ipadDLCIstatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxOctets.setStatus('mandatory')
ipadDLCIstatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxOctets.setStatus('mandatory')
ipadDLCIstatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFECN.setStatus('mandatory')
ipadDLCIstatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxBECN.setStatus('mandatory')
ipadDLCIstatsRxDE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxDE.setStatus('mandatory')
ipadDLCIstatsTxExcessCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessCIR.setStatus('mandatory')
ipadDLCIstatsTxExcessBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessBe.setStatus('mandatory')
ipadDLCIstatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtFrames.setStatus('mandatory')
ipadDLCIstatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtFrames.setStatus('mandatory')
ipadDLCIstatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtOctets.setStatus('mandatory')
ipadDLCIstatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtOctets.setStatus('mandatory')
ipadDLCIstatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeak.setStatus('mandatory')
ipadDLCIstatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsAverage.setStatus('mandatory')
ipadDLCIstatsDelayPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayPeak.setStatus('mandatory')
ipadDLCIstatsDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayAverage.setStatus('mandatory')
ipadDLCIstatsRoundTripTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRoundTripTimeouts.setStatus('mandatory')
ipadDLCIstatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsUAS.setStatus('mandatory')
ipadUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3), )
if mibBuilder.loadTexts: ipadUserStatsTable.setStatus('optional')
ipadUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1), ).setIndexNames((0, "IPAD-MIB", "ipadUserStatsIndex"), (0, "IPAD-MIB", "ipadUserStatsPeriod"))
if mibBuilder.loadTexts: ipadUserStatsEntry.setStatus('mandatory')
ipadUserStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsIndex.setStatus('mandatory')
ipadUserStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("userStatsSummary", 1), ("userStatsCurrent", 2), ("userStatsperiod1", 3), ("userStatsperiod2", 4), ("userStatsperiod3", 5), ("userStatsperiod4", 6), ("userStatsperiod5", 7), ("userStatsperiod6", 8), ("userStatsperiod7", 9), ("userStatsperiod8", 10), ("userStatsperiod9", 11), ("userStatsperiod10", 12), ("userStatsperiod11", 13), ("userStatsperiod12", 14), ("userStatsperiod13", 15), ("userStatsperiod14", 16), ("userStatsperiod15", 17), ("userStatsperiod16", 18), ("userStatsperiod17", 19), ("userStatsperiod18", 20), ("userStatsperiod19", 21), ("userStatsperiod20", 22), ("userStatsperiod21", 23), ("userStatsperiod22", 24), ("userStatsperiod23", 25), ("userStatsperiod24", 26), ("userStatsperiod25", 27), ("userStatsperiod26", 28), ("userStatsperiod27", 29), ("userStatsperiod28", 30), ("userStatsperiod29", 31), ("userStatsperiod30", 32), ("userStatsperiod31", 33), ("userStatsperiod32", 34), ("userStatsperiod33", 35), ("userStatsperiod34", 36), ("userStatsperiod35", 37), ("userStatsperiod36", 38), ("userStatsperiod37", 39), ("userStatsperiod38", 40), ("userStatsperiod39", 41), ("userStatsperiod40", 42), ("userStatsperiod41", 43), ("userStatsperiod42", 44), ("userStatsperiod43", 45), ("userStatsperiod44", 46), ("userStatsperiod45", 47), ("userStatsperiod46", 48), ("userStatsperiod47", 49), ("userStatsperiod48", 50), ("userStatsperiod49", 51), ("userStatsperiod50", 52), ("userStatsperiod51", 53), ("userStatsperiod52", 54), ("userStatsperiod53", 55), ("userStatsperiod54", 56), ("userStatsperiod55", 57), ("userStatsperiod56", 58), ("userStatsperiod57", 59), ("userStatsperiod58", 60), ("userStatsperiod59", 61), ("userStatsperiod60", 62), ("userStatsperiod61", 63), ("userStatsperiod62", 64), ("userStatsperiod63", 65), ("userStatsperiod64", 66), ("userStatsperiod65", 67), ("userStatsperiod66", 68), ("userStatsperiod67", 69), ("userStatsperiod68", 70), ("userStatsperiod69", 71), ("userStatsperiod70", 72), ("userStatsperiod71", 73), ("userStatsperiod72", 74), ("userStatsperiod73", 75), ("userStatsperiod74", 76), ("userStatsperiod75", 77), ("userStatsperiod76", 78), ("userStatsperiod77", 79), ("userStatsperiod78", 80), ("userStatsperiod79", 81), ("userStatsperiod80", 82), ("userStatsperiod81", 83), ("userStatsperiod82", 84), ("userStatsperiod83", 85), ("userStatsperiod84", 86), ("userStatsperiod85", 87), ("userStatsperiod86", 88), ("userStatsperiod87", 89), ("userStatsperiod88", 90), ("userStatsperiod89", 91), ("userStatsperiod90", 92), ("userStatsperiod91", 93), ("userStatsperiod92", 94), ("userStatsperiod93", 95), ("userStatsperiod94", 96), ("userStatsperiod95", 97), ("userStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsPeriod.setStatus('mandatory')
ipadUserStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxFrames.setStatus('mandatory')
ipadUserStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxFrames.setStatus('mandatory')
ipadUserStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxOctets.setStatus('mandatory')
ipadUserStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxOctets.setStatus('mandatory')
ipadUserStatsTxRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRatePeak.setStatus('mandatory')
ipadUserStatsTxRateAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRateAverage.setStatus('mandatory')
ipadIPTopNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4), )
if mibBuilder.loadTexts: ipadIPTopNStatsTable.setStatus('optional')
ipadIPTopNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1), ).setIndexNames((0, "IPAD-MIB", "ipadIPTopNStatsIndex"))
if mibBuilder.loadTexts: ipadIPTopNStatsEntry.setStatus('mandatory')
ipadIPTopNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsIndex.setStatus('mandatory')
ipadIPTopNStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsAddress.setStatus('mandatory')
ipadIPTopNStatsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTimestamp.setStatus('mandatory')
ipadIPTopNStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxFrames.setStatus('mandatory')
ipadIPTopNStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxOctets.setStatus('mandatory')
ipadIPTopNStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxFrames.setStatus('mandatory')
ipadIPTopNStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxOctets.setStatus('mandatory')
ipadPktSwOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("monitor", 3), ("packet", 4), ("remoteConfig", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwOperatingMode.setStatus('mandatory')
ipadPktSwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2), )
if mibBuilder.loadTexts: ipadPktSwCfgTable.setStatus('optional')
ipadPktSwCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPktSwCfgService"))
if mibBuilder.loadTexts: ipadPktSwCfgTableEntry.setStatus('mandatory')
ipadPktSwCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPktSwCfgService.setStatus('mandatory')
ipadPktSwCfgInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni", 1), ("ni", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgInterfaceType.setStatus('mandatory')
ipadPktSwCfgLnkMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("ccitt", 3), ("ansi", 4), ("lmi", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLnkMgmtType.setStatus('mandatory')
ipadPktSwCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMaxFrameSize.setStatus('mandatory')
ipadPktSwCfgnN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN1.setStatus('mandatory')
ipadPktSwCfgnN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN2.setStatus('mandatory')
ipadPktSwCfgnN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN3.setStatus('mandatory')
ipadPktSwCfgnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnT1.setStatus('mandatory')
ipadPktSwCfgDefCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefCIR.setStatus('mandatory')
ipadPktSwCfgDefExBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefExBurst.setStatus('mandatory')
ipadPktSwCfgCIREE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgCIREE.setStatus('mandatory')
ipadPktSwCfgLinkInjection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("buffered", 3), ("forced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLinkInjection.setStatus('mandatory')
ipadPktSwCfgAutoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiagnostic.setStatus('mandatory')
ipadPktSwCfgAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiscovery.setStatus('mandatory')
ipadPktSwCfgMgmtDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMgmtDLCI.setStatus('mandatory')
ipadTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1), )
if mibBuilder.loadTexts: ipadTrapDestTable.setStatus('optional')
ipadTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadTrapDestIndex"))
if mibBuilder.loadTexts: ipadTrapDestTableEntry.setStatus('mandatory')
ipadTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTrapDestIndex.setStatus('mandatory')
ipadTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTrapDestination.setStatus('mandatory')
ipadFrPortRxInvalidFramesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25000))
ipadFrPortRxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25001))
ipadFrPortTxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25002))
ipadDLCItxCIRexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25003))
ipadDLCItxBEexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25004))
ipadDLCIRxCongestionExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25005))
ipadUserTxExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25006))
ipadDlciRxBECNinCIRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25007))
ipadDlciUASExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25008))
ipadserialDteDTRAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25009))
ipadt1e1ESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25010))
ipadt1e1SESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25011))
ipadt1e1LOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25012))
ipadt1e1UASAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25013))
ipadt1e1CSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25014))
ipadt1e1BPVSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25015))
ipadt1e1OOFSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25016))
ipadt1e1AISAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25017))
ipadt1e1RASAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25018))
ipadDLCIremoteSOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25019))
ipadMiscPortSettings = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1), )
if mibBuilder.loadTexts: ipadMiscPortSettings.setStatus('optional')
ipadMiscPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadMiscPortSettingsIndex"))
if mibBuilder.loadTexts: ipadMiscPortSettingsEntry.setStatus('mandatory')
ipadMiscPortSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscPortSettingsIndex.setStatus('mandatory')
ipadMiscPortSettingsSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscPortSettingsSerialType.setStatus('mandatory')
ipadMiscClearStatusCounts = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscClearStatusCounts.setStatus('mandatory')
ipadSoftKeyTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1), )
if mibBuilder.loadTexts: ipadSoftKeyTable.setStatus('mandatory')
ipadSoftKeyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadSoftKeyIndex"))
if mibBuilder.loadTexts: ipadSoftKeyTableEntry.setStatus('mandatory')
ipadSoftKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyIndex.setStatus('mandatory')
ipadSoftKeyAcronym = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyAcronym.setStatus('mandatory')
ipadSoftKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyDescription.setStatus('mandatory')
ipadSoftKeyExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyExpirationDate.setStatus('mandatory')
ipadSoftKeyEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSoftKeyEntry.setStatus('mandatory')
mibBuilder.exportSymbols("IPAD-MIB", ipadFrPortStatsService=ipadFrPortStatsService, ipadt1e1SESAlarmDeclared=ipadt1e1SESAlarmDeclared, ipadDLCIrxCongAlarm=ipadDLCIrxCongAlarm, ipadTrapDest=ipadTrapDest, ipadPPPPAPTable=ipadPPPPAPTable, ipadEndpointDLCInumber=ipadEndpointDLCInumber, ipadDLCIstatsRxDE=ipadDLCIstatsRxDE, ipadPktSwCfgLinkInjection=ipadPktSwCfgLinkInjection, ipadPPPCHAPTable=ipadPPPCHAPTable, ipadDLCItxCIRexceeded=ipadDLCItxCIRexceeded, ipadPktSwCfgMaxFrameSize=ipadPktSwCfgMaxFrameSize, ipadFrPortStatsPeriod=ipadFrPortStatsPeriod, ipadIPTopNStatsRxOctets=ipadIPTopNStatsRxOctets, ipadEndpointType=ipadEndpointType, ipadFrPortStatsRxInvalid=ipadFrPortStatsRxInvalid, ipadPPPCfgAllowCHAP=ipadPPPCfgAllowCHAP, ipadFrPortStatsRxMgmtOctets=ipadFrPortStatsRxMgmtOctets, ipadDLCIstatsDelayAverage=ipadDLCIstatsDelayAverage, ipadPPPCfgAllowPAP=ipadPPPCfgAllowPAP, ipadDlciUASExceeded=ipadDlciUASExceeded, ipadUserTable=ipadUserTable, ipadDLCIstatsDelayPeak=ipadDLCIstatsDelayPeak, ipadMiscPortSettings=ipadMiscPortSettings, ipadDLCIBe=ipadDLCIBe, ipadFrPort=ipadFrPort, ipadFrPortStatsRxFECN=ipadFrPortStatsRxFECN, ipadModemDialNumber=ipadModemDialNumber, ipadIPTopNStatsAddress=ipadIPTopNStatsAddress, ipadChannelTableEntry=ipadChannelTableEntry, ipadDLCItxExCIRThreshold=ipadDLCItxExCIRThreshold, ipadModemDataDialingScript=ipadModemDataDialingScript, ipadChannelRate=ipadChannelRate, ipadDLCIremoteSOSAlarm=ipadDLCIremoteSOSAlarm, ipadUserIPStatGrantedReportSize=ipadUserIPStatGrantedReportSize, ipadModemDialUsername=ipadModemDialUsername, ipadPPPPAPTablePassword=ipadPPPPAPTablePassword, ipadUserStatsTxRateAverage=ipadUserStatsTxRateAverage, ipadDLCITableEntry=ipadDLCITableEntry, ipadDLCIcongestion=ipadDLCIcongestion, ipadDLCIstatsAverage=ipadDLCIstatsAverage, ipadPktSwCfgLnkMgmtType=ipadPktSwCfgLnkMgmtType, ipadServiceifIndex=ipadServiceifIndex, ipadTrapDestTableEntry=ipadTrapDestTableEntry, ipadUserFilterByDLCI=ipadUserFilterByDLCI, ipadUserIPPort=ipadUserIPPort, hbu=hbu, ipadFrPortActive=ipadFrPortActive, ipadUserStatsTxRatePeak=ipadUserStatsTxRatePeak, ipadUserStatsTable=ipadUserStatsTable, ipadChannelTable=ipadChannelTable, ipadDLCIrxBECNinCIR=ipadDLCIrxBECNinCIR, ipadFrPortRxInvAlmThreshold=ipadFrPortRxInvAlmThreshold, ipadDLCICIR=ipadDLCICIR, ipadFrPortStatsTxFrames=ipadFrPortStatsTxFrames, ipadPktSwCfgnT1=ipadPktSwCfgnT1, ipadFrPortService=ipadFrPortService, ipadDLCIrxMon=ipadDLCIrxMon, ipadEndpointTableEntry=ipadEndpointTableEntry, ipadModem=ipadModem, ipadChannelifIndex=ipadChannelifIndex, ipadEndpointRefSLP=ipadEndpointRefSLP, ipadPPPCHAPTableSecret=ipadPPPCHAPTableSecret, ipadUserStatsRxOctets=ipadUserStatsRxOctets, ipadMiscPortSettingsIndex=ipadMiscPortSettingsIndex, ipadChannelService=ipadChannelService, ipadModemDataSetupScript=ipadModemDataSetupScript, ipadDLCItxExCIRAlarm=ipadDLCItxExCIRAlarm, ipadPPPCfgNegMagic=ipadPPPCfgNegMagic, ipadPPPCfgNegIpAddress=ipadPPPCfgNegIpAddress, ipadModemDialDataIndex=ipadModemDialDataIndex, ipadDLCIstatsTxOctets=ipadDLCIstatsTxOctets, ipadEndpointService=ipadEndpointService, ipadUserFilterByIPAddress=ipadUserFilterByIPAddress, ipadDLCIstatsRxFrames=ipadDLCIstatsRxFrames, verilink=verilink, ipadDLCIenableDelay=ipadDLCIenableDelay, ipadDLCIremoteEquipActive=ipadDLCIremoteEquipActive, ipadDlciRxBECNinCIRAlarm=ipadDlciRxBECNinCIRAlarm, ipadPPPCfgNegPAP=ipadPPPCfgNegPAP, ipadDLCIUASThreshold=ipadDLCIUASThreshold, ipadPPPCfgAuthChallengeInterval=ipadPPPCfgAuthChallengeInterval, ipadDLCItxExBeThreshold=ipadDLCItxExBeThreshold, ipadDLCInumber=ipadDLCInumber, ipadPktSwCfgnN1=ipadPktSwCfgnN1, ipadModemDataTable=ipadModemDataTable, ipadPPPCfgDialMode=ipadPPPCfgDialMode, ipadPPPCfgCHAPSecret=ipadPPPCfgCHAPSecret, ipadModemDialAbortTimer=ipadModemDialAbortTimer, ipadPPPCfgNegCompression=ipadPPPCfgNegCompression, ipadDLCIstatsTxMgmtOctets=ipadDLCIstatsTxMgmtOctets, ipadPPPCfgCHAPUsername=ipadPPPCfgCHAPUsername, ipadModemDataTableIndex=ipadModemDataTableIndex, ipadDLCIstatsRxBECN=ipadDLCIstatsRxBECN, ipadPktSwCfgnN2=ipadPktSwCfgnN2, ipadIPTopNStatsTxOctets=ipadIPTopNStatsTxOctets, ipadFrPortTable=ipadFrPortTable, ipadDLCIstatsTxMgmtFrames=ipadDLCIstatsTxMgmtFrames, ipadDLCIstatsService=ipadDLCIstatsService, ipadPktSwCfgAutoDiscovery=ipadPktSwCfgAutoDiscovery, ipadPktSwCfgService=ipadPktSwCfgService, ipadFrPortStatsRxFrames=ipadFrPortStatsRxFrames, ipadPPPCfgNegIPCPCompression=ipadPPPCfgNegIPCPCompression, ipadModemDialDelayBeforeRedial=ipadModemDialDelayBeforeRedial, ipadFrPortStatsRxMgmtFrames=ipadFrPortStatsRxMgmtFrames, ipadUserIPStatStartTime=ipadUserIPStatStartTime, ipadEndpointRemoteIpMask=ipadEndpointRemoteIpMask, ipadEndpointName=ipadEndpointName, ipadUserTxAlmThreshold=ipadUserTxAlmThreshold, ipadPPPCfgACCM=ipadPPPCfgACCM, ipadTrapDestination=ipadTrapDestination, ipadMiscPortSettingsEntry=ipadMiscPortSettingsEntry, ipadUserIPStatDiscardType=ipadUserIPStatDiscardType, ipadFrPortStatsTxOctets=ipadFrPortStatsTxOctets, ipadFrPortStatsTxMgmtOctets=ipadFrPortStatsTxMgmtOctets, ipadEndpointDeleteEndpoint=ipadEndpointDeleteEndpoint, ipadRouter=ipadRouter, ipadUserDLCI=ipadUserDLCI, ipadDLCIencapsulation=ipadDLCIencapsulation, ipadModemDataAnswerScript=ipadModemDataAnswerScript, ipadPPPCfgPeerIpAddress=ipadPPPCfgPeerIpAddress, ipadEndpoint=ipadEndpoint, ipadServiceTableEntry=ipadServiceTableEntry, ipadFrPortRxInvAlmAlarm=ipadFrPortRxInvAlmAlarm, ipadFrPortTxAlmThreshold=ipadFrPortTxAlmThreshold, ipadFrPortRxAlmAlarm=ipadFrPortRxAlmAlarm, ipadEndpointBackup=ipadEndpointBackup, ipadUserTxAlmAlarm=ipadUserTxAlmAlarm, ipadDLCIstatsTable=ipadDLCIstatsTable, ipadTrapDestIndex=ipadTrapDestIndex, ipadDLCIstatsRxOctets=ipadDLCIstatsRxOctets, ipadDLCIstatsTxExcessBe=ipadDLCIstatsTxExcessBe, ipad=ipad, ipadServicePair=ipadServicePair, ipadPPPCfgSubnetMask=ipadPPPCfgSubnetMask, ipadPktSwCfgCIREE=ipadPktSwCfgCIREE, ipadSoftKeyExpirationDate=ipadSoftKeyExpirationDate, ipadPPPCfgInactivityTimer=ipadPPPCfgInactivityTimer, ipadUserIPMask=ipadUserIPMask, ipadPPPCHAPTableIndex=ipadPPPCHAPTableIndex, ipadIPTopNStatsIndex=ipadIPTopNStatsIndex, ipadDLCIstatsRxMgmtOctets=ipadDLCIstatsRxMgmtOctets, ipadFrPortLMIType=ipadFrPortLMIType, ipadModemDialTableEntry=ipadModemDialTableEntry, ipadDLCIstatsTxFrames=ipadDLCIstatsTxFrames, ipadt1e1CSSAlarmDeclared=ipadt1e1CSSAlarmDeclared, ipadModemDataTableEntry=ipadModemDataTableEntry, ipadPktSwCfgDefExBurst=ipadPktSwCfgDefExBurst, ipadUserTxExceeded=ipadUserTxExceeded, ipadSoftKeyAcronym=ipadSoftKeyAcronym, ipadDLCItxExBeAlarm=ipadDLCItxExBeAlarm, ipadChannelPair=ipadChannelPair, ipadPktSwCfgnN3=ipadPktSwCfgnN3, ipadSoftKeyEntry=ipadSoftKeyEntry, ipadEndpointLastChange=ipadEndpointLastChange, ipadPPPCfgTableEntry=ipadPPPCfgTableEntry, ipadDLCIstatsPeriod=ipadDLCIstatsPeriod, ipadDLCIstatsUAS=ipadDLCIstatsUAS, ipadFrPortStatsRxStatResp=ipadFrPortStatsRxStatResp, ipadUser=ipadUser, ipadFrPortStatsAverage=ipadFrPortStatsAverage, ipadPktSwOperatingMode=ipadPktSwOperatingMode, ipadModemDialLoginScript=ipadModemDialLoginScript, ipadDLCIUASAlarm=ipadDLCIUASAlarm, ipadUserStatsTxOctets=ipadUserStatsTxOctets, ipadDLCIactive=ipadDLCIactive, ipadUserIndex=ipadUserIndex, ipadEndpointRemoteIpAddr=ipadEndpointRemoteIpAddr, ipadDLCIremoteUnit=ipadDLCIremoteUnit, ipadServiceType=ipadServiceType, ipadPPPCfgNegMRU=ipadPPPCfgNegMRU, ipadUserFilterByIPPort=ipadUserFilterByIPPort, ipadFrPortStatsPeak=ipadFrPortStatsPeak, ipadDLCIstatsRxFECN=ipadDLCIstatsRxFECN, ipadFrPortStatsTxMgmtFrames=ipadFrPortStatsTxMgmtFrames, ipadPktSwitch=ipadPktSwitch, ipadDLCIpropOffset=ipadDLCIpropOffset, ipadPPPCfgService=ipadPPPCfgService, ipadPPPCfgNegCHAP=ipadPPPCfgNegCHAP, ipadService=ipadService, ipadPPPPAPTableEntry=ipadPPPPAPTableEntry, ipadIPTopNStatsTable=ipadIPTopNStatsTable, ipadDLCItxBEexceeded=ipadDLCItxBEexceeded, ipadChannel=ipadChannel, ipadPPPCfgNegAddress=ipadPPPCfgNegAddress, ipadIPTopNStatsRxFrames=ipadIPTopNStatsRxFrames, ipadDLCIstatsDLCI=ipadDLCIstatsDLCI, ipadt1e1RASAlarmExists=ipadt1e1RASAlarmExists, ipadPktSwCfgTable=ipadPktSwCfgTable, ipadUserIPStatTimeRemaining=ipadUserIPStatTimeRemaining, ipadModemDialPassword=ipadModemDialPassword, ipadUserStatsTxFrames=ipadUserStatsTxFrames, ipadModemDataHangupScript=ipadModemDataHangupScript, ipadt1e1ESAlarmDeclared=ipadt1e1ESAlarmDeclared, ipadEndpointTable=ipadEndpointTable, ipadDLCIstatsRxMgmtFrames=ipadDLCIstatsRxMgmtFrames, ipadt1e1AISAlarmExists=ipadt1e1AISAlarmExists, ipadPPPCfgPortIpAddress=ipadPPPCfgPortIpAddress, ipadUserIPStatRequestedReportSize=ipadUserIPStatRequestedReportSize, ipadDLCIminBC=ipadDLCIminBC, ipadt1e1BPVSAlarmDeclared=ipadt1e1BPVSAlarmDeclared, ipadserialDteDTRAlarmExists=ipadserialDteDTRAlarmExists, ipadMisc=ipadMisc, ipadPPPPAPTableIndex=ipadPPPPAPTableIndex, ipadDLCITable=ipadDLCITable, ipadServiceIndex=ipadServiceIndex, ipadDLCIinBand=ipadDLCIinBand, ipadDLCI=ipadDLCI, ipadPktSwCfgMgmtDLCI=ipadPktSwCfgMgmtDLCI, ipadFrPortStatsTxStatResp=ipadFrPortStatsTxStatResp, ipadEndpointForward=ipadEndpointForward, ipadUserStatsEntry=ipadUserStatsEntry, ipadPktSwCfgAutoDiagnostic=ipadPktSwCfgAutoDiagnostic, ipadTrapDestTable=ipadTrapDestTable, ipadModemDataModemName=ipadModemDataModemName, ipadMiscPortSettingsSerialType=ipadMiscPortSettingsSerialType, ipadPPPCfgTable=ipadPPPCfgTable, ipadUserIPStatReportNumber=ipadUserIPStatReportNumber, ipadDLCIproprietary=ipadDLCIproprietary, ipadIPTopNStatsTimestamp=ipadIPTopNStatsTimestamp, ipadServiceAddService=ipadServiceAddService, ipadUserService=ipadUserService, ipadFrPortTxThroughputExceeded=ipadFrPortTxThroughputExceeded, ipadPPPCfgPAPPassword=ipadPPPCfgPAPPassword, ipadIPTopNStatsTxFrames=ipadIPTopNStatsTxFrames, ipadPktSwCfgInterfaceType=ipadPktSwCfgInterfaceType, ipadFrPortRxInvalidFramesExceeded=ipadFrPortRxInvalidFramesExceeded, ipadModemDialTableIndex=ipadModemDialTableIndex, ipadFrPortStatsTxStatInq=ipadFrPortStatsTxStatInq, ipadFrPortTableEntry=ipadFrPortTableEntry, ipadPPPCfgNegACCM=ipadPPPCfgNegACCM, ipadPPPCfgPAPUsername=ipadPPPCfgPAPUsername, ipadModemDialRedialAttempts=ipadModemDialRedialAttempts, ipadFrPortStatsEntry=ipadFrPortStatsEntry, ipadDLCIservice=ipadDLCIservice, ipadDLCIRxCongestionExceeded=ipadDLCIRxCongestionExceeded, ipadSvcAware=ipadSvcAware, ipadDLCIremote=ipadDLCIremote, ipadEndpointAddEndpoint=ipadEndpointAddEndpoint, ipadModemDialTable=ipadModemDialTable, ipadIPTopNStatsEntry=ipadIPTopNStatsEntry, ipadPPPCHAPTableUsername=ipadPPPCHAPTableUsername, ipadUserIPStatTimeDuration=ipadUserIPStatTimeDuration, ipadPPPCfgMRU=ipadPPPCfgMRU, ipadDLCIstatsRoundTripTimeouts=ipadDLCIstatsRoundTripTimeouts, ipadDLCILastChange=ipadDLCILastChange, ipadt1e1UASAlarmDeclared=ipadt1e1UASAlarmDeclared, ipadDLCIdEctrl=ipadDLCIdEctrl, ipadDLCIstatsEntry=ipadDLCIstatsEntry, ipadSoftKey=ipadSoftKey, ipadSoftKeyDescription=ipadSoftKeyDescription, ipadFrPortStatsRxStatInq=ipadFrPortStatsRxStatInq, ipadFrPortStatsTable=ipadFrPortStatsTable, ipadPPP=ipadPPP, ipadUserStatsPeriod=ipadUserStatsPeriod)
mibBuilder.exportSymbols("IPAD-MIB", ipadFrPortRxAlmThreshold=ipadFrPortRxAlmThreshold, ipadPPPPAPTableUsername=ipadPPPPAPTableUsername, ipadFrPortStatsRxBECN=ipadFrPortStatsRxBECN, ipadFrPortStatsRxInvLMI=ipadFrPortStatsRxInvLMI, ipadDLCIstatsPeak=ipadDLCIstatsPeak, ipadFrPortStatsRxOctets=ipadFrPortStatsRxOctets, ipadt1e1OOFSAlarmDeclared=ipadt1e1OOFSAlarmDeclared, ipadSoftKeyIndex=ipadSoftKeyIndex, ipadUserTableEntry=ipadUserTableEntry, ipadDLCIrxCongThreshold=ipadDLCIrxCongThreshold, ipadServiceTable=ipadServiceTable, ipadUserStatsRxFrames=ipadUserStatsRxFrames, ipadUserIPAddress=ipadUserIPAddress, ipadPPPCfgNegotiationInit=ipadPPPCfgNegotiationInit, ipadPktSwCfgDefCIR=ipadPktSwCfgDefCIR, ipadFrPortRxThroughputExceeded=ipadFrPortRxThroughputExceeded, ipadSoftKeyTableEntry=ipadSoftKeyTableEntry, ipadEndpointIndex=ipadEndpointIndex, ipadPktSwCfgTableEntry=ipadPktSwCfgTableEntry, ipadChannelIndex=ipadChannelIndex, ipadServiceDeleteService=ipadServiceDeleteService, ipadt1e1LOSSAlarmDeclared=ipadt1e1LOSSAlarmDeclared, ipadSoftKeyTable=ipadSoftKeyTable, ipadMiscClearStatusCounts=ipadMiscClearStatusCounts, ipadFrPortLMIMode=ipadFrPortLMIMode, ipadFrPortTxAlmAlarm=ipadFrPortTxAlmAlarm, ipadDLCIstatsTxExcessCIR=ipadDLCIstatsTxExcessCIR, ipadUserStatsIndex=ipadUserStatsIndex, ipadPPPCHAPTableEntry=ipadPPPCHAPTableEntry)
