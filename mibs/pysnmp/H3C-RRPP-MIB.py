#
# PySNMP MIB module H3C-RRPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-RRPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:10:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, Counter64, Integer32, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, iso, IpAddress, Gauge32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Counter64", "Integer32", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "iso", "IpAddress", "Gauge32", "NotificationType", "Counter32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
h3cRrpp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45))
if mibBuilder.loadTexts: h3cRrpp.setLastUpdated('200412020000Z')
if mibBuilder.loadTexts: h3cRrpp.setOrganization('Huawei 3Com Technologies Co., Ltd.')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

h3cRrppScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 1))
h3cRrppEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRrppEnableStatus.setStatus('current')
h3cRrppPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone(hexValue="303030464532303346443735")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRrppPassword.setStatus('current')
h3cRrppPasswordType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("cipher", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRrppPasswordType.setStatus('current')
h3cRrppProtectVlanConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("instance", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppProtectVlanConfigMode.setStatus('current')
h3cRrppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2))
h3cRrppDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1), )
if mibBuilder.loadTexts: h3cRrppDomainTable.setStatus('current')
h3cRrppDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1), ).setIndexNames((0, "H3C-RRPP-MIB", "h3cRrppDomainID"))
if mibBuilder.loadTexts: h3cRrppDomainEntry.setStatus('current')
h3cRrppDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cRrppDomainID.setStatus('current')
h3cRrppDomainControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainControlVlanID.setStatus('current')
h3cRrppDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainHelloTime.setStatus('current')
h3cRrppDomainFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainFailTime.setStatus('current')
h3cRrppDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainRowStatus.setStatus('current')
h3cRrppDomainInstanceListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainInstanceListLow.setStatus('current')
h3cRrppDomainInstanceListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainInstanceListHigh.setStatus('current')
h3cRrppDomainProtectVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainProtectVlanListLow.setStatus('current')
h3cRrppDomainProtectVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppDomainProtectVlanListHigh.setStatus('current')
h3cRrppRingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2), )
if mibBuilder.loadTexts: h3cRrppRingTable.setStatus('current')
h3cRrppRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1), ).setIndexNames((0, "H3C-RRPP-MIB", "h3cRrppDomainID"), (0, "H3C-RRPP-MIB", "h3cRrppRingID"))
if mibBuilder.loadTexts: h3cRrppRingEntry.setStatus('current')
h3cRrppRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cRrppRingID.setStatus('current')
h3cRrppRingEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 2), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppRingEnableStatus.setStatus('current')
h3cRrppRingActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppRingActive.setStatus('current')
h3cRrppRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("health", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppRingState.setStatus('current')
h3cRrppRingNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("transit", 2), ("edge", 3), ("assistantEdge", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppRingNodeMode.setStatus('current')
h3cRrppRingPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppRingPrimaryPort.setStatus('current')
h3cRrppRingSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppRingSecondaryPort.setStatus('current')
h3cRrppRingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("majorRing", 1), ("subRing", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppRingLevel.setStatus('current')
h3cRrppRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRrppRingRowStatus.setStatus('current')
h3cRrppPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3), )
if mibBuilder.loadTexts: h3cRrppPortTable.setStatus('current')
h3cRrppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1), ).setIndexNames((0, "H3C-RRPP-MIB", "h3cRrppDomainID"), (0, "H3C-RRPP-MIB", "h3cRrppRingID"), (0, "H3C-RRPP-MIB", "h3cRrppPortID"))
if mibBuilder.loadTexts: h3cRrppPortEntry.setStatus('current')
h3cRrppPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cRrppPortID.setStatus('current')
h3cRrppPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("common", 3), ("edge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRole.setStatus('current')
h3cRrppPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("unblocked", 2), ("blocked", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortState.setStatus('current')
h3cRrppPortRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXError.setStatus('current')
h3cRrppPortRXHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXHello.setStatus('current')
h3cRrppPortRXLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXLinkUp.setStatus('current')
h3cRrppPortRXLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXLinkDown.setStatus('current')
h3cRrppPortRXCommonFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXCommonFlush.setStatus('current')
h3cRrppPortRXCompleteFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXCompleteFlush.setStatus('current')
h3cRrppPortTXHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXHello.setStatus('current')
h3cRrppPortTXLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXLinkUp.setStatus('current')
h3cRrppPortTXLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXLinkDown.setStatus('current')
h3cRrppPortTXCommonFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXCommonFlush.setStatus('current')
h3cRrppPortTXCompleteFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXCompleteFlush.setStatus('current')
h3cRrppPortRXEdgeHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXEdgeHello.setStatus('current')
h3cRrppPortRXMajorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortRXMajorFault.setStatus('current')
h3cRrppPortTXEdgeHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXEdgeHello.setStatus('current')
h3cRrppPortTXMajorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRrppPortTXMajorFault.setStatus('current')
h3cRrppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 3))
h3cRrppRingRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 3, 1)).setObjects(("H3C-RRPP-MIB", "h3cRrppDomainID"), ("H3C-RRPP-MIB", "h3cRrppRingID"))
if mibBuilder.loadTexts: h3cRrppRingRecover.setStatus('current')
h3cRrppRingFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 3, 2)).setObjects(("H3C-RRPP-MIB", "h3cRrppDomainID"), ("H3C-RRPP-MIB", "h3cRrppRingID"))
if mibBuilder.loadTexts: h3cRrppRingFail.setStatus('current')
h3cRrppMultiMaster = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 3, 3)).setObjects(("H3C-RRPP-MIB", "h3cRrppDomainID"), ("H3C-RRPP-MIB", "h3cRrppRingID"))
if mibBuilder.loadTexts: h3cRrppMultiMaster.setStatus('current')
h3cRrppMajorFault = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 45, 3, 4)).setObjects(("H3C-RRPP-MIB", "h3cRrppDomainID"), ("H3C-RRPP-MIB", "h3cRrppRingID"))
if mibBuilder.loadTexts: h3cRrppMajorFault.setStatus('current')
mibBuilder.exportSymbols("H3C-RRPP-MIB", h3cRrppRingFail=h3cRrppRingFail, h3cRrppRingEntry=h3cRrppRingEntry, h3cRrppNotifications=h3cRrppNotifications, h3cRrppPortRXLinkUp=h3cRrppPortRXLinkUp, h3cRrppMajorFault=h3cRrppMajorFault, EnabledStatus=EnabledStatus, h3cRrppRingLevel=h3cRrppRingLevel, h3cRrppPortTXMajorFault=h3cRrppPortTXMajorFault, h3cRrppDomainTable=h3cRrppDomainTable, h3cRrppPortRole=h3cRrppPortRole, h3cRrppRingNodeMode=h3cRrppRingNodeMode, PYSNMP_MODULE_ID=h3cRrpp, h3cRrppMultiMaster=h3cRrppMultiMaster, h3cRrppDomainID=h3cRrppDomainID, h3cRrppPortTXEdgeHello=h3cRrppPortTXEdgeHello, h3cRrppPasswordType=h3cRrppPasswordType, h3cRrppEnableStatus=h3cRrppEnableStatus, h3cRrppProtectVlanConfigMode=h3cRrppProtectVlanConfigMode, h3cRrppRingEnableStatus=h3cRrppRingEnableStatus, h3cRrppRingRecover=h3cRrppRingRecover, h3cRrppDomainInstanceListLow=h3cRrppDomainInstanceListLow, h3cRrppDomainInstanceListHigh=h3cRrppDomainInstanceListHigh, h3cRrppRingTable=h3cRrppRingTable, h3cRrppPortTable=h3cRrppPortTable, h3cRrppPortRXCommonFlush=h3cRrppPortRXCommonFlush, h3cRrppTable=h3cRrppTable, h3cRrppScalarGroup=h3cRrppScalarGroup, h3cRrppDomainHelloTime=h3cRrppDomainHelloTime, h3cRrppPassword=h3cRrppPassword, h3cRrppPortRXMajorFault=h3cRrppPortRXMajorFault, h3cRrppRingID=h3cRrppRingID, h3cRrppRingActive=h3cRrppRingActive, h3cRrppDomainRowStatus=h3cRrppDomainRowStatus, h3cRrppDomainProtectVlanListLow=h3cRrppDomainProtectVlanListLow, h3cRrppPortTXLinkUp=h3cRrppPortTXLinkUp, h3cRrppPortID=h3cRrppPortID, h3cRrppDomainEntry=h3cRrppDomainEntry, h3cRrppRingRowStatus=h3cRrppRingRowStatus, h3cRrppPortRXError=h3cRrppPortRXError, h3cRrppPortTXLinkDown=h3cRrppPortTXLinkDown, h3cRrppRingPrimaryPort=h3cRrppRingPrimaryPort, h3cRrppRingSecondaryPort=h3cRrppRingSecondaryPort, h3cRrppPortState=h3cRrppPortState, h3cRrppPortRXLinkDown=h3cRrppPortRXLinkDown, h3cRrppDomainFailTime=h3cRrppDomainFailTime, h3cRrppPortRXCompleteFlush=h3cRrppPortRXCompleteFlush, h3cRrppPortRXHello=h3cRrppPortRXHello, h3cRrppPortTXHello=h3cRrppPortTXHello, h3cRrppPortTXCommonFlush=h3cRrppPortTXCommonFlush, h3cRrppPortRXEdgeHello=h3cRrppPortRXEdgeHello, h3cRrppPortEntry=h3cRrppPortEntry, h3cRrpp=h3cRrpp, h3cRrppDomainControlVlanID=h3cRrppDomainControlVlanID, h3cRrppDomainProtectVlanListHigh=h3cRrppDomainProtectVlanListHigh, h3cRrppRingState=h3cRrppRingState, h3cRrppPortTXCompleteFlush=h3cRrppPortTXCompleteFlush)
