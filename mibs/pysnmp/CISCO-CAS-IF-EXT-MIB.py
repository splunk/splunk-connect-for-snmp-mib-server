#
# PySNMP MIB module CISCO-CAS-IF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CAS-IF-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ccasGrpCfgEntry, ccasVoiceCfgEntry = mibBuilder.importSymbols("CISCO-CAS-IF-MIB", "ccasGrpCfgEntry", "ccasVoiceCfgEntry")
cmgwIndex, CVoiceTonePlanIndexOrZero, CCallControlProfileIndexOrZero = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex", "CVoiceTonePlanIndexOrZero", "CCallControlProfileIndexOrZero")
CH248Packages, = mibBuilder.importSymbols("CISCO-MEGACO-EXT-MIB", "CH248Packages")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
BulkConfigResult, ConfigIterator = mibBuilder.importSymbols("CISCO-TC", "BulkConfigResult", "ConfigIterator")
CiscoCodecPacketPeriod, = mibBuilder.importSymbols("CISCO-VOICE-AALX-PROFILE-MIB", "CiscoCodecPacketPeriod")
CvcCoderTypeRate, CvcFaxTransmitRate = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcCoderTypeRate", "CvcFaxTransmitRate")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, ObjectIdentity, TimeTicks, Gauge32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Unsigned32, Bits, IpAddress, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Unsigned32", "Bits", "IpAddress", "Counter32", "MibIdentifier")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
ciscoCasIfExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 314))
ciscoCasIfExtMIB.setRevisions(('2005-11-28 00:00', '2004-06-23 00:00', '2004-05-26 00:00', '2003-04-17 00:00',))
if mibBuilder.loadTexts: ciscoCasIfExtMIB.setLastUpdated('200511280000Z')
if mibBuilder.loadTexts: ciscoCasIfExtMIB.setOrganization('Cisco Systems, Inc.')
ciscoCasIfExtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 0))
ciscoCasIfExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1))
ccasIfExtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1))
ccasIfExtProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2))
ccasIfExtConfigLineSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3))
ccasIfExtConfigRegisterSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4))
ccasIfExtConfigTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5))
ccasIfExtGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6))
class CASLineSignal(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class CASRegisterSignal(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("compelled", 1), ("noncompelled", 2), ("semicompelled", 3))

class CASForwardSignal(TextualConvention, Integer32):
    reference = ' ITU-T recommendation Q.441'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))
    namedValues = NamedValues(("notApplicable", 1), ("i1", 2), ("i2", 3), ("i3", 4), ("i4", 5), ("i5", 6), ("i6", 7), ("i7", 8), ("i8", 9), ("i9", 10), ("i10", 11), ("i11", 12), ("i12", 13), ("i13", 14), ("i14", 15), ("i15", 16), ("ii1", 17), ("ii2", 18), ("ii3", 19), ("ii4", 20), ("ii5", 21), ("ii6", 22), ("ii7", 23), ("ii8", 24), ("ii9", 25), ("ii10", 26), ("ii11", 27), ("ii12", 28), ("ii13", 29), ("ii14", 30), ("ii15", 31), ("iiI1", 32), ("iiI2", 33), ("iii3", 34), ("iii4", 35), ("iii5", 36), ("iii6", 37), ("iii7", 38), ("iii8", 39), ("iii9", 40), ("iii10", 41), ("iii11", 42), ("iii12", 43), ("iii13", 44), ("iii14", 45), ("iii15", 46))

class CASBackwardSignal(TextualConvention, Integer32):
    reference = ' ITU-T recommendation Q.441'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))
    namedValues = NamedValues(("notApplicable", 1), ("a1", 2), ("a2", 3), ("a3", 4), ("a4", 5), ("a5", 6), ("a6", 7), ("a7", 8), ("a8", 9), ("a9", 10), ("a10", 11), ("a11", 12), ("a12", 13), ("a13", 14), ("a14", 15), ("a15", 16), ("b1", 17), ("b2", 18), ("b3", 19), ("b4", 20), ("b5", 21), ("b6", 22), ("b7", 23), ("b8", 24), ("b9", 25), ("b10", 26), ("b11", 27), ("b12", 28), ("b13", 29), ("b14", 30), ("b15", 31), ("c1", 32), ("c2", 33), ("c3", 34), ("c4", 35), ("c5", 36), ("c6", 37), ("c7", 38), ("c8", 39), ("c9", 40), ("c10", 41), ("c11", 42), ("c12", 43), ("c13", 44), ("c14", 45), ("c15", 46))

class CASCountryCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))
    namedValues = NamedValues(("itu", 1), ("argentina", 2), ("australia", 3), ("bolivia", 4), ("brazil", 5), ("bulgaria", 6), ("china", 7), ("colombia", 8), ("costaRica", 9), ("croatia", 10), ("eastEurope", 11), ("ecuadorIT", 12), ("ecuadorLME", 13), ("greece", 14), ("guatemala", 15), ("hongKong", 16), ("india", 17), ("indonesia", 18), ("israel", 19), ("korea", 20), ("laos", 21), ("malaysia", 22), ("malta", 23), ("mongolia", 24), ("newZealand", 25), ("paraguay", 26), ("peru", 27), ("philippines", 28), ("saudiArabia", 29), ("singapore", 30), ("southAfrica", 31), ("telemex", 32), ("telnor", 33), ("thailand", 34), ("uruguay", 35), ("venezuela", 36), ("vietnam", 37), ("bemilcom", 38))

ccasIfExtVoiceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1), )
if mibBuilder.loadTexts: ccasIfExtVoiceCfgTable.setStatus('current')
ccasIfExtVoiceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1), )
ccasVoiceCfgEntry.registerAugmentions(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgEntry"))
ccasIfExtVoiceCfgEntry.setIndexNames(*ccasVoiceCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasIfExtVoiceCfgEntry.setStatus('current')
ccasIfExtVoiceCfgLifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgLifNumber.setStatus('current')
ccasIfExtVoiceCfgCcntrlProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 2), CCallControlProfileIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgCcntrlProfile.setStatus('current')
ccasIfExtVoiceCfgVadEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgVadEnabled.setStatus('current')
ccasIfExtVoiceCfgContinuityTone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)).clone(2010)).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgContinuityTone1.setStatus('current')
ccasIfExtVoiceCfgContinuityTone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)).clone(1780)).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgContinuityTone2.setStatus('current')
ccasIfExtVoiceCfgModemPassThru = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("passThruDisabled", 1), ("passThruCisco", 2), ("passThruNse", 3), ("passThruNseAal2", 4), ("passThruCa", 5), ("passThruTypeE", 6), ("system", 7), ("passThruNseCa", 8))).clone('passThruNse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgModemPassThru.setStatus('current')
ccasIfExtVoiceCfgUpspeedCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 7), CvcCoderTypeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgUpspeedCodec.setStatus('current')
ccasIfExtVoiceCfgT38MaxFaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 8), CvcFaxTransmitRate().clone('fax14400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgT38MaxFaxTxRate.setStatus('deprecated')
ccasIfExtVoiceCfgT38HsPktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 9), CiscoCodecPacketPeriod().clone('pktPeriod30000us')).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgT38HsPktPeriod.setStatus('deprecated')
ccasIfExtVoiceCfgT38HsRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setUnits('FAX packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgT38HsRedundancy.setStatus('deprecated')
ccasIfExtVoiceCfgRepetition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 11), ConfigIterator().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgRepetition.setStatus('current')
ccasIfExtVoiceCfgBulkCfgOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 12), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgBulkCfgOwner.setStatus('current')
ccasIfExtVoiceCfgBulkCfgResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 13), BulkConfigResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgBulkCfgResult.setStatus('current')
ccasIfExtVoiceCfgVadTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgVadTimer.setStatus('current')
ccasIfExtVoiceCfgICSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgICSEnable.setStatus('current')
ccasIfExtVoiceCfgICSIntTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgICSIntTimer.setStatus('current')
ccasIfExtVoiceCfgTonePlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 17), CVoiceTonePlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgTonePlan.setStatus('current')
ccasIfExtVoiceCfgGwyLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgGwyLinkId.setStatus('current')
ccasIfExtVoiceCfgH248PkgIds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 19), CH248Packages()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgH248PkgIds.setStatus('current')
ccasIfExtVoiceCfgEventMappingIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgEventMappingIdx.setStatus('current')
ccasIfExtVoiceCfgGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgGatewayIndex.setStatus('current')
ccasIfExtVoiceCfgCasProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgCasProfile.setStatus('current')
ccasIfExtVoiceCfgCasVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgCasVariant.setStatus('current')
ccasIfExtVoiceCfgDs0ChannelsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgDs0ChannelsFail.setStatus('current')
ccasIfExtVoiceCfgNoiseRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("g711A2", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtVoiceCfgNoiseRegType.setStatus('current')
ccasIfExtDs0GrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 3), )
if mibBuilder.loadTexts: ccasIfExtDs0GrpCfgTable.setStatus('current')
ccasIfExtDs0GrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 3, 1), )
ccasGrpCfgEntry.registerAugmentions(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtDs0GrpCfgEntry"))
ccasIfExtDs0GrpCfgEntry.setIndexNames(*ccasGrpCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasIfExtDs0GrpCfgEntry.setStatus('current')
ccasIfExtDs0GrpRepetition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 3, 1, 1), ConfigIterator().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtDs0GrpRepetition.setStatus('current')
ccasIfExtDs0GrpRepeatOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 3, 1, 2), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasIfExtDs0GrpRepeatOwner.setStatus('current')
ccasIfExtDs0GrpRepeatResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 1, 3, 1, 3), BulkConfigResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasIfExtDs0GrpRepeatResult.setStatus('current')
ccasIfExtProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1), )
if mibBuilder.loadTexts: ccasIfExtProfileTable.setStatus('current')
ccasIfExtProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasProfileIndex"))
if mibBuilder.loadTexts: ccasIfExtProfileEntry.setStatus('current')
ccasProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasProfileIndex.setStatus('current')
ccasProfileLineSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasProfileLineSigTimer.setStatus('current')
ccasProfileRegisterSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasProfileRegisterSignal.setStatus('current')
ccasProfileRegSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasProfileRegSigTimer.setStatus('current')
ccasProfileGeneralCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasProfileGeneralCfg.setStatus('current')
ccasProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasProfileRowStatus.setStatus('current')
ccasIfExtVariantTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2), )
if mibBuilder.loadTexts: ccasIfExtVariantTable.setStatus('current')
ccasIfExtVariantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasVariantIndex"))
if mibBuilder.loadTexts: ccasIfExtVariantEntry.setStatus('current')
ccasVariantIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasVariantIndex.setStatus('current')
ccasVariantFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasVariantFile.setStatus('current')
ccasVariantSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasVariantSource.setStatus('current')
ccasVariantNumberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasVariantNumberCount.setStatus('current')
ccasVariantState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initInProgress", 1), ("initSuccessfully", 2), ("initFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasVariantState.setStatus('current')
ccasVariantRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasVariantRowStatus.setStatus('current')
ccasIfExtIncomingLineSignalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1), )
if mibBuilder.loadTexts: ccasIfExtIncomingLineSignalTable.setStatus('current')
ccasIfExtIncomingLineSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasVariantIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasILSSignalNameIndex"))
if mibBuilder.loadTexts: ccasIfExtIncomingLineSignalEntry.setStatus('current')
ccasILSSignalNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasILSSignalNameIndex.setStatus('current')
ccasILSSignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasILSSignalName.setStatus('current')
ccasILSRxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 4), CASLineSignal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasILSRxPattern.setStatus('current')
ccasILSMatchedRxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 5), CASLineSignal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasILSMatchedRxPattern.setStatus('current')
ccasILSMatchedTxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 6), CASLineSignal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasILSMatchedTxPattern.setStatus('current')
ccasILSMinMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasILSMinMakeTime.setStatus('current')
ccasILSMaxMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasILSMaxMakeTime.setStatus('current')
ccasILSMinBreakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasILSMinBreakTime.setStatus('current')
ccasILSMaxBreakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasILSMaxBreakTime.setStatus('current')
ccasIfExtOutgoingLineSignalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2), )
if mibBuilder.loadTexts: ccasIfExtOutgoingLineSignalTable.setStatus('current')
ccasIfExtOutgoingLineSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasVariantIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasOLSSignalNameIndex"))
if mibBuilder.loadTexts: ccasIfExtOutgoingLineSignalEntry.setStatus('current')
ccasOLSSignalNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasOLSSignalNameIndex.setStatus('current')
ccasOLSCasSignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasOLSCasSignalName.setStatus('current')
ccasOLSTxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2, 1, 3), CASLineSignal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasOLSTxPattern.setStatus('current')
ccasOLSMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasOLSMakeTime.setStatus('current')
ccasOLSBreakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasOLSBreakTime.setStatus('current')
ccasIfExtRegisterSignalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1), )
if mibBuilder.loadTexts: ccasIfExtRegisterSignalTable.setStatus('current')
ccasIfExtRegisterSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasRSIndex"))
if mibBuilder.loadTexts: ccasIfExtRegisterSignalEntry.setStatus('current')
ccasRSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasRSIndex.setStatus('current')
ccasRSCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 2), CASCountryCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSCountry.setStatus('current')
ccasRSSubRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSSubRegion.setStatus('current')
ccasBwdRSNextDigitANI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 4), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSNextDigitANI.setStatus('current')
ccasBwdRSNextDigitDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 5), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSNextDigitDNIS.setStatus('current')
ccasBwdRSPrevDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 6), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSPrevDigit.setStatus('current')
ccasBwdRSXtoGroupBSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 7), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSXtoGroupBSignals.setStatus('current')
ccasBwdRSCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 8), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSCongestion.setStatus('current')
ccasBwdRSCallingPartyCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 9), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSCallingPartyCategory.setStatus('current')
ccasBwdRSAddrCompleteGroupA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 10), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSAddrCompleteGroupA.setStatus('current')
ccasBwdRSPrevNminus2Digit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 11), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSPrevNminus2Digit.setStatus('current')
ccasBwdRSPrevNminus3Digit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 12), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSPrevNminus3Digit.setStatus('current')
ccasBwdRSCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 13), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSCountryCode.setStatus('current')
ccasBwdRSLangDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 14), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSLangDiscr.setStatus('current')
ccasBwdRSNatureOfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 15), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSNatureOfCircuit.setStatus('current')
ccasBwdRSInfoEchoSuppressor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 16), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSInfoEchoSuppressor.setStatus('current')
ccasBwdRSInternationalCongst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 17), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSInternationalCongst.setStatus('current')
ccasBwdRSXtoGroupC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 18), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSXtoGroupC.setStatus('current')
ccasBwdRSRepeatLastDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 19), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSRepeatLastDigit.setStatus('current')
ccasBwdRSRepeatCalledDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 20), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSRepeatCalledDigit.setStatus('current')
ccasBwdRSPlaySITTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 21), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSPlaySITTone.setStatus('current')
ccasBwdRSSubscriberLineBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 22), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSSubscriberLineBusy.setStatus('current')
ccasBwdRSNetworkCongstInGroupB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 23), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSNetworkCongstInGroupB.setStatus('current')
ccasBwdRSInvalidDialedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 24), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSInvalidDialedNumber.setStatus('current')
ccasBwdRSSubLineFreeWithCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 25), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSSubLineFreeWithCharge.setStatus('current')
ccasBwdRSSubLineFreeWithNoCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 26), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSSubLineFreeWithNoCharge.setStatus('current')
ccasBwdRSSubLineOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 27), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSSubLineOutOfOrder.setStatus('current')
ccasBwdRSAnnouncement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 28), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSAnnouncement.setStatus('current')
ccasBwdRSXtoGrpASendNextDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 29), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSXtoGrpASendNextDNIS.setStatus('current')
ccasBwdRSXtoGrpASendDNISFrmBeg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 30), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSXtoGrpASendDNISFrmBeg.setStatus('current')
ccasBwdRSXtoGrpAResendLastDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 31), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSXtoGrpAResendLastDNIS.setStatus('current')
ccasBwdRSSSendCatSwGrpB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 32), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSSSendCatSwGrpB.setStatus('current')
ccasBwdRSSGrpCCong = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 33), CASBackwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasBwdRSSGrpCCong.setStatus('current')
ccasFwdRSANIDigitAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 34), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSANIDigitAvailable.setStatus('current')
ccasFwdRSANIDigitNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 35), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSANIDigitNotAvailable.setStatus('current')
ccasFwdRSEndANICallingPartyNotRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 36), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSEndANICallingPartyNotRev.setStatus('current')
ccasFwdRSEndANICallingPartyRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 37), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSEndANICallingPartyRev.setStatus('current')
ccasFwdRSEndOfDNISDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 38), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSEndOfDNISDigit.setStatus('current')
ccasFwdRSNoCategoryAvailble = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 39), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSNoCategoryAvailble.setStatus('current')
ccasFwdRSCCEchoSuppressor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 40), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSCCEchoSuppressor.setStatus('current')
ccasFwdRSCCNoEchoSuppressor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 41), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSCCNoEchoSuppressor.setStatus('current')
ccasFwdRSCCInsertEchoSuppressor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 42), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSCCInsertEchoSuppressor.setStatus('current')
ccasFwdRSIncHalfEchoRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 43), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSIncHalfEchoRequired.setStatus('current')
ccasFwdRSTestCall = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 44), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSTestCall.setStatus('current')
ccasFwdRSSatelLinkIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 45), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSatelLinkIncluded.setStatus('current')
ccasFwdRSSatelLinkNotIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 46), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSatelLinkNotIncluded.setStatus('current')
ccasFwdRSDiscriminatorDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 47), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSDiscriminatorDigit.setStatus('current')
ccasFwdRSOtherLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 48), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSOtherLanguage.setStatus('current')
ccasFwdRSOtherLanguage1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 49), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSOtherLanguage1.setStatus('current')
ccasFwdRSOtherLanguage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 50), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSOtherLanguage2.setStatus('current')
ccasFwdRSRequestNotAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 51), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSRequestNotAccepted.setStatus('current')
ccasFwdRSSubWithoutPriorNational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 52), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSubWithoutPriorNational.setStatus('current')
ccasFwdRSSubPriorNational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 53), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSubPriorNational.setStatus('current')
ccasFwdRSSubPriorInternational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 54), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSubPriorInternational.setStatus('current')
ccasFwdRSMaintenanceEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 55), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSMaintenanceEquipment.setStatus('current')
ccasFwdRSOperatorCall = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 56), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSOperatorCall.setStatus('current')
ccasFwdRSDataTransNational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 57), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSDataTransNational.setStatus('current')
ccasFwdRSDataTransInternational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 58), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSDataTransInternational.setStatus('current')
ccasFwdRSOperNoFwdTransFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 59), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSOperNoFwdTransFacility.setStatus('current')
ccasFwdRSOperFwdTransFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 60), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSOperFwdTransFacility.setStatus('current')
ccasFwdRSSubsrcWithMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 61), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSubsrcWithMeter.setStatus('current')
ccasFwdRSSubsrcWithIDD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 62), CASForwardSignal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasFwdRSSubsrcWithIDD.setStatus('current')
ccasRSInterpreFirstANIDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firstANIDigit", 1), ("aniAvailableOrNot", 2), ("subscriberCategory", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSInterpreFirstANIDigit.setStatus('current')
ccasRSGetValueFromValidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 64), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSGetValueFromValidIndex.setStatus('current')
ccasRSSeqInfCollect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 65), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSSeqInfCollect.setStatus('current')
ccasRSSendFirstFwdSig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dnisCCLangDisc", 1), ("dnisLangDiscCC", 2), ("cCLangDiscDnis", 3), ("cCDnisLangDisc", 4), ("langDiscCCDnis", 5), ("langDiscDnisCC", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSSendFirstFwdSig.setStatus('current')
ccasRSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 4, 1, 1, 67), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSRowStatus.setStatus('current')
ccasIfExtLineSignalTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3), )
if mibBuilder.loadTexts: ccasIfExtLineSignalTimerTable.setStatus('current')
ccasIfExtLineSignalTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasLSTIndex"))
if mibBuilder.loadTexts: ccasIfExtLineSignalTimerEntry.setStatus('current')
ccasLSTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasLSTIndex.setStatus('current')
ccasLSTIdleGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTIdleGuardTimer.setStatus('current')
ccasLSTClearFwdTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(120000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTClearFwdTimer.setStatus('current')
ccasLSTClearBwdTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(120000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTClearBwdTimer.setStatus('current')
ccasLSTReleaseGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(800)).setUnits('millliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTReleaseGuardTimer.setStatus('current')
ccasLSTCASGlareTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTCASGlareTimer.setStatus('current')
ccasLSTAnswerMeterDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(600)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTAnswerMeterDelayTimer.setStatus('current')
ccasLSTCASDebounceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(5)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTCASDebounceTimer.setStatus('current')
ccasLSTSeizeAckRspTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(200)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTSeizeAckRspTimer.setStatus('current')
ccasLSTDelayBetRegAnsAndLineAns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(90)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTDelayBetRegAnsAndLineAns.setStatus('current')
ccasLSTSeizeAckToDigitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTSeizeAckToDigitTimer.setStatus('current')
ccasLSTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 3, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasLSTRowStatus.setStatus('current')
ccasIfExtRegSignalTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2), )
if mibBuilder.loadTexts: ccasIfExtRegSignalTimerTable.setStatus('current')
ccasIfExtRegSignalTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasRSTIndex"))
if mibBuilder.loadTexts: ccasIfExtRegSignalTimerEntry.setStatus('current')
ccasRSTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasRSTIndex.setStatus('current')
ccasRSTAnswerSigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTAnswerSigTimer.setStatus('current')
ccasRSTCompelledFwdToneOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTCompelledFwdToneOnTimer.setStatus('current')
ccasRSTCompelledFwdToneOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(24)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTCompelledFwdToneOffTimer.setStatus('current')
ccasRSTCompelledBwdToneOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTCompelledBwdToneOnTimer.setStatus('current')
ccasRSTOutFwdPulseOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(150)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTOutFwdPulseOnTimer.setStatus('current')
ccasRSTOutFwdPulseOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(150)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTOutFwdPulseOffTimer.setStatus('current')
ccasRSTIncFwdPulseOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(150)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTIncFwdPulseOnTimer.setStatus('current')
ccasRSTBwdPulseOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(150)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTBwdPulseOnTimer.setStatus('current')
ccasRSTIncomingRegSigDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTIncomingRegSigDuration.setStatus('current')
ccasRSTOutgoingRegSigDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTOutgoingRegSigDuration.setStatus('current')
ccasRSTCalledPartyInterDigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTCalledPartyInterDigTimer.setStatus('current')
ccasRSTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 5, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasRSTRowStatus.setStatus('current')
ccasIfExtGeneralConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1), )
if mibBuilder.loadTexts: ccasIfExtGeneralConfigTable.setStatus('current')
ccasIfExtGeneralConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAS-IF-EXT-MIB", "ccasGCnfIndex"))
if mibBuilder.loadTexts: ccasIfExtGeneralConfigEntry.setStatus('current')
ccasGCnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ccasGCnfIndex.setStatus('current')
ccasGCnfGlarePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rptSzOnGlareTmrExp", 1), ("rptSzOnGlareDet", 2), ("rptRelOnGlareTmrExpAndGoOnHook", 3), ("goOnHookOnGlareDet", 4))).clone('rptSzOnGlareTmrExp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfGlarePolicy.setStatus('current')
ccasGCnfParmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("casVariantFile", 1), ("mib", 2))).clone('mib')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfParmSource.setStatus('current')
ccasGCnfRegSigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 4), CASRegisterSignal().clone('compelled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfRegSigMode.setStatus('current')
ccasGCnfLineSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("digital", 1), ("analog", 2), ("pulse", 3))).clone('digital')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfLineSigType.setStatus('current')
ccasGCnfRingBackType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wink", 1), ("winkAndTone", 2))).clone('wink')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfRingBackType.setStatus('current')
ccasGCnfIncCallHiFreqPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfIncCallHiFreqPower.setStatus('current')
ccasGCnfIncCallLoFreqPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfIncCallLoFreqPower.setStatus('current')
ccasGCnfIncCallNegTwist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfIncCallNegTwist.setStatus('current')
ccasGCnfIncCallPosTwist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfIncCallPosTwist.setStatus('current')
ccasGCnfIncCallBreakThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfIncCallBreakThreshold.setStatus('current')
ccasGCnfOutCallLoFreqPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfOutCallLoFreqPower.setStatus('current')
ccasGCnfOutCallPowerTwist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfOutCallPowerTwist.setStatus('current')
ccasGCnfOutCadenceOntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfOutCadenceOntime.setStatus('current')
ccasGCnfOutCadenceOfftime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfOutCadenceOfftime.setStatus('current')
ccasGCnfCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfCountryCode.setStatus('current')
ccasGCnfEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noEchoRequired", 1), ("outgoingHalfEchoRequired", 2), ("outgoingHalfEchoSuppressorInserted", 3), ("incomingHalfEchoSuppressorRequired", 4))).clone('outgoingHalfEchoRequired')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfEchoCancellation.setStatus('current')
ccasGCnfSubscriberCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("subscriberWithoutPriority", 1), ("subscriberWithPriority", 2), ("maintenanceEquipment", 3), ("operatorCall", 4), ("dataNationalTransmission", 5), ("subscriberOrOperatorWithoutForwardTransfer", 6), ("operatorWithForwardTransfer", 7), ("dataInternationalTransmission", 8))).clone('subscriberWithoutPriority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfSubscriberCategory.setStatus('current')
ccasGCnfNatureOfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notIncluded", 1), ("included", 2))).clone('notIncluded')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfNatureOfCircuit.setStatus('current')
ccasGCnfCompelledSignalingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enbloc", 1), ("overlap", 2), ("endtoend", 3))).clone('enbloc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfCompelledSignalingType.setStatus('current')
ccasGCnfTxDigitOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aniDnis", 1), ("dnisAni", 2))).clone('dnisAni')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfTxDigitOrder.setStatus('current')
ccasGCnfDigitDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dtmf", 1), ("mf", 2), ("dp", 3))).clone('mf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfDigitDetectMode.setStatus('current')
ccasGCnfMeteringRepIntThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfMeteringRepIntThresh.setStatus('current')
ccasGCnfStartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(16)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfStartTimer.setStatus('current')
ccasGCnfLongTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(16)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfLongTimer.setStatus('current')
ccasGCnfShortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfShortTimer.setStatus('current')
ccasGCnfLongDurationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 9900)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfLongDurationTimer.setStatus('current')
ccasGCnfMGCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfMGCTimer.setStatus('current')
ccasGCnfDigitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dtmf", 1), ("mf", 2), ("dp", 3))).clone('mf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfDigitType.setStatus('current')
ccasGCnfEndPointDirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bidirectional", 1), ("incoming", 2), ("outgoing", 3))).clone('bidirectional')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfEndPointDirectional.setStatus('current')
ccasGCnfPulseReceiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfPulseReceiveTimeout.setStatus('current')
ccasGCnfInitialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfInitialDelay.setStatus('current')
ccasGCnfMaxNumCallParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfMaxNumCallParty.setStatus('current')
ccasGCnfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 314, 1, 6, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGCnfRowStatus.setStatus('current')
ciscoCasIfExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 2))
ccasIfExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 1))
ccasIfExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2))
ccasIfExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 1, 1)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtBulkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtMIBCompliance = ccasIfExtMIBCompliance.setStatus('deprecated')
ccasIfExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 1, 2)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGroupRev1"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtBulkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtMIBComplianceRev1 = ccasIfExtMIBComplianceRev1.setStatus('deprecated')
ccasIfExtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 1, 3)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGroupRev1"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtBulkGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgCasGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtProfileGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtConfigLineSignalGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtConfigRegisterSignalGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtConfigTimerGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtGeneralConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtMIBComplianceRev2 = ccasIfExtMIBComplianceRev2.setStatus('deprecated')
ccasIfExtMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 1, 4)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGroupRev1"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtBulkGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgCasGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtProfileGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtConfigLineSignalGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtConfigRegisterSignalGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtConfigTimerGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtGeneralConfigGroup"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtMIBComplianceRev3 = ccasIfExtMIBComplianceRev3.setStatus('current')
ccasIfExtVoiceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 1)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgLifNumber"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgCcntrlProfile"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgVadEnabled"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgContinuityTone1"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgContinuityTone2"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgModemPassThru"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgUpspeedCodec"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgT38MaxFaxTxRate"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgT38HsPktPeriod"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgT38HsRedundancy"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgVadTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgICSEnable"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgICSIntTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgTonePlan"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGwyLinkId"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgH248PkgIds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtVoiceCfgGroup = ccasIfExtVoiceCfgGroup.setStatus('deprecated')
ccasIfExtBulkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 2)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgRepetition"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgBulkCfgOwner"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgBulkCfgResult"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtDs0GrpRepetition"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtDs0GrpRepeatOwner"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtDs0GrpRepeatResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtBulkGroup = ccasIfExtBulkGroup.setStatus('current')
ccasIfExtVoiceCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 3)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgLifNumber"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgCcntrlProfile"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgVadEnabled"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgContinuityTone1"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgContinuityTone2"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgModemPassThru"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgUpspeedCodec"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgVadTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgICSEnable"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgICSIntTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgTonePlan"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGwyLinkId"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgH248PkgIds"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgEventMappingIdx"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgGatewayIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtVoiceCfgGroupRev1 = ccasIfExtVoiceCfgGroupRev1.setStatus('current')
ccasIfExtVoiceCfgCasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 4)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgCasProfile"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgCasVariant"), ("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgDs0ChannelsFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtVoiceCfgCasGroup = ccasIfExtVoiceCfgCasGroup.setStatus('current')
ccasIfExtProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 5)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasProfileLineSigTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasProfileRegisterSignal"), ("CISCO-CAS-IF-EXT-MIB", "ccasProfileRegSigTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasProfileGeneralCfg"), ("CISCO-CAS-IF-EXT-MIB", "ccasProfileRowStatus"), ("CISCO-CAS-IF-EXT-MIB", "ccasVariantFile"), ("CISCO-CAS-IF-EXT-MIB", "ccasVariantSource"), ("CISCO-CAS-IF-EXT-MIB", "ccasVariantNumberCount"), ("CISCO-CAS-IF-EXT-MIB", "ccasVariantState"), ("CISCO-CAS-IF-EXT-MIB", "ccasVariantRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtProfileGroup = ccasIfExtProfileGroup.setStatus('current')
ccasIfExtConfigLineSignalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 6)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasILSSignalName"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSRxPattern"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSMatchedRxPattern"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSMatchedTxPattern"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSMinMakeTime"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSMaxMakeTime"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSMinBreakTime"), ("CISCO-CAS-IF-EXT-MIB", "ccasILSMaxBreakTime"), ("CISCO-CAS-IF-EXT-MIB", "ccasOLSCasSignalName"), ("CISCO-CAS-IF-EXT-MIB", "ccasOLSTxPattern"), ("CISCO-CAS-IF-EXT-MIB", "ccasOLSMakeTime"), ("CISCO-CAS-IF-EXT-MIB", "ccasOLSBreakTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtConfigLineSignalGroup = ccasIfExtConfigLineSignalGroup.setStatus('current')
ccasIfExtConfigRegisterSignalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 7)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasRSCountry"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSSubRegion"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSNextDigitANI"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSNextDigitDNIS"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSPrevDigit"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSXtoGroupBSignals"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSCongestion"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSCallingPartyCategory"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSAddrCompleteGroupA"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSPrevNminus2Digit"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSPrevNminus3Digit"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSCountryCode"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSLangDiscr"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSNatureOfCircuit"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSInfoEchoSuppressor"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSInternationalCongst"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSXtoGroupC"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSRepeatLastDigit"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSRepeatCalledDigit"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSPlaySITTone"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSSubscriberLineBusy"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSNetworkCongstInGroupB"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSInvalidDialedNumber"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSSubLineFreeWithCharge"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSSubLineFreeWithNoCharge"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSSubLineOutOfOrder"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSAnnouncement"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSXtoGrpASendNextDNIS"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSXtoGrpASendDNISFrmBeg"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSXtoGrpAResendLastDNIS"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSSSendCatSwGrpB"), ("CISCO-CAS-IF-EXT-MIB", "ccasBwdRSSGrpCCong"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSANIDigitAvailable"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSANIDigitNotAvailable"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSEndANICallingPartyNotRev"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSEndANICallingPartyRev"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSEndOfDNISDigit"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSNoCategoryAvailble"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSCCEchoSuppressor"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSCCNoEchoSuppressor"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSCCInsertEchoSuppressor"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSIncHalfEchoRequired"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSTestCall"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSatelLinkIncluded"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSatelLinkNotIncluded"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSDiscriminatorDigit"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSOtherLanguage"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSOtherLanguage1"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSOtherLanguage2"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSRequestNotAccepted"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSubWithoutPriorNational"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSubPriorNational"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSubPriorInternational"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSMaintenanceEquipment"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSOperatorCall"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSDataTransNational"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSDataTransInternational"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSOperNoFwdTransFacility"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSOperFwdTransFacility"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSubsrcWithMeter"), ("CISCO-CAS-IF-EXT-MIB", "ccasFwdRSSubsrcWithIDD"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSInterpreFirstANIDigit"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSGetValueFromValidIndex"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSSeqInfCollect"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSSendFirstFwdSig"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtConfigRegisterSignalGroup = ccasIfExtConfigRegisterSignalGroup.setStatus('current')
ccasIfExtConfigTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 8)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasLSTIdleGuardTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTClearFwdTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTClearBwdTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTReleaseGuardTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTCASGlareTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTAnswerMeterDelayTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTCASDebounceTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTSeizeAckRspTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTDelayBetRegAnsAndLineAns"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTSeizeAckToDigitTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasLSTRowStatus"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTAnswerSigTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTCompelledFwdToneOnTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTCompelledFwdToneOffTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTCompelledBwdToneOnTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTOutFwdPulseOnTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTOutFwdPulseOffTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTIncFwdPulseOnTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTBwdPulseOnTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTIncomingRegSigDuration"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTOutgoingRegSigDuration"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTCalledPartyInterDigTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasRSTRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtConfigTimerGroup = ccasIfExtConfigTimerGroup.setStatus('current')
ccasIfExtGeneralConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 9)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasGCnfGlarePolicy"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfParmSource"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfRegSigMode"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfLineSigType"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfRingBackType"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfIncCallHiFreqPower"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfIncCallLoFreqPower"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfIncCallNegTwist"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfIncCallPosTwist"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfIncCallBreakThreshold"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfOutCallLoFreqPower"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfOutCallPowerTwist"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfOutCadenceOntime"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfOutCadenceOfftime"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfCountryCode"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfEchoCancellation"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfSubscriberCategory"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfNatureOfCircuit"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfCompelledSignalingType"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfTxDigitOrder"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfDigitDetectMode"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfMeteringRepIntThresh"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfStartTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfLongTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfShortTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfLongDurationTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfMGCTimer"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfDigitType"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfEndPointDirectional"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfPulseReceiveTimeout"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfInitialDelay"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfMaxNumCallParty"), ("CISCO-CAS-IF-EXT-MIB", "ccasGCnfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtGeneralConfigGroup = ccasIfExtGeneralConfigGroup.setStatus('current')
ccasIfExtVoiceCfgGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 314, 2, 2, 10)).setObjects(("CISCO-CAS-IF-EXT-MIB", "ccasIfExtVoiceCfgNoiseRegType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfExtVoiceCfgGroupSup1 = ccasIfExtVoiceCfgGroupSup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-CAS-IF-EXT-MIB", ccasBwdRSXtoGroupC=ccasBwdRSXtoGroupC, ccasFwdRSEndANICallingPartyNotRev=ccasFwdRSEndANICallingPartyNotRev, ccasIfExtVoiceCfgRepetition=ccasIfExtVoiceCfgRepetition, ccasFwdRSOtherLanguage=ccasFwdRSOtherLanguage, ccasIfExtRegSignalTimerTable=ccasIfExtRegSignalTimerTable, ccasIfExtMIBComplianceRev1=ccasIfExtMIBComplianceRev1, ccasIfExtConfigLineSignalGroup=ccasIfExtConfigLineSignalGroup, ccasBwdRSLangDiscr=ccasBwdRSLangDiscr, ccasRSGetValueFromValidIndex=ccasRSGetValueFromValidIndex, ccasIfExtGeneralConfigGroup=ccasIfExtGeneralConfigGroup, ccasIfExtVoiceCfgGatewayIndex=ccasIfExtVoiceCfgGatewayIndex, ccasFwdRSDiscriminatorDigit=ccasFwdRSDiscriminatorDigit, ccasBwdRSNextDigitANI=ccasBwdRSNextDigitANI, ccasGCnfPulseReceiveTimeout=ccasGCnfPulseReceiveTimeout, ccasGCnfDigitType=ccasGCnfDigitType, ccasIfExtVoiceCfgICSEnable=ccasIfExtVoiceCfgICSEnable, ccasGCnfStartTimer=ccasGCnfStartTimer, ccasBwdRSInvalidDialedNumber=ccasBwdRSInvalidDialedNumber, ccasIfExtGeneralConfigEntry=ccasIfExtGeneralConfigEntry, ccasIfExtProfileEntry=ccasIfExtProfileEntry, ccasVariantState=ccasVariantState, ccasFwdRSNoCategoryAvailble=ccasFwdRSNoCategoryAvailble, ccasGCnfMaxNumCallParty=ccasGCnfMaxNumCallParty, ccasIfExtDs0GrpRepeatResult=ccasIfExtDs0GrpRepeatResult, ccasIfExtVariantTable=ccasIfExtVariantTable, ccasGCnfRegSigMode=ccasGCnfRegSigMode, ccasBwdRSInternationalCongst=ccasBwdRSInternationalCongst, ccasRSTCompelledFwdToneOnTimer=ccasRSTCompelledFwdToneOnTimer, ccasIfExtVoiceCfgGroupRev1=ccasIfExtVoiceCfgGroupRev1, ccasIfExtVoiceCfgT38MaxFaxTxRate=ccasIfExtVoiceCfgT38MaxFaxTxRate, ccasLSTReleaseGuardTimer=ccasLSTReleaseGuardTimer, ccasIfExtVoiceCfgDs0ChannelsFail=ccasIfExtVoiceCfgDs0ChannelsFail, ccasBwdRSCongestion=ccasBwdRSCongestion, ccasRSTOutFwdPulseOnTimer=ccasRSTOutFwdPulseOnTimer, ccasGCnfIncCallHiFreqPower=ccasGCnfIncCallHiFreqPower, ccasIfExtVoiceCfgContinuityTone2=ccasIfExtVoiceCfgContinuityTone2, ccasIfExtConfigRegisterSignalGroup=ccasIfExtConfigRegisterSignalGroup, CASForwardSignal=CASForwardSignal, ccasFwdRSSatelLinkNotIncluded=ccasFwdRSSatelLinkNotIncluded, ccasIfExtConfigLineSignal=ccasIfExtConfigLineSignal, ccasRSTAnswerSigTimer=ccasRSTAnswerSigTimer, ccasGCnfDigitDetectMode=ccasGCnfDigitDetectMode, ccasGCnfLongDurationTimer=ccasGCnfLongDurationTimer, ccasILSMinBreakTime=ccasILSMinBreakTime, ccasVariantIndex=ccasVariantIndex, ccasGCnfTxDigitOrder=ccasGCnfTxDigitOrder, ccasGCnfMeteringRepIntThresh=ccasGCnfMeteringRepIntThresh, ccasGCnfRowStatus=ccasGCnfRowStatus, ccasIfExtVoiceCfgH248PkgIds=ccasIfExtVoiceCfgH248PkgIds, ccasGCnfIncCallNegTwist=ccasGCnfIncCallNegTwist, ccasIfExtBulkGroup=ccasIfExtBulkGroup, ccasFwdRSSubPriorInternational=ccasFwdRSSubPriorInternational, ccasRSCountry=ccasRSCountry, ccasGCnfCountryCode=ccasGCnfCountryCode, ccasGCnfEndPointDirectional=ccasGCnfEndPointDirectional, ccasBwdRSXtoGrpASendDNISFrmBeg=ccasBwdRSXtoGrpASendDNISFrmBeg, ccasIfExtMIBCompliances=ccasIfExtMIBCompliances, ccasIfExtVoiceCfgVadEnabled=ccasIfExtVoiceCfgVadEnabled, ccasGCnfIncCallBreakThreshold=ccasGCnfIncCallBreakThreshold, ccasRSTCompelledFwdToneOffTimer=ccasRSTCompelledFwdToneOffTimer, ccasIfExtVoiceCfgICSIntTimer=ccasIfExtVoiceCfgICSIntTimer, ccasIfExtMIBComplianceRev2=ccasIfExtMIBComplianceRev2, ccasVariantFile=ccasVariantFile, ccasIfExtVoiceCfgContinuityTone1=ccasIfExtVoiceCfgContinuityTone1, ccasFwdRSTestCall=ccasFwdRSTestCall, ccasIfExtRegisterSignalTable=ccasIfExtRegisterSignalTable, ccasFwdRSCCEchoSuppressor=ccasFwdRSCCEchoSuppressor, ccasIfExtVoiceCfgModemPassThru=ccasIfExtVoiceCfgModemPassThru, ccasIfExtProfileGroup=ccasIfExtProfileGroup, ccasBwdRSXtoGrpAResendLastDNIS=ccasBwdRSXtoGrpAResendLastDNIS, ccasOLSSignalNameIndex=ccasOLSSignalNameIndex, ccasFwdRSDataTransInternational=ccasFwdRSDataTransInternational, ccasRSTIncomingRegSigDuration=ccasRSTIncomingRegSigDuration, ccasBwdRSAddrCompleteGroupA=ccasBwdRSAddrCompleteGroupA, ccasIfExtVoiceCfgGwyLinkId=ccasIfExtVoiceCfgGwyLinkId, ccasIfExtVoiceCfgCasVariant=ccasIfExtVoiceCfgCasVariant, ccasIfExtProfileTable=ccasIfExtProfileTable, ccasILSSignalNameIndex=ccasILSSignalNameIndex, ccasILSMatchedTxPattern=ccasILSMatchedTxPattern, ccasOLSBreakTime=ccasOLSBreakTime, ccasBwdRSPrevNminus3Digit=ccasBwdRSPrevNminus3Digit, ccasFwdRSSubsrcWithMeter=ccasFwdRSSubsrcWithMeter, ccasGCnfMGCTimer=ccasGCnfMGCTimer, ccasGCnfOutCadenceOntime=ccasGCnfOutCadenceOntime, ccasLSTCASGlareTimer=ccasLSTCASGlareTimer, ccasIfExtVariantEntry=ccasIfExtVariantEntry, ccasBwdRSRepeatCalledDigit=ccasBwdRSRepeatCalledDigit, ccasGCnfGlarePolicy=ccasGCnfGlarePolicy, ccasOLSTxPattern=ccasOLSTxPattern, ccasGCnfInitialDelay=ccasGCnfInitialDelay, ccasIfExtVoiceCfgEntry=ccasIfExtVoiceCfgEntry, ccasIfExtVoiceCfgVadTimer=ccasIfExtVoiceCfgVadTimer, ccasIfExtOutgoingLineSignalTable=ccasIfExtOutgoingLineSignalTable, ccasRSTCalledPartyInterDigTimer=ccasRSTCalledPartyInterDigTimer, ccasIfExtVoiceCfgTable=ccasIfExtVoiceCfgTable, ccasGCnfOutCallPowerTwist=ccasGCnfOutCallPowerTwist, ccasFwdRSOperNoFwdTransFacility=ccasFwdRSOperNoFwdTransFacility, ccasProfileRegSigTimer=ccasProfileRegSigTimer, ccasFwdRSSubPriorNational=ccasFwdRSSubPriorNational, ccasProfileRegisterSignal=ccasProfileRegisterSignal, ccasBwdRSSGrpCCong=ccasBwdRSSGrpCCong, ccasLSTSeizeAckRspTimer=ccasLSTSeizeAckRspTimer, ciscoCasIfExtMIBNotifications=ciscoCasIfExtMIBNotifications, ccasRSTOutFwdPulseOffTimer=ccasRSTOutFwdPulseOffTimer, ccasLSTDelayBetRegAnsAndLineAns=ccasLSTDelayBetRegAnsAndLineAns, ccasBwdRSXtoGroupBSignals=ccasBwdRSXtoGroupBSignals, ccasIfExtDs0GrpCfgEntry=ccasIfExtDs0GrpCfgEntry, ccasBwdRSSubLineOutOfOrder=ccasBwdRSSubLineOutOfOrder, ccasIfExtVoiceCfgGroup=ccasIfExtVoiceCfgGroup, ccasIfExtLineSignalTimerTable=ccasIfExtLineSignalTimerTable, ccasVariantRowStatus=ccasVariantRowStatus, ccasIfExtVoiceCfgCasGroup=ccasIfExtVoiceCfgCasGroup, ccasBwdRSSubscriberLineBusy=ccasBwdRSSubscriberLineBusy, ccasGCnfOutCallLoFreqPower=ccasGCnfOutCallLoFreqPower, ccasIfExtVoiceCfgT38HsPktPeriod=ccasIfExtVoiceCfgT38HsPktPeriod, ccasGCnfSubscriberCategory=ccasGCnfSubscriberCategory, ccasIfExtRegSignalTimerEntry=ccasIfExtRegSignalTimerEntry, ccasBwdRSSSendCatSwGrpB=ccasBwdRSSSendCatSwGrpB, ccasGCnfNatureOfCircuit=ccasGCnfNatureOfCircuit, ccasRSTBwdPulseOnTimer=ccasRSTBwdPulseOnTimer, ccasBwdRSAnnouncement=ccasBwdRSAnnouncement, ccasIfExtIncomingLineSignalTable=ccasIfExtIncomingLineSignalTable, ccasFwdRSRequestNotAccepted=ccasFwdRSRequestNotAccepted, ccasRSTCompelledBwdToneOnTimer=ccasRSTCompelledBwdToneOnTimer, CASCountryCode=CASCountryCode, ccasVariantNumberCount=ccasVariantNumberCount, ccasFwdRSANIDigitAvailable=ccasFwdRSANIDigitAvailable, ccasBwdRSXtoGrpASendNextDNIS=ccasBwdRSXtoGrpASendNextDNIS, ccasFwdRSSubsrcWithIDD=ccasFwdRSSubsrcWithIDD, ccasFwdRSOperatorCall=ccasFwdRSOperatorCall, ccasIfExtOutgoingLineSignalEntry=ccasIfExtOutgoingLineSignalEntry, ccasBwdRSNatureOfCircuit=ccasBwdRSNatureOfCircuit, ccasBwdRSRepeatLastDigit=ccasBwdRSRepeatLastDigit, ccasFwdRSIncHalfEchoRequired=ccasFwdRSIncHalfEchoRequired, ccasProfileLineSigTimer=ccasProfileLineSigTimer, ccasILSSignalName=ccasILSSignalName, ccasILSMaxBreakTime=ccasILSMaxBreakTime, ccasLSTRowStatus=ccasLSTRowStatus, ccasIfExtGeneralConfigTable=ccasIfExtGeneralConfigTable, ccasFwdRSANIDigitNotAvailable=ccasFwdRSANIDigitNotAvailable, ccasGCnfParmSource=ccasGCnfParmSource, ccasIfExtMIBGroups=ccasIfExtMIBGroups, ccasProfileGeneralCfg=ccasProfileGeneralCfg, ciscoCasIfExtMIB=ciscoCasIfExtMIB, ccasFwdRSOtherLanguage2=ccasFwdRSOtherLanguage2, ccasILSRxPattern=ccasILSRxPattern, ccasIfExtVoiceCfgBulkCfgOwner=ccasIfExtVoiceCfgBulkCfgOwner, CASRegisterSignal=CASRegisterSignal, ccasILSMinMakeTime=ccasILSMinMakeTime, ccasGCnfIncCallPosTwist=ccasGCnfIncCallPosTwist, PYSNMP_MODULE_ID=ciscoCasIfExtMIB, ccasBwdRSNextDigitDNIS=ccasBwdRSNextDigitDNIS, ccasIfExtMIBComplianceRev3=ccasIfExtMIBComplianceRev3, ccasIfExtDs0GrpCfgTable=ccasIfExtDs0GrpCfgTable, ccasBwdRSPrevNminus2Digit=ccasBwdRSPrevNminus2Digit, ccasGCnfOutCadenceOfftime=ccasGCnfOutCadenceOfftime, ccasIfExtMIBCompliance=ccasIfExtMIBCompliance, ccasFwdRSDataTransNational=ccasFwdRSDataTransNational, ccasBwdRSSubLineFreeWithCharge=ccasBwdRSSubLineFreeWithCharge, ccasRSTRowStatus=ccasRSTRowStatus, ccasFwdRSCCInsertEchoSuppressor=ccasFwdRSCCInsertEchoSuppressor, ccasFwdRSCCNoEchoSuppressor=ccasFwdRSCCNoEchoSuppressor, ccasILSMatchedRxPattern=ccasILSMatchedRxPattern, ccasOLSCasSignalName=ccasOLSCasSignalName, ccasProfileIndex=ccasProfileIndex, ccasBwdRSInfoEchoSuppressor=ccasBwdRSInfoEchoSuppressor, ccasILSMaxMakeTime=ccasILSMaxMakeTime, ccasGCnfLongTimer=ccasGCnfLongTimer, ccasIfExtVoiceCfgEventMappingIdx=ccasIfExtVoiceCfgEventMappingIdx, ccasIfExtVoiceCfgT38HsRedundancy=ccasIfExtVoiceCfgT38HsRedundancy, ccasBwdRSPrevDigit=ccasBwdRSPrevDigit, ccasRSSeqInfCollect=ccasRSSeqInfCollect, CASBackwardSignal=CASBackwardSignal, ccasLSTClearBwdTimer=ccasLSTClearBwdTimer, ccasRSSendFirstFwdSig=ccasRSSendFirstFwdSig, ccasGCnfShortTimer=ccasGCnfShortTimer, ccasIfExtVoiceCfgCcntrlProfile=ccasIfExtVoiceCfgCcntrlProfile, ccasFwdRSEndOfDNISDigit=ccasFwdRSEndOfDNISDigit, ccasIfExtDs0GrpRepeatOwner=ccasIfExtDs0GrpRepeatOwner, ccasRSInterpreFirstANIDigit=ccasRSInterpreFirstANIDigit, ccasFwdRSOtherLanguage1=ccasFwdRSOtherLanguage1, ccasGCnfCompelledSignalingType=ccasGCnfCompelledSignalingType, ccasIfExtConfigTimer=ccasIfExtConfigTimer, ccasRSSubRegion=ccasRSSubRegion, ccasIfExtVoiceCfgNoiseRegType=ccasIfExtVoiceCfgNoiseRegType, ccasIfExtVoiceCfgUpspeedCodec=ccasIfExtVoiceCfgUpspeedCodec, ccasOLSMakeTime=ccasOLSMakeTime, ccasRSTOutgoingRegSigDuration=ccasRSTOutgoingRegSigDuration, ccasGCnfLineSigType=ccasGCnfLineSigType, ccasBwdRSSubLineFreeWithNoCharge=ccasBwdRSSubLineFreeWithNoCharge, ccasGCnfIncCallLoFreqPower=ccasGCnfIncCallLoFreqPower, ccasBwdRSCallingPartyCategory=ccasBwdRSCallingPartyCategory, ccasFwdRSMaintenanceEquipment=ccasFwdRSMaintenanceEquipment, ccasVariantSource=ccasVariantSource, ccasIfExtConfigRegisterSignal=ccasIfExtConfigRegisterSignal, ccasIfExtConfigTimerGroup=ccasIfExtConfigTimerGroup, ccasRSRowStatus=ccasRSRowStatus, ciscoCasIfExtMIBObjects=ciscoCasIfExtMIBObjects, ccasIfExtIncomingLineSignalEntry=ccasIfExtIncomingLineSignalEntry, ccasIfExtDs0GrpRepetition=ccasIfExtDs0GrpRepetition, ccasFwdRSEndANICallingPartyRev=ccasFwdRSEndANICallingPartyRev, ccasLSTClearFwdTimer=ccasLSTClearFwdTimer, ccasLSTSeizeAckToDigitTimer=ccasLSTSeizeAckToDigitTimer, ccasRSTIndex=ccasRSTIndex, ccasRSTIncFwdPulseOnTimer=ccasRSTIncFwdPulseOnTimer, ccasGCnfEchoCancellation=ccasGCnfEchoCancellation, CASLineSignal=CASLineSignal, ccasIfExtVoiceCfgLifNumber=ccasIfExtVoiceCfgLifNumber, ccasLSTIdleGuardTimer=ccasLSTIdleGuardTimer, ccasRSIndex=ccasRSIndex, ciscoCasIfExtMIBConformance=ciscoCasIfExtMIBConformance, ccasProfileRowStatus=ccasProfileRowStatus, ccasLSTCASDebounceTimer=ccasLSTCASDebounceTimer, ccasFwdRSSatelLinkIncluded=ccasFwdRSSatelLinkIncluded, ccasGCnfIndex=ccasGCnfIndex, ccasBwdRSCountryCode=ccasBwdRSCountryCode, ccasLSTIndex=ccasLSTIndex, ccasIfExtGeneralConfig=ccasIfExtGeneralConfig, ccasGCnfRingBackType=ccasGCnfRingBackType, ccasBwdRSNetworkCongstInGroupB=ccasBwdRSNetworkCongstInGroupB, ccasIfExtVoiceCfgBulkCfgResult=ccasIfExtVoiceCfgBulkCfgResult, ccasIfExtVoiceCfgGroupSup1=ccasIfExtVoiceCfgGroupSup1, ccasIfExtProfile=ccasIfExtProfile, ccasIfExtLineSignalTimerEntry=ccasIfExtLineSignalTimerEntry, ccasIfExtVoiceCfgCasProfile=ccasIfExtVoiceCfgCasProfile, ccasFwdRSOperFwdTransFacility=ccasFwdRSOperFwdTransFacility, ccasIfExtVoiceCfgTonePlan=ccasIfExtVoiceCfgTonePlan, ccasFwdRSSubWithoutPriorNational=ccasFwdRSSubWithoutPriorNational, ccasIfExtConfig=ccasIfExtConfig, ccasBwdRSPlaySITTone=ccasBwdRSPlaySITTone, ccasLSTAnswerMeterDelayTimer=ccasLSTAnswerMeterDelayTimer, ccasIfExtRegisterSignalEntry=ccasIfExtRegisterSignalEntry)
