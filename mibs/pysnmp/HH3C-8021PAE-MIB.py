#
# PySNMP MIB module HH3C-8021PAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-8021PAE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Counter64, ObjectIdentity, ModuleIdentity, Unsigned32, Integer32, Counter32, IpAddress, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Counter64", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Integer32", "Counter32", "IpAddress", "Bits", "TimeTicks")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
hh3cpaeExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 6))
hh3cpaeExtMib.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hh3cpaeExtMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hh3cpaeExtMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cpaeExtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1))
hh3cdot1xPaeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1))
hh3cdot1xPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2))
hh3cdot1xAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 1), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthQuietPeriod.setStatus('current')
hh3cdot1xAuthTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 2), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthTxPeriod.setStatus('current')
hh3cdot1xAuthSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 3), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthSuppTimeout.setStatus('current')
hh3cdot1xAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 4), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthServerTimeout.setStatus('current')
hh3cdot1xAuthMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 5), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthMaxReq.setStatus('current')
hh3cdot1xAuthReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 6), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthReAuthPeriod.setStatus('current')
hh3cdot1xAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2), ("eap", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xAuthMethod.setStatus('current')
hh3cdot1xAuthConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cdot1xAuthConfigExtTable.setStatus('current')
hh3cdot1xAuthConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: hh3cdot1xAuthConfigExtEntry.setStatus('current')
hh3cdot1xpaeportAuthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xpaeportAuthAdminStatus.setStatus('current')
hh3cdot1xpaeportControlledType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("mac", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xpaeportControlledType.setStatus('current')
hh3cdot1xpaeportMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 3), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xpaeportMaxUserNum.setStatus('current')
hh3cdot1xpaeportUserNumNow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1xpaeportUserNumNow.setStatus('current')
hh3cdot1xpaeportClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xpaeportClearStatistics.setStatus('current')
hh3cdot1xpaeportMcastTrigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xpaeportMcastTrigStatus.setStatus('current')
hh3cdot1xpaeportHandshakeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1xpaeportHandshakeStatus.setStatus('current')
hh3cdot1xPaeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0))
hh3csupplicantproxycheck = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0, 1)).setObjects(("HH3C-8021PAE-MIB", "hh3cproxycheckVlanId"), ("HH3C-8021PAE-MIB", "hh3cproxycheckPortName"), ("HH3C-8021PAE-MIB", "hh3cproxycheckMacAddr"), ("HH3C-8021PAE-MIB", "hh3cproxycheckIpaddr"), ("HH3C-8021PAE-MIB", "hh3cproxycheckUsrName"))
if mibBuilder.loadTexts: hh3csupplicantproxycheck.setStatus('current')
hh3cproxycheckVlanId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cproxycheckVlanId.setStatus('current')
hh3cproxycheckPortName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cproxycheckPortName.setStatus('current')
hh3cproxycheckMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cproxycheckMacAddr.setStatus('current')
hh3cproxycheckIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cproxycheckIpaddr.setStatus('current')
hh3cproxycheckUsrName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 6, 1, 0, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cproxycheckUsrName.setStatus('current')
mibBuilder.exportSymbols("HH3C-8021PAE-MIB", hh3cdot1xPaeSystem=hh3cdot1xPaeSystem, hh3csupplicantproxycheck=hh3csupplicantproxycheck, hh3cdot1xPaeTraps=hh3cdot1xPaeTraps, hh3cdot1xAuthReAuthPeriod=hh3cdot1xAuthReAuthPeriod, hh3cdot1xAuthConfigExtTable=hh3cdot1xAuthConfigExtTable, hh3cdot1xpaeportClearStatistics=hh3cdot1xpaeportClearStatistics, hh3cproxycheckVlanId=hh3cproxycheckVlanId, hh3cproxycheckUsrName=hh3cproxycheckUsrName, hh3cdot1xpaeportControlledType=hh3cdot1xpaeportControlledType, hh3cdot1xAuthServerTimeout=hh3cdot1xAuthServerTimeout, hh3cdot1xAuthTxPeriod=hh3cdot1xAuthTxPeriod, hh3cproxycheckMacAddr=hh3cproxycheckMacAddr, hh3cdot1xAuthQuietPeriod=hh3cdot1xAuthQuietPeriod, hh3cdot1xAuthSuppTimeout=hh3cdot1xAuthSuppTimeout, hh3cdot1xAuthMethod=hh3cdot1xAuthMethod, hh3cproxycheckPortName=hh3cproxycheckPortName, hh3cdot1xAuthConfigExtEntry=hh3cdot1xAuthConfigExtEntry, hh3cdot1xPaeAuthenticator=hh3cdot1xPaeAuthenticator, hh3cdot1xpaeportUserNumNow=hh3cdot1xpaeportUserNumNow, hh3cpaeExtMib=hh3cpaeExtMib, hh3cdot1xAuthMaxReq=hh3cdot1xAuthMaxReq, PYSNMP_MODULE_ID=hh3cpaeExtMib, hh3cpaeExtMibObjects=hh3cpaeExtMibObjects, hh3cdot1xpaeportHandshakeStatus=hh3cdot1xpaeportHandshakeStatus, hh3cdot1xpaeportMcastTrigStatus=hh3cdot1xpaeportMcastTrigStatus, hh3cproxycheckIpaddr=hh3cproxycheckIpaddr, hh3cdot1xpaeportMaxUserNum=hh3cdot1xpaeportMaxUserNum, hh3cdot1xpaeportAuthAdminStatus=hh3cdot1xpaeportAuthAdminStatus)
