#
# PySNMP MIB module ALVARION-WDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALVARION-WDS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:06:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alvarionMgmtV2, = mibBuilder.importSymbols("ALVARION-SMI", "alvarionMgmtV2")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, NotificationType, ModuleIdentity, Counter64, Gauge32, TimeTicks, Integer32, Bits, Unsigned32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "NotificationType", "ModuleIdentity", "Counter64", "Gauge32", "TimeTicks", "Integer32", "Bits", "Unsigned32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, MacAddress, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "TruthValue")
alvarionWdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33))
if mibBuilder.loadTexts: alvarionWdsMIB.setLastUpdated('200710310000Z')
if mibBuilder.loadTexts: alvarionWdsMIB.setOrganization('Alvarion Ltd.')
alvarionWdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1))
coWDSInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 1))
coWDSRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2))
coWDSGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3))
coWDSLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4))
coWDSNetworkScanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5))
coWDSNumberOfGroup = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSNumberOfGroup.setStatus('current')
coWDSDynamicModeImplemented = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSDynamicModeImplemented.setStatus('current')
coWDSRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1), )
if mibBuilder.loadTexts: coWDSRadioTable.setStatus('current')
coWDSRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSRadioIndex"))
if mibBuilder.loadTexts: coWDSRadioEntry.setStatus('current')
coWDSRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coWDSRadioIndex.setStatus('current')
coWDSRadioAckDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1, 2), Unsigned32()).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSRadioAckDistance.setStatus('current')
coWDSRadioQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("vlan", 2), ("veryHigh", 3), ("high", 4), ("normal", 5), ("low", 6), ("diffSrv", 7), ("tos", 8), ("ipQos", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSRadioQoS.setStatus('current')
coWDSGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1), )
if mibBuilder.loadTexts: coWDSGroupTable.setStatus('current')
coWDSGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSGroupIndex"))
if mibBuilder.loadTexts: coWDSGroupEntry.setStatus('current')
coWDSGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: coWDSGroupIndex.setStatus('current')
coWDSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupName.setStatus('current')
coWDSGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupState.setStatus('current')
coWDSGroupSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupSecurity.setStatus('current')
coWDSGroupAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupAddressing.setStatus('current')
coWDSGroupStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupStaticMacAddress.setStatus('current')
coWDSGroupDynamicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupDynamicMode.setStatus('current')
coWDSGroupDynamicGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupDynamicGroupId.setStatus('current')
coWDSLinkTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1), )
if mibBuilder.loadTexts: coWDSLinkTable.setStatus('current')
coWDSLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSGroupIndex"), (0, "ALVARION-WDS-MIB", "coWDSLinkIndex"))
if mibBuilder.loadTexts: coWDSLinkEntry.setStatus('current')
coWDSLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: coWDSLinkIndex.setStatus('current')
coWDSLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("acquiring", 2), ("inactive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkState.setStatus('current')
coWDSLinkRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRadio.setStatus('current')
coWDSLinkPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkPeerMacAddress.setStatus('current')
coWDSLinkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkMaster.setStatus('current')
coWDSLinkAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkAuthorized.setStatus('current')
coWDSLinkEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkEncryption.setStatus('current')
coWDSLinkIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkIdleTime.setStatus('current')
coWDSLinkSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkSNR.setStatus('current')
coWDSLinkTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 10), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkTxRate.setStatus('current')
coWDSLinkRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 11), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRxRate.setStatus('current')
coWDSLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkIfIndex.setStatus('current')
coWDSNetworkScanTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1), )
if mibBuilder.loadTexts: coWDSNetworkScanTable.setStatus('current')
coWDSNetworkScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSScanRadioIndex"), (0, "ALVARION-WDS-MIB", "coWDSScanPeerIndex"))
if mibBuilder.loadTexts: coWDSNetworkScanEntry.setStatus('current')
coWDSScanRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coWDSScanRadioIndex.setStatus('current')
coWDSScanPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: coWDSScanPeerIndex.setStatus('current')
coWDSScanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanGroupId.setStatus('current')
coWDSScanPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanPeerMacAddress.setStatus('current')
coWDSScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanChannel.setStatus('current')
coWDSScanSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanSNR.setStatus('current')
coWDSScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanMode.setStatus('current')
coWDSScanAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanAvailable.setStatus('current')
alvarionWdsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2))
alvarionWdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 1))
alvarionWdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2))
alvarionWdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 1, 1)).setObjects(("ALVARION-WDS-MIB", "alvarionWDSInfoMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSRadioMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSGroupMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSLinkMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSScanMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWdsMIBCompliance = alvarionWdsMIBCompliance.setStatus('current')
alvarionWDSInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 1)).setObjects(("ALVARION-WDS-MIB", "coWDSNumberOfGroup"), ("ALVARION-WDS-MIB", "coWDSDynamicModeImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSInfoMIBGroup = alvarionWDSInfoMIBGroup.setStatus('current')
alvarionWDSRadioMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 2)).setObjects(("ALVARION-WDS-MIB", "coWDSRadioAckDistance"), ("ALVARION-WDS-MIB", "coWDSRadioQoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSRadioMIBGroup = alvarionWDSRadioMIBGroup.setStatus('current')
alvarionWDSGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 3)).setObjects(("ALVARION-WDS-MIB", "coWDSGroupName"), ("ALVARION-WDS-MIB", "coWDSGroupState"), ("ALVARION-WDS-MIB", "coWDSGroupSecurity"), ("ALVARION-WDS-MIB", "coWDSGroupAddressing"), ("ALVARION-WDS-MIB", "coWDSGroupStaticMacAddress"), ("ALVARION-WDS-MIB", "coWDSGroupDynamicMode"), ("ALVARION-WDS-MIB", "coWDSGroupDynamicGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSGroupMIBGroup = alvarionWDSGroupMIBGroup.setStatus('current')
alvarionWDSLinkMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 4)).setObjects(("ALVARION-WDS-MIB", "coWDSLinkState"), ("ALVARION-WDS-MIB", "coWDSLinkRadio"), ("ALVARION-WDS-MIB", "coWDSLinkPeerMacAddress"), ("ALVARION-WDS-MIB", "coWDSLinkMaster"), ("ALVARION-WDS-MIB", "coWDSLinkAuthorized"), ("ALVARION-WDS-MIB", "coWDSLinkEncryption"), ("ALVARION-WDS-MIB", "coWDSLinkIdleTime"), ("ALVARION-WDS-MIB", "coWDSLinkSNR"), ("ALVARION-WDS-MIB", "coWDSLinkTxRate"), ("ALVARION-WDS-MIB", "coWDSLinkRxRate"), ("ALVARION-WDS-MIB", "coWDSLinkIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSLinkMIBGroup = alvarionWDSLinkMIBGroup.setStatus('current')
alvarionWDSScanMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 5)).setObjects(("ALVARION-WDS-MIB", "coWDSScanGroupId"), ("ALVARION-WDS-MIB", "coWDSScanPeerMacAddress"), ("ALVARION-WDS-MIB", "coWDSScanChannel"), ("ALVARION-WDS-MIB", "coWDSScanSNR"), ("ALVARION-WDS-MIB", "coWDSScanMode"), ("ALVARION-WDS-MIB", "coWDSScanAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSScanMIBGroup = alvarionWDSScanMIBGroup.setStatus('current')
mibBuilder.exportSymbols("ALVARION-WDS-MIB", alvarionWDSGroupMIBGroup=alvarionWDSGroupMIBGroup, coWDSLinkPeerMacAddress=coWDSLinkPeerMacAddress, alvarionWdsMIBGroups=alvarionWdsMIBGroups, coWDSGroupEntry=coWDSGroupEntry, coWDSLinkAuthorized=coWDSLinkAuthorized, coWDSGroupName=coWDSGroupName, coWDSLinkTable=coWDSLinkTable, coWDSScanPeerMacAddress=coWDSScanPeerMacAddress, alvarionWDSInfoMIBGroup=alvarionWDSInfoMIBGroup, coWDSScanRadioIndex=coWDSScanRadioIndex, alvarionWdsMIBConformance=alvarionWdsMIBConformance, coWDSRadioAckDistance=coWDSRadioAckDistance, coWDSNetworkScanGroup=coWDSNetworkScanGroup, alvarionWdsMIBCompliance=alvarionWdsMIBCompliance, coWDSNumberOfGroup=coWDSNumberOfGroup, coWDSLinkState=coWDSLinkState, coWDSRadioGroup=coWDSRadioGroup, coWDSRadioQoS=coWDSRadioQoS, coWDSGroupAddressing=coWDSGroupAddressing, coWDSScanPeerIndex=coWDSScanPeerIndex, coWDSGroupSecurity=coWDSGroupSecurity, coWDSLinkIndex=coWDSLinkIndex, coWDSRadioTable=coWDSRadioTable, coWDSScanSNR=coWDSScanSNR, coWDSLinkMaster=coWDSLinkMaster, coWDSNetworkScanTable=coWDSNetworkScanTable, coWDSGroupIndex=coWDSGroupIndex, alvarionWDSRadioMIBGroup=alvarionWDSRadioMIBGroup, coWDSGroupTable=coWDSGroupTable, coWDSGroupStaticMacAddress=coWDSGroupStaticMacAddress, coWDSGroupDynamicGroupId=coWDSGroupDynamicGroupId, alvarionWdsMIB=alvarionWdsMIB, coWDSGroupDynamicMode=coWDSGroupDynamicMode, coWDSInfoGroup=coWDSInfoGroup, coWDSGroupGroup=coWDSGroupGroup, coWDSRadioIndex=coWDSRadioIndex, coWDSLinkRadio=coWDSLinkRadio, coWDSLinkRxRate=coWDSLinkRxRate, coWDSNetworkScanEntry=coWDSNetworkScanEntry, coWDSScanAvailable=coWDSScanAvailable, coWDSGroupState=coWDSGroupState, coWDSLinkTxRate=coWDSLinkTxRate, coWDSLinkEntry=coWDSLinkEntry, coWDSScanChannel=coWDSScanChannel, coWDSDynamicModeImplemented=coWDSDynamicModeImplemented, coWDSLinkEncryption=coWDSLinkEncryption, coWDSScanMode=coWDSScanMode, alvarionWdsMIBCompliances=alvarionWdsMIBCompliances, alvarionWDSLinkMIBGroup=alvarionWDSLinkMIBGroup, alvarionWDSScanMIBGroup=alvarionWDSScanMIBGroup, coWDSLinkIfIndex=coWDSLinkIfIndex, coWDSLinkSNR=coWDSLinkSNR, alvarionWdsMIBObjects=alvarionWdsMIBObjects, PYSNMP_MODULE_ID=alvarionWdsMIB, coWDSScanGroupId=coWDSScanGroupId, coWDSLinkIdleTime=coWDSLinkIdleTime, coWDSRadioEntry=coWDSRadioEntry, coWDSLinkGroup=coWDSLinkGroup)
