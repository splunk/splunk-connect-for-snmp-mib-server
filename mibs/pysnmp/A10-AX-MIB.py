#
# PySNMP MIB module A10-AX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A10-AX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:48:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
a10Mgmt, = mibBuilder.importSymbols("A10-COMMON-MIB", "a10Mgmt")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Gauge32, ModuleIdentity, IpAddress, Integer32, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Counter64, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Gauge32", "ModuleIdentity", "IpAddress", "Integer32", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Counter64", "Bits", "ObjectIdentity")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
axMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4))
if mibBuilder.loadTexts: axMgmt.setLastUpdated('200705071327Z')
if mibBuilder.loadTexts: axMgmt.setOrganization('A10 Networks, Inc.')
axSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1))
axLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2))
axApp = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3))
axSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1))
axSysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2))
axSysCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3))
axSysDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4))
axSysHwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5))
axSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6))
axNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7))
axSysPrimaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnDisk.setStatus('current')
axSysSecondaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnDisk.setStatus('current')
axSysPrimaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnCF.setStatus('current')
axSysSecondaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnCF.setStatus('current')
axSysMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryTotal.setStatus('current')
axSysMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryUsage.setStatus('current')
axSysCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuNumber.setStatus('current')
axSysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2), )
if mibBuilder.loadTexts: axSysCpuTable.setStatus('current')
axSysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndex"))
if mibBuilder.loadTexts: axSysCpuEntry.setStatus('current')
axSysCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndex.setStatus('current')
axSysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsage.setStatus('current')
axSysCpuUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValue.setStatus('current')
axSysAverageCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageCpuUsage.setStatus('current')
axSysAverageControlCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageControlCpuUsage.setStatus('current')
axSysAverageDataCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageDataCpuUsage.setStatus('current')
axSysCpuUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6), )
if mibBuilder.loadTexts: axSysCpuUsageTable.setStatus('current')
axSysCpuUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndexInUsage"), (0, "A10-AX-MIB", "axSysCpuUsagePeriodIndex"))
if mibBuilder.loadTexts: axSysCpuUsageEntry.setStatus('current')
axSysCpuIndexInUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndexInUsage.setStatus('current')
axSysCpuUsagePeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePeriodIndex.setStatus('current')
axSysCpuUsageValueAtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValueAtPeriod.setStatus('current')
axSysDiskTotalSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskTotalSpace.setStatus('current')
axSysDiskFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskFreeSpace.setStatus('current')
axSysHwPhySystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwPhySystemTemp.setStatus('current')
axSysHwFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan1Speed.setStatus('current')
axSysHwFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan2Speed.setStatus('current')
axSysHwFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan3Speed.setStatus('current')
axSysLowerPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysLowerPowerSupplyStatus.setStatus('current')
axSysUpperPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysUpperPowerSupplyStatus.setStatus('current')
axSysFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9), )
if mibBuilder.loadTexts: axSysFanStatusTable.setStatus('current')
axSysFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axFanIndex"))
if mibBuilder.loadTexts: axSysFanStatusEntry.setStatus('current')
axFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanIndex.setStatus('current')
axFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanName.setStatus('current')
axFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, -2, -1))).clone(namedValues=NamedValues(("failed", 0), ("okFixedHigh", 4), ("okLowMed", 5), ("okMedMed", 6), ("okMedHigh", 7), ("notReady", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanStatus.setStatus('current')
axSysStartupMode = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("primaryDisk", 1), ("secondaryDisk", 2), ("primaryCF", 3), ("secondaryCF", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysStartupMode.setStatus('current')
axSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSerialNumber.setStatus('current')
axSysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysFirmwareVersion.setStatus('current')
axSysAFleXEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAFleXEngineVersion.setStatus('current')
axInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1))
axVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2))
axInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1))
axInterfaceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2))
axInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceCount.setStatus('current')
axInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: axInterfaceTable.setStatus('current')
axInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceIndex"))
if mibBuilder.loadTexts: axInterfaceEntry.setStatus('current')
axInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceIndex.setStatus('current')
axInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceName.setStatus('current')
axInterfaceMediaMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxSpeed.setStatus('current')
axInterfaceMediaMaxDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxDuplex.setStatus('current')
axInterfaceMediaActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveSpeed.setStatus('current')
axInterfaceMediaActiveDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveDuplex.setStatus('current')
axInterfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMacAddr.setStatus('current')
axInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMtu.setStatus('current')
axInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAdminStatus.setStatus('current')
axInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatus.setStatus('current')
axInterfaceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAlias.setStatus('current')
axInterfaceFlowCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlAdminStatus.setStatus('current')
axInterfaceFlowCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlOperStatus.setStatus('current')
axInterfaceStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: axInterfaceStatTable.setStatus('current')
axInterfaceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceStatIndex"))
if mibBuilder.loadTexts: axInterfaceStatEntry.setStatus('current')
axInterfaceStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatIndex.setStatus('current')
axInterfaceStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsIn.setStatus('current')
axInterfaceStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesIn.setStatus('current')
axInterfaceStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsOut.setStatus('current')
axInterfaceStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesOut.setStatus('current')
axInterfaceStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastIn.setStatus('current')
axInterfaceStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastOut.setStatus('current')
axInterfaceStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsIn.setStatus('current')
axInterfaceStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsOut.setStatus('current')
axInterfaceStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsIn.setStatus('current')
axInterfaceStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsOut.setStatus('current')
axInterfaceStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatCollisions.setStatus('current')
axVlanCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1))
axVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1), )
if mibBuilder.loadTexts: axVlanCfgTable.setStatus('current')
axVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanId"))
if mibBuilder.loadTexts: axVlanCfgEntry.setStatus('current')
axVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanId.setStatus('current')
axVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanName.setStatus('current')
axVlanRouterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanRouterInterface.setStatus('current')
axVlanCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2), )
if mibBuilder.loadTexts: axVlanCfgMemberTable.setStatus('current')
axVlanCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanMemberVlanId"), (0, "A10-AX-MIB", "axVlanMemberIntfId"))
if mibBuilder.loadTexts: axVlanCfgMemberEntry.setStatus('current')
axVlanMemberVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberVlanId.setStatus('current')
axVlanMemberIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberIntfId.setStatus('current')
axVlanMemberTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberTagged.setStatus('current')
axLogBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 1), Integer32().clone(100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferSize.setStatus('current')
axLogBufferPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferPri.setStatus('current')
axLogConsolePri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogConsolePri.setStatus('current')
axLogEmailPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailPri.setStatus('current')
axLogEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailAddr.setStatus('current')
axLogSyslogPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPri.setStatus('current')
axLogSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9), )
if mibBuilder.loadTexts: axLogSyslogHostTable.setStatus('current')
axLogSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axLogSyslogHostIndex"))
if mibBuilder.loadTexts: axLogSyslogHostEntry.setStatus('current')
axLogSyslogHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHostIndex.setStatus('current')
axLogSyslogHost = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHost.setStatus('current')
axLogSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(514)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPort.setStatus('current')
axLogMonitorPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogMonitorPri.setStatus('current')
axSyslogTrapPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 100))
if mibBuilder.loadTexts: axSyslogTrapPrefix.setStatus('current')
axSyslogTrap = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 100, 1)).setObjects(("A10-AX-MIB", "axSyslogModuleName"), ("A10-AX-MIB", "axSyslogPriority"), ("A10-AX-MIB", "axSyslogMsg"))
if mibBuilder.loadTexts: axSyslogTrap.setStatus('current')
axSyslogTrapObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101))
if mibBuilder.loadTexts: axSyslogTrapObjects.setStatus('current')
axSyslogModuleName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogModuleName.setStatus('current')
axSyslogPriority = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogPriority.setStatus('current')
axSyslogMsg = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogMsg.setStatus('current')
axAppGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1))
axServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2))
axServiceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3))
axVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4))
axConnReuseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5))
axFastHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6))
axHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7))
axTcpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8))
axSslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9))
axFtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10))
axNetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11))
axNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12))
axSmtpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13))
axSslProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14))
axPersistentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15))
axSwitchStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16))
axHA = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17))
axIpNatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18))
axSessionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19))
axAppGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1))
axAppGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2))
axGlobalAppBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3))
axServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1))
axServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2))
axServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3))
axServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4))
axServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1))
axServiceGroupStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2))
axServiceGroupMember = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3))
axServiceGroupMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4))
axVirtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1))
axVirtualServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2))
axVirtualServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3))
axVirtualServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4))
axHAGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1))
axHAGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2))
axHAFloatingIP = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3))
axAppGlobalSystemResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageTable.setStatus('current')
axAppGlobalSystemResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axAppGlobalSystemResourceIndex"))
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageEntry.setStatus('current')
axAppGlobalSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceIndex.setStatus('current')
axAppGlobalSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceName.setStatus('current')
axAppGlobalAllowedCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedCurrentValue.setStatus('current')
axAppGlobalAllowedDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedDefaultValue.setStatus('current')
axAppGlobalAllowedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMinValue.setStatus('current')
axAppGlobalAllowedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMaxValue.setStatus('current')
axAppGlobalTotalCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnections.setStatus('current')
axAppGlobalTotalNewConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewConnections.setStatus('current')
axAppGlobalTotalNewL4Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL4Connections.setStatus('current')
axAppGlobalTotalNewL7Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL7Connections.setStatus('current')
axAppGlobalTotalNewIPNatConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewIPNatConnections.setStatus('current')
axAppGlobalTotalSSLConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalSSLConnections.setStatus('current')
axAppGlobalTotalL7Requests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalL7Requests.setStatus('current')
axGlobalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalAppPacketDrop.setStatus('current')
axGlobalTotalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalAppPacketDrop.setStatus('current')
axGlobalTotalL4Session = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalL4Session.setStatus('current')
axAppGlobalBufferConfigLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferConfigLimit.setStatus('current')
axAppGlobalBufferCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferCurrentUsage.setStatus('current')
axServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerCount.setStatus('current')
axServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2), )
if mibBuilder.loadTexts: axServerTable.setStatus('current')
axServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerName"))
if mibBuilder.loadTexts: axServerEntry.setStatus('current')
axServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerName.setStatus('current')
axServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddress.setStatus('current')
axServerEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerEnabledState.setStatus('current')
axServerHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerHealthMonitor.setStatus('current')
axServerMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerMonitorState.setStatus('current')
axServerStatCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatCount.setStatus('current')
axServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2), )
if mibBuilder.loadTexts: axServerStatTable.setStatus('current')
axServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddress"))
if mibBuilder.loadTexts: axServerStatEntry.setStatus('current')
axServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddress.setStatus('current')
axServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatName.setStatus('current')
axServerStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsIn.setStatus('current')
axServerStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesIn.setStatus('current')
axServerStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsOut.setStatus('current')
axServerStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesOut.setStatus('current')
axServerStatServerTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalConns.setStatus('current')
axServerStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerCurConns.setStatus('current')
axServerStatServerPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPersistConns.setStatus('deprecated')
axServerStatServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerStatus.setStatus('current')
axServerStatServerTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalL7Reqs.setStatus('current')
axServerStatServerTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalCurrL7Reqs.setStatus('current')
axServerStatServerTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalSuccL7Reqs.setStatus('current')
axServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1), )
if mibBuilder.loadTexts: axServerPortTable.setStatus('current')
axServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerNameInPort"), (0, "A10-AX-MIB", "axServerPortType"), (0, "A10-AX-MIB", "axServerPortNum"))
if mibBuilder.loadTexts: axServerPortEntry.setStatus('current')
axServerNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInPort.setStatus('current')
axServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortType.setStatus('current')
axServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNum.setStatus('current')
axServerAddressInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressInPort.setStatus('current')
axServerPortEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortEnabledState.setStatus('current')
axServerPortHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortHealthMonitor.setStatus('current')
axServerPortConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortConnLimit.setStatus('current')
axServerPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortWeight.setStatus('current')
axServerPortMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortMonitorState.setStatus('current')
axServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1), )
if mibBuilder.loadTexts: axServerPortStatTable.setStatus('current')
axServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddrInPort"), (0, "A10-AX-MIB", "axServerStatPortType"), (0, "A10-AX-MIB", "axServerStatPortNum"))
if mibBuilder.loadTexts: axServerPortStatEntry.setStatus('current')
axServerStatAddrInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddrInPort.setStatus('current')
axServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortType.setStatus('current')
axServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortNum.setStatus('current')
axServerStatNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatNameInPort.setStatus('current')
axServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsIn.setStatus('current')
axServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesIn.setStatus('current')
axServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsOut.setStatus('current')
axServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesOut.setStatus('current')
axServerPortStatTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalConns.setStatus('current')
axServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatCurConns.setStatus('current')
axServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPersistConns.setStatus('deprecated')
axServerPortStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatStatus.setStatus('current')
axServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalL7Reqs.setStatus('current')
axServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalCurrL7Reqs.setStatus('current')
axServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalSuccL7Reqs.setStatus('current')
axServiceGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupCount.setStatus('current')
axServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2), )
if mibBuilder.loadTexts: axServiceGroupTable.setStatus('current')
axServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupName"))
if mibBuilder.loadTexts: axServiceGroupEntry.setStatus('current')
axServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupName.setStatus('current')
axServiceGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupType.setStatus('current')
axServiceGroupLbAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("roundRobin", 0), ("weightRoundRobin", 1), ("leastConnection", 2), ("weightLeastConnection", 3), ("serviceLeastConnection", 4), ("serviceWeightLeastConnection", 5), ("fastResponseTime", 6), ("leastRequest", 7), ("roundRobinStrict", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupLbAlgorithm.setStatus('current')
axServiceGroupDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupDisplayStatus.setStatus('current')
axServiceGroupStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1), )
if mibBuilder.loadTexts: axServiceGroupStatTable.setStatus('current')
axServiceGroupStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupStatName"))
if mibBuilder.loadTexts: axServiceGroupStatEntry.setStatus('current')
axServiceGroupStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatName.setStatus('current')
axServiceGroupStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsIn.setStatus('current')
axServiceGroupStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesIn.setStatus('current')
axServiceGroupStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsOut.setStatus('current')
axServiceGroupStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesOut.setStatus('current')
axServiceGroupStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotConns.setStatus('current')
axServiceGroupStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatCurConns.setStatus('current')
axServiceGroupStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPersistConns.setStatus('deprecated')
axServiceGroupStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatDisplayStatus.setStatus('current')
axServiceGroupStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalL7Reqs.setStatus('current')
axServiceGroupStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalCurrL7Reqs.setStatus('current')
axServiceGroupStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalSuccL7Reqs.setStatus('current')
axServiceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberTable.setStatus('current')
axServiceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupNameInMember"), (0, "A10-AX-MIB", "axServiceGroupMemberAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMember"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMember"))
if mibBuilder.loadTexts: axServiceGroupMemberEntry.setStatus('current')
axServiceGroupNameInMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupNameInMember.setStatus('current')
axServiceGroupMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberAddrType.setStatus('current')
axServerNameInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMember.setStatus('current')
axServerPortNumInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMember.setStatus('current')
axServerPortPriorityInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortPriorityInServiceGroupMember.setStatus('current')
axServerPortStatusInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMember.setStatus('current')
axServiceGroupMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberStatTable.setStatus('current')
axServiceGroupMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupMemberStatName"), (0, "A10-AX-MIB", "axServiceGroupMemberStatAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMemberStat"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMemberStat"))
if mibBuilder.loadTexts: axServiceGroupMemberStatEntry.setStatus('current')
axServiceGroupMemberStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatName.setStatus('current')
axServiceGroupMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatAddrType.setStatus('current')
axServerNameInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMemberStat.setStatus('current')
axServerPortNumInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMemberStat.setStatus('current')
axServiceGroupMemberStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsIn.setStatus('current')
axServiceGroupMemberStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesIn.setStatus('current')
axServiceGroupMemberStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsOut.setStatus('current')
axServiceGroupMemberStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesOut.setStatus('current')
axServiceGroupMemberStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPersistConns.setStatus('deprecated')
axServiceGroupMemberStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotConns.setStatus('current')
axServiceGroupMemberStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatCurConns.setStatus('current')
axServerPortStatusInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMemberStat.setStatus('current')
axServiceGroupMemberStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalL7Reqs.setStatus('current')
axServiceGroupMemberStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalCurrL7Reqs.setStatus('current')
axServiceGroupMemberStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalSuccL7Reqs.setStatus('current')
axServiceGroupMemberStatResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatResponseTime.setStatus('current')
axVirtualServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerCount.setStatus('current')
axVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2), )
if mibBuilder.loadTexts: axVirtualServerTable.setStatus('current')
axVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerName"))
if mibBuilder.loadTexts: axVirtualServerEntry.setStatus('current')
axVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerName.setStatus('current')
axVirtualServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerAddress.setStatus('current')
axVirtualServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerEnabled.setStatus('current')
axVirtualServerHAGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerHAGroup.setStatus('current')
axVirtualServerDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerDisplayStatus.setStatus('current')
axVirtualServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1), )
if mibBuilder.loadTexts: axVirtualServerStatTable.setStatus('current')
axVirtualServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerStatAddress"))
if mibBuilder.loadTexts: axVirtualServerStatEntry.setStatus('current')
axVirtualServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatAddress.setStatus('current')
axVirtualServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatName.setStatus('current')
axVirtualServerStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsIn.setStatus('current')
axVirtualServerStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesIn.setStatus('current')
axVirtualServerStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsOut.setStatus('current')
axVirtualServerStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesOut.setStatus('current')
axVirtualServerStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPersistConns.setStatus('deprecated')
axVirtualServerStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotConns.setStatus('current')
axVirtualServerStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatCurConns.setStatus('current')
axVirtualServerStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatStatus.setStatus('current')
axVirtualServerStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatDisplayStatus.setStatus('current')
axVirtualServerStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalL7Reqs.setStatus('current')
axVirtualServerStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalCurrL7Reqs.setStatus('current')
axVirtualServerStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalSuccL7Reqs.setStatus('current')
axVirtualServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1), )
if mibBuilder.loadTexts: axVirtualServerPortTable.setStatus('current')
axVirtualServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortName"), (0, "A10-AX-MIB", "axVirtualServerPortType"), (0, "A10-AX-MIB", "axVirtualServerPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortEntry.setStatus('current')
axVirtualServerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortName.setStatus('current')
axVirtualServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortType.setStatus('current')
axVirtualServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortNum.setStatus('current')
axVirtualServerPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortAddress.setStatus('current')
axVirtualServerPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortEnabled.setStatus('current')
axVirtualServerPortServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServiceGroup.setStatus('current')
axVirtualServerPortHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHaGroupID.setStatus('current')
axVirtualServerPortPersistTemplateType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("cookiePersist", 1), ("sourcIPPersist", 2), ("destinationIPPersist", 3), ("sslIDPersist", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTemplateType.setStatus('current')
axVirtualServerPortPersistTempl = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTempl.setStatus('current')
axVirtualServerPortTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTemplate.setStatus('current')
axVirtualServerPortPolicyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPolicyTemplate.setStatus('current')
axVirtualServerPortTCPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPTemplate.setStatus('current')
axVirtualServerPortHTTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHTTPTemplate.setStatus('current')
axVirtualServerPortRamCacheTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRamCacheTemplate.setStatus('current')
axVirtualServerPortConnReuseTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortConnReuseTemplate.setStatus('current')
axVirtualServerPortTCPProxyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPProxyTemplate.setStatus('current')
axVirtualServerPortClientSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortClientSSLTemplate.setStatus('current')
axVirtualServerPortServerSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServerSSLTemplate.setStatus('current')
axVirtualServerPortRTSPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRTSPTemplate.setStatus('current')
axVirtualServerPortSMTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSMTPTemplate.setStatus('current')
axVirtualServerPortSIPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSIPTemplate.setStatus('current')
axVirtualServerPortUDPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortUDPTemplate.setStatus('current')
axVirtualServerPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortDisplayStatus.setStatus('current')
axVirtualServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1), )
if mibBuilder.loadTexts: axVirtualServerPortStatTable.setStatus('current')
axVirtualServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortStatAddress"), (0, "A10-AX-MIB", "axVirtualServerStatPortType"), (0, "A10-AX-MIB", "axVirtualServerStatPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortStatEntry.setStatus('current')
axVirtualServerPortStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatAddress.setStatus('current')
axVirtualServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-tcp", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortType.setStatus('current')
axVirtualServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortNum.setStatus('current')
axVirtualServerPortStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatName.setStatus('current')
axVirtualServerStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortStatus.setStatus('current')
axVirtualServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsIn.setStatus('current')
axVirtualServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesIn.setStatus('current')
axVirtualServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsOut.setStatus('current')
axVirtualServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesOut.setStatus('current')
axVirtualServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPersistConns.setStatus('deprecated')
axVirtualServerPortStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotConns.setStatus('current')
axVirtualServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatCurConns.setStatus('current')
axVirtualServerStatPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortDisplayStatus.setStatus('current')
axVirtualServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalL7Reqs.setStatus('current')
axVirtualServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalCurrL7Reqs.setStatus('current')
axVirtualServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalSuccL7Reqs.setStatus('current')
axConnReuseStatTotalOpenPersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalOpenPersist.setStatus('current')
axConnReuseStatTotalActivePersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalActivePersist.setStatus('current')
axConnReuseStatTotalEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEstablished.setStatus('current')
axConnReuseStatTotalTerminated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerminated.setStatus('current')
axConnReuseStatTotalBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBound.setStatus('current')
axConnReuseStatTotalUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBound.setStatus('current')
axConnReuseStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7), )
if mibBuilder.loadTexts: axConnReuseStatTable.setStatus('current')
axConnReuseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1), ).setIndexNames((0, "A10-AX-MIB", "axConnReuseStatCpuIndex"))
if mibBuilder.loadTexts: axConnReuseStatEntry.setStatus('current')
axConnReuseStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatCpuIndex.setStatus('current')
axConnReuseStatOpenPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatOpenPersist.setStatus('current')
axConnReuseStatActivePersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatActivePersist.setStatus('current')
axConnReuseStatTotalEst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEst.setStatus('current')
axConnReuseStatTotalTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerm.setStatus('current')
axConnReuseStatTotalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBind.setStatus('current')
axConnReuseStatTotalUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBind.setStatus('current')
axConnReuseStatTotalDelayedUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBind.setStatus('current')
axConnReuseStatTotalLongRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongRes.setStatus('current')
axConnReuseStatTotalMissedRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedRes.setStatus('current')
axConnReuseStatTotalDelayedUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBound.setStatus('current')
axConnReuseStatTotalLongResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongResponse.setStatus('current')
axConnReuseStatTotalMissedResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedResponse.setStatus('current')
axFastHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalConn.setStatus('current')
axFastHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReq.setStatus('current')
axFastHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSuccReq.setStatus('current')
axFastHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoProxy.setStatus('current')
axFastHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalCRst.setStatus('current')
axFastHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSRst.setStatus('current')
axFastHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoTuple.setStatus('current')
axFastHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqErr.setStatus('current')
axFastHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrSelErr.setStatus('current')
axFastHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdReqErr.setStatus('current')
axFastHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdDataReqErr.setStatus('current')
axFastHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqReXmit.setStatus('current')
axFastHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqPktOutOrder.setStatus('current')
axFastHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrReSel.setStatus('current')
axFastHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalPreMatureClose.setStatus('current')
axFastHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrConn.setStatus('current')
axFastHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSNATErr.setStatus('current')
axFastHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18), )
if mibBuilder.loadTexts: axFastHttpProxyStatTable.setStatus('current')
axFastHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axFastHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axFastHttpProxyStatEntry.setStatus('current')
axFastHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCpuIndex.setStatus('current')
axFastHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCurrProxyConns.setStatus('current')
axFastHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalProxyConns.setStatus('current')
axFastHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReq.setStatus('current')
axFastHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReqSucc.setStatus('current')
axFastHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoProxyErr.setStatus('current')
axFastHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatClientRst.setStatus('current')
axFastHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerRst.setStatus('current')
axFastHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoTupleErr.setStatus('current')
axFastHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatParseReqFail.setStatus('current')
axFastHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerSelFail.setStatus('current')
axFastHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqFail.setStatus('current')
axFastHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqDataFail.setStatus('current')
axFastHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqReTran.setStatus('current')
axFastHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqPktOutOrder.setStatus('current')
axFastHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerReSel.setStatus('current')
axFastHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerPreMatureClose.setStatus('current')
axFastHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerConnMade.setStatus('current')
axHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalConn.setStatus('current')
axHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReq.setStatus('current')
axHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSuccReq.setStatus('current')
axHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoProxy.setStatus('current')
axHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalCRst.setStatus('current')
axHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSRst.setStatus('current')
axHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoTuple.setStatus('current')
axHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqErr.setStatus('current')
axHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrSelErr.setStatus('current')
axHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdReqErr.setStatus('current')
axHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdDataReqErr.setStatus('current')
axHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqReXmit.setStatus('current')
axHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqPktOutOrder.setStatus('current')
axHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrReSel.setStatus('current')
axHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalPreMatureClose.setStatus('current')
axHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrConn.setStatus('current')
axHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSNATErr.setStatus('current')
axHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18), )
if mibBuilder.loadTexts: axHttpProxyStatTable.setStatus('current')
axHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axHttpProxyStatEntry.setStatus('current')
axHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCpuIndex.setStatus('current')
axHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCurrProxyConns.setStatus('current')
axHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalProxyConns.setStatus('current')
axHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReq.setStatus('current')
axHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReqSucc.setStatus('current')
axHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoProxyErr.setStatus('current')
axHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatClientRst.setStatus('current')
axHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerRst.setStatus('current')
axHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoTupleErr.setStatus('current')
axHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatParseReqFail.setStatus('current')
axHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerSelFail.setStatus('current')
axHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqFail.setStatus('current')
axHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqDataFail.setStatus('current')
axHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqReTran.setStatus('current')
axHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqPktOutOrder.setStatus('current')
axHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerReSel.setStatus('current')
axHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerPreMatureClose.setStatus('current')
axHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerConnMade.setStatus('current')
axTcpProxyStatTotalCurrEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalCurrEstConn.setStatus('current')
axTcpProxyStatTotalActiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalActiveOpenConn.setStatus('current')
axTcpProxyStatTotalPassiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalPassiveOpenConn.setStatus('current')
axTcpProxyStatTotalConnAttemptFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalConnAttemptFail.setStatus('current')
axTcpProxyStatTotalInTCPPacket = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPacket.setStatus('current')
axTcpProxyStatTotalOutTCPPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutTCPPkt.setStatus('current')
axTcpProxyStatTotalReXmitPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalReXmitPkt.setStatus('current')
axTcpProxyStatTotalRstRcvOnEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstRcvOnEstConn.setStatus('current')
axTcpProxyStatTotalRstSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstSent.setStatus('current')
axTCPProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10), )
if mibBuilder.loadTexts: axTCPProxyStatTable.setStatus('current')
axTCPProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1), ).setIndexNames((0, "A10-AX-MIB", "axTcpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axTCPProxyStatEntry.setStatus('current')
axTcpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCpuIndex.setStatus('current')
axTcpProxyStatCurrEstConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCurrEstConns.setStatus('current')
axTcpProxyStatActiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatActiveOpenConns.setStatus('current')
axTcpProxyStatPassiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatPassiveOpenConns.setStatus('current')
axTcpProxyStatConnAttempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatConnAttempFail.setStatus('current')
axTcpProxyStatTotalInTCPPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPkt.setStatus('current')
axTcpProxyStatTotalOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutPkt.setStatus('current')
axTcpProxyStatReTranPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatReTranPkt.setStatus('current')
axTcpProxyStatRstRvdEstConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstRvdEstConn.setStatus('current')
axTcpProxyStatRstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstSent.setStatus('current')
axTcpProxyStatInputErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatInputErr.setStatus('current')
axTcpProxyStatSocketAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatSocketAlloc.setStatus('current')
axTcpProxyStatOrphanSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatOrphanSocket.setStatus('current')
axTcpProxyStatMemAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatMemAlloc.setStatus('current')
axTcpProxyStatTotalRxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRxBuf.setStatus('current')
axTcpProxyStatTotalTxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalTxBuf.setStatus('current')
axTcpProxyStatTCPSYNSNTState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNSNTState.setStatus('current')
axTcpProxyStatTCPSYNRCVState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNRCVState.setStatus('current')
axTcpProxyStatTCPFINW1State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW1State.setStatus('current')
axTcpProxyStatTCPFINW2State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW2State.setStatus('current')
axTcpProxyStatTimeWstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTimeWstate.setStatus('current')
axTcpProxyStatTCPCloseState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseState.setStatus('current')
axTcpProxyStatTCPCloseWState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseWState.setStatus('current')
axTcpProxyStatTCPLastACKState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPLastACKState.setStatus('current')
axTcpProxyStatTCPListenState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPListenState.setStatus('current')
axTcpProxyStatTCPClosingState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPClosingState.setStatus('current')
axSslStatSSLModNum = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLModNum.setStatus('current')
axSslStatCurrSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatCurrSSLConn.setStatus('current')
axSslStatTotalSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatTotalSSLConn.setStatus('current')
axSslStatFailSSLHandshake = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatFailSSLHandshake.setStatus('current')
axSslStatSSLMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLMemUsage.setStatus('current')
axSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6), )
if mibBuilder.loadTexts: axSslStatTable.setStatus('current')
axSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSslStatModuleIndex"))
if mibBuilder.loadTexts: axSslStatEntry.setStatus('current')
axSslStatModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatModuleIndex.setStatus('current')
axSslStatEnableCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 2), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatEnableCryptoEngine.setStatus('current')
axSslStatAvailCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 3), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatAvailCryptoEngine.setStatus('current')
axSslStatSSLFailedCAVfy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCAVfy.setStatus('current')
axSslStatSSLNoHWContextMem = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLNoHWContextMem.setStatus('current')
axSslStatSSLHWRingFull = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLHWRingFull.setStatus('current')
axSslStatSSLFailedCryptoOperation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCryptoOperation.setStatus('current')
axFtpStatTotalCtrlSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalCtrlSession.setStatus('current')
axFtpStatTotalALGPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalALGPkt.setStatus('current')
axFtpStatALGPktReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatALGPktReXmit.setStatus('current')
axFtpStatOutConnCtrl = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnCtrl.setStatus('current')
axFtpStatTotalDataSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalDataSession.setStatus('current')
axFtpStatOutConnData = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnData.setStatus('current')
axNetStatIPOutNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRoute.setStatus('current')
axNetStatTCPOutRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRst.setStatus('current')
axNetStatTCPSynRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRcv.setStatus('current')
axNetStatTCPSYNCookieSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSent.setStatus('current')
axNetStatTCPSYNCookieSentFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSentFail.setStatus('current')
axNetStatTCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPReceive.setStatus('current')
axNetStatUDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPReceive.setStatus('current')
axNetStatServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFail.setStatus('current')
axNetStatSourceNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFail.setStatus('current')
axNetStatTCPSynCookieFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFail.setStatus('current')
axNetStatNoVportDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrop.setStatus('current')
axNetStatNoSynPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrop.setStatus('current')
axNetStatConnLimitDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrop.setStatus('current')
axNetStatConnLimitReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitReset.setStatus('current')
axNetStatProxyNoSockDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrop.setStatus('current')
axNetStataFlexDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrop.setStatus('current')
axNetStatSessionAgingOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionAgingOut.setStatus('current')
axNetStatTCPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPNoSLB.setStatus('current')
axNetStatUDPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPNoSLB.setStatus('current')
axNetStatTCPOutRSTNoSYN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTNoSYN.setStatus('current')
axNetStatTCPOutRSTL4Proxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTL4Proxy.setStatus('current')
axNetStatTCPOutRSTACKattack = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTACKattack.setStatus('current')
axNetStatTCPOutRSTAFleX = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTAFleX.setStatus('current')
axNetStatTCPOutRSTStaleSess = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTStaleSess.setStatus('current')
axNetStatTCPOutRSTProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTProxy.setStatus('current')
axNetStatNoSYNPktDropFIN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropFIN.setStatus('current')
axNetStatNoSYNPktDropRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropRST.setStatus('current')
axNetStatNoSYNPktDropACK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropACK.setStatus('current')
axNetStatSYNThrotte = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSYNThrotte.setStatus('current')
axNetStatSSLSIDPersistSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistSucc.setStatus('current')
axNetStatSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistFail.setStatus('current')
axNetStatClientSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotFound.setStatus('current')
axNetStatClientSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDMatch.setStatus('current')
axNetStatClientSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotMatch.setStatus('current')
axNetStatServerSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotFound.setStatus('current')
axNetStatServerSSLSIDReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDReset.setStatus('current')
axNetStatServerSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDMatch.setStatus('current')
axNetStatServerSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotMatch.setStatus('current')
axNetStatCreateSSLSIDSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDSucc.setStatus('current')
axNetStatCreateSSLSIDFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDFail.setStatus('current')
axNetStatConnRateLimitDrops = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitDrops.setStatus('current')
axNetStatConnRateLimitResets = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitResets.setStatus('current')
axNetStatInbandHMRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMRetry.setStatus('current')
axNetStatInbandHMReassign = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMReassign.setStatus('current')
axNetStat2TCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2TCPReceive.setStatus('current')
axNetStat2UDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2UDPReceive.setStatus('current')
axNetStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100), )
if mibBuilder.loadTexts: axNetStatTable.setStatus('current')
axNetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1), ).setIndexNames((0, "A10-AX-MIB", "axNetStatCpuIndex"))
if mibBuilder.loadTexts: axNetStatEntry.setStatus('current')
axNetStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCpuIndex.setStatus('current')
axNetStatIPOutNoRt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRt.setStatus('current')
axNetStatTCPOutReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutReset.setStatus('current')
axNetStatTCPSynRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRecv.setStatus('current')
axNetStatTCPSYNCookieSnt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSnt.setStatus('current')
axNetStatTCPSYNCookieSntFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSntFail.setStatus('current')
axNetStatTCPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPRcv.setStatus('current')
axNetStatUDPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPRcv.setStatus('current')
axNetStatServerSelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFails.setStatus('current')
axNetStatSourceNATFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFails.setStatus('current')
axNetStatTCPSynCookieFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFails.setStatus('current')
axNetStatNoVportDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrops.setStatus('current')
axNetStatNoSynPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrops.setStatus('current')
axNetStatConnLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrops.setStatus('current')
axNetStatConnLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitResets.setStatus('current')
axNetStatProxyNoSockDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrops.setStatus('current')
axNetStataFlexDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrops.setStatus('current')
axNetStatSessionsAgingOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionsAgingOut.setStatus('current')
axNetStatTCPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPsNoSLB.setStatus('current')
axNetStatUDPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPsNoSLB.setStatus('current')
axNetStatEntryTCPOutRSTNoSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTNoSYN.setStatus('current')
axNetStatEntryTCPOutRSTL4Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTL4Proxy.setStatus('current')
axNetStatEntryTCPOutRSTACKattack = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTACKattack.setStatus('current')
axNetStatEntryTCPOutRSTAFleX = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTAFleX.setStatus('current')
axNetStatEntryTCPOutRSTStaleSess = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTStaleSess.setStatus('current')
axNetStatEntryTCPOutRSTProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTProxy.setStatus('current')
axNetStatEntryNoSYNPktDropFIN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropFIN.setStatus('current')
axNetStatEntryNoSYNPktDropRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropRST.setStatus('current')
axNetStatEntryNoSYNPktDropACK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropACK.setStatus('current')
axNetStatEntrySYNThrotte = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySYNThrotte.setStatus('current')
axNetStatEntrySSLSIDPersistSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistSucc.setStatus('current')
axNetStatEntrySSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistFail.setStatus('current')
axNetStatEntryClientSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotFound.setStatus('current')
axNetStatEntryClientSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDMatch.setStatus('current')
axNetStatEntryClientSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotMatch.setStatus('current')
axNetStatEntryServerSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotFound.setStatus('current')
axNetStatEntryServerSSLSIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDReset.setStatus('current')
axNetStatEntryServerSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDMatch.setStatus('current')
axNetStatEntryServerSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotMatch.setStatus('current')
axNetStatEntryCreateSSLSIDSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDSucc.setStatus('current')
axNetStatEntryCreateSSLSIDFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDFail.setStatus('current')
axNetStatEntryConnRateLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitDrops.setStatus('current')
axNetStatEntryConnRateLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitResets.setStatus('current')
axNetStatEntryInbandHMRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMRetry.setStatus('current')
axNetStatEntryInbandHMReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMReassign.setStatus('current')
axNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1))
axNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2))
axSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1))
axAppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2))
axNetworkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 3))
axNotificationMsg = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationMsg.setStatus('current')
axNotificationSLBServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBServer.setStatus('current')
axNotificationSLBPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBPort.setStatus('current')
axNotificationSLBCurConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBCurConns.setStatus('current')
axNotificationVirtualServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServer.setStatus('current')
axNotificationVirtualServerPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServerPort.setStatus('current')
axNotificationVirtualServerPortType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServerPortType.setStatus('current')
axNotificationDropEventReason = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationDropEventReason.setStatus('current')
axNotificationConfiguredThreshold = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConfiguredThreshold.setStatus('current')
axNotificationCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCurrentUsage.setStatus('current')
axNotificationConnLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConnLimit.setStatus('current')
axNotificationTrunkID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationTrunkID.setStatus('current')
axNotificationPortThreshold = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPortThreshold.setStatus('current')
axNotificationCurrentUpPorts = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCurrentUpPorts.setStatus('current')
axNotificationFanName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationFanName.setStatus('current')
axNotificationPowerSupplyName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPowerSupplyName.setStatus('current')
axSystemStart = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 1))
if mibBuilder.loadTexts: axSystemStart.setStatus('current')
axSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 2))
if mibBuilder.loadTexts: axSystemShutdown.setStatus('current')
axSystemTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 3))
if mibBuilder.loadTexts: axSystemTempHigh.setStatus('current')
axFan1Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 4))
if mibBuilder.loadTexts: axFan1Failure.setStatus('deprecated')
axFan2Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 5))
if mibBuilder.loadTexts: axFan2Failure.setStatus('deprecated')
axFan3Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 6))
if mibBuilder.loadTexts: axFan3Failure.setStatus('deprecated')
axUpperPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 9))
if mibBuilder.loadTexts: axUpperPowerSupplyFailure.setStatus('deprecated')
axLowerPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 10))
if mibBuilder.loadTexts: axLowerPowerSupplyFailure.setStatus('deprecated')
axPrimaryHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 11))
if mibBuilder.loadTexts: axPrimaryHardDiskFailure.setStatus('current')
axSecondaryHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 12))
if mibBuilder.loadTexts: axSecondaryHardDiskFailure.setStatus('current')
axHardDiskUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 13))
if mibBuilder.loadTexts: axHardDiskUsageHigh.setStatus('current')
axMemoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 14))
if mibBuilder.loadTexts: axMemoryUsageHigh.setStatus('current')
axSystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 15))
if mibBuilder.loadTexts: axSystemRestart.setStatus('current')
axSystemDropPacketEvent = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 16)).setObjects(("A10-AX-MIB", "axNotificationDropEventReason"))
if mibBuilder.loadTexts: axSystemDropPacketEvent.setStatus('current')
axSystemRelieveDropPacketEvent = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 17)).setObjects(("A10-AX-MIB", "axNotificationDropEventReason"))
if mibBuilder.loadTexts: axSystemRelieveDropPacketEvent.setStatus('current')
axSystemControlCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 18)).setObjects(("A10-AX-MIB", "axNotificationConfiguredThreshold"), ("A10-AX-MIB", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemControlCpuHigh.setStatus('current')
axSystemDataCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 19)).setObjects(("A10-AX-MIB", "axNotificationConfiguredThreshold"), ("A10-AX-MIB", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemDataCpuHigh.setStatus('current')
axSystemFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 20)).setObjects(("A10-AX-MIB", "axNotificationFanName"))
if mibBuilder.loadTexts: axSystemFanFailure.setStatus('current')
axSystemPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 21)).setObjects(("A10-AX-MIB", "axNotificationPowerSupplyName"))
if mibBuilder.loadTexts: axSystemPowerSupplyFailure.setStatus('current')
axHAStandby = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 1)).setObjects(("A10-AX-MIB", "axNotificationMsg"))
if mibBuilder.loadTexts: axHAStandby.setStatus('current')
axHAActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 2)).setObjects(("A10-AX-MIB", "axNotificationMsg"))
if mibBuilder.loadTexts: axHAActive.setStatus('current')
axHAActiveActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 3)).setObjects(("A10-AX-MIB", "axNotificationMsg"))
if mibBuilder.loadTexts: axHAActiveActive.setStatus('current')
axServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 4)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceDown.setStatus('current')
axServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 5)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceUp.setStatus('current')
axServerDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 6)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"))
if mibBuilder.loadTexts: axServerDown.setStatus('current')
axServerUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 7)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"))
if mibBuilder.loadTexts: axServerUp.setStatus('current')
axServerConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 8)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnLimit.setStatus('current')
axServerConnResume = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 9)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnResume.setStatus('current')
axServiceConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 10)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnLimit.setStatus('current')
axServiceConnResume = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 11)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnResume.setStatus('current')
axVirtualServerPortDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 12)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationVirtualServer"), ("A10-AX-MIB", "axNotificationVirtualServerPort"), ("A10-AX-MIB", "axNotificationVirtualServerPortType"))
if mibBuilder.loadTexts: axVirtualServerPortDown.setStatus('current')
axVirtualServerPortUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 13)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationVirtualServer"), ("A10-AX-MIB", "axNotificationVirtualServerPort"), ("A10-AX-MIB", "axNotificationVirtualServerPortType"))
if mibBuilder.loadTexts: axVirtualServerPortUp.setStatus('current')
axApplicationBufferReachLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 14)).setObjects(("A10-AX-MIB", "axNotificationConfiguredThreshold"), ("A10-AX-MIB", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axApplicationBufferReachLimit.setStatus('current')
axVirtualServerPortReachConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 15)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerPortReachConnLimit.setStatus('current')
axVirtualServerPortReachConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 16)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerPortReachConnRateLimit.setStatus('current')
axVirtualServerReachConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 17)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerReachConnLimit.setStatus('current')
axVirtualServerReachConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 18)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerReachConnRateLimit.setStatus('current')
axServerConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 19)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnRateLimit.setStatus('current')
axServiceConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 20)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnRateLimit.setStatus('current')
axNetworkTrunkPortsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 3, 1)).setObjects(("A10-AX-MIB", "axNotificationTrunkID"), ("A10-AX-MIB", "axNotificationPortThreshold"), ("A10-AX-MIB", "axNotificationCurrentUpPorts"))
if mibBuilder.loadTexts: axNetworkTrunkPortsThreshold.setStatus('current')
axSmtpProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsCurrProxyConns.setStatus('current')
axSmtpProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsTotalProxyConns.setStatus('current')
axSmtpProxyStatsSmtpRequests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpRequests.setStatus('current')
axSmtpProxyStatsSmtpReqSuccs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpReqSuccs.setStatus('current')
axSmtpProxyStatsNoProxyError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoProxyError.setStatus('current')
axSmtpProxyStatsClientRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsClientRST.setStatus('current')
axSmtpProxyStatsServerRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerRST.setStatus('current')
axSmtpProxyStatsNoTupleError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoTupleError.setStatus('current')
axSmtpProxyStatsParseReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsParseReqFail.setStatus('current')
axSmtpProxyStatsServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerSelFail.setStatus('current')
axSmtpProxyStatsFwdReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqFail.setStatus('current')
axSmtpProxyStatsFwdReqDataFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqDataFail.setStatus('current')
axSmtpProxyStatsReqRetrans = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqRetrans.setStatus('current')
axSmtpProxyStatsReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqPktOutOrder.setStatus('current')
axSmtpProxyStatsServerResel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerResel.setStatus('current')
axSmtpProxyStatsSvrPrematureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrPrematureClose.setStatus('current')
axSmtpProxyStatsSvrConnMade = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrConnMade.setStatus('current')
axSmtpProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSNATFail.setStatus('current')
axSmtpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19), )
if mibBuilder.loadTexts: axSmtpProxyStatTable.setStatus('current')
axSmtpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1), ).setIndexNames((0, "A10-AX-MIB", "axSmtpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axSmtpProxyStatEntry.setStatus('current')
axSmtpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCpuIndex.setStatus('current')
axSmtpProxyStatCurrProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCurrProxyConn.setStatus('current')
axSmtpProxyStatTotalProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatTotalProxyConn.setStatus('current')
axSmtpProxyStatSmtpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReq.setStatus('current')
axSmtpProxyStatSmtpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReqSucc.setStatus('current')
axSmtpProxyStatNoProxyError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoProxyError.setStatus('current')
axSmtpProxyStatClientRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatClientRST.setStatus('current')
axSmtpProxyStatServerRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerRST.setStatus('current')
axSmtpProxyStatNoTupleError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoTupleError.setStatus('current')
axSmtpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatParseReqFail.setStatus('current')
axSmtpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerSelFail.setStatus('current')
axSmtpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqFail.setStatus('current')
axSmtpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqDataFail.setStatus('current')
axSmtpProxyStatReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqRetrans.setStatus('current')
axSmtpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqPktOutOrder.setStatus('current')
axSmtpProxyStatServerResel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerResel.setStatus('current')
axSmtpProxyStatSvrPrematureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrPrematureClose.setStatus('current')
axSmtpProxyStatSvrConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrConnMade.setStatus('current')
axSmtpProxyStatSNATFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSNATFail.setStatus('current')
axSslProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsCurrProxyConns.setStatus('current')
axSslProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsTotalProxyConns.setStatus('current')
axSslProxyStatsClientErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsClientErr.setStatus('current')
axSslProxyStatsServerErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsServerErr.setStatus('current')
axSslProxyStatsSessNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSessNotFound.setStatus('current')
axSslProxyStatsNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsNoRoute.setStatus('current')
axSslProxyStatsSvrSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSvrSelFail.setStatus('current')
axSslProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSNATFail.setStatus('current')
axPersistentStatsUrlHashPersistOKPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKPri.setStatus('current')
axPersistentStatsUrlHashPersistOKSec = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKSec.setStatus('current')
axPersistentStatsUrlHashPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistFail.setStatus('current')
axPersistentStatsSIPPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistOK.setStatus('current')
axPersistentStatsSIPPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistFail.setStatus('current')
axPersistentStatsSSLSIDPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistOK.setStatus('current')
axPersistentStatsSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistFail.setStatus('current')
axPersistentStatsCookiePersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistOK.setStatus('current')
axPersistentStatsCookiePersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistFail.setStatus('current')
axPersistentStatsPersistCookieNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsPersistCookieNotFound.setStatus('current')
axPersistentStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11), )
if mibBuilder.loadTexts: axPersistentStatTable.setStatus('current')
axPersistentStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1), ).setIndexNames((0, "A10-AX-MIB", "axPersistentStatCpuIndex"))
if mibBuilder.loadTexts: axPersistentStatEntry.setStatus('current')
axPersistentStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCpuIndex.setStatus('current')
axPersistentStatUrlHashPersistOKPri = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKPri.setStatus('current')
axPersistentStatUrlHashPersistOKSec = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKSec.setStatus('current')
axPersistentStatUrlHashPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistFail.setStatus('current')
axPersistentStatSIPPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistOK.setStatus('current')
axPersistentStatSIPPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistFail.setStatus('current')
axPersistentStatSSLSIDPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistOK.setStatus('current')
axPersistentStatSSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistFail.setStatus('current')
axPersistentStatCookiePersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistOK.setStatus('current')
axPersistentStatCookiePersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistFail.setStatus('current')
axPersistentStatPersistCookieNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatPersistCookieNotFound.setStatus('current')
axSwitchStatsL2Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL2Forward.setStatus('current')
axSwitchStatsL3IPForward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPForward.setStatus('current')
axSwitchStatsIPv4NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv4NoRouteDrop.setStatus('current')
axSwitchStatsL3IPv6Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPv6Forward.setStatus('current')
axSwitchStatsIPv6NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv6NoRouteDrop.setStatus('current')
axSwitchStatsL4Process = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL4Process.setStatus('current')
axSwitchStatsIncorrectLenDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIncorrectLenDrop.setStatus('current')
axSwitchStatsProtoDownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsProtoDownDrop.setStatus('current')
axSwitchStatsUnknownProtoDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsUnknownProtoDrop.setStatus('current')
axSwitchStatsTTLExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsTTLExceedDrop.setStatus('current')
axSwitchStatsLinkdownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsLinkdownDrop.setStatus('current')
axSwitchStatsSRCPortSuppress = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsSRCPortSuppress.setStatus('current')
axSwitchStatsVLANFlood = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsVLANFlood.setStatus('current')
axSwitchStatsIPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragRcv.setStatus('current')
axSwitchStatsARPReqRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPReqRcv.setStatus('current')
axSwitchStatsARPRespRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPRespRcv.setStatus('current')
axSwitchStatsFwdKernel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsFwdKernel.setStatus('current')
axSwitchStatsIPTCPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPTCPFragRcv.setStatus('current')
axSwitchStatsIPFragOverlap = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlap.setStatus('current')
axSwitchStatsIPFragOverlapDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlapDrop.setStatus('current')
axSwitchStatsIPFragReasmOk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmOk.setStatus('current')
axSwitchStatsIPFragReasmFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmFail.setStatus('current')
axSwitchStatsAnomLanAttackDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomLanAttackDrop.setStatus('current')
axSwitchStatsAnomIPOptionDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomIPOptionDrop.setStatus('current')
axSwitchStatsAnomPingDeathDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomPingDeathDrop.setStatus('current')
axSwitchStatsAnomAllFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAllFragDrop.setStatus('current')
axSwitchStatsAnomTCPNoFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPNoFragDrop.setStatus('current')
axSwitchStatsAnomSYNFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomSYNFragDrop.setStatus('current')
axSwitchStatsAnomTCPSynFinDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPSynFinDrop.setStatus('current')
axSwitchStatsAnomAnyDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAnyDrop.setStatus('current')
axSwitchStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31), )
if mibBuilder.loadTexts: axSwitchStatTable.setStatus('current')
axSwitchStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1), ).setIndexNames((0, "A10-AX-MIB", "axSwitchStatCpuIndex"))
if mibBuilder.loadTexts: axSwitchStatEntry.setStatus('current')
axSwitchStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatCpuIndex.setStatus('current')
axSwitchStatL2Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL2Forward.setStatus('current')
axSwitchStatL3IPForward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPForward.setStatus('current')
axSwitchStatIPv4NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv4NoRouteDrop.setStatus('current')
axSwitchStatL3IPv6Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPv6Forward.setStatus('current')
axSwitchStatIPv6NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv6NoRouteDrop.setStatus('current')
axSwitchStatL4Process = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL4Process.setStatus('current')
axSwitchStatIncorrectLenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIncorrectLenDrop.setStatus('current')
axSwitchStatProtoDownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatProtoDownDrop.setStatus('current')
axSwitchStatUnknownProtoDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatUnknownProtoDrop.setStatus('current')
axSwitchStatTTLExceedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatTTLExceedDrop.setStatus('current')
axSwitchStatLinkdownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatLinkdownDrop.setStatus('current')
axSwitchStatSRCPortSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatSRCPortSuppress.setStatus('current')
axSwitchStatVLANFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatVLANFlood.setStatus('current')
axSwitchStatIPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragRcv.setStatus('current')
axSwitchStatARPReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPReqRcv.setStatus('current')
axSwitchStatARPRespRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPRespRcv.setStatus('current')
axSwitchStatFwdKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatFwdKernel.setStatus('current')
axSwitchStatIPTCPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPTCPFragRcv.setStatus('current')
axSwitchStatIPFragOverlap = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlap.setStatus('current')
axSwitchStatIPFragOverlapDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlapDrop.setStatus('current')
axSwitchStatIPFragReasmOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmOk.setStatus('current')
axSwitchStatIPFragReasmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmFail.setStatus('current')
axSwitchStatAnomLanAttackDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomLanAttackDrop.setStatus('current')
axSwitchStatAnomIPOptionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomIPOptionDrop.setStatus('current')
axSwitchStatAnomPingDeathDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomPingDeathDrop.setStatus('current')
axSwitchStatAnomAllFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAllFragDrop.setStatus('current')
axSwitchStatAnomTCPNoFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPNoFragDrop.setStatus('current')
axSwitchStatAnomSYNFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomSYNFragDrop.setStatus('current')
axSwitchStatAnomTCPSynFinDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPSynFinDrop.setStatus('current')
axSwitchStatAnomAnyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAnyDrop.setStatus('current')
axHAConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAConfigEnabled.setStatus('current')
axHAID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAID.setStatus('current')
axHASetID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHASetID.setStatus('current')
axHAPreemptStatusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAPreemptStatusEnabled.setStatus('current')
axHATimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutInterval.setStatus('current')
axHATimeoutRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutRetry.setStatus('current')
axHAARPRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAARPRetry.setStatus('current')
axHAGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupCount.setStatus('current')
axHAGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2), )
if mibBuilder.loadTexts: axHAGroupStatusTable.setStatus('current')
axHAGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAGroupID"))
if mibBuilder.loadTexts: axHAGroupStatusEntry.setStatus('current')
axHAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupID.setStatus('current')
axHAGroupLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalStatus.setStatus('current')
axHAGroupLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalPriority.setStatus('current')
axHAGroupPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerStatus.setStatus('current')
axHAGroupPeerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerPriority.setStatus('current')
axHAFloatingIPCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPCount.setStatus('current')
axHAFloatingIPTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2), )
if mibBuilder.loadTexts: axHAFloatingIPTable.setStatus('current')
axHAFloatingIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAFloatingIPIndex"))
if mibBuilder.loadTexts: axHAFloatingIPEntry.setStatus('current')
axHAFloatingIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPIndex.setStatus('current')
axHAFloatingIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPAddress.setStatus('current')
axHAFloatingIPHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPHaGroupID.setStatus('current')
axIpNatStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1))
axIpNatStatsIntfInsideOutside = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2))
axIpNatStatsDynamicMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3))
axIpNatLsnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4))
axIpNatStatsGlobalHits = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalHits.setStatus('current')
axIpNatStatsGlobalMisses = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalMisses.setStatus('current')
axIpNatStatsIntfInsideOutsideTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1), )
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideTable.setStatus('current')
axIpNatStatsIntfInsideOutsideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsInsideOutsideIntfIndex"))
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideEntry.setStatus('current')
axIpNatStatsInsideOutsideIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfIndex.setStatus('current')
axIpNatStatsInsideOutsideIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfName.setStatus('current')
axIpNatStatsInsideOutsideIntfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inside", 0), ("outside", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfDirection.setStatus('current')
axIpNatStatsDynamicMappingTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1), )
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTable.setStatus('current')
axIpNatStatsDynamicMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsDynamicMappingAccessListID"))
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEntry.setStatus('current')
axIpNatStatsDynamicMappingAccessListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAccessListID.setStatus('current')
axIpNatStatsDynamicMappingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingPoolName.setStatus('current')
axIpNatStatsDynamicMappingStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddress.setStatus('current')
axIpNatStatsDynamicMappingEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddress.setStatus('current')
axIpNatStatsDynamicMappingTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTotalAddresses.setStatus('current')
axIpNatStatsDynamicMappingAllocAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAllocAddresses.setStatus('current')
axIpNatStatsDynamicMappingMissAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingMissAddresses.setStatus('current')
axIpNatLsnGobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1))
axIpNatLsnTop5PrivateIpAddrTotSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2))
axIpNatLsnTop5PrivateIpAddrTotTcpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3))
axIpNatLsnTop5PrivateIpAddrTotUdpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4))
axIpNatLsnTop5PrivateIpAddrTotIcmpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5))
axIpNatLsnTop5UserPrivateIpAddrTotSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6))
axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7))
axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8))
axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9))
axIpNatLsnTop5GlobalPoolIpAddrTotUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10))
axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11))
axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12))
axIpNatLsnTotalUserQuotaSessions = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTotalUserQuotaSessions.setStatus('current')
axIpNatLsnTotalIpAddrTranslated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTotalIpAddrTranslated.setStatus('current')
axIpNatLsnTotalFullConeSessions = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTotalFullConeSessions.setStatus('current')
axIpNatLsnTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4))
axIpNatLsnTrafficFullConeSessionCreated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFullConeSessionCreated.setStatus('current')
axIpNatLsnTrafficFullConeSessionFreed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFullConeSessionFreed.setStatus('current')
axIpNatLsnTrafficFailsInFullConeSessionCreation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFailsInFullConeSessionCreation.setStatus('current')
axIpNatLsnTrafficHairpinSessionCreated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficHairpinSessionCreated.setStatus('current')
axIpNatLsnTrafficEndpointIndepMapMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficEndpointIndepMapMatch.setStatus('current')
axIpNatLsnTrafficEndpointIndepFilterMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficEndpointIndepFilterMatch.setStatus('current')
axIpNatLsnTrafficUserQuotasCreated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficUserQuotasCreated.setStatus('current')
axIpNatLsnTrafficUserQuotasFreed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficUserQuotasFreed.setStatus('current')
axIpNatLsnTrafficFailsInUserQuotasCreation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFailsInUserQuotasCreation.setStatus('current')
axIpNatLsnTrafficIcmpUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficIcmpUserQuotasExceeded.setStatus('current')
axIpNatLsnTrafficUdpUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficUdpUserQuotasExceeded.setStatus('current')
axIpNatLsnTrafficTcpUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficTcpUserQuotasExceeded.setStatus('current')
axIpNatLsnTrafficExtendedUserQuotasMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficExtendedUserQuotasMatch.setStatus('current')
axIpNatLsnTrafficExtendedUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficExtendedUserQuotasExceeded.setStatus('current')
axIpNatLsnTrafficNatPortUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficNatPortUnavailable.setStatus('current')
axIpNatLsnTrafficNewUserResourceUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficNewUserResourceUnavailable.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotSessionTable.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddr"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotSessionEntry.setStatus('current')
axIpNatLsnTop5PrivateIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddr.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumSessions.setStatus('current')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddr.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotTcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotTcpPortTable.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddrInTcpPort"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry.setStatus('current')
axIpNatLsnTop5PrivateIpAddrInTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInTcpPort.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts.setStatus('current')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotUdpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotUdpPortTable.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddrInUdpPort"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry.setStatus('current')
axIpNatLsnTop5PrivateIpAddrInUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInUdpPort.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts.setStatus('current')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddrInIcmpPort"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry.setStatus('current')
axIpNatLsnTop5PrivateIpAddrInIcmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInIcmpPort.setStatus('current')
axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts.setStatus('current')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotSessionTable.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddr"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddr.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumSessions.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddrInTcp"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrInTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInTcp.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddrInUdp"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrInUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInUdp.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddrInIcmp"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInIcmp.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions.setStatus('current')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotUserTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUserTable.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5GlobalPoolIpAddr"))
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddr.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5GlobalPoolIpAddrInTcp"))
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrInTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrInTcp.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5GlobalPoolIpAddrInUdp"))
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrInUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrInUdp.setStatus('current')
axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts.setStatus('current')
axSessionStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1))
axSessionGlobalStatTCPEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPEstablished.setStatus('current')
axSessionGlobalStatTCPHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPHalfOpen.setStatus('current')
axSessionGlobalStatUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatUDP.setStatus('current')
axSessionGlobalStatNonTcpUdpIPSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatNonTcpUdpIPSession.setStatus('current')
axSessionGlobalStatOther = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatOther.setStatus('current')
axSessionGlobalStatReverseNATTCP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATTCP.setStatus('current')
axSessionGlobalStatReverseNATUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATUDP.setStatus('current')
axSessionGlobalStatFreeBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeBufferCount.setStatus('current')
axSessionGlobalStatFreeCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeCurrentConns.setStatus('current')
axSessionGlobalStatConnCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnCount.setStatus('current')
axSessionGlobalStatConnFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnFree.setStatus('current')
axSessionGlobalStatTCPSynHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPSynHalfOpen.setStatus('current')
axSessionGlobalStatConnSMPAllocated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPAllocated.setStatus('current')
axSessionGlobalStatConnSMPFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPFree.setStatus('current')
mibBuilder.exportSymbols("A10-AX-MIB", axVirtualServerPortAddress=axVirtualServerPortAddress, axConnReuseStatTotalUNBound=axConnReuseStatTotalUNBound, axFastHttpProxyStatTotalNoTuple=axFastHttpProxyStatTotalNoTuple, axVirtualServerPortName=axVirtualServerPortName, axVirtualServerPortStatTable=axVirtualServerPortStatTable, axNotificationObjects=axNotificationObjects, axSwitchStatIPFragOverlap=axSwitchStatIPFragOverlap, axTcpProxyStatCpuIndex=axTcpProxyStatCpuIndex, axSwitchStatLinkdownDrop=axSwitchStatLinkdownDrop, axHttpProxyStatCurrProxyConns=axHttpProxyStatCurrProxyConns, axHttpProxyStatHttpReqSucc=axHttpProxyStatHttpReqSucc, axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts, axServiceGroupType=axServiceGroupType, axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry=axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry, axVirtualServerStatPktsIn=axVirtualServerStatPktsIn, axServiceGroupMemberStatAddrType=axServiceGroupMemberStatAddrType, axHttpProxyStatFwdReqFail=axHttpProxyStatFwdReqFail, axHttpProxyStatHttpReq=axHttpProxyStatHttpReq, axNotificationVirtualServerPortType=axNotificationVirtualServerPortType, axServerPortStatusInServiceGroupMemberStat=axServerPortStatusInServiceGroupMemberStat, axHAARPRetry=axHAARPRetry, axIpNatStats=axIpNatStats, axServerAddressInPort=axServerAddressInPort, axNetStatClientSSLSIDNotMatch=axNetStatClientSSLSIDNotMatch, axSmtpProxyStatsServerResel=axSmtpProxyStatsServerResel, axConnReuseStats=axConnReuseStats, axSysFirmwareVersion=axSysFirmwareVersion, axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts, axVirtualServerPortStatBytesIn=axVirtualServerPortStatBytesIn, axSwitchStatsAnomIPOptionDrop=axSwitchStatsAnomIPOptionDrop, axIpNatStatsDynamicMappingMissAddresses=axIpNatStatsDynamicMappingMissAddresses, axSslStatSSLMemUsage=axSslStatSSLMemUsage, axNetStatEntryNoSYNPktDropFIN=axNetStatEntryNoSYNPktDropFIN, axPrimaryHardDiskFailure=axPrimaryHardDiskFailure, axHttpProxyStatServerSelFail=axHttpProxyStatServerSelFail, axSysHwPhySystemTemp=axSysHwPhySystemTemp, axServiceGroup=axServiceGroup, axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions=axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions, axVirtualServerPortDisplayStatus=axVirtualServerPortDisplayStatus, axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers=axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers, axVirtualServerPortStatCurConns=axVirtualServerPortStatCurConns, axServiceConnResume=axServiceConnResume, axSysStartupMode=axSysStartupMode, axSystem=axSystem, axSmtpProxyStatsSNATFail=axSmtpProxyStatsSNATFail, axNetStatNoSYNPktDropFIN=axNetStatNoSYNPktDropFIN, axSessionGlobalStatConnSMPAllocated=axSessionGlobalStatConnSMPAllocated, axServiceGroupStatEntry=axServiceGroupStatEntry, axSysSecondaryVersionOnCF=axSysSecondaryVersionOnCF, axConnReuseStatTable=axConnReuseStatTable, axHttpProxyStatTotalReqErr=axHttpProxyStatTotalReqErr, axVirtualServerCount=axVirtualServerCount, axIpNatStatsDynamicMappingTotalAddresses=axIpNatStatsDynamicMappingTotalAddresses, axVirtualServerPortTCPProxyTemplate=axVirtualServerPortTCPProxyTemplate, axServerPortStatTable=axServerPortStatTable, axSmtpProxyStatsSvrConnMade=axSmtpProxyStatsSvrConnMade, axNetStatEntryTCPOutRSTACKattack=axNetStatEntryTCPOutRSTACKattack, axTcpProxyStatTCPLastACKState=axTcpProxyStatTCPLastACKState, axNetStatCreateSSLSIDSucc=axNetStatCreateSSLSIDSucc, axServiceGroupMemberStatName=axServiceGroupMemberStatName, axNotificationFanName=axNotificationFanName, axSmtpProxyStatsServerRST=axSmtpProxyStatsServerRST, axSwitchStatEntry=axSwitchStatEntry, axVirtualServerPortStatName=axVirtualServerPortStatName, axVirtualServerStatTable=axVirtualServerStatTable, axNetStatEntrySYNThrotte=axNetStatEntrySYNThrotte, axSmtpProxyStatClientRST=axSmtpProxyStatClientRST, axSysFanStatusEntry=axSysFanStatusEntry, axFastHttpProxyStatTotalConn=axFastHttpProxyStatTotalConn, axMemoryUsageHigh=axMemoryUsageHigh, axSessionGlobalStatConnFree=axSessionGlobalStatConnFree, axNetStatEntryClientSSLSIDMatch=axNetStatEntryClientSSLSIDMatch, axServiceGroupStatTable=axServiceGroupStatTable, axSystemFanFailure=axSystemFanFailure, axServerPortEntry=axServerPortEntry, axSessionStatsGlobal=axSessionStatsGlobal, axUpperPowerSupplyFailure=axUpperPowerSupplyFailure, axServerNameInServiceGroupMember=axServerNameInServiceGroupMember, axIpNatLsnTrafficExtendedUserQuotasMatch=axIpNatLsnTrafficExtendedUserQuotasMatch, axSmtpProxyStatSmtpReqSucc=axSmtpProxyStatSmtpReqSucc, axIpNatLsnTrafficFullConeSessionFreed=axIpNatLsnTrafficFullConeSessionFreed, axSmtpProxyStatNoProxyError=axSmtpProxyStatNoProxyError, axAppGlobalSystemResourceUsageTable=axAppGlobalSystemResourceUsageTable, axFastHttpProxyStatReqReTran=axFastHttpProxyStatReqReTran, axInterfaceMediaActiveDuplex=axInterfaceMediaActiveDuplex, axIpNatLsnTrafficNewUserResourceUnavailable=axIpNatLsnTrafficNewUserResourceUnavailable, axNetStatTCPsNoSLB=axNetStatTCPsNoSLB, axVirtualServerPortServerSSLTemplate=axVirtualServerPortServerSSLTemplate, axTcpProxyStatTotalOutTCPPkt=axTcpProxyStatTotalOutTCPPkt, axSessionGlobalStatFreeCurrentConns=axSessionGlobalStatFreeCurrentConns, axServerName=axServerName, axFastHttpProxyStatServerPreMatureClose=axFastHttpProxyStatServerPreMatureClose, axVirtualServerStatPortStatus=axVirtualServerStatPortStatus, axConnReuseStatTotalUNBind=axConnReuseStatTotalUNBind, axSslProxyStatsSNATFail=axSslProxyStatsSNATFail, axFastHttpProxyStatTotalSuccReq=axFastHttpProxyStatTotalSuccReq, axTcpProxyStatPassiveOpenConns=axTcpProxyStatPassiveOpenConns, axServiceGroups=axServiceGroups, axNetStatTCPSynCookieFail=axNetStatTCPSynCookieFail, axVirtualServerPortStatEntry=axVirtualServerPortStatEntry, axVlanId=axVlanId, axSwitchStatAnomTCPSynFinDrop=axSwitchStatAnomTCPSynFinDrop, axServerPortStatBytesIn=axServerPortStatBytesIn, axIpNatLsnTrafficNatPortUnavailable=axIpNatLsnTrafficNatPortUnavailable, axAppGlobalTotalNewConnections=axAppGlobalTotalNewConnections, axTcpProxyStatMemAlloc=axTcpProxyStatMemAlloc, axSmtpProxyStatsReqPktOutOrder=axSmtpProxyStatsReqPktOutOrder, axSmtpProxyStatParseReqFail=axSmtpProxyStatParseReqFail, axPersistentStatsPersistCookieNotFound=axPersistentStatsPersistCookieNotFound, axNotificationVirtualServer=axNotificationVirtualServer, axSwitchStatsFwdKernel=axSwitchStatsFwdKernel, axFastHttpProxyStatHttpReqSucc=axFastHttpProxyStatHttpReqSucc, axVirtualServerReachConnRateLimit=axVirtualServerReachConnRateLimit, axSwitchStatL3IPv6Forward=axSwitchStatL3IPv6Forward, axSslStats=axSslStats, axInterface=axInterface, axServiceGroupStatBytesIn=axServiceGroupStatBytesIn, axPersistentStatUrlHashPersistFail=axPersistentStatUrlHashPersistFail, axFastHttpProxyStatParseReqFail=axFastHttpProxyStatParseReqFail, axSmtpProxyStatCurrProxyConn=axSmtpProxyStatCurrProxyConn, axVirtualServerPortSMTPTemplate=axVirtualServerPortSMTPTemplate, axVirtualServerPortConnReuseTemplate=axVirtualServerPortConnReuseTemplate, axHttpProxyStatTotalReqPktOutOrder=axHttpProxyStatTotalReqPktOutOrder, axSwitchStatsAnomPingDeathDrop=axSwitchStatsAnomPingDeathDrop, axInterfaceStatErrorsOut=axInterfaceStatErrorsOut, axHttpProxyStatTotalSRst=axHttpProxyStatTotalSRst, axAppGlobalBufferCurrentUsage=axAppGlobalBufferCurrentUsage, axVirtualServerPortReachConnRateLimit=axVirtualServerPortReachConnRateLimit, axSmtpProxyStatsClientRST=axSmtpProxyStatsClientRST, axIpNatLsnTop5GlobalPoolIpAddrTotUserTable=axIpNatLsnTop5GlobalPoolIpAddrTotUserTable, axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts, axNetStatServerSSLSIDReset=axNetStatServerSSLSIDReset, axPersistentStatSSLSIDPersistOK=axPersistentStatSSLSIDPersistOK, axNetStat2TCPReceive=axNetStat2TCPReceive, axVlanName=axVlanName, axIpNatLsnTop5PrivateIpAddrTotIcmpPorts=axIpNatLsnTop5PrivateIpAddrTotIcmpPorts, axSystemControlCpuHigh=axSystemControlCpuHigh, axFastHttpProxyStatTotalReqReXmit=axFastHttpProxyStatTotalReqReXmit, axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry=axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry, axVlanMemberIntfId=axVlanMemberIntfId, axTcpProxyStatActiveOpenConns=axTcpProxyStatActiveOpenConns, axLowerPowerSupplyFailure=axLowerPowerSupplyFailure, axTcpProxyStatTotalActiveOpenConn=axTcpProxyStatTotalActiveOpenConn, axNetStatTCPOutRSTStaleSess=axNetStatTCPOutRSTStaleSess, axVirtualServerPortSIPTemplate=axVirtualServerPortSIPTemplate, axVlanCfgEntry=axVlanCfgEntry, axNotificationPowerSupplyName=axNotificationPowerSupplyName, axSystemNotifications=axSystemNotifications, axLogBufferPri=axLogBufferPri, axVirtualServerPortStatPktsOut=axVirtualServerPortStatPktsOut, axConnReuseStatTotalDelayedUNBind=axConnReuseStatTotalDelayedUNBind, axSystemTempHigh=axSystemTempHigh, axServiceGroupMemberTable=axServiceGroupMemberTable, axHttpProxyStatServerConnMade=axHttpProxyStatServerConnMade, axServerPortStatPersistConns=axServerPortStatPersistConns, axFastHttpProxyStatTotalFwdDataReqErr=axFastHttpProxyStatTotalFwdDataReqErr, axHA=axHA, axIpNatLsnTop5PrivateIpAddrTotSessionTable=axIpNatLsnTop5PrivateIpAddrTotSessionTable, axSmtpProxyStatTotalProxyConn=axSmtpProxyStatTotalProxyConn, axServiceGroupMemberStatPktsOut=axServiceGroupMemberStatPktsOut, axFastHttpProxyStatClientRst=axFastHttpProxyStatClientRst, axIpNatLsnTrafficTcpUserQuotasExceeded=axIpNatLsnTrafficTcpUserQuotasExceeded, axIpNatLsnTotalIpAddrTranslated=axIpNatLsnTotalIpAddrTranslated, axHttpProxyStatTotalReq=axHttpProxyStatTotalReq, axSwitchStatsAnomLanAttackDrop=axSwitchStatsAnomLanAttackDrop, axInterfaceStatus=axInterfaceStatus, axSmtpProxyStatServerRST=axSmtpProxyStatServerRST, axNetStatTCPOutRSTL4Proxy=axNetStatTCPOutRSTL4Proxy, axHardDiskUsageHigh=axHardDiskUsageHigh, axServerPortStatStatus=axServerPortStatStatus, axSmtpProxyStatServerResel=axSmtpProxyStatServerResel, axSessionStats=axSessionStats, axServiceGroupMemberEntry=axServiceGroupMemberEntry, axServerStat=axServerStat, axVirtualServerPortEntry=axVirtualServerPortEntry, axSysMemoryUsage=axSysMemoryUsage, axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable=axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable, axFastHttpProxyStatCurrProxyConns=axFastHttpProxyStatCurrProxyConns, axNetworkTrunkPortsThreshold=axNetworkTrunkPortsThreshold, axConnReuseStatTotalMissedRes=axConnReuseStatTotalMissedRes, axNetStatEntryConnRateLimitDrops=axNetStatEntryConnRateLimitDrops, axNetStatTCPOutRSTNoSYN=axNetStatTCPOutRSTNoSYN, axInterfaceStatMcastIn=axInterfaceStatMcastIn, axIpNatLsnTrafficExtendedUserQuotasExceeded=axIpNatLsnTrafficExtendedUserQuotasExceeded, axIpNatLsnTop5GlobalPoolIpAddrInUdp=axIpNatLsnTop5GlobalPoolIpAddrInUdp, axNetStatSYNThrotte=axNetStatSYNThrotte, axNetStatServerSelFails=axNetStatServerSelFails, axNetStatConnLimitResets=axNetStatConnLimitResets, axConnReuseStatTotalMissedResponse=axConnReuseStatTotalMissedResponse, axFastHttpProxyStatServerConnMade=axFastHttpProxyStatServerConnMade, axIpNatStatsGlobal=axIpNatStatsGlobal, axVirtualServerPortUp=axVirtualServerPortUp, axIpNatLsnTop5PrivateIpAddrTotTcpPortTable=axIpNatLsnTop5PrivateIpAddrTotTcpPortTable, axFanIndex=axFanIndex, axHAFloatingIPIndex=axHAFloatingIPIndex, axSwitchStatARPRespRcv=axSwitchStatARPRespRcv, axSslStatAvailCryptoEngine=axSslStatAvailCryptoEngine, axServiceGroupStatTotalSuccL7Reqs=axServiceGroupStatTotalSuccL7Reqs, axSmtpProxyStatsTotalProxyConns=axSmtpProxyStatsTotalProxyConns, axServerPort=axServerPort, axServiceGroupLbAlgorithm=axServiceGroupLbAlgorithm, axHAFloatingIPTable=axHAFloatingIPTable, axSessionGlobalStatReverseNATUDP=axSessionGlobalStatReverseNATUDP, axTcpProxyStatTotalRstRcvOnEstConn=axTcpProxyStatTotalRstRcvOnEstConn, axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions, axNetStatTCPSYNCookieSentFail=axNetStatTCPSYNCookieSentFail, axIpNatLsnTop5PrivateIpAddrTotSessions=axIpNatLsnTop5PrivateIpAddrTotSessions, axServerHealthMonitor=axServerHealthMonitor, axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry, axSysAFleXEngineVersion=axSysAFleXEngineVersion, axSmtpProxyStatReqRetrans=axSmtpProxyStatReqRetrans, axServiceGroupStatTotalL7Reqs=axServiceGroupStatTotalL7Reqs, axInterfaceIndex=axInterfaceIndex, axFastHttpProxyStatNoProxyErr=axFastHttpProxyStatNoProxyErr, axFan3Failure=axFan3Failure, axTcpProxyStatOrphanSocket=axTcpProxyStatOrphanSocket, axNetStatEntry=axNetStatEntry, axHAID=axHAID, axLogSyslogHost=axLogSyslogHost, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp, axHAGroupLocalPriority=axHAGroupLocalPriority, axGlobalAppPacketDrop=axGlobalAppPacketDrop, axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort=axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort, axAppGlobalTotalL7Requests=axAppGlobalTotalL7Requests, axSyslogTrapObjects=axSyslogTrapObjects, axNetStatUDPsNoSLB=axNetStatUDPsNoSLB, axPersistentStatsSIPPersistOK=axPersistentStatsSIPPersistOK, axSwitchStatUnknownProtoDrop=axSwitchStatUnknownProtoDrop, axAppNotifications=axAppNotifications, axTcpProxyStatTCPSYNSNTState=axTcpProxyStatTCPSYNSNTState, axSyslogMsg=axSyslogMsg, axNetStatEntryServerSSLSIDNotFound=axNetStatEntryServerSSLSIDNotFound, axSessionGlobalStatOther=axSessionGlobalStatOther, axServiceGroupStatName=axServiceGroupStatName, axSysCpuTable=axSysCpuTable, axNetStatUDPRcv=axNetStatUDPRcv, axMgmt=axMgmt, axServerStatEntry=axServerStatEntry, axServiceGroupMemberStatEntry=axServiceGroupMemberStatEntry, axServerStatServerStatus=axServerStatServerStatus, axNetStatConnRateLimitResets=axNetStatConnRateLimitResets, axServerConnRateLimit=axServerConnRateLimit, axServerStatTable=axServerStatTable, axServerDown=axServerDown, axHATimeoutRetry=axHATimeoutRetry, axServiceGroupMemberStatTotalL7Reqs=axServiceGroupMemberStatTotalL7Reqs, axAppGlobalSystemResourceIndex=axAppGlobalSystemResourceIndex, axNotificationSLBPort=axNotificationSLBPort, axSyslogTrapPrefix=axSyslogTrapPrefix, axNotificationSLBServer=axNotificationSLBServer, axNetStatTCPOutRSTACKattack=axNetStatTCPOutRSTACKattack, axInterfaceStatCollisions=axInterfaceStatCollisions, axTcpProxyStatSocketAlloc=axTcpProxyStatSocketAlloc, axNetStatEntryTCPOutRSTNoSYN=axNetStatEntryTCPOutRSTNoSYN)
mibBuilder.exportSymbols("A10-AX-MIB", axSwitchStatsUnknownProtoDrop=axSwitchStatsUnknownProtoDrop, axFastHttpProxyStatTotalCRst=axFastHttpProxyStatTotalCRst, axHttpProxyStatServerRst=axHttpProxyStatServerRst, axServerPortStatPktsOut=axServerPortStatPktsOut, axFtpStatTotalCtrlSession=axFtpStatTotalCtrlSession, axSysUpperPowerSupplyStatus=axSysUpperPowerSupplyStatus, axSwitchStatsAnomAllFragDrop=axSwitchStatsAnomAllFragDrop, axPersistentStatCookiePersistFail=axPersistentStatCookiePersistFail, axTcpProxyStatTCPSYNRCVState=axTcpProxyStatTCPSYNRCVState, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr, axServiceGroupMemberAddrType=axServiceGroupMemberAddrType, axNetStatClientSSLSIDMatch=axNetStatClientSSLSIDMatch, axSysHwFan1Speed=axSysHwFan1Speed, axNetStatInbandHMRetry=axNetStatInbandHMRetry, axNetStatSessionsAgingOut=axNetStatSessionsAgingOut, axServiceDown=axServiceDown, axInterfaceStatIndex=axInterfaceStatIndex, axTcpProxyStatRstSent=axTcpProxyStatRstSent, axServerPortNumInServiceGroupMember=axServerPortNumInServiceGroupMember, axHAFloatingIP=axHAFloatingIP, axAppGlobals=axAppGlobals, axNotifications=axNotifications, axServiceUp=axServiceUp, axHAGroupCount=axHAGroupCount, axIpNatLsnTrafficEndpointIndepMapMatch=axIpNatLsnTrafficEndpointIndepMapMatch, axHAFloatingIPCount=axHAFloatingIPCount, axServerStatServerTotalSuccL7Reqs=axServerStatServerTotalSuccL7Reqs, axServerPortNumInServiceGroupMemberStat=axServerPortNumInServiceGroupMemberStat, axNetStatTCPSynRcv=axNetStatTCPSynRcv, axLogBufferSize=axLogBufferSize, axIpNatLsnTop5GlobalPoolIpAddr=axIpNatLsnTop5GlobalPoolIpAddr, axInterfaceMediaActiveSpeed=axInterfaceMediaActiveSpeed, axConnReuseStatActivePersist=axConnReuseStatActivePersist, axSwitchStatsAnomAnyDrop=axSwitchStatsAnomAnyDrop, axIpNatLsnTop5PrivateIpAddrGlobalIpAddr=axIpNatLsnTop5PrivateIpAddrGlobalIpAddr, axSmtpProxyStatEntry=axSmtpProxyStatEntry, axIpNatStatsDynamicMappingAccessListID=axIpNatStatsDynamicMappingAccessListID, axIpNatLsnTop5UserPrivateIpAddrTotSessions=axIpNatLsnTop5UserPrivateIpAddrTotSessions, axVirtualServerPortEnabled=axVirtualServerPortEnabled, axHATimeoutInterval=axHATimeoutInterval, axTcpProxyStatTotalInTCPPkt=axTcpProxyStatTotalInTCPPkt, axPersistentStatSIPPersistOK=axPersistentStatSIPPersistOK, axInterfaceMtu=axInterfaceMtu, axVirtualServerStatAddress=axVirtualServerStatAddress, axServerConnLimit=axServerConnLimit, axFastHttpProxyStatTotalSvrReSel=axFastHttpProxyStatTotalSvrReSel, axIpNatLsnGobalStats=axIpNatLsnGobalStats, axSslStatSSLFailedCAVfy=axSslStatSSLFailedCAVfy, axNetStatEntryServerSSLSIDReset=axNetStatEntryServerSSLSIDReset, axHttpProxyStatTotalFwdDataReqErr=axHttpProxyStatTotalFwdDataReqErr, axSwitchStatAnomAnyDrop=axSwitchStatAnomAnyDrop, axServerMonitorState=axServerMonitorState, axVlanCfgMemberEntry=axVlanCfgMemberEntry, axServerAddress=axServerAddress, axVlans=axVlans, axServerStatPortNum=axServerStatPortNum, axVirtualServerPortHTTPTemplate=axVirtualServerPortHTTPTemplate, axHAGroupPeerPriority=axHAGroupPeerPriority, axInterfaceStatPktsIn=axInterfaceStatPktsIn, axSwitchStatL4Process=axSwitchStatL4Process, axLogSyslogHostIndex=axLogSyslogHostIndex, axFastHttpProxyStatTotalFwdReqErr=axFastHttpProxyStatTotalFwdReqErr, axIpNatLsnTrafficEndpointIndepFilterMatch=axIpNatLsnTrafficEndpointIndepFilterMatch, axServerStatServerBytesOut=axServerStatServerBytesOut, axAppGlobalStats=axAppGlobalStats, axConnReuseStatTotalDelayedUNBound=axConnReuseStatTotalDelayedUNBound, axSwitchStatsAnomTCPNoFragDrop=axSwitchStatsAnomTCPNoFragDrop, axFastHttpProxyStatTotalNoProxy=axFastHttpProxyStatTotalNoProxy, axNotificationCurrentUsage=axNotificationCurrentUsage, axSwitchStatsL4Process=axSwitchStatsL4Process, axHAGroupLocalStatus=axHAGroupLocalStatus, axVirtualServerStatCurConns=axVirtualServerStatCurConns, axSessionGlobalStatTCPSynHalfOpen=axSessionGlobalStatTCPSynHalfOpen, axTcpProxyStatTCPCloseWState=axTcpProxyStatTCPCloseWState, axIpNatStatsDynamicMappingAllocAddresses=axIpNatStatsDynamicMappingAllocAddresses, axSessionGlobalStatFreeBufferCount=axSessionGlobalStatFreeBufferCount, axFastHttpProxyStatTotalReqErr=axFastHttpProxyStatTotalReqErr, axFanStatus=axFanStatus, axNetStatNoVportDrop=axNetStatNoVportDrop, axPersistentStatCpuIndex=axPersistentStatCpuIndex, axIpNatLsnTrafficFailsInFullConeSessionCreation=axIpNatLsnTrafficFailsInFullConeSessionCreation, axHAConfigEnabled=axHAConfigEnabled, axTcpProxyStatTotalPassiveOpenConn=axTcpProxyStatTotalPassiveOpenConn, axNetStatEntryTCPOutRSTProxy=axNetStatEntryTCPOutRSTProxy, axSwitchStatAnomSYNFragDrop=axSwitchStatAnomSYNFragDrop, axNetStatSSLSIDPersistSucc=axNetStatSSLSIDPersistSucc, axNetStatTCPSYNCookieSntFail=axNetStatTCPSYNCookieSntFail, axServerPortType=axServerPortType, axHttpProxyStatTotalConn=axHttpProxyStatTotalConn, axNetStatEntryInbandHMRetry=axNetStatEntryInbandHMRetry, axTcpProxyStatTCPFINW2State=axTcpProxyStatTCPFINW2State, axConnReuseStatCpuIndex=axConnReuseStatCpuIndex, axSmtpProxyStatReqPktOutOrder=axSmtpProxyStatReqPktOutOrder, axTcpProxyStatTotalTxBuf=axTcpProxyStatTotalTxBuf, axVirtualServerPortRTSPTemplate=axVirtualServerPortRTSPTemplate, axPersistentStatsSIPPersistFail=axPersistentStatsSIPPersistFail, axVirtualServerStatPortType=axVirtualServerStatPortType, axPersistentStatSSLSIDPersistFail=axPersistentStatSSLSIDPersistFail, axAppGlobalTotalNewL4Connections=axAppGlobalTotalNewL4Connections, axNetStatTable=axNetStatTable, axNetworkNotifications=axNetworkNotifications, axInterfaceAdminStatus=axInterfaceAdminStatus, axVirtualServerPortNum=axVirtualServerPortNum, axInterfaceStatBytesIn=axInterfaceStatBytesIn, axSysLowerPowerSupplyStatus=axSysLowerPowerSupplyStatus, axNotification=axNotification, axHttpProxyStats=axHttpProxyStats, axSwitchStatL3IPForward=axSwitchStatL3IPForward, axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry=axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry, axFastHttpProxyStatTotalSvrSelErr=axFastHttpProxyStatTotalSvrSelErr, axNetStatEntryCreateSSLSIDSucc=axNetStatEntryCreateSSLSIDSucc, axSwitchStatIPv4NoRouteDrop=axSwitchStatIPv4NoRouteDrop, axTcpProxyStatTCPListenState=axTcpProxyStatTCPListenState, axConnReuseStatTotalActivePersist=axConnReuseStatTotalActivePersist, axNetStatTCPSYNCookieSent=axNetStatTCPSYNCookieSent, axSwitchStatL2Forward=axSwitchStatL2Forward, axSessionGlobalStatConnSMPFree=axSessionGlobalStatConnSMPFree, axIpNatLsnTop5PrivateIpAddrInIcmpPort=axIpNatLsnTop5PrivateIpAddrInIcmpPort, axPersistentStatsCookiePersistOK=axPersistentStatsCookiePersistOK, axFastHttpProxyStatServerReSel=axFastHttpProxyStatServerReSel, axIpNatStatsDynamicMappingPoolName=axIpNatStatsDynamicMappingPoolName, axNotificationMsg=axNotificationMsg, axNetStatTCPSynRecv=axNetStatTCPSynRecv, axServerEntry=axServerEntry, axServerPortStatCurConns=axServerPortStatCurConns, axInterfaceMediaMaxSpeed=axInterfaceMediaMaxSpeed, axSessionGlobalStatTCPEstablished=axSessionGlobalStatTCPEstablished, axSwitchStatAnomAllFragDrop=axSwitchStatAnomAllFragDrop, axInterfaceStatBytesOut=axInterfaceStatBytesOut, axSysDiskFreeSpace=axSysDiskFreeSpace, axServerEnabledState=axServerEnabledState, axServerPortStatusInServiceGroupMember=axServerPortStatusInServiceGroupMember, axFan2Failure=axFan2Failure, axPersistentStatPersistCookieNotFound=axPersistentStatPersistCookieNotFound, axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions=axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions, axIpNatLsnTotalFullConeSessions=axIpNatLsnTotalFullConeSessions, axLogEmailAddr=axLogEmailAddr, axNetStatCpuIndex=axNetStatCpuIndex, axVirtualServerPortTable=axVirtualServerPortTable, axSecondaryHardDiskFailure=axSecondaryHardDiskFailure, axIpNatStatsIntfInsideOutside=axIpNatStatsIntfInsideOutside, axSmtpProxyStatFwdReqFail=axSmtpProxyStatFwdReqFail, axNetStatNoSynPktDrop=axNetStatNoSynPktDrop, axTcpProxyStats=axTcpProxyStats, axConnReuseStatTotalBind=axConnReuseStatTotalBind, axTcpProxyStatConnAttempFail=axTcpProxyStatConnAttempFail, axVirtualServerPortPolicyTemplate=axVirtualServerPortPolicyTemplate, axVirtualServerPortReachConnLimit=axVirtualServerPortReachConnLimit, axAppGlobalSystemResourceName=axAppGlobalSystemResourceName, axSwitchStatIncorrectLenDrop=axSwitchStatIncorrectLenDrop, axLogging=axLogging, axNetStatUDPNoSLB=axNetStatUDPNoSLB, axFastHttpProxyStatNoTupleErr=axFastHttpProxyStatNoTupleErr, axNetStatSourceNATFail=axNetStatSourceNATFail, axNetStatSSLSIDPersistFail=axNetStatSSLSIDPersistFail, axNetStatEntryClientSSLSIDNotMatch=axNetStatEntryClientSSLSIDNotMatch, axSmtpProxyStatsParseReqFail=axSmtpProxyStatsParseReqFail, axNetStatEntryClientSSLSIDNotFound=axNetStatEntryClientSSLSIDNotFound, axVlanCfgTable=axVlanCfgTable, axNetStatEntryConnRateLimitResets=axNetStatEntryConnRateLimitResets, axVirtualServerStat=axVirtualServerStat, axVirtualServerPortRamCacheTemplate=axVirtualServerPortRamCacheTemplate, axHttpProxyStatTotalProxyConns=axHttpProxyStatTotalProxyConns, axServerPortMonitorState=axServerPortMonitorState, axNetStatTCPNoSLB=axNetStatTCPNoSLB, axSmtpProxyStatsSmtpRequests=axSmtpProxyStatsSmtpRequests, axTcpProxyStatTotalRstSent=axTcpProxyStatTotalRstSent, axTcpProxyStatInputErr=axTcpProxyStatInputErr, axFtpStatOutConnCtrl=axFtpStatOutConnCtrl, axIpNatLsnTop5GlobalPoolIpAddrTotUsers=axIpNatLsnTop5GlobalPoolIpAddrTotUsers, axIpNatLsnTrafficFailsInUserQuotasCreation=axIpNatLsnTrafficFailsInUserQuotasCreation, axConnReuseStatTotalLongResponse=axConnReuseStatTotalLongResponse, axNetStatInbandHMReassign=axNetStatInbandHMReassign, axInterfaceStat=axInterfaceStat, axSwitchStatsAnomTCPSynFinDrop=axSwitchStatsAnomTCPSynFinDrop, axIpNatLsnTrafficUserQuotasFreed=axIpNatLsnTrafficUserQuotasFreed, axNetStataFlexDrops=axNetStataFlexDrops, axAppGlobalAllowedCurrentValue=axAppGlobalAllowedCurrentValue, axHAFloatingIPEntry=axHAFloatingIPEntry, axVlanRouterInterface=axVlanRouterInterface, axIpNatLsnTop5UserPrivateIpAddrInTcp=axIpNatLsnTop5UserPrivateIpAddrInTcp, axSwitchStatsIPFragReasmOk=axSwitchStatsIPFragReasmOk, axSslStatTotalSSLConn=axSslStatTotalSSLConn, axNetStatEntrySSLSIDPersistSucc=axNetStatEntrySSLSIDPersistSucc, axSmtpProxyStatsFwdReqDataFail=axSmtpProxyStatsFwdReqDataFail, axNetStat2UDPReceive=axNetStat2UDPReceive, axFastHttpProxyStatTotalProxyConns=axFastHttpProxyStatTotalProxyConns, axTcpProxyStatTotalOutPkt=axTcpProxyStatTotalOutPkt, axServiceGroupMemberStatPersistConns=axServiceGroupMemberStatPersistConns, axNetStatEntryTCPOutRSTStaleSess=axNetStatEntryTCPOutRSTStaleSess, axNotificationConfiguredThreshold=axNotificationConfiguredThreshold, axPersistentStatsUrlHashPersistFail=axPersistentStatsUrlHashPersistFail, axHttpProxyStatTotalFwdReqErr=axHttpProxyStatTotalFwdReqErr, axSysCpuNumber=axSysCpuNumber, axGlobalAppBuffer=axGlobalAppBuffer, axHAGroupStatusTable=axHAGroupStatusTable, axIpNatLsnTrafficUserQuotasCreated=axIpNatLsnTrafficUserQuotasCreated, axServer=axServer, axTcpProxyStatTotalReXmitPkt=axTcpProxyStatTotalReXmitPkt, axIpNatLsnTop5PrivateIpAddrTotSessionEntry=axIpNatLsnTop5PrivateIpAddrTotSessionEntry, axSwitchStatAnomLanAttackDrop=axSwitchStatAnomLanAttackDrop, axFastHttpProxyStatFwdReqDataFail=axFastHttpProxyStatFwdReqDataFail, axServerPortTable=axServerPortTable, axSysHwFan2Speed=axSysHwFan2Speed, axServerStatServerTotalConns=axServerStatServerTotalConns, axSslProxyStatsSessNotFound=axSslProxyStatsSessNotFound, axIpNatLsnTop5GlobalPoolIpAddrInTcp=axIpNatLsnTop5GlobalPoolIpAddrInTcp, axSysHwInfo=axSysHwInfo, axNetStatClientSSLSIDNotFound=axNetStatClientSSLSIDNotFound, axVirtualServerStatDisplayStatus=axVirtualServerStatDisplayStatus, axFtpStatALGPktReXmit=axFtpStatALGPktReXmit, axVlanCfg=axVlanCfg, axSwitchStatsL3IPv6Forward=axSwitchStatsL3IPv6Forward, axIpNatLsnTop5UserPrivateIpAddr=axIpNatLsnTop5UserPrivateIpAddr, axSmtpProxyStatsSmtpReqSuccs=axSmtpProxyStatsSmtpReqSuccs, axSysCpuUsageValue=axSysCpuUsageValue, axHttpProxyStatTotalPreMatureClose=axHttpProxyStatTotalPreMatureClose, axNetStatNoSYNPktDropACK=axNetStatNoSYNPktDropACK, axServiceGroupMemberStatPktsIn=axServiceGroupMemberStatPktsIn, axServiceGroupName=axServiceGroupName, axVirtualServerPortClientSSLTemplate=axVirtualServerPortClientSSLTemplate, axVirtualServer=axVirtualServer, axServerStatServerPktsOut=axServerStatServerPktsOut, axHttpProxyStatTotalSvrReSel=axHttpProxyStatTotalSvrReSel, axSwitchStatAnomIPOptionDrop=axSwitchStatAnomIPOptionDrop, axSysVersion=axSysVersion, axSwitchStatsARPRespRcv=axSwitchStatsARPRespRcv, axServiceGroupStatPktsIn=axServiceGroupStatPktsIn, axIpNatStatsGlobalMisses=axIpNatStatsGlobalMisses, axInterfaceTable=axInterfaceTable, axServerStatName=axServerStatName, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp, axSslStatSSLModNum=axSslStatSSLModNum, axTcpProxyStatTCPCloseState=axTcpProxyStatTCPCloseState, axHttpProxyStatReqReTran=axHttpProxyStatReqReTran, axSysCpuIndex=axSysCpuIndex, axTCPProxyStatTable=axTCPProxyStatTable, axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions, axHttpProxyStatTable=axHttpProxyStatTable, axVirtualServerPort=axVirtualServerPort, axServerNameInServiceGroupMemberStat=axServerNameInServiceGroupMemberStat, axNetStatCreateSSLSIDFail=axNetStatCreateSSLSIDFail, axServerStatPortType=axServerStatPortType, axSysMemory=axSysMemory, PYSNMP_MODULE_ID=axMgmt, axSmtpProxyStatsFwdReqFail=axSmtpProxyStatsFwdReqFail, axSwitchStatAnomTCPNoFragDrop=axSwitchStatAnomTCPNoFragDrop, axServerCount=axServerCount, axInterfaceStatTable=axInterfaceStatTable, axVirtualServerPortStatTotalCurrL7Reqs=axVirtualServerPortStatTotalCurrL7Reqs, axSwitchStatIPFragRcv=axSwitchStatIPFragRcv, axServiceGroupStatPersistConns=axServiceGroupStatPersistConns, axHAGroupID=axHAGroupID, axNetStatEntryNoSYNPktDropRST=axNetStatEntryNoSYNPktDropRST)
mibBuilder.exportSymbols("A10-AX-MIB", axHAStandby=axHAStandby, axNotificationDropEventReason=axNotificationDropEventReason, axNetStats=axNetStats, axSysCpuUsageValueAtPeriod=axSysCpuUsageValueAtPeriod, axSwitchStatsIPFragRcv=axSwitchStatsIPFragRcv, axSysFanStatusTable=axSysFanStatusTable, axVirtualServerPortStatTotalSuccL7Reqs=axVirtualServerPortStatTotalSuccL7Reqs, axVirtualServerStatName=axVirtualServerStatName, axSwitchStatCpuIndex=axSwitchStatCpuIndex, axSwitchStatsSRCPortSuppress=axSwitchStatsSRCPortSuppress, axSystemStart=axSystemStart, axNetStatEntryTCPOutRSTL4Proxy=axNetStatEntryTCPOutRSTL4Proxy, axSslProxyStatsNoRoute=axSslProxyStatsNoRoute, axIpNatLsnTop5UserPrivateIpAddrTotNumSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumSessions, axServerNameInPort=axServerNameInPort, axNetStatTCPOutRSTProxy=axNetStatTCPOutRSTProxy, axNetStatSessionAgingOut=axNetStatSessionAgingOut, axApp=axApp, axSwitchStatVLANFlood=axSwitchStatVLANFlood, axHttpProxyStatServerReSel=axHttpProxyStatServerReSel, axSwitchStatsARPReqRcv=axSwitchStatsARPReqRcv, axSslProxyStatsClientErr=axSslProxyStatsClientErr, axTCPProxyStatEntry=axTCPProxyStatEntry, axAppGlobalAllowedMinValue=axAppGlobalAllowedMinValue, axNetStatTCPSYNCookieSnt=axNetStatTCPSYNCookieSnt, axNetStatIPOutNoRoute=axNetStatIPOutNoRoute, axSystemPowerSupplyFailure=axSystemPowerSupplyFailure, axVirtualServerPortPersistTemplateType=axVirtualServerPortPersistTemplateType, axSysCpuEntry=axSysCpuEntry, axSysCpuUsagePeriodIndex=axSysCpuUsagePeriodIndex, axInterfaceStatErrorsIn=axInterfaceStatErrorsIn, axIpNatStatsInsideOutsideIntfIndex=axIpNatStatsInsideOutsideIntfIndex, axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts=axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts, axSslProxyStatsServerErr=axSslProxyStatsServerErr, axNotificationTrunkID=axNotificationTrunkID, axNetStatEntryNoSYNPktDropACK=axNetStatEntryNoSYNPktDropACK, axSysAverageControlCpuUsage=axSysAverageControlCpuUsage, axServerPortStatTotalConns=axServerPortStatTotalConns, axLogSyslogHostTable=axLogSyslogHostTable, axServiceGroupStatTotalCurrL7Reqs=axServiceGroupStatTotalCurrL7Reqs, axSessionGlobalStatNonTcpUdpIPSession=axSessionGlobalStatNonTcpUdpIPSession, axInterfaceStatMcastOut=axInterfaceStatMcastOut, axNetStatTCPOutRst=axNetStatTCPOutRst, axFastHttpProxyStatTotalReq=axFastHttpProxyStatTotalReq, axNetStatEntryTCPOutRSTAFleX=axNetStatEntryTCPOutRSTAFleX, axGlobalTotalAppPacketDrop=axGlobalTotalAppPacketDrop, axIpNatLsnTop5PrivateIpAddrTotUdpPortTable=axIpNatLsnTop5PrivateIpAddrTotUdpPortTable, axNetStatConnLimitReset=axNetStatConnLimitReset, axSwitchStatsIPFragOverlap=axSwitchStatsIPFragOverlap, axSessionGlobalStatReverseNATTCP=axSessionGlobalStatReverseNATTCP, axSslProxyStats=axSslProxyStats, axNetStatTCPOutReset=axNetStatTCPOutReset, axIpNatLsnTop5PrivateIpAddr=axIpNatLsnTop5PrivateIpAddr, axHttpProxyStatServerPreMatureClose=axHttpProxyStatServerPreMatureClose, axVirtualServerDisplayStatus=axVirtualServerDisplayStatus, axServerPortStatEntry=axServerPortStatEntry, axNetStatProxyNoSockDrops=axNetStatProxyNoSockDrops, axSysInfo=axSysInfo, axServerStatAddrInPort=axServerStatAddrInPort, axVirtualServerStatPortDisplayStatus=axVirtualServerStatPortDisplayStatus, axInterfaceStatPktsOut=axInterfaceStatPktsOut, axFtpStats=axFtpStats, axVirtualServerTable=axVirtualServerTable, axFastHttpProxyStatReqPktOutOrder=axFastHttpProxyStatReqPktOutOrder, axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions=axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions, axServiceGroupMemberStat=axServiceGroupMemberStat, axSyslogTrap=axSyslogTrap, axNotificationPortThreshold=axNotificationPortThreshold, axVirtualServerReachConnLimit=axVirtualServerReachConnLimit, axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable, axServiceGroupEntry=axServiceGroupEntry, axNetStatEntrySSLSIDPersistFail=axNetStatEntrySSLSIDPersistFail, axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry, axSmtpProxyStatSNATFail=axSmtpProxyStatSNATFail, axHttpProxyStatTotalSvrSelErr=axHttpProxyStatTotalSvrSelErr, axSwitchStatsIPTCPFragRcv=axSwitchStatsIPTCPFragRcv, axServiceGroupStatPktsOut=axServiceGroupStatPktsOut, axServiceGroupDisplayStatus=axServiceGroupDisplayStatus, axNetStatConnLimitDrops=axNetStatConnLimitDrops, axInterfaceMediaMaxDuplex=axInterfaceMediaMaxDuplex, axSslStatTable=axSslStatTable, axNotificationVirtualServerPort=axNotificationVirtualServerPort, axSmtpProxyStatsNoTupleError=axSmtpProxyStatsNoTupleError, axInterfaceStatEntry=axInterfaceStatEntry, axServerStatServerPersistConns=axServerStatServerPersistConns, axSmtpProxyStatTable=axSmtpProxyStatTable, axHttpProxyStatEntry=axHttpProxyStatEntry, axHAFloatingIPAddress=axHAFloatingIPAddress, axSmtpProxyStatServerSelFail=axSmtpProxyStatServerSelFail, axPersistentStatsSSLSIDPersistOK=axPersistentStatsSSLSIDPersistOK, axServiceConnRateLimit=axServiceConnRateLimit, axServerStatServerBytesIn=axServerStatServerBytesIn, axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort=axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort, axTcpProxyStatTotalCurrEstConn=axTcpProxyStatTotalCurrEstConn, axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable=axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable, axFastHttpProxyStatTotalSNATErr=axFastHttpProxyStatTotalSNATErr, axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry=axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry, axIpNatLsnTrafficFullConeSessionCreated=axIpNatLsnTrafficFullConeSessionCreated, axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable=axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable, axVirtualServerPortTemplate=axVirtualServerPortTemplate, axServiceGroupMemberStatBytesIn=axServiceGroupMemberStatBytesIn, axNotificationSLBCurConns=axNotificationSLBCurConns, axSessionGlobalStatConnCount=axSessionGlobalStatConnCount, axFastHttpProxyStatEntry=axFastHttpProxyStatEntry, axSwitchStatProtoDownDrop=axSwitchStatProtoDownDrop, axVirtualServerPortStatPktsIn=axVirtualServerPortStatPktsIn, axIpNatStatsIntfInsideOutsideTable=axIpNatStatsIntfInsideOutsideTable, axSwitchStatsL3IPForward=axSwitchStatsL3IPForward, axNetStatEntryServerSSLSIDNotMatch=axNetStatEntryServerSSLSIDNotMatch, axNotificationConnLimit=axNotificationConnLimit, axNetStatServerSelFail=axNetStatServerSelFail, axInterfaceFlowCtrlOperStatus=axInterfaceFlowCtrlOperStatus, axGlobalTotalL4Session=axGlobalTotalL4Session, axServiceGroupMemberStatTable=axServiceGroupMemberStatTable, axServiceGroupCount=axServiceGroupCount, axVirtualServerPortStatAddress=axVirtualServerPortStatAddress, axIpNatLsnTotalUserQuotaSessions=axIpNatLsnTotalUserQuotaSessions, axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry=axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry, axLogSyslogPort=axLogSyslogPort, axSwitchStatSRCPortSuppress=axSwitchStatSRCPortSuppress, axInterfaceStatDropsIn=axInterfaceStatDropsIn, axHttpProxyStatParseReqFail=axHttpProxyStatParseReqFail, axVirtualServerPortTCPTemplate=axVirtualServerPortTCPTemplate, axAppGlobalTotalCurrentConnections=axAppGlobalTotalCurrentConnections, axSystemDataCpuHigh=axSystemDataCpuHigh, axSwitchStatIPFragReasmOk=axSwitchStatIPFragReasmOk, axNetStatServerSSLSIDNotFound=axNetStatServerSSLSIDNotFound, axHAPreemptStatusEnabled=axHAPreemptStatusEnabled, axSysCpuIndexInUsage=axSysCpuIndexInUsage, axPersistentStatsSSLSIDPersistFail=axPersistentStatsSSLSIDPersistFail, axSslProxyStatsTotalProxyConns=axSslProxyStatsTotalProxyConns, axVirtualServerStatTotalCurrL7Reqs=axVirtualServerStatTotalCurrL7Reqs, axTcpProxyStatTimeWstate=axTcpProxyStatTimeWstate, axNetStatSourceNATFails=axNetStatSourceNATFails, axFtpStatTotalDataSession=axFtpStatTotalDataSession, axServerPortWeight=axServerPortWeight, axVirtualServerPortUDPTemplate=axVirtualServerPortUDPTemplate, axSmtpProxyStatsCurrProxyConns=axSmtpProxyStatsCurrProxyConns, axSwitchStatsIPv4NoRouteDrop=axSwitchStatsIPv4NoRouteDrop, axFastHttpProxyStatTotalSRst=axFastHttpProxyStatTotalSRst, axSslStatEntry=axSslStatEntry, axServerPortNum=axServerPortNum, axSysDisk=axSysDisk, axServiceGroupStat=axServiceGroupStat, axConnReuseStatTotalEstablished=axConnReuseStatTotalEstablished, axNetStatTCPReceive=axNetStatTCPReceive, axIpNatStatsDynamicMapping=axIpNatStatsDynamicMapping, axVirtualServerStatEntry=axVirtualServerStatEntry, axSysCpuUsageTable=axSysCpuUsageTable, axPersistentStatUrlHashPersistOKPri=axPersistentStatUrlHashPersistOKPri, axPersistentStatTable=axPersistentStatTable, axVirtualServerStatTotalL7Reqs=axVirtualServerStatTotalL7Reqs, axServiceGroupTable=axServiceGroupTable, axHttpProxyStatCpuIndex=axHttpProxyStatCpuIndex, axIpNatLsnTop5PrivateIpAddrTotTcpPorts=axIpNatLsnTop5PrivateIpAddrTotTcpPorts, axIpNatStatsDynamicMappingEntry=axIpNatStatsDynamicMappingEntry, axServiceGroupMemberStatTotalCurrL7Reqs=axServiceGroupMemberStatTotalCurrL7Reqs, axIpNatStatsDynamicMappingTable=axIpNatStatsDynamicMappingTable, axIpNatStatsIntfInsideOutsideEntry=axIpNatStatsIntfInsideOutsideEntry, axIpNatLsnTop5PrivateIpAddrTotUdpPorts=axIpNatLsnTop5PrivateIpAddrTotUdpPorts, axSwitchStatsIPFragOverlapDrop=axSwitchStatsIPFragOverlapDrop, axLogSyslogPri=axLogSyslogPri, axSslStatSSLHWRingFull=axSslStatSSLHWRingFull, axVirtualServerName=axVirtualServerName, axServerStatCount=axServerStatCount, axVirtualServerStatPersistConns=axVirtualServerStatPersistConns, axVirtualServerPortStatBytesOut=axVirtualServerPortStatBytesOut, axSmtpProxyStatsSvrPrematureClose=axSmtpProxyStatsSvrPrematureClose, axServerPortConnLimit=axServerPortConnLimit, axVirtualServerPortHaGroupID=axVirtualServerPortHaGroupID, axSslStatEnableCryptoEngine=axSslStatEnableCryptoEngine, axNetStatServerSSLSIDMatch=axNetStatServerSSLSIDMatch, axFastHttpProxyStatServerRst=axFastHttpProxyStatServerRst, axServerStatAddress=axServerStatAddress, axConnReuseStatTotalTerm=axConnReuseStatTotalTerm, axNetStatNoSYNPktDropRST=axNetStatNoSYNPktDropRST, axVirtualServerPortStatTotalL7Reqs=axVirtualServerPortStatTotalL7Reqs, axSysSerialNumber=axSysSerialNumber, axServerStatServerPktsIn=axServerStatServerPktsIn, axSysAverageCpuUsage=axSysAverageCpuUsage, axServiceGroupNameInMember=axServiceGroupNameInMember, axHASetID=axHASetID, axVirtualServerStatPortNum=axVirtualServerStatPortNum, axSslStatModuleIndex=axSslStatModuleIndex, axHAActiveActive=axHAActiveActive, axServiceGroupMember=axServiceGroupMember, axVlanMemberVlanId=axVlanMemberVlanId, axIpNatLsnTrafficIcmpUserQuotasExceeded=axIpNatLsnTrafficIcmpUserQuotasExceeded, axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry, axIpNatLsnTop5UserPrivateIpAddrTotSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotSessionTable, axIpNatLsnTop5PrivateIpAddrTotNumSessions=axIpNatLsnTop5PrivateIpAddrTotNumSessions, axFastHttpProxyStatTotalPreMatureClose=axFastHttpProxyStatTotalPreMatureClose, axIpNatLsnTrafficUdpUserQuotasExceeded=axIpNatLsnTrafficUdpUserQuotasExceeded, axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry=axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry, axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts, axFastHttpProxyStatCpuIndex=axFastHttpProxyStatCpuIndex, axNetStatServerSSLSIDNotMatch=axNetStatServerSSLSIDNotMatch, axAppGlobalSetting=axAppGlobalSetting, axServiceGroupStatDisplayStatus=axServiceGroupStatDisplayStatus, axNetStatEntryServerSSLSIDMatch=axNetStatEntryServerSSLSIDMatch, axSwitchStatsTTLExceedDrop=axSwitchStatsTTLExceedDrop, axSwitchStatFwdKernel=axSwitchStatFwdKernel, axSmtpProxyStatsServerSelFail=axSmtpProxyStatsServerSelFail, axHttpProxyStatFwdReqDataFail=axHttpProxyStatFwdReqDataFail, axFastHttpProxyStatTotalReqPktOutOrder=axFastHttpProxyStatTotalReqPktOutOrder, axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable, axSysMemoryTotal=axSysMemoryTotal, axServerPortStatTotalCurrL7Reqs=axServerPortStatTotalCurrL7Reqs, axTcpProxyStatTCPClosingState=axTcpProxyStatTCPClosingState, axIpNatLsnTrafficHairpinSessionCreated=axIpNatLsnTrafficHairpinSessionCreated, axFastHttpProxyStatServerSelFail=axFastHttpProxyStatServerSelFail, axSwitchStatsAnomSYNFragDrop=axSwitchStatsAnomSYNFragDrop, axIpNatLsnTop5PrivateIpAddrInUdpPort=axIpNatLsnTop5PrivateIpAddrInUdpPort, axVirtualServerStatPktsOut=axVirtualServerStatPktsOut, axSwitchStatIPTCPFragRcv=axSwitchStatIPTCPFragRcv, axSwitchStatAnomPingDeathDrop=axSwitchStatAnomPingDeathDrop, axLogEmailPri=axLogEmailPri, axVirtualServerStatStatus=axVirtualServerStatStatus, axTcpProxyStatRstRvdEstConn=axTcpProxyStatRstRvdEstConn, axServerPortEnabledState=axServerPortEnabledState, axConnReuseStatEntry=axConnReuseStatEntry, axSmtpProxyStatsNoProxyError=axSmtpProxyStatsNoProxyError, axSwitchStatARPReqRcv=axSwitchStatARPReqRcv, axVirtualServerAddress=axVirtualServerAddress, axServerPortStatPktsIn=axServerPortStatPktsIn, axConnReuseStatTotalBound=axConnReuseStatTotalBound, axSwitchStats=axSwitchStats, axHAActive=axHAActive, axFastHttpProxyStatFwdReqFail=axFastHttpProxyStatFwdReqFail, axSslStatSSLNoHWContextMem=axSslStatSSLNoHWContextMem, axSysCpuUsage=axSysCpuUsage, axVirtualServerStatTotalSuccL7Reqs=axVirtualServerStatTotalSuccL7Reqs, axSmtpProxyStatNoTupleError=axSmtpProxyStatNoTupleError, axServiceGroupStatTotConns=axServiceGroupStatTotConns, axVirtualServerPortStat=axVirtualServerPortStat, axVirtualServerEnabled=axVirtualServerEnabled, axServiceGroupMemberStatCurConns=axServiceGroupMemberStatCurConns, axPersistentStatSIPPersistFail=axPersistentStatSIPPersistFail, axLogMonitorPri=axLogMonitorPri, axSwitchStatsProtoDownDrop=axSwitchStatsProtoDownDrop, axSwitchStatsVLANFlood=axSwitchStatsVLANFlood, axFtpStatOutConnData=axFtpStatOutConnData, axServerPortStatTotalL7Reqs=axServerPortStatTotalL7Reqs, axSystemRelieveDropPacketEvent=axSystemRelieveDropPacketEvent, axServerPortStatTotalSuccL7Reqs=axServerPortStatTotalSuccL7Reqs, axVirtualServerEntry=axVirtualServerEntry, axServiceGroupMemberStatTotConns=axServiceGroupMemberStatTotConns, axServerPortHealthMonitor=axServerPortHealthMonitor, axHAGroup=axHAGroup, axHttpProxyStatTotalSuccReq=axHttpProxyStatTotalSuccReq, axFastHttpProxyStats=axFastHttpProxyStats, axServiceGroupMemberStatBytesOut=axServiceGroupMemberStatBytesOut, axConnReuseStatTotalEst=axConnReuseStatTotalEst, axInterfaceFlowCtrlAdminStatus=axInterfaceFlowCtrlAdminStatus)
mibBuilder.exportSymbols("A10-AX-MIB", axAppGlobalTotalNewIPNatConnections=axAppGlobalTotalNewIPNatConnections, axSystemDropPacketEvent=axSystemDropPacketEvent, axInterfaceEntry=axInterfaceEntry, axVirtualServerPortType=axVirtualServerPortType, axSwitchStatIPv6NoRouteDrop=axSwitchStatIPv6NoRouteDrop, axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable, axVirtualServerHAGroup=axVirtualServerHAGroup, axNetwork=axNetwork, axSwitchStatsLinkdownDrop=axSwitchStatsLinkdownDrop, axSessionGlobalStatUDP=axSessionGlobalStatUDP, axServiceGroupMemberStatTotalSuccL7Reqs=axServiceGroupMemberStatTotalSuccL7Reqs, axAppGlobalTotalSSLConnections=axAppGlobalTotalSSLConnections, axSwitchStatsIPv6NoRouteDrop=axSwitchStatsIPv6NoRouteDrop, axNetStatProxyNoSockDrop=axNetStatProxyNoSockDrop, axServerStatServerCurConns=axServerStatServerCurConns, axNetStatNoVportDrops=axNetStatNoVportDrops, axHttpProxyStatTotalCRst=axHttpProxyStatTotalCRst, axHAGroupStatusEntry=axHAGroupStatusEntry, axIpNatLsnStats=axIpNatLsnStats, axIpNatLsnTop5UserPrivateIpAddrInUdp=axIpNatLsnTop5UserPrivateIpAddrInUdp, axNetStatEntryCreateSSLSIDFail=axNetStatEntryCreateSSLSIDFail, axInterfaceAlias=axInterfaceAlias, axNetStatTCPSynCookieFails=axNetStatTCPSynCookieFails, axSmtpProxyStats=axSmtpProxyStats, axTcpProxyStatTotalInTCPPacket=axTcpProxyStatTotalInTCPPacket, axVlanMemberTagged=axVlanMemberTagged, axSwitchStatIPFragReasmFail=axSwitchStatIPFragReasmFail, axServerTable=axServerTable, axNetStatEntryInbandHMReassign=axNetStatEntryInbandHMReassign, axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort=axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort, axConnReuseStatOpenPersist=axConnReuseStatOpenPersist, axPersistentStatUrlHashPersistOKSec=axPersistentStatUrlHashPersistOKSec, axSysDiskTotalSpace=axSysDiskTotalSpace, axServerStatNameInPort=axServerStatNameInPort, axSyslogPriority=axSyslogPriority, axSslProxyStatsSvrSelFail=axSslProxyStatsSvrSelFail, axPersistentStatsUrlHashPersistOKSec=axPersistentStatsUrlHashPersistOKSec, axInterfaceMacAddr=axInterfaceMacAddr, axVirtualServerStatBytesOut=axVirtualServerStatBytesOut, axVirtualServerPortStatPersistConns=axVirtualServerPortStatPersistConns, axPersistentStatEntry=axPersistentStatEntry, axConnReuseStatTotalTerminated=axConnReuseStatTotalTerminated, axNetStatTCPOutRSTAFleX=axNetStatTCPOutRSTAFleX, axHttpProxyStatTotalNoTuple=axHttpProxyStatTotalNoTuple, axSslStatSSLFailedCryptoOperation=axSslStatSSLFailedCryptoOperation, axConnReuseStatTotalLongRes=axConnReuseStatTotalLongRes, axVlanCfgMemberTable=axVlanCfgMemberTable, axServerStatServerTotalCurrL7Reqs=axServerStatServerTotalCurrL7Reqs, axInterfaceStatDropsOut=axInterfaceStatDropsOut, axHttpProxyStatReqPktOutOrder=axHttpProxyStatReqPktOutOrder, axPersistentStatCookiePersistOK=axPersistentStatCookiePersistOK, axIpNatLsnTop5UserPrivateIpAddrInIcmp=axIpNatLsnTop5UserPrivateIpAddrInIcmp, axIpNatStatsGlobalHits=axIpNatStatsGlobalHits, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp, axSmtpProxyStatSmtpReq=axSmtpProxyStatSmtpReq, axSysPrimaryVersionOnCF=axSysPrimaryVersionOnCF, axFtpStatTotalALGPkt=axFtpStatTotalALGPkt, axNetStatIPOutNoRt=axNetStatIPOutNoRt, axVirtualServerPortDown=axVirtualServerPortDown, axNetStatNoSynPktDrops=axNetStatNoSynPktDrops, axSmtpProxyStatFwdReqDataFail=axSmtpProxyStatFwdReqDataFail, axHttpProxyStatNoProxyErr=axHttpProxyStatNoProxyErr, axSwitchStatsIPFragReasmFail=axSwitchStatsIPFragReasmFail, axTcpProxyStatTotalConnAttemptFail=axTcpProxyStatTotalConnAttemptFail, axTcpProxyStatTotalRxBuf=axTcpProxyStatTotalRxBuf, axSwitchStatTTLExceedDrop=axSwitchStatTTLExceedDrop, axSslStatFailSSLHandshake=axSslStatFailSSLHandshake, axSyslogModuleName=axSyslogModuleName, axSmtpProxyStatsReqRetrans=axSmtpProxyStatsReqRetrans, axServers=axServers, axServiceGroupMemberStatResponseTime=axServiceGroupMemberStatResponseTime, axAppGlobalBufferConfigLimit=axAppGlobalBufferConfigLimit, axSysPrimaryVersionOnDisk=axSysPrimaryVersionOnDisk, axIpNatStatsInsideOutsideIntfName=axIpNatStatsInsideOutsideIntfName, axSysCpu=axSysCpu, axTcpProxyStatReTranPkt=axTcpProxyStatReTranPkt, axPersistentStatsUrlHashPersistOKPri=axPersistentStatsUrlHashPersistOKPri, axSslStatCurrSSLConn=axSslStatCurrSSLConn, axSwitchStatsL2Forward=axSwitchStatsL2Forward, axServerStatServerTotalL7Reqs=axServerStatServerTotalL7Reqs, axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts=axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts, axServerUp=axServerUp, axHAGlobalConfig=axHAGlobalConfig, axNetStatUDPReceive=axNetStatUDPReceive, axServerPortStat=axServerPortStat, axServiceGroupStatBytesOut=axServiceGroupStatBytesOut, axTcpProxyStatTCPFINW1State=axTcpProxyStatTCPFINW1State, axServiceConnLimit=axServiceConnLimit, axSysCpuUsageEntry=axSysCpuUsageEntry, axSysHwFan3Speed=axSysHwFan3Speed, axSmtpProxyStatCpuIndex=axSmtpProxyStatCpuIndex, axHAFloatingIPHaGroupID=axHAFloatingIPHaGroupID, axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry, axFanName=axFanName, axSessionGlobalStatTCPHalfOpen=axSessionGlobalStatTCPHalfOpen, axHttpProxyStatTotalSNATErr=axHttpProxyStatTotalSNATErr, axSysSecondaryVersionOnDisk=axSysSecondaryVersionOnDisk, axNetStatConnLimitDrop=axNetStatConnLimitDrop, axHttpProxyStatTotalSvrConn=axHttpProxyStatTotalSvrConn, axPersistentStatsCookiePersistFail=axPersistentStatsCookiePersistFail, axInterfaceName=axInterfaceName, axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions, axNetStataFlexDrop=axNetStataFlexDrop, axSystemShutdown=axSystemShutdown, axHttpProxyStatNoTupleErr=axHttpProxyStatNoTupleErr, axVirtualServerPortPersistTempl=axVirtualServerPortPersistTempl, axNotificationCurrentUpPorts=axNotificationCurrentUpPorts, axNetStatTCPRcv=axNetStatTCPRcv, axConnReuseStatTotalOpenPersist=axConnReuseStatTotalOpenPersist, axVirtualServerStatTotConns=axVirtualServerStatTotConns, axSwitchStatTable=axSwitchStatTable, axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts=axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts, axLogSyslogHostEntry=axLogSyslogHostEntry, axHttpProxyStatTotalNoProxy=axHttpProxyStatTotalNoProxy, axHAGroupPeerStatus=axHAGroupPeerStatus, axIpNatLsnTop5PrivateIpAddrInTcpPort=axIpNatLsnTop5PrivateIpAddrInTcpPort, axFan1Failure=axFan1Failure, axTcpProxyStatCurrEstConns=axTcpProxyStatCurrEstConns, axAppGlobalAllowedDefaultValue=axAppGlobalAllowedDefaultValue, axIpNatStatsInsideOutsideIntfDirection=axIpNatStatsInsideOutsideIntfDirection, axSystemRestart=axSystemRestart, axIpNatStatsDynamicMappingEndAddress=axIpNatStatsDynamicMappingEndAddress, axVirtualServerPortStatTotConns=axVirtualServerPortStatTotConns, axServiceGroupStatCurConns=axServiceGroupStatCurConns, axAppGlobalAllowedMaxValue=axAppGlobalAllowedMaxValue, axSwitchStatsIncorrectLenDrop=axSwitchStatsIncorrectLenDrop, axSwitchStatIPFragOverlapDrop=axSwitchStatIPFragOverlapDrop, axInterfaceCount=axInterfaceCount, axSmtpProxyStatSvrPrematureClose=axSmtpProxyStatSvrPrematureClose, axFastHttpProxyStatHttpReq=axFastHttpProxyStatHttpReq, axSslProxyStatsCurrProxyConns=axSslProxyStatsCurrProxyConns, axFastHttpProxyStatTable=axFastHttpProxyStatTable, axPersistentStats=axPersistentStats, axServerPortStatBytesOut=axServerPortStatBytesOut, axApplicationBufferReachLimit=axApplicationBufferReachLimit, axInterfaces=axInterfaces, axVirtualServerStatBytesIn=axVirtualServerStatBytesIn, axHttpProxyStatTotalReqReXmit=axHttpProxyStatTotalReqReXmit, axLogConsolePri=axLogConsolePri, axSmtpProxyStatSvrConnMade=axSmtpProxyStatSvrConnMade, axSysAverageDataCpuUsage=axSysAverageDataCpuUsage, axIpNatStatsDynamicMappingStartAddress=axIpNatStatsDynamicMappingStartAddress, axVirtualServers=axVirtualServers, axFastHttpProxyStatTotalSvrConn=axFastHttpProxyStatTotalSvrConn, axHttpProxyStatClientRst=axHttpProxyStatClientRst, axAppGlobalSystemResourceUsageEntry=axAppGlobalSystemResourceUsageEntry, axVirtualServerPortServiceGroup=axVirtualServerPortServiceGroup, axServerConnResume=axServerConnResume, axIpNatLsnTrafficStats=axIpNatLsnTrafficStats, axServerPortPriorityInServiceGroupMember=axServerPortPriorityInServiceGroupMember, axNetStatConnRateLimitDrops=axNetStatConnRateLimitDrops, axAppGlobalTotalNewL7Connections=axAppGlobalTotalNewL7Connections)
