#
# PySNMP MIB module Wellfleet-RF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-RF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter32, Unsigned32, NotificationType, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Bits, ModuleIdentity, iso, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Unsigned32", "NotificationType", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Bits", "ModuleIdentity", "iso", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIpGroup")
wfIpRfRipImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8), )
if mibBuilder.loadTexts: wfIpRfRipImportTable.setStatus('mandatory')
wfIpRfRipImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfRipImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfRipImportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfRipImportRipGateway"), (0, "Wellfleet-RF-MIB", "wfIpRfRipImportRipInterface"))
if mibBuilder.loadTexts: wfIpRfRipImportEntry.setStatus('mandatory')
wfIpRfRipImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportCreate.setStatus('mandatory')
wfIpRfRipImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportEnable.setStatus('mandatory')
wfIpRfRipImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportAddress.setStatus('mandatory')
wfIpRfRipImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportMask.setStatus('mandatory')
wfIpRfRipImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportAction.setStatus('mandatory')
wfIpRfRipImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportPreference.setStatus('mandatory')
wfIpRfRipImportRipGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportRipGateway.setStatus('mandatory')
wfIpRfRipImportRipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportRipInterface.setStatus('mandatory')
wfIpRfRipImportApplyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportApplyMask.setStatus('mandatory')
wfIpRfRipExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9), )
if mibBuilder.loadTexts: wfIpRfRipExportTable.setStatus('mandatory')
wfIpRfRipExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfRipExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfRipExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfRipExportFromProtocol"), (0, "Wellfleet-RF-MIB", "wfIpRfRipExportInterface"))
if mibBuilder.loadTexts: wfIpRfRipExportEntry.setStatus('mandatory')
wfIpRfRipExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportCreate.setStatus('mandatory')
wfIpRfRipExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportEnable.setStatus('mandatory')
wfIpRfRipExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportAddress.setStatus('mandatory')
wfIpRfRipExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportMask.setStatus('mandatory')
wfIpRfRipExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportFromProtocol.setStatus('mandatory')
wfIpRfRipExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3), ("aggregate", 4))).clone('propa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportAction.setStatus('mandatory')
wfIpRfRipExportInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportInterface.setStatus('mandatory')
wfIpRfRipExportRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportRipMetric.setStatus('mandatory')
wfIpRfOspfImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10), )
if mibBuilder.loadTexts: wfIpRfOspfImportTable.setStatus('mandatory')
wfIpRfOspfImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfOspfImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfImportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfImportType"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfImportTag"))
if mibBuilder.loadTexts: wfIpRfOspfImportEntry.setStatus('mandatory')
wfIpRfOspfImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportCreate.setStatus('mandatory')
wfIpRfOspfImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportEnable.setStatus('mandatory')
wfIpRfOspfImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportAddress.setStatus('mandatory')
wfIpRfOspfImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportMask.setStatus('mandatory')
wfIpRfOspfImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportAction.setStatus('mandatory')
wfIpRfOspfImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportPreference.setStatus('mandatory')
wfIpRfOspfImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportType.setStatus('mandatory')
wfIpRfOspfImportTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportTag.setStatus('mandatory')
wfIpRfOspfExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11), )
if mibBuilder.loadTexts: wfIpRfOspfExportTable.setStatus('mandatory')
wfIpRfOspfExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfOspfExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfExportFromProtocol"))
if mibBuilder.loadTexts: wfIpRfOspfExportEntry.setStatus('mandatory')
wfIpRfOspfExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportCreate.setStatus('mandatory')
wfIpRfOspfExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportEnable.setStatus('mandatory')
wfIpRfOspfExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfExportAddress.setStatus('mandatory')
wfIpRfOspfExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfExportMask.setStatus('mandatory')
wfIpRfOspfExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfExportFromProtocol.setStatus('mandatory')
wfIpRfOspfExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3))).clone('propa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportAction.setStatus('mandatory')
wfIpRfOspfExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportType.setStatus('mandatory')
wfIpRfOspfExportTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportTag.setStatus('mandatory')
wfIpRfOspfExportAutoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportAutoTag.setStatus('mandatory')
wfIpRfEgpImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12), )
if mibBuilder.loadTexts: wfIpRfEgpImportTable.setStatus('mandatory')
wfIpRfEgpImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfEgpImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpImportPeer"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpImportAs"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpImportGateway"))
if mibBuilder.loadTexts: wfIpRfEgpImportEntry.setStatus('mandatory')
wfIpRfEgpImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportCreate.setStatus('mandatory')
wfIpRfEgpImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportEnable.setStatus('mandatory')
wfIpRfEgpImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportAddress.setStatus('mandatory')
wfIpRfEgpImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportMask.setStatus('mandatory')
wfIpRfEgpImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportAction.setStatus('mandatory')
wfIpRfEgpImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportPreference.setStatus('mandatory')
wfIpRfEgpImportPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportPeer.setStatus('mandatory')
wfIpRfEgpImportAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportAs.setStatus('mandatory')
wfIpRfEgpImportGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportGateway.setStatus('mandatory')
wfIpRfEgpExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13), )
if mibBuilder.loadTexts: wfIpRfEgpExportTable.setStatus('mandatory')
wfIpRfEgpExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfEgpExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportFromProtocol"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportPeer"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportOspfType"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportOspfTag"))
if mibBuilder.loadTexts: wfIpRfEgpExportEntry.setStatus('mandatory')
wfIpRfEgpExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportCreate.setStatus('mandatory')
wfIpRfEgpExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportEnable.setStatus('mandatory')
wfIpRfEgpExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportAddress.setStatus('mandatory')
wfIpRfEgpExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportMask.setStatus('mandatory')
wfIpRfEgpExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportFromProtocol.setStatus('mandatory')
wfIpRfEgpExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3))).clone('propa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportAction.setStatus('mandatory')
wfIpRfEgpExportPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportPeer.setStatus('mandatory')
wfIpRfEgpExportOspfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfexttype1", 1), ("ospfexttype2", 2), ("ospfinttype", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportOspfType.setStatus('mandatory')
wfIpRfEgpExportOspfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportOspfTag.setStatus('mandatory')
wfIpRfEgpExportInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportInterface.setStatus('mandatory')
wfIpRfEgpExportMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportMetric.setStatus('mandatory')
wfIpRfBgp3ImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14), )
if mibBuilder.loadTexts: wfIpRfBgp3ImportTable.setStatus('mandatory')
wfIpRfBgp3ImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportPeerAs"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportPeerAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportOrigAs"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportRouteOrigin"))
if mibBuilder.loadTexts: wfIpRfBgp3ImportEntry.setStatus('mandatory')
wfIpRfBgp3ImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportCreate.setStatus('mandatory')
wfIpRfBgp3ImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportEnable.setStatus('mandatory')
wfIpRfBgp3ImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportAddress.setStatus('mandatory')
wfIpRfBgp3ImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportMask.setStatus('mandatory')
wfIpRfBgp3ImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportAction.setStatus('mandatory')
wfIpRfBgp3ImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportPreference.setStatus('mandatory')
wfIpRfBgp3ImportPeerAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportPeerAs.setStatus('mandatory')
wfIpRfBgp3ImportPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportPeerAddress.setStatus('mandatory')
wfIpRfBgp3ImportOrigAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportOrigAs.setStatus('mandatory')
wfIpRfBgp3ImportRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportRouteOrigin.setStatus('mandatory')
wfIpRfBgp3ImportBgp3Preference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 11), Gauge32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportBgp3Preference.setStatus('mandatory')
wfIpRfBgp3ExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15), )
if mibBuilder.loadTexts: wfIpRfBgp3ExportTable.setStatus('mandatory')
wfIpRfBgp3ExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportFromProtocol"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportPeerAs"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportPeerAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportOspfType"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportOspfTag"))
if mibBuilder.loadTexts: wfIpRfBgp3ExportEntry.setStatus('mandatory')
wfIpRfBgp3ExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportCreate.setStatus('mandatory')
wfIpRfBgp3ExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportEnable.setStatus('mandatory')
wfIpRfBgp3ExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportAddress.setStatus('mandatory')
wfIpRfBgp3ExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportMask.setStatus('mandatory')
wfIpRfBgp3ExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportFromProtocol.setStatus('mandatory')
wfIpRfBgp3ExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3), ("aggregate", 4))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportAction.setStatus('mandatory')
wfIpRfBgp3ExportPeerAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportPeerAs.setStatus('mandatory')
wfIpRfBgp3ExportPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportPeerAddress.setStatus('mandatory')
wfIpRfBgp3ExportOspfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfexttype1", 1), ("ospfexttype2", 2), ("ospfinttype", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportOspfType.setStatus('mandatory')
wfIpRfBgp3ExportOspfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportOspfTag.setStatus('mandatory')
wfIpRfBgp3ExportUseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("specified", 2), ("originating", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportUseMetric.setStatus('mandatory')
wfIpRfBgp3ExportInterAsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportInterAsMetric.setStatus('mandatory')
wfIpRfBgp3ExportOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportOrigin.setStatus('mandatory')
wfIpRfBgp3ExportNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportNeighAs.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-RF-MIB", wfIpRfBgp3ImportPeerAddress=wfIpRfBgp3ImportPeerAddress, wfIpRfEgpExportEnable=wfIpRfEgpExportEnable, wfIpRfRipImportAddress=wfIpRfRipImportAddress, wfIpRfOspfImportType=wfIpRfOspfImportType, wfIpRfBgp3ExportMask=wfIpRfBgp3ExportMask, wfIpRfBgp3ExportPeerAddress=wfIpRfBgp3ExportPeerAddress, wfIpRfOspfImportEntry=wfIpRfOspfImportEntry, wfIpRfEgpExportCreate=wfIpRfEgpExportCreate, wfIpRfOspfImportPreference=wfIpRfOspfImportPreference, wfIpRfBgp3ExportPeerAs=wfIpRfBgp3ExportPeerAs, wfIpRfBgp3ExportCreate=wfIpRfBgp3ExportCreate, wfIpRfEgpImportTable=wfIpRfEgpImportTable, wfIpRfBgp3ExportAddress=wfIpRfBgp3ExportAddress, wfIpRfRipExportFromProtocol=wfIpRfRipExportFromProtocol, wfIpRfRipImportTable=wfIpRfRipImportTable, wfIpRfEgpImportEntry=wfIpRfEgpImportEntry, wfIpRfBgp3ImportRouteOrigin=wfIpRfBgp3ImportRouteOrigin, wfIpRfEgpExportMetric=wfIpRfEgpExportMetric, wfIpRfBgp3ExportAction=wfIpRfBgp3ExportAction, wfIpRfBgp3ImportTable=wfIpRfBgp3ImportTable, wfIpRfBgp3ExportOspfType=wfIpRfBgp3ExportOspfType, wfIpRfEgpExportMask=wfIpRfEgpExportMask, wfIpRfEgpExportEntry=wfIpRfEgpExportEntry, wfIpRfBgp3ImportBgp3Preference=wfIpRfBgp3ImportBgp3Preference, wfIpRfEgpExportAction=wfIpRfEgpExportAction, wfIpRfRipExportCreate=wfIpRfRipExportCreate, wfIpRfBgp3ImportCreate=wfIpRfBgp3ImportCreate, wfIpRfEgpImportAs=wfIpRfEgpImportAs, wfIpRfOspfImportAddress=wfIpRfOspfImportAddress, wfIpRfOspfExportTable=wfIpRfOspfExportTable, wfIpRfOspfImportTag=wfIpRfOspfImportTag, wfIpRfEgpExportTable=wfIpRfEgpExportTable, wfIpRfRipExportEnable=wfIpRfRipExportEnable, wfIpRfRipImportPreference=wfIpRfRipImportPreference, wfIpRfEgpImportPreference=wfIpRfEgpImportPreference, wfIpRfBgp3ImportPeerAs=wfIpRfBgp3ImportPeerAs, wfIpRfBgp3ImportAction=wfIpRfBgp3ImportAction, wfIpRfBgp3ExportEntry=wfIpRfBgp3ExportEntry, wfIpRfBgp3ExportOspfTag=wfIpRfBgp3ExportOspfTag, wfIpRfBgp3ExportFromProtocol=wfIpRfBgp3ExportFromProtocol, wfIpRfBgp3ImportEnable=wfIpRfBgp3ImportEnable, wfIpRfEgpExportFromProtocol=wfIpRfEgpExportFromProtocol, wfIpRfBgp3ImportPreference=wfIpRfBgp3ImportPreference, wfIpRfEgpExportOspfTag=wfIpRfEgpExportOspfTag, wfIpRfRipImportCreate=wfIpRfRipImportCreate, wfIpRfBgp3ImportMask=wfIpRfBgp3ImportMask, wfIpRfRipExportTable=wfIpRfRipExportTable, wfIpRfOspfImportEnable=wfIpRfOspfImportEnable, wfIpRfBgp3ExportOrigin=wfIpRfBgp3ExportOrigin, wfIpRfRipImportMask=wfIpRfRipImportMask, wfIpRfEgpImportEnable=wfIpRfEgpImportEnable, wfIpRfRipImportEntry=wfIpRfRipImportEntry, wfIpRfOspfExportAddress=wfIpRfOspfExportAddress, wfIpRfBgp3ExportEnable=wfIpRfBgp3ExportEnable, wfIpRfRipImportRipInterface=wfIpRfRipImportRipInterface, wfIpRfOspfImportMask=wfIpRfOspfImportMask, wfIpRfOspfExportEntry=wfIpRfOspfExportEntry, wfIpRfBgp3ExportInterAsMetric=wfIpRfBgp3ExportInterAsMetric, wfIpRfBgp3ImportEntry=wfIpRfBgp3ImportEntry, wfIpRfRipImportApplyMask=wfIpRfRipImportApplyMask, wfIpRfBgp3ExportUseMetric=wfIpRfBgp3ExportUseMetric, wfIpRfEgpImportGateway=wfIpRfEgpImportGateway, wfIpRfEgpExportInterface=wfIpRfEgpExportInterface, wfIpRfOspfExportAutoTag=wfIpRfOspfExportAutoTag, wfIpRfRipImportRipGateway=wfIpRfRipImportRipGateway, wfIpRfBgp3ImportAddress=wfIpRfBgp3ImportAddress, wfIpRfEgpImportAction=wfIpRfEgpImportAction, wfIpRfRipExportRipMetric=wfIpRfRipExportRipMetric, wfIpRfRipImportAction=wfIpRfRipImportAction, wfIpRfOspfImportCreate=wfIpRfOspfImportCreate, wfIpRfRipExportAddress=wfIpRfRipExportAddress, wfIpRfEgpImportPeer=wfIpRfEgpImportPeer, wfIpRfOspfExportEnable=wfIpRfOspfExportEnable, wfIpRfRipExportEntry=wfIpRfRipExportEntry, wfIpRfRipExportMask=wfIpRfRipExportMask, wfIpRfOspfImportAction=wfIpRfOspfImportAction, wfIpRfBgp3ImportOrigAs=wfIpRfBgp3ImportOrigAs, wfIpRfOspfImportTable=wfIpRfOspfImportTable, wfIpRfRipImportEnable=wfIpRfRipImportEnable, wfIpRfEgpImportAddress=wfIpRfEgpImportAddress, wfIpRfEgpImportMask=wfIpRfEgpImportMask, wfIpRfOspfExportCreate=wfIpRfOspfExportCreate, wfIpRfBgp3ExportTable=wfIpRfBgp3ExportTable, wfIpRfRipExportInterface=wfIpRfRipExportInterface, wfIpRfOspfExportAction=wfIpRfOspfExportAction, wfIpRfEgpExportAddress=wfIpRfEgpExportAddress, wfIpRfOspfExportType=wfIpRfOspfExportType, wfIpRfEgpImportCreate=wfIpRfEgpImportCreate, wfIpRfEgpExportPeer=wfIpRfEgpExportPeer, wfIpRfOspfExportFromProtocol=wfIpRfOspfExportFromProtocol, wfIpRfBgp3ExportNeighAs=wfIpRfBgp3ExportNeighAs, wfIpRfEgpExportOspfType=wfIpRfEgpExportOspfType, wfIpRfOspfExportMask=wfIpRfOspfExportMask, wfIpRfRipExportAction=wfIpRfRipExportAction, wfIpRfOspfExportTag=wfIpRfOspfExportTag)
