#
# PySNMP MIB module AISPY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISPY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
TruthValue, = mibBuilder.importSymbols("RFC1253-MIB", "TruthValue")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, ModuleIdentity, enterprises, ObjectIdentity, Gauge32, iso, Counter32, TimeTicks, Counter64, NotificationType, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ModuleIdentity", "enterprises", "ObjectIdentity", "Gauge32", "iso", "Counter32", "TimeTicks", "Counter64", "NotificationType", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSPY = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20))
aiSPYIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 1))
aiSPYIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYIdentManufacturer.setStatus('mandatory')
aiSPYIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYIdentModel.setStatus('mandatory')
aiSPYIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYIdentSoftwareVersion.setStatus('mandatory')
aiSPYIdentSpecific = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYIdentSpecific.setStatus('mandatory')
aiSPYSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 2))
aiSPYClock = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYClock.setStatus('mandatory')
aiSPYDoorAlarmBypass = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYDoorAlarmBypass.setStatus('mandatory')
aiSPYKeypad = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 2, 3))
aiSPYKeypadCode1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode1.setStatus('mandatory')
aiSPYKeypadName1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName1.setStatus('mandatory')
aiSPYKeypadCode2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode2.setStatus('mandatory')
aiSPYKeypadName2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName2.setStatus('mandatory')
aiSPYKeypadCode3 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode3.setStatus('mandatory')
aiSPYKeypadName3 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName3.setStatus('mandatory')
aiSPYKeypadCode4 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode4.setStatus('mandatory')
aiSPYKeypadName4 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName4.setStatus('mandatory')
aiSPYKeypadCode5 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode5.setStatus('mandatory')
aiSPYKeypadName5 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName5.setStatus('mandatory')
aiSPYKeypadCode6 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode6.setStatus('mandatory')
aiSPYKeypadName6 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName6.setStatus('mandatory')
aiSPYKeypadCode7 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode7.setStatus('mandatory')
aiSPYKeypadName7 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName7.setStatus('mandatory')
aiSPYKeypadCode8 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode8.setStatus('mandatory')
aiSPYKeypadName8 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName8.setStatus('mandatory')
aiSPYKeypadCode9 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode9.setStatus('mandatory')
aiSPYKeypadName9 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName9.setStatus('mandatory')
aiSPYKeypadCode10 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode10.setStatus('mandatory')
aiSPYKeypadName10 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName10.setStatus('mandatory')
aiSPYKeypadCode11 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode11.setStatus('mandatory')
aiSPYKeypadName11 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName11.setStatus('mandatory')
aiSPYKeypadCode12 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode12.setStatus('mandatory')
aiSPYKeypadName12 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName12.setStatus('mandatory')
aiSPYKeypadCode13 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode13.setStatus('mandatory')
aiSPYKeypadName13 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName13.setStatus('mandatory')
aiSPYKeypadCode14 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode14.setStatus('mandatory')
aiSPYKeypadName14 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName14.setStatus('mandatory')
aiSPYKeypadCode15 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode15.setStatus('mandatory')
aiSPYKeypadName15 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName15.setStatus('mandatory')
aiSPYKeypadCode16 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode16.setStatus('mandatory')
aiSPYKeypadName16 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName16.setStatus('mandatory')
aiSPYKeypadCode17 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode17.setStatus('mandatory')
aiSPYKeypadName17 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName17.setStatus('mandatory')
aiSPYKeypadCode18 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode18.setStatus('mandatory')
aiSPYKeypadName18 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName18.setStatus('mandatory')
aiSPYKeypadCode19 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode19.setStatus('mandatory')
aiSPYKeypadName19 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName19.setStatus('mandatory')
aiSPYKeypadCode20 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadCode20.setStatus('mandatory')
aiSPYKeypadName20 = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 3, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYKeypadName20.setStatus('mandatory')
aiSPYInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInputVoltage.setStatus('mandatory')
aiSPYOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notInstalled", 0), ("installed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYOnBattery.setStatus('mandatory')
aiSPYLowBatteryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYLowBatteryThreshold.setStatus('mandatory')
aiSPYAnalogAverage = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYAnalogAverage.setStatus('mandatory')
aiSPYInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3))
aiSPYInput1 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 1))
aiSPYInput1State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notinstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1State.setStatus('mandatory')
aiSPYInput1Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput1Reading.setStatus('mandatory')
aiSPYInput1Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1Gain.setStatus('mandatory')
aiSPYInput1Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1Offset.setStatus('mandatory')
aiSPYInput1Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1Label.setStatus('mandatory')
aiSPYInput1UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1UOM.setStatus('mandatory')
aiSPYInput1HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1HighLimit.setStatus('mandatory')
aiSPYInput1LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1LowLimit.setStatus('mandatory')
aiSPYInput1RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1RlyControl.setStatus('mandatory')
aiSPYInput1Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1Delay.setStatus('mandatory')
aiSPYInput1RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1RTNDelay.setStatus('mandatory')
aiSPYInput1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput1Hysteresis.setStatus('mandatory')
aiSPYInput2 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 2))
aiSPYInput2State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2State.setStatus('mandatory')
aiSPYInput2Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput2Reading.setStatus('mandatory')
aiSPYInput2Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2Gain.setStatus('mandatory')
aiSPYInput2Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2Offset.setStatus('mandatory')
aiSPYInput2Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2Label.setStatus('mandatory')
aiSPYInput2UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2UOM.setStatus('mandatory')
aiSPYInput2HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2HighLimit.setStatus('mandatory')
aiSPYInput2LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2LowLimit.setStatus('mandatory')
aiSPYInput2RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2RlyControl.setStatus('mandatory')
aiSPYInput2Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2Delay.setStatus('mandatory')
aiSPYInput2RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2RTNDelay.setStatus('mandatory')
aiSPYInput2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput2Hysteresis.setStatus('mandatory')
aiSPYInput3 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 3))
aiSPYInput3State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3State.setStatus('mandatory')
aiSPYInput3Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput3Reading.setStatus('mandatory')
aiSPYInput3Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3Gain.setStatus('mandatory')
aiSPYInput3Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3Offset.setStatus('mandatory')
aiSPYInput3Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3Label.setStatus('mandatory')
aiSPYInput3UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3UOM.setStatus('mandatory')
aiSPYInput3HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3HighLimit.setStatus('mandatory')
aiSPYInput3LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3LowLimit.setStatus('mandatory')
aiSPYInput3RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3RlyControl.setStatus('mandatory')
aiSPYInput3Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3Delay.setStatus('mandatory')
aiSPYInput3RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3RTNDelay.setStatus('mandatory')
aiSPYInput3Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput3Hysteresis.setStatus('mandatory')
aiSPYInput4 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 4))
aiSPYInput4State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4State.setStatus('mandatory')
aiSPYInput4Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput4Reading.setStatus('mandatory')
aiSPYInput4Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4Gain.setStatus('mandatory')
aiSPYInput4Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4Offset.setStatus('mandatory')
aiSPYInput4Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4Label.setStatus('mandatory')
aiSPYInput4UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4UOM.setStatus('mandatory')
aiSPYInput4HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4HighLimit.setStatus('mandatory')
aiSPYInput4LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4LowLimit.setStatus('mandatory')
aiSPYInput4RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4RlyControl.setStatus('mandatory')
aiSPYInput4Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4Delay.setStatus('mandatory')
aiSPYInput4RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4RTNDelay.setStatus('mandatory')
aiSPYInput4Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput4Hysteresis.setStatus('mandatory')
aiSPYInput5 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 5))
aiSPYInput5State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5State.setStatus('mandatory')
aiSPYInput5Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput5Reading.setStatus('mandatory')
aiSPYInput5Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5Gain.setStatus('mandatory')
aiSPYInput5Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5Offset.setStatus('mandatory')
aiSPYInput5Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5Label.setStatus('mandatory')
aiSPYInput5UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5UOM.setStatus('mandatory')
aiSPYInput5HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5HighLimit.setStatus('mandatory')
aiSPYInput5LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5LowLimit.setStatus('mandatory')
aiSPYInput5RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5RlyControl.setStatus('mandatory')
aiSPYInput5Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5Delay.setStatus('mandatory')
aiSPYInput5RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5RTNDelay.setStatus('mandatory')
aiSPYInput5Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput5Hysteresis.setStatus('mandatory')
aiSPYInput6 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 6))
aiSPYInput6State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6State.setStatus('mandatory')
aiSPYInput6Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput6Reading.setStatus('mandatory')
aiSPYInput6Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6Gain.setStatus('mandatory')
aiSPYInput6Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6Offset.setStatus('mandatory')
aiSPYInput6Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6Label.setStatus('mandatory')
aiSPYInput6UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6UOM.setStatus('mandatory')
aiSPYInput6HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6HighLimit.setStatus('mandatory')
aiSPYInput6LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6LowLimit.setStatus('mandatory')
aiSPYInput6RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6RlyControl.setStatus('mandatory')
aiSPYInput6Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6Delay.setStatus('mandatory')
aiSPYInput6RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6RTNDelay.setStatus('mandatory')
aiSPYInput6Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput6Hysteresis.setStatus('mandatory')
aiSPYInput7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 7))
aiSPYInput7State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7State.setStatus('mandatory')
aiSPYInput7Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput7Reading.setStatus('mandatory')
aiSPYInput7Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7Gain.setStatus('mandatory')
aiSPYInput7Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7Offset.setStatus('mandatory')
aiSPYInput7Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7Label.setStatus('mandatory')
aiSPYInput7UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7UOM.setStatus('mandatory')
aiSPYInput7HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7HighLimit.setStatus('mandatory')
aiSPYInput7LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7LowLimit.setStatus('mandatory')
aiSPYInput7RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7RlyControl.setStatus('mandatory')
aiSPYInput7Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7Delay.setStatus('mandatory')
aiSPYInput7RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7RTNDelay.setStatus('mandatory')
aiSPYInput7Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput7Hysteresis.setStatus('mandatory')
aiSPYInput8 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 8))
aiSPYInput8State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("analog-4to20-installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8State.setStatus('mandatory')
aiSPYInput8Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput8Reading.setStatus('mandatory')
aiSPYInput8Gain = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8Gain.setStatus('mandatory')
aiSPYInput8Offset = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8Offset.setStatus('mandatory')
aiSPYInput8Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8Label.setStatus('mandatory')
aiSPYInput8UOM = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8UOM.setStatus('mandatory')
aiSPYInput8HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8HighLimit.setStatus('mandatory')
aiSPYInput8LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8LowLimit.setStatus('mandatory')
aiSPYInput8RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8RlyControl.setStatus('mandatory')
aiSPYInput8Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8Delay.setStatus('mandatory')
aiSPYInput8RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8RTNDelay.setStatus('mandatory')
aiSPYInput8Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput8Hysteresis.setStatus('mandatory')
aiSPYInput9 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 25))
aiSPYInput9State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput9State.setStatus('mandatory')
aiSPYInput9Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput9Reading.setStatus('mandatory')
aiSPYInput9Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 25, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput9Label.setStatus('mandatory')
aiSPYInput9RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput9RlyControl.setStatus('mandatory')
aiSPYInput9Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 25, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput9Delay.setStatus('mandatory')
aiSPYInput9RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput9RTNDelay.setStatus('mandatory')
aiSPYInput10 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 26))
aiSPYInput10State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput10State.setStatus('mandatory')
aiSPYInput10Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput10Reading.setStatus('mandatory')
aiSPYInput10Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 26, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput10Label.setStatus('mandatory')
aiSPYInput10RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 26, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput10RlyControl.setStatus('mandatory')
aiSPYInput10Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 26, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput10Delay.setStatus('mandatory')
aiSPYInput10RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 26, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput10RTNDelay.setStatus('mandatory')
aiSPYInput11 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 27))
aiSPYInput11State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput11State.setStatus('mandatory')
aiSPYInput11Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 27, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput11Reading.setStatus('mandatory')
aiSPYInput11Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 27, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput11Label.setStatus('mandatory')
aiSPYInput11RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 27, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput11RlyControl.setStatus('mandatory')
aiSPYInput11Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 27, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput11Delay.setStatus('mandatory')
aiSPYInput11RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 27, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput11RTNDelay.setStatus('mandatory')
aiSPYInput12 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 28))
aiSPYInput12State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput12State.setStatus('mandatory')
aiSPYInput12Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 28, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput12Reading.setStatus('mandatory')
aiSPYInput12Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 28, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput12Label.setStatus('mandatory')
aiSPYInput12RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput12RlyControl.setStatus('mandatory')
aiSPYInput12Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 28, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput12Delay.setStatus('mandatory')
aiSPYInput12RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 28, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput12RTNDelay.setStatus('mandatory')
aiSPYInput13 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 29))
aiSPYInput13State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput13State.setStatus('mandatory')
aiSPYInput13Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 29, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput13Reading.setStatus('mandatory')
aiSPYInput13Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 29, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput13Label.setStatus('mandatory')
aiSPYInput13RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 29, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput13RlyControl.setStatus('mandatory')
aiSPYInput13Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 29, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput13Delay.setStatus('mandatory')
aiSPYInput13RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 29, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput13RTNDelay.setStatus('mandatory')
aiSPYInput14 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 30))
aiSPYInput14State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput14State.setStatus('mandatory')
aiSPYInput14Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 30, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput14Reading.setStatus('mandatory')
aiSPYInput14Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 30, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput14Label.setStatus('mandatory')
aiSPYInput14RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput14RlyControl.setStatus('mandatory')
aiSPYInput14Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 30, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput14Delay.setStatus('mandatory')
aiSPYInput14RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 30, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput14RTNDelay.setStatus('mandatory')
aiSPYInput15 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 31))
aiSPYInput15State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput15State.setStatus('mandatory')
aiSPYInput15Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 31, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput15Reading.setStatus('mandatory')
aiSPYInput15Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 31, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput15Label.setStatus('mandatory')
aiSPYInput15RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 31, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput15RlyControl.setStatus('mandatory')
aiSPYInput15Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 31, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput15Delay.setStatus('mandatory')
aiSPYInput15RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 31, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput15RTNDelay.setStatus('mandatory')
aiSPYInput16 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 32))
aiSPYInput16State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput16State.setStatus('mandatory')
aiSPYInput16Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput16Reading.setStatus('mandatory')
aiSPYInput16Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 32, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput16Label.setStatus('mandatory')
aiSPYInput16RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput16RlyControl.setStatus('mandatory')
aiSPYInput16Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput16Delay.setStatus('mandatory')
aiSPYInput16RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 32, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput16RTNDelay.setStatus('mandatory')
aiSPYInput17 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 33))
aiSPYInput17State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput17State.setStatus('mandatory')
aiSPYInput17Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 33, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput17Reading.setStatus('mandatory')
aiSPYInput17Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 33, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput17Label.setStatus('mandatory')
aiSPYInput17RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 33, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput17RlyControl.setStatus('mandatory')
aiSPYInput17Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 33, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput17Delay.setStatus('mandatory')
aiSPYInput17RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 33, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput17RTNDelay.setStatus('mandatory')
aiSPYInput18 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 34))
aiSPYInput18State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput18State.setStatus('mandatory')
aiSPYInput18Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 34, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput18Reading.setStatus('mandatory')
aiSPYInput18Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 34, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput18Label.setStatus('mandatory')
aiSPYInput18RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 34, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput18RlyControl.setStatus('mandatory')
aiSPYInput18Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 34, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput18Delay.setStatus('mandatory')
aiSPYInput18RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 34, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput18RTNDelay.setStatus('mandatory')
aiSPYInput19 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 35))
aiSPYInput19State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput19State.setStatus('mandatory')
aiSPYInput19Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 35, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput19Reading.setStatus('mandatory')
aiSPYInput19Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 35, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput19Label.setStatus('mandatory')
aiSPYInput19RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 35, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput19RlyControl.setStatus('mandatory')
aiSPYInput19Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 35, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput19Delay.setStatus('mandatory')
aiSPYInput19RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 35, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput19RTNDelay.setStatus('mandatory')
aiSPYInput20 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 36))
aiSPYInput20State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 36, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput20State.setStatus('mandatory')
aiSPYInput20Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 36, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput20Reading.setStatus('mandatory')
aiSPYInput20Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 36, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput20Label.setStatus('mandatory')
aiSPYInput20RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 36, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput20RlyControl.setStatus('mandatory')
aiSPYInput20Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 36, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput20Delay.setStatus('mandatory')
aiSPYInput20RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 36, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput20RTNDelay.setStatus('mandatory')
aiSPYInput21 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 37))
aiSPYInput21State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 37, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput21State.setStatus('mandatory')
aiSPYInput21Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 37, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput21Reading.setStatus('mandatory')
aiSPYInput21Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 37, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput21Label.setStatus('mandatory')
aiSPYInput21RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 37, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput21RlyControl.setStatus('mandatory')
aiSPYInput21Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 37, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput21Delay.setStatus('mandatory')
aiSPYInput21RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 37, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput21RTNDelay.setStatus('mandatory')
aiSPYInput22 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 38))
aiSPYInput22State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput22State.setStatus('mandatory')
aiSPYInput22Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 38, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput22Reading.setStatus('mandatory')
aiSPYInput22Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 38, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput22Label.setStatus('mandatory')
aiSPYInput22RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 38, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput22RlyControl.setStatus('mandatory')
aiSPYInput22Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 38, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput22Delay.setStatus('mandatory')
aiSPYInput22RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 38, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput22RTNDelay.setStatus('mandatory')
aiSPYInput23 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 39))
aiSPYInput23State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 39, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput23State.setStatus('mandatory')
aiSPYInput23Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 39, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput23Reading.setStatus('mandatory')
aiSPYInput23Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 39, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput23Label.setStatus('mandatory')
aiSPYInput23RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 39, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput23RlyControl.setStatus('mandatory')
aiSPYInput23Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 39, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput23Delay.setStatus('mandatory')
aiSPYInput23RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 39, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput23RTNDelay.setStatus('mandatory')
aiSPYInput24 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 40))
aiSPYInput24State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput24State.setStatus('mandatory')
aiSPYInput24Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 40, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput24Reading.setStatus('mandatory')
aiSPYInput24Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 40, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput24Label.setStatus('mandatory')
aiSPYInput24RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 40, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput24RlyControl.setStatus('mandatory')
aiSPYInput24Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 40, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput24Delay.setStatus('mandatory')
aiSPYInput24RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 40, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput24RTNDelay.setStatus('mandatory')
aiSPYInput25 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 41))
aiSPYInput25State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 41, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput25State.setStatus('mandatory')
aiSPYInput25Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 41, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput25Reading.setStatus('mandatory')
aiSPYInput25Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 41, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput25Label.setStatus('mandatory')
aiSPYInput25RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 41, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput25RlyControl.setStatus('mandatory')
aiSPYInput25Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 41, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput25Delay.setStatus('mandatory')
aiSPYInput25RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 41, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput25RTNDelay.setStatus('mandatory')
aiSPYInput26 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 42))
aiSPYInput26State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 42, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput26State.setStatus('mandatory')
aiSPYInput26Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 42, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput26Reading.setStatus('mandatory')
aiSPYInput26Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 42, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput26Label.setStatus('mandatory')
aiSPYInput26RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 42, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput26RlyControl.setStatus('mandatory')
aiSPYInput26Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 42, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput26Delay.setStatus('mandatory')
aiSPYInput26RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 42, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput26RTNDelay.setStatus('mandatory')
aiSPYInput27 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 43))
aiSPYInput27State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 43, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput27State.setStatus('mandatory')
aiSPYInput27Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 43, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput27Reading.setStatus('mandatory')
aiSPYInput27Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 43, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput27Label.setStatus('mandatory')
aiSPYInput27RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 43, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput27RlyControl.setStatus('mandatory')
aiSPYInput27Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 43, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput27Delay.setStatus('mandatory')
aiSPYInput27RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 43, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput27RTNDelay.setStatus('mandatory')
aiSPYInput28 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3, 44))
aiSPYInput28State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 44, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("digital-no-installed", 3), ("digital-nc-installed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput28State.setStatus('mandatory')
aiSPYInput28Reading = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 44, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYInput28Reading.setStatus('mandatory')
aiSPYInput28Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 44, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput28Label.setStatus('mandatory')
aiSPYInput28RlyControl = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 44, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput28RlyControl.setStatus('mandatory')
aiSPYInput28Delay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 44, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput28Delay.setStatus('mandatory')
aiSPYInput28RTNDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 3, 44, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYInput28RTNDelay.setStatus('mandatory')
aiSPYOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4))
aiSPYRelay1 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4, 1))
aiSPYRelay1State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay1State.setStatus('mandatory')
aiSPYRelay1Status = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYRelay1Status.setStatus('mandatory')
aiSPYRelay1Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay1Label.setStatus('mandatory')
aiSPYRelay1Time = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay1Time.setStatus('mandatory')
aiSPYRelay2 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4, 2))
aiSPYRelay2State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay2State.setStatus('mandatory')
aiSPYRelay2Status = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYRelay2Status.setStatus('mandatory')
aiSPYRelay2Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay2Label.setStatus('mandatory')
aiSPYRelay2Time = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay2Time.setStatus('mandatory')
aiSPYRelay3 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4, 3))
aiSPYRelay3State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay3State.setStatus('mandatory')
aiSPYRelay3Status = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYRelay3Status.setStatus('mandatory')
aiSPYRelay3Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay3Label.setStatus('mandatory')
aiSPYRelay3Time = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay3Time.setStatus('mandatory')
aiSPYRelay4 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4, 4))
aiSPYRelay4State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay4State.setStatus('mandatory')
aiSPYRelay4Status = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYRelay4Status.setStatus('mandatory')
aiSPYRelay4Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay4Label.setStatus('mandatory')
aiSPYRelay4Time = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay4Time.setStatus('mandatory')
aiSPYRelay5 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4, 5))
aiSPYRelay5State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay5State.setStatus('mandatory')
aiSPYRelay5Status = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYRelay5Status.setStatus('mandatory')
aiSPYRelay5Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay5Label.setStatus('mandatory')
aiSPYRelay5Time = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay5Time.setStatus('mandatory')
aiSPYRelay6 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 4, 6))
aiSPYRelay6State = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyoff", 1), ("normallyon", 2), ("forceon", 3), ("forceoff", 4), ("keypadcontrolled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay6State.setStatus('mandatory')
aiSPYRelay6Status = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normaloff", 1), ("normalon", 2), ("forcedon", 3), ("forcedoff", 4), ("keycodeactive", 5), ("alarmedactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYRelay6Status.setStatus('mandatory')
aiSPYRelay6Label = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay6Label.setStatus('mandatory')
aiSPYRelay6Time = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 4, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYRelay6Time.setStatus('mandatory')
aiSPYAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 5))
aiSPYAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYAlarmsPresent.setStatus('current')
aiSPYAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 539, 20, 5, 2), )
if mibBuilder.loadTexts: aiSPYAlarmTable.setStatus('current')
aiSPYAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 20, 5, 2, 1), ).setIndexNames((0, "AISPY-MIB", "aiSPYAlarmId"))
if mibBuilder.loadTexts: aiSPYAlarmEntry.setStatus('current')
aiSPYAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 20, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: aiSPYAlarmId.setStatus('current')
aiSPYAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 20, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYAlarmDescr.setStatus('current')
aiSPYWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 5, 3))
aiSPYInput1HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 1))
if mibBuilder.loadTexts: aiSPYInput1HighAlarm.setStatus('current')
aiSPYInput1LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 2))
if mibBuilder.loadTexts: aiSPYInput1LowAlarm.setStatus('current')
aiSPYInput2HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 3))
if mibBuilder.loadTexts: aiSPYInput2HighAlarm.setStatus('current')
aiSPYInput2LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 4))
if mibBuilder.loadTexts: aiSPYInput2LowAlarm.setStatus('current')
aiSPYInput3HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 5))
if mibBuilder.loadTexts: aiSPYInput3HighAlarm.setStatus('current')
aiSPYInput3LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 6))
if mibBuilder.loadTexts: aiSPYInput3LowAlarm.setStatus('current')
aiSPYInput4HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 7))
if mibBuilder.loadTexts: aiSPYInput4HighAlarm.setStatus('current')
aiSPYInput4LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 8))
if mibBuilder.loadTexts: aiSPYInput4LowAlarm.setStatus('current')
aiSPYInput5HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 9))
if mibBuilder.loadTexts: aiSPYInput5HighAlarm.setStatus('current')
aiSPYInput5LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 10))
if mibBuilder.loadTexts: aiSPYInput5LowAlarm.setStatus('current')
aiSPYInput6HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 11))
if mibBuilder.loadTexts: aiSPYInput6HighAlarm.setStatus('current')
aiSPYInput6LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 12))
if mibBuilder.loadTexts: aiSPYInput6LowAlarm.setStatus('current')
aiSPYInput7HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 13))
if mibBuilder.loadTexts: aiSPYInput7HighAlarm.setStatus('current')
aiSPYInput7LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 14))
if mibBuilder.loadTexts: aiSPYInput7LowAlarm.setStatus('current')
aiSPYInput8HighAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 15))
if mibBuilder.loadTexts: aiSPYInput8HighAlarm.setStatus('current')
aiSPYInput8LowAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 16))
if mibBuilder.loadTexts: aiSPYInput8LowAlarm.setStatus('current')
aiSPYInput1DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 17))
if mibBuilder.loadTexts: aiSPYInput1DigAlarm.setStatus('current')
aiSPYInput2DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 18))
if mibBuilder.loadTexts: aiSPYInput2DigAlarm.setStatus('current')
aiSPYInput3DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 19))
if mibBuilder.loadTexts: aiSPYInput3DigAlarm.setStatus('current')
aiSPYInput4DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 20))
if mibBuilder.loadTexts: aiSPYInput4DigAlarm.setStatus('current')
aiSPYInput5DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 21))
if mibBuilder.loadTexts: aiSPYInput5DigAlarm.setStatus('current')
aiSPYInput6DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 22))
if mibBuilder.loadTexts: aiSPYInput6DigAlarm.setStatus('current')
aiSPYInput7DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 23))
if mibBuilder.loadTexts: aiSPYInput7DigAlarm.setStatus('current')
aiSPYInput8DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 24))
if mibBuilder.loadTexts: aiSPYInput8DigAlarm.setStatus('current')
aiSPYInput9DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 25))
if mibBuilder.loadTexts: aiSPYInput9DigAlarm.setStatus('current')
aiSPYInput10DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 26))
if mibBuilder.loadTexts: aiSPYInput10DigAlarm.setStatus('current')
aiSPYInput11DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 27))
if mibBuilder.loadTexts: aiSPYInput11DigAlarm.setStatus('current')
aiSPYInput12DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 28))
if mibBuilder.loadTexts: aiSPYInput12DigAlarm.setStatus('current')
aiSPYInput13DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 29))
if mibBuilder.loadTexts: aiSPYInput13DigAlarm.setStatus('current')
aiSPYInput14DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 30))
if mibBuilder.loadTexts: aiSPYInput14DigAlarm.setStatus('current')
aiSPYInput15DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 31))
if mibBuilder.loadTexts: aiSPYInput15DigAlarm.setStatus('current')
aiSPYInput16DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 32))
if mibBuilder.loadTexts: aiSPYInput16DigAlarm.setStatus('current')
aiSPYInput17DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 33))
if mibBuilder.loadTexts: aiSPYInput17DigAlarm.setStatus('current')
aiSPYInput18DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 34))
if mibBuilder.loadTexts: aiSPYInput18DigAlarm.setStatus('current')
aiSPYInput19DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 35))
if mibBuilder.loadTexts: aiSPYInput19DigAlarm.setStatus('current')
aiSPYInput20DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 36))
if mibBuilder.loadTexts: aiSPYInput20DigAlarm.setStatus('current')
aiSPYInput21DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 37))
if mibBuilder.loadTexts: aiSPYInput21DigAlarm.setStatus('current')
aiSPYInput22DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 38))
if mibBuilder.loadTexts: aiSPYInput22DigAlarm.setStatus('current')
aiSPYInput23DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 39))
if mibBuilder.loadTexts: aiSPYInput23DigAlarm.setStatus('current')
aiSPYInput24DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 40))
if mibBuilder.loadTexts: aiSPYInput24DigAlarm.setStatus('current')
aiSPYInput25DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 41))
if mibBuilder.loadTexts: aiSPYInput25DigAlarm.setStatus('current')
aiSPYInput26DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 42))
if mibBuilder.loadTexts: aiSPYInput26DigAlarm.setStatus('current')
aiSPYInput27DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 43))
if mibBuilder.loadTexts: aiSPYInput27DigAlarm.setStatus('current')
aiSPYInput28DigAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 44))
if mibBuilder.loadTexts: aiSPYInput28DigAlarm.setStatus('current')
aiSPYOnBatteryAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 96))
if mibBuilder.loadTexts: aiSPYOnBatteryAlarm.setStatus('current')
aiSPYLowBatteryAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 539, 20, 5, 3, 97))
if mibBuilder.loadTexts: aiSPYLowBatteryAlarm.setStatus('current')
aiSPYTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 6))
aiSPYAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 539, 20, 6) + (0,1))
aiSPYAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 539, 20, 6) + (0,2))
aiSPYAccessGranted = NotificationType((1, 3, 6, 1, 4, 1, 539, 20, 6) + (0,3))
aiSPYAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 539, 20, 6) + (0,4))
aiSPYAlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 7))
aiSPYAlarmHistoryEntries = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYAlarmHistoryEntries.setStatus('current')
aiSPYAlarmHistoryClear = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearbuffer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYAlarmHistoryClear.setStatus('mandatory')
aiSPYAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 539, 20, 7, 3), )
if mibBuilder.loadTexts: aiSPYAlarmHistoryTable.setStatus('current')
aiSPYAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 20, 7, 3, 1), ).setIndexNames((0, "AISPY-MIB", "aiSPYAlarmHistoryId"))
if mibBuilder.loadTexts: aiSPYAlarmHistoryEntry.setStatus('current')
aiSPYAlarmHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 20, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aiSPYAlarmHistoryId.setStatus('current')
aiSPYAlarmHistoryText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 20, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSPYAlarmHistoryText.setStatus('current')
aiSPYTrapSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 8))
aiSPYPersistantTraps = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYPersistantTraps.setStatus('mandatory')
aiSPYAlarmAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 539, 20, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("acknowledgealarms", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSPYAlarmAcknowledge.setStatus('mandatory')
aiSPY8124 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 20, 3))
mibBuilder.exportSymbols("AISPY-MIB", aiSPYInput8HighLimit=aiSPYInput8HighLimit, aiSPYInput21=aiSPYInput21, aiSPYInput10Label=aiSPYInput10Label, aiSPYRelay2=aiSPYRelay2, aiSPYKeypadCode12=aiSPYKeypadCode12, aiSPYInput17=aiSPYInput17, aiSPYKeypadCode19=aiSPYKeypadCode19, aiSPYInput19State=aiSPYInput19State, aiSPY8124=aiSPY8124, aiSPYInput15RlyControl=aiSPYInput15RlyControl, aiSPYInput5Delay=aiSPYInput5Delay, aiSPYInput23State=aiSPYInput23State, aiSPYInput7Offset=aiSPYInput7Offset, aiSPYKeypadName4=aiSPYKeypadName4, aiSPYInput1Gain=aiSPYInput1Gain, aiSPYInput19Delay=aiSPYInput19Delay, aiSPYKeypadName11=aiSPYKeypadName11, aiSPYInput3UOM=aiSPYInput3UOM, aiSPYInput7DigAlarm=aiSPYInput7DigAlarm, aiSPYInput5UOM=aiSPYInput5UOM, aiSPYInput23Reading=aiSPYInput23Reading, aiSPYKeypadCode8=aiSPYKeypadCode8, aiSPYInput26RlyControl=aiSPYInput26RlyControl, aiSPYInput16Delay=aiSPYInput16Delay, aiSPYInput20DigAlarm=aiSPYInput20DigAlarm, aiSPYInput18RTNDelay=aiSPYInput18RTNDelay, aiSPYInput19DigAlarm=aiSPYInput19DigAlarm, aiSPYInput5HighLimit=aiSPYInput5HighLimit, aiSPYKeypadCode3=aiSPYKeypadCode3, aiSPYInput18Label=aiSPYInput18Label, aiSPYInput1LowAlarm=aiSPYInput1LowAlarm, aiSPYInput26Label=aiSPYInput26Label, aiSPYKeypadName1=aiSPYKeypadName1, aiSPYInput3LowAlarm=aiSPYInput3LowAlarm, aiSPYInput20Label=aiSPYInput20Label, aiSPYInput6HighAlarm=aiSPYInput6HighAlarm, aiSPYRelay6Status=aiSPYRelay6Status, aiSPYInput7RTNDelay=aiSPYInput7RTNDelay, aiSPYInput6Gain=aiSPYInput6Gain, aiSPYRelay1State=aiSPYRelay1State, aiSPYInput8Label=aiSPYInput8Label, aiSPYInput18DigAlarm=aiSPYInput18DigAlarm, aiSPYInput11Delay=aiSPYInput11Delay, aiSPYInput16Reading=aiSPYInput16Reading, aiSPYInput17State=aiSPYInput17State, aiSPYInput5LowLimit=aiSPYInput5LowLimit, aiSPYAnalogAverage=aiSPYAnalogAverage, aiSPYInput21Delay=aiSPYInput21Delay, aiSPYInput5RTNDelay=aiSPYInput5RTNDelay, aiSPYInput19Reading=aiSPYInput19Reading, aiSPYInput8RlyControl=aiSPYInput8RlyControl, aiSPYKeypadCode16=aiSPYKeypadCode16, aiSPYInput16Label=aiSPYInput16Label, aiSPYInput5State=aiSPYInput5State, aiSPYInput21RTNDelay=aiSPYInput21RTNDelay, aiSPYKeypadCode9=aiSPYKeypadCode9, aiSPYInput14=aiSPYInput14, aiSPYInput14Delay=aiSPYInput14Delay, aiSPYInput13DigAlarm=aiSPYInput13DigAlarm, aiSPYInput10RlyControl=aiSPYInput10RlyControl, aiSPYInput23RlyControl=aiSPYInput23RlyControl, aiSPYOnBatteryAlarm=aiSPYOnBatteryAlarm, aiSPYInput5=aiSPYInput5, aiSPYInput1RTNDelay=aiSPYInput1RTNDelay, aiSPYKeypadName20=aiSPYKeypadName20, aiSPYInput12Delay=aiSPYInput12Delay, aiSPYLowBatteryAlarm=aiSPYLowBatteryAlarm, aiSPYInput18State=aiSPYInput18State, aiSPYInput8Gain=aiSPYInput8Gain, aiSPYInput6UOM=aiSPYInput6UOM, aiSPYRelay3State=aiSPYRelay3State, aiSPYInput23RTNDelay=aiSPYInput23RTNDelay, aiSPYRelay5=aiSPYRelay5, aiSPYInput24State=aiSPYInput24State, aiSPYInput8LowAlarm=aiSPYInput8LowAlarm, aiSPYInput7LowAlarm=aiSPYInput7LowAlarm, aiSPYInput17RlyControl=aiSPYInput17RlyControl, aiSPYInput4Delay=aiSPYInput4Delay, aiSPYInput12RTNDelay=aiSPYInput12RTNDelay, aiSPYInput28Reading=aiSPYInput28Reading, aiSPYInput1=aiSPYInput1, aiSPYInput11State=aiSPYInput11State, aiSPYRelay1Time=aiSPYRelay1Time, aiSPYInput1Offset=aiSPYInput1Offset, aiSPYInput6DigAlarm=aiSPYInput6DigAlarm, aiSPYRelay3Time=aiSPYRelay3Time, aiSPYInput26State=aiSPYInput26State, aiSPYInput22Delay=aiSPYInput22Delay, aiSPYInput9=aiSPYInput9, aiSPYInput20RTNDelay=aiSPYInput20RTNDelay, aiSPYInput25RTNDelay=aiSPYInput25RTNDelay, aiSPYInput27Delay=aiSPYInput27Delay, aiSPYInput17RTNDelay=aiSPYInput17RTNDelay, aiSPYInput26Reading=aiSPYInput26Reading, aiSPYInput5Hysteresis=aiSPYInput5Hysteresis, aiSPYIdent=aiSPYIdent, aiSPYAlarmAcknowledge=aiSPYAlarmAcknowledge, aiSPYAlarmHistoryEntry=aiSPYAlarmHistoryEntry, aiSPYInput2=aiSPYInput2, aiSPYInput3Delay=aiSPYInput3Delay, aiSPYKeypadName14=aiSPYKeypadName14, aiSPYInput21DigAlarm=aiSPYInput21DigAlarm, aiSPYInput3Label=aiSPYInput3Label, aiSPYInput18Reading=aiSPYInput18Reading, aiSPYInput20Reading=aiSPYInput20Reading, aiSPYAlarmHistoryText=aiSPYAlarmHistoryText, aiSPYInput16RlyControl=aiSPYInput16RlyControl, aiSPYInputVoltage=aiSPYInputVoltage, aiSPYInput5Reading=aiSPYInput5Reading, aiSPYKeypadName5=aiSPYKeypadName5, aiSPYInput25DigAlarm=aiSPYInput25DigAlarm, aiSPYInput19RlyControl=aiSPYInput19RlyControl, aiSPYRelay3Status=aiSPYRelay3Status, aiSPYInput13State=aiSPYInput13State, aiSPYInput25RlyControl=aiSPYInput25RlyControl, aiSPYInput8=aiSPYInput8, aiSPY=aiSPY, aiSPYInput27State=aiSPYInput27State, aiSPYInput11Reading=aiSPYInput11Reading, aiSPYRelay2Time=aiSPYRelay2Time, aiSPYIdentSpecific=aiSPYIdentSpecific, aiSPYInput11RlyControl=aiSPYInput11RlyControl, aiSPYKeypadCode17=aiSPYKeypadCode17, aiSPYIdentManufacturer=aiSPYIdentManufacturer, aiSPYInput4LowAlarm=aiSPYInput4LowAlarm, aiSPYInput7Label=aiSPYInput7Label, aiSPYInput2HighLimit=aiSPYInput2HighLimit, aiSPYInput7Reading=aiSPYInput7Reading, aiSPYInput8State=aiSPYInput8State, aiSPYInput12RlyControl=aiSPYInput12RlyControl, aiSPYInput17DigAlarm=aiSPYInput17DigAlarm, aiSPYInput1HighLimit=aiSPYInput1HighLimit, aiSPYRelay5Label=aiSPYRelay5Label, aiSPYInput8LowLimit=aiSPYInput8LowLimit, aiSPYInput7State=aiSPYInput7State, aiSPYInput5LowAlarm=aiSPYInput5LowAlarm, aiSPYInput15Delay=aiSPYInput15Delay, aiSPYInput5Gain=aiSPYInput5Gain, aiSPYInput7RlyControl=aiSPYInput7RlyControl, aiSPYInput14Reading=aiSPYInput14Reading, aiSPYInput1UOM=aiSPYInput1UOM, aiSPYRelay2Label=aiSPYRelay2Label, aiSPYInput6Delay=aiSPYInput6Delay, aiSPYInput1Reading=aiSPYInput1Reading, aiSPYKeypadName13=aiSPYKeypadName13, aiSPYInput20Delay=aiSPYInput20Delay, aiSPYInput15Label=aiSPYInput15Label, aiSPYInput20RlyControl=aiSPYInput20RlyControl, aiSPYInput24=aiSPYInput24, aiSPYInput28State=aiSPYInput28State, aiSPYInput19Label=aiSPYInput19Label, aiSPYInput9Label=aiSPYInput9Label, aiSPYInput7Gain=aiSPYInput7Gain, aiSPYInput4Reading=aiSPYInput4Reading, aiSPYRelay4=aiSPYRelay4, aiSPYInput3Gain=aiSPYInput3Gain, aiSPYAlarmEntry=aiSPYAlarmEntry, aiSPYInput27DigAlarm=aiSPYInput27DigAlarm, aiSPYInput12Reading=aiSPYInput12Reading, aiSPYInput28=aiSPYInput28, aiSPYInput22State=aiSPYInput22State, aiSPYKeypadCode11=aiSPYKeypadCode11, aiSPYDoorAlarmBypass=aiSPYDoorAlarmBypass, aiSPYInput12DigAlarm=aiSPYInput12DigAlarm, aiSPYKeypadName16=aiSPYKeypadName16, aiSPYIdentModel=aiSPYIdentModel, aiSPYInput15Reading=aiSPYInput15Reading, aiSPYInput7Delay=aiSPYInput7Delay, aiSPYInput20=aiSPYInput20, aiSPYKeypadCode20=aiSPYKeypadCode20, aiSPYInput15=aiSPYInput15, aiSPYInput6LowAlarm=aiSPYInput6LowAlarm, aiSPYInput14RTNDelay=aiSPYInput14RTNDelay, aiSPYInput7LowLimit=aiSPYInput7LowLimit, aiSPYKeypadCode10=aiSPYKeypadCode10, aiSPYInput4HighAlarm=aiSPYInput4HighAlarm, aiSPYInput10DigAlarm=aiSPYInput10DigAlarm, aiSPYInput4DigAlarm=aiSPYInput4DigAlarm, aiSPYInput22Label=aiSPYInput22Label, aiSPYTrapSettings=aiSPYTrapSettings, aiSPYKeypadCode18=aiSPYKeypadCode18, aiSPYInput2RTNDelay=aiSPYInput2RTNDelay, aiSPYInput22RTNDelay=aiSPYInput22RTNDelay, aiSPYRelay6State=aiSPYRelay6State, aiSPYInput9RTNDelay=aiSPYInput9RTNDelay, aiSPYRelay4Label=aiSPYRelay4Label, aiSPYRelay2State=aiSPYRelay2State, aiSPYInput10Reading=aiSPYInput10Reading, aiSPYKeypadCode4=aiSPYKeypadCode4, aiSPYInput3Offset=aiSPYInput3Offset, aiSPYInput4State=aiSPYInput4State, aiSPYRelay4Time=aiSPYRelay4Time, aiSPYInput16DigAlarm=aiSPYInput16DigAlarm, aiSPYInput9Delay=aiSPYInput9Delay, aiSPYInput28DigAlarm=aiSPYInput28DigAlarm, aiSPYInput3HighLimit=aiSPYInput3HighLimit, aiSPYInput22Reading=aiSPYInput22Reading, aiSPYInput19=aiSPYInput19, aiSPYInput28Delay=aiSPYInput28Delay, aiSPYKeypadCode15=aiSPYKeypadCode15, aiSPYInput1LowLimit=aiSPYInput1LowLimit, aiSPYInput4RlyControl=aiSPYInput4RlyControl, aiSPYInput8Hysteresis=aiSPYInput8Hysteresis, aiSPYInput17Delay=aiSPYInput17Delay, aiSPYInput27RTNDelay=aiSPYInput27RTNDelay, aiSPYInput4Hysteresis=aiSPYInput4Hysteresis, aiSPYInput26Delay=aiSPYInput26Delay, aiSPYRelay3=aiSPYRelay3, aiSPYInput12State=aiSPYInput12State, aiSPYInput13Delay=aiSPYInput13Delay, aiSPYInput3Hysteresis=aiSPYInput3Hysteresis, aiSPYKeypadCode14=aiSPYKeypadCode14, aiSPYRelay6=aiSPYRelay6, aiSPYWellKnownAlarms=aiSPYWellKnownAlarms, aiSPYAlarms=aiSPYAlarms, aiSPYInput3State=aiSPYInput3State, aiSPYInput24Reading=aiSPYInput24Reading, aiSPYInput1Delay=aiSPYInput1Delay, aiSPYInput24Delay=aiSPYInput24Delay, aiSPYAlarmHistoryEntries=aiSPYAlarmHistoryEntries, aiSPYInput4=aiSPYInput4, aiSPYKeypadName18=aiSPYKeypadName18, aiSPYInput6State=aiSPYInput6State, aiSPYAlarmId=aiSPYAlarmId, aiSPYAccessGranted=aiSPYAccessGranted, aiSPYInput7HighLimit=aiSPYInput7HighLimit, aiSPYKeypadCode13=aiSPYKeypadCode13, aiSPYAlarmEntryRemoved=aiSPYAlarmEntryRemoved, aiSPYKeypadName12=aiSPYKeypadName12, aiSPYInput2State=aiSPYInput2State, aiSPYInput7HighAlarm=aiSPYInput7HighAlarm, aiSPYRelay1Status=aiSPYRelay1Status, aiSPYInput23DigAlarm=aiSPYInput23DigAlarm, aiSPYKeypadCode6=aiSPYKeypadCode6, aiSPYRelay4Status=aiSPYRelay4Status, aiSPYInput22DigAlarm=aiSPYInput22DigAlarm, aiSPYInput4UOM=aiSPYInput4UOM, aiSPYInput26=aiSPYInput26, aiSPYInput26RTNDelay=aiSPYInput26RTNDelay, aiSPYKeypadName6=aiSPYKeypadName6, aiSPYInput3LowLimit=aiSPYInput3LowLimit, aiSPYRelay4State=aiSPYRelay4State, aiSPYInput17Reading=aiSPYInput17Reading, aiSPYInput5RlyControl=aiSPYInput5RlyControl, aiSPYInput6Label=aiSPYInput6Label, aiSPYInput16RTNDelay=aiSPYInput16RTNDelay, aiSPYInput5DigAlarm=aiSPYInput5DigAlarm, aiSPYRelay1=aiSPYRelay1, aiSPYInput6HighLimit=aiSPYInput6HighLimit, aiSPYKeypadCode5=aiSPYKeypadCode5, aiSPYInput3RTNDelay=aiSPYInput3RTNDelay, aiSPYInput7Hysteresis=aiSPYInput7Hysteresis, aiSPYInput3DigAlarm=aiSPYInput3DigAlarm, aiSPYInput15DigAlarm=aiSPYInput15DigAlarm)
mibBuilder.exportSymbols("AISPY-MIB", aiSPYInput9DigAlarm=aiSPYInput9DigAlarm, aiSPYAccessDenied=aiSPYAccessDenied, aiSPYInput16State=aiSPYInput16State, aiSPYInput13RTNDelay=aiSPYInput13RTNDelay, aiSPYInput26DigAlarm=aiSPYInput26DigAlarm, aiSPYInput14State=aiSPYInput14State, aiSPYRelay2Status=aiSPYRelay2Status, aiSPYInput4Gain=aiSPYInput4Gain, aiSPYInput10State=aiSPYInput10State, aiSPYKeypadName7=aiSPYKeypadName7, aiSPYInput27RlyControl=aiSPYInput27RlyControl, aiSPYInput3RlyControl=aiSPYInput3RlyControl, aiSPYInput1HighAlarm=aiSPYInput1HighAlarm, aiSPYInput1DigAlarm=aiSPYInput1DigAlarm, aiSPYInput13RlyControl=aiSPYInput13RlyControl, aiSPYInput22=aiSPYInput22, aiSPYInput10RTNDelay=aiSPYInput10RTNDelay, aiSPYInput23Label=aiSPYInput23Label, aiSPYInput24Label=aiSPYInput24Label, aiSPYInput2Offset=aiSPYInput2Offset, aiSPYInput3HighAlarm=aiSPYInput3HighAlarm, aiSPYRelay5Time=aiSPYRelay5Time, aiSPYInput4Offset=aiSPYInput4Offset, aiSPYInput15State=aiSPYInput15State, aiSPYInput8Delay=aiSPYInput8Delay, aiSPYInput6=aiSPYInput6, aiSPYRelay6Time=aiSPYRelay6Time, aiSPYInput2Gain=aiSPYInput2Gain, aiSPYKeypadName15=aiSPYKeypadName15, aiSPYClock=aiSPYClock, aiSPYInput8DigAlarm=aiSPYInput8DigAlarm, aiSPYInput18Delay=aiSPYInput18Delay, aiSPYRelay5Status=aiSPYRelay5Status, aiSPYKeypadName2=aiSPYKeypadName2, aiSPYKeypadName3=aiSPYKeypadName3, aiSPYInput18RlyControl=aiSPYInput18RlyControl, aiSPYInput28RlyControl=aiSPYInput28RlyControl, aiSPYSystem=aiSPYSystem, aiSPYInput14Label=aiSPYInput14Label, aiSPYInput2UOM=aiSPYInput2UOM, aiSPYAlarmsPresent=aiSPYAlarmsPresent, aiSPYAlarmHistoryTable=aiSPYAlarmHistoryTable, aiSPYInput2Delay=aiSPYInput2Delay, aiSPYInput12=aiSPYInput12, aiSPYInput5Label=aiSPYInput5Label, aiSPYInput1State=aiSPYInput1State, aiSPYInput8HighAlarm=aiSPYInput8HighAlarm, aiSPYInput15RTNDelay=aiSPYInput15RTNDelay, aiSPYInput7UOM=aiSPYInput7UOM, aiSPYInput1Hysteresis=aiSPYInput1Hysteresis, aiSPYInput7=aiSPYInput7, aiSPYInput21RlyControl=aiSPYInput21RlyControl, aiSPYAlarmTable=aiSPYAlarmTable, aiSPYInput5HighAlarm=aiSPYInput5HighAlarm, aiSPYInput20State=aiSPYInput20State, aiSPYKeypadName17=aiSPYKeypadName17, aiSPYRelay6Label=aiSPYRelay6Label, aiSPYKeypadName10=aiSPYKeypadName10, aiSPYPersistantTraps=aiSPYPersistantTraps, aiSPYInput2LowAlarm=aiSPYInput2LowAlarm, aiSPYInput21State=aiSPYInput21State, aiSPYInput21Reading=aiSPYInput21Reading, aiSPYInput25=aiSPYInput25, aiSPYInput4LowLimit=aiSPYInput4LowLimit, aiSPYInput3=aiSPYInput3, aiSPYAlarmDescr=aiSPYAlarmDescr, aiSPYInput8UOM=aiSPYInput8UOM, aiSPYKeypadCode1=aiSPYKeypadCode1, aiSPYInput6LowLimit=aiSPYInput6LowLimit, aiSPYInput11=aiSPYInput11, aiSPYInput27=aiSPYInput27, aiSPYKeypadName8=aiSPYKeypadName8, aiSPYInput17Label=aiSPYInput17Label, aiSPYInput13Reading=aiSPYInput13Reading, aiSPYInput11RTNDelay=aiSPYInput11RTNDelay, aiSPYOutputs=aiSPYOutputs, aiSPYInput27Reading=aiSPYInput27Reading, aiSPYInput13=aiSPYInput13, aiSPYKeypadCode2=aiSPYKeypadCode2, aiSPYInput22RlyControl=aiSPYInput22RlyControl, aiSPYLowBatteryThreshold=aiSPYLowBatteryThreshold, aiSPYInput2LowLimit=aiSPYInput2LowLimit, aiSPYInputs=aiSPYInputs, aiSPYInput27Label=aiSPYInput27Label, aiSPYInput14DigAlarm=aiSPYInput14DigAlarm, aiSPYInput2Reading=aiSPYInput2Reading, aiSPYInput9State=aiSPYInput9State, aiSPYIdentSoftwareVersion=aiSPYIdentSoftwareVersion, aiSPYInput2HighAlarm=aiSPYInput2HighAlarm, aiSPYInput11Label=aiSPYInput11Label, aiSPYInput28RTNDelay=aiSPYInput28RTNDelay, aiSPYInput14RlyControl=aiSPYInput14RlyControl, aiSPYInput25Delay=aiSPYInput25Delay, aiSPYInput4HighLimit=aiSPYInput4HighLimit, aiSPYInput6Offset=aiSPYInput6Offset, aiSPYInput23=aiSPYInput23, aiSPYInput25State=aiSPYInput25State, aiSPYInput2Label=aiSPYInput2Label, aiSPYAlarmHistoryId=aiSPYAlarmHistoryId, aiSPYInput8Offset=aiSPYInput8Offset, aiSPYRelay1Label=aiSPYRelay1Label, aiSPYInput1RlyControl=aiSPYInput1RlyControl, aiSPYInput6Hysteresis=aiSPYInput6Hysteresis, aiSPYAlarmEntryAdded=aiSPYAlarmEntryAdded, aiSPYKeypadName19=aiSPYKeypadName19, aiSPYInput16=aiSPYInput16, aiSPYInput2Hysteresis=aiSPYInput2Hysteresis, aiSPYInput28Label=aiSPYInput28Label, aiSPYInput6Reading=aiSPYInput6Reading, aiSPYInput19RTNDelay=aiSPYInput19RTNDelay, aiSPYInput1Label=aiSPYInput1Label, aii=aii, aiSPYKeypadCode7=aiSPYKeypadCode7, aiSPYInput2RlyControl=aiSPYInput2RlyControl, aiSPYInput24RlyControl=aiSPYInput24RlyControl, aiSPYInput24DigAlarm=aiSPYInput24DigAlarm, aiSPYInput2DigAlarm=aiSPYInput2DigAlarm, aiSPYOnBattery=aiSPYOnBattery, aiSPYInput6RTNDelay=aiSPYInput6RTNDelay, aiSPYInput3Reading=aiSPYInput3Reading, aiSPYInput6RlyControl=aiSPYInput6RlyControl, aiSPYInput25Label=aiSPYInput25Label, aiSPYInput8Reading=aiSPYInput8Reading, aiSPYInput21Label=aiSPYInput21Label, aiSPYInput10Delay=aiSPYInput10Delay, aiSPYInput12Label=aiSPYInput12Label, aiSPYAlarmHistory=aiSPYAlarmHistory, aiSPYInput24RTNDelay=aiSPYInput24RTNDelay, aiSPYInput5Offset=aiSPYInput5Offset, aiSPYInput13Label=aiSPYInput13Label, aiSPYInput4RTNDelay=aiSPYInput4RTNDelay, aiSPYRelay5State=aiSPYRelay5State, aiSPYInput23Delay=aiSPYInput23Delay, aiSPYInput11DigAlarm=aiSPYInput11DigAlarm, aiSPYTraps=aiSPYTraps, aiSPYInput9RlyControl=aiSPYInput9RlyControl, aiSPYAlarmHistoryClear=aiSPYAlarmHistoryClear, aiSPYInput18=aiSPYInput18, aiSPYRelay3Label=aiSPYRelay3Label, aiSPYInput4Label=aiSPYInput4Label, aiSPYKeypad=aiSPYKeypad, aiSPYInput8RTNDelay=aiSPYInput8RTNDelay, aiSPYInput10=aiSPYInput10, aiSPYInput9Reading=aiSPYInput9Reading, aiSPYKeypadName9=aiSPYKeypadName9, aiSPYInput25Reading=aiSPYInput25Reading)
