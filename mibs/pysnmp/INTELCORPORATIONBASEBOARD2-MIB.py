#
# PySNMP MIB module INTELCORPORATIONBASEBOARD2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONBASEBOARD2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, enterprises, Bits, ModuleIdentity, Gauge32, NotificationType, IpAddress, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "enterprises", "Bits", "ModuleIdentity", "Gauge32", "NotificationType", "IpAddress", "Unsigned32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
platforms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
basebrd2 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tGeneralInformation = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2), )
if mibBuilder.loadTexts: tGeneralInformation.setStatus('mandatory')
eGeneralInformation = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eGeneralInformation.setStatus('mandatory')
a2SystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemName.setStatus('mandatory')
a2SystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemLocation.setStatus('mandatory')
a2SystemPrimaryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserName.setStatus('mandatory')
a2SystemPrimaryUserPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserPhone.setStatus('mandatory')
a2SystemBootupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBootupTime.setStatus('mandatory')
a2SystemDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 2, 1, 6), DmiDateX()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemDateTime.setStatus('mandatory')
tSystemBios = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4), )
if mibBuilder.loadTexts: tSystemBios.setStatus('mandatory')
eSystemBios = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a4BiosIndex"))
if mibBuilder.loadTexts: eSystemBios.setStatus('mandatory')
a4BiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosIndex.setStatus('mandatory')
a4BiosManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosManufacturer.setStatus('mandatory')
a4BiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosVersion.setStatus('mandatory')
a4BiosRomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosRomSize.setStatus('mandatory')
a4BiosStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 5), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosStartingAddress.setStatus('mandatory')
a4BiosEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 6), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosEndingAddress.setStatus('mandatory')
a4BiosLoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosLoaderVersion.setStatus('mandatory')
a4BiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 8), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosReleaseDate.setStatus('mandatory')
a4PrimaryBios = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PrimaryBios.setStatus('mandatory')
tSystemBiosCharacteristics = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5), )
if mibBuilder.loadTexts: tSystemBiosCharacteristics.setStatus('mandatory')
eSystemBiosCharacteristics = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a5BiosCharacteristicIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a5BiosNumber"))
if mibBuilder.loadTexts: eSystemBiosCharacteristics.setStatus('mandatory')
a5BiosCharacteristicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicIndex.setStatus('mandatory')
a5BiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosNumber.setStatus('mandatory')
a5BiosCharacteristic = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnsupported", 3), ("vIsaSupport", 4), ("vMcaSupport", 5), ("vEisaSupport", 6), ("vPciSupport", 7), ("vPcmciaSupport", 8), ("vPnpSupport", 9), ("vApmSupport", 10), ("vUpgradeableBios", 11), ("vBiosShadowingAllowed", 12), ("vVlVesaSupport", 13), ("vEscdSupport", 14), ("vPc-98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristic.setStatus('mandatory')
a5BiosCharacteristicDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicDescription.setStatus('mandatory')
tProcessor = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6), )
if mibBuilder.loadTexts: tProcessor.setStatus('mandatory')
eProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: eProcessor.setStatus('mandatory')
a6ProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorIndex.setStatus('mandatory')
a6ProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCentralProcessor", 3), ("vMathProcessor", 4), ("vDspProcessor", 5), ("vVideoProcessor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorType.setStatus('mandatory')
a6ProcessorFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 25, 32, 33, 34, 35, 36, 48, 64, 80, 96, 97, 98, 99, 100, 101, 112, 128, 144, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8086", 3), ("v80286", 4), ("v80386", 5), ("v80486", 6), ("v8087", 7), ("v80287", 8), ("v80387", 9), ("v80487", 10), ("vPentiumFamily", 11), ("vPentiumPro", 12), ("vM1Family", 18), ("vK5Family", 25), ("vPowerPcFamily", 32), ("vPowerPc601", 33), ("vPowerPc603", 34), ("vPowerPc603plus", 35), ("vPowerPc604", 36), ("vAlphaFamily", 48), ("vMipsFamily", 64), ("vSparcFamily", 80), ("v68040", 96), ("v68xxxFamily", 97), ("v68000", 98), ("v68010", 99), ("v68020", 100), ("v68030", 101), ("vHobbitFamily", 112), ("vWeitek", 128), ("vPa-riscFamily", 144), ("vV30Family", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorFamily.setStatus('mandatory')
a6ProcessorVersionInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorVersionInformation.setStatus('mandatory')
a6MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6MaximumSpeed.setStatus('mandatory')
a6CurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6CurrentSpeed.setStatus('mandatory')
a6ProcessorUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDaughterBoard", 3), ("vZifSocket", 4), ("vReplacementpiggyBack", 5), ("vNone", 6), ("vLifSocket", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorUpgrade.setStatus('mandatory')
a6FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6FruGroupIndex.setStatus('mandatory')
a6OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6OperationalGroupIndex.setStatus('mandatory')
a6Level1CacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Level1CacheIndex.setStatus('mandatory')
a6Level2CacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Level2CacheIndex.setStatus('mandatory')
a6Level3CacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 6, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Level3CacheIndex.setStatus('mandatory')
tMotherboard = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7), )
if mibBuilder.loadTexts: tMotherboard.setStatus('mandatory')
eMotherboard = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMotherboard.setStatus('mandatory')
a7NumberOfExpansionSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NumberOfExpansionSlots.setStatus('mandatory')
a7FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FruGroupIndex.setStatus('mandatory')
a7OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7OperationalGroupIndex.setStatus('mandatory')
tSystemCache = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10), )
if mibBuilder.loadTexts: tSystemCache.setStatus('mandatory')
eSystemCache = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a10SystemCacheIndex"))
if mibBuilder.loadTexts: eSystemCache.setStatus('mandatory')
a10SystemCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheIndex.setStatus('mandatory')
a10SystemCacheLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPrimary", 3), ("vSecondary", 4), ("vTertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheLevel.setStatus('mandatory')
a10SystemCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSpeed.setStatus('mandatory')
a10SystemCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSize.setStatus('mandatory')
a10SystemCacheWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vWriteBack", 3), ("vWriteThrough", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheWritePolicy.setStatus('mandatory')
a10SystemCacheErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheErrorCorrection.setStatus('mandatory')
a10FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FruGroupIndex.setStatus('mandatory')
a10OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalGroupIndex.setStatus('mandatory')
a10SystemCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInstruction", 3), ("vData", 4), ("vUnified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheType.setStatus('mandatory')
tPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17), )
if mibBuilder.loadTexts: tPowerSupply.setStatus('mandatory')
ePowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: ePowerSupply.setStatus('mandatory')
a17PowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerSupplyIndex.setStatus('mandatory')
a17FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17FruGroupIndex.setStatus('mandatory')
a17OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17OperationalGroupIndex.setStatus('mandatory')
a17PowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerUnitIndex.setStatus('mandatory')
a17PowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLinear", 3), ("vSwitching", 4), ("vBattery", 5), ("vUps", 6), ("vConverter", 7), ("vRegulator", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerSupplyType.setStatus('mandatory')
a17InputVoltageCapabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17InputVoltageCapabilityDescription.setStatus('mandatory')
a17Range1InputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputVoltageLow.setStatus('mandatory')
a17Range1InputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputVoltageHigh.setStatus('mandatory')
a17Range1VoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1VoltageProbeIndex.setStatus('mandatory')
a17Range1ElectricalCurrentProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1ElectricalCurrentProbeIndex.setStatus('mandatory')
a17Range2InputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputVoltageLow.setStatus('mandatory')
a17Range2InputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputVoltageHigh.setStatus('mandatory')
a17Range2VoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2VoltageProbeIndex.setStatus('mandatory')
a17Range2CurrentProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2CurrentProbeIndex.setStatus('mandatory')
a17ActiveInputVoltageRange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRange1", 3), ("vRange2", 4), ("vBoth", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ActiveInputVoltageRange.setStatus('mandatory')
a17InputVoltageRangeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vManual", 3), ("vAutoswitch", 4), ("vWideRange", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17InputVoltageRangeSwitching.setStatus('mandatory')
a17Range1InputFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputFrequencyLow.setStatus('mandatory')
a17Range1InputFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range1InputFrequencyHigh.setStatus('mandatory')
a17Range2InputFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputFrequencyLow.setStatus('mandatory')
a17Range2InputFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Range2InputFrequencyHigh.setStatus('mandatory')
a17TotalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 17, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17TotalOutputPower.setStatus('mandatory')
tSystemSlots = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19), )
if mibBuilder.loadTexts: tSystemSlots.setStatus('mandatory')
eSystemSlots = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a19SlotIndex"))
if mibBuilder.loadTexts: eSystemSlots.setStatus('mandatory')
a19SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotIndex.setStatus('mandatory')
a19SlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotType.setStatus('mandatory')
a19SlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotWidth.setStatus('mandatory')
a19CurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAvailable", 3), ("vInUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19CurrentUsage.setStatus('mandatory')
a19SlotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotDescription.setStatus('mandatory')
a19SlotCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vBusConnector", 3), ("vPcmciaSlot", 4), ("vMotherboard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotCategory.setStatus('mandatory')
a19VirtualSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19VirtualSlot.setStatus('mandatory')
a19ResourceUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 19, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19ResourceUserId.setStatus('mandatory')
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a30FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
a30FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruIndex.setStatus('mandatory')
a30DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30DeviceGroupIndex.setStatus('mandatory')
a30Description = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30Description.setStatus('mandatory')
a30Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30Manufacturer.setStatus('mandatory')
a30Model = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30Model.setStatus('mandatory')
a30PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30PartNumber.setStatus('mandatory')
a30FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruSerialNumber.setStatus('mandatory')
a30RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30RevisionLevel.setStatus('mandatory')
a30WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30WarrantyStartDate.setStatus('mandatory')
a30WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30WarrantyDuration.setStatus('mandatory')
a30SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30SupportPhoneNumber.setStatus('mandatory')
a30FruInternetUniformResourceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 30, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruInternetUniformResourceLocator.setStatus('mandatory')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a31OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
a31OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setStatus('mandatory')
a31DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31DeviceGroupIndex.setStatus('mandatory')
a31OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStatus.setStatus('mandatory')
a31UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31UsageState.setStatus('mandatory')
a31AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AvailabilityStatus.setStatus('mandatory')
a31AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AdministrativeState.setStatus('mandatory')
a31FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31FatalErrorCount.setStatus('mandatory')
a31MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31MajorErrorCount.setStatus('mandatory')
a31WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31WarningErrorCount.setStatus('mandatory')
a31CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31CurrentErrorStatus.setStatus('mandatory')
tPhysicalMemoryArray = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34), )
if mibBuilder.loadTexts: tPhysicalMemoryArray.setStatus('mandatory')
ePhysicalMemoryArray = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a34MemoryArrayTableIndex"))
if mibBuilder.loadTexts: ePhysicalMemoryArray.setStatus('mandatory')
a34MemoryArrayTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryArrayTableIndex.setStatus('mandatory')
a34MemoryArrayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemBoardOrMotherboard", 3), ("vIsaAdd-onCard", 4), ("vEisaAdd-onCard", 5), ("vPciAdd-onCard", 6), ("vMcaAdd-onCard", 7), ("vPcmciaAdd-onCard", 8), ("vProprietaryAdd-onCard", 9), ("vNubus", 16), ("vPc-98c20Add-onCard", 160), ("vPc-98c24Add-onCard", 161), ("vPc-98eAdd-onCard", 162), ("vPc-98localBusAdd-onCard", 163), ("vPc-98cardSlotAdd-onCard", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryArrayLocation.setStatus('mandatory')
a34MemoryArrayUse = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemMemory", 3), ("vVideoMemory", 4), ("vFlashMemory", 5), ("vNonVolatileRam", 6), ("vCacheMemory", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryArrayUse.setStatus('mandatory')
a34MaximumMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MaximumMemoryCapacity.setStatus('mandatory')
a34NumberOfMemoryDeviceSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34NumberOfMemoryDeviceSockets.setStatus('mandatory')
a34NumberOfMemoryDeviceSocketsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34NumberOfMemoryDeviceSocketsUsed.setStatus('mandatory')
a34MemoryErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6), ("vCrc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34MemoryErrorCorrection.setStatus('mandatory')
a34ArrayErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vBadRead", 4), ("vParityError", 5), ("vSingle-bitError", 6), ("vDouble-bitError", 7), ("vMulti-bitError", 8), ("vNibbleError", 9), ("vChecksumError", 10), ("vCrcError", 11), ("vCorrectedSingle-bitError", 12), ("vCorrectedError", 13), ("vUncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ArrayErrorType.setStatus('mandatory')
a34LastErrorUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoUpdateSinceLastInstrumentationStart", 3), ("vUpdatedFromInformationObtainedPriorToIn", 4), ("vUpdatedDuringInstrumentationRun-time", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34LastErrorUpdate.setStatus('mandatory')
a34ErrorOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRead", 3), ("vWrite", 4), ("vPartialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorOperation.setStatus('mandatory')
a34ErrorDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorDataSize.setStatus('mandatory')
a34ErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorData.setStatus('mandatory')
a34VendorSyndrome = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 13), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34VendorSyndrome.setStatus('mandatory')
a34ErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 14), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorAddress.setStatus('mandatory')
a34ErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ErrorResolution.setStatus('mandatory')
a34FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34FruGroupIndex.setStatus('mandatory')
a34OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 34, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34OperationalGroupIndex.setStatus('mandatory')
tMemoryArrayMappedAddresses = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35), )
if mibBuilder.loadTexts: tMemoryArrayMappedAddresses.setStatus('mandatory')
eMemoryArrayMappedAddresses = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a35MemoryArrayMappedAddressesTableIndex"))
if mibBuilder.loadTexts: eMemoryArrayMappedAddresses.setStatus('mandatory')
a35MemoryArrayMappedAddressesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MemoryArrayMappedAddressesTableIndex.setStatus('mandatory')
a35MemoryArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MemoryArrayIndex.setStatus('mandatory')
a35MappedRangeStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MappedRangeStartingAddress.setStatus('mandatory')
a35MappedRangeEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35MappedRangeEndingAddress.setStatus('mandatory')
a35PartitionId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35PartitionId.setStatus('mandatory')
a35PartitionWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35PartitionWidth.setStatus('mandatory')
a35OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 35, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35OperationalGroupIndex.setStatus('mandatory')
tMemoryDevice = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36), )
if mibBuilder.loadTexts: tMemoryDevice.setStatus('mandatory')
eMemoryDevice = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a36MemoryDeviceTableIndex"))
if mibBuilder.loadTexts: eMemoryDevice.setStatus('mandatory')
a36MemoryDeviceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36MemoryDeviceTableIndex.setStatus('mandatory')
a36MemoryArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36MemoryArrayIndex.setStatus('mandatory')
a36DeviceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceLocator.setStatus('mandatory')
a36BankLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36BankLocator.setStatus('mandatory')
a36Size = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36Size.setStatus('mandatory')
a36FormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSimm", 3), ("vSip", 4), ("vChip", 5), ("vDip", 6), ("vZip", 7), ("vProprietaryCard", 8), ("vDimm", 9), ("vTsop", 10), ("vRowOfChips", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36FormFactor.setStatus('mandatory')
a36TotalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36TotalWidth.setStatus('mandatory')
a36DataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DataWidth.setStatus('mandatory')
a36MemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDram", 3), ("vEdram", 4), ("vVram", 5), ("vSram", 6), ("vRam", 7), ("vRom", 8), ("vFlash", 9), ("vEeprom", 10), ("vFeprom", 11), ("vEprom", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36MemoryType.setStatus('mandatory')
a36TypeDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFastPaged", 3), ("vStaticColumn", 4), ("vPseudo-static", 5), ("vRambus", 6), ("vSynchronous", 7), ("vCmos", 8), ("vEdo", 9), ("vWindowDram", 10), ("vCacheDram", 11), ("vNon-volatile", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36TypeDetail.setStatus('mandatory')
a36DeviceSet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceSet.setStatus('mandatory')
a36DeviceErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vBadRead", 4), ("vParityError", 5), ("vSingle-bitError", 6), ("vDouble-bitError", 7), ("vMulti-bitError", 8), ("vNibbleError", 9), ("vChecksumError", 10), ("vCrcError", 11), ("vCorrectedSingle-bitError", 12), ("vCorrectedError", 13), ("vUncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceErrorType.setStatus('mandatory')
a36ErrorGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDeviceLevel", 3), ("vMemoryPartitionLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorGranularity.setStatus('mandatory')
a36LastErrorUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoUpdateSinceLastInstrumentationStart", 3), ("vUpdatedFromInformationObtainedPriorToIn", 4), ("vUpdatedDuringInstrumentationRun-time", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36LastErrorUpdate.setStatus('mandatory')
a36ErrorOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRead", 3), ("vWrite", 4), ("vPartialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorOperation.setStatus('mandatory')
a36ErrorDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorDataSize.setStatus('mandatory')
a36ErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 17), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorData.setStatus('mandatory')
a36VendorSyndrome = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 18), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36VendorSyndrome.setStatus('mandatory')
a36DeviceErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceErrorAddress.setStatus('mandatory')
a36ArrayErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ArrayErrorAddress.setStatus('mandatory')
a36ErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ErrorResolution.setStatus('mandatory')
a36FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36FruGroupIndex.setStatus('mandatory')
a36OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 36, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36OperationalGroupIndex.setStatus('mandatory')
tMemoryDeviceMappedAddresses = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37), )
if mibBuilder.loadTexts: tMemoryDeviceMappedAddresses.setStatus('mandatory')
eMemoryDeviceMappedAddresses = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a37MemoryDeviceMappedAddressesTableIndex"))
if mibBuilder.loadTexts: eMemoryDeviceMappedAddresses.setStatus('mandatory')
a37MemoryDeviceMappedAddressesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MemoryDeviceMappedAddressesTableIndex.setStatus('mandatory')
a37MemoryDeviceSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MemoryDeviceSetId.setStatus('mandatory')
a37Partition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37Partition.setStatus('mandatory')
a37MappedRangeStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MappedRangeStartingAddress.setStatus('mandatory')
a37MappedRangeEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37MappedRangeEndingAddress.setStatus('mandatory')
a37PartitionRowPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37PartitionRowPosition.setStatus('mandatory')
a37InterleavePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37InterleavePosition.setStatus('mandatory')
a37DataDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 37, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37DataDepth.setStatus('mandatory')
tSystemHardwareSecurity = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50), )
if mibBuilder.loadTexts: tSystemHardwareSecurity.setStatus('mandatory')
eSystemHardwareSecurity = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemHardwareSecurity.setStatus('mandatory')
a50Power_onPasswordStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setLabel("a50Power-onPasswordStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: a50Power_onPasswordStatus.setStatus('mandatory')
a50KeyboardPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a50KeyboardPasswordStatus.setStatus('mandatory')
a50AdministratorPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a50AdministratorPasswordStatus.setStatus('mandatory')
a50FrontPanelResetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 50, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDisabled", 3), ("vEnabled", 4), ("vNotImplemented", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a50FrontPanelResetStatus.setStatus('mandatory')
tSystemPowerControls = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52), )
if mibBuilder.loadTexts: tSystemPowerControls.setStatus('mandatory')
eSystemPowerControls = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemPowerControls.setStatus('mandatory')
a52PowerControlRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPowerOff", 3), ("vPowerOffThenOnAgain", 4), ("vEnterStandbyMode", 5), ("vEnterSuspendMode", 6), ("vEnterHibernationMode", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a52PowerControlRequest.setStatus('mandatory')
a52TimedPower_onAvailable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setLabel("a52TimedPower-onAvailable").setMaxAccess("readonly")
if mibBuilder.loadTexts: a52TimedPower_onAvailable.setStatus('mandatory')
a52TimeToNextScheduledPower_on = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 52, 1, 3), DmiInteger()).setLabel("a52TimeToNextScheduledPower-on").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a52TimeToNextScheduledPower_on.setStatus('mandatory')
tVoltageProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54), )
if mibBuilder.loadTexts: tVoltageProbe.setStatus('mandatory')
eVoltageProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
if mibBuilder.loadTexts: eVoltageProbe.setStatus('mandatory')
a54VoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeIndex.setStatus('mandatory')
a54VoltageProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vProcessor", 3), ("vDisk", 4), ("vPeripheralBay", 5), ("vSystemManagementModule", 6), ("vMotherboard", 7), ("vMemoryModule", 8), ("vProcessorModule", 9), ("vPowerUnit", 10), ("vAdd-inCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeLocation.setStatus('mandatory')
a54VoltageProbeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeDescription.setStatus('mandatory')
a54VoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageStatus.setStatus('mandatory')
a54VoltageProbeVoltageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeVoltageLevel.setStatus('mandatory')
a54MonitoredVoltageNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54MonitoredVoltageNominalLevel.setStatus('mandatory')
a54MonitoredVoltageNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54MonitoredVoltageNormalMaximum.setStatus('mandatory')
a54MonitoredVoltageNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54MonitoredVoltageNormalMinimum.setStatus('mandatory')
a54VoltageProbeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeMaximum.setStatus('mandatory')
a54VoltageProbeMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54VoltageProbeMinimum.setStatus('mandatory')
a54VoltageLevelLowerThreshold_Non_critic = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 11), DmiInteger()).setLabel("a54VoltageLevelLowerThreshold-Non-critic").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Non_critic.setStatus('mandatory')
a54VoltageLevelUpperThreshold_Non_critic = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 12), DmiInteger()).setLabel("a54VoltageLevelUpperThreshold-Non-critic").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Non_critic.setStatus('mandatory')
a54VoltageLevelLowerThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 13), DmiInteger()).setLabel("a54VoltageLevelLowerThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Critical.setStatus('mandatory')
a54VoltageLevelUpperThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 14), DmiInteger()).setLabel("a54VoltageLevelUpperThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Critical.setStatus('mandatory')
a54VoltageLevelLowerThreshold_Non_recove = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 15), DmiInteger()).setLabel("a54VoltageLevelLowerThreshold-Non-recove").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelLowerThreshold_Non_recove.setStatus('mandatory')
a54VoltageLevelUpperThreshold_Non_recove = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 16), DmiInteger()).setLabel("a54VoltageLevelUpperThreshold-Non-recove").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageLevelUpperThreshold_Non_recove.setStatus('mandatory')
a54VoltageProbeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageProbeResolution.setStatus('mandatory')
a54VoltageProbeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageProbeTolerance.setStatus('mandatory')
a54VoltageProbeAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a54VoltageProbeAccuracy.setStatus('mandatory')
a54FruGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54FruGroupIndex.setStatus('mandatory')
a54OperationalGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 54, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a54OperationalGroupIndex.setStatus('mandatory')
tTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55), )
if mibBuilder.loadTexts: tTemperatureProbe.setStatus('mandatory')
eTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
if mibBuilder.loadTexts: eTemperatureProbe.setStatus('mandatory')
a55TemperatureProbeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeTableIndex.setStatus('mandatory')
a55TemperatureProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vProcessor", 3), ("vDisk", 4), ("vPeripheralBay", 5), ("vSmbMaster", 6), ("vMotherboard", 7), ("vMemoryModule", 8), ("vProcessorModule", 9), ("vPowerUnit", 10), ("vAdd-inCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeLocation.setStatus('mandatory')
a55TemperatureProbeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeDescription.setStatus('mandatory')
a55TemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureStatus.setStatus('mandatory')
a55TemperatureProbeTemperatureReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeTemperatureReading.setStatus('mandatory')
a55MonitoredTemperatureNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55MonitoredTemperatureNominalReading.setStatus('mandatory')
a55MonitoredTemperatureNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55MonitoredTemperatureNormalMaximum.setStatus('mandatory')
a55MonitoredTemperatureNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55MonitoredTemperatureNormalMinimum.setStatus('mandatory')
a55TemperatureProbeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeMaximum.setStatus('mandatory')
a55TemperatureProbeMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55TemperatureProbeMinimum.setStatus('mandatory')
a55TemperatureLowerThreshold_Non_critica = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 11), DmiInteger()).setLabel("a55TemperatureLowerThreshold-Non-critica").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Non_critica.setStatus('mandatory')
a55TemperatureUpperThreshold_Non_critica = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 12), DmiInteger()).setLabel("a55TemperatureUpperThreshold-Non-critica").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Non_critica.setStatus('mandatory')
a55TemperatureLowerThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 13), DmiInteger()).setLabel("a55TemperatureLowerThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Critical.setStatus('mandatory')
a55TemperatureUpperThreshold_Critical = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 14), DmiInteger()).setLabel("a55TemperatureUpperThreshold-Critical").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Critical.setStatus('mandatory')
a55TemperatureLowerThreshold_Non_recover = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 15), DmiInteger()).setLabel("a55TemperatureLowerThreshold-Non-recover").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureLowerThreshold_Non_recover.setStatus('mandatory')
a55TemperatureUpperThreshold_Non_recover = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 16), DmiInteger()).setLabel("a55TemperatureUpperThreshold-Non-recover").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureUpperThreshold_Non_recover.setStatus('mandatory')
a55TemperatureProbeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureProbeResolution.setStatus('mandatory')
a55TemperatureProbeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureProbeTolerance.setStatus('mandatory')
a55TemperatureProbeAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a55TemperatureProbeAccuracy.setStatus('mandatory')
a55FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55FruGroupIndex.setStatus('mandatory')
a55OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 55, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a55OperationalGroupIndex.setStatus('mandatory')
tPhysicalContainerGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64), )
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setStatus('mandatory')
ePhysicalContainerGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a64ContainerIndex"))
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setStatus('mandatory')
a64ContainerOrChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDesktop", 3), ("vLowProfileDesktop", 4), ("vPizzaBox", 5), ("vMiniTower", 6), ("vTower", 7), ("vPortable", 8), ("vLaptop", 9), ("vNotebook", 10), ("vHandHeld", 11), ("vDockingStation", 12), ("vAllInOne", 13), ("vSubNotebook", 14), ("vSpace-saving", 15), ("vLunchBox", 16), ("vMainSystemChassis", 17), ("vExpansionChassis", 18), ("vSubchassis", 19), ("vBusExpansionChassis", 20), ("vPeripheralChassis", 21), ("vRaidChassis", 22), ("vRackMountChassis", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ContainerOrChassisType.setStatus('mandatory')
a64AssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a64AssetTag.setStatus('mandatory')
a64ChassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ChassisLockPresent.setStatus('mandatory')
a64BootupState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64BootupState.setStatus('mandatory')
a64PowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64PowerState.setStatus('mandatory')
a64ThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ThermalState.setStatus('mandatory')
a64FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64FruGroupIndex.setStatus('mandatory')
a64OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64OperationalGroupIndex.setStatus('mandatory')
a64ContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ContainerIndex.setStatus('mandatory')
a64ContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 10), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a64ContainerName.setStatus('mandatory')
a64ContainerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 11), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a64ContainerLocation.setStatus('mandatory')
a64ContainerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 64, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoSecurityBreachDetected", 3), ("vContainerSecurityBreachAttempted", 4), ("vContainerSecurityBreached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a64ContainerSecurityStatus.setStatus('mandatory')
tOperatingSystem = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66), )
if mibBuilder.loadTexts: tOperatingSystem.setStatus('mandatory')
eOperatingSystem = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a66OperatingSystemIndex"))
if mibBuilder.loadTexts: eOperatingSystem.setStatus('mandatory')
a66OperatingSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemIndex.setStatus('mandatory')
a66OperatingSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemName.setStatus('mandatory')
a66OperatingSystemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemVersion.setStatus('mandatory')
a66PrimaryOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66PrimaryOperatingSystem.setStatus('mandatory')
a66OperatingSystemBootDeviceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHardDisk", 3), ("vFloppyDisk", 4), ("vOpticalRom", 5), ("vOpticalWorm", 6), ("vOpticalRw", 7), ("vCompactDisk", 8), ("vFlashDisk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemBootDeviceStorageType.setStatus('mandatory')
a66OperatingSystemBootDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemBootDeviceIndex.setStatus('mandatory')
a66OperatingSystemBootPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemBootPartitionIndex.setStatus('mandatory')
a66OperatingSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 66, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a66OperatingSystemDescription.setStatus('mandatory')
tPowerUnitGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67), )
if mibBuilder.loadTexts: tPowerUnitGlobalTable.setStatus('mandatory')
ePowerUnitGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
if mibBuilder.loadTexts: ePowerUnitGlobalTable.setStatus('mandatory')
a67PowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a67PowerUnitIndex.setStatus('mandatory')
a67PowerUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 67, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotApplicableUnitNotRedundant", 3), ("vOffline", 4), ("vFullyRedundant", 5), ("vDegradedRedundancy", 6), ("vRedundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a67PowerUnitRedundancyStatus.setStatus('mandatory')
tParallelPorts = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74), )
if mibBuilder.loadTexts: tParallelPorts.setStatus('mandatory')
eParallelPorts = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a74ParallelPortIndex"))
if mibBuilder.loadTexts: eParallelPorts.setStatus('mandatory')
a74ParallelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelPortIndex.setStatus('mandatory')
a74ParallelBaseIoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelBaseIoAddress.setStatus('mandatory')
a74IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74IrqUsed.setStatus('mandatory')
a74LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74LogicalName.setStatus('mandatory')
a74ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 160, 161, 162))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-25Female", 3), ("vDb-25Male", 4), ("vCentronics", 5), ("vMini-centronics", 6), ("vProprietary", 7), ("vCentronics-14", 160), ("vDb-36Female", 161), ("vMini-centronics-20", 162)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ConnectorType.setStatus('mandatory')
a74ConnectorPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtat", 3), ("vPs2", 4), ("vIeee1284", 5), ("vProprietary", 6), ("vPc-98", 160), ("vPc-98-hireso", 161), ("vPc-h98", 162), ("vPc-98note", 163), ("vPc-98full", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ConnectorPinout.setStatus('mandatory')
a74DmaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74DmaSupport.setStatus('mandatory')
a74ParallelPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelPortCapabilities.setStatus('mandatory')
a74OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74OperationalGroupIndex.setStatus('mandatory')
a74ParallelPortSecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 74, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5), ("vBoot-bypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a74ParallelPortSecuritySettings.setStatus('mandatory')
tSerialPorts = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75), )
if mibBuilder.loadTexts: tSerialPorts.setStatus('mandatory')
eSerialPorts = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a75SerialPortIndex"))
if mibBuilder.loadTexts: eSerialPorts.setStatus('mandatory')
a75SerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialPortIndex.setStatus('mandatory')
a75SerialBaseIoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialBaseIoAddress.setStatus('mandatory')
a75IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75IrqUsed.setStatus('mandatory')
a75LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75LogicalName.setStatus('mandatory')
a75ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 160, 161))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-9PinMale", 3), ("vDb-9PinFemale", 4), ("vDb-25PinMale", 5), ("vDb-25PinFemale", 6), ("vRj-11", 7), ("vRj-45", 8), ("vProprietary", 9), ("vCircularDin-8Male", 10), ("vCircularDin-8Female", 11), ("vMini-centronicsType-14", 160), ("vMini-centronicsType-26", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75ConnectorType.setStatus('mandatory')
a75MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75MaximumSpeed.setStatus('mandatory')
a75SerialPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtatCompatible", 3), ("v16450Compatible", 4), ("v16550Compatible", 5), ("v16550aCompatible", 6), ("v8251Compatible", 160), ("v8251fifoCompatible", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialPortCapabilities.setStatus('mandatory')
a75OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75OperationalGroupIndex.setStatus('mandatory')
a75SerialPortSecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 75, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5), ("vBoot-bypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a75SerialPortSecuritySettings.setStatus('mandatory')
tCoolingDevice = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81), )
if mibBuilder.loadTexts: tCoolingDevice.setStatus('mandatory')
eCoolingDevice = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a81CoolingDeviceTableIndex"))
if mibBuilder.loadTexts: eCoolingDevice.setStatus('mandatory')
a81CoolingDeviceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81CoolingDeviceTableIndex.setStatus('mandatory')
a81FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81FruGroupIndex.setStatus('mandatory')
a81OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81OperationalGroupIndex.setStatus('mandatory')
a81CoolingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81CoolingUnitIndex.setStatus('mandatory')
a81CoolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFan", 3), ("vCentrifugalBlower", 4), ("vChipFan", 5), ("vCabinetFan", 6), ("vPowerSupplyFan", 7), ("vHeatPipe", 8), ("vIntegratedRefrigeration", 9), ("vActiveCooling", 32), ("vPassiveCooling", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81CoolingDeviceType.setStatus('mandatory')
a81TemperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 81, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a81TemperatureProbeIndex.setStatus('mandatory')
tVideo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83), )
if mibBuilder.loadTexts: tVideo.setStatus('mandatory')
eVideo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a83VideoIndex"))
if mibBuilder.loadTexts: eVideo.setStatus('mandatory')
a83VideoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoIndex.setStatus('mandatory')
a83VideoType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCga", 3), ("vEga", 4), ("vVga", 5), ("vSvga", 6), ("vMda", 7), ("vHgc", 8), ("vMcga", 9), ("v8514a", 10), ("vXga", 11), ("vLinearFrameBuffer", 12), ("vPc-98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoType.setStatus('mandatory')
a83CurrentVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentVideoMode.setStatus('mandatory')
a83MinimumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83MinimumRefreshRate.setStatus('mandatory')
a83MaximumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83MaximumRefreshRate.setStatus('mandatory')
a83VideoMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vVram", 3), ("vDram", 4), ("vSram", 5), ("vWram", 6), ("vEdoRam", 7), ("vBurstSynchronousDram", 8), ("vPipelinedBurstSram", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoMemoryType.setStatus('mandatory')
a83VideoRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoRamMemorySize.setStatus('mandatory')
a83ScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInterlaced", 3), ("vNonInterlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83ScanMode.setStatus('mandatory')
a83VideoPhysicalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIntegrated", 3), ("vAdd-onCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83VideoPhysicalLocation.setStatus('mandatory')
a83CurrentVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentVerticalResolution.setStatus('mandatory')
a83CurrentHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentHorizontalResolution.setStatus('mandatory')
a83CurrentNumberOfBitsPerPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentNumberOfBitsPerPixel.setStatus('mandatory')
a83CurrentNumberOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentNumberOfRows.setStatus('mandatory')
a83CurrentNumberOfColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentNumberOfColumns.setStatus('mandatory')
a83CurrentRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83CurrentRefreshRate.setStatus('mandatory')
a83FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83FruGroupIndex.setStatus('mandatory')
a83OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 83, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a83OperationalGroupIndex.setStatus('mandatory')
tVideoBios = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84), )
if mibBuilder.loadTexts: tVideoBios.setStatus('mandatory')
eVideoBios = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a84VideoBiosIndex"))
if mibBuilder.loadTexts: eVideoBios.setStatus('mandatory')
a84VideoBiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosIndex.setStatus('mandatory')
a84VideoBiosManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosManufacturer.setStatus('mandatory')
a84VideoBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosVersion.setStatus('mandatory')
a84VideoBiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 4), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosReleaseDate.setStatus('mandatory')
a84VideoBiosShadowingState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 84, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a84VideoBiosShadowingState.setStatus('mandatory')
tMouse = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91), )
if mibBuilder.loadTexts: tMouse.setStatus('mandatory')
eMouse = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMouse.setStatus('mandatory')
a91MouseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 160, 161))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSerial", 3), ("vPs2", 4), ("vInfrared", 5), ("vHp-hil", 6), ("vBusMouse", 7), ("vAdb", 8), ("vBusMouseDb-9", 160), ("vBusMouseMicro-din", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseInterface.setStatus('mandatory')
a91MouseIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseIrq.setStatus('mandatory')
a91MouseButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseButtons.setStatus('mandatory')
a91MousePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MousePortName.setStatus('mandatory')
a91MouseDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseDriverName.setStatus('mandatory')
a91MouseDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91MouseDriverVersion.setStatus('mandatory')
a91FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91FruGroupIndex.setStatus('mandatory')
a91OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91OperationalGroupIndex.setStatus('mandatory')
a91SecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 91, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a91SecuritySettings.setStatus('mandatory')
tKeyboard = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92), )
if mibBuilder.loadTexts: tKeyboard.setStatus('mandatory')
eKeyboard = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eKeyboard.setStatus('mandatory')
a92KeyboardLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92KeyboardLayout.setStatus('mandatory')
a92KeyboardType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92KeyboardType.setStatus('mandatory')
a92KeyboardConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 160))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMini-din", 3), ("vMicro-din", 4), ("vPs2", 5), ("vInfrared", 6), ("vHp-hil", 7), ("vDb-9", 8), ("vAccessBus", 9), ("vPc-98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92KeyboardConnectorType.setStatus('mandatory')
a92FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92FruGroupIndex.setStatus('mandatory')
a92OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92OperationalGroupIndex.setStatus('mandatory')
a92SecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 92, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vExternalInterfaceLockedOut", 4), ("vExternalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a92SecuritySettings.setStatus('mandatory')
tEventGenerationForProcessor = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100), )
if mibBuilder.loadTexts: tEventGenerationForProcessor.setStatus('mandatory')
eEventGenerationForProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForProcessor.setStatus('mandatory')
a100EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258))).clone(namedValues=NamedValues(("vProcessorInternalError", 256), ("vProcessorThermalTrip", 257), ("vProcessorFrb-3Failure", 258)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventType.setStatus('mandatory')
a100EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical1", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventSeverity.setStatus('mandatory')
a100IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a100IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a100IsEventState_based.setStatus('mandatory')
a100EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventStateKey.setStatus('mandatory')
a100AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100AssociatedGroup.setStatus('mandatory')
a100EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventSystem.setStatus('mandatory')
a100EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventSubsystem.setStatus('mandatory')
a100IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100IsInstanceDataPresent.setStatus('mandatory')
a100EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventMessage.setStatus('mandatory')
tEventGenerationForPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104), )
if mibBuilder.loadTexts: tEventGenerationForPowerSupply.setStatus('mandatory')
eEventGenerationForPowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPowerSupply.setStatus('mandatory')
a104EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258))).clone(namedValues=NamedValues(("vPowerSupplyFailed", 256), ("vPowerSupplyOk", 257), ("vPowerSupplyLikelyToFail", 258)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventType.setStatus('mandatory')
a104EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSeverity.setStatus('mandatory')
a104IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a104IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a104IsEventState_based.setStatus('mandatory')
a104EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventStateKey.setStatus('mandatory')
a104AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104AssociatedGroup.setStatus('mandatory')
a104EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSystem.setStatus('mandatory')
a104EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSubsystem.setStatus('mandatory')
a104IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104IsInstanceDataPresent.setStatus('mandatory')
a104EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventMessage.setStatus('mandatory')
tEventGenerationForPhysicalMemory = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108), )
if mibBuilder.loadTexts: tEventGenerationForPhysicalMemory.setStatus('mandatory')
eEventGenerationForPhysicalMemory = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a108AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPhysicalMemory.setStatus('mandatory')
a108EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257))).clone(namedValues=NamedValues(("vSingle-bitMemoryError", 256), ("vMulti-bitMemoryErrorFromPreviousBoot", 257)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventType.setStatus('mandatory')
a108EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSeverity.setStatus('mandatory')
a108IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a108IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a108IsEventState_based.setStatus('mandatory')
a108EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventStateKey.setStatus('mandatory')
a108AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108AssociatedGroup.setStatus('mandatory')
a108EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSystem.setStatus('mandatory')
a108EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventSubsystem.setStatus('mandatory')
a108IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108IsInstanceDataPresent.setStatus('mandatory')
a108EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a108EventMessage.setStatus('mandatory')
tEventGenerationForVoltageProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113), )
if mibBuilder.loadTexts: tEventGenerationForVoltageProbe.setStatus('mandatory')
eEventGenerationForVoltageProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForVoltageProbe.setStatus('mandatory')
a113EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258, 259, 260, 261, 262))).clone(namedValues=NamedValues(("vStatusChangedToOk", 256), ("vStatusChangedToUpperCritical", 257), ("vStatusChangedToLowerCritical", 258), ("vStatusChangedFromOkToUpperNon-critical", 259), ("vStatusChangedFromOkToLowerNon-critical", 260), ("vStatusChangedFromUpperCriticalToUpperNo", 261), ("vStatusChangedFromLowerCriticalToLowerNo", 262)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventType.setStatus('mandatory')
a113EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventSeverity.setStatus('mandatory')
a113IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a113IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a113IsEventState_based.setStatus('mandatory')
a113EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventStateKey.setStatus('mandatory')
a113AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113AssociatedGroup.setStatus('mandatory')
a113EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventSystem.setStatus('mandatory')
a113EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventSubsystem.setStatus('mandatory')
a113IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113IsInstanceDataPresent.setStatus('mandatory')
a113EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a113EventMessage.setStatus('mandatory')
tEventGenerationForTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114), )
if mibBuilder.loadTexts: tEventGenerationForTemperatureProbe.setStatus('mandatory')
eEventGenerationForTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForTemperatureProbe.setStatus('mandatory')
a114EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258, 259, 260, 261, 262))).clone(namedValues=NamedValues(("vStatusChangedToOk", 256), ("vStatusChangedToUpperCritical", 257), ("vStatusChangedToLowerCritical", 258), ("vStatusChangedFromOkToUpperNon-critical", 259), ("vStatusChangedFromOkToLowerNon-critical", 260), ("vStatusChangedFromUpperCriticalToUpperNo", 261), ("vStatusChangedFromLowerCriticalToLowerNo", 262)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventType.setStatus('mandatory')
a114EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventSeverity.setStatus('mandatory')
a114IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a114IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a114IsEventState_based.setStatus('mandatory')
a114EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventStateKey.setStatus('mandatory')
a114AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114AssociatedGroup.setStatus('mandatory')
a114EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventSystem.setStatus('mandatory')
a114EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventSubsystem.setStatus('mandatory')
a114IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114IsInstanceDataPresent.setStatus('mandatory')
a114EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a114EventMessage.setStatus('mandatory')
tEventGenerationForPhysicalContainer = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116), )
if mibBuilder.loadTexts: tEventGenerationForPhysicalContainer.setStatus('mandatory')
eEventGenerationForPhysicalContainer = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a116AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPhysicalContainer.setStatus('mandatory')
a116EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 256))).clone(namedValues=NamedValues(("vContainerSecurityBreach", 6), ("vContainerSecurityStatusOk", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventType.setStatus('mandatory')
a116EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSeverity.setStatus('mandatory')
a116IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a116IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a116IsEventState_based.setStatus('mandatory')
a116EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventStateKey.setStatus('mandatory')
a116AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116AssociatedGroup.setStatus('mandatory')
a116EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSystem.setStatus('mandatory')
a116EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSubsystem.setStatus('mandatory')
a116IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116IsInstanceDataPresent.setStatus('mandatory')
a116EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventMessage.setStatus('mandatory')
tBusGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128), )
if mibBuilder.loadTexts: tBusGlobalTable.setStatus('mandatory')
eBusGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a128BusId"))
if mibBuilder.loadTexts: eBusGlobalTable.setStatus('mandatory')
a128BusId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a128BusId.setStatus('mandatory')
a128BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 128, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vScsi", 6), ("vIde", 7), ("vDiagnostic", 8), ("vI2c", 9), ("vPower", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a128BusType.setStatus('mandatory')
tPhysicalExpansionSitesTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129), )
if mibBuilder.loadTexts: tPhysicalExpansionSitesTable.setStatus('mandatory')
ePhysicalExpansionSitesTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a129ExpansionSiteIndex"))
if mibBuilder.loadTexts: ePhysicalExpansionSitesTable.setStatus('mandatory')
a129ExpansionSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteIndex.setStatus('mandatory')
a129ExpansionSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vBusSlot", 3), ("vDriveBay", 4), ("vPowerUnitBay", 5), ("vSubchassisSlot", 6), ("vPcmciaSlot", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteType.setStatus('mandatory')
a129VirtualExpansionSite = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129VirtualExpansionSite.setStatus('mandatory')
a129ExpansionSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteName.setStatus('mandatory')
a129ExpansionSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteDescription.setStatus('mandatory')
a129ExpansionSiteCurrentlyOccupied = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 129, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a129ExpansionSiteCurrentlyOccupied.setStatus('mandatory')
tEventGenerationForCoolingDevice = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140), )
if mibBuilder.loadTexts: tEventGenerationForCoolingDevice.setStatus('mandatory')
eEventGenerationForCoolingDevice = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a140AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForCoolingDevice.setStatus('mandatory')
a140EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vCoolingDeviceStatusChange", 1), ("vTemperatureFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventType.setStatus('mandatory')
a140EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventSeverity.setStatus('mandatory')
a140IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a140IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a140IsEventState_based.setStatus('mandatory')
a140EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventStateKey.setStatus('mandatory')
a140AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140AssociatedGroup.setStatus('mandatory')
a140EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventSystem.setStatus('mandatory')
a140EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 140, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a140EventSubsystem.setStatus('mandatory')
tEventGenerationForPowerUnit = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201), )
if mibBuilder.loadTexts: tEventGenerationForPowerUnit.setStatus('mandatory')
eEventGenerationForPowerUnit = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPowerUnit.setStatus('mandatory')
a201EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vPowerUnitRedundancyLost", 1), ("vPowerUnitRedundancyRegained", 2), ("vPowerUnitRedundancyDegraded", 3), ("vPowerUnitVaShutdownConditionCleared", 4), ("vPowerUnitVaShutdownLimitExceeded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventType.setStatus('mandatory')
a201EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventSeverity.setStatus('mandatory')
a201IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a201IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a201IsEventState_based.setStatus('mandatory')
a201EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventStateKey.setStatus('mandatory')
a201AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201AssociatedGroup.setStatus('mandatory')
a201EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventSystem.setStatus('mandatory')
a201EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventSubsystem.setStatus('mandatory')
a201IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201IsInstanceDataPresent.setStatus('mandatory')
a201EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a201EventMessage.setStatus('mandatory')
tEventGenerationForCoolingSensors = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202), )
if mibBuilder.loadTexts: tEventGenerationForCoolingSensors.setStatus('mandatory')
eEventGenerationForCoolingSensors = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a202AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForCoolingSensors.setStatus('mandatory')
a202EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257))).clone(namedValues=NamedValues(("vCoolingDeviceFailure", 256), ("vCoolingDeviceOk", 257)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventType.setStatus('mandatory')
a202EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventSeverity.setStatus('mandatory')
a202IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a202IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a202IsEventState_based.setStatus('mandatory')
a202EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventStateKey.setStatus('mandatory')
a202AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202AssociatedGroup.setStatus('mandatory')
a202EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventSystem.setStatus('mandatory')
a202EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventSubsystem.setStatus('mandatory')
a202IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202IsInstanceDataPresent.setStatus('mandatory')
a202EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a202EventMessage.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a1001MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibName.setStatus('mandatory')
a1001MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibOid.setStatus('mandatory')
a1001DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1001, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1001DisableTrap.setStatus('mandatory')
tSystemControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004), )
if mibBuilder.loadTexts: tSystemControl.setStatus('mandatory')
eSystemControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a1004Selfid"))
if mibBuilder.loadTexts: eSystemControl.setStatus('mandatory')
a1004Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004Selfid.setStatus('mandatory')
a1004ResetSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotReset", 0), ("vInitiateReset", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ResetSystem.setStatus('mandatory')
a1004TimedResetIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004TimedResetIncrement.setStatus('mandatory')
a1004TimedResetResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004TimedResetResolution.setStatus('mandatory')
a1004TimeUntilSystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004TimeUntilSystemReset.setStatus('mandatory')
a1004SystemPowerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vUnknown", 0), ("vUnsupported", 1), ("vOnAndOff", 2), ("vOffOnly", 3), ("vOnOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004SystemPowerCapabilities.setStatus('mandatory')
a1004SystemPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004SystemPowerStatus.setStatus('mandatory')
a1004EventLoggingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 0), ("vUnsupported", 1), ("vActive", 2), ("vInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004EventLoggingCapability.setStatus('mandatory')
a1004WatchdogTimerIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004WatchdogTimerIncrement.setStatus('mandatory')
a1004WatchdogTimerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004WatchdogTimerResolution.setStatus('mandatory')
a1004WatchdogUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004WatchdogUpdateInterval.setStatus('mandatory')
a1004UseSystemWatchdogFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004UseSystemWatchdogFeature.setStatus('mandatory')
a1004ResetSystemAfterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ResetSystemAfterDelay.setStatus('mandatory')
a1004SavePersistentData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004SavePersistentData.setStatus('mandatory')
a1004RestoreFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004RestoreFactoryDefaults.setStatus('mandatory')
a1004ShutdownOs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotShutdown", 0), ("vShutdownOs", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOs.setStatus('mandatory')
a1004ShutdownOsAndPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotShutdownAndPowerOff", 0), ("vShutdownAndPowerOff", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOsAndPowerOff.setStatus('mandatory')
a1004ShutdownOsAndHardwareReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotShutdownAndHardwareReset", 0), ("vShutdownAndHardwareReset", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOsAndHardwareReset.setStatus('mandatory')
a1004IssueAHardwareNmi = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1004, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDoNotIssueAnNmi", 0), ("vIssueAnNmi", 1), ("vUnsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004IssueAHardwareNmi.setStatus('mandatory')
tCoolingSensors = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005), )
if mibBuilder.loadTexts: tCoolingSensors.setStatus('mandatory')
eCoolingSensors = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a1005Selfid"))
if mibBuilder.loadTexts: eCoolingSensors.setStatus('mandatory')
a1005Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005Selfid.setStatus('mandatory')
a1005FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005FruGroupIndex.setStatus('mandatory')
a1005OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005OperationalGroupIndex.setStatus('mandatory')
a1005CoolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFan", 3), ("vCentrifugalBlower", 4), ("vChipFan", 5), ("vCabinetFan", 6), ("vPowerSupplyFan", 7), ("vHeatPipe", 8), ("vIntegratedRefrigeration", 9), ("vActiveCooling", 32), ("vPassiveCooling", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CoolingDeviceType.setStatus('mandatory')
a1005CfmRating = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CfmRating.setStatus('mandatory')
a1005FanUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vRpm", 0), ("vCfm", 1), ("vOkfatal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005FanUnits.setStatus('mandatory')
a1005MaximumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005MaximumReading.setStatus('mandatory')
a1005MinimumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005MinimumReading.setStatus('mandatory')
a1005CurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CurrentReading.setStatus('mandatory')
a1005SensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005SensorAccuracy.setStatus('mandatory')
a1005SensorTolerancePlus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005SensorTolerancePlus.setStatus('mandatory')
a1005SensorToleranceMinus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005SensorToleranceMinus.setStatus('mandatory')
a1005Non_criticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 16), DmiInteger()).setLabel("a1005Non-criticalThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005Non_criticalThreshold.setStatus('mandatory')
a1005CriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005CriticalThreshold.setStatus('mandatory')
a1005Non_recoverableThreshold = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 18), DmiInteger()).setLabel("a1005Non-recoverableThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1005Non_recoverableThreshold.setStatus('mandatory')
a1005CoolingSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 19), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005CoolingSensorDescription.setStatus('mandatory')
a1005NominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005NominalReading.setStatus('mandatory')
a1005LowestNormalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005LowestNormalReading.setStatus('mandatory')
a1005HighestNormalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1005, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1005HighestNormalReading.setStatus('mandatory')
tSystemEventLog = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006), )
if mibBuilder.loadTexts: tSystemEventLog.setStatus('mandatory')
eSystemEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARD2-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARD2-MIB", "a1006Selfid"))
if mibBuilder.loadTexts: eSystemEventLog.setStatus('mandatory')
a1006Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006Selfid.setStatus('mandatory')
a1006Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 2), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006Timestamp.setStatus('mandatory')
a1006RecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordType.setStatus('mandatory')
a1006RecordLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordLength.setStatus('mandatory')
a1006RecordData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 1006, 1, 5), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordData.setStatus('mandatory')
trap1ForProcessor = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a100EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventMessage"), ("INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
trap2ForProcessor = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a100EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventMessage"), ("INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
trap3ForProcessor = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 100, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a100EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a100EventMessage"), ("INTELCORPORATIONBASEBOARD2-MIB", "a6ProcessorIndex"))
trap1ForPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a104EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
trap2ForPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a104EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
trap3ForPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 104, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a104EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a104IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a17PowerSupplyIndex"))
trap1ForPhysicalMemory = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a108EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a34MemoryArrayTableIndex"))
trap2ForPhysicalMemory = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 108, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a108EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a108IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a34MemoryArrayTableIndex"))
trap1ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap2ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap3ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap4ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,259)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap5ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,260)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap6ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,261)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap7ForVoltageProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 113, 1) + (0,262)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a113EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a113IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a54VoltageProbeIndex"))
trap1ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap2ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap3ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,258)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap4ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,259)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap5ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,260)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap6ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,261)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap7ForTemperatureProbe = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 114, 1) + (0,262)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a114EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a114IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a55TemperatureProbeTableIndex"))
trap1ForPhysicalContainer = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1) + (0,6)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a116EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a64ContainerIndex"))
trap2ForPhysicalContainer = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 116, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a116EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a116IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a64ContainerIndex"))
trap1ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,1)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
trap2ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,2)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
trap3ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,3)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
trap4ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,4)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
trap5ForPowerUnit = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 201, 1) + (0,5)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a201EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a201IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a67PowerUnitIndex"))
trap1ForCoolingSensors = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1) + (0,256)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a202EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a1005Selfid"))
trap2ForCoolingSensors = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2, 1, 202, 1) + (0,257)).setObjects(("INTELCORPORATIONBASEBOARD2-MIB", "a202EventType"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSeverity"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsEventState_based"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventStateKey"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202AssociatedGroup"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202EventSubsystem"), ("INTELCORPORATIONBASEBOARD2-MIB", "a202IsInstanceDataPresent"), ("INTELCORPORATIONBASEBOARD2-MIB", "a1005Selfid"))
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARD2-MIB", a19SlotDescription=a19SlotDescription, eSystemBios=eSystemBios, a104EventSeverity=a104EventSeverity, a4BiosLoaderVersion=a4BiosLoaderVersion, a36TypeDetail=a36TypeDetail, DmiInteger=DmiInteger, a116IsInstanceDataPresent=a116IsInstanceDataPresent, a116IsEventState_based=a116IsEventState_based, trap1ForPowerSupply=trap1ForPowerSupply, a36ErrorDataSize=a36ErrorDataSize, a75MaximumSpeed=a75MaximumSpeed, a50FrontPanelResetStatus=a50FrontPanelResetStatus, trap2ForPhysicalContainer=trap2ForPhysicalContainer, tCoolingSensors=tCoolingSensors, a31FatalErrorCount=a31FatalErrorCount, a1Installation=a1Installation, a92KeyboardConnectorType=a92KeyboardConnectorType, a113IsEventState_based=a113IsEventState_based, trap4ForVoltageProbe=trap4ForVoltageProbe, a19ResourceUserId=a19ResourceUserId, a1001DisableTrap=a1001DisableTrap, trap5ForTemperatureProbe=trap5ForTemperatureProbe, a113EventStateKey=a113EventStateKey, a55TemperatureUpperThreshold_Non_critica=a55TemperatureUpperThreshold_Non_critica, a6Level2CacheIndex=a6Level2CacheIndex, a104EventType=a104EventType, a113EventSubsystem=a113EventSubsystem, ePhysicalContainerGlobalTable=ePhysicalContainerGlobalTable, a55FruGroupIndex=a55FruGroupIndex, a17Range2InputVoltageHigh=a17Range2InputVoltageHigh, a114EventSeverity=a114EventSeverity, a55TemperatureLowerThreshold_Critical=a55TemperatureLowerThreshold_Critical, a108EventSeverity=a108EventSeverity, eMouse=eMouse, a50Power_onPasswordStatus=a50Power_onPasswordStatus, a1004SystemPowerCapabilities=a1004SystemPowerCapabilities, tOperatingSystem=tOperatingSystem, trap2ForProcessor=trap2ForProcessor, a83OperationalGroupIndex=a83OperationalGroupIndex, a30DeviceGroupIndex=a30DeviceGroupIndex, a54MonitoredVoltageNominalLevel=a54MonitoredVoltageNominalLevel, eOperatingSystem=eOperatingSystem, a74OperationalGroupIndex=a74OperationalGroupIndex, a201EventMessage=a201EventMessage, a64ContainerName=a64ContainerName, tFieldReplaceableUnit=tFieldReplaceableUnit, trap4ForTemperatureProbe=trap4ForTemperatureProbe, a1006Timestamp=a1006Timestamp, eVoltageProbe=eVoltageProbe, a113EventSystem=a113EventSystem, products=products, eMiftomib=eMiftomib, eEventGenerationForPowerUnit=eEventGenerationForPowerUnit, a31WarningErrorCount=a31WarningErrorCount, a4BiosVersion=a4BiosVersion, a30FruSerialNumber=a30FruSerialNumber, a202EventSystem=a202EventSystem, a36FruGroupIndex=a36FruGroupIndex, trap2ForPhysicalMemory=trap2ForPhysicalMemory, a17Range2InputVoltageLow=a17Range2InputVoltageLow, a128BusType=a128BusType, a140IsEventState_based=a140IsEventState_based, a1004ResetSystem=a1004ResetSystem, a54VoltageLevelUpperThreshold_Non_recove=a54VoltageLevelUpperThreshold_Non_recove, a6Level3CacheIndex=a6Level3CacheIndex, a1005NominalReading=a1005NominalReading, a1004WatchdogTimerResolution=a1004WatchdogTimerResolution, a34NumberOfMemoryDeviceSockets=a34NumberOfMemoryDeviceSockets, a91SecuritySettings=a91SecuritySettings, a83CurrentVideoMode=a83CurrentVideoMode, a35MemoryArrayIndex=a35MemoryArrayIndex, tMemoryDeviceMappedAddresses=tMemoryDeviceMappedAddresses, a83MaximumRefreshRate=a83MaximumRefreshRate, a37MappedRangeStartingAddress=a37MappedRangeStartingAddress, a92FruGroupIndex=a92FruGroupIndex, a4BiosIndex=a4BiosIndex, a54FruGroupIndex=a54FruGroupIndex, a1004TimeUntilSystemReset=a1004TimeUntilSystemReset, a140EventSeverity=a140EventSeverity, server_products=server_products, a108EventSubsystem=a108EventSubsystem, a202EventSubsystem=a202EventSubsystem, a55OperationalGroupIndex=a55OperationalGroupIndex, a114IsEventState_based=a114IsEventState_based, a201IsEventState_based=a201IsEventState_based, a1Product=a1Product, tPowerSupply=tPowerSupply, a6CurrentSpeed=a6CurrentSpeed, a74DmaSupport=a74DmaSupport, a31CurrentErrorStatus=a31CurrentErrorStatus, a55TemperatureStatus=a55TemperatureStatus, eSystemBiosCharacteristics=eSystemBiosCharacteristics, a1004EventLoggingCapability=a1004EventLoggingCapability, trap6ForTemperatureProbe=trap6ForTemperatureProbe, intel=intel, tSystemControl=tSystemControl, tSerialPorts=tSerialPorts, a1005CriticalThreshold=a1005CriticalThreshold, tSystemSlots=tSystemSlots, a4BiosReleaseDate=a4BiosReleaseDate, a92KeyboardType=a92KeyboardType, a1005OperationalGroupIndex=a1005OperationalGroupIndex, eTemperatureProbe=eTemperatureProbe, a104IsEventState_based=a104IsEventState_based, a100IsEventState_based=a100IsEventState_based, a1005SensorToleranceMinus=a1005SensorToleranceMinus, a17InputVoltageCapabilityDescription=a17InputVoltageCapabilityDescription, a30WarrantyDuration=a30WarrantyDuration, trap3ForTemperatureProbe=trap3ForTemperatureProbe, a34VendorSyndrome=a34VendorSyndrome, a83VideoType=a83VideoType, a17PowerUnitIndex=a17PowerUnitIndex, eSystemCache=eSystemCache, a108EventType=a108EventType, tMemoryDevice=tMemoryDevice, a1006Selfid=a1006Selfid, a1004ShutdownOs=a1004ShutdownOs, a7FruGroupIndex=a7FruGroupIndex, a55MonitoredTemperatureNormalMinimum=a55MonitoredTemperatureNormalMinimum, a17TotalOutputPower=a17TotalOutputPower, a1005MinimumReading=a1005MinimumReading, tComponentid=tComponentid, a114EventStateKey=a114EventStateKey, tEventGenerationForCoolingSensors=tEventGenerationForCoolingSensors, a30FruInternetUniformResourceLocator=a30FruInternetUniformResourceLocator, a104EventMessage=a104EventMessage, a1004ShutdownOsAndPowerOff=a1004ShutdownOsAndPowerOff, DmiInteger64X=DmiInteger64X, a55TemperatureProbeAccuracy=a55TemperatureProbeAccuracy, a30Manufacturer=a30Manufacturer, a36LastErrorUpdate=a36LastErrorUpdate, eMemoryDevice=eMemoryDevice, a84VideoBiosShadowingState=a84VideoBiosShadowingState, a108AssociatedGroup=a108AssociatedGroup, platforms=platforms, a116EventType=a116EventType, a37DataDepth=a37DataDepth, a34MemoryArrayTableIndex=a34MemoryArrayTableIndex, a1Manufacturer=a1Manufacturer, tVoltageProbe=tVoltageProbe, a2SystemBootupTime=a2SystemBootupTime, a2SystemLocation=a2SystemLocation, tMouse=tMouse, a1004ResetSystemAfterDelay=a1004ResetSystemAfterDelay, a54VoltageProbeMinimum=a54VoltageProbeMinimum, a2SystemName=a2SystemName, a10SystemCacheIndex=a10SystemCacheIndex, a36TotalWidth=a36TotalWidth, a83VideoIndex=a83VideoIndex, a34ErrorDataSize=a34ErrorDataSize, a83CurrentNumberOfBitsPerPixel=a83CurrentNumberOfBitsPerPixel, tSystemEventLog=tSystemEventLog, a100EventType=a100EventType, a1004Selfid=a1004Selfid, a81FruGroupIndex=a81FruGroupIndex, DmiCounter=DmiCounter, a64AssetTag=a64AssetTag, a64ContainerIndex=a64ContainerIndex, a36DeviceSet=a36DeviceSet, a36OperationalGroupIndex=a36OperationalGroupIndex, tEventGenerationForProcessor=tEventGenerationForProcessor, trap2ForPowerUnit=trap2ForPowerUnit, a64ContainerSecurityStatus=a64ContainerSecurityStatus, a36ErrorResolution=a36ErrorResolution, a64ContainerOrChassisType=a64ContainerOrChassisType, a30Description=a30Description, a91MouseIrq=a91MouseIrq, a129VirtualExpansionSite=a129VirtualExpansionSite, a6ProcessorVersionInformation=a6ProcessorVersionInformation, a81TemperatureProbeIndex=a81TemperatureProbeIndex, a37Partition=a37Partition, a201IsInstanceDataPresent=a201IsInstanceDataPresent, trap1ForCoolingSensors=trap1ForCoolingSensors, a54MonitoredVoltageNormalMinimum=a54MonitoredVoltageNormalMinimum, a116EventSystem=a116EventSystem, a6Level1CacheIndex=a6Level1CacheIndex, a116EventSeverity=a116EventSeverity, a55TemperatureProbeTolerance=a55TemperatureProbeTolerance, a5BiosCharacteristicIndex=a5BiosCharacteristicIndex, a108EventMessage=a108EventMessage, a17Range2InputFrequencyHigh=a17Range2InputFrequencyHigh, a75SerialPortIndex=a75SerialPortIndex, a83CurrentNumberOfRows=a83CurrentNumberOfRows, a140EventSystem=a140EventSystem, eFieldReplaceableUnit=eFieldReplaceableUnit, eComponentid=eComponentid, a1Version=a1Version, a34LastErrorUpdate=a34LastErrorUpdate, a108EventSystem=a108EventSystem, trap1ForPhysicalMemory=trap1ForPhysicalMemory, tSystemCache=tSystemCache, a1005CoolingDeviceType=a1005CoolingDeviceType, trap7ForVoltageProbe=trap7ForVoltageProbe, eMemoryArrayMappedAddresses=eMemoryArrayMappedAddresses, a83VideoRamMemorySize=a83VideoRamMemorySize, a55MonitoredTemperatureNominalReading=a55MonitoredTemperatureNominalReading, a92KeyboardLayout=a92KeyboardLayout, a36ErrorGranularity=a36ErrorGranularity, eEventGenerationForPhysicalContainer=eEventGenerationForPhysicalContainer, a6OperationalGroupIndex=a6OperationalGroupIndex, a1004TimedResetResolution=a1004TimedResetResolution, a108IsEventState_based=a108IsEventState_based, a10FruGroupIndex=a10FruGroupIndex, a1005LowestNormalReading=a1005LowestNormalReading, tKeyboard=tKeyboard, a104EventSubsystem=a104EventSubsystem, a30FruIndex=a30FruIndex, a128BusId=a128BusId, a30PartNumber=a30PartNumber, a1005Non_criticalThreshold=a1005Non_criticalThreshold, a1004SavePersistentData=a1004SavePersistentData, trap4ForPowerUnit=trap4ForPowerUnit, tSystemPowerControls=tSystemPowerControls, a84VideoBiosReleaseDate=a84VideoBiosReleaseDate, a31DeviceGroupIndex=a31DeviceGroupIndex, a1004ShutdownOsAndHardwareReset=a1004ShutdownOsAndHardwareReset, a1004WatchdogTimerIncrement=a1004WatchdogTimerIncrement, a34MemoryArrayLocation=a34MemoryArrayLocation, a31AdministrativeState=a31AdministrativeState, trap5ForPowerUnit=trap5ForPowerUnit, a54VoltageLevelUpperThreshold_Non_critic=a54VoltageLevelUpperThreshold_Non_critic, tGeneralInformation=tGeneralInformation, a55TemperatureProbeTemperatureReading=a55TemperatureProbeTemperatureReading, a37MemoryDeviceSetId=a37MemoryDeviceSetId, DmiDisplaystring=DmiDisplaystring, trap1ForTemperatureProbe=trap1ForTemperatureProbe, a34NumberOfMemoryDeviceSocketsUsed=a34NumberOfMemoryDeviceSocketsUsed, a35PartitionWidth=a35PartitionWidth, a1SerialNumber=a1SerialNumber, eEventGenerationForCoolingSensors=eEventGenerationForCoolingSensors, a10SystemCacheWritePolicy=a10SystemCacheWritePolicy, tSystemBiosCharacteristics=tSystemBiosCharacteristics, a5BiosCharacteristicDescription=a5BiosCharacteristicDescription, eEventGenerationForVoltageProbe=eEventGenerationForVoltageProbe, a17Range2VoltageProbeIndex=a17Range2VoltageProbeIndex, a52TimeToNextScheduledPower_on=a52TimeToNextScheduledPower_on, a201EventSubsystem=a201EventSubsystem, a64FruGroupIndex=a64FruGroupIndex, a4BiosRomSize=a4BiosRomSize, a113EventSeverity=a113EventSeverity, a114EventSubsystem=a114EventSubsystem, a91MouseInterface=a91MouseInterface, a55TemperatureProbeMaximum=a55TemperatureProbeMaximum, a1005CfmRating=a1005CfmRating, tPowerUnitGlobalTable=tPowerUnitGlobalTable, a67PowerUnitRedundancyStatus=a67PowerUnitRedundancyStatus, a81OperationalGroupIndex=a81OperationalGroupIndex, a36ArrayErrorAddress=a36ArrayErrorAddress, a35OperationalGroupIndex=a35OperationalGroupIndex, eOperationalState=eOperationalState, a100AssociatedGroup=a100AssociatedGroup, a10SystemCacheErrorCorrection=a10SystemCacheErrorCorrection, a1005SensorAccuracy=a1005SensorAccuracy, a67PowerUnitIndex=a67PowerUnitIndex)
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARD2-MIB", a74ConnectorPinout=a74ConnectorPinout, tPhysicalContainerGlobalTable=tPhysicalContainerGlobalTable, a34ArrayErrorType=a34ArrayErrorType, a83ScanMode=a83ScanMode, a54VoltageProbeTolerance=a54VoltageProbeTolerance, a91MousePortName=a91MousePortName, a55TemperatureUpperThreshold_Non_recover=a55TemperatureUpperThreshold_Non_recover, trap2ForPowerSupply=trap2ForPowerSupply, a37MappedRangeEndingAddress=a37MappedRangeEndingAddress, a17Range2InputFrequencyLow=a17Range2InputFrequencyLow, a55MonitoredTemperatureNormalMaximum=a55MonitoredTemperatureNormalMaximum, a83CurrentVerticalResolution=a83CurrentVerticalResolution, a113EventMessage=a113EventMessage, a202IsEventState_based=a202IsEventState_based, a201EventStateKey=a201EventStateKey, a1005CurrentReading=a1005CurrentReading, a75IrqUsed=a75IrqUsed, a50KeyboardPasswordStatus=a50KeyboardPasswordStatus, tMotherboard=tMotherboard, a104EventSystem=a104EventSystem, trap3ForPowerSupply=trap3ForPowerSupply, trap2ForTemperatureProbe=trap2ForTemperatureProbe, a83VideoPhysicalLocation=a83VideoPhysicalLocation, trap2ForCoolingSensors=trap2ForCoolingSensors, a116AssociatedGroup=a116AssociatedGroup, a113EventType=a113EventType, a129ExpansionSiteType=a129ExpansionSiteType, a202AssociatedGroup=a202AssociatedGroup, a75SerialBaseIoAddress=a75SerialBaseIoAddress, a55TemperatureProbeDescription=a55TemperatureProbeDescription, a74ParallelPortIndex=a74ParallelPortIndex, a74ParallelPortSecuritySettings=a74ParallelPortSecuritySettings, a36DeviceErrorAddress=a36DeviceErrorAddress, trap7ForTemperatureProbe=trap7ForTemperatureProbe, a114IsInstanceDataPresent=a114IsInstanceDataPresent, a54OperationalGroupIndex=a54OperationalGroupIndex, a10SystemCacheLevel=a10SystemCacheLevel, a114AssociatedGroup=a114AssociatedGroup, a50AdministratorPasswordStatus=a50AdministratorPasswordStatus, a6ProcessorType=a6ProcessorType, a66OperatingSystemName=a66OperatingSystemName, a34OperationalGroupIndex=a34OperationalGroupIndex, trap2ForVoltageProbe=trap2ForVoltageProbe, a83MinimumRefreshRate=a83MinimumRefreshRate, a10SystemCacheType=a10SystemCacheType, a54VoltageProbeResolution=a54VoltageProbeResolution, a6ProcessorUpgrade=a6ProcessorUpgrade, a19SlotType=a19SlotType, a7OperationalGroupIndex=a7OperationalGroupIndex, a100EventStateKey=a100EventStateKey, a17PowerSupplyIndex=a17PowerSupplyIndex, a74ParallelBaseIoAddress=a74ParallelBaseIoAddress, a17Range1VoltageProbeIndex=a17Range1VoltageProbeIndex, eMemoryDeviceMappedAddresses=eMemoryDeviceMappedAddresses, eCoolingDevice=eCoolingDevice, a17Range2CurrentProbeIndex=a17Range2CurrentProbeIndex, eSystemControl=eSystemControl, a1004RestoreFactoryDefaults=a1004RestoreFactoryDefaults, a36MemoryArrayIndex=a36MemoryArrayIndex, trap1ForPowerUnit=trap1ForPowerUnit, a30WarrantyStartDate=a30WarrantyStartDate, a75SerialPortCapabilities=a75SerialPortCapabilities, a36MemoryDeviceTableIndex=a36MemoryDeviceTableIndex, a10SystemCacheSize=a10SystemCacheSize, a2SystemPrimaryUserPhone=a2SystemPrimaryUserPhone, eSystemSlots=eSystemSlots, a34ErrorData=a34ErrorData, eVideoBios=eVideoBios, a129ExpansionSiteDescription=a129ExpansionSiteDescription, a37MemoryDeviceMappedAddressesTableIndex=a37MemoryDeviceMappedAddressesTableIndex, a19VirtualSlot=a19VirtualSlot, a4BiosManufacturer=a4BiosManufacturer, a30RevisionLevel=a30RevisionLevel, a54VoltageLevelLowerThreshold_Non_critic=a54VoltageLevelLowerThreshold_Non_critic, a140EventSubsystem=a140EventSubsystem, a66OperatingSystemBootPartitionIndex=a66OperatingSystemBootPartitionIndex, eKeyboard=eKeyboard, a55TemperatureProbeMinimum=a55TemperatureProbeMinimum, a64OperationalGroupIndex=a64OperationalGroupIndex, eSerialPorts=eSerialPorts, a1004SystemPowerStatus=a1004SystemPowerStatus, a1004IssueAHardwareNmi=a1004IssueAHardwareNmi, a37InterleavePosition=a37InterleavePosition, a1004UseSystemWatchdogFeature=a1004UseSystemWatchdogFeature, a36Size=a36Size, eSystemHardwareSecurity=eSystemHardwareSecurity, trap3ForProcessor=trap3ForProcessor, a75SerialPortSecuritySettings=a75SerialPortSecuritySettings, a1005FruGroupIndex=a1005FruGroupIndex, a19CurrentUsage=a19CurrentUsage, a17FruGroupIndex=a17FruGroupIndex, a83CurrentHorizontalResolution=a83CurrentHorizontalResolution, tEventGenerationForPowerSupply=tEventGenerationForPowerSupply, DmiComponentIndex=DmiComponentIndex, dmtfGroups=dmtfGroups, a31AvailabilityStatus=a31AvailabilityStatus, a1006RecordType=a1006RecordType, a129ExpansionSiteCurrentlyOccupied=a129ExpansionSiteCurrentlyOccupied, a54VoltageProbeVoltageLevel=a54VoltageProbeVoltageLevel, eEventGenerationForTemperatureProbe=eEventGenerationForTemperatureProbe, a1005Selfid=a1005Selfid, a54VoltageLevelLowerThreshold_Non_recove=a54VoltageLevelLowerThreshold_Non_recove, a34ErrorResolution=a34ErrorResolution, a36MemoryType=a36MemoryType, a114EventSystem=a114EventSystem, eCoolingSensors=eCoolingSensors, a81CoolingDeviceType=a81CoolingDeviceType, a35MappedRangeEndingAddress=a35MappedRangeEndingAddress, tSystemHardwareSecurity=tSystemHardwareSecurity, a116EventMessage=a116EventMessage, a55TemperatureLowerThreshold_Non_critica=a55TemperatureLowerThreshold_Non_critica, a17Range1InputFrequencyLow=a17Range1InputFrequencyLow, a1004TimedResetIncrement=a1004TimedResetIncrement, a81CoolingUnitIndex=a81CoolingUnitIndex, a64PowerState=a64PowerState, a54VoltageProbeAccuracy=a54VoltageProbeAccuracy, a34MaximumMemoryCapacity=a34MaximumMemoryCapacity, a36DataWidth=a36DataWidth, a4PrimaryBios=a4PrimaryBios, a91OperationalGroupIndex=a91OperationalGroupIndex, a35MappedRangeStartingAddress=a35MappedRangeStartingAddress, ePhysicalExpansionSitesTable=ePhysicalExpansionSitesTable, a201EventType=a201EventType, eEventGenerationForPowerSupply=eEventGenerationForPowerSupply, a31OperationalStateInstanceIndex=a31OperationalStateInstanceIndex, a100EventSubsystem=a100EventSubsystem, a81CoolingDeviceTableIndex=a81CoolingDeviceTableIndex, a202EventType=a202EventType, a1005FanUnits=a1005FanUnits, a54VoltageProbeMaximum=a54VoltageProbeMaximum, a34MemoryArrayUse=a34MemoryArrayUse, a19SlotWidth=a19SlotWidth, a74IrqUsed=a74IrqUsed, a83FruGroupIndex=a83FruGroupIndex, a64BootupState=a64BootupState, tEventGenerationForPhysicalContainer=tEventGenerationForPhysicalContainer, a64ChassisLockPresent=a64ChassisLockPresent, a2SystemPrimaryUserName=a2SystemPrimaryUserName, tMiftomib=tMiftomib, a74ParallelPortCapabilities=a74ParallelPortCapabilities, a19SlotCategory=a19SlotCategory, ePhysicalMemoryArray=ePhysicalMemoryArray, a34FruGroupIndex=a34FruGroupIndex, a17Range1InputVoltageLow=a17Range1InputVoltageLow, tEventGenerationForCoolingDevice=tEventGenerationForCoolingDevice, eEventGenerationForCoolingDevice=eEventGenerationForCoolingDevice, a31UsageState=a31UsageState, eSystemEventLog=eSystemEventLog, a1005Non_recoverableThreshold=a1005Non_recoverableThreshold, eMotherboard=eMotherboard, a6ProcessorFamily=a6ProcessorFamily, a100EventSeverity=a100EventSeverity, a2SystemDateTime=a2SystemDateTime, a140AssociatedGroup=a140AssociatedGroup, a4BiosEndingAddress=a4BiosEndingAddress, a1005CoolingSensorDescription=a1005CoolingSensorDescription, a35PartitionId=a35PartitionId, a54VoltageProbeIndex=a54VoltageProbeIndex, a114EventType=a114EventType, a17InputVoltageRangeSwitching=a17InputVoltageRangeSwitching, eGeneralInformation=eGeneralInformation, tPhysicalMemoryArray=tPhysicalMemoryArray, a54VoltageProbeDescription=a54VoltageProbeDescription, tBusGlobalTable=tBusGlobalTable, a75LogicalName=a75LogicalName, a36FormFactor=a36FormFactor, a31MajorErrorCount=a31MajorErrorCount, a66OperatingSystemVersion=a66OperatingSystemVersion, a201EventSeverity=a201EventSeverity, a55TemperatureProbeResolution=a55TemperatureProbeResolution, trap3ForVoltageProbe=trap3ForVoltageProbe, tPhysicalExpansionSitesTable=tPhysicalExpansionSitesTable, a54VoltageLevelUpperThreshold_Critical=a54VoltageLevelUpperThreshold_Critical, a5BiosNumber=a5BiosNumber, tMemoryArrayMappedAddresses=tMemoryArrayMappedAddresses, a113AssociatedGroup=a113AssociatedGroup, a6MaximumSpeed=a6MaximumSpeed, a140EventType=a140EventType, tTemperatureProbe=tTemperatureProbe, a55TemperatureProbeTableIndex=a55TemperatureProbeTableIndex, trap1ForPhysicalContainer=trap1ForPhysicalContainer, a7NumberOfExpansionSlots=a7NumberOfExpansionSlots, a10SystemCacheSpeed=a10SystemCacheSpeed, tSystemBios=tSystemBios, a54MonitoredVoltageNormalMaximum=a54MonitoredVoltageNormalMaximum, ePowerUnitGlobalTable=ePowerUnitGlobalTable, tEventGenerationForPowerUnit=tEventGenerationForPowerUnit, a1005HighestNormalReading=a1005HighestNormalReading, a91MouseDriverVersion=a91MouseDriverVersion, a104EventStateKey=a104EventStateKey, trap3ForPowerUnit=trap3ForPowerUnit, a6FruGroupIndex=a6FruGroupIndex, a75ConnectorType=a75ConnectorType, a34ErrorAddress=a34ErrorAddress, a37PartitionRowPosition=a37PartitionRowPosition, a35MemoryArrayMappedAddressesTableIndex=a35MemoryArrayMappedAddressesTableIndex, a116EventStateKey=a116EventStateKey, a84VideoBiosVersion=a84VideoBiosVersion, a55TemperatureProbeLocation=a55TemperatureProbeLocation, DmiDateX=DmiDateX, a54VoltageStatus=a54VoltageStatus, a91MouseButtons=a91MouseButtons, eBusGlobalTable=eBusGlobalTable, a1006RecordData=a1006RecordData, a52TimedPower_onAvailable=a52TimedPower_onAvailable, a36ErrorData=a36ErrorData, a83VideoMemoryType=a83VideoMemoryType, a108IsInstanceDataPresent=a108IsInstanceDataPresent, a129ExpansionSiteIndex=a129ExpansionSiteIndex, DmiOctetstring=DmiOctetstring, a31OperationalStatus=a31OperationalStatus, a17Range1ElectricalCurrentProbeIndex=a17Range1ElectricalCurrentProbeIndex, a55TemperatureUpperThreshold_Critical=a55TemperatureUpperThreshold_Critical, tProcessor=tProcessor, trap5ForVoltageProbe=trap5ForVoltageProbe, eSystemPowerControls=eSystemPowerControls, a66OperatingSystemBootDeviceStorageType=a66OperatingSystemBootDeviceStorageType, a64ThermalState=a64ThermalState, a1005SensorTolerancePlus=a1005SensorTolerancePlus, a54VoltageLevelLowerThreshold_Critical=a54VoltageLevelLowerThreshold_Critical, a34ErrorOperation=a34ErrorOperation, a113IsInstanceDataPresent=a113IsInstanceDataPresent, a5BiosCharacteristic=a5BiosCharacteristic, a1006RecordLength=a1006RecordLength, a100EventSystem=a100EventSystem, a1001MibName=a1001MibName, trap6ForVoltageProbe=trap6ForVoltageProbe, a19SlotIndex=a19SlotIndex, a52PowerControlRequest=a52PowerControlRequest, a83CurrentRefreshRate=a83CurrentRefreshRate, a92OperationalGroupIndex=a92OperationalGroupIndex, a1004WatchdogUpdateInterval=a1004WatchdogUpdateInterval, a201AssociatedGroup=a201AssociatedGroup, a1Verify=a1Verify, a10OperationalGroupIndex=a10OperationalGroupIndex, trap1ForProcessor=trap1ForProcessor, a64ContainerLocation=a64ContainerLocation, a202EventStateKey=a202EventStateKey, tParallelPorts=tParallelPorts, a36ErrorOperation=a36ErrorOperation, a17Range1InputVoltageHigh=a17Range1InputVoltageHigh, a100IsInstanceDataPresent=a100IsInstanceDataPresent, a140EventStateKey=a140EventStateKey, a36BankLocator=a36BankLocator, a116EventSubsystem=a116EventSubsystem, a17ActiveInputVoltageRange=a17ActiveInputVoltageRange, ePowerSupply=ePowerSupply, trap1ForVoltageProbe=trap1ForVoltageProbe, a30Model=a30Model, a17PowerSupplyType=a17PowerSupplyType, eEventGenerationForPhysicalMemory=eEventGenerationForPhysicalMemory, a36DeviceErrorType=a36DeviceErrorType, tVideoBios=tVideoBios, a83CurrentNumberOfColumns=a83CurrentNumberOfColumns)
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARD2-MIB", a84VideoBiosIndex=a84VideoBiosIndex, a91MouseDriverName=a91MouseDriverName, a1001MibOid=a1001MibOid, a66OperatingSystemDescription=a66OperatingSystemDescription, a92SecuritySettings=a92SecuritySettings, a108EventStateKey=a108EventStateKey, a74ConnectorType=a74ConnectorType, a104AssociatedGroup=a104AssociatedGroup, a84VideoBiosManufacturer=a84VideoBiosManufacturer, a36VendorSyndrome=a36VendorSyndrome, a202EventSeverity=a202EventSeverity, a34MemoryErrorCorrection=a34MemoryErrorCorrection, tOperationalState=tOperationalState, tEventGenerationForPhysicalMemory=tEventGenerationForPhysicalMemory, a4BiosStartingAddress=a4BiosStartingAddress, tCoolingDevice=tCoolingDevice, a6ProcessorIndex=a6ProcessorIndex, a74LogicalName=a74LogicalName, a66OperatingSystemBootDeviceIndex=a66OperatingSystemBootDeviceIndex, a129ExpansionSiteName=a129ExpansionSiteName, a100EventMessage=a100EventMessage, a55TemperatureLowerThreshold_Non_recover=a55TemperatureLowerThreshold_Non_recover, a201EventSystem=a201EventSystem, a202IsInstanceDataPresent=a202IsInstanceDataPresent, tEventGenerationForVoltageProbe=tEventGenerationForVoltageProbe, a104IsInstanceDataPresent=a104IsInstanceDataPresent, tEventGenerationForTemperatureProbe=tEventGenerationForTemperatureProbe, a1005MaximumReading=a1005MaximumReading, eParallelPorts=eParallelPorts, a54VoltageProbeLocation=a54VoltageProbeLocation, eEventGenerationForProcessor=eEventGenerationForProcessor, a91FruGroupIndex=a91FruGroupIndex, a36DeviceLocator=a36DeviceLocator, basebrd2=basebrd2, a114EventMessage=a114EventMessage, a66PrimaryOperatingSystem=a66PrimaryOperatingSystem, a17Range1InputFrequencyHigh=a17Range1InputFrequencyHigh, a30SupportPhoneNumber=a30SupportPhoneNumber, eVideo=eVideo, a202EventMessage=a202EventMessage, a66OperatingSystemIndex=a66OperatingSystemIndex, eProcessor=eProcessor, tVideo=tVideo, a17OperationalGroupIndex=a17OperationalGroupIndex, a75OperationalGroupIndex=a75OperationalGroupIndex)
