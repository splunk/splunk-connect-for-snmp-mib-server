#
# PySNMP MIB module HPN-ICF-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:29:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, NotificationType, iso, Counter64, ObjectIdentity, Counter32, Bits, Gauge32, Integer32, ModuleIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "NotificationType", "iso", "Counter64", "ObjectIdentity", "Counter32", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpnicfStack = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91))
hpnicfStack.setRevisions(('2008-04-30 16:50',))
if mibBuilder.loadTexts: hpnicfStack.setLastUpdated('200804301650Z')
if mibBuilder.loadTexts: hpnicfStack.setOrganization('')
hpnicfStackGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1))
hpnicfStackMaxMember = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackMaxMember.setStatus('current')
hpnicfStackMemberNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackMemberNum.setStatus('current')
hpnicfStackMaxConfigPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackMaxConfigPriority.setStatus('current')
hpnicfStackAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStackAutoUpdate.setStatus('current')
hpnicfStackMacPersistence = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPersist", 1), ("persistForSixMin", 2), ("persistForever", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStackMacPersistence.setStatus('current')
hpnicfStackLinkDelayInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStackLinkDelayInterval.setStatus('current')
hpnicfStackTopology = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chainConn", 1), ("ringConn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackTopology.setStatus('current')
hpnicfStackDeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2), )
if mibBuilder.loadTexts: hpnicfStackDeviceConfigTable.setStatus('current')
hpnicfStackDeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfStackDeviceConfigEntry.setStatus('current')
hpnicfStackMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackMemberID.setStatus('current')
hpnicfStackConfigMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStackConfigMemberID.setStatus('current')
hpnicfStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStackPriority.setStatus('current')
hpnicfStackPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackPortNum.setStatus('current')
hpnicfStackPortMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackPortMaxNum.setStatus('current')
hpnicfStackBoardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 3), )
if mibBuilder.loadTexts: hpnicfStackBoardConfigTable.setStatus('current')
hpnicfStackBoardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfStackBoardConfigEntry.setStatus('current')
hpnicfStackBoardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("loading", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackBoardRole.setStatus('current')
hpnicfStackBoardBelongtoMember = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackBoardBelongtoMember.setStatus('current')
hpnicfStackPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4), )
if mibBuilder.loadTexts: hpnicfStackPortInfoTable.setStatus('current')
hpnicfStackPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4, 1), ).setIndexNames((0, "HPN-ICF-STACK-MIB", "hpnicfStackMemberID"), (0, "HPN-ICF-STACK-MIB", "hpnicfStackPortIndex"))
if mibBuilder.loadTexts: hpnicfStackPortInfoEntry.setStatus('current')
hpnicfStackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfStackPortIndex.setStatus('current')
hpnicfStackPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackPortEnable.setStatus('current')
hpnicfStackPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("silent", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackPortStatus.setStatus('current')
hpnicfStackNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackNeighbor.setStatus('current')
hpnicfStackPortForwardingPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfStackPortForwardingPath.setStatus('current')
hpnicfStackPhyPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 5), )
if mibBuilder.loadTexts: hpnicfStackPhyPortInfoTable.setStatus('current')
hpnicfStackPhyPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfStackPhyPortInfoEntry.setStatus('current')
hpnicfStackBelongtoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStackBelongtoPort.setStatus('current')
hpnicfStackTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6))
hpnicfStackTrapOjbects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0))
hpnicfStackPortLinkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0, 1)).setObjects(("HPN-ICF-STACK-MIB", "hpnicfStackMemberID"), ("HPN-ICF-STACK-MIB", "hpnicfStackPortIndex"), ("HPN-ICF-STACK-MIB", "hpnicfStackPortStatus"))
if mibBuilder.loadTexts: hpnicfStackPortLinkStatusChange.setStatus('current')
hpnicfStackTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0, 2)).setObjects(("HPN-ICF-STACK-MIB", "hpnicfStackTopology"))
if mibBuilder.loadTexts: hpnicfStackTopologyChange.setStatus('current')
hpnicfStackMadBfdChangeNormal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfStackMadBfdChangeNormal.setStatus('current')
hpnicfStackMadBfdChangeFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfStackMadBfdChangeFailure.setStatus('current')
hpnicfStackMadLacpChangeNormal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfStackMadLacpChangeNormal.setStatus('current')
hpnicfStackMadLacpChangeFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 91, 6, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfStackMadLacpChangeFailure.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-STACK-MIB", hpnicfStackMadBfdChangeNormal=hpnicfStackMadBfdChangeNormal, hpnicfStackBoardBelongtoMember=hpnicfStackBoardBelongtoMember, hpnicfStackPortInfoTable=hpnicfStackPortInfoTable, hpnicfStackMemberNum=hpnicfStackMemberNum, hpnicfStackPriority=hpnicfStackPriority, hpnicfStackTopology=hpnicfStackTopology, hpnicfStackPortStatus=hpnicfStackPortStatus, hpnicfStackMadBfdChangeFailure=hpnicfStackMadBfdChangeFailure, hpnicfStackDeviceConfigTable=hpnicfStackDeviceConfigTable, hpnicfStackBoardRole=hpnicfStackBoardRole, hpnicfStackNeighbor=hpnicfStackNeighbor, hpnicfStackMadLacpChangeFailure=hpnicfStackMadLacpChangeFailure, hpnicfStackPortLinkStatusChange=hpnicfStackPortLinkStatusChange, hpnicfStackDeviceConfigEntry=hpnicfStackDeviceConfigEntry, hpnicfStackBelongtoPort=hpnicfStackBelongtoPort, hpnicfStackMaxConfigPriority=hpnicfStackMaxConfigPriority, hpnicfStackPortForwardingPath=hpnicfStackPortForwardingPath, PYSNMP_MODULE_ID=hpnicfStack, hpnicfStackTrap=hpnicfStackTrap, hpnicfStackBoardConfigTable=hpnicfStackBoardConfigTable, hpnicfStackGlobalConfig=hpnicfStackGlobalConfig, hpnicfStackPortIndex=hpnicfStackPortIndex, hpnicfStackPortInfoEntry=hpnicfStackPortInfoEntry, hpnicfStackAutoUpdate=hpnicfStackAutoUpdate, hpnicfStackTopologyChange=hpnicfStackTopologyChange, hpnicfStackPhyPortInfoTable=hpnicfStackPhyPortInfoTable, hpnicfStackPortNum=hpnicfStackPortNum, hpnicfStack=hpnicfStack, hpnicfStackMacPersistence=hpnicfStackMacPersistence, hpnicfStackBoardConfigEntry=hpnicfStackBoardConfigEntry, hpnicfStackMadLacpChangeNormal=hpnicfStackMadLacpChangeNormal, hpnicfStackPortMaxNum=hpnicfStackPortMaxNum, hpnicfStackTrapOjbects=hpnicfStackTrapOjbects, hpnicfStackMaxMember=hpnicfStackMaxMember, hpnicfStackMemberID=hpnicfStackMemberID, hpnicfStackPortEnable=hpnicfStackPortEnable, hpnicfStackPhyPortInfoEntry=hpnicfStackPhyPortInfoEntry, hpnicfStackConfigMemberID=hpnicfStackConfigMemberID, hpnicfStackLinkDelayInterval=hpnicfStackLinkDelayInterval)
