#
# PySNMP MIB module FOUNDRY-SN-APPLETALK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-APPLETALK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
Action, RowSts, RtrStatus, PortIndex, ClearStatus = mibBuilder.importSymbols("FOUNDRY-SN-IP-MIB", "Action", "RowSts", "RtrStatus", "PortIndex", "ClearStatus")
router, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "router")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Counter64, NotificationType, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, Integer32, IpAddress, ModuleIdentity, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter64", "NotificationType", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "Integer32", "IpAddress", "ModuleIdentity", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snAppleTalk = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10))
snAppleTalk.setRevisions(('2010-06-02 00:00', '2009-09-30 00:00',))
if mibBuilder.loadTexts: snAppleTalk.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snAppleTalk.setOrganization('Brocade Communications Systems, Inc.')
class ATNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class DdpNodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class ATName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

snRtATGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1))
snRtATRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATRoutingEnable.setStatus('current')
snRtATClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 2), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearArpCache.setStatus('current')
snRtATClearFwdCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 3), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearFwdCache.setStatus('current')
snRtATClearRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 4), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearRoute.setStatus('current')
snRtATClearTrafficCounters = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 5), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATClearTrafficCounters.setStatus('current')
snRtATArpRetransmitCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATArpRetransmitCount.setStatus('current')
snRtATArpRetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATArpRetransmitInterval.setStatus('current')
snRtATGleanPacketsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 8), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATGleanPacketsEnable.setStatus('current')
snRtATRtmpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATRtmpUpdateInterval.setStatus('current')
snRtATZipQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATZipQueryInterval.setStatus('current')
snRtATInRtmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInRtmpPkts.setStatus('current')
snRtATOutRtmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutRtmpPkts.setStatus('current')
snRtATFilteredRtmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFilteredRtmpPkts.setStatus('current')
snRtATInZipPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInZipPkts.setStatus('current')
snRtATOutZipPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutZipPkts.setStatus('current')
snRtATInZipGZLPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInZipGZLPkts.setStatus('current')
snRtATOutZipGZLPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutZipGZLPkts.setStatus('current')
snRtATInZipNetInfoPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInZipNetInfoPkts.setStatus('current')
snRtATOutZipNetInfoPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutZipNetInfoPkts.setStatus('current')
snRtATInDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInDdpPkts.setStatus('current')
snRtATOutDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutDdpPkts.setStatus('current')
snRtATForwardedDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATForwardedDdpPkts.setStatus('current')
snRtATInDeliveredDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInDeliveredDdpPkts.setStatus('current')
snRtATDroppedNoRouteDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATDroppedNoRouteDdpPkts.setStatus('current')
snRtATDroppedBadHopCountsDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATDroppedBadHopCountsDdpPkts.setStatus('current')
snRtATDroppedOtherReasonsDdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATDroppedOtherReasonsDdpPkts.setStatus('current')
snRtATInAarpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATInAarpPkts.setStatus('current')
snRtATOutAarpPkts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATOutAarpPkts.setStatus('current')
snRtATSocketPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 2), )
if mibBuilder.loadTexts: snRtATSocketPriorityTable.setStatus('current')
snRtATSocketPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATSocketPrioritySocket"))
if mibBuilder.loadTexts: snRtATSocketPriorityEntry.setStatus('current')
snRtATSocketPrioritySocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATSocketPrioritySocket.setStatus('current')
snRtATSocketPriorityPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATSocketPriorityPriority.setStatus('current')
snRtATPortZoneFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3), )
if mibBuilder.loadTexts: snRtATPortZoneFilterTable.setStatus('current')
snRtATPortZoneFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATPortZoneFilterPortIndex"), (0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATPortZoneFilterZone"))
if mibBuilder.loadTexts: snRtATPortZoneFilterEntry.setStatus('current')
snRtATPortZoneFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortZoneFilterPortIndex.setStatus('current')
snRtATPortZoneFilterZone = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3, 1, 2), ATName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortZoneFilterZone.setStatus('current')
snRtATPortZoneFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3, 1, 3), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortZoneFilterAction.setStatus('current')
snRtATPortZoneFilterRtmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3, 1, 4), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortZoneFilterRtmpEnable.setStatus('current')
snRtATPortZoneFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 3, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortZoneFilterRowStatus.setStatus('current')
snRtATPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4), )
if mibBuilder.loadTexts: snRtATPortTable.setStatus('current')
snRtATPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATPortIndex"))
if mibBuilder.loadTexts: snRtATPortEntry.setStatus('current')
snRtATPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortIndex.setStatus('current')
snRtATPortArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATPortArpAge.setStatus('current')
snRtATPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortState.setStatus('current')
snRtATPortSeedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("seedRouter", 2), ("nonSeedRouter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortSeedRouter.setStatus('current')
snRtATPortOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("seedRouter", 2), ("nonSeedRouter", 3), ("notOperational", 4), ("routingDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATPortOperationMode.setStatus('current')
snRtATFwdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5), )
if mibBuilder.loadTexts: snRtATFwdCacheTable.setStatus('current')
snRtATFwdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATFwdCacheIndex"))
if mibBuilder.loadTexts: snRtATFwdCacheEntry.setStatus('current')
snRtATFwdCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheIndex.setStatus('current')
snRtATFwdCacheNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 2), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheNetAddr.setStatus('current')
snRtATFwdCacheMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheMacAddr.setStatus('current')
snRtATFwdCacheNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 4), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheNextHop.setStatus('current')
snRtATFwdCacheOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheOutgoingPort.setStatus('current')
snRtATFwdCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheType.setStatus('current')
snRtATFwdCacheAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("forward", 2), ("forUs", 3), ("waitForArp", 4), ("dropPacket", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheAction.setStatus('current')
snRtATFwdCacheVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATFwdCacheVLanId.setStatus('current')
snRtATZoneTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 6), )
if mibBuilder.loadTexts: snRtATZoneTable.setStatus('current')
snRtATZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATZoneIndex"))
if mibBuilder.loadTexts: snRtATZoneEntry.setStatus('current')
snRtATZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneIndex.setStatus('current')
snRtATZoneNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 6, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneNetStart.setStatus('current')
snRtATZoneNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 6, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneNetEnd.setStatus('current')
snRtATZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 6, 1, 4), ATName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATZoneName.setStatus('current')
snRtATAddZoneFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 7), )
if mibBuilder.loadTexts: snRtATAddZoneFilterTable.setStatus('current')
snRtATAddZoneFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-APPLETALK-MIB", "snRtATAddZoneFilterPortIndex"))
if mibBuilder.loadTexts: snRtATAddZoneFilterEntry.setStatus('current')
snRtATAddZoneFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 7, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtATAddZoneFilterPortIndex.setStatus('current')
snRtATAddZoneFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 7, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATAddZoneFilterAction.setStatus('current')
snRtATAddZoneFilterRtmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 10, 7, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtATAddZoneFilterRtmpEnable.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-SN-APPLETALK-MIB", snAppleTalk=snAppleTalk, snRtATZipQueryInterval=snRtATZipQueryInterval, snRtATOutZipGZLPkts=snRtATOutZipGZLPkts, snRtATClearFwdCache=snRtATClearFwdCache, snRtATPortZoneFilterZone=snRtATPortZoneFilterZone, snRtATInDeliveredDdpPkts=snRtATInDeliveredDdpPkts, snRtATAddZoneFilterAction=snRtATAddZoneFilterAction, snRtATPortTable=snRtATPortTable, snRtATAddZoneFilterRtmpEnable=snRtATAddZoneFilterRtmpEnable, snRtATOutAarpPkts=snRtATOutAarpPkts, snRtATSocketPriorityEntry=snRtATSocketPriorityEntry, snRtATAddZoneFilterPortIndex=snRtATAddZoneFilterPortIndex, snRtATPortState=snRtATPortState, snRtATFwdCacheNetAddr=snRtATFwdCacheNetAddr, snRtATFwdCacheNextHop=snRtATFwdCacheNextHop, ATName=ATName, snRtATClearRoute=snRtATClearRoute, snRtATFilteredRtmpPkts=snRtATFilteredRtmpPkts, snRtATFwdCacheType=snRtATFwdCacheType, snRtATGleanPacketsEnable=snRtATGleanPacketsEnable, snRtATPortZoneFilterRowStatus=snRtATPortZoneFilterRowStatus, snRtATFwdCacheIndex=snRtATFwdCacheIndex, snRtATInZipGZLPkts=snRtATInZipGZLPkts, snRtATFwdCacheVLanId=snRtATFwdCacheVLanId, snRtATDroppedBadHopCountsDdpPkts=snRtATDroppedBadHopCountsDdpPkts, snRtATZoneEntry=snRtATZoneEntry, snRtATZoneTable=snRtATZoneTable, DdpNodeAddress=DdpNodeAddress, snRtATInZipNetInfoPkts=snRtATInZipNetInfoPkts, snRtATPortOperationMode=snRtATPortOperationMode, snRtATPortZoneFilterPortIndex=snRtATPortZoneFilterPortIndex, snRtATFwdCacheEntry=snRtATFwdCacheEntry, snRtATDroppedOtherReasonsDdpPkts=snRtATDroppedOtherReasonsDdpPkts, snRtATArpRetransmitCount=snRtATArpRetransmitCount, snRtATFwdCacheOutgoingPort=snRtATFwdCacheOutgoingPort, snRtATInZipPkts=snRtATInZipPkts, snRtATInDdpPkts=snRtATInDdpPkts, snRtATClearTrafficCounters=snRtATClearTrafficCounters, snRtATArpRetransmitInterval=snRtATArpRetransmitInterval, snRtATSocketPrioritySocket=snRtATSocketPrioritySocket, snRtATSocketPriorityTable=snRtATSocketPriorityTable, snRtATPortSeedRouter=snRtATPortSeedRouter, snRtATGeneral=snRtATGeneral, snRtATPortZoneFilterAction=snRtATPortZoneFilterAction, snRtATOutZipPkts=snRtATOutZipPkts, snRtATFwdCacheMacAddr=snRtATFwdCacheMacAddr, snRtATPortZoneFilterTable=snRtATPortZoneFilterTable, snRtATForwardedDdpPkts=snRtATForwardedDdpPkts, snRtATFwdCacheTable=snRtATFwdCacheTable, snRtATClearArpCache=snRtATClearArpCache, snRtATRtmpUpdateInterval=snRtATRtmpUpdateInterval, snRtATOutDdpPkts=snRtATOutDdpPkts, snRtATOutZipNetInfoPkts=snRtATOutZipNetInfoPkts, snRtATPortEntry=snRtATPortEntry, snRtATAddZoneFilterEntry=snRtATAddZoneFilterEntry, snRtATZoneNetEnd=snRtATZoneNetEnd, snRtATDroppedNoRouteDdpPkts=snRtATDroppedNoRouteDdpPkts, snRtATInAarpPkts=snRtATInAarpPkts, snRtATZoneNetStart=snRtATZoneNetStart, snRtATPortArpAge=snRtATPortArpAge, snRtATFwdCacheAction=snRtATFwdCacheAction, snRtATInRtmpPkts=snRtATInRtmpPkts, snRtATSocketPriorityPriority=snRtATSocketPriorityPriority, snRtATPortIndex=snRtATPortIndex, snRtATPortZoneFilterRtmpEnable=snRtATPortZoneFilterRtmpEnable, snRtATAddZoneFilterTable=snRtATAddZoneFilterTable, snRtATOutRtmpPkts=snRtATOutRtmpPkts, ATNetworkNumber=ATNetworkNumber, snRtATPortZoneFilterEntry=snRtATPortZoneFilterEntry, snRtATZoneName=snRtATZoneName, PYSNMP_MODULE_ID=snAppleTalk, snRtATZoneIndex=snRtATZoneIndex, snRtATRoutingEnable=snRtATRoutingEnable)
