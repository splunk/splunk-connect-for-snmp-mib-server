#
# PySNMP MIB module ELTEX-MES-BRIDGE-SECURITY (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-BRIDGE-SECURITY
# Produced by pysmi-0.3.4 at Mon Apr 29 18:46:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
eltMesBridgeSecurity, eltMes = mibBuilder.importSymbols("ELTEX-MES", "eltMesBridgeSecurity", "eltMes")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
VlanId, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "PortList")
rlIpArpInspectEnableVlanEntry, = mibBuilder.importSymbols("RADLAN-BRIDGE-SECURITY", "rlIpArpInspectEnableVlanEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, iso, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, TimeTicks, MibIdentifier, ObjectIdentity, IpAddress, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "iso", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "TimeTicks", "MibIdentifier", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
eltMesIpDhcpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1))
eltMesPppoeIa = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6))
eltMesIpv6DhcpGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2))
eltMesIpv6RaGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3))
eltMesIpDhcpSnoopNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 0))
eltMesIpArpInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7))
class EltCircuitIdType(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 63)

class EltRemoteIdType(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 63)

class EltOpt82CombinationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("sp", 1), ("sv", 2), ("pv", 3), ("spv", 4), ("bin", 5))

class EltOpt82DelimiterType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("tr101", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("hash", 5), ("slash", 6), ("space", 7))

class EltOpt82SuboptionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tr101", 1), ("custom", 2))

class EltDHCPSnoopRateLimitType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

eltIpDhcpOpt82AccessNodeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82AccessNodeIdentifier.setStatus('current')
eltIpDhcpOpt82CircuitIdSuboptionsCombination = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 15), EltOpt82CombinationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82CircuitIdSuboptionsCombination.setStatus('current')
eltIpDhcpOpt82CircuitIdSuboptionsDelimeter = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 16), EltOpt82DelimiterType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82CircuitIdSuboptionsDelimeter.setStatus('current')
eltIpDhcpOpt82PortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17), )
if mibBuilder.loadTexts: eltIpDhcpOpt82PortTable.setStatus('current')
eltIpDhcpOpt82SuboptionType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 18), EltOpt82SuboptionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82SuboptionType.setStatus('current')
eltIpDhcpOpt82PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIpDhcpOpt82PortEntry.setStatus('current')
eltIpDhcpOpt82PortCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1, 2), EltCircuitIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82PortCircuitId.setStatus('current')
eltIpDhcpOpt82PortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1, 3), EltRemoteIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82PortRemoteId.setStatus('current')
eltIpDhcpOpt82PortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpDhcpOpt82PortRowStatus.setStatus('current')
eltIpDhcpOpt82RemoteIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82RemoteIdentifier.setStatus('current')
eltIpDhcpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20), )
if mibBuilder.loadTexts: eltIpDhcpSnoopPortTable.setStatus('current')
eltIpDhcpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIpDhcpSnoopPortEntry.setStatus('current')
eltIpDhcpSnoopPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20, 1, 2), EltDHCPSnoopRateLimitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpSnoopPortRateLimit.setStatus('current')
eltIpDhcpSnoopPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpDhcpSnoopPortRowStatus.setStatus('current')
eltIpDhcpSnoopRateLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("ELTEX-MES-BRIDGE-SECURITY", "eltIpDhcpSnoopPortRateLimit"))
if mibBuilder.loadTexts: eltIpDhcpSnoopRateLimitTrap.setStatus('current')
eltPppoeIaEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaEnable.setStatus('current')
eltPppoeIaAccessNodeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaAccessNodeIdentifier.setStatus('current')
eltPppoeIaCircuitIdSuboptionsCombination = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 3), EltOpt82CombinationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaCircuitIdSuboptionsCombination.setStatus('current')
eltPppoeIaCircuitIdSuboptionsDelimeter = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 4), EltOpt82DelimiterType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaCircuitIdSuboptionsDelimeter.setStatus('current')
eltPppoeIaGenericErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaGenericErrorMessage.setStatus('current')
eltPppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6), )
if mibBuilder.loadTexts: eltPppoeIaPortTable.setStatus('current')
eltPppoeIaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltPppoeIaPortEntry.setStatus('current')
eltPppoeIaPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortEnabled.setStatus('current')
eltPppoeIaPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortTrusted.setStatus('current')
eltPppoeIaPortCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 4), EltCircuitIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortCircuitId.setStatus('current')
eltPppoeIaPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 5), EltRemoteIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortRemoteId.setStatus('current')
eltPppoeIaPortStripVendorTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortStripVendorTag.setStatus('current')
eltPppoeIaPortStatsRxPADI = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADI.setStatus('current')
eltPppoeIaPortStatsRxPADO = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADO.setStatus('current')
eltPppoeIaPortStatsRxPADR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADR.setStatus('current')
eltPppoeIaPortStatsRxPADS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADS.setStatus('current')
eltPppoeIaPortStatsRxPADT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADT.setStatus('current')
eltPppoeIaPortStatsTxGenError = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsTxGenError.setStatus('current')
eltPppoeIaPortStatsDroppedResponseFromUntrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedResponseFromUntrusted.setStatus('current')
eltPppoeIaPortStatsDroppedRequestToUntrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedRequestToUntrusted.setStatus('current')
eltPppoeIaPortStatsDroppedMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedMalformed.setStatus('current')
eltPppoeIaPortStatsClearCountersAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortStatsClearCountersAction.setStatus('current')
eltPppoeIaPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortRowStatus.setStatus('current')
eltPppoeIaClearCountersAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaClearCountersAction.setStatus('current')
class EltPppoeIaSessionIDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

eltPppoeIaSessionTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8), )
if mibBuilder.loadTexts: eltPppoeIaSessionTable.setStatus('current')
eltPppoeIaSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltPppoeIaSessionVLANTag"), (0, "ELTEX-MES-BRIDGE-SECURITY", "eltPppoeIaSessionMACAddress"))
if mibBuilder.loadTexts: eltPppoeIaSessionEntry.setStatus('current')
eltPppoeIaSessionVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionVLANTag.setStatus('current')
eltPppoeIaSessionMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionMACAddress.setStatus('current')
eltPppoeIaSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionPort.setStatus('current')
eltPppoeIaSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 4), EltPppoeIaSessionIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionID.setStatus('current')
eltPppoeIaSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionTimer.setStatus('current')
eltPppoeIaSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionRowStatus.setStatus('current')
eltIpv6DhcpGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnable.setStatus('current')
eltIpv6DhcpGuardEnableTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2), )
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableTable.setStatus('current')
eltIpv6DhcpGuardEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6DhcpGuardEnableVlanTag"))
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableEntry.setStatus('current')
eltIpv6DhcpGuardEnableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableVlanTag.setStatus('current')
eltIpv6DhcpGuardEnableVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableVlanRowStatus.setStatus('current')
class EltIpv6DhcpGuardRoleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("client", 1), ("server", 2))

eltIpv6DhcpGuardTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3), )
if mibBuilder.loadTexts: eltIpv6DhcpGuardTable.setStatus('current')
eltIpv6DhcpGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6DhcpGuardIfIndex"))
if mibBuilder.loadTexts: eltIpv6DhcpGuardEntry.setStatus('current')
eltIpv6DhcpGuardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardIfIndex.setStatus('current')
eltIpv6DhcpGuardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 2), EltIpv6DhcpGuardRoleType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardRole.setStatus('current')
eltIpv6DhcpGuardAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardAcl.setStatus('current')
eltIpv6DhcpGuardPrefList = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardPrefList.setStatus('current')
eltIpv6DhcpGuardTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardTrusted.setStatus('current')
eltIpv6DhcpGuardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardRowStatus.setStatus('current')
eltIpv6RaGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardEnable.setStatus('current')
eltIpv6RaGuardEnableTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2), )
if mibBuilder.loadTexts: eltIpv6RaGuardEnableTable.setStatus('current')
eltIpv6RaGuardEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6RaGuardEnableVlanTag"))
if mibBuilder.loadTexts: eltIpv6RaGuardEnableEntry.setStatus('current')
eltIpv6RaGuardEnableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: eltIpv6RaGuardEnableVlanTag.setStatus('current')
eltIpv6RaGuardEnableVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardEnableVlanRowStatus.setStatus('current')
class EltIpv6RaGuardRoleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("router", 1), ("host", 2))

eltIpv6RaGuardTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3), )
if mibBuilder.loadTexts: eltIpv6RaGuardTable.setStatus('current')
eltIpv6RaGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6RaGuardIfIndex"))
if mibBuilder.loadTexts: eltIpv6RaGuardEntry.setStatus('current')
eltIpv6RaGuardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardIfIndex.setStatus('current')
eltIpv6RaGuardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 2), EltIpv6RaGuardRoleType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardRole.setStatus('current')
eltIpv6RaGuardAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardAcl.setStatus('current')
eltIpv6RaGuardPrefList = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardPrefList.setStatus('current')
eltIpv6RaGuardTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardTrusted.setStatus('current')
eltIpv6RaGuardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardRowStatus.setStatus('current')
eltIpv6RelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RelayAgentEnable.setStatus('current')
eltIpArpInspectPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1), )
if mibBuilder.loadTexts: eltIpArpInspectPortStatTable.setStatus('current')
eltIpArpInspectPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpArpInspectPortIndex"))
if mibBuilder.loadTexts: eltIpArpInspectPortStatEntry.setStatus('current')
eltIpArpInspectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eltIpArpInspectPortIndex.setStatus('current')
eltIpArpInspectPortNumOfArpForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpForwarded.setStatus('current')
eltIpArpInspectPortNumOfArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpDropped.setStatus('current')
eltIpArpInspectPortNumOfArpMismatched = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpMismatched.setStatus('current')
eltIpArpInspectLastDropIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectLastDropIP.setStatus('current')
eltIpArpInspectLastDropMac = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectLastDropMac.setStatus('current')
eltIpArpInspectLastDropTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectLastDropTime.setStatus('current')
eltIpArpInspectEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2), )
if mibBuilder.loadTexts: eltIpArpInspectEnableVlanTable.setStatus('current')
eltIpArpInspectEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1), )
rlIpArpInspectEnableVlanEntry.registerAugmentions(("ELTEX-MES-BRIDGE-SECURITY", "eltIpArpInspectEnableVlanEntry"))
eltIpArpInspectEnableVlanEntry.setIndexNames(*rlIpArpInspectEnableVlanEntry.getIndexNames())
if mibBuilder.loadTexts: eltIpArpInspectEnableVlanEntry.setStatus('current')
eltIpArpInspectVlanLastDropIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropIP.setStatus('current')
eltIpArpInspectVlanLastDropMac = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropMac.setStatus('current')
eltIpArpInspectVlanLastDropTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropTime.setStatus('current')
eltIpArpInspectPortClearCountersAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpArpInspectPortClearCountersAction.setStatus('current')
mibBuilder.exportSymbols("ELTEX-MES-BRIDGE-SECURITY", eltIpDhcpOpt82PortEntry=eltIpDhcpOpt82PortEntry, eltIpv6RaGuardIfIndex=eltIpv6RaGuardIfIndex, eltIpv6RaGuardEnable=eltIpv6RaGuardEnable, eltPppoeIaPortStatsDroppedRequestToUntrusted=eltPppoeIaPortStatsDroppedRequestToUntrusted, eltMesIpv6DhcpGuard=eltMesIpv6DhcpGuard, eltPppoeIaPortStripVendorTag=eltPppoeIaPortStripVendorTag, eltIpArpInspectPortNumOfArpMismatched=eltIpArpInspectPortNumOfArpMismatched, eltIpArpInspectPortNumOfArpForwarded=eltIpArpInspectPortNumOfArpForwarded, eltPppoeIaPortTable=eltPppoeIaPortTable, eltIpv6RaGuardEnableEntry=eltIpv6RaGuardEnableEntry, EltDHCPSnoopRateLimitType=EltDHCPSnoopRateLimitType, eltIpDhcpSnoopRateLimitTrap=eltIpDhcpSnoopRateLimitTrap, eltIpArpInspectEnableVlanEntry=eltIpArpInspectEnableVlanEntry, eltIpDhcpOpt82PortCircuitId=eltIpDhcpOpt82PortCircuitId, eltIpArpInspectPortStatEntry=eltIpArpInspectPortStatEntry, eltIpArpInspectPortNumOfArpDropped=eltIpArpInspectPortNumOfArpDropped, eltIpArpInspectLastDropTime=eltIpArpInspectLastDropTime, eltIpDhcpSnoopPortTable=eltIpDhcpSnoopPortTable, eltPppoeIaSessionEntry=eltPppoeIaSessionEntry, EltOpt82CombinationType=EltOpt82CombinationType, eltIpDhcpSnoopPortRowStatus=eltIpDhcpSnoopPortRowStatus, eltIpv6DhcpGuardRole=eltIpv6DhcpGuardRole, eltPppoeIaSessionPort=eltPppoeIaSessionPort, eltPppoeIaPortRowStatus=eltPppoeIaPortRowStatus, eltIpArpInspectLastDropIP=eltIpArpInspectLastDropIP, eltMesPppoeIa=eltMesPppoeIa, eltIpv6RaGuardAcl=eltIpv6RaGuardAcl, eltIpv6RaGuardPrefList=eltIpv6RaGuardPrefList, eltIpArpInspectVlanLastDropTime=eltIpArpInspectVlanLastDropTime, eltIpArpInspectEnableVlanTable=eltIpArpInspectEnableVlanTable, eltIpv6RelayAgentEnable=eltIpv6RelayAgentEnable, eltIpv6DhcpGuardEnableVlanTag=eltIpv6DhcpGuardEnableVlanTag, eltPppoeIaSessionMACAddress=eltPppoeIaSessionMACAddress, eltMesIpDhcpSnoopNotif=eltMesIpDhcpSnoopNotif, eltPppoeIaPortStatsDroppedMalformed=eltPppoeIaPortStatsDroppedMalformed, eltPppoeIaPortStatsClearCountersAction=eltPppoeIaPortStatsClearCountersAction, eltPppoeIaPortStatsDroppedResponseFromUntrusted=eltPppoeIaPortStatsDroppedResponseFromUntrusted, eltPppoeIaPortStatsRxPADT=eltPppoeIaPortStatsRxPADT, eltIpArpInspectPortIndex=eltIpArpInspectPortIndex, eltPppoeIaAccessNodeIdentifier=eltPppoeIaAccessNodeIdentifier, eltPppoeIaClearCountersAction=eltPppoeIaClearCountersAction, eltPppoeIaCircuitIdSuboptionsCombination=eltPppoeIaCircuitIdSuboptionsCombination, eltPppoeIaGenericErrorMessage=eltPppoeIaGenericErrorMessage, eltIpv6RaGuardTrusted=eltIpv6RaGuardTrusted, eltIpv6DhcpGuardEnableEntry=eltIpv6DhcpGuardEnableEntry, eltIpv6RaGuardTable=eltIpv6RaGuardTable, eltPppoeIaCircuitIdSuboptionsDelimeter=eltPppoeIaCircuitIdSuboptionsDelimeter, eltMesIpDhcpSnoop=eltMesIpDhcpSnoop, eltIpv6RaGuardRole=eltIpv6RaGuardRole, eltMesIpv6RaGuard=eltMesIpv6RaGuard, eltIpArpInspectVlanLastDropMac=eltIpArpInspectVlanLastDropMac, EltCircuitIdType=EltCircuitIdType, eltIpv6RaGuardEnableTable=eltIpv6RaGuardEnableTable, eltIpv6DhcpGuardEnable=eltIpv6DhcpGuardEnable, eltIpv6DhcpGuardIfIndex=eltIpv6DhcpGuardIfIndex, eltPppoeIaPortStatsRxPADR=eltPppoeIaPortStatsRxPADR, eltIpv6DhcpGuardEnableTable=eltIpv6DhcpGuardEnableTable, eltIpDhcpOpt82RemoteIdentifier=eltIpDhcpOpt82RemoteIdentifier, EltPppoeIaSessionIDType=EltPppoeIaSessionIDType, EltOpt82SuboptionType=EltOpt82SuboptionType, eltIpv6RaGuardEnableVlanTag=eltIpv6RaGuardEnableVlanTag, eltIpDhcpOpt82PortRowStatus=eltIpDhcpOpt82PortRowStatus, eltPppoeIaPortEntry=eltPppoeIaPortEntry, eltIpv6DhcpGuardEnableVlanRowStatus=eltIpv6DhcpGuardEnableVlanRowStatus, eltPppoeIaPortStatsRxPADS=eltPppoeIaPortStatsRxPADS, eltMesIpArpInspect=eltMesIpArpInspect, eltPppoeIaPortEnabled=eltPppoeIaPortEnabled, eltIpv6RaGuardEntry=eltIpv6RaGuardEntry, eltPppoeIaPortTrusted=eltPppoeIaPortTrusted, eltIpArpInspectPortStatTable=eltIpArpInspectPortStatTable, eltPppoeIaSessionTimer=eltPppoeIaSessionTimer, eltPppoeIaPortCircuitId=eltPppoeIaPortCircuitId, eltIpArpInspectLastDropMac=eltIpArpInspectLastDropMac, eltIpv6DhcpGuardTrusted=eltIpv6DhcpGuardTrusted, eltPppoeIaPortStatsRxPADO=eltPppoeIaPortStatsRxPADO, eltIpv6RaGuardEnableVlanRowStatus=eltIpv6RaGuardEnableVlanRowStatus, eltIpDhcpOpt82PortTable=eltIpDhcpOpt82PortTable, eltIpDhcpOpt82AccessNodeIdentifier=eltIpDhcpOpt82AccessNodeIdentifier, eltPppoeIaSessionTable=eltPppoeIaSessionTable, eltPppoeIaPortStatsRxPADI=eltPppoeIaPortStatsRxPADI, eltIpv6DhcpGuardPrefList=eltIpv6DhcpGuardPrefList, EltOpt82DelimiterType=EltOpt82DelimiterType, eltPppoeIaPortRemoteId=eltPppoeIaPortRemoteId, EltRemoteIdType=EltRemoteIdType, eltIpv6DhcpGuardRowStatus=eltIpv6DhcpGuardRowStatus, eltPppoeIaSessionVLANTag=eltPppoeIaSessionVLANTag, eltIpDhcpOpt82PortRemoteId=eltIpDhcpOpt82PortRemoteId, eltIpv6DhcpGuardTable=eltIpv6DhcpGuardTable, eltPppoeIaSessionID=eltPppoeIaSessionID, EltIpv6DhcpGuardRoleType=EltIpv6DhcpGuardRoleType, eltIpDhcpOpt82CircuitIdSuboptionsDelimeter=eltIpDhcpOpt82CircuitIdSuboptionsDelimeter, eltIpv6RaGuardRowStatus=eltIpv6RaGuardRowStatus, eltIpDhcpOpt82SuboptionType=eltIpDhcpOpt82SuboptionType, eltIpDhcpOpt82CircuitIdSuboptionsCombination=eltIpDhcpOpt82CircuitIdSuboptionsCombination, EltIpv6RaGuardRoleType=EltIpv6RaGuardRoleType, eltIpArpInspectVlanLastDropIP=eltIpArpInspectVlanLastDropIP, eltPppoeIaPortStatsTxGenError=eltPppoeIaPortStatsTxGenError, eltIpDhcpSnoopPortRateLimit=eltIpDhcpSnoopPortRateLimit, eltPppoeIaSessionRowStatus=eltPppoeIaSessionRowStatus, eltPppoeIaEnable=eltPppoeIaEnable, eltIpArpInspectPortClearCountersAction=eltIpArpInspectPortClearCountersAction, eltIpv6DhcpGuardAcl=eltIpv6DhcpGuardAcl, eltIpv6DhcpGuardEntry=eltIpv6DhcpGuardEntry, eltIpDhcpSnoopPortEntry=eltIpDhcpSnoopPortEntry)
