#
# PySNMP MIB module HP-ICF-GPPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-GPPC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:21:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Counter64, NotificationType, Unsigned32, MibIdentifier, Integer32, Counter32, iso, TimeTicks, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32", "Counter32", "iso", "TimeTicks", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hpicfGppcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41))
hpicfGppcMIB.setRevisions(('2009-12-15 01:05',))
if mibBuilder.loadTexts: hpicfGppcMIB.setLastUpdated('200912150105Z')
if mibBuilder.loadTexts: hpicfGppcMIB.setOrganization('HP Networking')
class HpicfGppcPolicyName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

hpicfGppcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 1))
hpicfGppcAppControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2), )
if mibBuilder.loadTexts: hpicfGppcAppControlTable.setStatus('current')
hpicfGppcAppControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1), ).setIndexNames((0, "HP-ICF-GPPC-MIB", "hpicfGppcAcAppName"), (0, "HP-ICF-GPPC-MIB", "hpicfGppcAcAppInstance"), (0, "HP-ICF-GPPC-MIB", "hpicfGppcAcPolicyName"))
if mibBuilder.loadTexts: hpicfGppcAppControlEntry.setStatus('current')
hpicfGppcAcAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: hpicfGppcAcAppName.setStatus('current')
hpicfGppcAcAppInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: hpicfGppcAcAppInstance.setStatus('current')
hpicfGppcAcPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 3), HpicfGppcPolicyName())
if mibBuilder.loadTexts: hpicfGppcAcPolicyName.setStatus('current')
hpicfGppcAcIngressIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcIngressIfList.setStatus('current')
hpicfGppcAcIngressVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcIngressVlanMap1k.setStatus('current')
hpicfGppcAcIngressVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcIngressVlanMap2k.setStatus('current')
hpicfGppcAcIngressVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcIngressVlanMap3k.setStatus('current')
hpicfGppcAcIngressVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcIngressVlanMap4k.setStatus('current')
hpicfGppcAcEgressIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 9), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcEgressIfList.setStatus('current')
hpicfGppcAcEgressVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcEgressVlanMap1k.setStatus('current')
hpicfGppcAcEgressVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcEgressVlanMap2k.setStatus('current')
hpicfGppcAcEgressVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcEgressVlanMap3k.setStatus('current')
hpicfGppcAcEgressVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcEgressVlanMap4k.setStatus('current')
hpicfGppcAcExpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("slot-down", 2), ("app-down", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcExpPolicy.setStatus('current')
hpicfGppcAcExpString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcExpString.setStatus('current')
hpicfGppcAcLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 54, 55, 56, 57, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85))).clone(namedValues=NamedValues(("no-error", 0), ("gppc-generic-error", 1), ("gppc-length-error", 2), ("gppc-name-error", 3), ("gppc-parameter-error", 4), ("gppc-not-implemented", 5), ("gppc-malloc-error", 6), ("gppc-too-many-apps", 7), ("gppc-too-many-policies", 8), ("gppc-already-reserved", 9), ("gppc-entry-not-found", 10), ("gppc-entry-exists", 11), ("gppc-platform-error", 12), ("gppc-app-using-policy", 13), ("gppc-invalid-policy-type", 14), ("gppc-not-reserved", 15), ("gppc-no-policy", 16), ("gppc-policy-not-active", 17), ("gppc-policy-has-rules", 18), ("gppc-rule-exists", 19), ("gppc-mac-mirror-mac-exists", 30), ("gppc-mac-mirror-dir-both-conflict", 31), ("gppc-mac-mirror-dir-src-conflict", 32), ("gppc-mac-mirror-dir-dst-conflict", 33), ("gppc-mac-mirror-invalid-session", 34), ("gppc-mac-mirror-invalid-direction", 35), ("gppc-mac-mirror-no-entry", 36), ("gppc-mac-mirror-convert-error", 37), ("gppc-mac-mirror-table-full", 38), ("gppc-cfg-generic-error", 50), ("gppc-cfg-entry-not-found", 51), ("gppc-cfg-set-error", 52), ("gppc-cfg-get-error", 53), ("gppc-cfg-no-record", 54), ("gppc-cfg-add-record-error", 55), ("gppc-cfg-invalid", 56), ("gppc-cfg-malloc-error", 57), ("gppcTrmodeErr", 70), ("gppcTrmodeInvalidZoneNumber", 71), ("gppcTrmodeOperationNotSupported", 72), ("gppcTrmodeZoneNameTooLong", 73), ("gppcTrmodeZoneNameNotFound", 74), ("gppcTrmodeZoneNameAlreadyExists", 75), ("gppcTrmodeTooManyZoneNames", 76), ("gppcTrmodeUnknownPort", 77), ("gppcTrmodeCannotDeleteDefaultZone", 78), ("gppcTrmodeCannotDeleteZoneWithRules", 79), ("gppcTrmodeInvalidFilterNumber", 80), ("gppcTrmodeCannotFilterTrafficWithinZone", 81), ("gppcTrmodeInvalidAction", 82), ("gppcTrmodeUnicastInterceptMacaddrRequired", 83), ("gppcTrmodeCannotAllocateMirrorSession", 84), ("gppcTrmodeCannotAllocateClassifierResources", 85)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcAcLastErrorCode.setStatus('current')
hpicfGppcAcLastErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcAcLastErrorString.setStatus('current')
hpicfGppcAcRowAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcRowAdminStatus.setStatus('current')
hpicfGppcAcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcAcRowStatus.setStatus('current')
hpicfGppcNamedPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 3), )
if mibBuilder.loadTexts: hpicfGppcNamedPolicyTable.setStatus('current')
hpicfGppcNamedPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 3, 1), ).setIndexNames((0, "HP-ICF-GPPC-MIB", "hpicfGppcNpPolicyName"))
if mibBuilder.loadTexts: hpicfGppcNamedPolicyEntry.setStatus('current')
hpicfGppcNpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 3, 1, 1), HpicfGppcPolicyName())
if mibBuilder.loadTexts: hpicfGppcNpPolicyName.setStatus('current')
hpicfGppcNpPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-based-mirroring", 1), ("zone-intercept", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcNpPolicyType.setStatus('current')
hpicfGppcNpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcNpRowStatus.setStatus('current')
hpicfGppcPolicyRulesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 4), )
if mibBuilder.loadTexts: hpicfGppcPolicyRulesTable.setStatus('current')
hpicfGppcPolicyRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 4, 1), ).setIndexNames((0, "HP-ICF-GPPC-MIB", "hpicfGppcNpPolicyName"), (0, "HP-ICF-GPPC-MIB", "hpicfGppcPrRuleId"))
if mibBuilder.loadTexts: hpicfGppcPolicyRulesEntry.setStatus('current')
hpicfGppcPrRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hpicfGppcPrRuleId.setStatus('current')
hpicfGppcPrPolicyRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcPrPolicyRule.setStatus('current')
hpicfGppcPrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcPrRowStatus.setStatus('current')
hpicfGppcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 1, 1))
hpicfGppcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 1, 2))
hpicfGppcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 1, 1, 1)).setObjects(("HP-ICF-GPPC-MIB", "hpicfGppcGroup"), ("HP-ICF-GPPC-MIB", "hpicfGppcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGppcMIBCompliance = hpicfGppcMIBCompliance.setStatus('current')
hpicfGppcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 41, 1, 2, 1)).setObjects(("HP-ICF-GPPC-MIB", "hpicfGppcAcIngressIfList"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcIngressVlanMap1k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcIngressVlanMap2k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcIngressVlanMap3k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcIngressVlanMap4k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcEgressIfList"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcEgressVlanMap1k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcEgressVlanMap2k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcEgressVlanMap3k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcEgressVlanMap4k"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcExpPolicy"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcExpString"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcLastErrorCode"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcLastErrorString"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcRowAdminStatus"), ("HP-ICF-GPPC-MIB", "hpicfGppcAcRowStatus"), ("HP-ICF-GPPC-MIB", "hpicfGppcNpPolicyType"), ("HP-ICF-GPPC-MIB", "hpicfGppcNpRowStatus"), ("HP-ICF-GPPC-MIB", "hpicfGppcPrPolicyRule"), ("HP-ICF-GPPC-MIB", "hpicfGppcPrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGppcGroup = hpicfGppcGroup.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-GPPC-MIB", hpicfGppcPrPolicyRule=hpicfGppcPrPolicyRule, hpicfGppcAcExpString=hpicfGppcAcExpString, hpicfGppcNpPolicyName=hpicfGppcNpPolicyName, hpicfGppcPrRuleId=hpicfGppcPrRuleId, PYSNMP_MODULE_ID=hpicfGppcMIB, hpicfGppcAcExpPolicy=hpicfGppcAcExpPolicy, hpicfGppcAcEgressVlanMap2k=hpicfGppcAcEgressVlanMap2k, hpicfGppcMIBCompliances=hpicfGppcMIBCompliances, hpicfGppcConformance=hpicfGppcConformance, hpicfGppcAcIngressVlanMap3k=hpicfGppcAcIngressVlanMap3k, hpicfGppcGroup=hpicfGppcGroup, hpicfGppcAcEgressIfList=hpicfGppcAcEgressIfList, hpicfGppcAcPolicyName=hpicfGppcAcPolicyName, hpicfGppcAcIngressVlanMap1k=hpicfGppcAcIngressVlanMap1k, hpicfGppcAcLastErrorCode=hpicfGppcAcLastErrorCode, hpicfGppcAcRowAdminStatus=hpicfGppcAcRowAdminStatus, hpicfGppcMIBCompliance=hpicfGppcMIBCompliance, hpicfGppcMIB=hpicfGppcMIB, hpicfGppcAcAppInstance=hpicfGppcAcAppInstance, hpicfGppcNamedPolicyTable=hpicfGppcNamedPolicyTable, hpicfGppcAcIngressVlanMap2k=hpicfGppcAcIngressVlanMap2k, hpicfGppcPrRowStatus=hpicfGppcPrRowStatus, hpicfGppcAcEgressVlanMap4k=hpicfGppcAcEgressVlanMap4k, hpicfGppcAppControlTable=hpicfGppcAppControlTable, hpicfGppcPolicyRulesTable=hpicfGppcPolicyRulesTable, hpicfGppcMIBGroups=hpicfGppcMIBGroups, hpicfGppcAcIngressIfList=hpicfGppcAcIngressIfList, hpicfGppcAcEgressVlanMap1k=hpicfGppcAcEgressVlanMap1k, hpicfGppcAppControlEntry=hpicfGppcAppControlEntry, hpicfGppcPolicyRulesEntry=hpicfGppcPolicyRulesEntry, HpicfGppcPolicyName=HpicfGppcPolicyName, hpicfGppcAcIngressVlanMap4k=hpicfGppcAcIngressVlanMap4k, hpicfGppcNamedPolicyEntry=hpicfGppcNamedPolicyEntry, hpicfGppcAcEgressVlanMap3k=hpicfGppcAcEgressVlanMap3k, hpicfGppcAcAppName=hpicfGppcAcAppName, hpicfGppcAcLastErrorString=hpicfGppcAcLastErrorString, hpicfGppcNpRowStatus=hpicfGppcNpRowStatus, hpicfGppcNpPolicyType=hpicfGppcNpPolicyType, hpicfGppcAcRowStatus=hpicfGppcAcRowStatus)
