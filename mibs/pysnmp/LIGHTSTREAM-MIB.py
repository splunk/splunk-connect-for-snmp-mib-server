#
# PySNMP MIB module LIGHTSTREAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIGHTSTREAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, enterprises, Bits, Counter64, ModuleIdentity, Unsigned32, ObjectIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, MibIdentifier, mib_2, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "enterprises", "Bits", "Counter64", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "MibIdentifier", "mib-2", "Integer32", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class LightStreamStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class LightStreamValidation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class LightStreamFilterAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("block", 2))

lightStream = MibIdentifier((1, 3, 6, 1, 4, 1, 711))
lightStreamOIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1))
lightStreamProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2))
lightStreamInternet = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 3))
lightStreamVli = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 4))
lightStreamEOM = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1000))
lightStreamATM = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1, 1))
lsOther = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1, 2))
lsTrapNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1, 2, 1))
lsTrapText = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1, 2, 2))
lsTrapName = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1, 2, 3))
lsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 1, 3))
class LightStreamUpToMaxAge(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3600)

class LightStreamDLCI(Integer32):
    pass

class VCI(Integer32):
    pass

atmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1))
chassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 1))
chassisId = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisId.setStatus('mandatory')
chassisActiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisActiveIpAddr.setStatus('mandatory')
chassisSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSecondaryIpAddr.setStatus('mandatory')
chassisNetworkMask = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisNetworkMask.setStatus('mandatory')
chassisEthernetIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisEthernetIpAddr.setStatus('mandatory')
chassisEthernetIpMask = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisEthernetIpMask.setStatus('mandatory')
chassisDefaultIpRouter = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisDefaultIpRouter.setStatus('mandatory')
chassisStatusWord = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStatusWord.setStatus('mandatory')
chassisConsoleTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("operational", 1), ("informational", 2), ("trace", 3), ("debug", 4), ("off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisConsoleTrapLevel.setStatus('mandatory')
cardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 2))
cardTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1), )
if mibBuilder.loadTexts: cardTable.setStatus('mandatory')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "cardIndex"))
if mibBuilder.loadTexts: cardEntry.setStatus('mandatory')
cardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndex.setStatus('mandatory')
cardName = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardName.setStatus('mandatory')
cardBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBoardType.setStatus('mandatory')
cardLcSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLcSoftwareVersion.setStatus('mandatory')
cardLccSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLccSoftwareVersion.setStatus('mandatory')
cardPID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPID.setStatus('mandatory')
cardMaxVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 7), Integer32().clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardMaxVCs.setStatus('mandatory')
cardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("empty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperStatus.setStatus('mandatory')
cardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminStatus.setStatus('mandatory')
cardStatusWord = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusWord.setStatus('mandatory')
cardConfigRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("empty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardConfigRegister.setStatus('mandatory')
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 3))
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('mandatory')
portInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "portInfoIndex"))
if mibBuilder.loadTexts: portInfoEntry.setStatus('mandatory')
portInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndex.setStatus('mandatory')
portInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("empty", 1), ("error", 2), ("unknown", 3), ("switch", 4), ("np", 5), ("lsEdge", 6), ("lsTrunk", 7), ("msTrunk", 8), ("msEdge", 10), ("plc12fac1", 11), ("plc18eac1", 12), ("plc1Lstoken", 13), ("plc18sac1Edge", 14), ("plc18sac1Trunk", 15), ("clc1Gen", 30), ("clc12oc3ac1Edge", 31), ("clc12oc3ac1Trunk", 32), ("clc18t3ac1Edge", 33), ("clc18t3ac1Trunk", 34), ("clc12taxiac1Edge", 35), ("clc12taxiac1Trunk", 36), ("clc18t1e1cbrac1", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoType.setStatus('mandatory')
portInfoSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpecific.setStatus('mandatory')
portInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInfoName.setStatus('mandatory')
portInfoErrorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInfoErrorLimit.setStatus('mandatory')
portTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 4))
ls1InfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1), )
if mibBuilder.loadTexts: ls1InfoTable.setStatus('mandatory')
ls1InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ls1InfoIfIndex"))
if mibBuilder.loadTexts: ls1InfoEntry.setStatus('mandatory')
ls1InfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoIfIndex.setStatus('mandatory')
ls1InfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("v35", 1), ("rs422", 2), ("rs530", 3), ("t1", 4), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoType.setStatus('mandatory')
ls1InfoOperCsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("larse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperCsuType.setStatus('mandatory')
ls1InfoAdminCsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("larse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminCsuType.setStatus('mandatory')
ls1InfoOperRcvBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperRcvBaudRate.setStatus('mandatory')
ls1InfoAdminRcvBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminRcvBaudRate.setStatus('mandatory')
ls1InfoOperXmitBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperXmitBaudRate.setStatus('mandatory')
ls1InfoAdminXmitBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminXmitBaudRate.setStatus('mandatory')
ls1InfoOperNetIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2), ("dceTTloop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperNetIntType.setStatus('mandatory')
ls1InfoAdminNetIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2), ("dceTTloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminNetIntType.setStatus('mandatory')
ls1InfoOperModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperModemState.setStatus('mandatory')
ls1InfoOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("trunk", 1), ("frameRelay", 2), ("frameForwarding", 3), ("ppp", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperProtocol.setStatus('mandatory')
ls1InfoAdminProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("trunk", 1), ("frameRelay", 2), ("frameForwarding", 3), ("ppp", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminProtocol.setStatus('mandatory')
ls1InfoOperControlBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperControlBandwidthSize.setStatus('mandatory')
ls1InfoAdminControlBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminControlBandwidthSize.setStatus('mandatory')
ls1InfoOperDataBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperDataBandwidthSize.setStatus('mandatory')
ls1InfoAdminDataBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminDataBandwidthSize.setStatus('mandatory')
ls1InfoOperLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoOperLoopMode.setStatus('mandatory')
ls1InfoAdminLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminLoopMode.setStatus('mandatory')
ls1InfoLcAutoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoLcAutoEnable.setStatus('mandatory')
ls1InfoLcDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoLcDebugLevel.setStatus('mandatory')
ls1InfoDataCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoDataCellCapacity.setStatus('mandatory')
ls1InfoDataCellAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoDataCellAvailable.setStatus('mandatory')
ls1InfoMeasuredBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoMeasuredBaudRate.setStatus('mandatory')
ls1InfoLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls1InfoLinkUtilization.setStatus('mandatory')
ls1InfoAdminOperTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 99))).clone(namedValues=NamedValues(("trigger", 1), ("other", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ls1InfoAdminOperTrigger.setStatus('mandatory')
ms1InfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2), )
if mibBuilder.loadTexts: ms1InfoTable.setStatus('mandatory')
ms1InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ms1InfoIfIndex"))
if mibBuilder.loadTexts: ms1InfoEntry.setStatus('mandatory')
ms1InfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoIfIndex.setStatus('mandatory')
ms1InfoOperCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("t3CableLength1", 1), ("t3CableLength2", 2), ("e3CableLength1", 3), ("e3CableLength2", 4), ("e3CableLength3", 5), ("e3CableLength4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoOperCableLength.setStatus('mandatory')
ms1InfoAdminCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("t3CableLength1", 1), ("t3CableLength2", 2), ("e3CableLength1", 3), ("e3CableLength2", 4), ("e3CableLength3", 5), ("e3CableLength4", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ms1InfoAdminCableLength.setStatus('mandatory')
ms1InfoOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trunk", 1), ("atmUni", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoOperProtocol.setStatus('mandatory')
ms1InfoAdminProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trunk", 1), ("atmUni", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ms1InfoAdminProtocol.setStatus('mandatory')
ms1InfoOperControlBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoOperControlBandwidthSize.setStatus('mandatory')
ms1InfoAdminControlBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ms1InfoAdminControlBandwidthSize.setStatus('mandatory')
ms1InfoOperDataBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoOperDataBandwidthSize.setStatus('mandatory')
ms1InfoAdminDataBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ms1InfoAdminDataBandwidthSize.setStatus('mandatory')
ms1InfoLcAutoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoLcAutoEnable.setStatus('mandatory')
ms1InfoLcDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoLcDebugLevel.setStatus('mandatory')
ms1InfoOperScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t3ScrambleEnable", 1), ("t3ScrambleDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoOperScramble.setStatus('mandatory')
ms1InfoAdminScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t3ScrambleEnable", 1), ("t3ScrambleDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ms1InfoAdminScramble.setStatus('mandatory')
ms1InfoDataCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoDataCellCapacity.setStatus('mandatory')
ms1InfoDataCellAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoDataCellAvailable.setStatus('mandatory')
ms1InfoLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoLinkUtilization.setStatus('mandatory')
ms1InfoOperFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("plcp", 1), ("t3-Hec", 2), ("g-804", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ms1InfoOperFraming.setStatus('mandatory')
ms1InfoAdminOperTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 99))).clone(namedValues=NamedValues(("trigger", 1), ("other", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ms1InfoAdminOperTrigger.setStatus('mandatory')
npInfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3), )
if mibBuilder.loadTexts: npInfoTable.setStatus('mandatory')
npInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "npInfoIfIndex"))
if mibBuilder.loadTexts: npInfoEntry.setStatus('mandatory')
npInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npInfoIfIndex.setStatus('mandatory')
npInfoIPCommittedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npInfoIPCommittedRate.setStatus('mandatory')
npInfoIPCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npInfoIPCommittedBurst.setStatus('mandatory')
npInfoIPExcessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npInfoIPExcessRate.setStatus('mandatory')
npInfoIPExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npInfoIPExcessBurst.setStatus('mandatory')
npInfoIPNCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npInfoIPNCircuits.setStatus('mandatory')
npInfoAdminOperTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 3, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 99))).clone(namedValues=NamedValues(("trigger", 1), ("other", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npInfoAdminOperTrigger.setStatus('mandatory')
clc1InfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4), )
if mibBuilder.loadTexts: clc1InfoTable.setStatus('mandatory')
clc1InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "clc1InfoIfIndex"))
if mibBuilder.loadTexts: clc1InfoEntry.setStatus('mandatory')
clc1InfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoIfIndex.setStatus('mandatory')
clc1InfoOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trunk", 1), ("atmUni", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoOperProtocol.setStatus('mandatory')
clc1InfoAdminProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trunk", 1), ("atmUni", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminProtocol.setStatus('mandatory')
clc1InfoOperLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoOperLoopMode.setStatus('mandatory')
clc1InfoAdminLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminLoopMode.setStatus('mandatory')
clc1InfoOperControlBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoOperControlBandwidthSize.setStatus('mandatory')
clc1InfoAdminControlBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminControlBandwidthSize.setStatus('mandatory')
clc1InfoOperDataBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoOperDataBandwidthSize.setStatus('mandatory')
clc1InfoAdminDataBandwidthSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminDataBandwidthSize.setStatus('mandatory')
clc1InfoLcAutoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoLcAutoEnable.setStatus('mandatory')
clc1InfoLcDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoLcDebugLevel.setStatus('mandatory')
clc1InfoOperScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambleEnable", 1), ("scrambleDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoOperScramble.setStatus('mandatory')
clc1InfoAdminScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambleEnable", 1), ("scrambleDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminScramble.setStatus('mandatory')
clc1InfoDataCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoDataCellCapacity.setStatus('mandatory')
clc1InfoDataCellAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoDataCellAvailable.setStatus('mandatory')
clc1InfoLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoLinkUtilization.setStatus('mandatory')
clc1InfoOperClock = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClock", 1), ("externalClock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clc1InfoOperClock.setStatus('mandatory')
clc1InfoAdminClock = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClock", 1), ("externalClock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminClock.setStatus('mandatory')
clc1InfoAdminOperTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 4, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 99))).clone(namedValues=NamedValues(("trigger", 1), ("other", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clc1InfoAdminOperTrigger.setStatus('mandatory')
oc3InfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 5), )
if mibBuilder.loadTexts: oc3InfoTable.setStatus('mandatory')
oc3InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oc3InfoEntry.setStatus('mandatory')
oc3InfoReceiveSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3InfoReceiveSignalDetect.setStatus('mandatory')
oc3InfoTransmitSafetySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3InfoTransmitSafetySwitch.setStatus('mandatory')
oc3InfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3InfoMediumType.setStatus('mandatory')
congestionAvoidance = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 5))
caMaxIntervalPermitLimit = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caMaxIntervalPermitLimit.setStatus('mandatory')
caMinIntervalPermitLimit = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caMinIntervalPermitLimit.setStatus('mandatory')
caMinIntervalCaInfo = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caMinIntervalCaInfo.setStatus('mandatory')
mmaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 6))
mmaDbActive = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("newDBactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaDbActive.setStatus('mandatory')
mmaTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("informational", 2), ("trace", 3), ("debug", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaTrapFilter.setStatus('mandatory')
mmaTrapLanguage = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("english", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaTrapLanguage.setStatus('mandatory')
mmaCollectionSpace = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaCollectionSpace.setStatus('mandatory')
mmaConfigHost = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaConfigHost.setStatus('mandatory')
mmaConfigAuthor = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaConfigAuthor.setStatus('mandatory')
mmaConfigID = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaConfigID.setStatus('mandatory')
mmaSetLock = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lockVolatile", 2), ("lockPermanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaSetLock.setStatus('mandatory')
mmaPID = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmaPID.setStatus('mandatory')
mmaTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaTrapLog.setStatus('mandatory')
mmaTrapNumber = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaTrapNumber.setStatus('mandatory')
mmaTrapOnOffState = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trapOn", 1), ("trapOff", 2), ("trapEnable", 3), ("trapDisable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmaTrapOnOffState.setStatus('mandatory')
mmaNumNameTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 16), )
if mibBuilder.loadTexts: mmaNumNameTable.setStatus('mandatory')
mmaNumNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 16, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "mmaNumNameNumber"))
if mibBuilder.loadTexts: mmaNumNameEntry.setStatus('mandatory')
mmaNumNameNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmaNumNameNumber.setStatus('mandatory')
mmaNumName = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmaNumName.setStatus('mandatory')
mmaLwmpTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmaLwmpTimeouts.setStatus('mandatory')
collectInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 7))
collectTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1), )
if mibBuilder.loadTexts: collectTable.setStatus('mandatory')
collectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "collectIndex"))
if mibBuilder.loadTexts: collectEntry.setStatus('mandatory')
collectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: collectIndex.setStatus('mandatory')
collectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectStatus.setStatus('mandatory')
collectStart = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectStart.setStatus('mandatory')
collectFinish = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectFinish.setStatus('mandatory')
collectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectInterval.setStatus('mandatory')
collectFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: collectFileName.setStatus('mandatory')
collectFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectFileSize.setStatus('mandatory')
collectOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("waiting", 1), ("running", 2), ("underCreation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectOperStatus.setStatus('mandatory')
collectDataBase = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 2), )
if mibBuilder.loadTexts: collectDataBase.setStatus('mandatory')
collectDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "collectDBIndex"), (0, "LIGHTSTREAM-MIB", "collectDBInstance"))
if mibBuilder.loadTexts: collectDbEntry.setStatus('mandatory')
collectDBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: collectDBIndex.setStatus('mandatory')
collectDBInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: collectDBInstance.setStatus('mandatory')
collectDBObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectDBObjectID.setStatus('mandatory')
collectDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectDBStatus.setStatus('mandatory')
collectCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: collectCommunityName.setStatus('mandatory')
rmonCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonCommunityName.setStatus('mandatory')
lsPortProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8))
edgePort = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1))
edgePortTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: edgePortTable.setStatus('mandatory')
edgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "edgeIfIndex"))
if mibBuilder.loadTexts: edgePortEntry.setStatus('mandatory')
edgeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeIfIndex.setStatus('mandatory')
edgeUpcType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ansiCompliant", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeUpcType.setStatus('mandatory')
edgeUserDataPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 384)).clone(341)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeUserDataPerCell.setStatus('mandatory')
edgeCellDelayVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeCellDelayVariance.setStatus('mandatory')
edgePrincipalScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 5), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgePrincipalScale.setStatus('mandatory')
edgeSecondaryScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 6), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeSecondaryScale.setStatus('mandatory')
edgeMeteringFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 7), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeMeteringFactor.setStatus('mandatory')
edgeMeteringBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 8), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeMeteringBurstSize.setStatus('mandatory')
edgeCallSetupRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeCallSetupRetry.setStatus('mandatory')
edgeCallSetupBackoff = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeCallSetupBackoff.setStatus('mandatory')
edgeMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48, 8152)).clone(1516)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edgeMaxFrameSize.setStatus('mandatory')
frDceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2))
frProvMiTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: frProvMiTable.setStatus('mandatory')
frProvMiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "frProvMiIfIndex"))
if mibBuilder.loadTexts: frProvMiEntry.setStatus('mandatory')
frProvMiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frProvMiIfIndex.setStatus('mandatory')
frProvMiState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiFRIF", 2), ("ansiT1-617-D", 3), ("ccittQ-933-A", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiState.setStatus('mandatory')
frProvMiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("two-octets", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiAddressLen.setStatus('mandatory')
frProvMiNetRequestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiNetRequestInterval.setStatus('mandatory')
frProvMiNetErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiNetErrorThreshold.setStatus('mandatory')
frProvMiNetMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiNetMonitoredEvents.setStatus('mandatory')
frProvMiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiMaxSupportedVCs.setStatus('mandatory')
frProvMiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("nonBroadcast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiMulticast.setStatus('mandatory')
frProvMiUserPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiUserPollingInterval.setStatus('mandatory')
frProvMiUserFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiUserFullEnquiryInterval.setStatus('mandatory')
frProvMiUserErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiUserErrorThreshold.setStatus('mandatory')
frProvMiUserMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiUserMonitoredEvents.setStatus('mandatory')
frProvMiNetInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("niUNI", 1), ("niNNI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProvMiNetInterfaceType.setStatus('mandatory')
frCktInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3))
frCktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1), )
if mibBuilder.loadTexts: frCktCfgTable.setStatus('mandatory')
frCktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "frCktSrcIfIndex"), (0, "LIGHTSTREAM-MIB", "frCktSrcDlci"))
if mibBuilder.loadTexts: frCktEntry.setStatus('mandatory')
frCktSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktSrcNode.setStatus('mandatory')
frCktSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktSrcIfIndex.setStatus('mandatory')
frCktSrcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 3), LightStreamDLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktSrcDlci.setStatus('mandatory')
frCktAdminDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminDestNode.setStatus('mandatory')
frCktOperDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestNode.setStatus('mandatory')
frCktAdminDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminDestIfIndex.setStatus('mandatory')
frCktOperDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestIfIndex.setStatus('mandatory')
frCktAdminDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 14), LightStreamDLCI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminDestDlci.setStatus('mandatory')
frCktOperDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 15), LightStreamDLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestDlci.setStatus('mandatory')
frCktAdminSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminSrcInsuredRate.setStatus('mandatory')
frCktOperSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperSrcInsuredRate.setStatus('mandatory')
frCktAdminSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminSrcInsuredBurst.setStatus('mandatory')
frCktOperSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperSrcInsuredBurst.setStatus('mandatory')
frCktAdminSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminSrcMaxRate.setStatus('mandatory')
frCktOperSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperSrcMaxRate.setStatus('mandatory')
frCktAdminSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminSrcMaxBurst.setStatus('mandatory')
frCktOperSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperSrcMaxBurst.setStatus('mandatory')
frCktAdminDestInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 33), Integer32())
if mibBuilder.loadTexts: frCktAdminDestInsuredRate.setStatus('mandatory')
frCktOperDestInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestInsuredRate.setStatus('mandatory')
frCktAdminDestInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 35), Integer32())
if mibBuilder.loadTexts: frCktAdminDestInsuredBurst.setStatus('mandatory')
frCktOperDestInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestInsuredBurst.setStatus('mandatory')
frCktAdminDestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 37), Integer32())
if mibBuilder.loadTexts: frCktAdminDestMaxRate.setStatus('mandatory')
frCktOperDestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestMaxRate.setStatus('mandatory')
frCktAdminDestMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 39), Integer32())
if mibBuilder.loadTexts: frCktAdminDestMaxBurst.setStatus('mandatory')
frCktOperDestMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperDestMaxBurst.setStatus('mandatory')
frCktOperSecondaryScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 41), Integer32().clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperSecondaryScale.setStatus('mandatory')
frCktAdminSecondaryScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 42), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminSecondaryScale.setStatus('mandatory')
frCktOperPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperPrinBwType.setStatus('mandatory')
frCktAdminPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminPrinBwType.setStatus('mandatory')
frCktOperTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperTransPri.setStatus('mandatory')
frCktAdminTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminTransPri.setStatus('mandatory')
frCktOperUserDataPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktOperUserDataPerCell.setStatus('mandatory')
frCktAdminUserDataPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktAdminUserDataPerCell.setStatus('mandatory')
frCktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCktStatus.setStatus('mandatory')
frCktInfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2), )
if mibBuilder.loadTexts: frCktInfoTable.setStatus('mandatory')
frCktInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "frCktInfoIfIndex"), (0, "LIGHTSTREAM-MIB", "frCktInfoDlci"))
if mibBuilder.loadTexts: frCktInfoEntry.setStatus('mandatory')
frCktInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoIfIndex.setStatus('mandatory')
frCktInfoDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 2), LightStreamDLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoDlci.setStatus('mandatory')
frCktInfoLclLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoLclLMI.setStatus('mandatory')
frCktInfoRmtLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoRmtLMI.setStatus('mandatory')
frCktInfoCallIDIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoCallIDIncoming.setStatus('mandatory')
frCktInfoCallIDOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoCallIDOutgoing.setStatus('mandatory')
frCktInfoDownstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoDownstreamState.setStatus('mandatory')
frCktInfoUpstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoUpstreamState.setStatus('mandatory')
frCktInfoLastAtmErr = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoLastAtmErr.setStatus('mandatory')
frCktInfoDataCellsRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoDataCellsRequired.setStatus('mandatory')
frCktInfoLastAtmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCktInfoLastAtmLocation.setStatus('mandatory')
ffCktInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4))
ffCktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1), )
if mibBuilder.loadTexts: ffCktCfgTable.setStatus('mandatory')
ffCktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ffCktSrcIfIndex"))
if mibBuilder.loadTexts: ffCktEntry.setStatus('mandatory')
ffCktSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktSrcNode.setStatus('mandatory')
ffCktSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktSrcIfIndex.setStatus('mandatory')
ffCktAdminDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminDestNode.setStatus('mandatory')
ffCktOperDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperDestNode.setStatus('mandatory')
ffCktAdminDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminDestIfIndex.setStatus('mandatory')
ffCktOperDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperDestIfIndex.setStatus('mandatory')
ffCktAdminSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminSrcInsuredRate.setStatus('mandatory')
ffCktOperSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 22), Integer32().clone(-11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperSrcInsuredRate.setStatus('mandatory')
ffCktAdminSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 23), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminSrcInsuredBurst.setStatus('mandatory')
ffCktOperSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 24), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperSrcInsuredBurst.setStatus('mandatory')
ffCktAdminSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 25), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminSrcMaxRate.setStatus('mandatory')
ffCktOperSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 26), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperSrcMaxRate.setStatus('mandatory')
ffCktAdminSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 27), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminSrcMaxBurst.setStatus('mandatory')
ffCktOperSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 28), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperSrcMaxBurst.setStatus('mandatory')
ffCktAdminDestInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 29), Integer32().clone(-1))
if mibBuilder.loadTexts: ffCktAdminDestInsuredRate.setStatus('mandatory')
ffCktOperDestInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 30), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperDestInsuredRate.setStatus('mandatory')
ffCktAdminDestInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 31), Integer32().clone(-1))
if mibBuilder.loadTexts: ffCktAdminDestInsuredBurst.setStatus('mandatory')
ffCktOperDestInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 32), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperDestInsuredBurst.setStatus('mandatory')
ffCktAdminDestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 33), Integer32().clone(-1))
if mibBuilder.loadTexts: ffCktAdminDestMaxRate.setStatus('mandatory')
ffCktOperDestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 34), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperDestMaxRate.setStatus('mandatory')
ffCktAdminDestMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 35), Integer32().clone(-1))
if mibBuilder.loadTexts: ffCktAdminDestMaxBurst.setStatus('mandatory')
ffCktOperDestMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 36), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperDestMaxBurst.setStatus('mandatory')
ffCktOperPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperPrinBwType.setStatus('mandatory')
ffCktAdminPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminPrinBwType.setStatus('mandatory')
ffCktOperTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktOperTransPri.setStatus('mandatory')
ffCktAdminTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktAdminTransPri.setStatus('mandatory')
ffCktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ffCktStatus.setStatus('mandatory')
ffCktInfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2), )
if mibBuilder.loadTexts: ffCktInfoTable.setStatus('mandatory')
ffCktInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ffCktInfoIfIndex"))
if mibBuilder.loadTexts: ffCktInfoEntry.setStatus('mandatory')
ffCktInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoIfIndex.setStatus('mandatory')
ffCktInfoDownstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoDownstreamState.setStatus('mandatory')
ffCktInfoUpstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoUpstreamState.setStatus('mandatory')
ffCktInfoCallIDIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoCallIDIncoming.setStatus('mandatory')
ffCktInfoCallIDOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoCallIDOutgoing.setStatus('mandatory')
ffCktInfoLastAtmErr = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoLastAtmErr.setStatus('mandatory')
ffCktInfoDataCellsRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoDataCellsRequired.setStatus('mandatory')
ffCktInfoLastAtmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffCktInfoLastAtmLocation.setStatus('mandatory')
sUniCktInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5))
sUniCktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1), )
if mibBuilder.loadTexts: sUniCktCfgTable.setStatus('mandatory')
sUniCktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "sUniCktSrcIfIndex"), (0, "LIGHTSTREAM-MIB", "sUniCktSrcVCI"))
if mibBuilder.loadTexts: sUniCktEntry.setStatus('mandatory')
sUniCktSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktSrcNode.setStatus('mandatory')
sUniCktSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktSrcIfIndex.setStatus('mandatory')
sUniCktSrcVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 3), VCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktSrcVCI.setStatus('mandatory')
sUniCktAdminDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminDestNode.setStatus('mandatory')
sUniCktOperDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestNode.setStatus('mandatory')
sUniCktAdminDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminDestIfIndex.setStatus('mandatory')
sUniCktOperDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestIfIndex.setStatus('mandatory')
sUniCktAdminDestVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 14), VCI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminDestVCI.setStatus('mandatory')
sUniCktOperDestVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 15), VCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestVCI.setStatus('mandatory')
sUniCktOperPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperPrinBwType.setStatus('mandatory')
sUniCktAdminPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminPrinBwType.setStatus('mandatory')
sUniCktOperTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperTransPri.setStatus('mandatory')
sUniCktAdminTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminTransPri.setStatus('mandatory')
sUniCktAdminSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminSrcInsuredRate.setStatus('mandatory')
sUniCktOperSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperSrcInsuredRate.setStatus('mandatory')
sUniCktAdminSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminSrcInsuredBurst.setStatus('mandatory')
sUniCktOperSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperSrcInsuredBurst.setStatus('mandatory')
sUniCktAdminSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminSrcMaxRate.setStatus('mandatory')
sUniCktOperSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperSrcMaxRate.setStatus('mandatory')
sUniCktAdminSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminSrcMaxBurst.setStatus('mandatory')
sUniCktOperSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperSrcMaxBurst.setStatus('mandatory')
sUniCktAdminDestInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 34), Integer32())
if mibBuilder.loadTexts: sUniCktAdminDestInsuredRate.setStatus('mandatory')
sUniCktOperDestInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestInsuredRate.setStatus('mandatory')
sUniCktAdminDestInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 36), Integer32())
if mibBuilder.loadTexts: sUniCktAdminDestInsuredBurst.setStatus('mandatory')
sUniCktOperDestInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestInsuredBurst.setStatus('mandatory')
sUniCktAdminDestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 38), Integer32())
if mibBuilder.loadTexts: sUniCktAdminDestMaxRate.setStatus('mandatory')
sUniCktOperDestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestMaxRate.setStatus('mandatory')
sUniCktAdminDestMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 40), Integer32())
if mibBuilder.loadTexts: sUniCktAdminDestMaxBurst.setStatus('mandatory')
sUniCktOperDestMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperDestMaxBurst.setStatus('mandatory')
sUniCktAdminSecondaryScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 42), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktAdminSecondaryScale.setStatus('mandatory')
sUniCktOperSecondaryScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 43), Integer32().clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktOperSecondaryScale.setStatus('mandatory')
sUniCktSts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sUniCktSts.setStatus('mandatory')
sUniCktInfoTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2), )
if mibBuilder.loadTexts: sUniCktInfoTable.setStatus('mandatory')
sUniCktInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "sUniCktInfoIfIndex"), (0, "LIGHTSTREAM-MIB", "sUniCktInfoVCI"))
if mibBuilder.loadTexts: sUniCktInfoEntry.setStatus('mandatory')
sUniCktInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoIfIndex.setStatus('mandatory')
sUniCktInfoVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 2), VCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoVCI.setStatus('mandatory')
sUniCktInfoUniToNetCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoUniToNetCallID.setStatus('mandatory')
sUniCktInfoNetToUniCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoNetToUniCallID.setStatus('mandatory')
sUniCktInfoUniToNetState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoUniToNetState.setStatus('mandatory')
sUniCktInfoNetToUniState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoNetToUniState.setStatus('mandatory')
sUniCktInfoLastAtmErr = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoLastAtmErr.setStatus('mandatory')
sUniCktInfoDataCellsRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoDataCellsRequired.setStatus('mandatory')
sUniCktInfoLastAtmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUniCktInfoLastAtmLocation.setStatus('mandatory')
pvcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6))
pvcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1), )
if mibBuilder.loadTexts: pvcCfgTable.setStatus('mandatory')
pvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "pvcSrcIfIndex"), (0, "LIGHTSTREAM-MIB", "pvcSrcPvcId"))
if mibBuilder.loadTexts: pvcEntry.setStatus('mandatory')
pvcSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSrcIfIndex.setStatus('mandatory')
pvcSrcPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSrcPvcId.setStatus('mandatory')
pvcSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSrcNode.setStatus('mandatory')
pvcSrcInsuredRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSrcInsuredRate.setStatus('mandatory')
pvcSrcInsuredBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSrcInsuredBurst.setStatus('mandatory')
pvcSrcMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSrcMaxRate.setStatus('mandatory')
pvcSrcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSrcMaxBurst.setStatus('mandatory')
pvcSecondaryScale = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 8), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSecondaryScale.setStatus('mandatory')
pvcPrinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteed", 1), ("insured", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcPrinBwType.setStatus('mandatory')
pvcTransPri = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcTransPri.setStatus('mandatory')
pvcUserDataPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUserDataPerCell.setStatus('mandatory')
pvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 6, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcStatus.setStatus('mandatory')
mcEndptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7))
mcEndptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1), )
if mibBuilder.loadTexts: mcEndptCfgTable.setStatus('mandatory')
mcEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "mcEndptLclIfIndex"), (0, "LIGHTSTREAM-MIB", "mcEndptLclCktid"), (0, "LIGHTSTREAM-MIB", "mcEndptLclInstance"))
if mibBuilder.loadTexts: mcEndptEntry.setStatus('mandatory')
mcEndptLclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptLclIfIndex.setStatus('mandatory')
mcEndptLclCktid = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptLclCktid.setStatus('mandatory')
mcEndptLclInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptLclInstance.setStatus('mandatory')
mcEndptDest = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcEndptDest.setStatus('mandatory')
mcEndptServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcEndptServiceType.setStatus('mandatory')
mcEndptRmtVCstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptRmtVCstatus.setStatus('mandatory')
mcEndptCallIDIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptCallIDIncoming.setStatus('mandatory')
mcEndptDownstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptDownstreamState.setStatus('mandatory')
mcEndptUpstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptUpstreamState.setStatus('mandatory')
mcEndptLastAtmErr = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptLastAtmErr.setStatus('mandatory')
mcEndptLastAtmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEndptLastAtmLocation.setStatus('mandatory')
mcEndptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 8, 7, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3), ("createRequest", 4), ("underCreation", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcEndptStatus.setStatus('mandatory')
lsPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 10))
lsExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11))
lsExperimentalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1))
lsEdgeStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1))
lsEdgeStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1), )
if mibBuilder.loadTexts: lsEdgeStatTable.setStatus('mandatory')
lsEdgeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "edgeStatIndex"))
if mibBuilder.loadTexts: lsEdgeStatEntry.setStatus('mandatory')
edgeStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeStatIndex.setStatus('mandatory')
edgeStatFsuRATOs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeStatFsuRATOs.setStatus('mandatory')
edgeStatFsuRATOLastInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeStatFsuRATOLastInfo.setStatus('mandatory')
edgeStatTsuHoldQCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeStatTsuHoldQCells.setStatus('mandatory')
edgeStatTsuHoldQs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeStatTsuHoldQs.setStatus('mandatory')
tluAAL5XsumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tluAAL5XsumErrs.setStatus('mandatory')
tluAAL5AbortErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tluAAL5AbortErrs.setStatus('mandatory')
tluAAL5ErrLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tluAAL5ErrLastVci.setStatus('mandatory')
lsEdgePortStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2), )
if mibBuilder.loadTexts: lsEdgePortStatTable.setStatus('mandatory')
lsEdgePortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "edgePortStatIndex"))
if mibBuilder.loadTexts: lsEdgePortStatEntry.setStatus('mandatory')
edgePortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortStatIndex.setStatus('mandatory')
edgePortRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvOctets.setStatus('mandatory')
edgePortXmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortXmtOctets.setStatus('mandatory')
edgePortFsuCksmErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortFsuCksmErrMsgs.setStatus('mandatory')
edgePortCksmErrLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortCksmErrLastVci.setStatus('mandatory')
edgePortDownXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortDownXmtFrames.setStatus('mandatory')
edgePortRcvUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvUcastPkts.setStatus('mandatory')
edgePortRcvNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvNUcastPkts.setStatus('mandatory')
edgePortXmtUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortXmtUcastPkts.setStatus('mandatory')
edgePortXmtNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortXmtNUcastPkts.setStatus('mandatory')
edgePortRcvSmplPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvSmplPktSize.setStatus('mandatory')
edgePortXmtSmplPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortXmtSmplPktSize.setStatus('mandatory')
edgePortRcvL3XsumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvL3XsumErrs.setStatus('mandatory')
edgePortRcvL3XsumErrLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvL3XsumErrLastVci.setStatus('mandatory')
edgePortRcvCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvCRCErrors.setStatus('mandatory')
edgePortRcvAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvAborts.setStatus('mandatory')
edgePortXmtUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortXmtUnderflows.setStatus('mandatory')
edgePortRcvShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgePortRcvShortFrames.setStatus('mandatory')
lsFrameRelayDlciStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3), )
if mibBuilder.loadTexts: lsFrameRelayDlciStatTable.setStatus('mandatory')
lsFrameRelayDlciStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "frameRelayDlciStatPortIndex"), (0, "LIGHTSTREAM-MIB", "frameRelayDlciStatDlciIndex"))
if mibBuilder.loadTexts: lsFrameRelayDlciStatEntry.setStatus('mandatory')
frameRelayDlciStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciStatPortIndex.setStatus('mandatory')
frameRelayDlciStatDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciStatDlciIndex.setStatus('mandatory')
frameRelayDlciToSwCLP0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciToSwCLP0Frames.setStatus('mandatory')
frameRelayDlciToSwCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciToSwCLP0Cells.setStatus('mandatory')
frameRelayDlciToSwCLP1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciToSwCLP1Frames.setStatus('mandatory')
frameRelayDlciToSwCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciToSwCLP1Cells.setStatus('mandatory')
frameRelayDlciToSwDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciToSwDiscardFrames.setStatus('mandatory')
frameRelayDlciToSwDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciToSwDiscardCells.setStatus('mandatory')
frameRelayDlciFrSwCLP0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciFrSwCLP0Frames.setStatus('mandatory')
frameRelayDlciFrSwCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciFrSwCLP0Cells.setStatus('mandatory')
frameRelayDlciFrSwCLP1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciFrSwCLP1Frames.setStatus('mandatory')
frameRelayDlciFrSwCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameRelayDlciFrSwCLP1Cells.setStatus('mandatory')
lsEdgePortToSwMsgLenTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 4), )
if mibBuilder.loadTexts: lsEdgePortToSwMsgLenTable.setStatus('mandatory')
lsEdgePortToSwMsgLenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 4, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "edgeToSwMsgLenPortIndex"), (0, "LIGHTSTREAM-MIB", "edgeToSwMsgLenBinIndex"))
if mibBuilder.loadTexts: lsEdgePortToSwMsgLenEntry.setStatus('mandatory')
edgeToSwMsgLenPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeToSwMsgLenPortIndex.setStatus('mandatory')
edgeToSwMsgLenBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeToSwMsgLenBinIndex.setStatus('mandatory')
edgeToSwMsgLenMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeToSwMsgLenMsgs.setStatus('mandatory')
lsEdgeSwToPortMsgLenTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 5), )
if mibBuilder.loadTexts: lsEdgeSwToPortMsgLenTable.setStatus('mandatory')
lsEdgeSwToPortMsgLenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 5, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "edgeToPortMsgLenPortIndex"), (0, "LIGHTSTREAM-MIB", "edgeToPortMsgLenBinIndex"))
if mibBuilder.loadTexts: lsEdgeSwToPortMsgLenEntry.setStatus('mandatory')
edgeToPortMsgLenPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeToPortMsgLenPortIndex.setStatus('mandatory')
edgeToPortMsgLenBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeToPortMsgLenBinIndex.setStatus('mandatory')
edgeToPortMsgLenMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edgeToPortMsgLenMsgs.setStatus('mandatory')
lsEdgeCpuWorkloadTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 6), )
if mibBuilder.loadTexts: lsEdgeCpuWorkloadTable.setStatus('mandatory')
lsEdgeCpuWorkloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 6, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lsEdgeWorkloadCardIndex"), (0, "LIGHTSTREAM-MIB", "lsEdgeWorkloadTypeIndex"))
if mibBuilder.loadTexts: lsEdgeCpuWorkloadEntry.setStatus('mandatory')
lsEdgeWorkloadCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEdgeWorkloadCardIndex.setStatus('mandatory')
lsEdgeWorkloadTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEdgeWorkloadTypeIndex.setStatus('mandatory')
lsEdgeWorkloadEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsEdgeWorkloadEvents.setStatus('mandatory')
lsFrameForwardStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7), )
if mibBuilder.loadTexts: lsFrameForwardStatTable.setStatus('mandatory')
lsFrameForwardStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "frameForwardStatPortIndex"))
if mibBuilder.loadTexts: lsFrameForwardStatEntry.setStatus('mandatory')
frameForwardStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardStatPortIndex.setStatus('mandatory')
frameForwardToSwCLP0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardToSwCLP0Frames.setStatus('mandatory')
frameForwardToSwCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardToSwCLP0Cells.setStatus('mandatory')
frameForwardToSwCLP1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardToSwCLP1Frames.setStatus('mandatory')
frameForwardToSwCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardToSwCLP1Cells.setStatus('mandatory')
frameForwardToSwDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardToSwDiscardFrames.setStatus('mandatory')
frameForwardToSwDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardToSwDiscardCells.setStatus('mandatory')
frameForwardFrSwCLP0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardFrSwCLP0Frames.setStatus('mandatory')
frameForwardFrSwCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardFrSwCLP0Cells.setStatus('mandatory')
frameForwardFrSwCLP1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardFrSwCLP1Frames.setStatus('mandatory')
frameForwardFrSwCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameForwardFrSwCLP1Cells.setStatus('mandatory')
lsTrunkStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2))
lsTrunkPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1), )
if mibBuilder.loadTexts: lsTrunkPortStatTable.setStatus('mandatory')
lsTrunkPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "trunkPortStatIndex"))
if mibBuilder.loadTexts: lsTrunkPortStatEntry.setStatus('mandatory')
trunkPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortStatIndex.setStatus('mandatory')
trunkPortRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortRcvCells.setStatus('mandatory')
trunkPortXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortXmtCells.setStatus('mandatory')
trunkPortRcvRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortRcvRuns.setStatus('mandatory')
trunkPortDownXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortDownXmtCells.setStatus('mandatory')
trunkPortRcvCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortRcvCRCErrors.setStatus('mandatory')
trunkPortRcvAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortRcvAborts.setStatus('mandatory')
trunkPortXmtUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortXmtUnderflows.setStatus('mandatory')
trunkPortRcvShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPortRcvShortFrames.setStatus('mandatory')
lsTrunkCpuWorkloadTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 2), )
if mibBuilder.loadTexts: lsTrunkCpuWorkloadTable.setStatus('mandatory')
lsTrunkCpuWorkloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lsTrunkWorkloadCardIndex"), (0, "LIGHTSTREAM-MIB", "lsTrunkWorkloadTypeIndex"))
if mibBuilder.loadTexts: lsTrunkCpuWorkloadEntry.setStatus('mandatory')
lsTrunkWorkloadCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsTrunkWorkloadCardIndex.setStatus('mandatory')
lsTrunkWorkloadTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("average", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsTrunkWorkloadTypeIndex.setStatus('mandatory')
lsTrunkWorkloadEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsTrunkWorkloadEvents.setStatus('mandatory')
lsLcStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3))
lcStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1), )
if mibBuilder.loadTexts: lcStatTable.setStatus('mandatory')
lcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lcStatCardIndex"))
if mibBuilder.loadTexts: lcStatEntry.setStatus('mandatory')
lcStatCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcStatCardIndex.setStatus('mandatory')
tsuFreeCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuFreeCells.setStatus('mandatory')
fsuSharedFreeCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuSharedFreeCells.setStatus('mandatory')
tsuCellDropLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuCellDropLastVci.setStatus('mandatory')
switchCellDgRejectEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCellDgRejectEvents.setStatus('mandatory')
switchCellSchedRejectEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCellSchedRejectEvents.setStatus('mandatory')
tsuErrFutQCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuErrFutQCellDrops.setStatus('mandatory')
tsuErrFutQMsgDropLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuErrFutQMsgDropLastVci.setStatus('mandatory')
fsuHdrLrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuHdrLrcErrs.setStatus('mandatory')
fsuPayloadLrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuPayloadLrcErrs.setStatus('mandatory')
lcPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2), )
if mibBuilder.loadTexts: lcPortStatTable.setStatus('mandatory')
lcPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lcStatPortIndex"))
if mibBuilder.loadTexts: lcPortStatEntry.setStatus('mandatory')
lcStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcStatPortIndex.setStatus('mandatory')
fsuPortFreeCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuPortFreeCells.setStatus('mandatory')
fsuCellDropLastCellHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuCellDropLastCellHdr.setStatus('mandatory')
tsuPortErrL1UnconfigVcis = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuPortErrL1UnconfigVcis.setStatus('mandatory')
tsuPortErrL2UnconfigVcis = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuPortErrL2UnconfigVcis.setStatus('mandatory')
tsuPortErrL1UnconfigLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuPortErrL1UnconfigLastVci.setStatus('mandatory')
tsuPortErrL2UnconfigLastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuPortErrL2UnconfigLastVci.setStatus('mandatory')
tsuPortErrNonZeroGfc = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuPortErrNonZeroGfc.setStatus('mandatory')
fsuPortXmtCellsTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 3), )
if mibBuilder.loadTexts: fsuPortXmtCellsTable.setStatus('mandatory')
fsuPortXmtCellsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 3, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "fsuXmtCellsPortIndex"), (0, "LIGHTSTREAM-MIB", "fsuXmtCellsPriorityIndex"))
if mibBuilder.loadTexts: fsuPortXmtCellsEntry.setStatus('mandatory')
fsuXmtCellsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuXmtCellsPortIndex.setStatus('mandatory')
fsuXmtCellsPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuXmtCellsPriorityIndex.setStatus('mandatory')
fsuXmtCellEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuXmtCellEvents.setStatus('mandatory')
fsuQueueCellLengthTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 4), )
if mibBuilder.loadTexts: fsuQueueCellLengthTable.setStatus('mandatory')
fsuQueueCellLenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 4, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "fsuQueueCellLenPortIndex"), (0, "LIGHTSTREAM-MIB", "fsuQueueCellLenSubQIndex"))
if mibBuilder.loadTexts: fsuQueueCellLenEntry.setStatus('mandatory')
fsuQueueCellLenPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuQueueCellLenPortIndex.setStatus('mandatory')
fsuQueueCellLenSubQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuQueueCellLenSubQIndex.setStatus('mandatory')
fsuQueueCellLength = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuQueueCellLength.setStatus('mandatory')
fsuDropEventTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 5), )
if mibBuilder.loadTexts: fsuDropEventTable.setStatus('mandatory')
fsuDropEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 5, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "fsuDropEventPortIndex"), (0, "LIGHTSTREAM-MIB", "fsuDropEventWatermarkIndex"))
if mibBuilder.loadTexts: fsuDropEventEntry.setStatus('mandatory')
fsuDropEventPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuDropEventPortIndex.setStatus('mandatory')
fsuDropEventWatermarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuDropEventWatermarkIndex.setStatus('mandatory')
fsuDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsuDropEvents.setStatus('mandatory')
lsFsuFastDropTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 6), )
if mibBuilder.loadTexts: lsFsuFastDropTable.setStatus('mandatory')
lsFsuFastDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 6, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lsFsuFastDropWatermarkIndex"))
if mibBuilder.loadTexts: lsFsuFastDropEntry.setStatus('mandatory')
lsFsuFastDropWatermarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp1", 1), ("clp0HiPriority", 2), ("clp0HiOther", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFsuFastDropWatermarkIndex.setStatus('mandatory')
lsFsuFastCellDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsFsuFastCellDropEvents.setStatus('mandatory')
tsuDropEventTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 7), )
if mibBuilder.loadTexts: tsuDropEventTable.setStatus('mandatory')
tsuDropEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 7, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "tsuDropEventPortIndex"), (0, "LIGHTSTREAM-MIB", "tsuDropEventWatermarkIndex"))
if mibBuilder.loadTexts: tsuDropEventEntry.setStatus('mandatory')
tsuDropEventPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuDropEventPortIndex.setStatus('mandatory')
tsuDropEventWatermarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("control", 2), ("scheduled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuDropEventWatermarkIndex.setStatus('mandatory')
tsuDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsuDropEvents.setStatus('mandatory')
lsUtStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4))
lsLcFsuIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1), )
if mibBuilder.loadTexts: lsLcFsuIntervalTable.setStatus('mandatory')
lsLcFsuIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lsLcIntervalPortIndex"), (0, "LIGHTSTREAM-MIB", "lsLcIntervalNumber"))
if mibBuilder.loadTexts: lsLcFsuIntervalEntry.setStatus('mandatory')
lsLcIntervalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalPortIndex.setStatus('mandatory')
lsLcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalNumber.setStatus('mandatory')
lsLcIntervalPSDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalPSDepth.setStatus('mandatory')
lsLcIntervalASDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalASDepth.setStatus('mandatory')
lsLcIntervalDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalDropEvents.setStatus('mandatory')
lsLcIntervalAvgCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalAvgCells.setStatus('mandatory')
lsLcIntervalPeakCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalPeakCells.setStatus('mandatory')
lsLcIntervalMinPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalMinPermits.setStatus('mandatory')
lsLcIntervalAvgPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalAvgPermits.setStatus('mandatory')
lsLcIntervalMaxPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalMaxPermits.setStatus('mandatory')
lsLcIntervalDecrPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalDecrPermits.setStatus('mandatory')
lsLcIntervalIncrPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalIncrPermits.setStatus('mandatory')
lsLcIntervalMinBwAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalMinBwAlloc.setStatus('mandatory')
lsLcIntervalAvgBwAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalAvgBwAlloc.setStatus('mandatory')
lsLcIntervalMaxBwAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsLcIntervalMaxBwAlloc.setStatus('mandatory')
lsNpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 5))
lsNpCpuWorkloadTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 5, 1), )
if mibBuilder.loadTexts: lsNpCpuWorkloadTable.setStatus('mandatory')
lsNpCpuWorkloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 5, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lsNpCpuWorkloadIndex"))
if mibBuilder.loadTexts: lsNpCpuWorkloadEntry.setStatus('mandatory')
lsNpCpuWorkloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsNpCpuWorkloadIndex.setStatus('mandatory')
lsNpCpuWorkloadEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsNpCpuWorkloadEvents.setStatus('mandatory')
lsCellStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6))
lsCellVciStatTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1), )
if mibBuilder.loadTexts: lsCellVciStatTable.setStatus('mandatory')
lsCellVciStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "cellVciStatPortIndex"), (0, "LIGHTSTREAM-MIB", "cellVciStatVciIndex"))
if mibBuilder.loadTexts: lsCellVciStatEntry.setStatus('mandatory')
cellVciStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellVciStatPortIndex.setStatus('mandatory')
cellVciStatVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellVciStatVciIndex.setStatus('mandatory')
cellVciToSwCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellVciToSwCLP0Cells.setStatus('mandatory')
cellVciToSwCLP01Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellVciToSwCLP01Cells.setStatus('mandatory')
cellVciToSwCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellVciToSwCLP1Cells.setStatus('mandatory')
cellVciToSwDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 11, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellVciToSwDiscardCells.setStatus('mandatory')
lsIR = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 12))
irRoutingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1))
irRoutingPathsGenerated = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRoutingPathsGenerated.setStatus('mandatory')
irRoutingPathGenSuccess = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRoutingPathGenSuccess.setStatus('mandatory')
irRoutingPathGenFailedNoResources = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRoutingPathGenFailedNoResources.setStatus('mandatory')
irRoutingPathGenFailedUnknown = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRoutingPathGenFailedUnknown.setStatus('mandatory')
irRoutingPathGenFailedOther = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRoutingPathGenFailedOther.setStatus('mandatory')
irRoutingAveragePathLength = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRoutingAveragePathLength.setStatus('mandatory')
lsStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 13))
tcsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 14))
tcsTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1), )
if mibBuilder.loadTexts: tcsTable.setStatus('mandatory')
tcsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "tcsIndex"))
if mibBuilder.loadTexts: tcsEntry.setStatus('mandatory')
tcsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsIndex.setStatus('mandatory')
tcsTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsTemp1.setStatus('mandatory')
tcsTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsTemp2.setStatus('mandatory')
tcsTcsVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsTcsVoltage.setStatus('mandatory')
tcsVccVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsVccVoltage.setStatus('mandatory')
tcsScsiVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsScsiVoltage.setStatus('mandatory')
tcsPostResult = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPostResult.setStatus('mandatory')
tcsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 30, 31, 32, 33, 34, 35, 36, 37, 70))).clone(namedValues=NamedValues(("empty", 1), ("error", 2), ("unknown", 3), ("switch", 4), ("np", 5), ("lsEdge", 6), ("lsTrunk", 7), ("msTrunk", 8), ("msEdge", 10), ("plc12fac1", 11), ("plc18eac1", 12), ("plc1Lstoken", 13), ("plc18sac1Edge", 14), ("plc18sac1Trunk", 15), ("clc1Gen", 30), ("clc12oc3ac1Edge", 31), ("clc12oc3ac1Trunk", 32), ("clc18t3ac1Edge", 33), ("clc18t3ac1Trunk", 34), ("clc12taxiac1Edge", 35), ("clc12taxiac1Trunk", 36), ("clc18t1e1cbrac1", 37), ("switch2", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsCardType.setStatus('mandatory')
tcsPaddleTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPaddleTemp1.setStatus('mandatory')
tcsPaddleTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPaddleTemp2.setStatus('mandatory')
tcsPaddleWarnTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPaddleWarnTemp1.setStatus('mandatory')
tcsPaddleWarnTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPaddleWarnTemp2.setStatus('mandatory')
tcsPaddleShutdownTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPaddleShutdownTemp1.setStatus('mandatory')
tcsPaddleShutdownTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPaddleShutdownTemp2.setStatus('mandatory')
tcsWarnTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsWarnTemp1.setStatus('mandatory')
tcsWarnTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsWarnTemp2.setStatus('mandatory')
tcsShutdownTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsShutdownTemp1.setStatus('mandatory')
tcsShutdownTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsShutdownTemp2.setStatus('mandatory')
tcsFaultLight = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsFaultLight.setStatus('mandatory')
tcsReadyLight = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsReadyLight.setStatus('mandatory')
tcsSwitchConnectivityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsSwitchConnectivityMask.setStatus('mandatory')
tcsPrimarySwitch = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchA", 1), ("switchB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcsPrimarySwitch.setStatus('mandatory')
tcsPowerSupplyA = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("empty", 1), ("failed", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPowerSupplyA.setStatus('mandatory')
tcsPowerSupplyB = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("empty", 1), ("failed", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPowerSupplyB.setStatus('mandatory')
tcsPowerSupplyTypeA = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("empty", 1), ("dcPowerTray", 2), ("toddPS", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPowerSupplyTypeA.setStatus('mandatory')
tcsPowerSupplyTypeB = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("empty", 1), ("dcPowerTray", 2), ("toddPS", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsPowerSupplyTypeB.setStatus('mandatory')
tcsSwitchFaultMaskA = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsSwitchFaultMaskA.setStatus('mandatory')
tcsSwitchFaultMaskB = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsSwitchFaultMaskB.setStatus('mandatory')
tcsSwitchCutoverSupport = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("willDoLossLess", 1), ("wontDoLossLess", 2), ("cantDoLossLess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsSwitchCutoverSupport.setStatus('mandatory')
tcsFCPrimarySwitchA = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsFCPrimarySwitchA.setStatus('mandatory')
tcsFCPrimarySwitchB = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcsFCPrimarySwitchB.setStatus('mandatory')
lsGID = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15))
gidGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1))
gidSoftwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidSoftwareVersionNumber.setStatus('mandatory')
gidProcessID = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidProcessID.setStatus('mandatory')
gidUpTime = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidUpTime.setStatus('mandatory')
gidMemoryUse = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidMemoryUse.setStatus('mandatory')
gidTimersProcessed = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidTimersProcessed.setStatus('mandatory')
gidMallocFailures = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidMallocFailures.setStatus('mandatory')
gidDebugFlag = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gidDebugFlag.setStatus('mandatory')
gidDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gidDebugLevel.setStatus('mandatory')
gidAcceptedBcastRateIn = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gidAcceptedBcastRateIn.setStatus('mandatory')
gidNbrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2))
gidNbrCount = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrCount.setStatus('mandatory')
gidNbrTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2), )
if mibBuilder.loadTexts: gidNbrTable.setStatus('mandatory')
gidNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "gidNbrEIA"))
if mibBuilder.loadTexts: gidNbrEntry.setStatus('mandatory')
gidNbrEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrEIA.setStatus('mandatory')
gidNbrVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrVCI.setStatus('mandatory')
gidNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("existent", 2), ("exstart", 3), ("exchange", 4), ("loading", 5), ("full", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrState.setStatus('mandatory')
gidNbrSyncEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrSyncEvents.setStatus('mandatory')
gidNbrDBReqListLength = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrDBReqListLength.setStatus('mandatory')
gidNbrDBSumListLength = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrDBSumListLength.setStatus('mandatory')
gidNbrHellosRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrHellosRx.setStatus('mandatory')
gidNbrLinkAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrLinkAnnouncementsRx.setStatus('mandatory')
gidNbrNewLinkAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrNewLinkAnnouncementsRx.setStatus('mandatory')
gidNbrIPAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrIPAnnouncementsRx.setStatus('mandatory')
gidNbrNewIPAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrNewIPAnnouncementsRx.setStatus('mandatory')
gidNbrGenericAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrGenericAnnouncementsRx.setStatus('mandatory')
gidNbrNewGenericAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidNbrNewGenericAnnouncementsRx.setStatus('mandatory')
gidClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3))
gidClientCount = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientCount.setStatus('mandatory')
gidClientTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2), )
if mibBuilder.loadTexts: gidClientTable.setStatus('mandatory')
gidClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "gidClientID"))
if mibBuilder.loadTexts: gidClientEntry.setStatus('mandatory')
gidClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientID.setStatus('mandatory')
gidClientEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientEIA.setStatus('mandatory')
gidClientAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientAnnouncementsRx.setStatus('mandatory')
gidClientLinkAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientLinkAnnouncementsRx.setStatus('mandatory')
gidClientIPAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientIPAnnouncementsRx.setStatus('mandatory')
gidClientGenericAnnouncementsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientGenericAnnouncementsRx.setStatus('mandatory')
gidClientEventsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientEventsTx.setStatus('mandatory')
gidClientPathsGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidClientPathsGenerated.setStatus('mandatory')
gidIOGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 4))
gidIONbrMsgBuffersFree = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIONbrMsgBuffersFree.setStatus('mandatory')
gidIONbrMsgBuffersActive = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIONbrMsgBuffersActive.setStatus('mandatory')
gidIOClientMsgBuffersFree = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIOClientMsgBuffersFree.setStatus('mandatory')
gidIOClientMsgBuffersActive = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIOClientMsgBuffersActive.setStatus('mandatory')
gidSyncGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 6))
gidSyncNbrsExistent = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidSyncNbrsExistent.setStatus('mandatory')
gidSyncNbrsExStart = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidSyncNbrsExStart.setStatus('mandatory')
gidSyncNbrsExchange = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidSyncNbrsExchange.setStatus('mandatory')
gidSyncNbrsLoading = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidSyncNbrsLoading.setStatus('mandatory')
gidSyncNbrsFull = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidSyncNbrsFull.setStatus('mandatory')
gidLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7))
gidLinkDatabaseSize = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLinkDatabaseSize.setStatus('mandatory')
gidLineCardTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2), )
if mibBuilder.loadTexts: gidLineCardTable.setStatus('mandatory')
gidLineCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "gidLineCardChassis"), (0, "LIGHTSTREAM-MIB", "gidLineCardSlot"))
if mibBuilder.loadTexts: gidLineCardEntry.setStatus('mandatory')
gidLineCardChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLineCardChassis.setStatus('mandatory')
gidLineCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLineCardSlot.setStatus('mandatory')
gidLineCardEntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1, 3), LightStreamUpToMaxAge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLineCardEntryAge.setStatus('mandatory')
gidLineCardEntrySeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLineCardEntrySeqno.setStatus('mandatory')
gidLineCardEntryAdvNP = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLineCardEntryAdvNP.setStatus('mandatory')
gidLineCardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidLineCardPorts.setStatus('mandatory')
gidPortTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3), )
if mibBuilder.loadTexts: gidPortTable.setStatus('mandatory')
gidPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "gidPortChassis"), (0, "LIGHTSTREAM-MIB", "gidPortID"))
if mibBuilder.loadTexts: gidPortEntry.setStatus('mandatory')
gidPortChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortChassis.setStatus('mandatory')
gidPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortID.setStatus('mandatory')
gidPortService = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunk", 1), ("edge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortService.setStatus('mandatory')
gidPortUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortUpDown.setStatus('mandatory')
gidPortBW0 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortBW0.setStatus('mandatory')
gidPortBW1 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortBW1.setStatus('mandatory')
gidPortBW2 = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortBW2.setStatus('mandatory')
gidPortRemoteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortRemoteChassis.setStatus('mandatory')
gidPortRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidPortRemotePort.setStatus('mandatory')
gidIpAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8))
gidIpAddressDatabaseSize = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIpAddressDatabaseSize.setStatus('mandatory')
gidIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2), )
if mibBuilder.loadTexts: gidIpAddressTable.setStatus('mandatory')
gidIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "gidInternalIpAddress"))
if mibBuilder.loadTexts: gidIpAddressEntry.setStatus('mandatory')
gidInternalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidInternalIpAddress.setStatus('mandatory')
gidIpEntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1, 2), LightStreamUpToMaxAge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIpEntryAge.setStatus('mandatory')
gidIpEntrySeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIpEntrySeqno.setStatus('mandatory')
gidIpEntryAdvNP = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIpEntryAdvNP.setStatus('mandatory')
gidIpEntryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIpEntryNetMask.setStatus('mandatory')
gidIpEntryEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 8, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidIpEntryEIA.setStatus('mandatory')
gidEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9))
gidEventLinkEventsDelivered = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidEventLinkEventsDelivered.setStatus('mandatory')
gidEventIpEventsDelivered = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidEventIpEventsDelivered.setStatus('mandatory')
gidEventGenericGinfoEventsDelivered = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidEventGenericGinfoEventsDelivered.setStatus('mandatory')
gidEventGenericGinfoEventTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 4), )
if mibBuilder.loadTexts: gidEventGenericGinfoEventTable.setStatus('mandatory')
gidEventGenericGinfoEventCount = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 4, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "gidEventDistributionGroup"))
if mibBuilder.loadTexts: gidEventGenericGinfoEventCount.setStatus('mandatory')
gidEventDistributionGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidEventDistributionGroup.setStatus('mandatory')
gidEventGenericGinfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 15, 9, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gidEventGenericGinfoEvents.setStatus('mandatory')
lsPID = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 16))
pidTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1), )
if mibBuilder.loadTexts: pidTable.setStatus('mandatory')
pidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "pidIndex"))
if mibBuilder.loadTexts: pidEntry.setStatus('mandatory')
pidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidIndex.setStatus('mandatory')
pidName = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidName.setStatus('mandatory')
pidCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidCreationTime.setStatus('mandatory')
pidOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidOperStatus.setStatus('mandatory')
pidAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pidAdminStatus.setStatus('mandatory')
lsND = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17))
ndGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 1))
ndSoftwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndSoftwareVersionNumber.setStatus('mandatory')
ndProcessID = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndProcessID.setStatus('mandatory')
ndMemoryUse = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndMemoryUse.setStatus('mandatory')
ndTimersProcessed = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndTimersProcessed.setStatus('mandatory')
ndLCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2))
ndLCCount = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndLCCount.setStatus('mandatory')
ndLCTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2, 2), )
if mibBuilder.loadTexts: ndLCTable.setStatus('mandatory')
ndLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ndLCEIA"))
if mibBuilder.loadTexts: ndLCEntry.setStatus('mandatory')
ndLCEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndLCEIA.setStatus('mandatory')
ndLCChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndLCChannel.setStatus('mandatory')
ndLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("existent", 2), ("up", 3), ("comingdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndLCState.setStatus('mandatory')
ndNbrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3))
ndNbrCount = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndNbrCount.setStatus('mandatory')
ndNbrTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3, 2), )
if mibBuilder.loadTexts: ndNbrTable.setStatus('mandatory')
ndNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ndNbrEIA"))
if mibBuilder.loadTexts: ndNbrEntry.setStatus('mandatory')
ndNbrEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndNbrEIA.setStatus('mandatory')
ndNbrChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndNbrChannel.setStatus('mandatory')
ndNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("existent", 2), ("up", 3), ("comingdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndNbrState.setStatus('mandatory')
ndSwudGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4))
ndSwudTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1), )
if mibBuilder.loadTexts: ndSwudTable.setStatus('mandatory')
ndSwudEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ndSwudIndex"))
if mibBuilder.loadTexts: ndSwudEntry.setStatus('mandatory')
ndSwudIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndSwudIndex.setStatus('mandatory')
ndOperIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOperIntvl.setStatus('mandatory')
ndOperJ = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOperJ.setStatus('mandatory')
ndOperK = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOperK.setStatus('mandatory')
ndOperM = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOperM.setStatus('mandatory')
ndOperN = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOperN.setStatus('mandatory')
ndAdminIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 7), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndAdminIntvl.setStatus('mandatory')
ndAdminJ = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndAdminJ.setStatus('mandatory')
ndAdminK = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndAdminK.setStatus('mandatory')
ndAdminM = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndAdminM.setStatus('mandatory')
ndAdminN = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndAdminN.setStatus('mandatory')
ndTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndTrigger.setStatus('mandatory')
ndSwudStatsInputErrors = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndSwudStatsInputErrors.setStatus('mandatory')
ndSwudStatsTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3), )
if mibBuilder.loadTexts: ndSwudStatsTable.setStatus('mandatory')
ndSwudStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ndSwudStatsIndex"))
if mibBuilder.loadTexts: ndSwudStatsEntry.setStatus('mandatory')
ndSwudStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndSwudStatsIndex.setStatus('mandatory')
ndInputCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndInputCells.setStatus('mandatory')
ndInputErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndInputErrs.setStatus('mandatory')
ndOutputCells = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOutputCells.setStatus('mandatory')
ndOutputErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndOutputErrs.setStatus('mandatory')
ndClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5))
ndClientCount = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndClientCount.setStatus('mandatory')
ndClientTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2), )
if mibBuilder.loadTexts: ndClientTable.setStatus('mandatory')
ndClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "ndClientID"))
if mibBuilder.loadTexts: ndClientEntry.setStatus('mandatory')
ndClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndClientID.setStatus('mandatory')
ndClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nd", 3), ("gid", 4), ("lcc", 5), ("ca", 6), ("sys", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndClientType.setStatus('mandatory')
ndClientSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndClientSubType.setStatus('mandatory')
ndClientEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndClientEIA.setStatus('mandatory')
ndClientRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndClientRegistration.setStatus('mandatory')
ndInternalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 6))
ndInternalDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndInternalDebugLevel.setStatus('mandatory')
ndInternalDebugFlags = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndInternalDebugFlags.setStatus('mandatory')
ndRedundancyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 7))
ndPrimaryNP = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndPrimaryNP.setStatus('mandatory')
ndThisNP = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndThisNP.setStatus('mandatory')
ndForceToBackup = MibScalar((1, 3, 6, 1, 4, 1, 711, 2, 1, 17, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndForceToBackup.setStatus('mandatory')
lwmaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 2, 1, 18))
lwmaTable = MibTable((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1), )
if mibBuilder.loadTexts: lwmaTable.setStatus('mandatory')
lwmaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lwmaIndex"))
if mibBuilder.loadTexts: lwmaEntry.setStatus('mandatory')
lwmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lwmaIndex.setStatus('mandatory')
lwmaCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lwmaCreationTime.setStatus('mandatory')
lwmaTableNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lwmaTableNotification.setStatus('mandatory')
lwmaTrapLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("informational", 2), ("trace", 3), ("debug", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lwmaTrapLevel.setStatus('mandatory')
lwmaTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lwmaTrapNumber.setStatus('mandatory')
lwmaTrapOnOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapOn", 1), ("trapOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lwmaTrapOnOffState.setStatus('mandatory')
lwmaTrapCliAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 2, 1, 18, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lwmaTrapCliAlias.setStatus('mandatory')
lightStreamBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 711, 3, 1))
lightStreamBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 711, 3, 1, 1), )
if mibBuilder.loadTexts: lightStreamBridgePortTable.setStatus('mandatory')
lightStreamBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 3, 1, 1, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lightStreamBrPortPort"))
if mibBuilder.loadTexts: lightStreamBridgePortEntry.setStatus('mandatory')
lightStreamBrPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrPortPort.setStatus('mandatory')
lightStreamBrPortDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 1, 1, 2), LightStreamFilterAction().clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrPortDefaultAction.setStatus('mandatory')
lightStreamBrPortBcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrPortBcastRateLimit.setStatus('mandatory')
lightStreamBrPortDroppedBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrPortDroppedBcastPkts.setStatus('mandatory')
lightStreamBridgeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 711, 3, 1, 2), )
if mibBuilder.loadTexts: lightStreamBridgeFilterTable.setStatus('mandatory')
lightStreamBridgeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 3, 1, 2, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lightStreamBrFilterId"), (0, "LIGHTSTREAM-MIB", "lightStreamBrFilterTokenIndex"))
if mibBuilder.loadTexts: lightStreamBridgeFilterEntry.setStatus('mandatory')
lightStreamBrFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrFilterId.setStatus('mandatory')
lightStreamBrFilterTokenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrFilterTokenIndex.setStatus('mandatory')
lightStreamBrFilterTokenType = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("operation", 1), ("frameField", 2), ("macAddrType", 3), ("etherType", 4), ("llcSAPType", 5), ("reserved", 6), ("snapOuiType", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrFilterTokenType.setStatus('mandatory')
lightStreamBrFilterTokenValue = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrFilterTokenValue.setStatus('mandatory')
lightStreamBrFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("complete", 1), ("delete", 2), ("intermediateToken", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrFilterStatus.setStatus('mandatory')
lightStreamBridgeFilterParameterTable = MibTable((1, 3, 6, 1, 4, 1, 711, 3, 1, 3), )
if mibBuilder.loadTexts: lightStreamBridgeFilterParameterTable.setStatus('mandatory')
lightStreamBridgeFilterParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lightStreamBrFilterParmPort"), (0, "LIGHTSTREAM-MIB", "lightStreamBrFilterParmFilterId"))
if mibBuilder.loadTexts: lightStreamBridgeFilterParameterEntry.setStatus('mandatory')
lightStreamBrFilterParmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrFilterParmPort.setStatus('mandatory')
lightStreamBrFilterParmFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrFilterParmFilterId.setStatus('mandatory')
lightStreamBrFilterParmFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrFilterParmFilterPriority.setStatus('mandatory')
lightStreamBrFilterParmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1, 4), LightStreamFilterAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrFilterParmAction.setStatus('mandatory')
lightStreamBrFilterParmMatchCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrFilterParmMatchCounts.setStatus('mandatory')
lightStreamBrFilterParmValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 3, 1, 3, 1, 6), LightStreamValidation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamBrFilterParmValidation.setStatus('mandatory')
lightStreamBrStaticGoToCardSize = MibScalar((1, 3, 6, 1, 4, 1, 711, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamBrStaticGoToCardSize.setStatus('mandatory')
lightStreamVliVersion = MibScalar((1, 3, 6, 1, 4, 1, 711, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version-1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamVliVersion.setStatus('mandatory')
lightStreamVliPortCtlTable = MibTable((1, 3, 6, 1, 4, 1, 711, 4, 4), )
if mibBuilder.loadTexts: lightStreamVliPortCtlTable.setStatus('mandatory')
lightStreamVliPortCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 4, 4, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lightStreamVliPortCtlPort"))
if mibBuilder.loadTexts: lightStreamVliPortCtlEntry.setStatus('mandatory')
lightStreamVliPortCtlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamVliPortCtlPort.setStatus('mandatory')
lightStreamVliPortCtlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamVliPortCtlMode.setStatus('mandatory')
lightStreamVliPortWorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 711, 4, 5), )
if mibBuilder.loadTexts: lightStreamVliPortWorkGroupTable.setStatus('mandatory')
lightStreamVliPortWorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 711, 4, 5, 1), ).setIndexNames((0, "LIGHTSTREAM-MIB", "lightStreamVliPortWorkGroupPort"), (0, "LIGHTSTREAM-MIB", "lightStreamVliPortWorkGroupID"))
if mibBuilder.loadTexts: lightStreamVliPortWorkGroupEntry.setStatus('mandatory')
lightStreamVliPortWorkGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamVliPortWorkGroupPort.setStatus('mandatory')
lightStreamVliPortWorkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamVliPortWorkGroupID.setStatus('mandatory')
lightStreamVliPortWorkGroupValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 711, 4, 5, 1, 3), LightStreamValidation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightStreamVliPortWorkGroupValidation.setStatus('mandatory')
lightStreamEndOfMib = MibScalar((1, 3, 6, 1, 4, 1, 711, 1000, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightStreamEndOfMib.setStatus('mandatory')
mibBuilder.exportSymbols("LIGHTSTREAM-MIB", ls1InfoOperXmitBaudRate=ls1InfoOperXmitBaudRate, gidNbrNewIPAnnouncementsRx=gidNbrNewIPAnnouncementsRx, lsFrameForwardStatTable=lsFrameForwardStatTable, ms1InfoEntry=ms1InfoEntry, mmaTrapNumber=mmaTrapNumber, gidLineCardEntrySeqno=gidLineCardEntrySeqno, gidEventGroup=gidEventGroup, tcsTable=tcsTable, tcsPowerSupplyTypeA=tcsPowerSupplyTypeA, gidIpEntryAge=gidIpEntryAge, sUniCktAdminDestMaxBurst=sUniCktAdminDestMaxBurst, trunkPortDownXmtCells=trunkPortDownXmtCells, ndAdminK=ndAdminK, chassisNetworkMask=chassisNetworkMask, gidPortChassis=gidPortChassis, fsuHdrLrcErrs=fsuHdrLrcErrs, lsLcIntervalAvgCells=lsLcIntervalAvgCells, pvcEntry=pvcEntry, ndOperJ=ndOperJ, pvcSecondaryScale=pvcSecondaryScale, edgeStatFsuRATOs=edgeStatFsuRATOs, ndLCGroup=ndLCGroup, lightStreamVliVersion=lightStreamVliVersion, frProvMiMaxSupportedVCs=frProvMiMaxSupportedVCs, ndSwudTable=ndSwudTable, mcEndptRmtVCstatus=mcEndptRmtVCstatus, ls1InfoOperControlBandwidthSize=ls1InfoOperControlBandwidthSize, pvcSrcMaxBurst=pvcSrcMaxBurst, lsPID=lsPID, lsOther=lsOther, ndOperK=ndOperK, ndLCTable=ndLCTable, tcsPaddleWarnTemp1=tcsPaddleWarnTemp1, lsPrivate=lsPrivate, frProvMiNetRequestInterval=frProvMiNetRequestInterval, edgeToSwMsgLenMsgs=edgeToSwMsgLenMsgs, lightStreamBrFilterTokenIndex=lightStreamBrFilterTokenIndex, mmaTrapOnOffState=mmaTrapOnOffState, frCktAdminDestInsuredRate=frCktAdminDestInsuredRate, gidEventLinkEventsDelivered=gidEventLinkEventsDelivered, sUniCktAdminDestNode=sUniCktAdminDestNode, lcStatEntry=lcStatEntry, gidClientGroup=gidClientGroup, cardPID=cardPID, frameForwardToSwCLP1Frames=frameForwardToSwCLP1Frames, ffCktInfo=ffCktInfo, lsEdgeCpuWorkloadTable=lsEdgeCpuWorkloadTable, caMinIntervalCaInfo=caMinIntervalCaInfo, gidNbrTable=gidNbrTable, lightStreamBridgeFilterEntry=lightStreamBridgeFilterEntry, gidLineCardEntryAdvNP=gidLineCardEntryAdvNP, cardAdminStatus=cardAdminStatus, sUniCktOperSrcMaxBurst=sUniCktOperSrcMaxBurst, gidNbrNewGenericAnnouncementsRx=gidNbrNewGenericAnnouncementsRx, tcsPaddleShutdownTemp2=tcsPaddleShutdownTemp2, frCktAdminSecondaryScale=frCktAdminSecondaryScale, clc1InfoAdminProtocol=clc1InfoAdminProtocol, frameForwardToSwCLP0Cells=frameForwardToSwCLP0Cells, lightStreamBrPortDroppedBcastPkts=lightStreamBrPortDroppedBcastPkts, ffCktAdminDestIfIndex=ffCktAdminDestIfIndex, ndMemoryUse=ndMemoryUse, lightStreamVliPortWorkGroupEntry=lightStreamVliPortWorkGroupEntry, lsLcFsuIntervalEntry=lsLcFsuIntervalEntry, tcsPaddleShutdownTemp1=tcsPaddleShutdownTemp1, lsTrunkPortStatTable=lsTrunkPortStatTable, frCktInfoLastAtmErr=frCktInfoLastAtmErr, ndNbrGroup=ndNbrGroup, clc1InfoOperScramble=clc1InfoOperScramble, gidIpEntryNetMask=gidIpEntryNetMask, sUniCktOperDestMaxRate=sUniCktOperDestMaxRate, mmaSetLock=mmaSetLock, lcPortStatEntry=lcPortStatEntry, ffCktOperPrinBwType=ffCktOperPrinBwType, ls1InfoType=ls1InfoType, gidMemoryUse=gidMemoryUse, ndNbrEIA=ndNbrEIA, sUniCktInfoUniToNetCallID=sUniCktInfoUniToNetCallID, pidName=pidName, tluAAL5AbortErrs=tluAAL5AbortErrs, gidEventGenericGinfoEventCount=gidEventGenericGinfoEventCount, lightStreamOIDs=lightStreamOIDs, trunkPortRcvAborts=trunkPortRcvAborts, cardOperStatus=cardOperStatus, ndTrigger=ndTrigger, gidClientEntry=gidClientEntry, ndAdminJ=ndAdminJ, lsLcIntervalMaxPermits=lsLcIntervalMaxPermits, ls1InfoOperLoopMode=ls1InfoOperLoopMode, pvcTransPri=pvcTransPri, edgeStatIndex=edgeStatIndex, frameForwardFrSwCLP1Frames=frameForwardFrSwCLP1Frames, ffCktInfoTable=ffCktInfoTable, gidPortID=gidPortID, lightStreamInternet=lightStreamInternet, lsExperimental=lsExperimental, sUniCktCfgTable=sUniCktCfgTable, ffCktInfoEntry=ffCktInfoEntry, tcsFCPrimarySwitchB=tcsFCPrimarySwitchB, ndLCEIA=ndLCEIA, clc1InfoLinkUtilization=clc1InfoLinkUtilization, lsFsuFastDropWatermarkIndex=lsFsuFastDropWatermarkIndex, ms1InfoIfIndex=ms1InfoIfIndex, frCktAdminUserDataPerCell=frCktAdminUserDataPerCell, edgePortRcvShortFrames=edgePortRcvShortFrames, lsLcIntervalIncrPermits=lsLcIntervalIncrPermits, tcsShutdownTemp2=tcsShutdownTemp2, trunkPortRcvCRCErrors=trunkPortRcvCRCErrors, fsuDropEventEntry=fsuDropEventEntry, gidLineCardChassis=gidLineCardChassis, cellVciToSwDiscardCells=cellVciToSwDiscardCells, fsuQueueCellLenSubQIndex=fsuQueueCellLenSubQIndex, frCktOperTransPri=frCktOperTransPri, frCktInfoDlci=frCktInfoDlci, fsuQueueCellLenEntry=fsuQueueCellLenEntry, ffCktInfoDataCellsRequired=ffCktInfoDataCellsRequired, frCktInfoRmtLMI=frCktInfoRmtLMI, lsFrameForwardStatEntry=lsFrameForwardStatEntry, tcsSwitchCutoverSupport=tcsSwitchCutoverSupport, ffCktStatus=ffCktStatus, lightStream=lightStream, lightStreamVliPortWorkGroupValidation=lightStreamVliPortWorkGroupValidation, ffCktInfoUpstreamState=ffCktInfoUpstreamState, collectDbEntry=collectDbEntry, fsuDropEvents=fsuDropEvents, cellVciStatPortIndex=cellVciStatPortIndex, gidLineCardTable=gidLineCardTable, ls1InfoTable=ls1InfoTable, fsuPortFreeCells=fsuPortFreeCells, ndClientCount=ndClientCount, clc1InfoOperProtocol=clc1InfoOperProtocol, gidPortBW2=gidPortBW2, mmaConfigID=mmaConfigID, mmaNumName=mmaNumName, lsFsuFastDropTable=lsFsuFastDropTable, lightStreamEndOfMib=lightStreamEndOfMib, sUniCktInfoVCI=sUniCktInfoVCI, edgeSecondaryScale=edgeSecondaryScale, frProvMiIfIndex=frProvMiIfIndex, frCktInfoEntry=frCktInfoEntry, collectDBObjectID=collectDBObjectID, frProvMiNetMonitoredEvents=frProvMiNetMonitoredEvents, frameRelayDlciFrSwCLP0Frames=frameRelayDlciFrSwCLP0Frames, gidPortBW1=gidPortBW1, mmaLwmpTimeouts=mmaLwmpTimeouts, lsLcIntervalNumber=lsLcIntervalNumber, collectDBStatus=collectDBStatus, lsEdgePortStatTable=lsEdgePortStatTable, frameRelayDlciStatDlciIndex=frameRelayDlciStatDlciIndex, ls1InfoAdminProtocol=ls1InfoAdminProtocol, sUniCktAdminDestVCI=sUniCktAdminDestVCI, gidSyncGroup=gidSyncGroup, fsuQueueCellLengthTable=fsuQueueCellLengthTable, lsEdgeStatistics=lsEdgeStatistics, lsCellVciStatTable=lsCellVciStatTable, gidEventDistributionGroup=gidEventDistributionGroup, clc1InfoTable=clc1InfoTable, sUniCktSrcVCI=sUniCktSrcVCI, lsEdgeWorkloadCardIndex=lsEdgeWorkloadCardIndex, pvcSrcIfIndex=pvcSrcIfIndex, lsND=lsND, cardIndex=cardIndex, VCI=VCI, frameForwardToSwDiscardCells=frameForwardToSwDiscardCells, portInfoTable=portInfoTable, frCktInfoIfIndex=frCktInfoIfIndex, edgePortRcvNUcastPkts=edgePortRcvNUcastPkts, frCktAdminDestIfIndex=frCktAdminDestIfIndex, frCktAdminSrcMaxRate=frCktAdminSrcMaxRate, gidNbrLinkAnnouncementsRx=gidNbrLinkAnnouncementsRx, tsuPortErrL1UnconfigLastVci=tsuPortErrL1UnconfigLastVci, chassisId=chassisId, pvcSrcMaxRate=pvcSrcMaxRate, pidCreationTime=pidCreationTime, frCktAdminDestInsuredBurst=frCktAdminDestInsuredBurst, ffCktOperDestMaxRate=ffCktOperDestMaxRate, lsCellVciStatEntry=lsCellVciStatEntry, gidEventGenericGinfoEventTable=gidEventGenericGinfoEventTable, oc3InfoTable=oc3InfoTable, lsFsuFastDropEntry=lsFsuFastDropEntry, lightStreamBrPortBcastRateLimit=lightStreamBrPortBcastRateLimit, gidPortRemoteChassis=gidPortRemoteChassis, lsEdgeSwToPortMsgLenEntry=lsEdgeSwToPortMsgLenEntry, edgePortStatIndex=edgePortStatIndex, ffCktEntry=ffCktEntry, ndInternalDebugFlags=ndInternalDebugFlags, tsuPortErrNonZeroGfc=tsuPortErrNonZeroGfc, npInfoEntry=npInfoEntry, collectCommunityName=collectCommunityName, lightStreamProducts=lightStreamProducts, tcsInfo=tcsInfo, ndInputCells=ndInputCells, frCktOperDestIfIndex=frCktOperDestIfIndex, lsEdgeWorkloadEvents=lsEdgeWorkloadEvents, frProvMiUserPollingInterval=frProvMiUserPollingInterval, lwmaTableNotification=lwmaTableNotification, collectFinish=collectFinish, lsLcIntervalDecrPermits=lsLcIntervalDecrPermits, tcsPowerSupplyTypeB=tcsPowerSupplyTypeB, tcsSwitchConnectivityMask=tcsSwitchConnectivityMask, sUniCktAdminDestInsuredRate=sUniCktAdminDestInsuredRate, ffCktOperDestInsuredRate=ffCktOperDestInsuredRate, pvcPrinBwType=pvcPrinBwType, edgePort=edgePort, sUniCktOperDestMaxBurst=sUniCktOperDestMaxBurst, ms1InfoOperControlBandwidthSize=ms1InfoOperControlBandwidthSize, clc1InfoOperDataBandwidthSize=clc1InfoOperDataBandwidthSize, gidNbrGroup=gidNbrGroup, tcsTemp2=tcsTemp2, ls1InfoAdminDataBandwidthSize=ls1InfoAdminDataBandwidthSize, frCktAdminSrcInsuredRate=frCktAdminSrcInsuredRate, edgeUpcType=edgeUpcType, portInfoErrorLimit=portInfoErrorLimit, ndAdminIntvl=ndAdminIntvl, sUniCktOperSecondaryScale=sUniCktOperSecondaryScale, sUniCktOperSrcInsuredBurst=sUniCktOperSrcInsuredBurst, ndLCEntry=ndLCEntry, ffCktAdminTransPri=ffCktAdminTransPri, lightStreamBrFilterParmMatchCounts=lightStreamBrFilterParmMatchCounts, edgeUserDataPerCell=edgeUserDataPerCell, clc1InfoDataCellAvailable=clc1InfoDataCellAvailable, ls1InfoOperProtocol=ls1InfoOperProtocol, edgePortDownXmtFrames=edgePortDownXmtFrames, lsFsuFastCellDropEvents=lsFsuFastCellDropEvents, sUniCktAdminDestIfIndex=sUniCktAdminDestIfIndex, ndOperN=ndOperN, mcEndptDest=mcEndptDest, ndClientID=ndClientID, gidInternalIpAddress=gidInternalIpAddress, edgePortXmtUnderflows=edgePortXmtUnderflows, edgeMeteringFactor=edgeMeteringFactor, ms1InfoOperProtocol=ms1InfoOperProtocol, ffCktAdminDestMaxBurst=ffCktAdminDestMaxBurst, irRoutingGroup=irRoutingGroup, gidEventGenericGinfoEvents=gidEventGenericGinfoEvents, lightStreamVli=lightStreamVli, lightStreamVliPortWorkGroupID=lightStreamVliPortWorkGroupID, tcsShutdownTemp1=tcsShutdownTemp1, lwmaCreationTime=lwmaCreationTime, frProvMiNetErrorThreshold=frProvMiNetErrorThreshold, mmaNumNameNumber=mmaNumNameNumber, ls1InfoAdminRcvBaudRate=ls1InfoAdminRcvBaudRate, lsExperimentalStatistics=lsExperimentalStatistics, gidNbrVCI=gidNbrVCI, lightStreamVliPortCtlPort=lightStreamVliPortCtlPort, frCktAdminSrcMaxBurst=frCktAdminSrcMaxBurst, edgePortRcvL3XsumErrLastVci=edgePortRcvL3XsumErrLastVci, gidIpAddressEntry=gidIpAddressEntry, ndLCCount=ndLCCount, gidClientAnnouncementsRx=gidClientAnnouncementsRx, mcEndptInfo=mcEndptInfo, sUniCktAdminPrinBwType=sUniCktAdminPrinBwType, gidNbrEIA=gidNbrEIA, gidClientTable=gidClientTable, sUniCktOperDestInsuredBurst=sUniCktOperDestInsuredBurst)
mibBuilder.exportSymbols("LIGHTSTREAM-MIB", gidLinkDatabaseSize=gidLinkDatabaseSize, gidNbrHellosRx=gidNbrHellosRx, lightStreamBridgePortTable=lightStreamBridgePortTable, collectFileName=collectFileName, trunkPortRcvCells=trunkPortRcvCells, edgePortRcvUcastPkts=edgePortRcvUcastPkts, tcsPowerSupplyB=tcsPowerSupplyB, collectOperStatus=collectOperStatus, lcPortStatTable=lcPortStatTable, cardBoardType=cardBoardType, frCktInfoCallIDOutgoing=frCktInfoCallIDOutgoing, ffCktCfgTable=ffCktCfgTable, gidTimersProcessed=gidTimersProcessed, gidAcceptedBcastRateIn=gidAcceptedBcastRateIn, tsuDropEvents=tsuDropEvents, ffCktOperDestNode=ffCktOperDestNode, lsGID=lsGID, lsEdgeSwToPortMsgLenTable=lsEdgeSwToPortMsgLenTable, frameForwardToSwDiscardFrames=frameForwardToSwDiscardFrames, gidIONbrMsgBuffersActive=gidIONbrMsgBuffersActive, ffCktOperSrcMaxRate=ffCktOperSrcMaxRate, sUniCktOperPrinBwType=sUniCktOperPrinBwType, tcsSwitchFaultMaskA=tcsSwitchFaultMaskA, fsuPortXmtCellsEntry=fsuPortXmtCellsEntry, clc1InfoOperLoopMode=clc1InfoOperLoopMode, gidNbrGenericAnnouncementsRx=gidNbrGenericAnnouncementsRx, sUniCktOperTransPri=sUniCktOperTransPri, lwmaInfo=lwmaInfo, lsEdgePortToSwMsgLenEntry=lsEdgePortToSwMsgLenEntry, tluAAL5ErrLastVci=tluAAL5ErrLastVci, gidUpTime=gidUpTime, frCktInfoDataCellsRequired=frCktInfoDataCellsRequired, tsuDropEventTable=tsuDropEventTable, tcsPaddleWarnTemp2=tcsPaddleWarnTemp2, ndSwudStatsIndex=ndSwudStatsIndex, tcsTemp1=tcsTemp1, tcsPaddleTemp1=tcsPaddleTemp1, mcEndptLclIfIndex=mcEndptLclIfIndex, frProvMiState=frProvMiState, portInfoType=portInfoType, edgePortTable=edgePortTable, frCktAdminSrcInsuredBurst=frCktAdminSrcInsuredBurst, ndSwudEntry=ndSwudEntry, ls1InfoAdminNetIntType=ls1InfoAdminNetIntType, lsTrapName=lsTrapName, ndAdminM=ndAdminM, ndClientTable=ndClientTable, lsLcIntervalDropEvents=lsLcIntervalDropEvents, lightStreamBrPortPort=lightStreamBrPortPort, lsTrunkWorkloadTypeIndex=lsTrunkWorkloadTypeIndex, ndClientEntry=ndClientEntry, ffCktOperSrcMaxBurst=ffCktOperSrcMaxBurst, irRoutingAveragePathLength=irRoutingAveragePathLength, sUniCktAdminTransPri=sUniCktAdminTransPri, lsEdgeWorkloadTypeIndex=lsEdgeWorkloadTypeIndex, ndProcessID=ndProcessID, ffCktSrcIfIndex=ffCktSrcIfIndex, ndSoftwareVersionNumber=ndSoftwareVersionNumber, ndLCState=ndLCState, edgeIfIndex=edgeIfIndex, lsNpStatistics=lsNpStatistics, ls1InfoLcAutoEnable=ls1InfoLcAutoEnable, frCktOperPrinBwType=frCktOperPrinBwType, switchCellSchedRejectEvents=switchCellSchedRejectEvents, frCktOperUserDataPerCell=frCktOperUserDataPerCell, sUniCktSts=sUniCktSts, lsLcIntervalPSDepth=lsLcIntervalPSDepth, frProvMiEntry=frProvMiEntry, pidIndex=pidIndex, frameRelayDlciStatPortIndex=frameRelayDlciStatPortIndex, tcsPaddleTemp2=tcsPaddleTemp2, pvcSrcInsuredRate=pvcSrcInsuredRate, lightStreamVliPortWorkGroupTable=lightStreamVliPortWorkGroupTable, tcsScsiVoltage=tcsScsiVoltage, ndOutputErrs=ndOutputErrs, tcsPostResult=tcsPostResult, ms1InfoDataCellAvailable=ms1InfoDataCellAvailable, fsuQueueCellLength=fsuQueueCellLength, collectFileSize=collectFileSize, gidDebugLevel=gidDebugLevel, ffCktAdminDestInsuredRate=ffCktAdminDestInsuredRate, chassisConsoleTrapLevel=chassisConsoleTrapLevel, gidNbrDBReqListLength=gidNbrDBReqListLength, ndForceToBackup=ndForceToBackup, gidMallocFailures=gidMallocFailures, ls1InfoAdminCsuType=ls1InfoAdminCsuType, frProvMiAddressLen=frProvMiAddressLen, gidLineCardEntryAge=gidLineCardEntryAge, gidNbrState=gidNbrState, sUniCktInfoNetToUniState=sUniCktInfoNetToUniState, frCktCfgTable=frCktCfgTable, clc1InfoEntry=clc1InfoEntry, ffCktInfoLastAtmLocation=ffCktInfoLastAtmLocation, edgeToSwMsgLenPortIndex=edgeToSwMsgLenPortIndex, gidNbrIPAnnouncementsRx=gidNbrIPAnnouncementsRx, sUniCktInfoIfIndex=sUniCktInfoIfIndex, gidLineCardPorts=gidLineCardPorts, pvcCfgTable=pvcCfgTable, ls1InfoAdminOperTrigger=ls1InfoAdminOperTrigger, frCktAdminTransPri=frCktAdminTransPri, frameRelayDlciFrSwCLP0Cells=frameRelayDlciFrSwCLP0Cells, ms1InfoOperDataBandwidthSize=ms1InfoOperDataBandwidthSize, ls1InfoOperModemState=ls1InfoOperModemState, irRoutingPathGenFailedUnknown=irRoutingPathGenFailedUnknown, sUniCktInfoEntry=sUniCktInfoEntry, lightStreamBrFilterStatus=lightStreamBrFilterStatus, portInfoIndex=portInfoIndex, lsCellStatistics=lsCellStatistics, ffCktAdminSrcMaxRate=ffCktAdminSrcMaxRate, frProvMiMulticast=frProvMiMulticast, edgePortRcvAborts=edgePortRcvAborts, gidDebugFlag=gidDebugFlag, ndThisNP=ndThisNP, edgeCallSetupRetry=edgeCallSetupRetry, chassisEthernetIpAddr=chassisEthernetIpAddr, ndTimersProcessed=ndTimersProcessed, frCktInfoTable=frCktInfoTable, chassisActiveIpAddr=chassisActiveIpAddr, tsuCellDropLastVci=tsuCellDropLastVci, lsLcIntervalAvgBwAlloc=lsLcIntervalAvgBwAlloc, gidSoftwareVersionNumber=gidSoftwareVersionNumber, rmonCommunityName=rmonCommunityName, gidPortEntry=gidPortEntry, edgePortEntry=edgePortEntry, LightStreamStatus=LightStreamStatus, ms1InfoLcAutoEnable=ms1InfoLcAutoEnable, irRoutingPathsGenerated=irRoutingPathsGenerated, irRoutingPathGenFailedOther=irRoutingPathGenFailedOther, edgeStatTsuHoldQs=edgeStatTsuHoldQs, gidEventIpEventsDelivered=gidEventIpEventsDelivered, lightStreamBridge=lightStreamBridge, cellVciToSwCLP01Cells=cellVciToSwCLP01Cells, clc1InfoIfIndex=clc1InfoIfIndex, lightStreamBrFilterParmFilterPriority=lightStreamBrFilterParmFilterPriority, ffCktInfoLastAtmErr=ffCktInfoLastAtmErr, gidClientGenericAnnouncementsRx=gidClientGenericAnnouncementsRx, frCktSrcIfIndex=frCktSrcIfIndex, gidSyncNbrsFull=gidSyncNbrsFull, gidClientEIA=gidClientEIA, fsuXmtCellsPortIndex=fsuXmtCellsPortIndex, ndOperM=ndOperM, lsTrapNumber=lsTrapNumber, atmSwitch=atmSwitch, ndOperIntvl=ndOperIntvl, lsTrapText=lsTrapText, frCktAdminDestNode=frCktAdminDestNode, lsLcIntervalASDepth=lsLcIntervalASDepth, gidPortUpDown=gidPortUpDown, ndPrimaryNP=ndPrimaryNP, ndSwudIndex=ndSwudIndex, frameRelayDlciFrSwCLP1Frames=frameRelayDlciFrSwCLP1Frames, chassisStatusWord=chassisStatusWord, sUniCktAdminSrcInsuredRate=sUniCktAdminSrcInsuredRate, gidLineCardEntry=gidLineCardEntry, ndSwudStatsEntry=ndSwudStatsEntry, gidClientCount=gidClientCount, ffCktOperSrcInsuredBurst=ffCktOperSrcInsuredBurst, cellVciToSwCLP0Cells=cellVciToSwCLP0Cells, lightStreamBrFilterParmAction=lightStreamBrFilterParmAction, cardConfigRegister=cardConfigRegister, fsuQueueCellLenPortIndex=fsuQueueCellLenPortIndex, frCktAdminDestMaxBurst=frCktAdminDestMaxBurst, gidNbrDBSumListLength=gidNbrDBSumListLength, lcStatTable=lcStatTable, sUniCktSrcNode=sUniCktSrcNode, gidSyncNbrsExStart=gidSyncNbrsExStart, frameRelayDlciToSwDiscardFrames=frameRelayDlciToSwDiscardFrames, frProvMiUserFullEnquiryInterval=frProvMiUserFullEnquiryInterval, lsTrunkCpuWorkloadEntry=lsTrunkCpuWorkloadEntry, frDceInfo=frDceInfo, oc3InfoMediumType=oc3InfoMediumType, lsEdgePortStatEntry=lsEdgePortStatEntry, frCktEntry=frCktEntry, edgePortRcvCRCErrors=edgePortRcvCRCErrors, frProvMiUserErrorThreshold=frProvMiUserErrorThreshold, gidClientIPAnnouncementsRx=gidClientIPAnnouncementsRx, ndInputErrs=ndInputErrs, frCktOperDestInsuredBurst=frCktOperDestInsuredBurst, ms1InfoDataCellCapacity=ms1InfoDataCellCapacity, ffCktOperTransPri=ffCktOperTransPri, ms1InfoOperFraming=ms1InfoOperFraming, gidIpEntrySeqno=gidIpEntrySeqno, gidClientEventsTx=gidClientEventsTx, clc1InfoDataCellCapacity=clc1InfoDataCellCapacity, lwmaTable=lwmaTable, frCktAdminPrinBwType=frCktAdminPrinBwType, lightStreamBrFilterParmValidation=lightStreamBrFilterParmValidation, mcEndptCallIDIncoming=mcEndptCallIDIncoming, frCktStatus=frCktStatus, sUniCktAdminSecondaryScale=sUniCktAdminSecondaryScale, mmaNumNameEntry=mmaNumNameEntry, edgeStatFsuRATOLastInfo=edgeStatFsuRATOLastInfo, lightStreamVliPortCtlMode=lightStreamVliPortCtlMode, cardMaxVCs=cardMaxVCs, ls1InfoOperNetIntType=ls1InfoOperNetIntType, frCktInfoCallIDIncoming=frCktInfoCallIDIncoming, frCktOperSrcInsuredRate=frCktOperSrcInsuredRate, lsTrunkWorkloadCardIndex=lsTrunkWorkloadCardIndex, gidPortRemotePort=gidPortRemotePort, sUniCktAdminSrcMaxBurst=sUniCktAdminSrcMaxBurst, lightStreamEOM=lightStreamEOM, lsConfig=lsConfig, edgeCellDelayVariance=edgeCellDelayVariance, cardName=cardName, gidPortService=gidPortService, gidSyncNbrsLoading=gidSyncNbrsLoading, ls1InfoDataCellCapacity=ls1InfoDataCellCapacity, edgeMaxFrameSize=edgeMaxFrameSize, tcsPrimarySwitch=tcsPrimarySwitch, tsuPortErrL2UnconfigVcis=tsuPortErrL2UnconfigVcis, frCktOperSrcMaxRate=frCktOperSrcMaxRate, sUniCktOperSrcMaxRate=sUniCktOperSrcMaxRate, ls1InfoMeasuredBaudRate=ls1InfoMeasuredBaudRate, sUniCktInfoLastAtmLocation=sUniCktInfoLastAtmLocation, lsLcFsuIntervalTable=lsLcFsuIntervalTable, ffCktInfoIfIndex=ffCktInfoIfIndex, frameRelayDlciToSwCLP0Cells=frameRelayDlciToSwCLP0Cells, ffCktAdminSrcInsuredRate=ffCktAdminSrcInsuredRate, edgePortXmtOctets=edgePortXmtOctets, lwmaTrapNumber=lwmaTrapNumber, npInfoIPExcessRate=npInfoIPExcessRate, lsEdgeCpuWorkloadEntry=lsEdgeCpuWorkloadEntry, lightStreamATM=lightStreamATM, portInfo=portInfo, lwmaEntry=lwmaEntry, trunkPortRcvShortFrames=trunkPortRcvShortFrames, clc1InfoAdminLoopMode=clc1InfoAdminLoopMode, mcEndptLclInstance=mcEndptLclInstance, lsLcIntervalAvgPermits=lsLcIntervalAvgPermits, tsuErrFutQMsgDropLastVci=tsuErrFutQMsgDropLastVci, ndNbrState=ndNbrState, mcEndptCfgTable=mcEndptCfgTable, sUniCktInfoLastAtmErr=sUniCktInfoLastAtmErr, lsLcIntervalMaxBwAlloc=lsLcIntervalMaxBwAlloc, lsEdgePortToSwMsgLenTable=lsEdgePortToSwMsgLenTable, ffCktSrcNode=ffCktSrcNode, mmaConfigAuthor=mmaConfigAuthor, ffCktOperSrcInsuredRate=ffCktOperSrcInsuredRate, ndRedundancyGroup=ndRedundancyGroup, ms1InfoLinkUtilization=ms1InfoLinkUtilization, sUniCktOperSrcInsuredRate=sUniCktOperSrcInsuredRate, ndSwudStatsInputErrors=ndSwudStatsInputErrors, ms1InfoOperCableLength=ms1InfoOperCableLength, gidIpAddressTable=gidIpAddressTable, edgeMeteringBurstSize=edgeMeteringBurstSize, ms1InfoTable=ms1InfoTable, npInfoIPCommittedRate=npInfoIPCommittedRate, tluAAL5XsumErrs=tluAAL5XsumErrs, gidSyncNbrsExistent=gidSyncNbrsExistent, lightStreamVliPortCtlTable=lightStreamVliPortCtlTable, clc1InfoLcDebugLevel=clc1InfoLcDebugLevel, mcEndptLastAtmLocation=mcEndptLastAtmLocation, frCktOperSrcInsuredBurst=frCktOperSrcInsuredBurst, ndSwudGroup=ndSwudGroup)
mibBuilder.exportSymbols("LIGHTSTREAM-MIB", sUniCktAdminDestMaxRate=sUniCktAdminDestMaxRate, portInfoName=portInfoName, lsFrameRelayDlciStatEntry=lsFrameRelayDlciStatEntry, ls1InfoEntry=ls1InfoEntry, npInfoIfIndex=npInfoIfIndex, mmaTrapFilter=mmaTrapFilter, lsNpCpuWorkloadEvents=lsNpCpuWorkloadEvents, fsuCellDropLastCellHdr=fsuCellDropLastCellHdr, clc1InfoAdminScramble=clc1InfoAdminScramble, gidClientID=gidClientID, sUniCktAdminDestInsuredBurst=sUniCktAdminDestInsuredBurst, pidAdminStatus=pidAdminStatus, lwmaIndex=lwmaIndex, gidProcessID=gidProcessID, ffCktInfoDownstreamState=ffCktInfoDownstreamState, tsuDropEventEntry=tsuDropEventEntry, mmaConfigHost=mmaConfigHost, gidIOClientMsgBuffersActive=gidIOClientMsgBuffersActive, lightStreamBridgeFilterParameterEntry=lightStreamBridgeFilterParameterEntry, lsTrunkStatistics=lsTrunkStatistics, frameForwardFrSwCLP1Cells=frameForwardFrSwCLP1Cells, ndNbrChannel=ndNbrChannel, collectInfo=collectInfo, lsLcIntervalPeakCells=lsLcIntervalPeakCells, ndClientGroup=ndClientGroup, chassisEthernetIpMask=chassisEthernetIpMask, sUniCktInfo=sUniCktInfo, trunkPortXmtUnderflows=trunkPortXmtUnderflows, mmaInfo=mmaInfo, frameRelayDlciFrSwCLP1Cells=frameRelayDlciFrSwCLP1Cells, ms1InfoLcDebugLevel=ms1InfoLcDebugLevel, switchCellDgRejectEvents=switchCellDgRejectEvents, ls1InfoOperCsuType=ls1InfoOperCsuType, lsIR=lsIR, gidClientLinkAnnouncementsRx=gidClientLinkAnnouncementsRx, tcsReadyLight=tcsReadyLight, clc1InfoAdminControlBandwidthSize=clc1InfoAdminControlBandwidthSize, gidNbrEntry=gidNbrEntry, ms1InfoAdminControlBandwidthSize=ms1InfoAdminControlBandwidthSize, collectStart=collectStart, frCktInfo=frCktInfo, frameRelayDlciToSwCLP0Frames=frameRelayDlciToSwCLP0Frames, lightStreamVliPortCtlEntry=lightStreamVliPortCtlEntry, ffCktOperDestInsuredBurst=ffCktOperDestInsuredBurst, pvcSrcNode=pvcSrcNode, edgeToPortMsgLenBinIndex=edgeToPortMsgLenBinIndex, gidIpEntryEIA=gidIpEntryEIA, ndInternalDebugLevel=ndInternalDebugLevel, lightStreamBridgePortEntry=lightStreamBridgePortEntry, pidOperStatus=pidOperStatus, lwmaTrapCliAlias=lwmaTrapCliAlias, irRoutingPathGenFailedNoResources=irRoutingPathGenFailedNoResources, collectInterval=collectInterval, fsuDropEventWatermarkIndex=fsuDropEventWatermarkIndex, tcsFaultLight=tcsFaultLight, oc3InfoEntry=oc3InfoEntry, sUniCktOperDestInsuredRate=sUniCktOperDestInsuredRate, sUniCktInfoDataCellsRequired=sUniCktInfoDataCellsRequired, ndOutputCells=ndOutputCells, fsuPortXmtCellsTable=fsuPortXmtCellsTable, LightStreamUpToMaxAge=LightStreamUpToMaxAge, ndInternalGroup=ndInternalGroup, mcEndptStatus=mcEndptStatus, tcsVccVoltage=tcsVccVoltage, pidEntry=pidEntry, ndNbrEntry=ndNbrEntry, collectTable=collectTable, tcsEntry=tcsEntry, portInfoEntry=portInfoEntry, LightStreamFilterAction=LightStreamFilterAction, mcEndptServiceType=mcEndptServiceType, gidSyncNbrsExchange=gidSyncNbrsExchange, ndSwudStatsTable=ndSwudStatsTable, lightStreamBrStaticGoToCardSize=lightStreamBrStaticGoToCardSize, npInfoAdminOperTrigger=npInfoAdminOperTrigger, lsTrunkPortStatEntry=lsTrunkPortStatEntry, lsLcStatistics=lsLcStatistics, clc1InfoAdminClock=clc1InfoAdminClock, cardTable=cardTable, chassisSecondaryIpAddr=chassisSecondaryIpAddr, ffCktInfoCallIDOutgoing=ffCktInfoCallIDOutgoing, edgeToSwMsgLenBinIndex=edgeToSwMsgLenBinIndex, collectEntry=collectEntry, oc3InfoReceiveSignalDetect=oc3InfoReceiveSignalDetect, ffCktOperDestIfIndex=ffCktOperDestIfIndex, tcsWarnTemp2=tcsWarnTemp2, frCktOperDestInsuredRate=frCktOperDestInsuredRate, frCktOperDestDlci=frCktOperDestDlci, frameForwardToSwCLP0Frames=frameForwardToSwCLP0Frames, mmaNumNameTable=mmaNumNameTable, npInfoIPCommittedBurst=npInfoIPCommittedBurst, irRoutingPathGenSuccess=irRoutingPathGenSuccess, lightStreamBrFilterParmPort=lightStreamBrFilterParmPort, edgePortXmtNUcastPkts=edgePortXmtNUcastPkts, ls1InfoLinkUtilization=ls1InfoLinkUtilization, sUniCktEntry=sUniCktEntry, clc1InfoAdminOperTrigger=clc1InfoAdminOperTrigger, lsNpCpuWorkloadTable=lsNpCpuWorkloadTable, fsuDropEventPortIndex=fsuDropEventPortIndex, ndClientEIA=ndClientEIA, frCktOperSecondaryScale=frCktOperSecondaryScale, collectDBIndex=collectDBIndex, gidIpAddressDatabaseSize=gidIpAddressDatabaseSize, lightStreamBrFilterTokenValue=lightStreamBrFilterTokenValue, fsuXmtCellEvents=fsuXmtCellEvents, sUniCktInfoNetToUniCallID=sUniCktInfoNetToUniCallID, lcStatCardIndex=lcStatCardIndex, mcEndptDownstreamState=mcEndptDownstreamState, ndAdminN=ndAdminN, ms1InfoAdminCableLength=ms1InfoAdminCableLength, ffCktAdminDestInsuredBurst=ffCktAdminDestInsuredBurst, trunkPortRcvRuns=trunkPortRcvRuns, gidIONbrMsgBuffersFree=gidIONbrMsgBuffersFree, lcStatPortIndex=lcStatPortIndex, gidGeneralGroup=gidGeneralGroup, fsuPayloadLrcErrs=fsuPayloadLrcErrs, sUniCktInfoUniToNetState=sUniCktInfoUniToNetState, pidTable=pidTable, tsuPortErrL2UnconfigLastVci=tsuPortErrL2UnconfigLastVci, collectIndex=collectIndex, tcsSwitchFaultMaskB=tcsSwitchFaultMaskB, lsPortProtocols=lsPortProtocols, ndClientType=ndClientType, ms1InfoOperScramble=ms1InfoOperScramble, caMaxIntervalPermitLimit=caMaxIntervalPermitLimit, gidIpAddressGroup=gidIpAddressGroup, npInfoIPExcessBurst=npInfoIPExcessBurst, ms1InfoAdminOperTrigger=ms1InfoAdminOperTrigger, frCktSrcDlci=frCktSrcDlci, mmaDbActive=mmaDbActive, pvcUserDataPerCell=pvcUserDataPerCell, mcEndptEntry=mcEndptEntry, lsEdgeStatTable=lsEdgeStatTable, lsFrameRelayDlciStatTable=lsFrameRelayDlciStatTable, ffCktAdminDestNode=ffCktAdminDestNode, frProvMiTable=frProvMiTable, ls1InfoIfIndex=ls1InfoIfIndex, edgeToPortMsgLenMsgs=edgeToPortMsgLenMsgs, edgePortRcvL3XsumErrs=edgePortRcvL3XsumErrs, npInfoTable=npInfoTable, lsLcIntervalMinBwAlloc=lsLcIntervalMinBwAlloc, cardInfo=cardInfo, ls1InfoDataCellAvailable=ls1InfoDataCellAvailable, gidClientPathsGenerated=gidClientPathsGenerated, edgePortXmtUcastPkts=edgePortXmtUcastPkts, tcsFCPrimarySwitchA=tcsFCPrimarySwitchA, ndNbrTable=ndNbrTable, sUniCktOperDestIfIndex=sUniCktOperDestIfIndex, frameForwardStatPortIndex=frameForwardStatPortIndex, edgeStatTsuHoldQCells=edgeStatTsuHoldQCells, frameForwardFrSwCLP0Frames=frameForwardFrSwCLP0Frames, tcsIndex=tcsIndex, cardStatusWord=cardStatusWord, edgePortRcvSmplPktSize=edgePortRcvSmplPktSize, frCktAdminDestDlci=frCktAdminDestDlci, sUniCktSrcIfIndex=sUniCktSrcIfIndex, lsEdgeStatEntry=lsEdgeStatEntry, fsuXmtCellsPriorityIndex=fsuXmtCellsPriorityIndex, gidPortTable=gidPortTable, clc1InfoLcAutoEnable=clc1InfoLcAutoEnable, ls1InfoAdminLoopMode=ls1InfoAdminLoopMode, ms1InfoAdminScramble=ms1InfoAdminScramble, lsNpCpuWorkloadIndex=lsNpCpuWorkloadIndex, gidIOGroup=gidIOGroup, lsNpCpuWorkloadEntry=lsNpCpuWorkloadEntry, lightStreamBridgeFilterParameterTable=lightStreamBridgeFilterParameterTable, LightStreamDLCI=LightStreamDLCI, edgeCallSetupBackoff=edgeCallSetupBackoff, tsuPortErrL1UnconfigVcis=tsuPortErrL1UnconfigVcis, lsLcIntervalPortIndex=lsLcIntervalPortIndex, tcsPowerSupplyA=tcsPowerSupplyA, collectDBInstance=collectDBInstance, sUniCktAdminSrcMaxRate=sUniCktAdminSrcMaxRate, lightStreamBridgeFilterTable=lightStreamBridgeFilterTable, sUniCktAdminSrcInsuredBurst=sUniCktAdminSrcInsuredBurst, tsuDropEventPortIndex=tsuDropEventPortIndex, lwmaTrapOnOffState=lwmaTrapOnOffState, cardLccSoftwareVersion=cardLccSoftwareVersion, frameForwardToSwCLP1Cells=frameForwardToSwCLP1Cells, portInfoSpecific=portInfoSpecific, gidIOClientMsgBuffersFree=gidIOClientMsgBuffersFree, trunkPortStatIndex=trunkPortStatIndex, lightStreamBrPortDefaultAction=lightStreamBrPortDefaultAction, ndClientRegistration=ndClientRegistration, frCktOperDestMaxRate=frCktOperDestMaxRate, ndLCChannel=ndLCChannel, congestionAvoidance=congestionAvoidance, ls1InfoOperDataBandwidthSize=ls1InfoOperDataBandwidthSize, sUniCktInfoTable=sUniCktInfoTable, gidEventGenericGinfoEventsDelivered=gidEventGenericGinfoEventsDelivered, frCktOperDestMaxBurst=frCktOperDestMaxBurst, gidLineCardSlot=gidLineCardSlot, lightStreamVliPortWorkGroupPort=lightStreamVliPortWorkGroupPort, lwmaTrapLevel=lwmaTrapLevel, ms1InfoAdminDataBandwidthSize=ms1InfoAdminDataBandwidthSize, frCktAdminDestMaxRate=frCktAdminDestMaxRate, edgePrincipalScale=edgePrincipalScale, tsuErrFutQCellDrops=tsuErrFutQCellDrops, ffCktAdminDestMaxRate=ffCktAdminDestMaxRate, frCktSrcNode=frCktSrcNode, frCktOperSrcMaxBurst=frCktOperSrcMaxBurst, frCktInfoUpstreamState=frCktInfoUpstreamState, sUniCktOperDestVCI=sUniCktOperDestVCI, cardLcSoftwareVersion=cardLcSoftwareVersion, frProvMiNetInterfaceType=frProvMiNetInterfaceType, frameRelayDlciToSwCLP1Cells=frameRelayDlciToSwCLP1Cells, trunkPortXmtCells=trunkPortXmtCells, mcEndptLclCktid=mcEndptLclCktid, chassisDefaultIpRouter=chassisDefaultIpRouter, lsTrunkCpuWorkloadTable=lsTrunkCpuWorkloadTable, lightStreamBrFilterTokenType=lightStreamBrFilterTokenType, gidNbrCount=gidNbrCount, tsuFreeCells=tsuFreeCells, ls1InfoAdminControlBandwidthSize=ls1InfoAdminControlBandwidthSize, ffCktInfoCallIDIncoming=ffCktInfoCallIDIncoming, mmaTrapLog=mmaTrapLog, pvcStatus=pvcStatus, caMinIntervalPermitLimit=caMinIntervalPermitLimit, ffCktOperDestMaxBurst=ffCktOperDestMaxBurst, edgePortXmtSmplPktSize=edgePortXmtSmplPktSize, frCktOperDestNode=frCktOperDestNode, lsStatistics=lsStatistics, pvcSrcPvcId=pvcSrcPvcId, frProvMiUserMonitoredEvents=frProvMiUserMonitoredEvents, frameRelayDlciToSwCLP1Frames=frameRelayDlciToSwCLP1Frames, frameForwardFrSwCLP0Cells=frameForwardFrSwCLP0Cells, gidPortBW0=gidPortBW0, lightStreamBrFilterId=lightStreamBrFilterId, cellVciStatVciIndex=cellVciStatVciIndex, lightStreamBrFilterParmFilterId=lightStreamBrFilterParmFilterId, gidNbrSyncEvents=gidNbrSyncEvents, edgePortRcvOctets=edgePortRcvOctets, clc1InfoOperControlBandwidthSize=clc1InfoOperControlBandwidthSize, fsuDropEventTable=fsuDropEventTable, gidNbrNewLinkAnnouncementsRx=gidNbrNewLinkAnnouncementsRx, ls1InfoLcDebugLevel=ls1InfoLcDebugLevel, portTransmission=portTransmission, ffCktAdminSrcInsuredBurst=ffCktAdminSrcInsuredBurst, edgePortFsuCksmErrMsgs=edgePortFsuCksmErrMsgs, collectStatus=collectStatus, gidLinkGroup=gidLinkGroup, pvcSrcInsuredBurst=pvcSrcInsuredBurst, sUniCktOperDestNode=sUniCktOperDestNode, frCktInfoLastAtmLocation=frCktInfoLastAtmLocation, lsLcIntervalMinPermits=lsLcIntervalMinPermits, clc1InfoAdminDataBandwidthSize=clc1InfoAdminDataBandwidthSize, mmaTrapLanguage=mmaTrapLanguage, edgeToPortMsgLenPortIndex=edgeToPortMsgLenPortIndex, edgePortCksmErrLastVci=edgePortCksmErrLastVci, clc1InfoOperClock=clc1InfoOperClock, gidIpEntryAdvNP=gidIpEntryAdvNP, LightStreamValidation=LightStreamValidation, chassisInfo=chassisInfo, oc3InfoTransmitSafetySwitch=oc3InfoTransmitSafetySwitch)
mibBuilder.exportSymbols("LIGHTSTREAM-MIB", pvcInfo=pvcInfo, ls1InfoAdminXmitBaudRate=ls1InfoAdminXmitBaudRate, frCktInfoDownstreamState=frCktInfoDownstreamState, mcEndptUpstreamState=mcEndptUpstreamState, frameRelayDlciToSwDiscardCells=frameRelayDlciToSwDiscardCells, cardEntry=cardEntry, ms1InfoAdminProtocol=ms1InfoAdminProtocol, mmaCollectionSpace=mmaCollectionSpace, mmaPID=mmaPID, tcsTcsVoltage=tcsTcsVoltage, ndNbrCount=ndNbrCount, frCktInfoLclLMI=frCktInfoLclLMI, npInfoIPNCircuits=npInfoIPNCircuits, lsTrunkWorkloadEvents=lsTrunkWorkloadEvents, ls1InfoOperRcvBaudRate=ls1InfoOperRcvBaudRate, collectDataBase=collectDataBase, ffCktAdminSrcMaxBurst=ffCktAdminSrcMaxBurst, fsuSharedFreeCells=fsuSharedFreeCells, tsuDropEventWatermarkIndex=tsuDropEventWatermarkIndex, mcEndptLastAtmErr=mcEndptLastAtmErr, tcsCardType=tcsCardType, ndClientSubType=ndClientSubType, lsUtStatistics=lsUtStatistics, tcsWarnTemp1=tcsWarnTemp1, ffCktAdminPrinBwType=ffCktAdminPrinBwType, ndGeneralGroup=ndGeneralGroup, cellVciToSwCLP1Cells=cellVciToSwCLP1Cells)
