#
# PySNMP MIB module DECHUB900-CHASSIS-MIB-V3-0 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DECHUB900-CHASSIS-MIB-V3-0
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, iso, ObjectIdentity, IpAddress, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, ModuleIdentity, Gauge32, Integer32, MibIdentifier, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "ObjectIdentity", "IpAddress", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "ModuleIdentity", "Gauge32", "Integer32", "MibIdentifier", "Counter32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
decMIBextension = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18))
decHub900 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11))
mgmtAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1))
mgmtAgentVersion1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1))
chasSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1))
chasEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2))
chasBackplane = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3))
chasSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4))
chasConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5))
chasPort = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6))
chasPowerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7))
chasPowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8))
chasPowerSink = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9))
chasEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10))
chasLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11))
chasLigo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13))
chasPatching = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14))
chasNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNumSlots.setStatus('mandatory')
chasNumSlotsOccupied = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNumSlotsOccupied.setStatus('mandatory')
chasMaxExtendedSlots = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasMaxExtendedSlots.setStatus('mandatory')
chasExtendedSlotsOccupied = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasExtendedSlotsOccupied.setStatus('mandatory')
chasPopulationChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPopulationChanges.setStatus('mandatory')
chasSlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: chasSlotTable.setStatus('mandatory')
chasSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasSlotIndex"))
if mibBuilder.loadTexts: chasSlotEntry.setStatus('mandatory')
chasSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotIndex.setStatus('mandatory')
chasSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleType.setStatus('mandatory')
chasSlotLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotLastChange.setStatus('mandatory')
chasSlotModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleDescr.setStatus('mandatory')
chasSlotModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleVersion.setStatus('mandatory')
chasSlotModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleSerialNumber.setStatus('mandatory')
chasSlotModuleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("min", 1), ("max", 2), ("system", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleSize.setStatus('mandatory')
chasSlotModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("disabled", 2), ("insufficient-power", 3), ("fatal-error", 4), ("non-fatal-error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleOperStatus.setStatus('mandatory')
chasSlotModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3), ("reset", 4), ("restore-to-defaults", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSlotModuleAdminStatus.setStatus('mandatory')
chasSlotModuleNonFatalError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSlotModuleNonFatalError.setStatus('mandatory')
chasSlotResetAll = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("resetAllModules", 2), ("resetAllModulesAndMgr", 3), ("resetAllModulesToDefaults", 4), ("resetAllModulesAndMgrToDefaults", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSlotResetAll.setStatus('mandatory')
chasEntityChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityChanges.setStatus('mandatory')
chasEntityTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: chasEntityTable.setStatus('mandatory')
chasEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasEntitySlotNumber"), (0, "DECHUB900-CHASSIS-MIB-V3-0", "chasEntityIndex"))
if mibBuilder.loadTexts: chasEntityEntry.setStatus('mandatory')
chasEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityIndex.setStatus('mandatory')
chasEntityFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityFunction.setStatus('deprecated')
chasEntityObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityObjectID.setStatus('deprecated')
chasEntityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityDescr.setStatus('deprecated')
chasEntityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityVersion.setStatus('deprecated')
chasEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("enable", 2), ("disable", 3), ("reset", 4), ("programload", 5), ("test", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasEntityAdminStatus.setStatus('deprecated')
chasEntityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("testing", 3), ("operational", 4), ("resetInProgress", 5), ("warning", 6), ("nonFatalError", 7), ("fatalError", 8), ("loading", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityOperStatus.setStatus('deprecated')
chasEntityTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityTimeStamp.setStatus('deprecated')
chasEntityParty = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityParty.setStatus('deprecated')
chasEntityCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityCommunity.setStatus('mandatory')
chasEntityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityIpAddress.setStatus('mandatory')
chasEntityComAccessRights = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("traps", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityComAccessRights.setStatus('mandatory')
chasEntityAccessMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityAccessMethod.setStatus('mandatory')
chasEntitySlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntitySlotNumber.setStatus('mandatory')
chasEntitySrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntitySrcIpAddress.setStatus('mandatory')
chasEntitySrcSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntitySrcSubnetMask.setStatus('mandatory')
chasEntityAccessCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityAccessCharacteristics.setStatus('mandatory')
chasEntityAccessLoadTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: chasEntityAccessLoadTable.setStatus('mandatory')
chasEntityAccessLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasEntityAccessLoadSlot"))
if mibBuilder.loadTexts: chasEntityAccessLoadEntry.setStatus('mandatory')
chasEntityAccessLoadSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityAccessLoadSlot.setStatus('mandatory')
chasEntityAccessLoadMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasEntityAccessLoadMethod.setStatus('mandatory')
chasEntityChangeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: chasEntityChangeTable.setStatus('mandatory')
chasEntityChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasEntityChangeSlot"))
if mibBuilder.loadTexts: chasEntityChangeEntry.setStatus('mandatory')
chasEntityChangeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityChangeSlot.setStatus('mandatory')
chasEntityChangeCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntityChangeCounter.setStatus('mandatory')
chasBackplaneTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: chasBackplaneTable.setStatus('mandatory')
chasBackplaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasBackplaneIndex"))
if mibBuilder.loadTexts: chasBackplaneEntry.setStatus('mandatory')
chasBackplaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBackplaneIndex.setStatus('mandatory')
chasBackplaneDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBackplaneDescr.setStatus('mandatory')
chasBackplaneRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBackplaneRev.setStatus('mandatory')
chasBackplaneNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBackplaneNumSlots.setStatus('mandatory')
chasSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: chasSegmentTable.setStatus('mandatory')
chasSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasSegmentIndex"))
if mibBuilder.loadTexts: chasSegmentEntry.setStatus('mandatory')
chasSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSegmentIndex.setStatus('mandatory')
chasSegmentName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegmentName.setStatus('mandatory')
chasSegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fddi", 1), ("ethernet", 2), ("tr", 3), ("atm", 4), ("async", 5), ("pebus", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegmentType.setStatus('mandatory')
chasSegmentSubtypeSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegmentSubtypeSelect.setStatus('mandatory')
chasSegmentEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegmentEntryStatus.setStatus('mandatory')
chasSegSubtypeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: chasSegSubtypeTable.setStatus('mandatory')
chasSegSubtypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasSegSubtypeIndex"))
if mibBuilder.loadTexts: chasSegSubtypeEntry.setStatus('mandatory')
chasSegSubtypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSegSubtypeIndex.setStatus('mandatory')
chasSegSubtypeFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("thinwire", 2), ("imb", 3), ("imb2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegSubtypeFlavor.setStatus('mandatory')
chasSegSubtypeSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegSubtypeSpeed.setStatus('mandatory')
chasSegSubtypeEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegSubtypeEntryStatus.setStatus('mandatory')
chasSegDefVNbusState = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSegDefVNbusState.setStatus('mandatory')
chasChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasChassisSerialNumber.setStatus('mandatory')
chasConnChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasConnChanges.setStatus('mandatory')
chasConnTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: chasConnTable.setStatus('mandatory')
chasConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasConnIndex"))
if mibBuilder.loadTexts: chasConnEntry.setStatus('mandatory')
chasConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasConnIndex.setStatus('mandatory')
chasConnSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasConnSegment.setStatus('mandatory')
chasConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasConnPort.setStatus('mandatory')
chasConnNextPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasConnNextPortIndex.setStatus('mandatory')
chasConnEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasConnEntryStatus.setStatus('mandatory')
chasPortLastChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortLastChange.setStatus('mandatory')
chasPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: chasPortTable.setStatus('mandatory')
chasPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPortIndex"))
if mibBuilder.loadTexts: chasPortEntry.setStatus('mandatory')
chasPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortIndex.setStatus('mandatory')
chasPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortSlot.setStatus('mandatory')
chasPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPortName.setStatus('mandatory')
chasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fddi", 1), ("ethernet", 2), ("tr", 3), ("atm", 4), ("async", 5), ("pebus", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortType.setStatus('mandatory')
chasPortSubtypeSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPortSubtypeSelect.setStatus('mandatory')
chasPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("broken", 1), ("unconfigured", 2), ("configured", 3), ("testing", 4), ("connected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortOperStatus.setStatus('mandatory')
chasPortDescrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 3), )
if mibBuilder.loadTexts: chasPortDescrTable.setStatus('mandatory')
chasPortDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 3, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPortDescrIndex"))
if mibBuilder.loadTexts: chasPortDescrEntry.setStatus('mandatory')
chasPortDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortDescrIndex.setStatus('mandatory')
chasPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortDescr.setStatus('mandatory')
chasPortSubtypeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 4), )
if mibBuilder.loadTexts: chasPortSubtypeTable.setStatus('mandatory')
chasPortSubtypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 4, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPortSubtypeIndex"))
if mibBuilder.loadTexts: chasPortSubtypeEntry.setStatus('mandatory')
chasPortSubtypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortSubtypeIndex.setStatus('mandatory')
chasPortSubtypePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortSubtypePortIndex.setStatus('mandatory')
chasPortSubtypeFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("default", 1), ("thinwireEndStation", 2), ("thinwireRepeater", 3), ("imbEndStation", 4), ("imbRepeater", 5), ("fddiA", 6), ("fddiB", 7), ("fddiM", 8), ("fddiS", 9), ("thinwireFlexRepeater", 10), ("imbFlexRepeater", 11), ("imb2EndStation", 12), ("atmMaster", 13), ("atmSlave", 14), ("imb2Repeater", 15), ("imb2FlexRepeater", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortSubtypeFlavor.setStatus('mandatory')
chasPortSubtypeSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPortSubtypeSpeed.setStatus('mandatory')
chasPowerConfigMaxSupplies = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigMaxSupplies.setStatus('mandatory')
chasPowerConfigNumSupplies = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigNumSupplies.setStatus('mandatory')
chasPowerConfigChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigChanges.setStatus('mandatory')
chasPowerConfigRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundantPowerAvailable", 1), ("redundantPowerNotAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigRedundancyState.setStatus('mandatory')
chasPowerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5), )
if mibBuilder.loadTexts: chasPowerConfigTable.setStatus('mandatory')
chasPowerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPowerConfigIndex"))
if mibBuilder.loadTexts: chasPowerConfigEntry.setStatus('mandatory')
chasPowerConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigIndex.setStatus('mandatory')
chasPowerConfigDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigDescr.setStatus('mandatory')
chasPowerConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPowerConfigAdminStatus.setStatus('mandatory')
chasPowerConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("disabled", 3), ("bad", 4), ("warning", 5), ("standby", 6), ("engaged", 7), ("redundant", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigOperStatus.setStatus('mandatory')
chasPowerConfigHealthText = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigHealthText.setStatus('mandatory')
chasPowerConfigWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigWarnings.setStatus('mandatory')
chasPowerConfigFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 7, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerConfigFailures.setStatus('mandatory')
chasPowerSourceTotalPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSourceTotalPowerAvailable.setStatus('mandatory')
chasPowerSourceTotalCurrentAvailable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSourceTotalCurrentAvailable.setStatus('mandatory')
chasPowerSourceTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 3), )
if mibBuilder.loadTexts: chasPowerSourceTable.setStatus('mandatory')
chasPowerSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 3, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPowerSourceSupplyIndex"), (0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPowerSourceIndex"))
if mibBuilder.loadTexts: chasPowerSourceEntry.setStatus('mandatory')
chasPowerSourceSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSourceSupplyIndex.setStatus('mandatory')
chasPowerSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSourceIndex.setStatus('mandatory')
chasPowerSourceNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSourceNominalVoltage.setStatus('mandatory')
chasPowerSourcePower = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSourcePower.setStatus('mandatory')
chasPowerSinkTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1), )
if mibBuilder.loadTexts: chasPowerSinkTable.setStatus('mandatory')
chasPowerSinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPowerSinkSlotIndex"), (0, "DECHUB900-CHASSIS-MIB-V3-0", "chasPowerSinkIndex"))
if mibBuilder.loadTexts: chasPowerSinkEntry.setStatus('mandatory')
chasPowerSinkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSinkSlotIndex.setStatus('mandatory')
chasPowerSinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSinkIndex.setStatus('mandatory')
chasPowerSinkVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSinkVoltage.setStatus('mandatory')
chasPowerSinkWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSinkWattage.setStatus('mandatory')
chasPowerSinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inUse", 2), ("notInUse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSinkOperStatus.setStatus('mandatory')
chasEnvironChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironChanges.setStatus('mandatory')
chasEnvironTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2), )
if mibBuilder.loadTexts: chasEnvironTable.setStatus('mandatory')
chasEnvironEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasEnvironSlotIndex"), (0, "DECHUB900-CHASSIS-MIB-V3-0", "chasEnvironSensorIndex"))
if mibBuilder.loadTexts: chasEnvironEntry.setStatus('mandatory')
chasEnvironSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironSlotIndex.setStatus('mandatory')
chasEnvironSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironSensorIndex.setStatus('mandatory')
chasEnvironSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("temperature", 2), ("fan", 3), ("humidity", 4), ("dc-power", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironSensor.setStatus('mandatory')
chasEnvironAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasEnvironAdminStatus.setStatus('mandatory')
chasEnvironOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("bad", 2), ("warning", 3), ("good", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironOperStatus.setStatus('mandatory')
chasEnvironWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironWarnings.setStatus('mandatory')
chasEnvironFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvironFailures.setStatus('mandatory')
chasLoadTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1), )
if mibBuilder.loadTexts: chasLoadTable.setStatus('mandatory')
chasLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasLoadSlotIndex"))
if mibBuilder.loadTexts: chasLoadEntry.setStatus('mandatory')
chasLoadSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLoadSlotIndex.setStatus('mandatory')
chasLoadAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start-read", 2), ("start-write", 3), ("cancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasLoadAdminStatus.setStatus('mandatory')
chasLoadOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLoadOperStatus.setStatus('mandatory')
chasLoadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasLoadFileName.setStatus('mandatory')
chasLoadIpHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasLoadIpHostAddr.setStatus('mandatory')
chasLoadDevSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLoadDevSpecific.setStatus('mandatory')
chasLoadEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasLoadEntryStatus.setStatus('mandatory')
chasLigoNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoNumEntries.setStatus('mandatory')
chasLigoTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 2), )
if mibBuilder.loadTexts: chasLigoTable.setStatus('mandatory')
chasLigoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 2, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasLigoIndex"))
if mibBuilder.loadTexts: chasLigoEntry.setStatus('mandatory')
chasLigoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoIndex.setStatus('mandatory')
chasLigoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSlot.setStatus('mandatory')
chasLigoType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fddi", 2), ("ethernet", 3), ("atm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoType.setStatus('mandatory')
chasLigoSubtypeSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasLigoSubtypeSelect.setStatus('mandatory')
chasLigoSubtypeNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypeNumEntries.setStatus('mandatory')
chasLigoSubtypeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4), )
if mibBuilder.loadTexts: chasLigoSubtypeTable.setStatus('mandatory')
chasLigoSubtypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasLigoSubtypeIndex"))
if mibBuilder.loadTexts: chasLigoSubtypeEntry.setStatus('mandatory')
chasLigoSubtypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypeIndex.setStatus('mandatory')
chasLigoSubtypeLigoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypeLigoIndex.setStatus('mandatory')
chasLigoSubtypePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypePortMask.setStatus('mandatory')
chasLigoSubtypeLabelIndexMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypeLabelIndexMask.setStatus('mandatory')
chasLigoSubtypeFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("fddiRoot-Primary", 1), ("fddiRoot-Secondary", 2), ("fddiNonroot", 3), ("fddiTrunk-A-Primary", 4), ("fddiTrunk-A-Secondary", 5), ("fddiTrunk-B-Primary", 6), ("fddiTrunk-B-Secondary", 7), ("fddiTrunk-AB-Primary", 8), ("fddiTrunk-AB-Secondary", 9), ("fddiStump-Primary", 10), ("fddiStump-Secondary", 11), ("ethernet-front", 12), ("ethernet-back", 13), ("fddiNonroot-M", 14), ("fddiNonroot-S", 15), ("fddiNonroot-SM", 16), ("atm-front", 17), ("atm-back", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypeFlavor.setStatus('mandatory')
chasLigoSubtypePortMaskV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypePortMaskV2.setStatus('mandatory')
chasLigoSubtypeLabelIndexMaskV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoSubtypeLabelIndexMaskV2.setStatus('mandatory')
chasLigoLabelNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoLabelNumEntries.setStatus('mandatory')
chasLigoLabelTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 6), )
if mibBuilder.loadTexts: chasLigoLabelTable.setStatus('mandatory')
chasLigoLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 6, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasLigoLabelIndex"))
if mibBuilder.loadTexts: chasLigoLabelEntry.setStatus('mandatory')
chasLigoLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoLabelIndex.setStatus('mandatory')
chasLigoLabelString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 13, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLigoLabelString.setStatus('mandatory')
chasRingPatching = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasRingPatching.setStatus('mandatory')
chasRingMemberTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 2), )
if mibBuilder.loadTexts: chasRingMemberTable.setStatus('mandatory')
chasRingMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 2, 1), ).setIndexNames((0, "DECHUB900-CHASSIS-MIB-V3-0", "chasRingMemberSlot"))
if mibBuilder.loadTexts: chasRingMemberEntry.setStatus('mandatory')
chasRingMemberSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRingMemberSlot.setStatus('mandatory')
chasRingMemberSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRingMemberSegment.setStatus('mandatory')
chasRingMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRingMemberStatus.setStatus('mandatory')
chasRingMemberSegmentMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 1, 1, 1, 14, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRingMemberSegmentMask.setStatus('mandatory')
mibBuilder.exportSymbols("DECHUB900-CHASSIS-MIB-V3-0", chasEntityTable=chasEntityTable, chasSlotResetAll=chasSlotResetAll, chasLoadDevSpecific=chasLoadDevSpecific, chasEntityIndex=chasEntityIndex, chasPowerConfig=chasPowerConfig, chasSlotModuleOperStatus=chasSlotModuleOperStatus, chasEntityIpAddress=chasEntityIpAddress, chasLigoNumEntries=chasLigoNumEntries, chasLigoTable=chasLigoTable, chasPowerSourceIndex=chasPowerSourceIndex, chasPowerSourceTable=chasPowerSourceTable, chasLigoSubtypeFlavor=chasLigoSubtypeFlavor, chasLoadEntryStatus=chasLoadEntryStatus, chasPowerConfigChanges=chasPowerConfigChanges, chasSegSubtypeEntryStatus=chasSegSubtypeEntryStatus, chasLigoSubtypeSelect=chasLigoSubtypeSelect, mgmtAgent=mgmtAgent, chasEnvironSensor=chasEnvironSensor, chasPowerSinkVoltage=chasPowerSinkVoltage, chasBackplaneEntry=chasBackplaneEntry, chasSlotIndex=chasSlotIndex, chasPowerSinkEntry=chasPowerSinkEntry, chasSlot=chasSlot, chasPowerSinkSlotIndex=chasPowerSinkSlotIndex, chasEntitySrcSubnetMask=chasEntitySrcSubnetMask, decHub900=decHub900, chasPortDescr=chasPortDescr, chasEnvironEntry=chasEnvironEntry, chasPortSubtypeFlavor=chasPortSubtypeFlavor, chasPowerConfigFailures=chasPowerConfigFailures, chasEntityAccessCharacteristics=chasEntityAccessCharacteristics, chasEntityChangeSlot=chasEntityChangeSlot, chasRingPatching=chasRingPatching, chasEntityCommunity=chasEntityCommunity, chasEnvironSensorIndex=chasEnvironSensorIndex, chasLoadSlotIndex=chasLoadSlotIndex, chasConnPort=chasConnPort, chasConnIndex=chasConnIndex, chasRingMemberEntry=chasRingMemberEntry, chasPowerConfigEntry=chasPowerConfigEntry, chasEntityAccessLoadEntry=chasEntityAccessLoadEntry, chasConnChanges=chasConnChanges, chasLoadAdminStatus=chasLoadAdminStatus, chasLigoSubtypeIndex=chasLigoSubtypeIndex, chasSegSubtypeSpeed=chasSegSubtypeSpeed, chasSegmentType=chasSegmentType, chasLoadIpHostAddr=chasLoadIpHostAddr, chasBackplaneTable=chasBackplaneTable, chasSegSubtypeFlavor=chasSegSubtypeFlavor, chasPowerConfigTable=chasPowerConfigTable, chasLoadOperStatus=chasLoadOperStatus, chasLigoLabelEntry=chasLigoLabelEntry, chasLigoSlot=chasLigoSlot, chasRingMemberStatus=chasRingMemberStatus, chasEntityOperStatus=chasEntityOperStatus, chasPowerSourcePower=chasPowerSourcePower, chasSegmentEntryStatus=chasSegmentEntryStatus, chasSegmentSubtypeSelect=chasSegmentSubtypeSelect, chasLigoSubtypePortMask=chasLigoSubtypePortMask, chasEntityAccessLoadSlot=chasEntityAccessLoadSlot, chasNumSlotsOccupied=chasNumSlotsOccupied, chasPortSubtypePortIndex=chasPortSubtypePortIndex, chasEntityChangeEntry=chasEntityChangeEntry, chasLigoType=chasLigoType, chasLigoLabelString=chasLigoLabelString, chasSlotModuleVersion=chasSlotModuleVersion, chasLigoSubtypeLabelIndexMask=chasLigoSubtypeLabelIndexMask, ema=ema, chasPowerSource=chasPowerSource, chasBackplaneIndex=chasBackplaneIndex, chasLoadEntry=chasLoadEntry, chasPortTable=chasPortTable, chasPowerSinkOperStatus=chasPowerSinkOperStatus, chasEntityObjectID=chasEntityObjectID, chasEntityDescr=chasEntityDescr, chasPortEntry=chasPortEntry, chasEntitySrcIpAddress=chasEntitySrcIpAddress, chasEntityFunction=chasEntityFunction, chasLigoLabelTable=chasLigoLabelTable, chasEntityAccessLoadMethod=chasEntityAccessLoadMethod, chasBackplaneRev=chasBackplaneRev, chasLigoSubtypeEntry=chasLigoSubtypeEntry, chasEntityAdminStatus=chasEntityAdminStatus, mgmtAgentVersion1=mgmtAgentVersion1, chasSegment=chasSegment, chasLoadTable=chasLoadTable, chasLigoLabelIndex=chasLigoLabelIndex, chasPortSlot=chasPortSlot, chasEntity=chasEntity, chasPowerSinkIndex=chasPowerSinkIndex, chasSegmentTable=chasSegmentTable, chasPowerConfigRedundancyState=chasPowerConfigRedundancyState, chasPortDescrTable=chasPortDescrTable, chasPortName=chasPortName, chasRingMemberSegmentMask=chasRingMemberSegmentMask, dec=dec, chasSlotTable=chasSlotTable, chasEntityAccessMethod=chasEntityAccessMethod, chasSlotModuleNonFatalError=chasSlotModuleNonFatalError, chasSegSubtypeIndex=chasSegSubtypeIndex, chasPowerConfigIndex=chasPowerConfigIndex, chasChassisSerialNumber=chasChassisSerialNumber, chasPowerConfigOperStatus=chasPowerConfigOperStatus, chasRingMemberTable=chasRingMemberTable, chasEntityChanges=chasEntityChanges, chasPortIndex=chasPortIndex, chasPowerSourceNominalVoltage=chasPowerSourceNominalVoltage, chasLigoSubtypeLigoIndex=chasLigoSubtypeLigoIndex, chasEntityVersion=chasEntityVersion, chasPortSubtypeSpeed=chasPortSubtypeSpeed, chasPowerSinkTable=chasPowerSinkTable, chasLigoSubtypeTable=chasLigoSubtypeTable, chasEnvironAdminStatus=chasEnvironAdminStatus, chasPowerConfigDescr=chasPowerConfigDescr, chasPowerSourceTotalPowerAvailable=chasPowerSourceTotalPowerAvailable, chasPortDescrIndex=chasPortDescrIndex, chasConnEntryStatus=chasConnEntryStatus, chasExtendedSlotsOccupied=chasExtendedSlotsOccupied, chasPatching=chasPatching, chasSlotModuleType=chasSlotModuleType, chasPortSubtypeSelect=chasPortSubtypeSelect, chasPortOperStatus=chasPortOperStatus, chasConnEntry=chasConnEntry, chasLigoSubtypeNumEntries=chasLigoSubtypeNumEntries, chasSlotModuleDescr=chasSlotModuleDescr, chasPortSubtypeEntry=chasPortSubtypeEntry, chasSegDefVNbusState=chasSegDefVNbusState, chasLoadFileName=chasLoadFileName, chasLigoSubtypeLabelIndexMaskV2=chasLigoSubtypeLabelIndexMaskV2, chasLigoSubtypePortMaskV2=chasLigoSubtypePortMaskV2, chasLigoEntry=chasLigoEntry, chasPortType=chasPortType, chasEnvironFailures=chasEnvironFailures, chasPowerConfigAdminStatus=chasPowerConfigAdminStatus, chasMaxExtendedSlots=chasMaxExtendedSlots, chasSegmentIndex=chasSegmentIndex, chasSegmentName=chasSegmentName, chasPowerSourceTotalCurrentAvailable=chasPowerSourceTotalCurrentAvailable, chasLigo=chasLigo, chasBackplane=chasBackplane, chasSlotLastChange=chasSlotLastChange, chasBackplaneNumSlots=chasBackplaneNumSlots, chasPortDescrEntry=chasPortDescrEntry, chasEntityEntry=chasEntityEntry, chasBackplaneDescr=chasBackplaneDescr, chasSegSubtypeEntry=chasSegSubtypeEntry, chasPopulationChanges=chasPopulationChanges, chasPowerConfigHealthText=chasPowerConfigHealthText, chasRingMemberSegment=chasRingMemberSegment, chasPowerSourceEntry=chasPowerSourceEntry, chasLoad=chasLoad, chasEntityParty=chasEntityParty, chasPowerSinkWattage=chasPowerSinkWattage, chasPortLastChange=chasPortLastChange, chasEntityChangeTable=chasEntityChangeTable, chasPowerConfigNumSupplies=chasPowerConfigNumSupplies, chasConnSegment=chasConnSegment, chasSegSubtypeTable=chasSegSubtypeTable, chasEnvironTable=chasEnvironTable, chasPowerConfigMaxSupplies=chasPowerConfigMaxSupplies, chasSlotModuleAdminStatus=chasSlotModuleAdminStatus, chassis=chassis, chasPowerSourceSupplyIndex=chasPowerSourceSupplyIndex, chasPowerSink=chasPowerSink, chasEnvironOperStatus=chasEnvironOperStatus, chasSlotEntry=chasSlotEntry, chasLigoIndex=chasLigoIndex, chasSlotModuleSize=chasSlotModuleSize, decMIBextension=decMIBextension, chasConnNextPortIndex=chasConnNextPortIndex, chasEnviron=chasEnviron, chasSlotModuleSerialNumber=chasSlotModuleSerialNumber, chasLigoLabelNumEntries=chasLigoLabelNumEntries, chasEnvironSlotIndex=chasEnvironSlotIndex, chasEnvironWarnings=chasEnvironWarnings, chasEntityChangeCounter=chasEntityChangeCounter, chasConnTable=chasConnTable, chasPowerConfigWarnings=chasPowerConfigWarnings, chasRingMemberSlot=chasRingMemberSlot, chasNumSlots=chasNumSlots, chasEntityTimeStamp=chasEntityTimeStamp, chasConfig=chasConfig, chasPort=chasPort, chasEntitySlotNumber=chasEntitySlotNumber, chasEntityAccessLoadTable=chasEntityAccessLoadTable, chasEnvironChanges=chasEnvironChanges, chasPortSubtypeTable=chasPortSubtypeTable, chasSegmentEntry=chasSegmentEntry, chasPortSubtypeIndex=chasPortSubtypeIndex, chasEntityComAccessRights=chasEntityComAccessRights)
