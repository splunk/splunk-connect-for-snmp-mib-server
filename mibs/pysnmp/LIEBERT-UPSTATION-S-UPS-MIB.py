#
# PySNMP MIB module LIEBERT-UPSTATION-S-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIEBERT-UPSTATION-S-UPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, ModuleIdentity, IpAddress, Counter64, Integer32, Counter32, Unsigned32, NotificationType, enterprises, MibIdentifier, TimeTicks, NotificationType, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "ModuleIdentity", "IpAddress", "Counter64", "Integer32", "Counter32", "Unsigned32", "NotificationType", "enterprises", "MibIdentifier", "TimeTicks", "NotificationType", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
emerson = MibIdentifier((1, 3, 6, 1, 4, 1, 476))
liebertCorp = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1))
liebertUps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1))
luExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1))
luExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 2))
luPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 3))
luCore = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1))
lcUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1))
lcUpsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentManufacturer.setStatus('optional')
lcUpsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsIdentModel.setStatus('optional')
lcUpsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSoftwareVersion.setStatus('optional')
lcUpsIdentSpecific = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSpecific.setStatus('optional')
lcUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2))
lcUpsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatTimeRemaining.setStatus('optional')
lcUpsBatTemperature = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatTemperature.setStatus('optional')
lcUpsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatVoltage.setStatus('optional')
lcUpsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatCurrent.setStatus('optional')
lcUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3))
lcUpsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputFrequency.setStatus('optional')
lcUpsInputBrownOuts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputBrownOuts.setStatus('optional')
lcUpsInputBlackOuts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputBlackOuts.setStatus('optional')
lcUpsInputTransients = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputTransients.setStatus('optional')
lcUpsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputNumLines.setStatus('optional')
lcUpsInputTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6), )
if mibBuilder.loadTexts: lcUpsInputTable.setStatus('optional')
lcUpsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsInputLine"))
if mibBuilder.loadTexts: lcUpsInputEntry.setStatus('optional')
lcUpsInputLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputLine.setStatus('optional')
lcUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputVoltage.setStatus('optional')
lcUpsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputCurrent.setStatus('optional')
lcUpsInputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputVA.setStatus('optional')
lcUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4))
lcUpsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputFrequency.setStatus('optional')
lcUpsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputLoad.setStatus('optional')
lcUpsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputNumLines.setStatus('optional')
lcUpsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4), )
if mibBuilder.loadTexts: lcUpsOutputTable.setStatus('optional')
lcUpsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsOutputLine"))
if mibBuilder.loadTexts: lcUpsOutputEntry.setStatus('optional')
lcUpsOutputLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputLine.setStatus('optional')
lcUpsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputVoltage.setStatus('optional')
lcUpsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputCurrent.setStatus('optional')
lcUpsOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputVA.setStatus('optional')
lcUpsInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5))
lcUpsInverterStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInverterStatus.setStatus('optional')
lcUpsInverterTemp = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInverterTemp.setStatus('optional')
lcUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6))
lcUpsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarms.setStatus('optional')
lcUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: lcUpsAlarmTable.setStatus('optional')
lcUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsAlarmId"))
if mibBuilder.loadTexts: lcUpsAlarmEntry.setStatus('optional')
lcUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmId.setStatus('optional')
lcUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmDescr.setStatus('optional')
lcUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmTime.setStatus('optional')
lcUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3))
lcUpsAlarmLowBatteryWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 1))
lcUpsAlarmLowBatteryShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 2))
lcUpsAlarmUtilFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 3))
lcUpsAlarmOverTempWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 4))
lcUpsAlarmOutputOverloadWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 6))
lcUpsAlarmInputOverVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 8))
lcUpsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 9))
lcUpsAlarmOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 10))
lcUpsAlarmUpsOff = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 12))
lcUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7))
lcUpsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("start", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsTestBattery.setStatus('optional')
lcUpsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("sysFailure", 5), ("notSupported", 6), ("inhibited", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsTestBatteryStatus.setStatus('optional')
lcUpsTestDiag = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("start", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsTestDiag.setStatus('optional')
lcUpsTestDiagStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("sysFailure", 5), ("notSupported", 6), ("inhibited", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsTestDiagStatus.setStatus('optional')
lcUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8))
lcUpsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOffDelay.setStatus('optional')
lcUpsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOnDelay.setStatus('optional')
lcUpsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOffTrapDelay.setStatus('optional')
lcUpsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOnTrapDelay.setStatus('optional')
lcUpsControlUnixShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlUnixShutdownDelay.setStatus('optional')
lcUpsControlUnixShutdownTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlUnixShutdownTrapDelay.setStatus('optional')
lcUpsControlCancelCommands = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlCancelCommands.setStatus('optional')
lcUpsControlRebootAgentDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlRebootAgentDelay.setStatus('optional')
lcUpsNominal = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9))
lcUpsNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVoltage.setStatus('optional')
lcUpsNominalInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalInputVoltage.setStatus('optional')
lcUpsNominalOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVA.setStatus('optional')
lcUpsNominalOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputWatts.setStatus('optional')
lcUpsNominalOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputFreq.setStatus('optional')
lcUpsNominalInputFreq = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalInputFreq.setStatus('optional')
lcUpsSwitchedReceptacles = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12))
lcUpsSwitchedReceptMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsSwitchedReceptMaxNum.setStatus('optional')
lcUpsSwitchedReceptTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2), )
if mibBuilder.loadTexts: lcUpsSwitchedReceptTable.setStatus('optional')
lcUpsSwitchedReceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsSwitchedReceptIndex"))
if mibBuilder.loadTexts: lcUpsSwitchedReceptEntry.setStatus('optional')
lcUpsSwitchedReceptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsSwitchedReceptIndex.setStatus('optional')
lcUpsSwitchedReceptOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOnDelay.setStatus('optional')
lcUpsSwitchedReceptOnTrapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOnTrapDelay.setStatus('optional')
lcUpsSwitchedReceptOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOffDelay.setStatus('optional')
lcUpsSwitchedReceptOffTrapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOffTrapDelay.setStatus('optional')
lcUpsSwitchedReceptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsSwitchedReceptStatus.setStatus('optional')
lcUpsSwitchedReceptLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptLabel.setStatus('optional')
lcUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11))
lcUpsOverloadWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOnBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,3)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsLowBatteryWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,4)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUtilPowerFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,6)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUtilPowerRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,7)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsInputOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,8)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverTempWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,9)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,11)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,12)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOffWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,13)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,14)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOnWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,15)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUnixShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,16)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUnixShutdownWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,17)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsReceptOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,18)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsSwitchedReceptIndex"))
lcUpsReceptOffWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,19)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsSwitchedReceptIndex"))
lcUpsReceptOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,20)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsSwitchedReceptIndex"))
lcUpsReceptOnWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,21)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPSTATION-S-UPS-MIB", "lcUpsSwitchedReceptIndex"))
luUPStationS = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2))
lsUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 1))
lsUpsIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsIdentFirmwareVersion.setStatus('optional')
lsUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 6))
lsUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 6, 1))
lsUpsAlarmCheckAirFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 6, 1, 1))
lsUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 11))
lsUpsCheckAirFilterTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lsUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 12))
lsUpsConfigBypassInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsConfigBypassInstalled.setStatus('optional')
lsUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13))
lsUpsOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsOnBypass.setStatus('optional')
lsUpsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassFrequency.setStatus('optional')
lsUpsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassNumLines.setStatus('optional')
lsUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4), )
if mibBuilder.loadTexts: lsUpsBypassTable.setStatus('optional')
lsUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-S-UPS-MIB", "lsUpsBypassLine"))
if mibBuilder.loadTexts: lsUpsBypassEntry.setStatus('optional')
lsUpsBypassLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassLine.setStatus('optional')
lsUpsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassVoltage.setStatus('optional')
lsUpsBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassCurrent.setStatus('optional')
mibBuilder.exportSymbols("LIEBERT-UPSTATION-S-UPS-MIB", lcUpsOnBatteryTrap=lcUpsOnBatteryTrap, lcUpsNominal=lcUpsNominal, lcUpsOutputFrequency=lcUpsOutputFrequency, luPrivate=luPrivate, lcUpsBatTemperature=lcUpsBatTemperature, lsUpsBypassCurrent=lsUpsBypassCurrent, lcUpsOutputEntry=lcUpsOutputEntry, lcUpsAlarmConditions=lcUpsAlarmConditions, lcUpsSwitchedReceptOnTrapDelay=lcUpsSwitchedReceptOnTrapDelay, lcUpsOutput=lcUpsOutput, lcUpsTestBatteryStatus=lcUpsTestBatteryStatus, lsUpsBypassTable=lsUpsBypassTable, lcUpsInputTable=lcUpsInputTable, lsUpsTraps=lsUpsTraps, lcUpsOutputOffTrap=lcUpsOutputOffTrap, lcUpsInputVoltage=lcUpsInputVoltage, lsUpsBypassEntry=lsUpsBypassEntry, lcUpsInputVA=lcUpsInputVA, lcUpsAlarmTime=lcUpsAlarmTime, lcUpsReceptOnWarningTrap=lcUpsReceptOnWarningTrap, lcUpsBatTimeRemaining=lcUpsBatTimeRemaining, lcUpsReceptOnTrap=lcUpsReceptOnTrap, lcUpsOutputOnTrap=lcUpsOutputOnTrap, lcUpsOutputCurrent=lcUpsOutputCurrent, lcUpsAlarmInputOverVoltage=lcUpsAlarmInputOverVoltage, lsUpsConfig=lsUpsConfig, lcUpsAlarmUpsOff=lcUpsAlarmUpsOff, lcUpsTest=lcUpsTest, lsUpsBypass=lsUpsBypass, lsUpsAlarm=lsUpsAlarm, lcUpsSwitchedReceptIndex=lcUpsSwitchedReceptIndex, lcUpsSwitchedReceptOffDelay=lcUpsSwitchedReceptOffDelay, lcUpsSwitchedReceptStatus=lcUpsSwitchedReceptStatus, lcUpsUtilPowerFailedTrap=lcUpsUtilPowerFailedTrap, lcUpsTraps=lcUpsTraps, lcUpsTestDiagStatus=lcUpsTestDiagStatus, lcUpsInputNumLines=lcUpsInputNumLines, lcUpsControl=lcUpsControl, lcUpsInverter=lcUpsInverter, lcUpsSwitchedReceptMaxNum=lcUpsSwitchedReceptMaxNum, lcUpsControlOutputOnTrapDelay=lcUpsControlOutputOnTrapDelay, luExperimental=luExperimental, lcUpsSwitchedReceptTable=lcUpsSwitchedReceptTable, lcUpsOutputOnWarningTrap=lcUpsOutputOnWarningTrap, lcUpsAlarmDescr=lcUpsAlarmDescr, lcUpsTestBattery=lcUpsTestBattery, lcUpsNominalOutputVA=lcUpsNominalOutputVA, lsUpsBypassVoltage=lsUpsBypassVoltage, lcUpsOutputLine=lcUpsOutputLine, lcUpsOutputLoad=lcUpsOutputLoad, emerson=emerson, lcUpsInputLine=lcUpsInputLine, lcUpsInputFrequency=lcUpsInputFrequency, lcUpsAlarmLowBatteryWarning=lcUpsAlarmLowBatteryWarning, lcUpsNominalOutputVoltage=lcUpsNominalOutputVoltage, lcUpsSwitchedReceptOffTrapDelay=lcUpsSwitchedReceptOffTrapDelay, liebertCorp=liebertCorp, lcUpsControlUnixShutdownDelay=lcUpsControlUnixShutdownDelay, lcUpsInput=lcUpsInput, lcUpsAlarmUtilFailed=lcUpsAlarmUtilFailed, lcUpsSwitchedReceptOnDelay=lcUpsSwitchedReceptOnDelay, liebertUps=liebertUps, lsUpsIdentFirmwareVersion=lsUpsIdentFirmwareVersion, lcUpsAlarmEntry=lcUpsAlarmEntry, lcUpsAlarm=lcUpsAlarm, lsUpsBypassLine=lsUpsBypassLine, lcUpsAlarmTrap=lcUpsAlarmTrap, lcUpsIdentSoftwareVersion=lcUpsIdentSoftwareVersion, lcUpsBattery=lcUpsBattery, lsUpsAlarmCheckAirFilter=lsUpsAlarmCheckAirFilter, lcUpsIdentModel=lcUpsIdentModel, lcUpsAlarmOutputOverloadWarning=lcUpsAlarmOutputOverloadWarning, lcUpsInputTransients=lcUpsInputTransients, lcUpsOutputTable=lcUpsOutputTable, lcUpsOutputOffWarningTrap=lcUpsOutputOffWarningTrap, lcUpsInverterTemp=lcUpsInverterTemp, lsUpsBypassNumLines=lsUpsBypassNumLines, lcUpsSwitchedReceptLabel=lcUpsSwitchedReceptLabel, lcUpsBatCurrent=lcUpsBatCurrent, lcUpsOverTempWarningTrap=lcUpsOverTempWarningTrap, lcUpsAlarmLowBatteryShutdown=lcUpsAlarmLowBatteryShutdown, lcUpsNominalOutputWatts=lcUpsNominalOutputWatts, luExtensions=luExtensions, lcUpsUnixShutdownWarningTrap=lcUpsUnixShutdownWarningTrap, lsUpsAlarmConditions=lsUpsAlarmConditions, lcUpsSwitchedReceptacles=lcUpsSwitchedReceptacles, lcUpsIdentSpecific=lcUpsIdentSpecific, lcUpsNominalOutputFreq=lcUpsNominalOutputFreq, lcUpsControlOutputOffTrapDelay=lcUpsControlOutputOffTrapDelay, lcUpsOutputVA=lcUpsOutputVA, lcUpsInputOverVoltageTrap=lcUpsInputOverVoltageTrap, lcUpsControlOutputOffDelay=lcUpsControlOutputOffDelay, lcUpsSwitchedReceptEntry=lcUpsSwitchedReceptEntry, lcUpsIdentManufacturer=lcUpsIdentManufacturer, lcUpsControlUnixShutdownTrapDelay=lcUpsControlUnixShutdownTrapDelay, lcUpsControlCancelCommands=lcUpsControlCancelCommands, lcUpsAlarmTable=lcUpsAlarmTable, lcUpsInputCurrent=lcUpsInputCurrent, lcUpsReceptOffTrap=lcUpsReceptOffTrap, lsUpsIdent=lsUpsIdent, lcUpsInverterStatus=lcUpsInverterStatus, lcUpsAlarmBatteryBad=lcUpsAlarmBatteryBad, lsUpsBypassFrequency=lsUpsBypassFrequency, lcUpsNominalInputVoltage=lcUpsNominalInputVoltage, lcUpsNominalInputFreq=lcUpsNominalInputFreq, lcUpsAlarmOnBattery=lcUpsAlarmOnBattery, lcUpsIdent=lcUpsIdent, luUPStationS=luUPStationS, lcUpsOutputNumLines=lcUpsOutputNumLines, lcUpsReceptOffWarningTrap=lcUpsReceptOffWarningTrap, lcUpsAlarmOverTempWarning=lcUpsAlarmOverTempWarning, lcUpsControlOutputOnDelay=lcUpsControlOutputOnDelay, lcUpsOutputVoltage=lcUpsOutputVoltage, lcUpsAlarms=lcUpsAlarms, luCore=luCore, lcUpsAlarmId=lcUpsAlarmId, lsUpsCheckAirFilterTrap=lsUpsCheckAirFilterTrap, lcUpsOverloadWarningTrap=lcUpsOverloadWarningTrap, lsUpsOnBypass=lsUpsOnBypass, lcUpsUnixShutdownTrap=lcUpsUnixShutdownTrap, lcUpsLowBatteryWarningTrap=lcUpsLowBatteryWarningTrap, lcUpsInputBrownOuts=lcUpsInputBrownOuts, lcUpsInputBlackOuts=lcUpsInputBlackOuts, lsUpsConfigBypassInstalled=lsUpsConfigBypassInstalled, lcUpsTestDiag=lcUpsTestDiag, lcUpsUtilPowerRestoredTrap=lcUpsUtilPowerRestoredTrap, lcUpsBatVoltage=lcUpsBatVoltage, lcUpsControlRebootAgentDelay=lcUpsControlRebootAgentDelay, lcUpsInputEntry=lcUpsInputEntry)
