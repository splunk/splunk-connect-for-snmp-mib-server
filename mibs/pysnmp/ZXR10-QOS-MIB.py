#
# PySNMP MIB module ZXR10-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXR10-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:42:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, enterprises, ModuleIdentity, Integer32, Counter32, Counter64, NotificationType, IpAddress, Bits, MibIdentifier, Unsigned32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "enterprises", "ModuleIdentity", "Integer32", "Counter32", "Counter64", "NotificationType", "IpAddress", "Bits", "MibIdentifier", "Unsigned32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxr10 = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3))
zxr10protocol = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101))
zxr10qos = ModuleIdentity((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6))
if mibBuilder.loadTexts: zxr10qos.setLastUpdated('0610101111Z')
if mibBuilder.loadTexts: zxr10qos.setOrganization('ZXR10 ROS OAM group')
qosPQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2))
qosCQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 3))
qosCBQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4))
qosWREDconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5))
qosWFQconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6))
qosCARconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7))
qosIntfCarStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8))
class DisplayString(OctetString):
    pass

class QosCirMatchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 36, 37))
    namedValues = NamedValues(("match-localport", 3), ("match-acl", 4), ("match-precedence", 5), ("match-dscp", 6), ("match-mpls-exp", 7), ("match-802dot1p", 8), ("match-vlanId", 9), ("match-qos-group", 36), ("match-address-MAc", 37))

class QosCirAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 9, 10))
    namedValues = NamedValues(("drop", 0), ("continue", 1), ("transmit", 2), ("set-prec-continue", 3), ("set-prec-transmit", 4), ("set-dscp-continue", 5), ("set-dscp-transmit", 6), ("set-exp-continue", 9), ("set-exp-transmit", 10))

class QosCBQCarAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 6, 10))
    namedValues = NamedValues(("drop", 0), ("transmit", 2), ("set-prec-transmit", 4), ("set-dscp-transmit", 6), ("set-exp-transmit", 10))

class QosPQMatchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 37, 36))
    namedValues = NamedValues(("match-default", 1), ("match-interface", 3), ("match-acl", 4), ("match-precedence", 5), ("match-dscp", 6), ("match-mpls-exp", 7), ("match-802dot1p", 8), ("match-vlanId", 9), ("match-address-MAc", 37), ("match-qos-group", 36))

class QosPQQueueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("high", 0), ("medium", 1), ("normal", 2), ("low", 3))

class QosCMAPMatchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 37, 19, 21, 36))
    namedValues = NamedValues(("match-not", 1), ("match-acl", 4), ("match-precedence", 5), ("match-dscp", 6), ("match-mpls-exp", 7), ("match-802dot1p", 8), ("match-vlanId", 9), ("match-address-MAc", 37), ("match-any", 19), ("match-classmap", 21), ("match-qos-group", 36))

class TrafficDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2))
    namedValues = NamedValues(("output", 2))

class QueueingBandwidthUnits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("percentage", 1), ("kbps", 2))

class EntryStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

qosModuleStart = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosModuleStart.setStatus('current')
qosFreeCirIndex = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFreeCirIndex.setStatus('current')
qosInputCirIfTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2), )
if mibBuilder.loadTexts: qosInputCirIfTable.setStatus('current')
qosInputCirIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZXR10-QOS-MIB", "qosInputCirIndex"))
if mibBuilder.loadTexts: qosInputCirIfEntry.setStatus('current')
qosInputCirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInputCirIndex.setStatus('current')
qosInputCirMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 2), QosCirMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirMatchType.setStatus('current')
qosInputCirMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirMatchValue.setStatus('current')
qosInputCirCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirCir.setStatus('current')
qosInputCirNormalBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirNormalBurstRate.setStatus('current')
qosInputCirPir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirPir.setStatus('current')
qosInputCirMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirMaxBurstRate.setStatus('current')
qosInputCirConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 8), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirConformAction.setStatus('current')
qosInputCirConformValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 9), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirConformValue.setStatus('current')
qosInputCirExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 10), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirExceedAction.setStatus('current')
qosInputCirExceedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 11), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirExceedValue.setStatus('current')
qosInputCirViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 12), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirViolateAction.setStatus('current')
qosInputCirViolateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 13), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirViolateValue.setStatus('current')
qosInputCirRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 14), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirRowStatus.setStatus('current')
qosInputCirDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 2, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInputCirDescription.setStatus('current')
qosInputCirIfTableLastchange = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInputCirIfTableLastchange.setStatus('current')
qosOutputCirIfTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4), )
if mibBuilder.loadTexts: qosOutputCirIfTable.setStatus('current')
qosOutputCirIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZXR10-QOS-MIB", "qosOutputCirIndex"))
if mibBuilder.loadTexts: qosOutputCirIfEntry.setStatus('current')
qosOutputCirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosOutputCirIndex.setStatus('current')
qosOutputCirMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 2), QosCirMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirMatchType.setStatus('current')
qosOutputCirMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirMatchValue.setStatus('current')
qosOutputCirCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirCir.setStatus('current')
qosOutputCirNormalBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirNormalBurstRate.setStatus('current')
qosOutputCirPir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirPir.setStatus('current')
qosOutputCirMaxBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirMaxBurstRate.setStatus('current')
qosOutputCirConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 8), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirConformAction.setStatus('current')
qosOutputCirConformValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 9), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirConformValue.setStatus('current')
qosOutputCirExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 10), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirExceedAction.setStatus('current')
qosOutputCirExceedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 11), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirExceedValue.setStatus('current')
qosOutputCirViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 12), QosCirAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirViolateAction.setStatus('current')
qosOutputCirViolateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 13), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirViolateValue.setStatus('current')
qosOutputCirRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 14), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirRowStatus.setStatus('current')
qosOutputCirDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 4, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosOutputCirDescription.setStatus('current')
qosOutputCirIfTableLastchange = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosOutputCirIfTableLastchange.setStatus('current')
qosPriorityQueueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1), )
if mibBuilder.loadTexts: qosPriorityQueueCfgTable.setStatus('current')
qosPriorityQueueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qosPriorityQueueIndex"))
if mibBuilder.loadTexts: qosPriorityQueueCfgEntry.setStatus('current')
qosPriorityQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueIndex.setStatus('current')
qosPriorityQueueItemTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueItemTotal.setStatus('current')
qosPriorityQueueDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 3), QosPQQueueType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueDefault.setStatus('current')
qosPriorityQueueLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitHigh.setStatus('current')
qosPriorityQueueLimitMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitMedium.setStatus('current')
qosPriorityQueueLimitNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitNormal.setStatus('current')
qosPriorityQueueLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueLimitLow.setStatus('current')
qosPriorityQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 1, 1, 8), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityQueueRowStatus.setStatus('current')
qosPriorityQueueCfgTableLastchange = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueCfgTableLastchange.setStatus('current')
qosPriorityQueueItemTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3), )
if mibBuilder.loadTexts: qosPriorityQueueItemTable.setStatus('current')
qosPriorityQueueItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qosPriorityQueueIndex"), (0, "ZXR10-QOS-MIB", "qosPriorityQueueItemIndex"))
if mibBuilder.loadTexts: qosPriorityQueueItemEntry.setStatus('current')
qosPriorityQueueItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityQueueItemIndex.setStatus('current')
qosPriorityQueueItemMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 2), QosPQMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemMatchType.setStatus('current')
qosPriorityQueueItemMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemMatchValue.setStatus('current')
qosPriorityQueueItemQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 4), QosPQQueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemQueueNum.setStatus('current')
qosPriorityQueueItemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemRowStatus.setStatus('current')
qosPriorityQueueItemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 3, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityQueueItemDescription.setStatus('current')
qosPriorityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4), )
if mibBuilder.loadTexts: qosPriorityGroupTable.setStatus('current')
qosPriorityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosPriorityGroupEntry.setStatus('current')
qosPriorityGroupifname = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriorityGroupifname.setStatus('current')
qosPriorityGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityGroupNum.setStatus('current')
qosPriorityGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 2, 4, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPriorityGroupRowStatus.setStatus('current')
qosCBQosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1), )
if mibBuilder.loadTexts: qosCBQosServicePolicyTable.setStatus('current')
qosCBQosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosCBQosServicePolicyEntry.setStatus('current')
qosCbQosPolicyifname = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCbQosPolicyifname.setStatus('current')
qosCbQosPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 2), TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyDirection.setStatus('current')
qosCbQosServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosServicePolicyName.setStatus('current')
qosCbQosServicePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 1, 1, 4), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosServicePolicyRowStatus.setStatus('current')
qosCbQosPolicyMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2), )
if mibBuilder.loadTexts: qosCbQosPolicyMapCfgTable.setStatus('current')
qosCbQosPolicyMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"))
if mibBuilder.loadTexts: qosCbQosPolicyMapCfgEntry.setStatus('current')
qoscbQosPMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoscbQosPMapIndex.setStatus('current')
qoscbQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qoscbQosPolicyMapName.setStatus('current')
qosCbQosPolicyMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyMapRowStatus.setStatus('current')
qoscbQosPolicyMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qoscbQosPolicyMapDescription.setStatus('current')
qosCbQosClassMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3), )
if mibBuilder.loadTexts: qosCbQosClassMapCfgTable.setStatus('current')
qosCbQosClassMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosClassMapCfgEntry.setStatus('current')
qoscbQosCMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoscbQosCMapIndex.setStatus('current')
qosCbQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosClassMapName.setStatus('current')
qosCbQosClassMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosClassMapRowStatus.setStatus('current')
qoscbQosClassMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qoscbQosClassMapDescription.setStatus('current')
qosCbQosCMAPMatchCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4), )
if mibBuilder.loadTexts: qosCbQosCMAPMatchCfgTable.setStatus('current')
qosCbQosCMAPMatchCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"), (0, "ZXR10-QOS-MIB", "qosCbQosCMAPMatchIndex"))
if mibBuilder.loadTexts: qosCbQosCMAPMatchCfgEntry.setStatus('current')
qosCbQosCMAPMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchIndex.setStatus('current')
qosCbQosCMAPMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 2), QosCMAPMatchType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchType.setStatus('current')
qosCbQosCMAPMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchValue.setStatus('current')
qosCbQosCMAPMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 4, 1, 4), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosCMAPMatchRowStatus.setStatus('current')
qosCbQosPolicyClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5), )
if mibBuilder.loadTexts: qosCbQosPolicyClassCfgTable.setStatus('current')
qosCbQosPolicyClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosPolicyClassCfgEntry.setStatus('current')
qosCbQosPolicyClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyClassName.setStatus('current')
qosCbQosPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 5, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPolicyClassRowStatus.setStatus('current')
qosCbQosqueueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6), )
if mibBuilder.loadTexts: qosCbQosqueueCfgTable.setStatus('current')
qosCbQosqueueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosqueueCfgEntry.setStatus('current')
qosCbQosQueueingCfgPriorityQueueNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6, 1, 1), QosPQQueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosQueueingCfgPriorityQueueNo.setStatus('current')
qosCbQosqueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 6, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosqueueRowStatus.setStatus('current')
qosCbQosbandwidthCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7), )
if mibBuilder.loadTexts: qosCbQosbandwidthCfgTable.setStatus('current')
qosCbQosbindwidthCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosbindwidthCfgEntry.setStatus('current')
qosCbQosQueueingCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosQueueingCfgBandwidth.setStatus('current')
qosCbQosQueueingCfgBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1, 2), QueueingBandwidthUnits()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosQueueingCfgBandwidthUnits.setStatus('current')
qosCbQosActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 7, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosActionRowStatus.setStatus('current')
qosCbQosPoliceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8), )
if mibBuilder.loadTexts: qosCbQosPoliceCfgTable.setStatus('current')
qosCbQosPoliceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1), ).setIndexNames((0, "ZXR10-QOS-MIB", "qoscbQosPMapIndex"), (0, "ZXR10-QOS-MIB", "qoscbQosCMapIndex"))
if mibBuilder.loadTexts: qosCbQosPoliceCfgEntry.setStatus('current')
qosCbQosPoliceCfgCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setUnits('Kilobits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgCir.setStatus('current')
qosCbQosPoliceCfgBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgBurstSize.setStatus('current')
qosCbQosPoliceCfgPir = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2000000))).setUnits('Kilobits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgPir.setStatus('current')
qosCbQosPoliceCfgExtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 512000000))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgExtBurstSize.setStatus('current')
qosCbQosPoliceCfgConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 5), QosCBQCarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgConformAction.setStatus('current')
qosCbQosPoliceCfgConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 6), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgConformSetValue.setStatus('current')
qosCbQosPoliceCfgExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 7), QosCBQCarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgExceedAction.setStatus('current')
qosCbQosPoliceCfgExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 8), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgExceedSetValue.setStatus('current')
qosCbQosPoliceCfgViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 9), QosCBQCarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgViolateAction.setStatus('current')
qosCbQosPoliceCfgViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 10), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgViolateSetValue.setStatus('current')
qosCbQosPoliceCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 4, 8, 1, 11), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosCbQosPoliceCfgRowStatus.setStatus('current')
qosWREDprecedenceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1), )
if mibBuilder.loadTexts: qosWREDprecedenceCfgTable.setStatus('current')
qosWREDprecedenceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZXR10-QOS-MIB", "qosREDCfgPreValue"))
if mibBuilder.loadTexts: qosWREDprecedenceCfgEntry.setStatus('current')
qosREDCfgPreValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgPreValue.setStatus('current')
qosREDprecedenceCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDprecedenceCfgMinThreshold.setStatus('current')
qosREDprecedenceCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDprecedenceCfgMaxThreshold.setStatus('current')
qosREDprecedenceCfgPktDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDprecedenceCfgPktDropProb.setStatus('current')
qosREDCfgprecedenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 1, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgprecedenceRowStatus.setStatus('current')
qosWREDweightCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2), )
if mibBuilder.loadTexts: qosWREDweightCfgTable.setStatus('current')
qosWREDweightCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosWREDweightCfgEntry.setStatus('current')
qosREDCfgweightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgweightValue.setStatus('current')
qosREDCfgweightRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 5, 2, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosREDCfgweightRowStatus.setStatus('current')
qosWFQCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1), )
if mibBuilder.loadTexts: qosWFQCfgTable.setStatus('current')
qosWFQCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosWFQCfgEntry.setStatus('current')
qosWFQCfgTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosWFQCfgTotalQueueNum.setStatus('current')
qosWFQCfgQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosWFQCfgQueueLimit.setStatus('current')
qosWFQCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 6, 1, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosWFQCfgRowStatus.setStatus('current')
qosIfTraffStatInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1), )
if mibBuilder.loadTexts: qosIfTraffStatInfoTable.setStatus('current')
qosIfTraffStatInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qosIfTraffStatInfoEntry.setStatus('current')
qosIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfName.setStatus('current')
qosIntfInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInUtilization.setStatus('current')
qosIntfInCarTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTotalPackets.setStatus('current')
qosIntfInCarTranPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTranPackets.setStatus('current')
qosIntfInCarDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarDropPackets.setStatus('current')
qosIntfInCarTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTotalBytes.setStatus('current')
qosIntfInCarTranBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarTranBytes.setStatus('current')
qosIntfInCarDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfInCarDropBytes.setStatus('current')
qosIntfOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutUtilization.setStatus('current')
qosIntfOutCarTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTotalPackets.setStatus('current')
qosIntfOutCarTranPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTranPackets.setStatus('current')
qosIntfOutCarDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarDropPackets.setStatus('current')
qosIntfOutCarTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTotalBytes.setStatus('current')
qosIntfOutCarTranBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarTranBytes.setStatus('current')
qosIntfOutCarDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 6, 8, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIntfOutCarDropBytes.setStatus('current')
mibBuilder.exportSymbols("ZXR10-QOS-MIB", qosCbQosCMAPMatchCfgTable=qosCbQosCMAPMatchCfgTable, qosIntfInCarDropPackets=qosIntfInCarDropPackets, qosCBQconfig=qosCBQconfig, qosOutputCirPir=qosOutputCirPir, qosCbQosServicePolicyName=qosCbQosServicePolicyName, zxr10qos=zxr10qos, qosCbQosPoliceCfgViolateAction=qosCbQosPoliceCfgViolateAction, qosPriorityQueueCfgEntry=qosPriorityQueueCfgEntry, qosIfTraffStatInfoTable=qosIfTraffStatInfoTable, qosCbQosCMAPMatchIndex=qosCbQosCMAPMatchIndex, qosIntfOutCarTotalBytes=qosIntfOutCarTotalBytes, qosOutputCirMaxBurstRate=qosOutputCirMaxBurstRate, qosPriorityQueueItemQueueNum=qosPriorityQueueItemQueueNum, qosInputCirIfTableLastchange=qosInputCirIfTableLastchange, qosWFQCfgRowStatus=qosWFQCfgRowStatus, qosCbQosPolicyClassCfgTable=qosCbQosPolicyClassCfgTable, qosOutputCirViolateAction=qosOutputCirViolateAction, qosIntfInCarTotalBytes=qosIntfInCarTotalBytes, qosFreeCirIndex=qosFreeCirIndex, zxr10=zxr10, qosOutputCirExceedAction=qosOutputCirExceedAction, qosIntfOutUtilization=qosIntfOutUtilization, qosWREDconfig=qosWREDconfig, qosInputCirExceedValue=qosInputCirExceedValue, qosCbQosPolicyClassName=qosCbQosPolicyClassName, qosREDCfgPreValue=qosREDCfgPreValue, qosPriorityQueueLimitMedium=qosPriorityQueueLimitMedium, qosOutputCirNormalBurstRate=qosOutputCirNormalBurstRate, qosPriorityQueueLimitHigh=qosPriorityQueueLimitHigh, qosPriorityQueueItemEntry=qosPriorityQueueItemEntry, qosCbQosCMAPMatchValue=qosCbQosCMAPMatchValue, QosCMAPMatchType=QosCMAPMatchType, qosPriorityQueueRowStatus=qosPriorityQueueRowStatus, qosCbQosClassMapRowStatus=qosCbQosClassMapRowStatus, qosWFQCfgTable=qosWFQCfgTable, qosOutputCirIfTableLastchange=qosOutputCirIfTableLastchange, qosPriorityGroupTable=qosPriorityGroupTable, QosPQMatchType=QosPQMatchType, qosCbQosServicePolicyRowStatus=qosCbQosServicePolicyRowStatus, qosInputCirConformValue=qosInputCirConformValue, qosCbQosbindwidthCfgEntry=qosCbQosbindwidthCfgEntry, qosInputCirConformAction=qosInputCirConformAction, qosWREDweightCfgEntry=qosWREDweightCfgEntry, qoscbQosPolicyMapName=qoscbQosPolicyMapName, qosCbQosQueueingCfgBandwidth=qosCbQosQueueingCfgBandwidth, qosREDCfgweightValue=qosREDCfgweightValue, qosOutputCirConformValue=qosOutputCirConformValue, qosPriorityQueueCfgTable=qosPriorityQueueCfgTable, qosCbQosCMAPMatchType=qosCbQosCMAPMatchType, qosCbQosPolicyMapRowStatus=qosCbQosPolicyMapRowStatus, qoscbQosCMapIndex=qoscbQosCMapIndex, qosCbQosPoliceCfgExceedAction=qosCbQosPoliceCfgExceedAction, qosPriorityQueueItemMatchValue=qosPriorityQueueItemMatchValue, qosCbQosClassMapCfgTable=qosCbQosClassMapCfgTable, TrafficDirection=TrafficDirection, QueueingBandwidthUnits=QueueingBandwidthUnits, qosCbQosCMAPMatchRowStatus=qosCbQosCMAPMatchRowStatus, qosCbQosQueueingCfgBandwidthUnits=qosCbQosQueueingCfgBandwidthUnits, zxr10protocol=zxr10protocol, qosInputCirPir=qosInputCirPir, qosIntfOutCarDropPackets=qosIntfOutCarDropPackets, qosOutputCirIndex=qosOutputCirIndex, qosCbQosbandwidthCfgTable=qosCbQosbandwidthCfgTable, DisplayString=DisplayString, qosPriorityQueueDefault=qosPriorityQueueDefault, qosCbQosPoliceCfgConformAction=qosCbQosPoliceCfgConformAction, qosCbQosClassMapCfgEntry=qosCbQosClassMapCfgEntry, qosPriorityQueueLimitNormal=qosPriorityQueueLimitNormal, qosCbQosQueueingCfgPriorityQueueNo=qosCbQosQueueingCfgPriorityQueueNo, qosIntfName=qosIntfName, qosOutputCirMatchType=qosOutputCirMatchType, qosInputCirMatchType=qosInputCirMatchType, qosCbQosActionRowStatus=qosCbQosActionRowStatus, qosIntfInCarDropBytes=qosIntfInCarDropBytes, qosInputCirCir=qosInputCirCir, qosIntfOutCarTotalPackets=qosIntfOutCarTotalPackets, qosIntfOutCarTranBytes=qosIntfOutCarTranBytes, qosInputCirExceedAction=qosInputCirExceedAction, qosInputCirViolateAction=qosInputCirViolateAction, qosCbQosqueueCfgTable=qosCbQosqueueCfgTable, qosPriorityGroupNum=qosPriorityGroupNum, qosWREDprecedenceCfgTable=qosWREDprecedenceCfgTable, qosInputCirMaxBurstRate=qosInputCirMaxBurstRate, qosInputCirNormalBurstRate=qosInputCirNormalBurstRate, qosInputCirMatchValue=qosInputCirMatchValue, qosCbQosPoliceCfgExtBurstSize=qosCbQosPoliceCfgExtBurstSize, qosCQconfig=qosCQconfig, qosPriorityQueueCfgTableLastchange=qosPriorityQueueCfgTableLastchange, qosPriorityQueueLimitLow=qosPriorityQueueLimitLow, qosCbQosPoliceCfgConformSetValue=qosCbQosPoliceCfgConformSetValue, qosCBQosServicePolicyTable=qosCBQosServicePolicyTable, qoscbQosPMapIndex=qoscbQosPMapIndex, qosWFQconfig=qosWFQconfig, qosCbQosPoliceCfgExceedSetValue=qosCbQosPoliceCfgExceedSetValue, PYSNMP_MODULE_ID=zxr10qos, qosIntfCarStat=qosIntfCarStat, qosPriorityQueueIndex=qosPriorityQueueIndex, qosPriorityQueueItemTotal=qosPriorityQueueItemTotal, qosWREDweightCfgTable=qosWREDweightCfgTable, qosInputCirDescription=qosInputCirDescription, qosPriorityGroupRowStatus=qosPriorityGroupRowStatus, qosCbQosPolicyClassCfgEntry=qosCbQosPolicyClassCfgEntry, qosPriorityQueueItemMatchType=qosPriorityQueueItemMatchType, qosOutputCirIfTable=qosOutputCirIfTable, qosREDCfgprecedenceRowStatus=qosREDCfgprecedenceRowStatus, qosOutputCirExceedValue=qosOutputCirExceedValue, qoscbQosPolicyMapDescription=qoscbQosPolicyMapDescription, qosREDprecedenceCfgMinThreshold=qosREDprecedenceCfgMinThreshold, qosCbQosPoliceCfgViolateSetValue=qosCbQosPoliceCfgViolateSetValue, qosCBQosServicePolicyEntry=qosCBQosServicePolicyEntry, qosCbQosqueueRowStatus=qosCbQosqueueRowStatus, qosCbQosPoliceCfgCir=qosCbQosPoliceCfgCir, qosPriorityGroupifname=qosPriorityGroupifname, qosIntfInCarTranBytes=qosIntfInCarTranBytes, qosOutputCirDescription=qosOutputCirDescription, qosCbQosqueueCfgEntry=qosCbQosqueueCfgEntry, qosIntfInUtilization=qosIntfInUtilization, qosCbQosPoliceCfgEntry=qosCbQosPoliceCfgEntry, qosCbQosPolicyDirection=qosCbQosPolicyDirection, qosInputCirIfTable=qosInputCirIfTable, qosPriorityQueueItemIndex=qosPriorityQueueItemIndex, qosCARconfig=qosCARconfig, qosWREDprecedenceCfgEntry=qosWREDprecedenceCfgEntry, qosOutputCirRowStatus=qosOutputCirRowStatus, qosIntfOutCarDropBytes=qosIntfOutCarDropBytes, QosCirAction=QosCirAction, qosCbQosPolicyMapCfgTable=qosCbQosPolicyMapCfgTable, qosIntfOutCarTranPackets=qosIntfOutCarTranPackets, qosPriorityQueueItemTable=qosPriorityQueueItemTable, qosPriorityQueueItemDescription=qosPriorityQueueItemDescription, qosOutputCirViolateValue=qosOutputCirViolateValue, qosCbQosPolicyMapCfgEntry=qosCbQosPolicyMapCfgEntry, qosCbQosClassMapName=qosCbQosClassMapName, qosOutputCirCir=qosOutputCirCir, qosPriorityGroupEntry=qosPriorityGroupEntry, qosInputCirIndex=qosInputCirIndex, qosInputCirRowStatus=qosInputCirRowStatus, qosCbQosPoliceCfgPir=qosCbQosPoliceCfgPir, qosIfTraffStatInfoEntry=qosIfTraffStatInfoEntry, qosPriorityQueueItemRowStatus=qosPriorityQueueItemRowStatus, qosCbQosPoliceCfgRowStatus=qosCbQosPoliceCfgRowStatus, zte=zte, qosCbQosPoliceCfgTable=qosCbQosPoliceCfgTable, qosInputCirIfEntry=qosInputCirIfEntry, qosREDprecedenceCfgPktDropProb=qosREDprecedenceCfgPktDropProb, qosREDCfgweightRowStatus=qosREDCfgweightRowStatus, qosWFQCfgQueueLimit=qosWFQCfgQueueLimit, qosPQconfig=qosPQconfig, qosIntfInCarTranPackets=qosIntfInCarTranPackets, qosCbQosPolicyifname=qosCbQosPolicyifname, qosCbQosCMAPMatchCfgEntry=qosCbQosCMAPMatchCfgEntry, qosCbQosPoliceCfgBurstSize=qosCbQosPoliceCfgBurstSize, qosInputCirViolateValue=qosInputCirViolateValue, QosCBQCarAction=QosCBQCarAction, qosREDprecedenceCfgMaxThreshold=qosREDprecedenceCfgMaxThreshold, qosIntfInCarTotalPackets=qosIntfInCarTotalPackets, EntryStatus=EntryStatus, qosCbQosPolicyClassRowStatus=qosCbQosPolicyClassRowStatus, qoscbQosClassMapDescription=qoscbQosClassMapDescription, QosCirMatchType=QosCirMatchType, QosPQQueueType=QosPQQueueType, qosModuleStart=qosModuleStart, qosOutputCirIfEntry=qosOutputCirIfEntry, qosWFQCfgEntry=qosWFQCfgEntry, qosOutputCirConformAction=qosOutputCirConformAction, qosOutputCirMatchValue=qosOutputCirMatchValue, qosWFQCfgTotalQueueNum=qosWFQCfgTotalQueueNum)
