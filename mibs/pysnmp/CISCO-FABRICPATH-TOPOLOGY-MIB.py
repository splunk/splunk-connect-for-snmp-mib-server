#
# PySNMP MIB module CISCO-FABRICPATH-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FABRICPATH-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:40:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, Gauge32, Counter64, IpAddress, iso, Counter32, NotificationType, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "Counter64", "IpAddress", "iso", "Counter32", "NotificationType", "Bits", "TimeTicks")
RowStatus, TextualConvention, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "StorageType", "DisplayString")
ciscoFabricPathTopologyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 801))
ciscoFabricPathTopologyMIB.setRevisions(('2013-03-11 00:00',))
if mibBuilder.loadTexts: ciscoFabricPathTopologyMIB.setLastUpdated('201303110000Z')
if mibBuilder.loadTexts: ciscoFabricPathTopologyMIB.setOrganization('Cisco Systems, Inc.')
ciscoFabricPathTopologyMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 801, 0))
ciscoFabricPathTopologyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 801, 1))
ciscoFabricPathTopologyMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 801, 2))
cfptTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1), )
if mibBuilder.loadTexts: cfptTopologyTable.setStatus('current')
cfptTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1), ).setIndexNames((0, "CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIndex"))
if mibBuilder.loadTexts: cfptTopologyEntry.setStatus('current')
cfptTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfptTopologyIndex.setStatus('current')
cfptTopologyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyDescr.setStatus('current')
cfptTopologyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyState.setStatus('current')
cfptTopologyStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyStateChangeReason.setStatus('current')
cfptTopologyVlansFirst2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 5), Cisco2KVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyVlansFirst2K.setStatus('current')
cfptTopologyVlansSecond2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 6), Cisco2KVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyVlansSecond2K.setStatus('current')
cfptTopologyActiveVlansFirst2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 7), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyActiveVlansFirst2K.setStatus('current')
cfptTopologyActiveVlansSecond2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 8), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyActiveVlansSecond2K.setStatus('current')
cfptTopologyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 9), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyStorageType.setStatus('current')
cfptTopologyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyRowStatus.setStatus('current')
cfptTopologyIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 2), )
if mibBuilder.loadTexts: cfptTopologyIfTable.setStatus('current')
cfptTopologyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 2, 1), ).setIndexNames((0, "CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfTopoIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfptTopologyIfEntry.setStatus('current')
cfptTopologyIfTopoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfptTopologyIfTopoIndex.setStatus('current')
cfptTopologyIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyIfState.setStatus('current')
cfptTopologyIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 2, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyIfStorageType.setStatus('current')
cfptTopologyIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfptTopologyIfRowStatus.setStatus('current')
cfptTopologyIfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 3), )
if mibBuilder.loadTexts: cfptTopologyIfVlanTable.setStatus('current')
cfptTopologyIfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfptTopologyIfVlanEntry.setStatus('current')
cfptTopologyIfVlansFirst2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 3, 1, 1), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyIfVlansFirst2K.setStatus('current')
cfptTopologyIfVlansSecond2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 3, 1, 2), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyIfVlansSecond2K.setStatus('current')
cfptTopologyIfActiveVlansFirst2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 3, 1, 3), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyIfActiveVlansFirst2K.setStatus('current')
cfptTopologyIfActiveVlansSecond2K = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 3, 1, 4), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyIfActiveVlansSecond2K.setStatus('current')
cfptTopologyTreeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 4), )
if mibBuilder.loadTexts: cfptTopologyTreeTable.setStatus('current')
cfptTopologyTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 4, 1), ).setIndexNames((0, "CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIndex"), (0, "CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyTreeId"))
if mibBuilder.loadTexts: cfptTopologyTreeEntry.setStatus('current')
cfptTopologyTreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfptTopologyTreeId.setStatus('current')
cfptTopologyTreeFtag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyTreeFtag.setStatus('current')
cfptTopologyTreeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyTreeState.setStatus('current')
cfptTopologyTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 801, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mixed", 2), ("multicast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfptTopologyTreeType.setStatus('current')
cfptFabricPathTopologyMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 1))
cfptFabricPathTopologyMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 2))
cfptFabricPathTopologyMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 1, 1)).setObjects(("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyGroup"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfGroup"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfVlanGroup"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyTreeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfptFabricPathTopologyMIBCompliance = cfptFabricPathTopologyMIBCompliance.setStatus('current')
cfptTopologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 2, 1)).setObjects(("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyDescr"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyState"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyStateChangeReason"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyVlansFirst2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyVlansSecond2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyActiveVlansFirst2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyActiveVlansSecond2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyStorageType"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfptTopologyGroup = cfptTopologyGroup.setStatus('current')
cfptTopologyIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 2, 2)).setObjects(("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfState"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfStorageType"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfptTopologyIfGroup = cfptTopologyIfGroup.setStatus('current')
cfptTopologyIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 2, 3)).setObjects(("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfVlansFirst2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfVlansSecond2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfActiveVlansFirst2K"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyIfActiveVlansSecond2K"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfptTopologyIfVlanGroup = cfptTopologyIfVlanGroup.setStatus('current')
cfptTopologyTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 801, 2, 2, 4)).setObjects(("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyTreeFtag"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyTreeState"), ("CISCO-FABRICPATH-TOPOLOGY-MIB", "cfptTopologyTreeType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfptTopologyTreeGroup = cfptTopologyTreeGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-FABRICPATH-TOPOLOGY-MIB", ciscoFabricPathTopologyMIBConformance=ciscoFabricPathTopologyMIBConformance, cfptTopologyIfState=cfptTopologyIfState, cfptTopologyIfEntry=cfptTopologyIfEntry, cfptTopologyIfTable=cfptTopologyIfTable, cfptTopologyIfTopoIndex=cfptTopologyIfTopoIndex, cfptTopologyTreeFtag=cfptTopologyTreeFtag, ciscoFabricPathTopologyMIB=ciscoFabricPathTopologyMIB, cfptFabricPathTopologyMIBCompliances=cfptFabricPathTopologyMIBCompliances, cfptTopologyIfVlansFirst2K=cfptTopologyIfVlansFirst2K, cfptTopologyIndex=cfptTopologyIndex, cfptTopologyVlansFirst2K=cfptTopologyVlansFirst2K, cfptTopologyIfActiveVlansFirst2K=cfptTopologyIfActiveVlansFirst2K, cfptTopologyVlansSecond2K=cfptTopologyVlansSecond2K, cfptTopologyEntry=cfptTopologyEntry, cfptTopologyTreeId=cfptTopologyTreeId, cfptFabricPathTopologyMIBCompliance=cfptFabricPathTopologyMIBCompliance, cfptTopologyIfActiveVlansSecond2K=cfptTopologyIfActiveVlansSecond2K, cfptTopologyState=cfptTopologyState, cfptTopologyIfRowStatus=cfptTopologyIfRowStatus, cfptTopologyTable=cfptTopologyTable, ciscoFabricPathTopologyMIBObjects=ciscoFabricPathTopologyMIBObjects, PYSNMP_MODULE_ID=ciscoFabricPathTopologyMIB, cfptTopologyTreeEntry=cfptTopologyTreeEntry, cfptTopologyTreeTable=cfptTopologyTreeTable, cfptTopologyIfVlanTable=cfptTopologyIfVlanTable, cfptTopologyIfVlanEntry=cfptTopologyIfVlanEntry, cfptTopologyRowStatus=cfptTopologyRowStatus, cfptTopologyTreeState=cfptTopologyTreeState, cfptTopologyTreeType=cfptTopologyTreeType, cfptTopologyIfVlanGroup=cfptTopologyIfVlanGroup, ciscoFabricPathTopologyMIBNotifs=ciscoFabricPathTopologyMIBNotifs, cfptTopologyTreeGroup=cfptTopologyTreeGroup, cfptTopologyStorageType=cfptTopologyStorageType, cfptTopologyStateChangeReason=cfptTopologyStateChangeReason, cfptTopologyActiveVlansFirst2K=cfptTopologyActiveVlansFirst2K, cfptTopologyIfStorageType=cfptTopologyIfStorageType, cfptTopologyDescr=cfptTopologyDescr, cfptFabricPathTopologyMIBGroups=cfptFabricPathTopologyMIBGroups, cfptTopologyGroup=cfptTopologyGroup, cfptTopologyIfGroup=cfptTopologyIfGroup, cfptTopologyActiveVlansSecond2K=cfptTopologyActiveVlansSecond2K, cfptTopologyIfVlansSecond2K=cfptTopologyIfVlansSecond2K)
