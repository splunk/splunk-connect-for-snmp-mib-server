#
# PySNMP MIB module CNT246-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNT246-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, ObjectIdentity, Unsigned32, enterprises, ModuleIdentity, IpAddress, Counter32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "enterprises", "ModuleIdentity", "IpAddress", "Counter32", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cnt2Transport = ModuleIdentity((1, 3, 6, 1, 4, 1, 333, 2, 4, 6))
cnt2Transport.setRevisions(('1901-03-09 00:00',))
if mibBuilder.loadTexts: cnt2Transport.setLastUpdated('0103090000Z')
if mibBuilder.loadTexts: cnt2Transport.setOrganization('Computer Network Technology Corporation')
cnt2TransportTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1), )
if mibBuilder.loadTexts: cnt2TransportTable.setStatus('current')
cnt2TransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1), ).setIndexNames((0, "CNT246-MIB", "cnt2TransportSlotIndex"), (0, "CNT246-MIB", "cnt2TransportIndex"))
if mibBuilder.loadTexts: cnt2TransportEntry.setStatus('current')
cnt2TransportSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportSlotIndex.setStatus('current')
cnt2TransportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportIndex.setStatus('current')
cnt2TransportBus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportBus.setStatus('current')
cnt2TransportVid = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportVid.setStatus('current')
cnt2TransportLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 12, 13, 14, 99))).clone(namedValues=NamedValues(("atm", 8), ("ethernet", 9), ("fibrechannel", 10), ("fddi", 11), ("ds3e3", 12), ("lane", 13), ("ipv4", 14), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportLinkType.setStatus('current')
cnt2TransportLinkDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportLinkDesc.setStatus('current')
cnt2TransportLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportLinkStatus.setStatus('current')
cnt2TransportIPtosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("routine", 1), ("priority", 2), ("immediate", 3), ("flash", 4), ("flashOverride", 5), ("criticECP", 6), ("internetworkControl", 7), ("networkControl", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportIPtosPrecedence.setStatus('current')
cnt2TransportIPtosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportIPtosDelay.setStatus('current')
cnt2TransportIPtosThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportIPtosThruput.setStatus('current')
cnt2TransportIPtosRelibility = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportIPtosRelibility.setStatus('current')
cnt2TransportRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportRemoteIp.setStatus('current')
cnt2TransportProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sap", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportProtocol.setStatus('current')
cnt2TransportCompressionOption = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportCompressionOption.setStatus('current')
cnt2TransportMaxXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportMaxXmitRate.setStatus('current')
cnt2TransportResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportResetTime.setStatus('current')
cnt2TransportInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportInPkts.setStatus('current')
cnt2TransportInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportInOctets.setStatus('current')
cnt2TransportOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportOutPkts.setStatus('current')
cnt2TransportOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportOutOctets.setStatus('current')
cnt2TransportRexmit = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportRexmit.setStatus('current')
cnt2TransportOosHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportOosHigh.setStatus('current')
cnt2TransportStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2TransportStatsReset.setStatus('current')
cnt2TransportRawOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportRawOutOctets.setStatus('current')
cnt2TransportRawInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportRawInOctets.setStatus('current')
cnt2TransportWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportWindowSize.setStatus('current')
cnt2TransportSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportSegmentSize.setStatus('current')
cnt2TransportSegmentSizeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportSegmentSizeHi.setStatus('current')
cnt2TransportRoundTripTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportRoundTripTimer.setStatus('current')
cnt2TransportHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportHoldCount.setStatus('current')
cnt2TransportHoldCountRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportHoldCountRatio1.setStatus('current')
cnt2TransportHoldCountRatio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportHoldCountRatio2.setStatus('current')
cnt2TransportHoldCountRatio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportHoldCountRatio3.setStatus('current')
cnt2TransportTotalDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 4, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2TransportTotalDisconnect.setStatus('current')
mibBuilder.exportSymbols("CNT246-MIB", cnt2TransportInOctets=cnt2TransportInOctets, cnt2TransportOosHigh=cnt2TransportOosHigh, PYSNMP_MODULE_ID=cnt2Transport, cnt2TransportOutOctets=cnt2TransportOutOctets, cnt2TransportMaxXmitRate=cnt2TransportMaxXmitRate, cnt2TransportInPkts=cnt2TransportInPkts, cnt2TransportRawInOctets=cnt2TransportRawInOctets, cnt2TransportCompressionOption=cnt2TransportCompressionOption, cnt2TransportRexmit=cnt2TransportRexmit, cnt2TransportIPtosPrecedence=cnt2TransportIPtosPrecedence, cnt2TransportIPtosDelay=cnt2TransportIPtosDelay, cnt2TransportRawOutOctets=cnt2TransportRawOutOctets, cnt2TransportTotalDisconnect=cnt2TransportTotalDisconnect, cnt2TransportVid=cnt2TransportVid, cnt2TransportIPtosThruput=cnt2TransportIPtosThruput, cnt2TransportHoldCount=cnt2TransportHoldCount, cnt2TransportHoldCountRatio3=cnt2TransportHoldCountRatio3, cnt2TransportHoldCountRatio2=cnt2TransportHoldCountRatio2, cnt2TransportBus=cnt2TransportBus, cnt2TransportEntry=cnt2TransportEntry, cnt2TransportHoldCountRatio1=cnt2TransportHoldCountRatio1, cnt2TransportSlotIndex=cnt2TransportSlotIndex, cnt2TransportIPtosRelibility=cnt2TransportIPtosRelibility, cnt2TransportTable=cnt2TransportTable, cnt2TransportProtocol=cnt2TransportProtocol, cnt2TransportOutPkts=cnt2TransportOutPkts, cnt2TransportSegmentSizeHi=cnt2TransportSegmentSizeHi, cnt2Transport=cnt2Transport, cnt2TransportSegmentSize=cnt2TransportSegmentSize, cnt2TransportRemoteIp=cnt2TransportRemoteIp, cnt2TransportRoundTripTimer=cnt2TransportRoundTripTimer, cnt2TransportStatsReset=cnt2TransportStatsReset, cnt2TransportResetTime=cnt2TransportResetTime, cnt2TransportWindowSize=cnt2TransportWindowSize, cnt2TransportLinkStatus=cnt2TransportLinkStatus, cnt2TransportLinkDesc=cnt2TransportLinkDesc, cnt2TransportLinkType=cnt2TransportLinkType, cnt2TransportIndex=cnt2TransportIndex)
