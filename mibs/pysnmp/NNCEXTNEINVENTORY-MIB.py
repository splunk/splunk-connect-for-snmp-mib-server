#
# PySNMP MIB module NNCEXTNEINVENTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCEXTNEINVENTORY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:13:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
entPhysicalIndex, entPhysicalEntry = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalEntry")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
NncSwStatus, NncSwBank = mibBuilder.importSymbols("NNCGNI0006-MIB", "NncSwStatus", "NncSwBank")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, Gauge32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Bits, Counter64, TimeTicks, iso, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Bits", "Counter64", "TimeTicks", "iso", "MibIdentifier", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nncExtNEInventory = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 69))
if mibBuilder.loadTexts: nncExtNEInventory.setLastUpdated('9904151645Z')
if mibBuilder.loadTexts: nncExtNEInventory.setOrganization('Newbridge Networks Corporation')
nncExtNEInventoryObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 69, 1))
nncExtNEInventoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 69, 2))
nncExtNEInventoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 69, 3))
nncNEInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1), )
if mibBuilder.loadTexts: nncNEInventoryTable.setStatus('current')
nncNEInventoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1), )
entPhysicalEntry.registerAugmentions(("NNCEXTNEINVENTORY-MIB", "nncNEInventoryTableEntry"))
nncNEInventoryTableEntry.setIndexNames(*entPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: nncNEInventoryTableEntry.setStatus('current')
nncNEInvAssemblyName = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyName.setStatus('current')
nncNEInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 2), DisplayString().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvSerialNumber.setStatus('current')
nncNEInvAssemblyIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyIdentity.setStatus('current')
nncNEInvMktgPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvMktgPartNo.setStatus('current')
nncNEInvEnggPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvEnggPartNo.setStatus('current')
nncNEInvRestartCause = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 6), DisplayString().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvRestartCause.setStatus('current')
nncNEInvAssemblyNoOfSwBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyNoOfSwBanks.setStatus('current')
nncNEInvAssemblyActiveSwBank = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 8), NncSwBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyActiveSwBank.setStatus('current')
nncNEInvAssemblyNextActiveSwBank = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 9), NncSwBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyNextActiveSwBank.setStatus('current')
nncAssemblySwBanksTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2), )
if mibBuilder.loadTexts: nncAssemblySwBanksTable.setStatus('current')
nncAssemblySwBanksTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankNumber"))
if mibBuilder.loadTexts: nncAssemblySwBanksTableEntry.setStatus('current')
nncAssemblySwBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAssemblySwBankNumber.setStatus('current')
nncAssemblySwBankGeneric = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAssemblySwBankGeneric.setStatus('current')
nncAssemblySwBankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1, 3), NncSwStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAssemblySwBankStatus.setStatus('current')
nncNEPhysInventoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 69, 2, 1)).setObjects(("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyName"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvSerialNumber"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyIdentity"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvMktgPartNo"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvEnggPartNo"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvRestartCause"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyNoOfSwBanks"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyActiveSwBank"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyNextActiveSwBank"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncNEPhysInventoryGroup = nncNEPhysInventoryGroup.setStatus('current')
nncNEPhysAssemblySwBankGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 69, 2, 2)).setObjects(("NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankNumber"), ("NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankGeneric"), ("NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncNEPhysAssemblySwBankGroup = nncNEPhysAssemblySwBankGroup.setStatus('current')
nncNEInvCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 69, 3, 1)).setObjects(("NNCEXTNEINVENTORY-MIB", "nncNEPhysInventoryGroup"), ("NNCEXTNEINVENTORY-MIB", "nncNEPhysAssemblySwBankGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncNEInvCompliance = nncNEInvCompliance.setStatus('current')
mibBuilder.exportSymbols("NNCEXTNEINVENTORY-MIB", nncAssemblySwBanksTableEntry=nncAssemblySwBanksTableEntry, PYSNMP_MODULE_ID=nncExtNEInventory, nncAssemblySwBankGeneric=nncAssemblySwBankGeneric, nncNEInvMktgPartNo=nncNEInvMktgPartNo, nncExtNEInventoryCompliances=nncExtNEInventoryCompliances, nncNEInvAssemblyIdentity=nncNEInvAssemblyIdentity, nncNEInventoryTable=nncNEInventoryTable, nncAssemblySwBankNumber=nncAssemblySwBankNumber, nncExtNEInventory=nncExtNEInventory, nncNEInvAssemblyNoOfSwBanks=nncNEInvAssemblyNoOfSwBanks, nncNEInvAssemblyActiveSwBank=nncNEInvAssemblyActiveSwBank, nncNEInvCompliance=nncNEInvCompliance, nncNEInvEnggPartNo=nncNEInvEnggPartNo, nncNEInventoryTableEntry=nncNEInventoryTableEntry, nncExtNEInventoryGroups=nncExtNEInventoryGroups, nncNEInvAssemblyName=nncNEInvAssemblyName, nncNEInvAssemblyNextActiveSwBank=nncNEInvAssemblyNextActiveSwBank, nncNEInvRestartCause=nncNEInvRestartCause, nncExtNEInventoryObjects=nncExtNEInventoryObjects, nncAssemblySwBankStatus=nncAssemblySwBankStatus, nncNEPhysAssemblySwBankGroup=nncNEPhysAssemblySwBankGroup, nncNEPhysInventoryGroup=nncNEPhysInventoryGroup, nncNEInvSerialNumber=nncNEInvSerialNumber, nncAssemblySwBanksTable=nncAssemblySwBanksTable)
