#
# PySNMP MIB module BDCOM-TS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-TS
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
bdlocal, = mibBuilder.importSymbols("BDCOM-SMI", "bdlocal")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, ObjectIdentity, Counter32, NotificationType, Unsigned32, Counter64, Gauge32, TimeTicks, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ObjectIdentity", "Counter32", "NotificationType", "Unsigned32", "Counter64", "Gauge32", "TimeTicks", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bdlts = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 2, 9))
bdtsLines = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLines.setStatus('mandatory')
bdltsLineTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2), )
if mibBuilder.loadTexts: bdltsLineTable.setStatus('mandatory')
bdltsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1), ).setIndexNames((0, "BDCOM-TS", "tsLineNumber"))
if mibBuilder.loadTexts: bdltsLineEntry.setStatus('mandatory')
bdtsLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineActive.setStatus('mandatory')
bdtsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("console", 2), ("terminal", 3), ("line-printer", 4), ("virtual-terminal", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineType.setStatus('mandatory')
bdtsLineAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineAutobaud.setStatus('mandatory')
bdtsLineSpeedin = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineSpeedin.setStatus('mandatory')
bdtsLineSpeedout = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineSpeedout.setStatus('mandatory')
bdtsLineFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("software-input", 3), ("software-output", 4), ("software-both", 5), ("hardware-input", 6), ("hardware-output", 7), ("hardware-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineFlow.setStatus('mandatory')
bdtsLineModem = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("call-in", 3), ("call-out", 4), ("cts-required", 5), ("ri-is-cd", 6), ("inout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineModem.setStatus('mandatory')
bdtsLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineLoc.setStatus('mandatory')
bdtsLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineTerm.setStatus('mandatory')
bdtsLineScrlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineScrlen.setStatus('mandatory')
bdtsLineScrwid = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineScrwid.setStatus('mandatory')
bdtsLineEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineEsc.setStatus('mandatory')
bdtsLineTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineTmo.setStatus('mandatory')
bdtsLineSestmo = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineSestmo.setStatus('mandatory')
bdtsLineRotary = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineRotary.setStatus('mandatory')
bdtsLineUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineUses.setStatus('mandatory')
bdtsLineNses = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineNses.setStatus('mandatory')
bdtsLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineUser.setStatus('mandatory')
bdtsLineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineNoise.setStatus('mandatory')
bdtsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineNumber.setStatus('mandatory')
bdtsLineTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineTimeActive.setStatus('mandatory')
bdltsLineSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3), )
if mibBuilder.loadTexts: bdltsLineSessionTable.setStatus('mandatory')
bdltsLineSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1), ).setIndexNames((0, "BDCOM-TS", "bdtslineSesLine"), (0, "BDCOM-TS", "bdtslineSesSession"))
if mibBuilder.loadTexts: bdltsLineSessionEntry.setStatus('mandatory')
bdtslineSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("pad", 2), ("stream", 3), ("rlogin", 4), ("telnet", 5), ("tcp", 6), ("lat", 7), ("mop", 8), ("slip", 9), ("xremote", 10), ("rshell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesType.setStatus('mandatory')
bdtslineSesDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesDir.setStatus('mandatory')
bdtslineSesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesAddr.setStatus('mandatory')
bdtslineSesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesName.setStatus('mandatory')
bdtslineSesCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesCur.setStatus('mandatory')
bdtslineSesIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesIdle.setStatus('mandatory')
bdtslineSesLine = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesLine.setStatus('mandatory')
bdtslineSesSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesSession.setStatus('mandatory')
bdtsMsgTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgTtyLine.setStatus('mandatory')
bdtsMsgIntervaltim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgIntervaltim.setStatus('mandatory')
bdtsMsgDuration = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgDuration.setStatus('mandatory')
bdtsMsgText = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgText.setStatus('mandatory')
bdtsMsgTmpBanner = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("additive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgTmpBanner.setStatus('mandatory')
bdtsMsgSend = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("reload", 2), ("messagedone", 3), ("abort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgSend.setStatus('mandatory')
bdtsClrTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsClrTtyLine.setStatus('mandatory')
mibBuilder.exportSymbols("BDCOM-TS", bdtsLineEsc=bdtsLineEsc, bdtsLineAutobaud=bdtsLineAutobaud, bdtsLineModem=bdtsLineModem, bdtsLineTerm=bdtsLineTerm, bdtsLineNumber=bdtsLineNumber, bdtsLineRotary=bdtsLineRotary, bdtsLineSestmo=bdtsLineSestmo, bdtsLineScrwid=bdtsLineScrwid, bdtsLineActive=bdtsLineActive, bdtslineSesAddr=bdtslineSesAddr, bdtsLineScrlen=bdtsLineScrlen, bdtsLineSpeedout=bdtsLineSpeedout, bdtsMsgDuration=bdtsMsgDuration, bdtsLineNoise=bdtsLineNoise, bdtslineSesSession=bdtslineSesSession, bdtsLines=bdtsLines, bdtsLineTmo=bdtsLineTmo, bdtslineSesLine=bdtslineSesLine, bdtsClrTtyLine=bdtsClrTtyLine, bdtslineSesDir=bdtslineSesDir, bdtsLineUses=bdtsLineUses, bdtsLineLoc=bdtsLineLoc, bdltsLineSessionTable=bdltsLineSessionTable, bdltsLineSessionEntry=bdltsLineSessionEntry, bdtsLineFlow=bdtsLineFlow, bdtsLineType=bdtsLineType, bdtslineSesIdle=bdtslineSesIdle, bdtsMsgTmpBanner=bdtsMsgTmpBanner, bdtsLineSpeedin=bdtsLineSpeedin, bdtsLineUser=bdtsLineUser, bdltsLineTable=bdltsLineTable, bdtsLineTimeActive=bdtsLineTimeActive, bdtslineSesCur=bdtslineSesCur, bdtsMsgText=bdtsMsgText, bdtsMsgTtyLine=bdtsMsgTtyLine, bdtslineSesType=bdtslineSesType, bdlts=bdlts, bdtsLineNses=bdtsLineNses, bdtsMsgIntervaltim=bdtsMsgIntervaltim, bdtslineSesName=bdtslineSesName, bdtsMsgSend=bdtsMsgSend, bdltsLineEntry=bdltsLineEntry)
