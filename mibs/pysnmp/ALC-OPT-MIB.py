#
# PySNMP MIB module ALC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALC-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, ObjectIdentity, NotificationType, IpAddress, MibIdentifier, Unsigned32, TimeTicks, enterprises, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ObjectIdentity", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32", "TimeTicks", "enterprises", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "ModuleIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTALCCfgTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27))
cdx6500PPCTALCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1), )
if mibBuilder.loadTexts: cdx6500PPCTALCPortTable.setStatus('mandatory')
cdx6500PPCTALCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTALCPortEntry.setStatus('mandatory')
alcPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPortNumber.setStatus('mandatory')
alcPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31))).clone(namedValues=NamedValues(("alc", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPortType.setStatus('mandatory')
alcPCfgSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alcHpad", 1), ("alcTpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgSubtype.setStatus('mandatory')
alcPCfgPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 13, 15))).clone(namedValues=NamedValues(("simp", 1), ("emri", 4), ("emdc", 5), ("dtr", 13), ("alcDte", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPortControl.setStatus('mandatory')
alcPCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("int", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgClockSource.setStatus('mandatory')
alcPCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clkspd1200", 1), ("clkspd2400", 2), ("clkspd4800", 3), ("clkspd9600", 4), ("clkspd19200", 5), ("clkspd38400", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgClockSpeed.setStatus('mandatory')
alcPCfgPollDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgPollDelayTimer.setStatus('mandatory')
alcPCfgHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgHostTimeout.setStatus('mandatory')
alcPCfgMaxMesgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgMaxMesgSize.setStatus('mandatory')
alcPCfgMinIntrvlBetweenPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgMinIntrvlBetweenPolls.setStatus('mandatory')
alcPCfgRtsCtsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgRtsCtsTimeout.setStatus('mandatory')
alcPCfgLeadPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgLeadPadChar.setStatus('mandatory')
alcPCfgNumLeadPadChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgNumLeadPadChars.setStatus('mandatory')
alcPCfgTrailPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgTrailPadChar.setStatus('mandatory')
alcPCfgNumTrailPadChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgNumTrailPadChars.setStatus('mandatory')
alcPCfgALCLineOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 71))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgALCLineOptions.setStatus('mandatory')
alcPCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgConnType.setStatus('mandatory')
alcPCfgAcallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgAcallMnemonic.setStatus('mandatory')
alcPCfgCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgCallingAddress.setStatus('mandatory')
alcPCfgCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgCUD.setStatus('mandatory')
alcPCfgNumOfBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgNumOfBuffers.setStatus('mandatory')
alcPCfgInHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgInHeader.setStatus('mandatory')
alcPCfgOutHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgOutHeader.setStatus('mandatory')
alcPCfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgReconnectTimeout.setStatus('mandatory')
alcPCfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgInactivityTimeout.setStatus('mandatory')
alcPCfgDebounceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgDebounceTimeout.setStatus('mandatory')
alcPCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgParity.setStatus('mandatory')
alcPCfgConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgConnOptions.setStatus('mandatory')
alcPCfgAvailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgAvailableMesg.setStatus('mandatory')
alcPCfgUnavailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPCfgUnavailableMesg.setStatus('mandatory')
cdx6500PPCTALCInterchangeTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2), )
if mibBuilder.loadTexts: cdx6500PPCTALCInterchangeTable.setStatus('mandatory')
cdx6500PPCTALCInterchangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcICfgPortNumber"), (0, "ALC-OPT-MIB", "alcICfgInterchangeAddress"))
if mibBuilder.loadTexts: cdx6500PPCTALCInterchangeEntry.setStatus('mandatory')
alcICfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgPortNumber.setStatus('mandatory')
alcICfgInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgInterchangeAddress.setStatus('mandatory')
alcICfgOptionOnInvalidCCC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("discard", 2), ("resend", 3), ("reenter", 4), ("ignore", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgOptionOnInvalidCCC.setStatus('mandatory')
alcICfgGenTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgGenTerminalAddress.setStatus('mandatory')
alcICfgHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgHostTimeout.setStatus('mandatory')
alcICfgMaxComponentsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgMaxComponentsPerFrame.setStatus('mandatory')
alcICfgFastPollCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgFastPollCycleCount.setStatus('mandatory')
alcICfgSlowPollCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgSlowPollCycleCount.setStatus('mandatory')
alcICfgN1Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgN1Counter.setStatus('mandatory')
alcICfgN2Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgN2Counter.setStatus('mandatory')
alcICfgT1Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgT1Timeout.setStatus('mandatory')
alcICfgT2Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgT2Timeout.setStatus('mandatory')
alcICfgReenterMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgReenterMessage.setStatus('mandatory')
alcICfgStartMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgStartMessage.setStatus('mandatory')
alcICfgStopMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgStopMessage.setStatus('mandatory')
alcICfgOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgOptions.setStatus('mandatory')
alcICfgValidTAList = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgValidTAList.setStatus('mandatory')
alcICfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgConnType.setStatus('mandatory')
alcICfgAcallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgAcallMnemonic.setStatus('mandatory')
alcICfgCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgCallingAddress.setStatus('mandatory')
alcICfgCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgCUD.setStatus('mandatory')
alcICfgNumOfBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgNumOfBuffers.setStatus('mandatory')
alcICfgInHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgInHeader.setStatus('mandatory')
alcICfgOutHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgOutHeader.setStatus('mandatory')
alcICfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgReconnectTimeout.setStatus('mandatory')
alcICfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgInactivityTimeout.setStatus('mandatory')
alcICfgDebounceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgDebounceTimeout.setStatus('mandatory')
alcICfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgParity.setStatus('mandatory')
alcICfgConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgConnOptions.setStatus('mandatory')
alcICfgAvailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgAvailableMesg.setStatus('mandatory')
alcICfgUnavailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcICfgUnavailableMesg.setStatus('mandatory')
cdx6500PPCTALCTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3), )
if mibBuilder.loadTexts: cdx6500PPCTALCTerminalTable.setStatus('mandatory')
cdx6500PPCTALCTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcTCfgPortNumber"), (0, "ALC-OPT-MIB", "alcTCfgInterchangeAddress"), (0, "ALC-OPT-MIB", "alcTCfgTerminalAddress"))
if mibBuilder.loadTexts: cdx6500PPCTALCTerminalEntry.setStatus('mandatory')
alcTCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgPortNumber.setStatus('mandatory')
alcTCfgInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgInterchangeAddress.setStatus('mandatory')
alcTCfgTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgTerminalAddress.setStatus('mandatory')
alcTCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgConnType.setStatus('mandatory')
alcTCfgAcallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgAcallMnemonic.setStatus('mandatory')
alcTCfgCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgCallingAddress.setStatus('mandatory')
alcTCfgCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgCUD.setStatus('mandatory')
alcTCfgNumOfBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgNumOfBuffers.setStatus('mandatory')
alcTCfgInHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgInHeader.setStatus('mandatory')
alcTCfgOutHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgOutHeader.setStatus('mandatory')
alcTCfgReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgReconnectTimeout.setStatus('mandatory')
alcTCfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgInactivityTimeout.setStatus('mandatory')
alcTCfgDebounceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgDebounceTimeout.setStatus('mandatory')
alcTCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgParity.setStatus('mandatory')
alcTCfgConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgConnOptions.setStatus('mandatory')
alcTCfgAvailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgAvailableMesg.setStatus('mandatory')
alcTCfgUnavailableMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 27, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTCfgUnavailableMesg.setStatus('mandatory')
cdx6500PPSTALCStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28))
cdx6500PPSTALCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1), )
if mibBuilder.loadTexts: cdx6500PPSTALCPortTable.setStatus('mandatory')
cdx6500PPSTALCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcPStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTALCPortEntry.setStatus('mandatory')
alcPStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortNumber.setStatus('mandatory')
alcPStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31))).clone(namedValues=NamedValues(("alc", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortType.setStatus('mandatory')
alcPStatsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 11, 100))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("timedOut", 7), ("pending", 8), ("connecting", 9), ("flowCtrl", 11), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortState.setStatus('mandatory')
alcPStatsFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsFramesIn.setStatus('mandatory')
alcPStatsFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsFramesOut.setStatus('mandatory')
alcPStatsDataMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDataMesgsIn.setStatus('mandatory')
alcPStatsDataMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDataMesgsOut.setStatus('mandatory')
alcPStatsCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCharsIn.setStatus('mandatory')
alcPStatsCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCharsOut.setStatus('mandatory')
alcPStatsPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPolls.setStatus('mandatory')
alcPStatsGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsGAs.setStatus('mandatory')
alcPStatsResets = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsResets.setStatus('mandatory')
alcPStatsDiscardBadIAIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDiscardBadIAIn.setStatus('mandatory')
alcPStatsDiscardBadIAOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsDiscardBadIAOut.setStatus('mandatory')
alcPStatsMaxQSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsMaxQSizeOut.setStatus('mandatory')
alcPStatsCCCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCCCErrors.setStatus('mandatory')
alcPStatsSignalLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsSignalLosses.setStatus('mandatory')
alcPStatsOverlengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsOverlengthFrames.setStatus('mandatory')
alcPStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("busyOut", 3), ("up", 4), ("down", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsPortStatus.setStatus('mandatory')
alcPStatsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("connecting", 3), ("inactive", 4), ("pending", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsConnState.setStatus('mandatory')
alcPStatsALCMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCMesgsIn.setStatus('mandatory')
alcPStatsALCMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCMesgsOut.setStatus('mandatory')
alcPStatsX25MesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25MesgsIn.setStatus('mandatory')
alcPStatsX25MesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25MesgsOut.setStatus('mandatory')
alcPStatsALCCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCCharsIn.setStatus('mandatory')
alcPStatsALCCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCCharsOut.setStatus('mandatory')
alcPStatsX25CharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25CharsIn.setStatus('mandatory')
alcPStatsX25CharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25CharsOut.setStatus('mandatory')
alcPStatsALCDiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCDiscardedMesgsEntityDown.setStatus('mandatory')
alcPStatsX25DiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsEntityDown.setStatus('mandatory')
alcPStatsX25DiscardedMesgsBadALCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsBadALCAddr.setStatus('mandatory')
alcPStatsX25DiscardedMesgsBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsBadHeader.setStatus('mandatory')
alcPStatsX25DiscardedMesgsTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsTooLong.setStatus('mandatory')
alcPStatsALCDiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsALCDiscardedMesgsQFull.setStatus('mandatory')
alcPStatsX25DiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsX25DiscardedMesgsQFull.setStatus('mandatory')
alcPStatsCurrTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCurrTxALCQSize.setStatus('mandatory')
alcPStatsCurrTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsCurrTxX25QSize.setStatus('mandatory')
alcPStatsMaxTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsMaxTxALCQSize.setStatus('mandatory')
alcPStatsMaxTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcPStatsMaxTxX25QSize.setStatus('mandatory')
cdx6500PPSTALCInterchangeTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2), )
if mibBuilder.loadTexts: cdx6500PPSTALCInterchangeTable.setStatus('mandatory')
cdx6500PPSTALCInterchangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcIStatsPortNumber"), (0, "ALC-OPT-MIB", "alcIStatsInterchangeAddress"))
if mibBuilder.loadTexts: cdx6500PPSTALCInterchangeEntry.setStatus('mandatory')
alcIStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsPortNumber.setStatus('mandatory')
alcIStatsInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsInterchangeAddress.setStatus('mandatory')
alcIStatsInterchangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 10, 11, 100))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("fastPoll", 3), ("slowPoll", 4), ("stopped", 6), ("timedOut", 7), ("pending", 8), ("failed", 10), ("flowCtrl", 11), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsInterchangeState.setStatus('mandatory')
alcIStatsFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsFramesIn.setStatus('mandatory')
alcIStatsFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsFramesOut.setStatus('mandatory')
alcIStatsDataMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDataMesgsIn.setStatus('mandatory')
alcIStatsDataMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDataMesgsOut.setStatus('mandatory')
alcIStatsCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCharsIn.setStatus('mandatory')
alcIStatsCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCharsOut.setStatus('mandatory')
alcIStatsPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsPolls.setStatus('mandatory')
alcIStatsGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsGAs.setStatus('mandatory')
alcIStatsResets = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsResets.setStatus('mandatory')
alcIStatsDiscardBadTAIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDiscardBadTAIn.setStatus('mandatory')
alcIStatsDiscardBadTAOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDiscardBadTAOut.setStatus('mandatory')
alcIStatsDisabledIAIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDisabledIAIn.setStatus('mandatory')
alcIStatsDisabledIAOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsDisabledIAOut.setStatus('mandatory')
alcIStatsMaxQSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsMaxQSizeOut.setStatus('mandatory')
alcIStatsCCCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCCCErrors.setStatus('mandatory')
alcIStatsT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsT1Timeouts.setStatus('mandatory')
alcIStatsT2Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsT2Timeouts.setStatus('mandatory')
alcIStatsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("connecting", 3), ("inactive", 4), ("pending", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsConnState.setStatus('mandatory')
alcIStatsALCMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCMesgsIn.setStatus('mandatory')
alcIStatsALCMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCMesgsOut.setStatus('mandatory')
alcIStatsX25MesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25MesgsIn.setStatus('mandatory')
alcIStatsX25MesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25MesgsOut.setStatus('mandatory')
alcIStatsALCCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCCharsIn.setStatus('mandatory')
alcIStatsALCCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCCharsOut.setStatus('mandatory')
alcIStatsX25CharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25CharsIn.setStatus('mandatory')
alcIStatsX25CharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25CharsOut.setStatus('mandatory')
alcIStatsALCDiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCDiscardedMesgsEntityDown.setStatus('mandatory')
alcIStatsX25DiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsEntityDown.setStatus('mandatory')
alcIStatsX25DiscardedMesgsBadALCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsBadALCAddr.setStatus('mandatory')
alcIStatsX25DiscardedMesgsBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsBadHeader.setStatus('mandatory')
alcIStatsX25DiscardedMesgsTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsTooLong.setStatus('mandatory')
alcIStatsALCDiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsALCDiscardedMesgsQFull.setStatus('mandatory')
alcIStatsX25DiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsX25DiscardedMesgsQFull.setStatus('mandatory')
alcIStatsCurrTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCurrTxALCQSize.setStatus('mandatory')
alcIStatsCurrTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsCurrTxX25QSize.setStatus('mandatory')
alcIStatsMaxTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsMaxTxALCQSize.setStatus('mandatory')
alcIStatsMaxTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIStatsMaxTxX25QSize.setStatus('mandatory')
cdx6500PPSTALCTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3), )
if mibBuilder.loadTexts: cdx6500PPSTALCTerminalTable.setStatus('mandatory')
cdx6500PPSTALCTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcTStatsPortNumber"), (0, "ALC-OPT-MIB", "alcTStatsInterchangeAddress"), (0, "ALC-OPT-MIB", "alcTStatsTerminalAddress"))
if mibBuilder.loadTexts: cdx6500PPSTALCTerminalEntry.setStatus('mandatory')
alcTStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsPortNumber.setStatus('mandatory')
alcTStatsInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsInterchangeAddress.setStatus('mandatory')
alcTStatsTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsTerminalAddress.setStatus('mandatory')
alcTStatsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("connecting", 3), ("inactive", 4), ("pending", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsConnState.setStatus('mandatory')
alcTStatsALCMesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCMesgsIn.setStatus('mandatory')
alcTStatsALCMesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCMesgsOut.setStatus('mandatory')
alcTStatsX25MesgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25MesgsIn.setStatus('mandatory')
alcTStatsX25MesgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25MesgsOut.setStatus('mandatory')
alcTStatsALCCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCCharsIn.setStatus('mandatory')
alcTStatsALCCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCCharsOut.setStatus('mandatory')
alcTStatsX25CharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25CharsIn.setStatus('mandatory')
alcTStatsX25CharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25CharsOut.setStatus('mandatory')
alcTStatsALCDiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCDiscardedMesgsEntityDown.setStatus('mandatory')
alcTStatsX25DiscardedMesgsEntityDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsEntityDown.setStatus('mandatory')
alcTStatsX25DiscardedMesgsBadALCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsBadALCAddr.setStatus('mandatory')
alcTStatsX25DiscardedMesgsBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsBadHeader.setStatus('mandatory')
alcTStatsX25DiscardedMesgsTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsTooLong.setStatus('mandatory')
alcTStatsALCDiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsALCDiscardedMesgsQFull.setStatus('mandatory')
alcTStatsX25DiscardedMesgsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsX25DiscardedMesgsQFull.setStatus('mandatory')
alcTStatsCurrTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsCurrTxALCQSize.setStatus('mandatory')
alcTStatsCurrTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsCurrTxX25QSize.setStatus('mandatory')
alcTStatsMaxTxALCQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsMaxTxALCQSize.setStatus('mandatory')
alcTStatsMaxTxX25QSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 28, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTStatsMaxTxX25QSize.setStatus('mandatory')
cdx6500ContALC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10))
cdx6500ContALCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1), )
if mibBuilder.loadTexts: cdx6500ContALCPortTable.setStatus('mandatory')
cdx6500ContALCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcPContPortNumber"))
if mibBuilder.loadTexts: cdx6500ContALCPortEntry.setStatus('mandatory')
alcPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: alcPContPortNumber.setStatus('mandatory')
alcPContPortBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcPContPortBoot.setStatus('mandatory')
alcPContPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcPContPortEnable.setStatus('mandatory')
alcPContPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcPContPortDisable.setStatus('mandatory')
cdx6500ContALCInterchangeTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2), )
if mibBuilder.loadTexts: cdx6500ContALCInterchangeTable.setStatus('mandatory')
cdx6500ContALCInterchangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcIContPortNumber"), (0, "ALC-OPT-MIB", "alcIContInterchangeAddress"))
if mibBuilder.loadTexts: cdx6500ContALCInterchangeEntry.setStatus('mandatory')
alcIContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: alcIContPortNumber.setStatus('mandatory')
alcIContInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: alcIContInterchangeAddress.setStatus('mandatory')
alcIContInterchangeBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcIContInterchangeBoot.setStatus('mandatory')
alcIContInterchangeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcIContInterchangeEnable.setStatus('mandatory')
alcIContInterchangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcIContInterchangeDisable.setStatus('mandatory')
cdx6500ContALCTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3), )
if mibBuilder.loadTexts: cdx6500ContALCTerminalTable.setStatus('mandatory')
cdx6500ContALCTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1), ).setIndexNames((0, "ALC-OPT-MIB", "alcTContPortNumber"), (0, "ALC-OPT-MIB", "alcTContInterchangeAddress"), (0, "ALC-OPT-MIB", "alcTContTerminalAddress"))
if mibBuilder.loadTexts: cdx6500ContALCTerminalEntry.setStatus('mandatory')
alcTContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: alcTContPortNumber.setStatus('mandatory')
alcTContInterchangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: alcTContInterchangeAddress.setStatus('mandatory')
alcTContTerminalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1))
if mibBuilder.loadTexts: alcTContTerminalAddress.setStatus('mandatory')
alcTContTerminalBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcTContTerminalBoot.setStatus('mandatory')
alcTContTerminalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcTContTerminalEnable.setStatus('mandatory')
alcTContTerminalDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alcTContTerminalDisable.setStatus('mandatory')
mibBuilder.exportSymbols("ALC-OPT-MIB", alcIStatsCCCErrors=alcIStatsCCCErrors, alcPCfgAcallMnemonic=alcPCfgAcallMnemonic, alcPCfgConnOptions=alcPCfgConnOptions, alcICfgCallingAddress=alcICfgCallingAddress, alcTCfgNumOfBuffers=alcTCfgNumOfBuffers, cdx6500ContALCTerminalEntry=cdx6500ContALCTerminalEntry, alcTCfgInHeader=alcTCfgInHeader, alcTStatsX25CharsIn=alcTStatsX25CharsIn, alcPStatsPortType=alcPStatsPortType, cdx6500PPSTALCTerminalTable=cdx6500PPSTALCTerminalTable, alcPCfgTrailPadChar=alcPCfgTrailPadChar, alcICfgParity=alcICfgParity, cdx6500Configuration=cdx6500Configuration, cdx6500PPCTALCInterchangeTable=cdx6500PPCTALCInterchangeTable, alcTCfgUnavailableMesg=alcTCfgUnavailableMesg, alcTContTerminalBoot=alcTContTerminalBoot, alcTStatsX25DiscardedMesgsQFull=alcTStatsX25DiscardedMesgsQFull, alcPCfgALCLineOptions=alcPCfgALCLineOptions, cdx6500ContALCPortEntry=cdx6500ContALCPortEntry, alcICfgConnOptions=alcICfgConnOptions, alcIStatsCharsOut=alcIStatsCharsOut, alcICfgAcallMnemonic=alcICfgAcallMnemonic, alcPStatsOverlengthFrames=alcPStatsOverlengthFrames, alcPCfgAvailableMesg=alcPCfgAvailableMesg, alcPStatsResets=alcPStatsResets, alcTCfgDebounceTimeout=alcTCfgDebounceTimeout, alcICfgDebounceTimeout=alcICfgDebounceTimeout, alcICfgReconnectTimeout=alcICfgReconnectTimeout, alcIStatsMaxQSizeOut=alcIStatsMaxQSizeOut, alcIStatsDataMesgsOut=alcIStatsDataMesgsOut, alcIStatsALCDiscardedMesgsQFull=alcIStatsALCDiscardedMesgsQFull, alcTStatsPortNumber=alcTStatsPortNumber, alcTStatsInterchangeAddress=alcTStatsInterchangeAddress, alcPStatsCharsOut=alcPStatsCharsOut, alcPStatsX25DiscardedMesgsBadHeader=alcPStatsX25DiscardedMesgsBadHeader, alcIStatsDiscardBadTAOut=alcIStatsDiscardBadTAOut, alcIContInterchangeDisable=alcIContInterchangeDisable, alcPStatsALCDiscardedMesgsEntityDown=alcPStatsALCDiscardedMesgsEntityDown, alcICfgOptionOnInvalidCCC=alcICfgOptionOnInvalidCCC, alcPCfgCUD=alcPCfgCUD, alcIStatsFramesOut=alcIStatsFramesOut, alcIStatsX25DiscardedMesgsBadALCAddr=alcIStatsX25DiscardedMesgsBadALCAddr, alcPCfgSubtype=alcPCfgSubtype, alcPContPortEnable=alcPContPortEnable, alcPStatsX25CharsIn=alcPStatsX25CharsIn, alcTCfgConnOptions=alcTCfgConnOptions, alcIStatsX25MesgsOut=alcIStatsX25MesgsOut, alcPContPortNumber=alcPContPortNumber, DisplayString=DisplayString, alcIStatsALCDiscardedMesgsEntityDown=alcIStatsALCDiscardedMesgsEntityDown, alcTCfgReconnectTimeout=alcTCfgReconnectTimeout, alcIStatsInterchangeAddress=alcIStatsInterchangeAddress, alcPStatsDiscardBadIAOut=alcPStatsDiscardBadIAOut, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, alcPCfgParity=alcPCfgParity, alcTCfgOutHeader=alcTCfgOutHeader, alcIStatsALCMesgsOut=alcIStatsALCMesgsOut, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, alcTCfgAvailableMesg=alcTCfgAvailableMesg, alcPStatsALCMesgsIn=alcPStatsALCMesgsIn, alcICfgOptions=alcICfgOptions, alcICfgUnavailableMesg=alcICfgUnavailableMesg, alcPStatsALCDiscardedMesgsQFull=alcPStatsALCDiscardedMesgsQFull, alcPCfgPortNumber=alcPCfgPortNumber, alcTCfgPortNumber=alcTCfgPortNumber, alcIStatsGAs=alcIStatsGAs, alcIStatsX25CharsIn=alcIStatsX25CharsIn, alcIStatsCurrTxX25QSize=alcIStatsCurrTxX25QSize, alcIStatsPolls=alcIStatsPolls, alcIStatsMaxTxALCQSize=alcIStatsMaxTxALCQSize, alcTStatsX25DiscardedMesgsBadALCAddr=alcTStatsX25DiscardedMesgsBadALCAddr, cdx6500PPSTALCPortEntry=cdx6500PPSTALCPortEntry, alcICfgT2Timeout=alcICfgT2Timeout, alcPStatsPortStatus=alcPStatsPortStatus, cdx6500ContALC=cdx6500ContALC, cdx6500ContALCInterchangeTable=cdx6500ContALCInterchangeTable, alcIStatsX25DiscardedMesgsEntityDown=alcIStatsX25DiscardedMesgsEntityDown, alcPCfgDebounceTimeout=alcPCfgDebounceTimeout, alcIStatsX25MesgsIn=alcIStatsX25MesgsIn, alcPStatsX25MesgsIn=alcPStatsX25MesgsIn, alcPStatsPortState=alcPStatsPortState, alcPStatsX25DiscardedMesgsTooLong=alcPStatsX25DiscardedMesgsTooLong, alcPCfgUnavailableMesg=alcPCfgUnavailableMesg, alcICfgInHeader=alcICfgInHeader, alcPCfgPollDelayTimer=alcPCfgPollDelayTimer, alcPCfgMaxMesgSize=alcPCfgMaxMesgSize, alcPStatsCurrTxALCQSize=alcPStatsCurrTxALCQSize, cdx6500PPSTALCStatsTable=cdx6500PPSTALCStatsTable, alcPCfgInHeader=alcPCfgInHeader, alcTStatsALCMesgsIn=alcTStatsALCMesgsIn, alcPStatsALCMesgsOut=alcPStatsALCMesgsOut, alcTStatsMaxTxALCQSize=alcTStatsMaxTxALCQSize, alcPStatsSignalLosses=alcPStatsSignalLosses, cdx6500ContALCInterchangeEntry=cdx6500ContALCInterchangeEntry, alcPCfgClockSource=alcPCfgClockSource, codex=codex, alcTContPortNumber=alcTContPortNumber, alcIStatsALCCharsIn=alcIStatsALCCharsIn, alcPStatsMaxQSizeOut=alcPStatsMaxQSizeOut, alcTStatsX25CharsOut=alcTStatsX25CharsOut, alcTContTerminalEnable=alcTContTerminalEnable, alcPContPortBoot=alcPContPortBoot, alcPStatsX25CharsOut=alcPStatsX25CharsOut, alcICfgFastPollCycleCount=alcICfgFastPollCycleCount, alcIStatsALCMesgsIn=alcIStatsALCMesgsIn, cdx6500PPCTALCCfgTable=cdx6500PPCTALCCfgTable, cdx6500Statistics=cdx6500Statistics, alcTCfgInterchangeAddress=alcTCfgInterchangeAddress, alcPStatsX25DiscardedMesgsQFull=alcPStatsX25DiscardedMesgsQFull, alcIStatsResets=alcIStatsResets, alcIStatsX25CharsOut=alcIStatsX25CharsOut, cdx6500Controls=cdx6500Controls, alcPStatsConnState=alcPStatsConnState, cdx6500PPSTALCPortTable=cdx6500PPSTALCPortTable, cdx6500PPCTALCInterchangeEntry=cdx6500PPCTALCInterchangeEntry, alcIStatsT1Timeouts=alcIStatsT1Timeouts, cdx6500ContALCPortTable=cdx6500ContALCPortTable, cdxProductSpecific=cdxProductSpecific, alcPStatsCurrTxX25QSize=alcPStatsCurrTxX25QSize, cdx6500PPCTALCPortTable=cdx6500PPCTALCPortTable, alcPStatsMaxTxALCQSize=alcPStatsMaxTxALCQSize, alcIStatsInterchangeState=alcIStatsInterchangeState, alcPCfgLeadPadChar=alcPCfgLeadPadChar, alcPStatsPolls=alcPStatsPolls, alcPStatsX25DiscardedMesgsEntityDown=alcPStatsX25DiscardedMesgsEntityDown, alcIContInterchangeBoot=alcIContInterchangeBoot, alcPStatsDataMesgsOut=alcPStatsDataMesgsOut, alcIStatsCurrTxALCQSize=alcIStatsCurrTxALCQSize, cdx6500ContALCTerminalTable=cdx6500ContALCTerminalTable, alcIStatsX25DiscardedMesgsQFull=alcIStatsX25DiscardedMesgsQFull, alcPStatsX25MesgsOut=alcPStatsX25MesgsOut, alcTStatsConnState=alcTStatsConnState, alcTStatsCurrTxX25QSize=alcTStatsCurrTxX25QSize, cdx6500PPCTALCTerminalTable=cdx6500PPCTALCTerminalTable, alcTCfgConnType=alcTCfgConnType, cdx6500PPSTALCTerminalEntry=cdx6500PPSTALCTerminalEntry, alcICfgStartMessage=alcICfgStartMessage, alcPStatsFramesIn=alcPStatsFramesIn, alcTStatsALCMesgsOut=alcTStatsALCMesgsOut, alcIStatsMaxTxX25QSize=alcIStatsMaxTxX25QSize, alcPCfgOutHeader=alcPCfgOutHeader, alcTContTerminalAddress=alcTContTerminalAddress, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, alcICfgNumOfBuffers=alcICfgNumOfBuffers, alcICfgT1Timeout=alcICfgT1Timeout, alcIStatsCharsIn=alcIStatsCharsIn, alcTCfgCUD=alcTCfgCUD, alcTCfgCallingAddress=alcTCfgCallingAddress, alcPCfgReconnectTimeout=alcPCfgReconnectTimeout, alcPCfgNumLeadPadChars=alcPCfgNumLeadPadChars, alcPCfgRtsCtsTimeout=alcPCfgRtsCtsTimeout, alcIStatsConnState=alcIStatsConnState, alcICfgGenTerminalAddress=alcICfgGenTerminalAddress, alcTStatsALCDiscardedMesgsEntityDown=alcTStatsALCDiscardedMesgsEntityDown, alcPStatsX25DiscardedMesgsBadALCAddr=alcPStatsX25DiscardedMesgsBadALCAddr, alcTStatsX25DiscardedMesgsEntityDown=alcTStatsX25DiscardedMesgsEntityDown, alcTStatsALCDiscardedMesgsQFull=alcTStatsALCDiscardedMesgsQFull, alcPCfgInactivityTimeout=alcPCfgInactivityTimeout, alcICfgSlowPollCycleCount=alcICfgSlowPollCycleCount, alcTStatsALCCharsOut=alcTStatsALCCharsOut, alcICfgInactivityTimeout=alcICfgInactivityTimeout, alcPCfgClockSpeed=alcPCfgClockSpeed, cdx6500PPSTALCInterchangeTable=cdx6500PPSTALCInterchangeTable, alcPCfgNumOfBuffers=alcPCfgNumOfBuffers, alcTStatsX25MesgsIn=alcTStatsX25MesgsIn, alcICfgValidTAList=alcICfgValidTAList, alcIStatsDataMesgsIn=alcIStatsDataMesgsIn, alcTCfgTerminalAddress=alcTCfgTerminalAddress, alcPStatsDiscardBadIAIn=alcPStatsDiscardBadIAIn, alcIStatsX25DiscardedMesgsBadHeader=alcIStatsX25DiscardedMesgsBadHeader, cdx6500PPSTALCInterchangeEntry=cdx6500PPSTALCInterchangeEntry, alcTContInterchangeAddress=alcTContInterchangeAddress, alcTStatsCurrTxALCQSize=alcTStatsCurrTxALCQSize, alcIStatsDisabledIAOut=alcIStatsDisabledIAOut, alcPCfgCallingAddress=alcPCfgCallingAddress, alcICfgMaxComponentsPerFrame=alcICfgMaxComponentsPerFrame, alcICfgCUD=alcICfgCUD, alcIContInterchangeAddress=alcIContInterchangeAddress, alcTCfgInactivityTimeout=alcTCfgInactivityTimeout, alcPStatsCharsIn=alcPStatsCharsIn, alcPCfgHostTimeout=alcPCfgHostTimeout, alcPStatsALCCharsOut=alcPStatsALCCharsOut, alcPStatsGAs=alcPStatsGAs, alcIStatsFramesIn=alcIStatsFramesIn, alcTStatsMaxTxX25QSize=alcTStatsMaxTxX25QSize, alcIContPortNumber=alcIContPortNumber, alcIStatsX25DiscardedMesgsTooLong=alcIStatsX25DiscardedMesgsTooLong, alcTContTerminalDisable=alcTContTerminalDisable, alcPContPortDisable=alcPContPortDisable, alcPStatsCCCErrors=alcPStatsCCCErrors, alcIStatsDiscardBadTAIn=alcIStatsDiscardBadTAIn, cdx6500PPCTALCTerminalEntry=cdx6500PPCTALCTerminalEntry, alcTCfgParity=alcTCfgParity, alcICfgPortNumber=alcICfgPortNumber, alcICfgN1Counter=alcICfgN1Counter, alcPCfgMinIntrvlBetweenPolls=alcPCfgMinIntrvlBetweenPolls, alcTCfgAcallMnemonic=alcTCfgAcallMnemonic, alcPCfgConnType=alcPCfgConnType, alcPCfgNumTrailPadChars=alcPCfgNumTrailPadChars, alcPStatsPortNumber=alcPStatsPortNumber, alcTStatsALCCharsIn=alcTStatsALCCharsIn, alcICfgOutHeader=alcICfgOutHeader, alcICfgN2Counter=alcICfgN2Counter, cdx6500PPCTALCPortEntry=cdx6500PPCTALCPortEntry, alcPStatsMaxTxX25QSize=alcPStatsMaxTxX25QSize, alcTStatsX25DiscardedMesgsBadHeader=alcTStatsX25DiscardedMesgsBadHeader, alcTStatsX25MesgsOut=alcTStatsX25MesgsOut, alcPStatsDataMesgsIn=alcPStatsDataMesgsIn, alcTStatsTerminalAddress=alcTStatsTerminalAddress, alcICfgAvailableMesg=alcICfgAvailableMesg, alcPStatsFramesOut=alcPStatsFramesOut, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, alcIStatsPortNumber=alcIStatsPortNumber, alcICfgConnType=alcICfgConnType, alcIStatsDisabledIAIn=alcIStatsDisabledIAIn, cdx6500=cdx6500, alcIStatsALCCharsOut=alcIStatsALCCharsOut, alcPStatsALCCharsIn=alcPStatsALCCharsIn, alcIContInterchangeEnable=alcIContInterchangeEnable, alcPCfgPortControl=alcPCfgPortControl, alcIStatsT2Timeouts=alcIStatsT2Timeouts, alcICfgStopMessage=alcICfgStopMessage, alcICfgReenterMessage=alcICfgReenterMessage, alcICfgInterchangeAddress=alcICfgInterchangeAddress, alcTStatsX25DiscardedMesgsTooLong=alcTStatsX25DiscardedMesgsTooLong, alcICfgHostTimeout=alcICfgHostTimeout, alcPCfgPortType=alcPCfgPortType)
