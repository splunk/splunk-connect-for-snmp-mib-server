#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-HdlcTransparentMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-HdlcTransparentMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, Unsigned32, DisplayString, Counter32, RowStatus, Gauge32, Integer32, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "InterfaceIndex", "Unsigned32", "DisplayString", "Counter32", "RowStatus", "Gauge32", "Integer32", "StorageType")
AsciiString, NonReplicated, PassportCounter64, EnterpriseDateAndTime, Link = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "AsciiString", "NonReplicated", "PassportCounter64", "EnterpriseDateAndTime", "Link")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Unsigned32, Counter32, Gauge32, IpAddress, ModuleIdentity, iso, Bits, ObjectIdentity, NotificationType, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Unsigned32", "Counter32", "Gauge32", "IpAddress", "ModuleIdentity", "iso", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hdlcTransparentMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47))
mscHtds = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82))
mscHtdsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 1), )
if mibBuilder.loadTexts: mscHtdsRowStatusTable.setStatus('mandatory')
mscHtdsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"))
if mibBuilder.loadTexts: mscHtdsRowStatusEntry.setStatus('mandatory')
mscHtdsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsRowStatus.setStatus('mandatory')
mscHtdsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsComponentName.setStatus('mandatory')
mscHtdsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsStorageType.setStatus('mandatory')
mscHtdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mscHtdsIndex.setStatus('mandatory')
mscHtdsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 10), )
if mibBuilder.loadTexts: mscHtdsCidDataTable.setStatus('mandatory')
mscHtdsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"))
if mibBuilder.loadTexts: mscHtdsCidDataEntry.setStatus('mandatory')
mscHtdsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsCustomerIdentifier.setStatus('mandatory')
mscHtdsIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 11), )
if mibBuilder.loadTexts: mscHtdsIfEntryTable.setStatus('mandatory')
mscHtdsIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"))
if mibBuilder.loadTexts: mscHtdsIfEntryEntry.setStatus('mandatory')
mscHtdsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsIfAdminStatus.setStatus('mandatory')
mscHtdsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsIfIndex.setStatus('mandatory')
mscHtdsOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 12), )
if mibBuilder.loadTexts: mscHtdsOperStatusTable.setStatus('mandatory')
mscHtdsOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"))
if mibBuilder.loadTexts: mscHtdsOperStatusEntry.setStatus('mandatory')
mscHtdsSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsSnmpOperStatus.setStatus('mandatory')
mscHtdsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13), )
if mibBuilder.loadTexts: mscHtdsStateTable.setStatus('mandatory')
mscHtdsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"))
if mibBuilder.loadTexts: mscHtdsStateEntry.setStatus('mandatory')
mscHtdsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsAdminState.setStatus('mandatory')
mscHtdsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsOperationalState.setStatus('mandatory')
mscHtdsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsUsageState.setStatus('mandatory')
mscHtdsAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsAvailabilityStatus.setStatus('mandatory')
mscHtdsProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsProceduralStatus.setStatus('mandatory')
mscHtdsControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsControlStatus.setStatus('mandatory')
mscHtdsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsAlarmStatus.setStatus('mandatory')
mscHtdsStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsStandbyStatus.setStatus('mandatory')
mscHtdsUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsUnknownStatus.setStatus('mandatory')
mscHtdsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2))
mscHtdsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 1), )
if mibBuilder.loadTexts: mscHtdsFramerRowStatusTable.setStatus('mandatory')
mscHtdsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsFramerIndex"))
if mibBuilder.loadTexts: mscHtdsFramerRowStatusEntry.setStatus('mandatory')
mscHtdsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerRowStatus.setStatus('mandatory')
mscHtdsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerComponentName.setStatus('mandatory')
mscHtdsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerStorageType.setStatus('mandatory')
mscHtdsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscHtdsFramerIndex.setStatus('mandatory')
mscHtdsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 10), )
if mibBuilder.loadTexts: mscHtdsFramerProvTable.setStatus('mandatory')
mscHtdsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsFramerIndex"))
if mibBuilder.loadTexts: mscHtdsFramerProvEntry.setStatus('mandatory')
mscHtdsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsFramerInterfaceName.setStatus('mandatory')
mscHtdsFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11), )
if mibBuilder.loadTexts: mscHtdsFramerLinkTable.setStatus('mandatory')
mscHtdsFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsFramerIndex"))
if mibBuilder.loadTexts: mscHtdsFramerLinkEntry.setStatus('mandatory')
mscHtdsFramerDataInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16))).clone(namedValues=NamedValues(("off", 0), ("on", 16))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsFramerDataInversion.setStatus('mandatory')
mscHtdsFramerNonOctetData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsFramerNonOctetData.setStatus('mandatory')
mscHtdsFramerFrameCrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("crc16", 0), ("crc32", 1), ("noCrc", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsFramerFrameCrcType.setStatus('mandatory')
mscHtdsFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsFramerFlagsBetweenFrames.setStatus('mandatory')
mscHtdsFramerLineSignalTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsFramerLineSignalTransport.setStatus('mandatory')
mscHtdsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 12), )
if mibBuilder.loadTexts: mscHtdsFramerStateTable.setStatus('mandatory')
mscHtdsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsFramerIndex"))
if mibBuilder.loadTexts: mscHtdsFramerStateEntry.setStatus('mandatory')
mscHtdsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerAdminState.setStatus('mandatory')
mscHtdsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerOperationalState.setStatus('mandatory')
mscHtdsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerUsageState.setStatus('mandatory')
mscHtdsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13), )
if mibBuilder.loadTexts: mscHtdsFramerStatsTable.setStatus('mandatory')
mscHtdsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsFramerIndex"))
if mibBuilder.loadTexts: mscHtdsFramerStatsEntry.setStatus('mandatory')
mscHtdsFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerFrmToIf.setStatus('mandatory')
mscHtdsFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerFrmFromIf.setStatus('mandatory')
mscHtdsFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerOctetFromIf.setStatus('mandatory')
mscHtdsFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerAborts.setStatus('mandatory')
mscHtdsFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerCrcErrors.setStatus('mandatory')
mscHtdsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerLrcErrors.setStatus('mandatory')
mscHtdsFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerNonOctetErrors.setStatus('mandatory')
mscHtdsFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerOverruns.setStatus('mandatory')
mscHtdsFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerUnderruns.setStatus('mandatory')
mscHtdsFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerLargeFrmErrors.setStatus('mandatory')
mscHtdsFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 14), )
if mibBuilder.loadTexts: mscHtdsFramerUtilTable.setStatus('mandatory')
mscHtdsFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsFramerIndex"))
if mibBuilder.loadTexts: mscHtdsFramerUtilEntry.setStatus('mandatory')
mscHtdsFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerNormPrioLinkUtilToIf.setStatus('mandatory')
mscHtdsFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
mscHtdsPlc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3))
mscHtdsPlcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 1), )
if mibBuilder.loadTexts: mscHtdsPlcRowStatusTable.setStatus('mandatory')
mscHtdsPlcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsPlcIndex"))
if mibBuilder.loadTexts: mscHtdsPlcRowStatusEntry.setStatus('mandatory')
mscHtdsPlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsPlcRowStatus.setStatus('mandatory')
mscHtdsPlcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsPlcComponentName.setStatus('mandatory')
mscHtdsPlcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsPlcStorageType.setStatus('mandatory')
mscHtdsPlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscHtdsPlcIndex.setStatus('mandatory')
mscHtdsPlcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10), )
if mibBuilder.loadTexts: mscHtdsPlcProvTable.setStatus('mandatory')
mscHtdsPlcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsPlcIndex"))
if mibBuilder.loadTexts: mscHtdsPlcProvEntry.setStatus('mandatory')
mscHtdsPlcRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcRemoteName.setStatus('mandatory')
mscHtdsPlcSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcSetupPriority.setStatus('mandatory')
mscHtdsPlcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcHoldingPriority.setStatus('mandatory')
mscHtdsPlcRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcRequiredTxBandwidth.setStatus('mandatory')
mscHtdsPlcRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcRequiredRxBandwidth.setStatus('mandatory')
mscHtdsPlcRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('data')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcRequiredTrafficType.setStatus('mandatory')
mscHtdsPlcPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcPermittedTrunkTypes.setStatus('mandatory')
mscHtdsPlcRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcRequiredSecurity.setStatus('mandatory')
mscHtdsPlcRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcRequiredCustomerParm.setStatus('mandatory')
mscHtdsPlcPathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcPathAttributeToMinimize.setStatus('mandatory')
mscHtdsPlcMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcMaximumAcceptableCost.setStatus('mandatory')
mscHtdsPlcMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcMaximumAcceptableDelay.setStatus('mandatory')
mscHtdsPlcEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcEmissionPriority.setStatus('mandatory')
mscHtdsPlcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcDiscardPriority.setStatus('mandatory')
mscHtdsPlcPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcPathType.setStatus('mandatory')
mscHtdsPlcPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcPathFailureAction.setStatus('mandatory')
mscHtdsPlcBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcBumpPreference.setStatus('mandatory')
mscHtdsPlcOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcOptimization.setStatus('mandatory')
mscHtdsPlcAddressToCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 20), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcAddressToCall.setStatus('mandatory')
mscHtdsPlcLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 21), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcLocalAddress.setStatus('mandatory')
mscHtdsPlcMaximumAcceptableGatewayCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcMaximumAcceptableGatewayCost.setStatus('mandatory')
mscHtdsPlcMpathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 265), )
if mibBuilder.loadTexts: mscHtdsPlcMpathTable.setStatus('mandatory')
mscHtdsPlcMpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 265, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsPlcIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsPlcMpathIndex"))
if mibBuilder.loadTexts: mscHtdsPlcMpathEntry.setStatus('mandatory')
mscHtdsPlcMpathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 265, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: mscHtdsPlcMpathIndex.setStatus('mandatory')
mscHtdsPlcMpathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 3, 265, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsPlcMpathValue.setStatus('mandatory')
mscHtdsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4))
mscHtdsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 1), )
if mibBuilder.loadTexts: mscHtdsLCoRowStatusTable.setStatus('mandatory')
mscHtdsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsLCoIndex"))
if mibBuilder.loadTexts: mscHtdsLCoRowStatusEntry.setStatus('mandatory')
mscHtdsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRowStatus.setStatus('mandatory')
mscHtdsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoComponentName.setStatus('mandatory')
mscHtdsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoStorageType.setStatus('mandatory')
mscHtdsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscHtdsLCoIndex.setStatus('mandatory')
mscHtdsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10), )
if mibBuilder.loadTexts: mscHtdsLCoPathDataTable.setStatus('mandatory')
mscHtdsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsLCoIndex"))
if mibBuilder.loadTexts: mscHtdsLCoPathDataEntry.setStatus('mandatory')
mscHtdsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoState.setStatus('mandatory')
mscHtdsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscHtdsLCoOverrideRemoteName.setStatus('mandatory')
mscHtdsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoEnd.setStatus('mandatory')
mscHtdsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoCostMetric.setStatus('mandatory')
mscHtdsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoDelayMetric.setStatus('mandatory')
mscHtdsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRoundTripDelay.setStatus('mandatory')
mscHtdsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoSetupPriority.setStatus('mandatory')
mscHtdsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoHoldingPriority.setStatus('mandatory')
mscHtdsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRequiredTxBandwidth.setStatus('mandatory')
mscHtdsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRequiredRxBandwidth.setStatus('mandatory')
mscHtdsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRequiredTrafficType.setStatus('mandatory')
mscHtdsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPermittedTrunkTypes.setStatus('mandatory')
mscHtdsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRequiredSecurity.setStatus('mandatory')
mscHtdsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRequiredCustomerParameter.setStatus('mandatory')
mscHtdsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoEmissionPriority.setStatus('mandatory')
mscHtdsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoDiscardPriority.setStatus('mandatory')
mscHtdsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPathType.setStatus('mandatory')
mscHtdsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoRetryCount.setStatus('mandatory')
mscHtdsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPathFailureCount.setStatus('mandatory')
mscHtdsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoReasonForNoRoute.setStatus('mandatory')
mscHtdsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoLastTearDownReason.setStatus('mandatory')
mscHtdsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPathFailureAction.setStatus('mandatory')
mscHtdsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoBumpPreference.setStatus('mandatory')
mscHtdsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoOptimization.setStatus('mandatory')
mscHtdsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPathUpDateTime.setStatus('mandatory')
mscHtdsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 11), )
if mibBuilder.loadTexts: mscHtdsLCoStatsTable.setStatus('mandatory')
mscHtdsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsLCoIndex"))
if mibBuilder.loadTexts: mscHtdsLCoStatsEntry.setStatus('mandatory')
mscHtdsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPktsToNetwork.setStatus('mandatory')
mscHtdsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoBytesToNetwork.setStatus('mandatory')
mscHtdsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPktsFromNetwork.setStatus('mandatory')
mscHtdsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoBytesFromNetwork.setStatus('mandatory')
mscHtdsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 264), )
if mibBuilder.loadTexts: mscHtdsLCoPathTable.setStatus('mandatory')
mscHtdsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 264, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsLCoIndex"), (0, "Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", "mscHtdsLCoPathValue"))
if mibBuilder.loadTexts: mscHtdsLCoPathEntry.setStatus('mandatory')
mscHtdsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 82, 4, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscHtdsLCoPathValue.setStatus('mandatory')
hdlcTransparentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 1))
hdlcTransparentGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 1, 1))
hdlcTransparentGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 1, 1, 3))
hdlcTransparentGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 1, 1, 3, 2))
hdlcTransparentCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 3))
hdlcTransparentCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 3, 1))
hdlcTransparentCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 3, 1, 3))
hdlcTransparentCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 47, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-HdlcTransparentMIB", mscHtdsFramerAdminState=mscHtdsFramerAdminState, mscHtdsLCoPathUpDateTime=mscHtdsLCoPathUpDateTime, mscHtdsOperStatusTable=mscHtdsOperStatusTable, mscHtdsLCoPktsFromNetwork=mscHtdsLCoPktsFromNetwork, mscHtdsFramerOctetFromIf=mscHtdsFramerOctetFromIf, mscHtdsUnknownStatus=mscHtdsUnknownStatus, mscHtdsLCoStorageType=mscHtdsLCoStorageType, mscHtdsStateEntry=mscHtdsStateEntry, mscHtdsPlcMpathTable=mscHtdsPlcMpathTable, mscHtdsFramerRowStatus=mscHtdsFramerRowStatus, mscHtdsFramerAborts=mscHtdsFramerAborts, mscHtdsIfIndex=mscHtdsIfIndex, mscHtdsLCoPathDataTable=mscHtdsLCoPathDataTable, mscHtdsLCoOverrideRemoteName=mscHtdsLCoOverrideRemoteName, mscHtdsLCoRowStatusTable=mscHtdsLCoRowStatusTable, mscHtdsLCoRequiredSecurity=mscHtdsLCoRequiredSecurity, mscHtdsPlcProvTable=mscHtdsPlcProvTable, mscHtdsLCoHoldingPriority=mscHtdsLCoHoldingPriority, mscHtdsProceduralStatus=mscHtdsProceduralStatus, mscHtdsFramerLargeFrmErrors=mscHtdsFramerLargeFrmErrors, mscHtdsIfEntryEntry=mscHtdsIfEntryEntry, mscHtdsLCoRowStatus=mscHtdsLCoRowStatus, mscHtdsPlcRequiredTxBandwidth=mscHtdsPlcRequiredTxBandwidth, mscHtdsLCoPathDataEntry=mscHtdsLCoPathDataEntry, mscHtdsComponentName=mscHtdsComponentName, mscHtdsFramerInterfaceName=mscHtdsFramerInterfaceName, mscHtdsStorageType=mscHtdsStorageType, mscHtdsFramerNonOctetData=mscHtdsFramerNonOctetData, mscHtdsLCoPathEntry=mscHtdsLCoPathEntry, mscHtdsPlcEmissionPriority=mscHtdsPlcEmissionPriority, mscHtdsPlcPathType=mscHtdsPlcPathType, mscHtdsFramerRowStatusEntry=mscHtdsFramerRowStatusEntry, mscHtdsFramerStatsEntry=mscHtdsFramerStatsEntry, mscHtdsLCoComponentName=mscHtdsLCoComponentName, mscHtdsFramerStorageType=mscHtdsFramerStorageType, mscHtdsAvailabilityStatus=mscHtdsAvailabilityStatus, mscHtdsPlcMaximumAcceptableGatewayCost=mscHtdsPlcMaximumAcceptableGatewayCost, mscHtdsPlcMpathEntry=mscHtdsPlcMpathEntry, hdlcTransparentCapabilitiesCA02=hdlcTransparentCapabilitiesCA02, mscHtdsLCoIndex=mscHtdsLCoIndex, mscHtdsLCoStatsEntry=mscHtdsLCoStatsEntry, hdlcTransparentGroupCA02A=hdlcTransparentGroupCA02A, hdlcTransparentCapabilitiesCA02A=hdlcTransparentCapabilitiesCA02A, mscHtdsLCoPathFailureAction=mscHtdsLCoPathFailureAction, mscHtdsPlcRemoteName=mscHtdsPlcRemoteName, mscHtdsPlcComponentName=mscHtdsPlcComponentName, mscHtdsPlcSetupPriority=mscHtdsPlcSetupPriority, mscHtdsPlcProvEntry=mscHtdsPlcProvEntry, mscHtdsPlcRowStatusTable=mscHtdsPlcRowStatusTable, mscHtdsStateTable=mscHtdsStateTable, mscHtdsCidDataTable=mscHtdsCidDataTable, mscHtdsFramerUnderruns=mscHtdsFramerUnderruns, mscHtdsIfEntryTable=mscHtdsIfEntryTable, mscHtdsFramerUtilEntry=mscHtdsFramerUtilEntry, mscHtdsLCoPathFailureCount=mscHtdsLCoPathFailureCount, mscHtdsLCoBytesFromNetwork=mscHtdsLCoBytesFromNetwork, mscHtdsLCoPathTable=mscHtdsLCoPathTable, mscHtdsFramerDataInversion=mscHtdsFramerDataInversion, mscHtdsRowStatusTable=mscHtdsRowStatusTable, mscHtdsPlcMpathIndex=mscHtdsPlcMpathIndex, mscHtdsPlcRequiredSecurity=mscHtdsPlcRequiredSecurity, mscHtds=mscHtds, mscHtdsAdminState=mscHtdsAdminState, mscHtdsFramerLrcErrors=mscHtdsFramerLrcErrors, mscHtdsFramerUsageState=mscHtdsFramerUsageState, mscHtdsFramerStateTable=mscHtdsFramerStateTable, mscHtdsStandbyStatus=mscHtdsStandbyStatus, mscHtdsFramerFrmToIf=mscHtdsFramerFrmToIf, hdlcTransparentGroupCA=hdlcTransparentGroupCA, mscHtdsPlcDiscardPriority=mscHtdsPlcDiscardPriority, mscHtdsFramerFrmFromIf=mscHtdsFramerFrmFromIf, mscHtdsLCoEnd=mscHtdsLCoEnd, mscHtdsLCoRequiredTrafficType=mscHtdsLCoRequiredTrafficType, mscHtdsControlStatus=mscHtdsControlStatus, hdlcTransparentGroup=hdlcTransparentGroup, mscHtdsFramerRowStatusTable=mscHtdsFramerRowStatusTable, mscHtdsLCoEmissionPriority=mscHtdsLCoEmissionPriority, mscHtdsFramerLinkTable=mscHtdsFramerLinkTable, mscHtdsLCoRowStatusEntry=mscHtdsLCoRowStatusEntry, mscHtdsFramer=mscHtdsFramer, mscHtdsFramerProvEntry=mscHtdsFramerProvEntry, mscHtdsUsageState=mscHtdsUsageState, mscHtdsPlcPathAttributeToMinimize=mscHtdsPlcPathAttributeToMinimize, mscHtdsIndex=mscHtdsIndex, mscHtdsPlcRequiredTrafficType=mscHtdsPlcRequiredTrafficType, mscHtdsFramerNormPrioLinkUtilFromIf=mscHtdsFramerNormPrioLinkUtilFromIf, mscHtdsFramerProvTable=mscHtdsFramerProvTable, mscHtdsLCoDelayMetric=mscHtdsLCoDelayMetric, mscHtdsLCoState=mscHtdsLCoState, mscHtdsPlcHoldingPriority=mscHtdsPlcHoldingPriority, mscHtdsFramerUtilTable=mscHtdsFramerUtilTable, mscHtdsLCoLastTearDownReason=mscHtdsLCoLastTearDownReason, mscHtdsPlcPermittedTrunkTypes=mscHtdsPlcPermittedTrunkTypes, mscHtdsLCoBumpPreference=mscHtdsLCoBumpPreference, mscHtdsFramerFrameCrcType=mscHtdsFramerFrameCrcType, mscHtdsFramerOverruns=mscHtdsFramerOverruns, mscHtdsPlcPathFailureAction=mscHtdsPlcPathFailureAction, hdlcTransparentCapabilities=hdlcTransparentCapabilities, mscHtdsPlcOptimization=mscHtdsPlcOptimization, mscHtdsLCoCostMetric=mscHtdsLCoCostMetric, mscHtdsPlcLocalAddress=mscHtdsPlcLocalAddress, mscHtdsPlcMaximumAcceptableDelay=mscHtdsPlcMaximumAcceptableDelay, mscHtdsLCoBytesToNetwork=mscHtdsLCoBytesToNetwork, mscHtdsLCoRequiredCustomerParameter=mscHtdsLCoRequiredCustomerParameter, mscHtdsSnmpOperStatus=mscHtdsSnmpOperStatus, hdlcTransparentGroupCA02=hdlcTransparentGroupCA02, mscHtdsOperationalState=mscHtdsOperationalState, mscHtdsIfAdminStatus=mscHtdsIfAdminStatus, mscHtdsLCoDiscardPriority=mscHtdsLCoDiscardPriority, mscHtdsFramerFlagsBetweenFrames=mscHtdsFramerFlagsBetweenFrames, mscHtdsCidDataEntry=mscHtdsCidDataEntry, hdlcTransparentCapabilitiesCA=hdlcTransparentCapabilitiesCA, mscHtdsFramerOperationalState=mscHtdsFramerOperationalState, mscHtdsPlc=mscHtdsPlc, mscHtdsRowStatusEntry=mscHtdsRowStatusEntry, mscHtdsLCoPathValue=mscHtdsLCoPathValue, mscHtdsLCoRoundTripDelay=mscHtdsLCoRoundTripDelay, mscHtdsLCoReasonForNoRoute=mscHtdsLCoReasonForNoRoute, mscHtdsOperStatusEntry=mscHtdsOperStatusEntry, mscHtdsFramerLinkEntry=mscHtdsFramerLinkEntry, mscHtdsLCoOptimization=mscHtdsLCoOptimization, hdlcTransparentMIB=hdlcTransparentMIB, mscHtdsPlcRowStatusEntry=mscHtdsPlcRowStatusEntry, mscHtdsFramerLineSignalTransport=mscHtdsFramerLineSignalTransport, mscHtdsPlcRequiredCustomerParm=mscHtdsPlcRequiredCustomerParm, mscHtdsLCoSetupPriority=mscHtdsLCoSetupPriority, mscHtdsPlcRowStatus=mscHtdsPlcRowStatus, mscHtdsFramerNonOctetErrors=mscHtdsFramerNonOctetErrors, mscHtdsPlcMpathValue=mscHtdsPlcMpathValue, mscHtdsPlcIndex=mscHtdsPlcIndex, mscHtdsPlcAddressToCall=mscHtdsPlcAddressToCall, mscHtdsLCoPathType=mscHtdsLCoPathType, mscHtdsLCoStatsTable=mscHtdsLCoStatsTable, mscHtdsPlcMaximumAcceptableCost=mscHtdsPlcMaximumAcceptableCost, mscHtdsCustomerIdentifier=mscHtdsCustomerIdentifier, mscHtdsLCoRequiredRxBandwidth=mscHtdsLCoRequiredRxBandwidth, mscHtdsLCo=mscHtdsLCo, mscHtdsRowStatus=mscHtdsRowStatus, mscHtdsLCoPermittedTrunkTypes=mscHtdsLCoPermittedTrunkTypes, mscHtdsLCoRequiredTxBandwidth=mscHtdsLCoRequiredTxBandwidth, mscHtdsFramerNormPrioLinkUtilToIf=mscHtdsFramerNormPrioLinkUtilToIf, mscHtdsLCoRetryCount=mscHtdsLCoRetryCount, mscHtdsPlcBumpPreference=mscHtdsPlcBumpPreference, mscHtdsFramerStatsTable=mscHtdsFramerStatsTable, mscHtdsPlcStorageType=mscHtdsPlcStorageType, mscHtdsLCoPktsToNetwork=mscHtdsLCoPktsToNetwork, mscHtdsFramerComponentName=mscHtdsFramerComponentName, mscHtdsAlarmStatus=mscHtdsAlarmStatus, mscHtdsFramerCrcErrors=mscHtdsFramerCrcErrors, mscHtdsPlcRequiredRxBandwidth=mscHtdsPlcRequiredRxBandwidth, mscHtdsFramerStateEntry=mscHtdsFramerStateEntry, mscHtdsFramerIndex=mscHtdsFramerIndex)
