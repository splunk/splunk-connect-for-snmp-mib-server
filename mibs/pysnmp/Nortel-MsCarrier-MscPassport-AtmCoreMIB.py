#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-AtmCoreMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-AtmCoreMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
StorageType, DisplayString, Integer32, Unsigned32, RowStatus, Gauge32, Counter32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "DisplayString", "Integer32", "Unsigned32", "RowStatus", "Gauge32", "Counter32")
Link, AsciiStringIndex, FixedPoint7, NonReplicated, FixedPoint9, AsciiString, IntegerSequence, Hex, PassportCounter64 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Link", "AsciiStringIndex", "FixedPoint7", "NonReplicated", "FixedPoint9", "AsciiString", "IntegerSequence", "Hex", "PassportCounter64")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, IpAddress, ObjectIdentity, iso, MibIdentifier, Bits, Unsigned32, Counter64, Gauge32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "IpAddress", "ObjectIdentity", "iso", "MibIdentifier", "Bits", "Unsigned32", "Counter64", "Gauge32", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmCoreMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123))
mscAtmIf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114))
mscAtmIfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 1), )
if mibBuilder.loadTexts: mscAtmIfRowStatusTable.setStatus('mandatory')
mscAtmIfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfRowStatusEntry.setStatus('mandatory')
mscAtmIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfRowStatus.setStatus('mandatory')
mscAtmIfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfComponentName.setStatus('mandatory')
mscAtmIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfStorageType.setStatus('mandatory')
mscAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: mscAtmIfIndex.setStatus('mandatory')
mscAtmIfCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 100), )
if mibBuilder.loadTexts: mscAtmIfCidDataTable.setStatus('mandatory')
mscAtmIfCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfCidDataEntry.setStatus('mandatory')
mscAtmIfCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCustomerIdentifier.setStatus('mandatory')
mscAtmIfProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110), )
if mibBuilder.loadTexts: mscAtmIfProvTable.setStatus('mandatory')
mscAtmIfProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfProvEntry.setStatus('mandatory')
mscAtmIfInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 10), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfInterfaceName.setStatus('mandatory')
mscAtmIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uni", 0), ("ppi", 1))).clone('uni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfType.setStatus('obsolete')
mscAtmIfOamSegmentBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfOamSegmentBoundary.setStatus('mandatory')
mscAtmIfMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfMaxVpcs.setStatus('obsolete')
mscAtmIfMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfMaxVccs.setStatus('obsolete')
mscAtmIfTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfTrafficShaping.setStatus('obsolete')
mscAtmIfUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfUsageParameterControl.setStatus('obsolete')
mscAtmIfMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 85), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), )).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfMaxVpiBits.setStatus('mandatory')
mscAtmIfRemoteAtmInterfaceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 90), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfRemoteAtmInterfaceLabel.setStatus('mandatory')
mscAtmIfTxCellMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfTxCellMemory.setStatus('mandatory')
mscAtmIfFaultHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65535))).clone(namedValues=NamedValues(("n0", 0), ("infinity", 65535))).clone('infinity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfFaultHoldOffTime.setStatus('mandatory')
mscAtmIfCtdCalculation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 110, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCtdCalculation.setStatus('mandatory')
mscAtmIfLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 120), )
if mibBuilder.loadTexts: mscAtmIfLbkTable.setStatus('mandatory')
mscAtmIfLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfLbkEntry.setStatus('mandatory')
mscAtmIfSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 120, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfSegLinkSideLoopback.setStatus('mandatory')
mscAtmIfSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfSegSwitchSideLoopback.setStatus('mandatory')
mscAtmIfEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfEndToEndLoopback.setStatus('mandatory')
mscAtmIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130), )
if mibBuilder.loadTexts: mscAtmIfStateTable.setStatus('mandatory')
mscAtmIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfStateEntry.setStatus('mandatory')
mscAtmIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfAdminState.setStatus('mandatory')
mscAtmIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfOperationalState.setStatus('mandatory')
mscAtmIfUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfUsageState.setStatus('mandatory')
mscAtmIfAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfAvailabilityStatus.setStatus('mandatory')
mscAtmIfProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfProceduralStatus.setStatus('mandatory')
mscAtmIfControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfControlStatus.setStatus('mandatory')
mscAtmIfAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfAlarmStatus.setStatus('mandatory')
mscAtmIfStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfStandbyStatus.setStatus('mandatory')
mscAtmIfUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 130, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfUnknownStatus.setStatus('mandatory')
mscAtmIfOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 140), )
if mibBuilder.loadTexts: mscAtmIfOperTable.setStatus('mandatory')
mscAtmIfOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 140, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfOperEntry.setStatus('mandatory')
mscAtmIfTxCellMemoryAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 140, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellMemoryAvailable.setStatus('mandatory')
mscAtmIfTxCellMemoryCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 140, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellMemoryCongestionState.setStatus('mandatory')
mscAtmIfUnshapedTransmitQueueingOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 140, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfUnshapedTransmitQueueingOper.setStatus('obsolete')
mscAtmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150), )
if mibBuilder.loadTexts: mscAtmIfStatsTable.setStatus('mandatory')
mscAtmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"))
if mibBuilder.loadTexts: mscAtmIfStatsEntry.setStatus('mandatory')
mscAtmIfTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTransmittedCells.setStatus('obsolete')
mscAtmIfTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCell.setStatus('mandatory')
mscAtmIfTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellClp.setStatus('mandatory')
mscAtmIfTxCellEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellEfci.setStatus('mandatory')
mscAtmIfTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellDiscard.setStatus('mandatory')
mscAtmIfTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 17), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellDiscardClp.setStatus('mandatory')
mscAtmIfTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 18), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxFrameDiscard.setStatus('mandatory')
mscAtmIfTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 19), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxFrameDiscardClp.setStatus('mandatory')
mscAtmIfReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfReceivedCells.setStatus('obsolete')
mscAtmIfRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 23), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxCell.setStatus('mandatory')
mscAtmIfRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 24), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxCellClp.setStatus('mandatory')
mscAtmIfRxCellEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 25), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxCellEfci.setStatus('mandatory')
mscAtmIfRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 26), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxCellDiscard.setStatus('mandatory')
mscAtmIfRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 27), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxCellDiscardClp.setStatus('mandatory')
mscAtmIfRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 28), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxFrameDiscard.setStatus('mandatory')
mscAtmIfRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 29), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxFrameDiscardClp.setStatus('mandatory')
mscAtmIfDroppedRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfDroppedRxCells.setStatus('mandatory')
mscAtmIfLastDroppedRxCellConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 31), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfLastDroppedRxCellConnection.setStatus('mandatory')
mscAtmIfAal5RxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfAal5RxErrors.setStatus('mandatory')
mscAtmIfLastAal5RxErrorConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 33), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfLastAal5RxErrorConnection.setStatus('mandatory')
mscAtmIfLrcFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfLrcFrameErrors.setStatus('mandatory')
mscAtmIfLastLrcFrameErrorConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 35), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfLastLrcFrameErrorConnection.setStatus('mandatory')
mscAtmIfAal5RxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfAal5RxAborts.setStatus('mandatory')
mscAtmIfLastAal5RxAbortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 50), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfLastAal5RxAbortConnection.setStatus('mandatory')
mscAtmIfTxLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 59), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxLinkUtilization.setStatus('mandatory')
mscAtmIfRxLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 150, 1, 60), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfRxLinkUtilization.setStatus('mandatory')
mscAtmIfTxCellMemoryThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 441), )
if mibBuilder.loadTexts: mscAtmIfTxCellMemoryThresholdTable.setStatus('mandatory')
mscAtmIfTxCellMemoryThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 441, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfTxCellMemoryThresholdIndex"))
if mibBuilder.loadTexts: mscAtmIfTxCellMemoryThresholdEntry.setStatus('mandatory')
mscAtmIfTxCellMemoryThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 441, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfTxCellMemoryThresholdIndex.setStatus('mandatory')
mscAtmIfTxCellMemoryThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 441, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfTxCellMemoryThresholdValue.setStatus('mandatory')
mscAtmIfOpShapingRatesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 839), )
if mibBuilder.loadTexts: mscAtmIfOpShapingRatesTable.setStatus('mandatory')
mscAtmIfOpShapingRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 839, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfOpShapingRatesIndex"))
if mibBuilder.loadTexts: mscAtmIfOpShapingRatesEntry.setStatus('mandatory')
mscAtmIfOpShapingRatesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 839, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: mscAtmIfOpShapingRatesIndex.setStatus('mandatory')
mscAtmIfOpShapingRatesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 839, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfOpShapingRatesValue.setStatus('mandatory')
mscAtmIfShapeUsageTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 840), )
if mibBuilder.loadTexts: mscAtmIfShapeUsageTable.setStatus('mandatory')
mscAtmIfShapeUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 840, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfShapeUsageIndex"))
if mibBuilder.loadTexts: mscAtmIfShapeUsageEntry.setStatus('mandatory')
mscAtmIfShapeUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 840, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: mscAtmIfShapeUsageIndex.setStatus('mandatory')
mscAtmIfShapeUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 840, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfShapeUsageValue.setStatus('mandatory')
mscAtmIfConnMap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2))
mscAtmIfConnMapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfConnMapRowStatusTable.setStatus('mandatory')
mscAtmIfConnMapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapIndex"))
if mibBuilder.loadTexts: mscAtmIfConnMapRowStatusEntry.setStatus('mandatory')
mscAtmIfConnMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfConnMapRowStatus.setStatus('mandatory')
mscAtmIfConnMapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapComponentName.setStatus('mandatory')
mscAtmIfConnMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapStorageType.setStatus('mandatory')
mscAtmIfConnMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfConnMapIndex.setStatus('mandatory')
mscAtmIfConnMapVccProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfConnMapVccProvTable.setStatus('obsolete')
mscAtmIfConnMapVccProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapIndex"))
if mibBuilder.loadTexts: mscAtmIfConnMapVccProvEntry.setStatus('obsolete')
mscAtmIfConnMapNumVccsForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16128)).clone(768)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscAtmIfConnMapNumVccsForVpiZero.setStatus('obsolete')
mscAtmIfConnMapNumNonZeroVpisForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscAtmIfConnMapNumNonZeroVpisForVccs.setStatus('obsolete')
mscAtmIfConnMapFirstNonZeroVpiForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), )).clone(1)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscAtmIfConnMapFirstNonZeroVpiForVccs.setStatus('obsolete')
mscAtmIfConnMapNumVccsPerNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), )).clone(64)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscAtmIfConnMapNumVccsPerNonZeroVpi.setStatus('obsolete')
mscAtmIfConnMapOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfConnMapOperTable.setStatus('mandatory')
mscAtmIfConnMapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapIndex"))
if mibBuilder.loadTexts: mscAtmIfConnMapOperEntry.setStatus('mandatory')
mscAtmIfConnMapNumVccsForVpiZeroOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapNumVccsForVpiZeroOper.setStatus('mandatory')
mscAtmIfConnMapNumNonZeroVpisForVccsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapNumNonZeroVpisForVccsOper.setStatus('mandatory')
mscAtmIfConnMapFirstNonZeroVpiForVccsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 110, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapFirstNonZeroVpiForVccsOper.setStatus('mandatory')
mscAtmIfConnMapNumVccsPerNonZeroVpiOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 110, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ValueRangeConstraint(16384, 16384), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapNumVccsPerNonZeroVpiOper.setStatus('mandatory')
mscAtmIfConnMapOv = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120))
mscAtmIfConnMapOvRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 1), )
if mibBuilder.loadTexts: mscAtmIfConnMapOvRowStatusTable.setStatus('mandatory')
mscAtmIfConnMapOvRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapOvIndex"))
if mibBuilder.loadTexts: mscAtmIfConnMapOvRowStatusEntry.setStatus('mandatory')
mscAtmIfConnMapOvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapOvRowStatus.setStatus('mandatory')
mscAtmIfConnMapOvComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapOvComponentName.setStatus('mandatory')
mscAtmIfConnMapOvStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfConnMapOvStorageType.setStatus('mandatory')
mscAtmIfConnMapOvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfConnMapOvIndex.setStatus('mandatory')
mscAtmIfConnMapOvProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 100), )
if mibBuilder.loadTexts: mscAtmIfConnMapOvProvTable.setStatus('mandatory')
mscAtmIfConnMapOvProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfConnMapOvIndex"))
if mibBuilder.loadTexts: mscAtmIfConnMapOvProvEntry.setStatus('mandatory')
mscAtmIfConnMapOvNumVccsForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfConnMapOvNumVccsForVpiZero.setStatus('mandatory')
mscAtmIfConnMapOvNumNonZeroVpisForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfConnMapOvNumNonZeroVpisForVccs.setStatus('mandatory')
mscAtmIfConnMapOvFirstNonZeroVpiForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfConnMapOvFirstNonZeroVpiForVccs.setStatus('mandatory')
mscAtmIfConnMapOvNumVccsPerNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 2, 120, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ValueRangeConstraint(16384, 16384), )).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfConnMapOvNumVccsPerNonZeroVpi.setStatus('mandatory')
mscAtmIfCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3))
mscAtmIfCARowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfCARowStatusTable.setStatus('mandatory')
mscAtmIfCARowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"))
if mibBuilder.loadTexts: mscAtmIfCARowStatusEntry.setStatus('mandatory')
mscAtmIfCARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCARowStatus.setStatus('mandatory')
mscAtmIfCAComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAComponentName.setStatus('mandatory')
mscAtmIfCAStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAStorageType.setStatus('mandatory')
mscAtmIfCAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfCAIndex.setStatus('mandatory')
mscAtmIfCAProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100), )
if mibBuilder.loadTexts: mscAtmIfCAProvTable.setStatus('mandatory')
mscAtmIfCAProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"))
if mibBuilder.loadTexts: mscAtmIfCAProvEntry.setStatus('mandatory')
mscAtmIfCAMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxVpcs.setStatus('obsolete')
mscAtmIfCAMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16384), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxVccs.setStatus('mandatory')
mscAtmIfCAMinMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMinMulticastBranches.setStatus('mandatory')
mscAtmIfCAMaxMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16384), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxMulticastBranches.setStatus('mandatory')
mscAtmIfCAMaxVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxVpts.setStatus('obsolete')
mscAtmIfCAMinAutoSelectedVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMinAutoSelectedVci.setStatus('obsolete')
mscAtmIfCAMinAutoSelectedVciForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMinAutoSelectedVciForVpiZero.setStatus('mandatory')
mscAtmIfCAMinAutoSelectedVciForNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMinAutoSelectedVciForNonZeroVpi.setStatus('mandatory')
mscAtmIfCAPermittedSvcAtmServiceCategories = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAPermittedSvcAtmServiceCategories.setStatus('obsolete')
mscAtmIfCACbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("pool1", 1), ("pool2", 2), ("pool3", 3))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrPool.setStatus('obsolete')
mscAtmIfCACbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrCdvt.setStatus('obsolete')
mscAtmIfCACbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0)).clone(-10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrCellLossRatio.setStatus('obsolete')
mscAtmIfCASvcCbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCASvcCbrHoldingPriority.setStatus('obsolete')
mscAtmIfCASvcVbrRtHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCASvcVbrRtHoldingPriority.setStatus('obsolete')
mscAtmIfCASvcVbrNrtHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCASvcVbrNrtHoldingPriority.setStatus('obsolete')
mscAtmIfCAVbrRtPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("pool1", 1), ("pool2", 2), ("pool3", 3))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAVbrRtPool.setStatus('obsolete')
mscAtmIfCAVbrRtCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAVbrRtCdvt.setStatus('obsolete')
mscAtmIfCAVbrRtCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0)).clone(-10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAVbrRtCellLossRatio.setStatus('obsolete')
mscAtmIfCAVbrNrtPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("pool1", 1), ("pool2", 2), ("pool3", 3))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAVbrNrtPool.setStatus('obsolete')
mscAtmIfCAVbrNrtCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAVbrNrtCdvt.setStatus('obsolete')
mscAtmIfCAMaxCaVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 105), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4096), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxCaVpcs.setStatus('mandatory')
mscAtmIfCAMaxCaVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 106), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4096), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxCaVpts.setStatus('mandatory')
mscAtmIfCAVbrNrtCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0)).clone(-7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAVbrNrtCellLossRatio.setStatus('obsolete')
mscAtmIfCAUbrMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 120), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrMaxConnections.setStatus('obsolete')
mscAtmIfCAMinAutoSelectedVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 121), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMinAutoSelectedVpi.setStatus('mandatory')
mscAtmIfCAPermittedAtmServiceCategories = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 122), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAPermittedAtmServiceCategories.setStatus('mandatory')
mscAtmIfCAMaxAutoSelectedVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 125), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxAutoSelectedVpi.setStatus('mandatory')
mscAtmIfCAMaxAutoSelectedVciForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 126), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(767)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxAutoSelectedVciForVpiZero.setStatus('mandatory')
mscAtmIfCAMaxAutoSelectedVciForNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 100, 1, 127), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAMaxAutoSelectedVciForNonZeroVpi.setStatus('mandatory')
mscAtmIfCAOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110), )
if mibBuilder.loadTexts: mscAtmIfCAOperTable.setStatus('mandatory')
mscAtmIfCAOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"))
if mibBuilder.loadTexts: mscAtmIfCAOperEntry.setStatus('mandatory')
mscAtmIfCAActualMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAActualMaxVccs.setStatus('mandatory')
mscAtmIfCAPermanentVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPermanentVpcs.setStatus('mandatory')
mscAtmIfCAPermanentVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPermanentVpts.setStatus('mandatory')
mscAtmIfCAPermanentVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPermanentVccs.setStatus('mandatory')
mscAtmIfCASwitchedVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 30), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCASwitchedVccs.setStatus('mandatory')
mscAtmIfCASwitchedMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 40), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10752))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCASwitchedMulticastBranches.setStatus('mandatory')
mscAtmIfCAPermanentMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 55), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10752))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPermanentMulticastBranches.setStatus('mandatory')
mscAtmIfCATroubledVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCATroubledVpcs.setStatus('mandatory')
mscAtmIfCATroubledVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCATroubledVpts.setStatus('mandatory')
mscAtmIfCATroubledVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCATroubledVccs.setStatus('mandatory')
mscAtmIfCAUbrAvailableConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 80), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrAvailableConnections.setStatus('obsolete')
mscAtmIfCAConnectionPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 81), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAConnectionPoolUsage.setStatus('mandatory')
mscAtmIfCASwitchedVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 82), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCASwitchedVpcs.setStatus('mandatory')
mscAtmIfCAActualMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAActualMaxVpcs.setStatus('mandatory')
mscAtmIfCAActualMaxVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 110, 1, 106), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAActualMaxVpts.setStatus('mandatory')
mscAtmIfCAPmTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 120), )
if mibBuilder.loadTexts: mscAtmIfCAPmTable.setStatus('mandatory')
mscAtmIfCAPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPmEntry.setStatus('mandatory')
mscAtmIfCAOamFPmConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 120, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAOamFPmConnections.setStatus('mandatory')
mscAtmIfCAOamBrPmConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 120, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAOamBrPmConnections.setStatus('mandatory')
mscAtmIfCAOamCcConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 120, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAOamCcConnections.setStatus('mandatory')
mscAtmIfCABwPoolTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 293), )
if mibBuilder.loadTexts: mscAtmIfCABwPoolTable.setStatus('mandatory')
mscAtmIfCABwPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 293, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCABwPoolIndex"))
if mibBuilder.loadTexts: mscAtmIfCABwPoolEntry.setStatus('mandatory')
mscAtmIfCABwPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 293, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCABwPoolIndex.setStatus('mandatory')
mscAtmIfCABwPoolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 293, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCABwPoolValue.setStatus('mandatory')
mscAtmIfCAPoolRequBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 296), )
if mibBuilder.loadTexts: mscAtmIfCAPoolRequBwTable.setStatus('mandatory')
mscAtmIfCAPoolRequBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 296, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolRequBwIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolRequBwEntry.setStatus('mandatory')
mscAtmIfCAPoolRequBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 296, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCAPoolRequBwIndex.setStatus('mandatory')
mscAtmIfCAPoolRequBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 296, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolRequBwValue.setStatus('mandatory')
mscAtmIfCAPoolAdmitBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 299), )
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmitBwTable.setStatus('mandatory')
mscAtmIfCAPoolAdmitBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 299, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolAdmitBwIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmitBwEntry.setStatus('mandatory')
mscAtmIfCAPoolAdmitBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 299, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmitBwIndex.setStatus('mandatory')
mscAtmIfCAPoolAdmitBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 299, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmitBwValue.setStatus('mandatory')
mscAtmIfCAPoolAvailBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 300), )
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailBwTable.setStatus('obsolete')
mscAtmIfCAPoolAvailBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 300, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolAvailBwIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailBwEntry.setStatus('obsolete')
mscAtmIfCAPoolAvailBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailBwIndex.setStatus('obsolete')
mscAtmIfCAPoolAvailBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 300, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailBwValue.setStatus('obsolete')
mscAtmIfCAPoolProvBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 319), )
if mibBuilder.loadTexts: mscAtmIfCAPoolProvBwTable.setStatus('mandatory')
mscAtmIfCAPoolProvBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 319, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolProvBwIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolProvBwEntry.setStatus('mandatory')
mscAtmIfCAPoolProvBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 319, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCAPoolProvBwIndex.setStatus('mandatory')
mscAtmIfCAPoolProvBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 319, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolProvBwValue.setStatus('mandatory')
mscAtmIfCAPoolWaitAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 320), )
if mibBuilder.loadTexts: mscAtmIfCAPoolWaitAdmConnsTable.setStatus('mandatory')
mscAtmIfCAPoolWaitAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 320, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolWaitAdmConnsIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolWaitAdmConnsEntry.setStatus('mandatory')
mscAtmIfCAPoolWaitAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 320, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCAPoolWaitAdmConnsIndex.setStatus('mandatory')
mscAtmIfCAPoolWaitAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 320, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolWaitAdmConnsValue.setStatus('mandatory')
mscAtmIfCAPoolAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 321), )
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmConnsTable.setStatus('mandatory')
mscAtmIfCAPoolAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 321, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolAdmConnsIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmConnsEntry.setStatus('mandatory')
mscAtmIfCAPoolAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 321, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmConnsIndex.setStatus('mandatory')
mscAtmIfCAPoolAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 321, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolAdmConnsValue.setStatus('mandatory')
mscAtmIfCAPoolAvailableBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 326), )
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailableBwTable.setStatus('mandatory')
mscAtmIfCAPoolAvailableBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 326, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAPoolAvailableBwIndex"))
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailableBwEntry.setStatus('mandatory')
mscAtmIfCAPoolAvailableBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 326, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailableBwIndex.setStatus('mandatory')
mscAtmIfCAPoolAvailableBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 326, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAPoolAvailableBwValue.setStatus('mandatory')
mscAtmIfCACbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2))
mscAtmIfCACbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfCACbrRowStatusTable.setStatus('mandatory')
mscAtmIfCACbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCACbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCACbrRowStatusEntry.setStatus('mandatory')
mscAtmIfCACbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrRowStatus.setStatus('mandatory')
mscAtmIfCACbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCACbrComponentName.setStatus('mandatory')
mscAtmIfCACbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCACbrStorageType.setStatus('mandatory')
mscAtmIfCACbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfCACbrIndex.setStatus('mandatory')
mscAtmIfCACbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfCACbrProvTable.setStatus('mandatory')
mscAtmIfCACbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCACbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCACbrProvEntry.setStatus('mandatory')
mscAtmIfCACbrProvPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrProvPool.setStatus('mandatory')
mscAtmIfCACbrProvCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrProvCdvt.setStatus('mandatory')
mscAtmIfCACbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrCdv.setStatus('mandatory')
mscAtmIfCACbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrMaxCtd.setStatus('mandatory')
mscAtmIfCACbrProvClr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrProvClr.setStatus('mandatory')
mscAtmIfCACbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 60), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrTxQueueLimit.setStatus('mandatory')
mscAtmIfCACbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrHoldingPriority.setStatus('mandatory')
mscAtmIfCACbrSvcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrSvcHoldingPriority.setStatus('obsolete')
mscAtmIfCACbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrSvcMpHoldingPriority.setStatus('mandatory')
mscAtmIfCACbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 80), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrMinPerVcQueueLimit.setStatus('mandatory')
mscAtmIfCACbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 90), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1416905), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
mscAtmIfCACbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrEmissionPriority.setStatus('mandatory')
mscAtmIfCACbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrTrafficShaping.setStatus('mandatory')
mscAtmIfCACbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('minimumCdv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrShapeRecoupPolicy.setStatus('mandatory')
mscAtmIfCACbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1))).clone('common')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCACbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scr", 1), ("pcr", 2), ("ecr", 3))).clone('ecr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrWeightPolicy.setStatus('mandatory')
mscAtmIfCACbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrForceTagging.setStatus('mandatory')
mscAtmIfCACbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 100, 1, 170), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCACbrUsageParameterControl.setStatus('mandatory')
mscAtmIfCACbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfCACbrOperTable.setStatus('mandatory')
mscAtmIfCACbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCACbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCACbrOperEntry.setStatus('mandatory')
mscAtmIfCACbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCACbrEpdOffset.setStatus('mandatory')
mscAtmIfCARtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3))
mscAtmIfCARtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfCARtVbrRowStatusTable.setStatus('mandatory')
mscAtmIfCARtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCARtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCARtVbrRowStatusEntry.setStatus('mandatory')
mscAtmIfCARtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrRowStatus.setStatus('mandatory')
mscAtmIfCARtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCARtVbrComponentName.setStatus('mandatory')
mscAtmIfCARtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCARtVbrStorageType.setStatus('mandatory')
mscAtmIfCARtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfCARtVbrIndex.setStatus('mandatory')
mscAtmIfCARtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100), )
if mibBuilder.loadTexts: mscAtmIfCARtVbrProvTable.setStatus('mandatory')
mscAtmIfCARtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCARtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCARtVbrProvEntry.setStatus('mandatory')
mscAtmIfCARtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrPool.setStatus('mandatory')
mscAtmIfCARtVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrCdvt.setStatus('mandatory')
mscAtmIfCARtVbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1268)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrCdv.setStatus('mandatory')
mscAtmIfCARtVbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrMaxCtd.setStatus('mandatory')
mscAtmIfCARtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrCellLossRatio.setStatus('mandatory')
mscAtmIfCARtVbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 60), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrTxQueueLimit.setStatus('mandatory')
mscAtmIfCARtVbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 160000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrMinPerVcQueueLimit.setStatus('mandatory')
mscAtmIfCARtVbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 75), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1416905), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
mscAtmIfCARtVbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrHoldingPriority.setStatus('mandatory')
mscAtmIfCARtVbrSvcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrSvcHoldingPriority.setStatus('obsolete')
mscAtmIfCARtVbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrSvcMpHoldingPriority.setStatus('mandatory')
mscAtmIfCARtVbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 82), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrEmissionPriority.setStatus('mandatory')
mscAtmIfCARtVbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrTrafficShaping.setStatus('mandatory')
mscAtmIfCARtVbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('minimumCdv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrShapeRecoupPolicy.setStatus('mandatory')
mscAtmIfCARtVbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCARtVbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrUsageParameterControl.setStatus('mandatory')
mscAtmIfCARtVbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scr", 1), ("pcr", 2), ("ecr", 3))).clone('ecr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrWeightPolicy.setStatus('mandatory')
mscAtmIfCARtVbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 100, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCARtVbrForceTagging.setStatus('mandatory')
mscAtmIfCARtVbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 110), )
if mibBuilder.loadTexts: mscAtmIfCARtVbrOperTable.setStatus('mandatory')
mscAtmIfCARtVbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCARtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCARtVbrOperEntry.setStatus('mandatory')
mscAtmIfCARtVbrOpUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCARtVbrOpUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCARtVbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 3, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCARtVbrEpdOffset.setStatus('mandatory')
mscAtmIfCANrtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4))
mscAtmIfCANrtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 1), )
if mibBuilder.loadTexts: mscAtmIfCANrtVbrRowStatusTable.setStatus('mandatory')
mscAtmIfCANrtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCANrtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCANrtVbrRowStatusEntry.setStatus('mandatory')
mscAtmIfCANrtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrRowStatus.setStatus('mandatory')
mscAtmIfCANrtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrComponentName.setStatus('mandatory')
mscAtmIfCANrtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrStorageType.setStatus('mandatory')
mscAtmIfCANrtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfCANrtVbrIndex.setStatus('mandatory')
mscAtmIfCANrtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100), )
if mibBuilder.loadTexts: mscAtmIfCANrtVbrProvTable.setStatus('mandatory')
mscAtmIfCANrtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCANrtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCANrtVbrProvEntry.setStatus('mandatory')
mscAtmIfCANrtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrPool.setStatus('mandatory')
mscAtmIfCANrtVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrCdvt.setStatus('mandatory')
mscAtmIfCANrtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrCellLossRatio.setStatus('mandatory')
mscAtmIfCANrtVbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrTxQueueLimit.setStatus('mandatory')
mscAtmIfCANrtVbrSvcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrSvcHoldingPriority.setStatus('obsolete')
mscAtmIfCANrtVbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 160000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrMinPerVcQueueLimit.setStatus('mandatory')
mscAtmIfCANrtVbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1416905), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
mscAtmIfCANrtVbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrSvcMpHoldingPriority.setStatus('mandatory')
mscAtmIfCANrtVbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrHoldingPriority.setStatus('mandatory')
mscAtmIfCANrtVbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrEmissionPriority.setStatus('mandatory')
mscAtmIfCANrtVbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrTrafficShaping.setStatus('mandatory')
mscAtmIfCANrtVbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('maximumEfficiency')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrShapeRecoupPolicy.setStatus('mandatory')
mscAtmIfCANrtVbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCANrtVbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrUsageParameterControl.setStatus('mandatory')
mscAtmIfCANrtVbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scr", 1), ("pcr", 2), ("ecr", 3))).clone('ecr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrWeightPolicy.setStatus('mandatory')
mscAtmIfCANrtVbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 100, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrForceTagging.setStatus('mandatory')
mscAtmIfCANrtVbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 110), )
if mibBuilder.loadTexts: mscAtmIfCANrtVbrOperTable.setStatus('mandatory')
mscAtmIfCANrtVbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCANrtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCANrtVbrOperEntry.setStatus('mandatory')
mscAtmIfCANrtVbrOpUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrOpUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCANrtVbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 4, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCANrtVbrEpdOffset.setStatus('mandatory')
mscAtmIfCAAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5))
mscAtmIfCAAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfCAAbrRowStatusTable.setStatus('mandatory')
mscAtmIfCAAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCAAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfCAAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrRowStatus.setStatus('mandatory')
mscAtmIfCAAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAAbrComponentName.setStatus('mandatory')
mscAtmIfCAAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAAbrStorageType.setStatus('mandatory')
mscAtmIfCAAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfCAAbrIndex.setStatus('mandatory')
mscAtmIfCAAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100), )
if mibBuilder.loadTexts: mscAtmIfCAAbrProvTable.setStatus('mandatory')
mscAtmIfCAAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCAAbrProvEntry.setStatus('mandatory')
mscAtmIfCAAbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrPool.setStatus('mandatory')
mscAtmIfCAAbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrCdvt.setStatus('mandatory')
mscAtmIfCAAbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrTxQueueLimit.setStatus('mandatory')
mscAtmIfCAAbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrMinPerVcQueueLimit.setStatus('mandatory')
mscAtmIfCAAbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 943396), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
mscAtmIfCAAbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrEmissionPriority.setStatus('mandatory')
mscAtmIfCAAbrFairnessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("mcr", 0), ("pcr", 2), ("pcrMinusMcr", 4))).clone('pcrMinusMcr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrFairnessPolicy.setStatus('mandatory')
mscAtmIfCAAbrFrttPortion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrFrttPortion.setStatus('mandatory')
mscAtmIfCAAbrAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("nonAbrInterworking", 5))).clone('abrSwitch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrAbrConnectionType.setStatus('mandatory')
mscAtmIfCAAbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrUsageParameterControl.setStatus('mandatory')
mscAtmIfCAAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777218)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrInitialCellRate.setStatus('mandatory')
mscAtmIfCAAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfCAAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfCAAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 26), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), )).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfCAAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), )).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrMaxTimeBetweenRmCell.setStatus('mandatory')
mscAtmIfCAAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), )).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfCAAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfCAAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16700000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrDgcraMaximumDelay.setStatus('mandatory')
mscAtmIfCAAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16700000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrDgcraMinimumDelay.setStatus('mandatory')
mscAtmIfCAAbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 100, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAAbrHoldingPriority.setStatus('mandatory')
mscAtmIfCAAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 110), )
if mibBuilder.loadTexts: mscAtmIfCAAbrOperTable.setStatus('mandatory')
mscAtmIfCAAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCAAbrOperEntry.setStatus('mandatory')
mscAtmIfCAAbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 5, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAAbrEpdOffset.setStatus('mandatory')
mscAtmIfCAUbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6))
mscAtmIfCAUbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfCAUbrRowStatusTable.setStatus('mandatory')
mscAtmIfCAUbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAUbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCAUbrRowStatusEntry.setStatus('mandatory')
mscAtmIfCAUbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrRowStatus.setStatus('mandatory')
mscAtmIfCAUbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrComponentName.setStatus('mandatory')
mscAtmIfCAUbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrStorageType.setStatus('mandatory')
mscAtmIfCAUbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfCAUbrIndex.setStatus('mandatory')
mscAtmIfCAUbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100), )
if mibBuilder.loadTexts: mscAtmIfCAUbrProvTable.setStatus('mandatory')
mscAtmIfCAUbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAUbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCAUbrProvEntry.setStatus('mandatory')
mscAtmIfCAUbrMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4096), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrMaxVpcs.setStatus('mandatory')
mscAtmIfCAUbrMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16384), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrMaxVccs.setStatus('mandatory')
mscAtmIfCAUbrMaxVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4096), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrMaxVpts.setStatus('mandatory')
mscAtmIfCAUbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrPool.setStatus('mandatory')
mscAtmIfCAUbrMinimumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrMinimumCellRate.setStatus('mandatory')
mscAtmIfCAUbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrTxQueueLimit.setStatus('mandatory')
mscAtmIfCAUbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrMinPerVcQueueLimit.setStatus('mandatory')
mscAtmIfCAUbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1416905), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
mscAtmIfCAUbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrEmissionPriority.setStatus('mandatory')
mscAtmIfCAUbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrTrafficShaping.setStatus('mandatory')
mscAtmIfCAUbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('maximumEfficiency')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrShapeRecoupPolicy.setStatus('mandatory')
mscAtmIfCAUbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCAUbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrUsageParameterControl.setStatus('mandatory')
mscAtmIfCAUbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("mcr", 0), ("pcr", 2), ("ecr", 3))).clone('pcr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrWeightPolicy.setStatus('mandatory')
mscAtmIfCAUbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrForceTagging.setStatus('mandatory')
mscAtmIfCAUbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrCdvt.setStatus('mandatory')
mscAtmIfCAUbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrHoldingPriority.setStatus('mandatory')
mscAtmIfCAUbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfCAUbrSvcMpHoldingPriority.setStatus('mandatory')
mscAtmIfCAUbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110), )
if mibBuilder.loadTexts: mscAtmIfCAUbrOperTable.setStatus('mandatory')
mscAtmIfCAUbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfCAUbrIndex"))
if mibBuilder.loadTexts: mscAtmIfCAUbrOperEntry.setStatus('mandatory')
mscAtmIfCAUbrOpUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrOpUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfCAUbrVpcUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrVpcUsage.setStatus('mandatory')
mscAtmIfCAUbrVccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrVccUsage.setStatus('mandatory')
mscAtmIfCAUbrVptUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrVptUsage.setStatus('mandatory')
mscAtmIfCAUbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 3, 6, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfCAUbrEpdOffset.setStatus('mandatory')
mscAtmIfVpc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4))
mscAtmIfVpcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcRowStatusTable.setStatus('mandatory')
mscAtmIfVpcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcRowStatus.setStatus('mandatory')
mscAtmIfVpcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcComponentName.setStatus('mandatory')
mscAtmIfVpcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStorageType.setStatus('mandatory')
mscAtmIfVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mscAtmIfVpcIndex.setStatus('mandatory')
mscAtmIfVpcStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 100), )
if mibBuilder.loadTexts: mscAtmIfVpcStateTable.setStatus('mandatory')
mscAtmIfVpcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcStateEntry.setStatus('mandatory')
mscAtmIfVpcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcAdminState.setStatus('mandatory')
mscAtmIfVpcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcOperationalState.setStatus('mandatory')
mscAtmIfVpcUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcUsageState.setStatus('mandatory')
mscAtmIfVpcOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 110), )
if mibBuilder.loadTexts: mscAtmIfVpcOperTable.setStatus('mandatory')
mscAtmIfVpcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcOperEntry.setStatus('mandatory')
mscAtmIfVpcConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcConnectionPointType.setStatus('mandatory')
mscAtmIfVpcConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 115), )
if mibBuilder.loadTexts: mscAtmIfVpcConnInfoTable.setStatus('mandatory')
mscAtmIfVpcConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 115, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcConnInfoEntry.setStatus('mandatory')
mscAtmIfVpcDistributionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 115, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipoint", 1))).clone('pointToPoint')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcDistributionType.setStatus('mandatory')
mscAtmIfVpcNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 115, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcNumLeaves.setStatus('mandatory')
mscAtmIfVpcCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 115, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fromLink", 0), ("toLink", 1), ("notApplicable", 2))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcCallDirection.setStatus('mandatory')
mscAtmIfVpcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120), )
if mibBuilder.loadTexts: mscAtmIfVpcStatusTable.setStatus('mandatory')
mscAtmIfVpcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcStatusEntry.setStatus('mandatory')
mscAtmIfVpcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcOperStatus.setStatus('mandatory')
mscAtmIfVpcLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLocalFailureCause.setStatus('mandatory')
mscAtmIfVpcTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTroubled.setStatus('mandatory')
mscAtmIfVpcSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcSegLinkSideLoopbackState.setStatus('mandatory')
mscAtmIfVpcSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcSegSwitchSideLoopbackState.setStatus('mandatory')
mscAtmIfVpcEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcEndToEndLoopbackState.setStatus('mandatory')
mscAtmIfVpcRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxOamCellCongestionState.setStatus('mandatory')
mscAtmIfVpcAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcAisState.setStatus('mandatory')
mscAtmIfVpcRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRdiState.setStatus('mandatory')
mscAtmIfVpcTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130), )
if mibBuilder.loadTexts: mscAtmIfVpcTrafficTable.setStatus('mandatory')
mscAtmIfVpcTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTrafficEntry.setStatus('mandatory')
mscAtmIfVpcTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxTrafficDescType.setStatus('obsolete')
mscAtmIfVpcTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxQosClass.setStatus('obsolete')
mscAtmIfVpcFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcFwdQosClass.setStatus('obsolete')
mscAtmIfVpcTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxQueueLength.setStatus('obsolete')
mscAtmIfVpcTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxQueueCongestionState.setStatus('obsolete')
mscAtmIfVpcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcHoldingPriority.setStatus('obsolete')
mscAtmIfVpcRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxTrafficDescType.setStatus('obsolete')
mscAtmIfVpcRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxQosClass.setStatus('obsolete')
mscAtmIfVpcBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcBwdQosClass.setStatus('obsolete')
mscAtmIfVpcAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcAtmServiceCategory.setStatus('obsolete')
mscAtmIfVpcTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTrafficShaping.setStatus('obsolete')
mscAtmIfVpcBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcBearerClassBbc.setStatus('obsolete')
mscAtmIfVpcTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVpcClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcClippingBbc.setStatus('obsolete')
mscAtmIfVpcUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVpcBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcBestEffort.setStatus('obsolete')
mscAtmIfVpcUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcUsageParameterControl.setStatus('obsolete')
mscAtmIfVpcTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxFrameDiscard.setStatus('obsolete')
mscAtmIfVpcRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxFrameDiscard.setStatus('obsolete')
mscAtmIfVpcBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcBandwidthElastic.setStatus('obsolete')
mscAtmIfVpcBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcBandwidthReduction.setStatus('obsolete')
mscAtmIfVpcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140), )
if mibBuilder.loadTexts: mscAtmIfVpcStatsTable.setStatus('mandatory')
mscAtmIfVpcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcStatsEntry.setStatus('mandatory')
mscAtmIfVpcStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsTxCell.setStatus('mandatory')
mscAtmIfVpcStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsTxCellClp.setStatus('mandatory')
mscAtmIfVpcTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxDiscard.setStatus('obsolete')
mscAtmIfVpcTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxDiscardClp.setStatus('obsolete')
mscAtmIfVpcStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsTxCellDiscard.setStatus('mandatory')
mscAtmIfVpcStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsTxCellDiscardClp.setStatus('mandatory')
mscAtmIfVpcStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsTxFrameDiscard.setStatus('mandatory')
mscAtmIfVpcStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsTxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVpcStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxCell.setStatus('mandatory')
mscAtmIfVpcStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxCellClp.setStatus('mandatory')
mscAtmIfVpcRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxDiscard.setStatus('obsolete')
mscAtmIfVpcRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxDiscardClp.setStatus('obsolete')
mscAtmIfVpcStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxCellDiscard.setStatus('mandatory')
mscAtmIfVpcStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxCellDiscardClp.setStatus('mandatory')
mscAtmIfVpcStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxFrameDiscard.setStatus('mandatory')
mscAtmIfVpcStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVpcStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
mscAtmIfVpcStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
mscAtmIfVpcStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxAal5FrameError.setStatus('mandatory')
mscAtmIfVpcStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcStatsRxAal5FrameAbort.setStatus('mandatory')
mscAtmIfVpcPerfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150), )
if mibBuilder.loadTexts: mscAtmIfVpcPerfTable.setStatus('mandatory')
mscAtmIfVpcPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcPerfEntry.setStatus('mandatory')
mscAtmIfVpcLastMinimumCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLastMinimumCtd.setStatus('mandatory')
mscAtmIfVpcLastMaximumCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLastMaximumCtd.setStatus('mandatory')
mscAtmIfVpcLastAverageCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLastAverageCtd.setStatus('mandatory')
mscAtmIfVpcCurrentCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcCurrentCtd.setStatus('mandatory')
mscAtmIfVpcLastCtdSampleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 150, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLastCtdSampleSize.setStatus('mandatory')
mscAtmIfVpcTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 294), )
if mibBuilder.loadTexts: mscAtmIfVpcTxTdpTable.setStatus('obsolete')
mscAtmIfVpcTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 294, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTxTdpEntry.setStatus('obsolete')
mscAtmIfVpcTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVpcTxTdpIndex.setStatus('obsolete')
mscAtmIfVpcTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxTdpValue.setStatus('obsolete')
mscAtmIfVpcRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 295), )
if mibBuilder.loadTexts: mscAtmIfVpcRxTdpTable.setStatus('obsolete')
mscAtmIfVpcRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 295, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcRxTdpEntry.setStatus('obsolete')
mscAtmIfVpcRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVpcRxTdpIndex.setStatus('obsolete')
mscAtmIfVpcRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcRxTdpValue.setStatus('obsolete')
mscAtmIfVpcTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 352), )
if mibBuilder.loadTexts: mscAtmIfVpcTxQThreshTable.setStatus('obsolete')
mscAtmIfVpcTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 352, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTxQThreshEntry.setStatus('obsolete')
mscAtmIfVpcTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVpcTxQThreshIndex.setStatus('obsolete')
mscAtmIfVpcTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTxQThreshValue.setStatus('obsolete')
mscAtmIfVpcFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 357), )
if mibBuilder.loadTexts: mscAtmIfVpcFqpTable.setStatus('obsolete')
mscAtmIfVpcFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 357, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcFqpEntry.setStatus('obsolete')
mscAtmIfVpcFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcFqpIndex.setStatus('obsolete')
mscAtmIfVpcFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcFqpValue.setStatus('obsolete')
mscAtmIfVpcBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 358), )
if mibBuilder.loadTexts: mscAtmIfVpcBqpTable.setStatus('obsolete')
mscAtmIfVpcBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 358, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcBqpEntry.setStatus('obsolete')
mscAtmIfVpcBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcBqpIndex.setStatus('obsolete')
mscAtmIfVpcBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcBqpValue.setStatus('obsolete')
mscAtmIfVpcVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2))
mscAtmIfVpcVpdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdRowStatusTable.setStatus('mandatory')
mscAtmIfVpcVpdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcVpdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdRowStatus.setStatus('mandatory')
mscAtmIfVpcVpdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdComponentName.setStatus('mandatory')
mscAtmIfVpcVpdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdStorageType.setStatus('mandatory')
mscAtmIfVpcVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcVpdIndex.setStatus('mandatory')
mscAtmIfVpcVpdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdLbkTable.setStatus('mandatory')
mscAtmIfVpcVpdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdLbkEntry.setStatus('mandatory')
mscAtmIfVpcVpdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdSegLinkSideLoopback.setStatus('mandatory')
mscAtmIfVpcVpdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdSegSwitchSideLoopback.setStatus('mandatory')
mscAtmIfVpcVpdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdEndToEndLoopback.setStatus('mandatory')
mscAtmIfVpcVpdMCastConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipointRoot", 1), ("pointToMultipointLeaf", 2))).clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdMCastConnectionType.setStatus('mandatory')
mscAtmIfVpcVpdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTrafficTable.setStatus('mandatory')
mscAtmIfVpcVpdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTrafficEntry.setStatus('mandatory')
mscAtmIfVpcVpdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTxTrafficDescType.setStatus('obsolete')
mscAtmIfVpcVpdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTxQosClass.setStatus('obsolete')
mscAtmIfVpcVpdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdFwdQosClass.setStatus('obsolete')
mscAtmIfVpcVpdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdHoldingPriority.setStatus('obsolete')
mscAtmIfVpcVpdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdRxTrafficDescType.setStatus('obsolete')
mscAtmIfVpcVpdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdRxQosClass.setStatus('obsolete')
mscAtmIfVpcVpdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdBwdQosClass.setStatus('obsolete')
mscAtmIfVpcVpdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdAtmServiceCategory.setStatus('obsolete')
mscAtmIfVpcVpdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTrafficShaping.setStatus('obsolete')
mscAtmIfVpcVpdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVpcVpdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdUsageParameterControl.setStatus('obsolete')
mscAtmIfVpcVpdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdBearerClassBbc.setStatus('obsolete')
mscAtmIfVpcVpdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVpcVpdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdClippingBbc.setStatus('obsolete')
mscAtmIfVpcVpdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdBestEffort.setStatus('obsolete')
mscAtmIfVpcVpdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdFwdFrameDiscard.setStatus('obsolete')
mscAtmIfVpcVpdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdBwdFrameDiscard.setStatus('obsolete')
mscAtmIfVpcVpdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 111), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdAcctTable.setStatus('mandatory')
mscAtmIfVpcVpdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 111, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdAcctEntry.setStatus('mandatory')
mscAtmIfVpcVpdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdCorrelationTag.setStatus('mandatory')
mscAtmIfVpcVpdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 297), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTxTdpTable.setStatus('obsolete')
mscAtmIfVpcVpdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 297, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTxTdpEntry.setStatus('obsolete')
mscAtmIfVpcVpdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTxTdpIndex.setStatus('obsolete')
mscAtmIfVpcVpdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTxTdpValue.setStatus('obsolete')
mscAtmIfVpcVpdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 298), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdRxTdpTable.setStatus('obsolete')
mscAtmIfVpcVpdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 298, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdRxTdpEntry.setStatus('obsolete')
mscAtmIfVpcVpdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVpcVpdRxTdpIndex.setStatus('obsolete')
mscAtmIfVpcVpdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdRxTdpValue.setStatus('obsolete')
mscAtmIfVpcVpdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 359), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdFqpTable.setStatus('obsolete')
mscAtmIfVpcVpdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 359, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdFqpEntry.setStatus('obsolete')
mscAtmIfVpcVpdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcVpdFqpIndex.setStatus('obsolete')
mscAtmIfVpcVpdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdFqpValue.setStatus('obsolete')
mscAtmIfVpcVpdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 360), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdBqpTable.setStatus('obsolete')
mscAtmIfVpcVpdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 360, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdBqpEntry.setStatus('obsolete')
mscAtmIfVpcVpdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcVpdBqpIndex.setStatus('obsolete')
mscAtmIfVpcVpdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdBqpValue.setStatus('obsolete')
mscAtmIfVpcVpdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2))
mscAtmIfVpcVpdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRowStatusTable.setStatus('mandatory')
mscAtmIfVpcVpdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRowStatus.setStatus('mandatory')
mscAtmIfVpcVpdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmComponentName.setStatus('mandatory')
mscAtmIfVpcVpdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmStorageType.setStatus('mandatory')
mscAtmIfVpcVpdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmIndex.setStatus('mandatory')
mscAtmIfVpcVpdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmProvTable.setStatus('mandatory')
mscAtmIfVpcVpdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmProvEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVpcVpdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmFwdQosClass.setStatus('mandatory')
mscAtmIfVpcVpdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxQueueLimit.setStatus('mandatory')
mscAtmIfVpcVpdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmHoldingPriority.setStatus('mandatory')
mscAtmIfVpcVpdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVpcVpdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBwdQosClass.setStatus('mandatory')
mscAtmIfVpcVpdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVpcVpdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTrafficShaping.setStatus('mandatory')
mscAtmIfVpcVpdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVpcVpdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmWeight.setStatus('mandatory')
mscAtmIfVpcVpdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmForceTagging.setStatus('mandatory')
mscAtmIfVpcVpdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVpcVpdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVpcVpdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVpcVpdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmClippingBbc.setStatus('mandatory')
mscAtmIfVpcVpdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBestEffort.setStatus('mandatory')
mscAtmIfVpcVpdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVpcVpdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVpcVpdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 456), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxTdpTable.setStatus('mandatory')
mscAtmIfVpcVpdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVpcVpdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmTxTdpValue.setStatus('mandatory')
mscAtmIfVpcVpdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 457), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRxTdpTable.setStatus('mandatory')
mscAtmIfVpcVpdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVpcVpdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmRxTdpValue.setStatus('mandatory')
mscAtmIfVpcVpdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 458), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmFqpTable.setStatus('mandatory')
mscAtmIfVpcVpdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmFqpEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmFqpIndex.setStatus('mandatory')
mscAtmIfVpcVpdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmFqpValue.setStatus('mandatory')
mscAtmIfVpcVpdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 459), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBqpTable.setStatus('mandatory')
mscAtmIfVpcVpdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBqpEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBqpIndex.setStatus('mandatory')
mscAtmIfVpcVpdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmBqpValue.setStatus('mandatory')
mscAtmIfVpcVpdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2))
mscAtmIfVpcVpdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrComponentName.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrStorageType.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrIndex.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrProvTable.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrProvEntry.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrDgcraMaximumDelay.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrDgcraMinimumDelay.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVpcVpdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdTmAbrFarEndInitialCellRate.setStatus('mandatory')
mscAtmIfVpcVpdPm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3))
mscAtmIfVpcVpdPmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmRowStatusTable.setStatus('mandatory')
mscAtmIfVpcVpdPmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcVpdPmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmRowStatus.setStatus('mandatory')
mscAtmIfVpcVpdPmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmComponentName.setStatus('mandatory')
mscAtmIfVpcVpdPmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmStorageType.setStatus('mandatory')
mscAtmIfVpcVpdPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmIndex.setStatus('mandatory')
mscAtmIfVpcVpdPmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 100), )
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmProvTable.setStatus('mandatory')
mscAtmIfVpcVpdPmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcVpdPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmProvEntry.setStatus('mandatory')
mscAtmIfVpcVpdPmSegSwitchSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 100, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmSegSwitchSideMeasurement.setStatus('mandatory')
mscAtmIfVpcVpdPmSegLinkSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 100, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmSegLinkSideMeasurement.setStatus('mandatory')
mscAtmIfVpcVpdPmControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 2, 3, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("autoStart", 0), ("onDemand", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcVpdPmControlMode.setStatus('mandatory')
mscAtmIfVpcLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3))
mscAtmIfVpcLoopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcLoopRowStatusTable.setStatus('mandatory')
mscAtmIfVpcLoopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcLoopIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcLoopRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcLoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVpcLoopRowStatus.setStatus('mandatory')
mscAtmIfVpcLoopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLoopComponentName.setStatus('mandatory')
mscAtmIfVpcLoopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcLoopStorageType.setStatus('mandatory')
mscAtmIfVpcLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcLoopIndex.setStatus('mandatory')
mscAtmIfVpcTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9))
mscAtmIfVpcTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcTmRowStatusTable.setStatus('mandatory')
mscAtmIfVpcTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmRowStatus.setStatus('mandatory')
mscAtmIfVpcTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmComponentName.setStatus('mandatory')
mscAtmIfVpcTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmStorageType.setStatus('mandatory')
mscAtmIfVpcTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcTmIndex.setStatus('mandatory')
mscAtmIfVpcTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100), )
if mibBuilder.loadTexts: mscAtmIfVpcTmOperTable.setStatus('mandatory')
mscAtmIfVpcTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmOperEntry.setStatus('mandatory')
mscAtmIfVpcTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVpcTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQosClass.setStatus('mandatory')
mscAtmIfVpcTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQueueLength.setStatus('mandatory')
mscAtmIfVpcTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQueueCongestionState.setStatus('mandatory')
mscAtmIfVpcTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmHoldingPriority.setStatus('mandatory')
mscAtmIfVpcTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVpcTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14), ("sameAsFwd", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmRxQosClass.setStatus('mandatory')
mscAtmIfVpcTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVpcTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTrafficShaping.setStatus('mandatory')
mscAtmIfVpcTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVpcTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVpcTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmClippingBbc.setStatus('mandatory')
mscAtmIfVpcTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVpcTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmBestEffort.setStatus('mandatory')
mscAtmIfVpcTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmForceTagging.setStatus('mandatory')
mscAtmIfVpcTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmWeight.setStatus('mandatory')
mscAtmIfVpcTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVpcTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVpcTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVpcTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmBandwidthElastic.setStatus('mandatory')
mscAtmIfVpcTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmBandwidthReduction.setStatus('mandatory')
mscAtmIfVpcTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVpcTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 451), )
if mibBuilder.loadTexts: mscAtmIfVpcTmTxTdpTable.setStatus('mandatory')
mscAtmIfVpcTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 451, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVpcTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVpcTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVpcTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxTdpValue.setStatus('mandatory')
mscAtmIfVpcTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 452), )
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQThreshTable.setStatus('mandatory')
mscAtmIfVpcTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 452, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQThreshEntry.setStatus('mandatory')
mscAtmIfVpcTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQThreshIndex.setStatus('mandatory')
mscAtmIfVpcTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTxQThreshValue.setStatus('mandatory')
mscAtmIfVpcTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 453), )
if mibBuilder.loadTexts: mscAtmIfVpcTmRxTdpTable.setStatus('mandatory')
mscAtmIfVpcTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 453, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVpcTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVpcTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVpcTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmRxTdpValue.setStatus('mandatory')
mscAtmIfVpcTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 454), )
if mibBuilder.loadTexts: mscAtmIfVpcTmTqpTable.setStatus('mandatory')
mscAtmIfVpcTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 454, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmTqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmTqpEntry.setStatus('mandatory')
mscAtmIfVpcTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcTmTqpIndex.setStatus('mandatory')
mscAtmIfVpcTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmTqpValue.setStatus('mandatory')
mscAtmIfVpcTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 455), )
if mibBuilder.loadTexts: mscAtmIfVpcTmRqpTable.setStatus('mandatory')
mscAtmIfVpcTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 455, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmRqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmRqpEntry.setStatus('mandatory')
mscAtmIfVpcTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVpcTmRqpIndex.setStatus('mandatory')
mscAtmIfVpcTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmRqpValue.setStatus('mandatory')
mscAtmIfVpcTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2))
mscAtmIfVpcTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVpcTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVpcTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrComponentName.setStatus('mandatory')
mscAtmIfVpcTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrStorageType.setStatus('mandatory')
mscAtmIfVpcTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrIndex.setStatus('mandatory')
mscAtmIfVpcTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrOperTable.setStatus('mandatory')
mscAtmIfVpcTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrOperEntry.setStatus('mandatory')
mscAtmIfVpcTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVpcTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVpcTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVpcTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVpcTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVpcTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVpcTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
mscAtmIfVpcTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVpcTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVpcTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrForwardRmCellLimit.setStatus('mandatory')
mscAtmIfVpcTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrTxRateChangeInfo.setStatus('mandatory')
mscAtmIfVpcTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrAcrRateChangeInfo.setStatus('mandatory')
mscAtmIfVpcTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrTxFwdRmCells.setStatus('mandatory')
mscAtmIfVpcTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 9, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcTmAbrRxEfci.setStatus('mandatory')
mscAtmIfVpcPm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13))
mscAtmIfVpcPmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 1), )
if mibBuilder.loadTexts: mscAtmIfVpcPmRowStatusTable.setStatus('mandatory')
mscAtmIfVpcPmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcPmRowStatusEntry.setStatus('mandatory')
mscAtmIfVpcPmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmRowStatus.setStatus('mandatory')
mscAtmIfVpcPmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmComponentName.setStatus('mandatory')
mscAtmIfVpcPmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmStorageType.setStatus('mandatory')
mscAtmIfVpcPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("linkSide", 0), ("switchSide", 1))))
if mibBuilder.loadTexts: mscAtmIfVpcPmIndex.setStatus('mandatory')
mscAtmIfVpcPmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 10), )
if mibBuilder.loadTexts: mscAtmIfVpcPmStatusTable.setStatus('mandatory')
mscAtmIfVpcPmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcPmStatusEntry.setStatus('mandatory')
mscAtmIfVpcPmClrMeasurementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inactive", 0), ("activating", 1), ("active", 2), ("activationFailed", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmClrMeasurementStatus.setStatus('mandatory')
mscAtmIfVpcPmArMeasurementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inactive", 0), ("activating", 1), ("active", 2), ("activationFailed", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmArMeasurementStatus.setStatus('mandatory')
mscAtmIfVpcPmFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 0), ("unknownCause", 1), ("softwareResourcesUnavailable", 2), ("hardwareResourcesUnavailable", 3), ("remoteEndNoResponse", 4), ("activationCollision", 5), ("remoteEndRejectedActivation", 6), ("pcrUnsupported", 7), ("nextHopCardUnsupported", 8))).clone('noError')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFailureCause.setStatus('mandatory')
mscAtmIfVpcPmFwdClrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11), )
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdClrTable.setStatus('mandatory')
mscAtmIfVpcPmFwdClrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdClrEntry.setStatus('mandatory')
mscAtmIfVpcPmFwdLastSampleUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdLastSampleUserCellsRx0.setStatus('mandatory')
mscAtmIfVpcPmFwdLastSampleUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdLastSampleUserCellsTx0.setStatus('mandatory')
mscAtmIfVpcPmFwdLastSampleClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 3), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdLastSampleClr0.setStatus('mandatory')
mscAtmIfVpcPmFwdLastSampleUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdLastSampleUserCellsRx01.setStatus('mandatory')
mscAtmIfVpcPmFwdLastSampleUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdLastSampleUserCellsTx01.setStatus('mandatory')
mscAtmIfVpcPmFwdLastSampleClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 6), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdLastSampleClr01.setStatus('mandatory')
mscAtmIfVpcPmFwdTotalClrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdTotalClrInterval.setStatus('mandatory')
mscAtmIfVpcPmFwdTotalUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdTotalUserCellsRx0.setStatus('mandatory')
mscAtmIfVpcPmFwdTotalUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdTotalUserCellsTx0.setStatus('mandatory')
mscAtmIfVpcPmFwdAverageClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 10), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdAverageClr0.setStatus('mandatory')
mscAtmIfVpcPmFwdMaximumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 11), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdMaximumClr0.setStatus('mandatory')
mscAtmIfVpcPmFwdMinimumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 12), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdMinimumClr0.setStatus('mandatory')
mscAtmIfVpcPmFwdTotalUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdTotalUserCellsRx01.setStatus('mandatory')
mscAtmIfVpcPmFwdTotalUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdTotalUserCellsTx01.setStatus('mandatory')
mscAtmIfVpcPmFwdAverageClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 15), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdAverageClr01.setStatus('mandatory')
mscAtmIfVpcPmFwdMaximumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 16), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdMaximumClr01.setStatus('mandatory')
mscAtmIfVpcPmFwdMinimumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 17), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdMinimumClr01.setStatus('mandatory')
mscAtmIfVpcPmFwdPmCellDiscardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 11, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmFwdPmCellDiscardCount.setStatus('mandatory')
mscAtmIfVpcPmBwdClrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12), )
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdClrTable.setStatus('mandatory')
mscAtmIfVpcPmBwdClrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdClrEntry.setStatus('mandatory')
mscAtmIfVpcPmBwdLastSampleUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdLastSampleUserCellsRx0.setStatus('mandatory')
mscAtmIfVpcPmBwdLastSampleUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdLastSampleUserCellsTx0.setStatus('mandatory')
mscAtmIfVpcPmBwdLastSampleClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 3), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdLastSampleClr0.setStatus('mandatory')
mscAtmIfVpcPmBwdLastSampleUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdLastSampleUserCellsRx01.setStatus('mandatory')
mscAtmIfVpcPmBwdLastSampleUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdLastSampleUserCellsTx01.setStatus('mandatory')
mscAtmIfVpcPmBwdLastSampleClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 6), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdLastSampleClr01.setStatus('mandatory')
mscAtmIfVpcPmBwdTotalClrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdTotalClrInterval.setStatus('mandatory')
mscAtmIfVpcPmBwdTotalUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdTotalUserCellsRx0.setStatus('mandatory')
mscAtmIfVpcPmBwdTotalUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdTotalUserCellsTx0.setStatus('mandatory')
mscAtmIfVpcPmBwdAverageClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 10), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdAverageClr0.setStatus('mandatory')
mscAtmIfVpcPmBwdMaximumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 11), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdMaximumClr0.setStatus('mandatory')
mscAtmIfVpcPmBwdMinimumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 12), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdMinimumClr0.setStatus('mandatory')
mscAtmIfVpcPmBwdTotalUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdTotalUserCellsRx01.setStatus('mandatory')
mscAtmIfVpcPmBwdTotalUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdTotalUserCellsTx01.setStatus('mandatory')
mscAtmIfVpcPmBwdAverageClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 15), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdAverageClr01.setStatus('mandatory')
mscAtmIfVpcPmBwdMaximumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 16), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdMaximumClr01.setStatus('mandatory')
mscAtmIfVpcPmBwdMinimumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 17), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdMinimumClr01.setStatus('mandatory')
mscAtmIfVpcPmBwdPmCellDiscardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 12, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmBwdPmCellDiscardCount.setStatus('mandatory')
mscAtmIfVpcPmArTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 13), )
if mibBuilder.loadTexts: mscAtmIfVpcPmArTable.setStatus('mandatory')
mscAtmIfVpcPmArEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVpcPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVpcPmArEntry.setStatus('mandatory')
mscAtmIfVpcPmCurrentAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmCurrentAvailabilityStatus.setStatus('mandatory')
mscAtmIfVpcPmArTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmArTotalTime.setStatus('mandatory')
mscAtmIfVpcPmArAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmArAvailableTime.setStatus('mandatory')
mscAtmIfVpcPmArAvailabilityRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 4, 13, 13, 1, 4), FixedPoint7().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVpcPmArAvailabilityRatio.setStatus('mandatory')
mscAtmIfVcc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5))
mscAtmIfVccRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfVccRowStatusTable.setStatus('mandatory')
mscAtmIfVccRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccRowStatusEntry.setStatus('mandatory')
mscAtmIfVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccRowStatus.setStatus('mandatory')
mscAtmIfVccComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccComponentName.setStatus('mandatory')
mscAtmIfVccStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStorageType.setStatus('mandatory')
mscAtmIfVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 10)))
if mibBuilder.loadTexts: mscAtmIfVccIndex.setStatus('mandatory')
mscAtmIfVccStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 100), )
if mibBuilder.loadTexts: mscAtmIfVccStateTable.setStatus('mandatory')
mscAtmIfVccStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccStateEntry.setStatus('mandatory')
mscAtmIfVccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccAdminState.setStatus('mandatory')
mscAtmIfVccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccOperationalState.setStatus('mandatory')
mscAtmIfVccUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccUsageState.setStatus('mandatory')
mscAtmIfVccOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 110), )
if mibBuilder.loadTexts: mscAtmIfVccOperTable.setStatus('mandatory')
mscAtmIfVccOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccOperEntry.setStatus('mandatory')
mscAtmIfVccConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccConnectionPointType.setStatus('mandatory')
mscAtmIfVccConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 115), )
if mibBuilder.loadTexts: mscAtmIfVccConnInfoTable.setStatus('mandatory')
mscAtmIfVccConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 115, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccConnInfoEntry.setStatus('mandatory')
mscAtmIfVccDistributionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 115, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipoint", 1))).clone('pointToPoint')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccDistributionType.setStatus('mandatory')
mscAtmIfVccNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 115, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccNumLeaves.setStatus('mandatory')
mscAtmIfVccCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 115, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fromLink", 0), ("toLink", 1), ("notApplicable", 2))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccCallDirection.setStatus('mandatory')
mscAtmIfVccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120), )
if mibBuilder.loadTexts: mscAtmIfVccStatusTable.setStatus('mandatory')
mscAtmIfVccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccStatusEntry.setStatus('mandatory')
mscAtmIfVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccOperStatus.setStatus('mandatory')
mscAtmIfVccLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLocalFailureCause.setStatus('mandatory')
mscAtmIfVccTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTroubled.setStatus('mandatory')
mscAtmIfVccSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccSegLinkSideLoopbackState.setStatus('mandatory')
mscAtmIfVccSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccSegSwitchSideLoopbackState.setStatus('mandatory')
mscAtmIfVccEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccEndToEndLoopbackState.setStatus('mandatory')
mscAtmIfVccRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxOamCellCongestionState.setStatus('mandatory')
mscAtmIfVccAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccAisState.setStatus('mandatory')
mscAtmIfVccRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRdiState.setStatus('mandatory')
mscAtmIfVccTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130), )
if mibBuilder.loadTexts: mscAtmIfVccTrafficTable.setStatus('mandatory')
mscAtmIfVccTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTrafficEntry.setStatus('mandatory')
mscAtmIfVccTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxTrafficDescType.setStatus('obsolete')
mscAtmIfVccTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxQosClass.setStatus('obsolete')
mscAtmIfVccFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccFwdQosClass.setStatus('obsolete')
mscAtmIfVccTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxQueueLength.setStatus('obsolete')
mscAtmIfVccTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxQueueCongestionState.setStatus('obsolete')
mscAtmIfVccHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccHoldingPriority.setStatus('obsolete')
mscAtmIfVccRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxTrafficDescType.setStatus('obsolete')
mscAtmIfVccRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxQosClass.setStatus('obsolete')
mscAtmIfVccBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccBwdQosClass.setStatus('obsolete')
mscAtmIfVccAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccAtmServiceCategory.setStatus('obsolete')
mscAtmIfVccTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTrafficShaping.setStatus('obsolete')
mscAtmIfVccBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccBearerClassBbc.setStatus('obsolete')
mscAtmIfVccTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVccClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccClippingBbc.setStatus('obsolete')
mscAtmIfVccUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVccBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccBestEffort.setStatus('obsolete')
mscAtmIfVccUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccUsageParameterControl.setStatus('obsolete')
mscAtmIfVccTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxFrameDiscard.setStatus('obsolete')
mscAtmIfVccRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxFrameDiscard.setStatus('obsolete')
mscAtmIfVccBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccBandwidthElastic.setStatus('obsolete')
mscAtmIfVccBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccBandwidthReduction.setStatus('obsolete')
mscAtmIfVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140), )
if mibBuilder.loadTexts: mscAtmIfVccStatsTable.setStatus('mandatory')
mscAtmIfVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccStatsEntry.setStatus('mandatory')
mscAtmIfVccStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsTxCell.setStatus('mandatory')
mscAtmIfVccStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsTxCellClp.setStatus('mandatory')
mscAtmIfVccTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxDiscard.setStatus('obsolete')
mscAtmIfVccTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxDiscardClp.setStatus('obsolete')
mscAtmIfVccStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsTxCellDiscard.setStatus('mandatory')
mscAtmIfVccStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsTxCellDiscardClp.setStatus('mandatory')
mscAtmIfVccStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsTxFrameDiscard.setStatus('mandatory')
mscAtmIfVccStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsTxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVccStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxCell.setStatus('mandatory')
mscAtmIfVccStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxCellClp.setStatus('mandatory')
mscAtmIfVccRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxDiscard.setStatus('obsolete')
mscAtmIfVccRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxDiscardClp.setStatus('obsolete')
mscAtmIfVccStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxCellDiscard.setStatus('mandatory')
mscAtmIfVccStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxCellDiscardClp.setStatus('mandatory')
mscAtmIfVccStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxFrameDiscard.setStatus('mandatory')
mscAtmIfVccStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVccStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
mscAtmIfVccStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
mscAtmIfVccStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxAal5FrameError.setStatus('mandatory')
mscAtmIfVccStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccStatsRxAal5FrameAbort.setStatus('mandatory')
mscAtmIfVccPerfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150), )
if mibBuilder.loadTexts: mscAtmIfVccPerfTable.setStatus('mandatory')
mscAtmIfVccPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVccPerfEntry.setStatus('mandatory')
mscAtmIfVccLastMinimumCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLastMinimumCtd.setStatus('mandatory')
mscAtmIfVccLastMaximumCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLastMaximumCtd.setStatus('mandatory')
mscAtmIfVccLastAverageCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLastAverageCtd.setStatus('mandatory')
mscAtmIfVccCurrentCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccCurrentCtd.setStatus('mandatory')
mscAtmIfVccLastCtdSampleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 150, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLastCtdSampleSize.setStatus('mandatory')
mscAtmIfVccTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 294), )
if mibBuilder.loadTexts: mscAtmIfVccTxTdpTable.setStatus('obsolete')
mscAtmIfVccTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 294, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTxTdpEntry.setStatus('obsolete')
mscAtmIfVccTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVccTxTdpIndex.setStatus('obsolete')
mscAtmIfVccTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxTdpValue.setStatus('obsolete')
mscAtmIfVccRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 295), )
if mibBuilder.loadTexts: mscAtmIfVccRxTdpTable.setStatus('obsolete')
mscAtmIfVccRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 295, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccRxTdpEntry.setStatus('obsolete')
mscAtmIfVccRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVccRxTdpIndex.setStatus('obsolete')
mscAtmIfVccRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccRxTdpValue.setStatus('obsolete')
mscAtmIfVccTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 352), )
if mibBuilder.loadTexts: mscAtmIfVccTxQThreshTable.setStatus('obsolete')
mscAtmIfVccTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 352, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTxQThreshEntry.setStatus('obsolete')
mscAtmIfVccTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVccTxQThreshIndex.setStatus('obsolete')
mscAtmIfVccTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTxQThreshValue.setStatus('obsolete')
mscAtmIfVccFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 357), )
if mibBuilder.loadTexts: mscAtmIfVccFqpTable.setStatus('obsolete')
mscAtmIfVccFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 357, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccFqpEntry.setStatus('obsolete')
mscAtmIfVccFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccFqpIndex.setStatus('obsolete')
mscAtmIfVccFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccFqpValue.setStatus('obsolete')
mscAtmIfVccBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 358), )
if mibBuilder.loadTexts: mscAtmIfVccBqpTable.setStatus('obsolete')
mscAtmIfVccBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 358, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccBqpEntry.setStatus('obsolete')
mscAtmIfVccBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccBqpIndex.setStatus('obsolete')
mscAtmIfVccBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccBqpValue.setStatus('obsolete')
mscAtmIfVccVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2))
mscAtmIfVccVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVccVcdRowStatusTable.setStatus('mandatory')
mscAtmIfVccVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdRowStatusEntry.setStatus('mandatory')
mscAtmIfVccVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdRowStatus.setStatus('mandatory')
mscAtmIfVccVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdComponentName.setStatus('mandatory')
mscAtmIfVccVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdStorageType.setStatus('mandatory')
mscAtmIfVccVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccVcdIndex.setStatus('mandatory')
mscAtmIfVccVcdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVccVcdLbkTable.setStatus('mandatory')
mscAtmIfVccVcdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdLbkEntry.setStatus('mandatory')
mscAtmIfVccVcdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdSegLinkSideLoopback.setStatus('mandatory')
mscAtmIfVccVcdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdSegSwitchSideLoopback.setStatus('mandatory')
mscAtmIfVccVcdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdEndToEndLoopback.setStatus('mandatory')
mscAtmIfVccVcdMCastConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipointRoot", 1), ("pointToMultipointLeaf", 2))).clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdMCastConnectionType.setStatus('mandatory')
mscAtmIfVccVcdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTrafficTable.setStatus('mandatory')
mscAtmIfVccVcdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTrafficEntry.setStatus('mandatory')
mscAtmIfVccVcdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTxTrafficDescType.setStatus('obsolete')
mscAtmIfVccVcdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTxQosClass.setStatus('obsolete')
mscAtmIfVccVcdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdFwdQosClass.setStatus('obsolete')
mscAtmIfVccVcdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdHoldingPriority.setStatus('obsolete')
mscAtmIfVccVcdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdRxTrafficDescType.setStatus('obsolete')
mscAtmIfVccVcdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdRxQosClass.setStatus('obsolete')
mscAtmIfVccVcdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdBwdQosClass.setStatus('obsolete')
mscAtmIfVccVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdAtmServiceCategory.setStatus('obsolete')
mscAtmIfVccVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTrafficShaping.setStatus('obsolete')
mscAtmIfVccVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVccVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdUsageParameterControl.setStatus('obsolete')
mscAtmIfVccVcdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdBearerClassBbc.setStatus('obsolete')
mscAtmIfVccVcdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVccVcdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdClippingBbc.setStatus('obsolete')
mscAtmIfVccVcdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdBestEffort.setStatus('obsolete')
mscAtmIfVccVcdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdFwdFrameDiscard.setStatus('obsolete')
mscAtmIfVccVcdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdBwdFrameDiscard.setStatus('obsolete')
mscAtmIfVccVcdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 111), )
if mibBuilder.loadTexts: mscAtmIfVccVcdAcctTable.setStatus('mandatory')
mscAtmIfVccVcdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 111, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdAcctEntry.setStatus('mandatory')
mscAtmIfVccVcdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdCorrelationTag.setStatus('mandatory')
mscAtmIfVccVcdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 297), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTxTdpTable.setStatus('obsolete')
mscAtmIfVccVcdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 297, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTxTdpEntry.setStatus('obsolete')
mscAtmIfVccVcdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVccVcdTxTdpIndex.setStatus('obsolete')
mscAtmIfVccVcdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTxTdpValue.setStatus('obsolete')
mscAtmIfVccVcdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 298), )
if mibBuilder.loadTexts: mscAtmIfVccVcdRxTdpTable.setStatus('obsolete')
mscAtmIfVccVcdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 298, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdRxTdpEntry.setStatus('obsolete')
mscAtmIfVccVcdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVccVcdRxTdpIndex.setStatus('obsolete')
mscAtmIfVccVcdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdRxTdpValue.setStatus('obsolete')
mscAtmIfVccVcdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 359), )
if mibBuilder.loadTexts: mscAtmIfVccVcdFqpTable.setStatus('obsolete')
mscAtmIfVccVcdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 359, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdFqpEntry.setStatus('obsolete')
mscAtmIfVccVcdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccVcdFqpIndex.setStatus('obsolete')
mscAtmIfVccVcdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdFqpValue.setStatus('obsolete')
mscAtmIfVccVcdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 360), )
if mibBuilder.loadTexts: mscAtmIfVccVcdBqpTable.setStatus('obsolete')
mscAtmIfVccVcdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 360, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdBqpEntry.setStatus('obsolete')
mscAtmIfVccVcdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccVcdBqpIndex.setStatus('obsolete')
mscAtmIfVccVcdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdBqpValue.setStatus('obsolete')
mscAtmIfVccVcdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2))
mscAtmIfVccVcdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRowStatusTable.setStatus('mandatory')
mscAtmIfVccVcdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVccVcdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRowStatus.setStatus('mandatory')
mscAtmIfVccVcdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmComponentName.setStatus('mandatory')
mscAtmIfVccVcdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmStorageType.setStatus('mandatory')
mscAtmIfVccVcdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccVcdTmIndex.setStatus('mandatory')
mscAtmIfVccVcdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmProvTable.setStatus('mandatory')
mscAtmIfVccVcdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmProvEntry.setStatus('mandatory')
mscAtmIfVccVcdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVccVcdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmFwdQosClass.setStatus('mandatory')
mscAtmIfVccVcdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxQueueLimit.setStatus('mandatory')
mscAtmIfVccVcdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmHoldingPriority.setStatus('mandatory')
mscAtmIfVccVcdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVccVcdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBwdQosClass.setStatus('mandatory')
mscAtmIfVccVcdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVccVcdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTrafficShaping.setStatus('mandatory')
mscAtmIfVccVcdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVccVcdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmWeight.setStatus('mandatory')
mscAtmIfVccVcdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmForceTagging.setStatus('mandatory')
mscAtmIfVccVcdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVccVcdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVccVcdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVccVcdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmClippingBbc.setStatus('mandatory')
mscAtmIfVccVcdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBestEffort.setStatus('mandatory')
mscAtmIfVccVcdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVccVcdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVccVcdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVccVcdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 456), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxTdpTable.setStatus('mandatory')
mscAtmIfVccVcdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVccVcdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVccVcdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmTxTdpValue.setStatus('mandatory')
mscAtmIfVccVcdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 457), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRxTdpTable.setStatus('mandatory')
mscAtmIfVccVcdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVccVcdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVccVcdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmRxTdpValue.setStatus('mandatory')
mscAtmIfVccVcdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 458), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmFqpTable.setStatus('mandatory')
mscAtmIfVccVcdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmFqpEntry.setStatus('mandatory')
mscAtmIfVccVcdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmFqpIndex.setStatus('mandatory')
mscAtmIfVccVcdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmFqpValue.setStatus('mandatory')
mscAtmIfVccVcdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 459), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBqpTable.setStatus('mandatory')
mscAtmIfVccVcdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBqpEntry.setStatus('mandatory')
mscAtmIfVccVcdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBqpIndex.setStatus('mandatory')
mscAtmIfVccVcdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmBqpValue.setStatus('mandatory')
mscAtmIfVccVcdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2))
mscAtmIfVccVcdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVccVcdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVccVcdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVccVcdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrComponentName.setStatus('mandatory')
mscAtmIfVccVcdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrStorageType.setStatus('mandatory')
mscAtmIfVccVcdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrIndex.setStatus('mandatory')
mscAtmIfVccVcdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrProvTable.setStatus('mandatory')
mscAtmIfVccVcdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrProvEntry.setStatus('mandatory')
mscAtmIfVccVcdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVccVcdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVccVcdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVccVcdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVccVcdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVccVcdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVccVcdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
mscAtmIfVccVcdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVccVcdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVccVcdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrDgcraMaximumDelay.setStatus('mandatory')
mscAtmIfVccVcdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrDgcraMinimumDelay.setStatus('mandatory')
mscAtmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVccVcdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdTmAbrFarEndInitialCellRate.setStatus('mandatory')
mscAtmIfVccVcdPm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3))
mscAtmIfVccVcdPmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVccVcdPmRowStatusTable.setStatus('mandatory')
mscAtmIfVccVcdPmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdPmRowStatusEntry.setStatus('mandatory')
mscAtmIfVccVcdPmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdPmRowStatus.setStatus('mandatory')
mscAtmIfVccVcdPmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdPmComponentName.setStatus('mandatory')
mscAtmIfVccVcdPmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccVcdPmStorageType.setStatus('mandatory')
mscAtmIfVccVcdPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccVcdPmIndex.setStatus('mandatory')
mscAtmIfVccVcdPmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 100), )
if mibBuilder.loadTexts: mscAtmIfVccVcdPmProvTable.setStatus('mandatory')
mscAtmIfVccVcdPmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccVcdPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccVcdPmProvEntry.setStatus('mandatory')
mscAtmIfVccVcdPmSegSwitchSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 100, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdPmSegSwitchSideMeasurement.setStatus('mandatory')
mscAtmIfVccVcdPmSegLinkSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 100, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdPmSegLinkSideMeasurement.setStatus('mandatory')
mscAtmIfVccVcdPmControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 2, 3, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("autoStart", 0), ("onDemand", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccVcdPmControlMode.setStatus('mandatory')
mscAtmIfVccLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3))
mscAtmIfVccLoopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVccLoopRowStatusTable.setStatus('mandatory')
mscAtmIfVccLoopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccLoopIndex"))
if mibBuilder.loadTexts: mscAtmIfVccLoopRowStatusEntry.setStatus('mandatory')
mscAtmIfVccLoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccLoopRowStatus.setStatus('mandatory')
mscAtmIfVccLoopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLoopComponentName.setStatus('mandatory')
mscAtmIfVccLoopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccLoopStorageType.setStatus('mandatory')
mscAtmIfVccLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccLoopIndex.setStatus('mandatory')
mscAtmIfVccNep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5))
mscAtmIfVccNepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfVccNepRowStatusTable.setStatus('mandatory')
mscAtmIfVccNepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccNepIndex"))
if mibBuilder.loadTexts: mscAtmIfVccNepRowStatusEntry.setStatus('mandatory')
mscAtmIfVccNepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccNepRowStatus.setStatus('mandatory')
mscAtmIfVccNepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccNepComponentName.setStatus('mandatory')
mscAtmIfVccNepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccNepStorageType.setStatus('mandatory')
mscAtmIfVccNepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccNepIndex.setStatus('mandatory')
mscAtmIfVccNepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 100), )
if mibBuilder.loadTexts: mscAtmIfVccNepProvTable.setStatus('mandatory')
mscAtmIfVccNepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccNepIndex"))
if mibBuilder.loadTexts: mscAtmIfVccNepProvEntry.setStatus('mandatory')
mscAtmIfVccNepApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 5, 100, 1, 10), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccNepApplicationName.setStatus('mandatory')
mscAtmIfVccTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6))
mscAtmIfVccTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfVccTestRowStatusTable.setStatus('mandatory')
mscAtmIfVccTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTestRowStatusEntry.setStatus('mandatory')
mscAtmIfVccTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestRowStatus.setStatus('mandatory')
mscAtmIfVccTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestComponentName.setStatus('mandatory')
mscAtmIfVccTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestStorageType.setStatus('mandatory')
mscAtmIfVccTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccTestIndex.setStatus('mandatory')
mscAtmIfVccTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 100), )
if mibBuilder.loadTexts: mscAtmIfVccTestStateTable.setStatus('mandatory')
mscAtmIfVccTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTestStateEntry.setStatus('mandatory')
mscAtmIfVccTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestAdminState.setStatus('mandatory')
mscAtmIfVccTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestOperationalState.setStatus('mandatory')
mscAtmIfVccTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestUsageState.setStatus('mandatory')
mscAtmIfVccTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110), )
if mibBuilder.loadTexts: mscAtmIfVccTestSetupTable.setStatus('mandatory')
mscAtmIfVccTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTestSetupEntry.setStatus('mandatory')
mscAtmIfVccTestFrmTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestFrmTypes.setStatus('mandatory')
mscAtmIfVccTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestFrmSize.setStatus('mandatory')
mscAtmIfVccTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestFrmPatternType.setStatus('mandatory')
mscAtmIfVccTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 40), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestCustomizedPattern.setStatus('mandatory')
mscAtmIfVccTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestDuration.setStatus('mandatory')
mscAtmIfVccTestBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestBandwidthElastic.setStatus('mandatory')
mscAtmIfVccTestOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVccTestOverrideHoldingPriority.setStatus('mandatory')
mscAtmIfVccTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120), )
if mibBuilder.loadTexts: mscAtmIfVccTestResultsTable.setStatus('mandatory')
mscAtmIfVccTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTestResultsEntry.setStatus('mandatory')
mscAtmIfVccTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestElapsedTime.setStatus('mandatory')
mscAtmIfVccTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestTimeRemaining.setStatus('mandatory')
mscAtmIfVccTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("neverStarted", 2), ("testRunning", 3))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestCauseOfTermination.setStatus('mandatory')
mscAtmIfVccTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestBytesTx.setStatus('mandatory')
mscAtmIfVccTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestBytesRx.setStatus('mandatory')
mscAtmIfVccTestLoadingFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestLoadingFrmTx.setStatus('mandatory')
mscAtmIfVccTestLoadingFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestLoadingFrmRx.setStatus('mandatory')
mscAtmIfVccTestLoadingFrmLost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestLoadingFrmLost.setStatus('mandatory')
mscAtmIfVccTestVerificationFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestVerificationFrmTx.setStatus('mandatory')
mscAtmIfVccTestVerificationFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestVerificationFrmRx.setStatus('mandatory')
mscAtmIfVccTestVerificationFrmBad = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 110), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestVerificationFrmBad.setStatus('mandatory')
mscAtmIfVccTestUnrecognizableFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 6, 120, 1, 120), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTestUnrecognizableFrmRx.setStatus('mandatory')
mscAtmIfVccTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7))
mscAtmIfVccTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 1), )
if mibBuilder.loadTexts: mscAtmIfVccTmRowStatusTable.setStatus('mandatory')
mscAtmIfVccTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVccTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmRowStatus.setStatus('mandatory')
mscAtmIfVccTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmComponentName.setStatus('mandatory')
mscAtmIfVccTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmStorageType.setStatus('mandatory')
mscAtmIfVccTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccTmIndex.setStatus('mandatory')
mscAtmIfVccTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100), )
if mibBuilder.loadTexts: mscAtmIfVccTmOperTable.setStatus('mandatory')
mscAtmIfVccTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmOperEntry.setStatus('mandatory')
mscAtmIfVccTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVccTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxQosClass.setStatus('mandatory')
mscAtmIfVccTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxQueueLength.setStatus('mandatory')
mscAtmIfVccTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxQueueCongestionState.setStatus('mandatory')
mscAtmIfVccTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmHoldingPriority.setStatus('mandatory')
mscAtmIfVccTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVccTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14), ("sameAsFwd", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmRxQosClass.setStatus('mandatory')
mscAtmIfVccTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVccTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTrafficShaping.setStatus('mandatory')
mscAtmIfVccTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVccTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVccTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmClippingBbc.setStatus('mandatory')
mscAtmIfVccTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVccTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmBestEffort.setStatus('mandatory')
mscAtmIfVccTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmForceTagging.setStatus('mandatory')
mscAtmIfVccTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmWeight.setStatus('mandatory')
mscAtmIfVccTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVccTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVccTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVccTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmBandwidthElastic.setStatus('mandatory')
mscAtmIfVccTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmBandwidthReduction.setStatus('mandatory')
mscAtmIfVccTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVccTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 451), )
if mibBuilder.loadTexts: mscAtmIfVccTmTxTdpTable.setStatus('mandatory')
mscAtmIfVccTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 451, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVccTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVccTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVccTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxTdpValue.setStatus('mandatory')
mscAtmIfVccTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 452), )
if mibBuilder.loadTexts: mscAtmIfVccTmTxQThreshTable.setStatus('mandatory')
mscAtmIfVccTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 452, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmTxQThreshEntry.setStatus('mandatory')
mscAtmIfVccTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVccTmTxQThreshIndex.setStatus('mandatory')
mscAtmIfVccTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTxQThreshValue.setStatus('mandatory')
mscAtmIfVccTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 453), )
if mibBuilder.loadTexts: mscAtmIfVccTmRxTdpTable.setStatus('mandatory')
mscAtmIfVccTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 453, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVccTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVccTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVccTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmRxTdpValue.setStatus('mandatory')
mscAtmIfVccTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 454), )
if mibBuilder.loadTexts: mscAtmIfVccTmTqpTable.setStatus('mandatory')
mscAtmIfVccTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 454, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmTqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmTqpEntry.setStatus('mandatory')
mscAtmIfVccTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccTmTqpIndex.setStatus('mandatory')
mscAtmIfVccTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmTqpValue.setStatus('mandatory')
mscAtmIfVccTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 455), )
if mibBuilder.loadTexts: mscAtmIfVccTmRqpTable.setStatus('mandatory')
mscAtmIfVccTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 455, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmRqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmRqpEntry.setStatus('mandatory')
mscAtmIfVccTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVccTmRqpIndex.setStatus('mandatory')
mscAtmIfVccTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmRqpValue.setStatus('mandatory')
mscAtmIfVccTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2))
mscAtmIfVccTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVccTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVccTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVccTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVccTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrComponentName.setStatus('mandatory')
mscAtmIfVccTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrStorageType.setStatus('mandatory')
mscAtmIfVccTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVccTmAbrIndex.setStatus('mandatory')
mscAtmIfVccTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVccTmAbrOperTable.setStatus('mandatory')
mscAtmIfVccTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVccTmAbrOperEntry.setStatus('mandatory')
mscAtmIfVccTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVccTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVccTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVccTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVccTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVccTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVccTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
mscAtmIfVccTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVccTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVccTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrForwardRmCellLimit.setStatus('mandatory')
mscAtmIfVccTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrTxRateChangeInfo.setStatus('mandatory')
mscAtmIfVccTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrAcrRateChangeInfo.setStatus('mandatory')
mscAtmIfVccTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrTxFwdRmCells.setStatus('mandatory')
mscAtmIfVccTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 7, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccTmAbrRxEfci.setStatus('mandatory')
mscAtmIfVccPm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14))
mscAtmIfVccPmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 1), )
if mibBuilder.loadTexts: mscAtmIfVccPmRowStatusTable.setStatus('mandatory')
mscAtmIfVccPmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccPmRowStatusEntry.setStatus('mandatory')
mscAtmIfVccPmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmRowStatus.setStatus('mandatory')
mscAtmIfVccPmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmComponentName.setStatus('mandatory')
mscAtmIfVccPmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmStorageType.setStatus('mandatory')
mscAtmIfVccPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("linkSide", 0), ("switchSide", 1))))
if mibBuilder.loadTexts: mscAtmIfVccPmIndex.setStatus('mandatory')
mscAtmIfVccPmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 10), )
if mibBuilder.loadTexts: mscAtmIfVccPmStatusTable.setStatus('mandatory')
mscAtmIfVccPmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccPmStatusEntry.setStatus('mandatory')
mscAtmIfVccPmClrMeasurementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inactive", 0), ("activating", 1), ("active", 2), ("activationFailed", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmClrMeasurementStatus.setStatus('mandatory')
mscAtmIfVccPmArMeasurementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inactive", 0), ("activating", 1), ("active", 2), ("activationFailed", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmArMeasurementStatus.setStatus('mandatory')
mscAtmIfVccPmFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 0), ("unknownCause", 1), ("softwareResourcesUnavailable", 2), ("hardwareResourcesUnavailable", 3), ("remoteEndNoResponse", 4), ("activationCollision", 5), ("remoteEndRejectedActivation", 6), ("pcrUnsupported", 7), ("nextHopCardUnsupported", 8))).clone('noError')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFailureCause.setStatus('mandatory')
mscAtmIfVccPmFwdClrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11), )
if mibBuilder.loadTexts: mscAtmIfVccPmFwdClrTable.setStatus('mandatory')
mscAtmIfVccPmFwdClrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccPmFwdClrEntry.setStatus('mandatory')
mscAtmIfVccPmFwdLastSampleUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdLastSampleUserCellsRx0.setStatus('mandatory')
mscAtmIfVccPmFwdLastSampleUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdLastSampleUserCellsTx0.setStatus('mandatory')
mscAtmIfVccPmFwdLastSampleClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 3), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdLastSampleClr0.setStatus('mandatory')
mscAtmIfVccPmFwdLastSampleUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdLastSampleUserCellsRx01.setStatus('mandatory')
mscAtmIfVccPmFwdLastSampleUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdLastSampleUserCellsTx01.setStatus('mandatory')
mscAtmIfVccPmFwdLastSampleClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 6), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdLastSampleClr01.setStatus('mandatory')
mscAtmIfVccPmFwdTotalClrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdTotalClrInterval.setStatus('mandatory')
mscAtmIfVccPmFwdTotalUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdTotalUserCellsRx0.setStatus('mandatory')
mscAtmIfVccPmFwdTotalUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdTotalUserCellsTx0.setStatus('mandatory')
mscAtmIfVccPmFwdAverageClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 10), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdAverageClr0.setStatus('mandatory')
mscAtmIfVccPmFwdMaximumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 11), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdMaximumClr0.setStatus('mandatory')
mscAtmIfVccPmFwdMinimumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 12), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdMinimumClr0.setStatus('mandatory')
mscAtmIfVccPmFwdTotalUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdTotalUserCellsRx01.setStatus('mandatory')
mscAtmIfVccPmFwdTotalUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdTotalUserCellsTx01.setStatus('mandatory')
mscAtmIfVccPmFwdAverageClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 15), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdAverageClr01.setStatus('mandatory')
mscAtmIfVccPmFwdMaximumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 16), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdMaximumClr01.setStatus('mandatory')
mscAtmIfVccPmFwdMinimumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 17), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdMinimumClr01.setStatus('mandatory')
mscAtmIfVccPmFwdPmCellDiscardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 11, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmFwdPmCellDiscardCount.setStatus('mandatory')
mscAtmIfVccPmBwdClrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12), )
if mibBuilder.loadTexts: mscAtmIfVccPmBwdClrTable.setStatus('mandatory')
mscAtmIfVccPmBwdClrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccPmBwdClrEntry.setStatus('mandatory')
mscAtmIfVccPmBwdLastSampleUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdLastSampleUserCellsRx0.setStatus('mandatory')
mscAtmIfVccPmBwdLastSampleUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdLastSampleUserCellsTx0.setStatus('mandatory')
mscAtmIfVccPmBwdLastSampleClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 3), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdLastSampleClr0.setStatus('mandatory')
mscAtmIfVccPmBwdLastSampleUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdLastSampleUserCellsRx01.setStatus('mandatory')
mscAtmIfVccPmBwdLastSampleUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdLastSampleUserCellsTx01.setStatus('mandatory')
mscAtmIfVccPmBwdLastSampleClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 6), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdLastSampleClr01.setStatus('mandatory')
mscAtmIfVccPmBwdTotalClrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdTotalClrInterval.setStatus('mandatory')
mscAtmIfVccPmBwdTotalUserCellsRx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdTotalUserCellsRx0.setStatus('mandatory')
mscAtmIfVccPmBwdTotalUserCellsTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdTotalUserCellsTx0.setStatus('mandatory')
mscAtmIfVccPmBwdAverageClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 10), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdAverageClr0.setStatus('mandatory')
mscAtmIfVccPmBwdMaximumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 11), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdMaximumClr0.setStatus('mandatory')
mscAtmIfVccPmBwdMinimumClr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 12), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdMinimumClr0.setStatus('mandatory')
mscAtmIfVccPmBwdTotalUserCellsRx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdTotalUserCellsRx01.setStatus('mandatory')
mscAtmIfVccPmBwdTotalUserCellsTx01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdTotalUserCellsTx01.setStatus('mandatory')
mscAtmIfVccPmBwdAverageClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 15), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdAverageClr01.setStatus('mandatory')
mscAtmIfVccPmBwdMaximumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 16), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdMaximumClr01.setStatus('mandatory')
mscAtmIfVccPmBwdMinimumClr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 17), FixedPoint9().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdMinimumClr01.setStatus('mandatory')
mscAtmIfVccPmBwdPmCellDiscardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 12, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmBwdPmCellDiscardCount.setStatus('mandatory')
mscAtmIfVccPmArTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 13), )
if mibBuilder.loadTexts: mscAtmIfVccPmArTable.setStatus('mandatory')
mscAtmIfVccPmArEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVccPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVccPmArEntry.setStatus('mandatory')
mscAtmIfVccPmCurrentAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmCurrentAvailabilityStatus.setStatus('mandatory')
mscAtmIfVccPmArTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmArTotalTime.setStatus('mandatory')
mscAtmIfVccPmArAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmArAvailableTime.setStatus('mandatory')
mscAtmIfVccPmArAvailabilityRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 5, 14, 13, 1, 4), FixedPoint7().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVccPmArAvailabilityRatio.setStatus('mandatory')
mscAtmIfNAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8))
mscAtmIfNAcctRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 1), )
if mibBuilder.loadTexts: mscAtmIfNAcctRowStatusTable.setStatus('mandatory')
mscAtmIfNAcctRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfNAcctIndex"))
if mibBuilder.loadTexts: mscAtmIfNAcctRowStatusEntry.setStatus('mandatory')
mscAtmIfNAcctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfNAcctRowStatus.setStatus('mandatory')
mscAtmIfNAcctComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfNAcctComponentName.setStatus('mandatory')
mscAtmIfNAcctStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfNAcctStorageType.setStatus('mandatory')
mscAtmIfNAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfNAcctIndex.setStatus('mandatory')
mscAtmIfNAcctProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 10), )
if mibBuilder.loadTexts: mscAtmIfNAcctProvTable.setStatus('mandatory')
mscAtmIfNAcctProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfNAcctIndex"))
if mibBuilder.loadTexts: mscAtmIfNAcctProvEntry.setStatus('mandatory')
mscAtmIfNAcctAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfNAcctAccountCollection.setStatus('mandatory')
mscAtmIfNAcctAccountConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("origTerm", 0), ("intermediate", 1))).clone('origTerm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfNAcctAccountConnectionType.setStatus('mandatory')
mscAtmIfNAcctAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfNAcctAccountClass.setStatus('mandatory')
mscAtmIfNAcctServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 8, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfNAcctServiceExchange.setStatus('mandatory')
mscAtmIfVpt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9))
mscAtmIfVptRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 1), )
if mibBuilder.loadTexts: mscAtmIfVptRowStatusTable.setStatus('mandatory')
mscAtmIfVptRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"))
if mibBuilder.loadTexts: mscAtmIfVptRowStatusEntry.setStatus('mandatory')
mscAtmIfVptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptRowStatus.setStatus('mandatory')
mscAtmIfVptComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptComponentName.setStatus('mandatory')
mscAtmIfVptStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStorageType.setStatus('mandatory')
mscAtmIfVptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mscAtmIfVptIndex.setStatus('mandatory')
mscAtmIfVptStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 100), )
if mibBuilder.loadTexts: mscAtmIfVptStateTable.setStatus('mandatory')
mscAtmIfVptStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"))
if mibBuilder.loadTexts: mscAtmIfVptStateEntry.setStatus('mandatory')
mscAtmIfVptAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptAdminState.setStatus('mandatory')
mscAtmIfVptOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptOperationalState.setStatus('mandatory')
mscAtmIfVptUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptUsageState.setStatus('mandatory')
mscAtmIfVptOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 110), )
if mibBuilder.loadTexts: mscAtmIfVptOperTable.setStatus('mandatory')
mscAtmIfVptOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"))
if mibBuilder.loadTexts: mscAtmIfVptOperEntry.setStatus('mandatory')
mscAtmIfVptConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptConnectionPointType.setStatus('mandatory')
mscAtmIfVptStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120), )
if mibBuilder.loadTexts: mscAtmIfVptStatusTable.setStatus('mandatory')
mscAtmIfVptStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"))
if mibBuilder.loadTexts: mscAtmIfVptStatusEntry.setStatus('mandatory')
mscAtmIfVptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptOperStatus.setStatus('mandatory')
mscAtmIfVptLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptLocalFailureCause.setStatus('mandatory')
mscAtmIfVptTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTroubled.setStatus('mandatory')
mscAtmIfVptSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptSegLinkSideLoopbackState.setStatus('mandatory')
mscAtmIfVptSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptSegSwitchSideLoopbackState.setStatus('mandatory')
mscAtmIfVptEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptEndToEndLoopbackState.setStatus('mandatory')
mscAtmIfVptRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxOamCellCongestionState.setStatus('mandatory')
mscAtmIfVptAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptAisState.setStatus('mandatory')
mscAtmIfVptRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRdiState.setStatus('mandatory')
mscAtmIfVptTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130), )
if mibBuilder.loadTexts: mscAtmIfVptTrafficTable.setStatus('mandatory')
mscAtmIfVptTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTrafficEntry.setStatus('mandatory')
mscAtmIfVptTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxTrafficDescType.setStatus('obsolete')
mscAtmIfVptTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxQosClass.setStatus('obsolete')
mscAtmIfVptFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptFwdQosClass.setStatus('obsolete')
mscAtmIfVptTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxQueueLength.setStatus('obsolete')
mscAtmIfVptTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxQueueCongestionState.setStatus('obsolete')
mscAtmIfVptHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptHoldingPriority.setStatus('obsolete')
mscAtmIfVptRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxTrafficDescType.setStatus('obsolete')
mscAtmIfVptRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxQosClass.setStatus('obsolete')
mscAtmIfVptBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptBwdQosClass.setStatus('obsolete')
mscAtmIfVptAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptAtmServiceCategory.setStatus('obsolete')
mscAtmIfVptTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTrafficShaping.setStatus('obsolete')
mscAtmIfVptBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptBearerClassBbc.setStatus('obsolete')
mscAtmIfVptTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVptClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptClippingBbc.setStatus('obsolete')
mscAtmIfVptUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVptBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptBestEffort.setStatus('obsolete')
mscAtmIfVptUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptUsageParameterControl.setStatus('obsolete')
mscAtmIfVptTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxFrameDiscard.setStatus('obsolete')
mscAtmIfVptRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxFrameDiscard.setStatus('obsolete')
mscAtmIfVptBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptBandwidthElastic.setStatus('obsolete')
mscAtmIfVptBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptBandwidthReduction.setStatus('obsolete')
mscAtmIfVptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140), )
if mibBuilder.loadTexts: mscAtmIfVptStatsTable.setStatus('mandatory')
mscAtmIfVptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"))
if mibBuilder.loadTexts: mscAtmIfVptStatsEntry.setStatus('mandatory')
mscAtmIfVptStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsTxCell.setStatus('mandatory')
mscAtmIfVptStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsTxCellClp.setStatus('mandatory')
mscAtmIfVptTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxDiscard.setStatus('obsolete')
mscAtmIfVptTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxDiscardClp.setStatus('obsolete')
mscAtmIfVptStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsTxCellDiscard.setStatus('mandatory')
mscAtmIfVptStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsTxCellDiscardClp.setStatus('mandatory')
mscAtmIfVptStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsTxFrameDiscard.setStatus('mandatory')
mscAtmIfVptStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsTxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVptStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxCell.setStatus('mandatory')
mscAtmIfVptStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxCellClp.setStatus('mandatory')
mscAtmIfVptRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxDiscard.setStatus('obsolete')
mscAtmIfVptRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxDiscardClp.setStatus('obsolete')
mscAtmIfVptStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxCellDiscard.setStatus('mandatory')
mscAtmIfVptStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxCellDiscardClp.setStatus('mandatory')
mscAtmIfVptStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxFrameDiscard.setStatus('mandatory')
mscAtmIfVptStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVptStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
mscAtmIfVptStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
mscAtmIfVptStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxAal5FrameError.setStatus('mandatory')
mscAtmIfVptStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptStatsRxAal5FrameAbort.setStatus('mandatory')
mscAtmIfVptTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 294), )
if mibBuilder.loadTexts: mscAtmIfVptTxTdpTable.setStatus('obsolete')
mscAtmIfVptTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 294, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTxTdpEntry.setStatus('obsolete')
mscAtmIfVptTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptTxTdpIndex.setStatus('obsolete')
mscAtmIfVptTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxTdpValue.setStatus('obsolete')
mscAtmIfVptRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 295), )
if mibBuilder.loadTexts: mscAtmIfVptRxTdpTable.setStatus('obsolete')
mscAtmIfVptRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 295, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptRxTdpEntry.setStatus('obsolete')
mscAtmIfVptRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVptRxTdpIndex.setStatus('obsolete')
mscAtmIfVptRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptRxTdpValue.setStatus('obsolete')
mscAtmIfVptTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 352), )
if mibBuilder.loadTexts: mscAtmIfVptTxQThreshTable.setStatus('obsolete')
mscAtmIfVptTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 352, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTxQThreshEntry.setStatus('obsolete')
mscAtmIfVptTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVptTxQThreshIndex.setStatus('obsolete')
mscAtmIfVptTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTxQThreshValue.setStatus('obsolete')
mscAtmIfVptFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 357), )
if mibBuilder.loadTexts: mscAtmIfVptFqpTable.setStatus('obsolete')
mscAtmIfVptFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 357, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptFqpEntry.setStatus('obsolete')
mscAtmIfVptFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptFqpIndex.setStatus('obsolete')
mscAtmIfVptFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptFqpValue.setStatus('obsolete')
mscAtmIfVptBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 358), )
if mibBuilder.loadTexts: mscAtmIfVptBqpTable.setStatus('obsolete')
mscAtmIfVptBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 358, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptBqpEntry.setStatus('obsolete')
mscAtmIfVptBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptBqpIndex.setStatus('obsolete')
mscAtmIfVptBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptBqpValue.setStatus('obsolete')
mscAtmIfVptVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2))
mscAtmIfVptVpdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVpdRowStatusTable.setStatus('mandatory')
mscAtmIfVptVpdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVpdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdRowStatus.setStatus('mandatory')
mscAtmIfVptVpdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdComponentName.setStatus('mandatory')
mscAtmIfVptVpdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdStorageType.setStatus('mandatory')
mscAtmIfVptVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVpdIndex.setStatus('mandatory')
mscAtmIfVptVpdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVpdLbkTable.setStatus('mandatory')
mscAtmIfVptVpdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdLbkEntry.setStatus('mandatory')
mscAtmIfVptVpdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdSegLinkSideLoopback.setStatus('mandatory')
mscAtmIfVptVpdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdSegSwitchSideLoopback.setStatus('mandatory')
mscAtmIfVptVpdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdEndToEndLoopback.setStatus('mandatory')
mscAtmIfVptVpdMCastConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipointRoot", 1), ("pointToMultipointLeaf", 2))).clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdMCastConnectionType.setStatus('mandatory')
mscAtmIfVptVpdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTrafficTable.setStatus('mandatory')
mscAtmIfVptVpdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTrafficEntry.setStatus('mandatory')
mscAtmIfVptVpdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTxTrafficDescType.setStatus('obsolete')
mscAtmIfVptVpdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTxQosClass.setStatus('obsolete')
mscAtmIfVptVpdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdFwdQosClass.setStatus('obsolete')
mscAtmIfVptVpdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdHoldingPriority.setStatus('obsolete')
mscAtmIfVptVpdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdRxTrafficDescType.setStatus('obsolete')
mscAtmIfVptVpdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdRxQosClass.setStatus('obsolete')
mscAtmIfVptVpdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdBwdQosClass.setStatus('obsolete')
mscAtmIfVptVpdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdAtmServiceCategory.setStatus('obsolete')
mscAtmIfVptVpdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTrafficShaping.setStatus('obsolete')
mscAtmIfVptVpdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVptVpdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdUsageParameterControl.setStatus('obsolete')
mscAtmIfVptVpdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdBearerClassBbc.setStatus('obsolete')
mscAtmIfVptVpdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVptVpdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdClippingBbc.setStatus('obsolete')
mscAtmIfVptVpdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdBestEffort.setStatus('obsolete')
mscAtmIfVptVpdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdFwdFrameDiscard.setStatus('obsolete')
mscAtmIfVptVpdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdBwdFrameDiscard.setStatus('obsolete')
mscAtmIfVptVpdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 111), )
if mibBuilder.loadTexts: mscAtmIfVptVpdAcctTable.setStatus('mandatory')
mscAtmIfVptVpdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 111, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdAcctEntry.setStatus('mandatory')
mscAtmIfVptVpdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdCorrelationTag.setStatus('mandatory')
mscAtmIfVptVpdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 112), )
if mibBuilder.loadTexts: mscAtmIfVptVpdProvTable.setStatus('mandatory')
mscAtmIfVptVpdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 112, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdProvEntry.setStatus('mandatory')
mscAtmIfVptVpdVptType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 112, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("standard", 1))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdVptType.setStatus('mandatory')
mscAtmIfVptVpdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 297), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTxTdpTable.setStatus('obsolete')
mscAtmIfVptVpdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 297, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTxTdpEntry.setStatus('obsolete')
mscAtmIfVptVpdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVpdTxTdpIndex.setStatus('obsolete')
mscAtmIfVptVpdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTxTdpValue.setStatus('obsolete')
mscAtmIfVptVpdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 298), )
if mibBuilder.loadTexts: mscAtmIfVptVpdRxTdpTable.setStatus('obsolete')
mscAtmIfVptVpdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 298, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdRxTdpEntry.setStatus('obsolete')
mscAtmIfVptVpdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVpdRxTdpIndex.setStatus('obsolete')
mscAtmIfVptVpdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdRxTdpValue.setStatus('obsolete')
mscAtmIfVptVpdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 359), )
if mibBuilder.loadTexts: mscAtmIfVptVpdFqpTable.setStatus('obsolete')
mscAtmIfVptVpdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 359, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdFqpEntry.setStatus('obsolete')
mscAtmIfVptVpdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVpdFqpIndex.setStatus('obsolete')
mscAtmIfVptVpdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdFqpValue.setStatus('obsolete')
mscAtmIfVptVpdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 360), )
if mibBuilder.loadTexts: mscAtmIfVptVpdBqpTable.setStatus('obsolete')
mscAtmIfVptVpdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 360, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdBqpEntry.setStatus('obsolete')
mscAtmIfVptVpdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVpdBqpIndex.setStatus('obsolete')
mscAtmIfVptVpdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdBqpValue.setStatus('obsolete')
mscAtmIfVptVpdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2))
mscAtmIfVptVpdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRowStatusTable.setStatus('mandatory')
mscAtmIfVptVpdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVpdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRowStatus.setStatus('mandatory')
mscAtmIfVptVpdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmComponentName.setStatus('mandatory')
mscAtmIfVptVpdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmStorageType.setStatus('mandatory')
mscAtmIfVptVpdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVpdTmIndex.setStatus('mandatory')
mscAtmIfVptVpdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmProvTable.setStatus('mandatory')
mscAtmIfVptVpdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmProvEntry.setStatus('mandatory')
mscAtmIfVptVpdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVptVpdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmFwdQosClass.setStatus('mandatory')
mscAtmIfVptVpdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxQueueLimit.setStatus('mandatory')
mscAtmIfVptVpdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmHoldingPriority.setStatus('mandatory')
mscAtmIfVptVpdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVptVpdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBwdQosClass.setStatus('mandatory')
mscAtmIfVptVpdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVptVpdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTrafficShaping.setStatus('mandatory')
mscAtmIfVptVpdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVptVpdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmWeight.setStatus('mandatory')
mscAtmIfVptVpdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmForceTagging.setStatus('mandatory')
mscAtmIfVptVpdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVptVpdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVptVpdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVptVpdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmClippingBbc.setStatus('mandatory')
mscAtmIfVptVpdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBestEffort.setStatus('mandatory')
mscAtmIfVptVpdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptVpdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptVpdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVptVpdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 456), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxTdpTable.setStatus('mandatory')
mscAtmIfVptVpdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVptVpdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVptVpdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmTxTdpValue.setStatus('mandatory')
mscAtmIfVptVpdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 457), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRxTdpTable.setStatus('mandatory')
mscAtmIfVptVpdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVptVpdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVptVpdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmRxTdpValue.setStatus('mandatory')
mscAtmIfVptVpdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 458), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmFqpTable.setStatus('mandatory')
mscAtmIfVptVpdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmFqpEntry.setStatus('mandatory')
mscAtmIfVptVpdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmFqpIndex.setStatus('mandatory')
mscAtmIfVptVpdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmFqpValue.setStatus('mandatory')
mscAtmIfVptVpdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 459), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBqpTable.setStatus('mandatory')
mscAtmIfVptVpdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBqpEntry.setStatus('mandatory')
mscAtmIfVptVpdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBqpIndex.setStatus('mandatory')
mscAtmIfVptVpdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmBqpValue.setStatus('mandatory')
mscAtmIfVptVpdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2))
mscAtmIfVptVpdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptVpdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVpdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVptVpdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrComponentName.setStatus('mandatory')
mscAtmIfVptVpdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrStorageType.setStatus('mandatory')
mscAtmIfVptVpdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrIndex.setStatus('mandatory')
mscAtmIfVptVpdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrProvTable.setStatus('mandatory')
mscAtmIfVptVpdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVpdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrProvEntry.setStatus('mandatory')
mscAtmIfVptVpdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVptVpdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVptVpdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVptVpdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVptVpdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVptVpdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVptVpdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
mscAtmIfVptVpdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVptVpdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVptVpdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrDgcraMaximumDelay.setStatus('mandatory')
mscAtmIfVptVpdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrDgcraMinimumDelay.setStatus('mandatory')
mscAtmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVptVpdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVpdTmAbrFarEndInitialCellRate.setStatus('mandatory')
mscAtmIfVptCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5))
mscAtmIfVptCARowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfVptCARowStatusTable.setStatus('mandatory')
mscAtmIfVptCARowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCARowStatusEntry.setStatus('mandatory')
mscAtmIfVptCARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCARowStatus.setStatus('mandatory')
mscAtmIfVptCAComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAComponentName.setStatus('mandatory')
mscAtmIfVptCAStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAStorageType.setStatus('mandatory')
mscAtmIfVptCAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptCAIndex.setStatus('mandatory')
mscAtmIfVptCAProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 100), )
if mibBuilder.loadTexts: mscAtmIfVptCAProvTable.setStatus('mandatory')
mscAtmIfVptCAProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAProvEntry.setStatus('mandatory')
mscAtmIfVptCAMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16384), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAMaxVccs.setStatus('mandatory')
mscAtmIfVptCAPermittedAtmServiceCategories = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 100, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAPermittedAtmServiceCategories.setStatus('mandatory')
mscAtmIfVptCAOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110), )
if mibBuilder.loadTexts: mscAtmIfVptCAOperTable.setStatus('mandatory')
mscAtmIfVptCAOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAOperEntry.setStatus('mandatory')
mscAtmIfVptCAActualMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAActualMaxVccs.setStatus('mandatory')
mscAtmIfVptCAPermanentVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPermanentVccs.setStatus('mandatory')
mscAtmIfVptCASwitchedVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110, 1, 30), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCASwitchedVccs.setStatus('mandatory')
mscAtmIfVptCATroubledVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCATroubledVccs.setStatus('mandatory')
mscAtmIfVptCAConnectionPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 110, 1, 81), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10752))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAConnectionPoolUsage.setStatus('mandatory')
mscAtmIfVptCAPoolAvailBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 460), )
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAvailBwTable.setStatus('mandatory')
mscAtmIfVptCAPoolAvailBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 460, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAPoolAvailBwIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAvailBwEntry.setStatus('mandatory')
mscAtmIfVptCAPoolAvailBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 460, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAvailBwIndex.setStatus('mandatory')
mscAtmIfVptCAPoolAvailBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 460, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAvailBwValue.setStatus('mandatory')
mscAtmIfVptCABwPoolTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 461), )
if mibBuilder.loadTexts: mscAtmIfVptCABwPoolTable.setStatus('mandatory')
mscAtmIfVptCABwPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 461, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCABwPoolIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCABwPoolEntry.setStatus('mandatory')
mscAtmIfVptCABwPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 461, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCABwPoolIndex.setStatus('mandatory')
mscAtmIfVptCABwPoolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 461, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCABwPoolValue.setStatus('mandatory')
mscAtmIfVptCAPoolProvBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 462), )
if mibBuilder.loadTexts: mscAtmIfVptCAPoolProvBwTable.setStatus('mandatory')
mscAtmIfVptCAPoolProvBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 462, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAPoolProvBwIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolProvBwEntry.setStatus('mandatory')
mscAtmIfVptCAPoolProvBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 462, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolProvBwIndex.setStatus('mandatory')
mscAtmIfVptCAPoolProvBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 462, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPoolProvBwValue.setStatus('mandatory')
mscAtmIfVptCAPoolRequBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 463), )
if mibBuilder.loadTexts: mscAtmIfVptCAPoolRequBwTable.setStatus('mandatory')
mscAtmIfVptCAPoolRequBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 463, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAPoolRequBwIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolRequBwEntry.setStatus('mandatory')
mscAtmIfVptCAPoolRequBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 463, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolRequBwIndex.setStatus('mandatory')
mscAtmIfVptCAPoolRequBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 463, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPoolRequBwValue.setStatus('mandatory')
mscAtmIfVptCAPoolAdmitBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 464), )
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmitBwTable.setStatus('mandatory')
mscAtmIfVptCAPoolAdmitBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 464, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAPoolAdmitBwIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmitBwEntry.setStatus('mandatory')
mscAtmIfVptCAPoolAdmitBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 464, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmitBwIndex.setStatus('mandatory')
mscAtmIfVptCAPoolAdmitBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 464, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmitBwValue.setStatus('mandatory')
mscAtmIfVptCAPoolAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 465), )
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmConnsTable.setStatus('mandatory')
mscAtmIfVptCAPoolAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 465, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAPoolAdmConnsIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmConnsEntry.setStatus('mandatory')
mscAtmIfVptCAPoolAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 465, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmConnsIndex.setStatus('mandatory')
mscAtmIfVptCAPoolAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 465, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPoolAdmConnsValue.setStatus('mandatory')
mscAtmIfVptCAPoolWaitAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 466), )
if mibBuilder.loadTexts: mscAtmIfVptCAPoolWaitAdmConnsTable.setStatus('mandatory')
mscAtmIfVptCAPoolWaitAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 466, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAPoolWaitAdmConnsIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolWaitAdmConnsEntry.setStatus('mandatory')
mscAtmIfVptCAPoolWaitAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 466, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptCAPoolWaitAdmConnsIndex.setStatus('mandatory')
mscAtmIfVptCAPoolWaitAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 466, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAPoolWaitAdmConnsValue.setStatus('mandatory')
mscAtmIfVptCACbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2))
mscAtmIfVptCACbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptCACbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptCACbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCACbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCACbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptCACbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCACbrRowStatus.setStatus('mandatory')
mscAtmIfVptCACbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCACbrComponentName.setStatus('mandatory')
mscAtmIfVptCACbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCACbrStorageType.setStatus('mandatory')
mscAtmIfVptCACbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfVptCACbrIndex.setStatus('mandatory')
mscAtmIfVptCACbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVptCACbrProvTable.setStatus('mandatory')
mscAtmIfVptCACbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCACbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCACbrProvEntry.setStatus('mandatory')
mscAtmIfVptCACbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCACbrPool.setStatus('mandatory')
mscAtmIfVptCACbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCACbrCdvt.setStatus('mandatory')
mscAtmIfVptCACbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCACbrCdv.setStatus('mandatory')
mscAtmIfVptCACbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCACbrMaxCtd.setStatus('mandatory')
mscAtmIfVptCACbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 2, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCACbrCellLossRatio.setStatus('mandatory')
mscAtmIfVptCARtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3))
mscAtmIfVptCARtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptCARtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCARtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptCARtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrRowStatus.setStatus('mandatory')
mscAtmIfVptCARtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrComponentName.setStatus('mandatory')
mscAtmIfVptCARtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrStorageType.setStatus('mandatory')
mscAtmIfVptCARtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrIndex.setStatus('mandatory')
mscAtmIfVptCARtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 100), )
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrProvTable.setStatus('mandatory')
mscAtmIfVptCARtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCARtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrProvEntry.setStatus('mandatory')
mscAtmIfVptCARtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrPool.setStatus('mandatory')
mscAtmIfVptCARtVbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1268)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrCdv.setStatus('mandatory')
mscAtmIfVptCARtVbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrMaxCtd.setStatus('mandatory')
mscAtmIfVptCARtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 3, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCARtVbrCellLossRatio.setStatus('mandatory')
mscAtmIfVptCANrtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4))
mscAtmIfVptCANrtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 1), )
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptCANrtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCANrtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptCANrtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrRowStatus.setStatus('mandatory')
mscAtmIfVptCANrtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrComponentName.setStatus('mandatory')
mscAtmIfVptCANrtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrStorageType.setStatus('mandatory')
mscAtmIfVptCANrtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrIndex.setStatus('mandatory')
mscAtmIfVptCANrtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 100), )
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrProvTable.setStatus('mandatory')
mscAtmIfVptCANrtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCANrtVbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrProvEntry.setStatus('mandatory')
mscAtmIfVptCANrtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrPool.setStatus('mandatory')
mscAtmIfVptCANrtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 4, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCANrtVbrCellLossRatio.setStatus('mandatory')
mscAtmIfVptCAAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5))
mscAtmIfVptCAAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfVptCAAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptCAAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptCAAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAAbrRowStatus.setStatus('mandatory')
mscAtmIfVptCAAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAAbrComponentName.setStatus('mandatory')
mscAtmIfVptCAAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAAbrStorageType.setStatus('mandatory')
mscAtmIfVptCAAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfVptCAAbrIndex.setStatus('mandatory')
mscAtmIfVptCAAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 100), )
if mibBuilder.loadTexts: mscAtmIfVptCAAbrProvTable.setStatus('mandatory')
mscAtmIfVptCAAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAAbrProvEntry.setStatus('mandatory')
mscAtmIfVptCAAbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 5, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAAbrPool.setStatus('mandatory')
mscAtmIfVptCAUbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6))
mscAtmIfVptCAUbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfVptCAUbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptCAUbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAUbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAUbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptCAUbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrRowStatus.setStatus('mandatory')
mscAtmIfVptCAUbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrComponentName.setStatus('mandatory')
mscAtmIfVptCAUbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrStorageType.setStatus('mandatory')
mscAtmIfVptCAUbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscAtmIfVptCAUbrIndex.setStatus('mandatory')
mscAtmIfVptCAUbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 100), )
if mibBuilder.loadTexts: mscAtmIfVptCAUbrProvTable.setStatus('mandatory')
mscAtmIfVptCAUbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAUbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAUbrProvEntry.setStatus('mandatory')
mscAtmIfVptCAUbrMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16384), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrMaxVccs.setStatus('mandatory')
mscAtmIfVptCAUbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrPool.setStatus('mandatory')
mscAtmIfVptCAUbrMinimumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrMinimumCellRate.setStatus('mandatory')
mscAtmIfVptCAUbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 110), )
if mibBuilder.loadTexts: mscAtmIfVptCAUbrOperTable.setStatus('mandatory')
mscAtmIfVptCAUbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptCAUbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptCAUbrOperEntry.setStatus('mandatory')
mscAtmIfVptCAUbrVccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 5, 6, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptCAUbrVccUsage.setStatus('mandatory')
mscAtmIfVptTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9))
mscAtmIfVptTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 1), )
if mibBuilder.loadTexts: mscAtmIfVptTmRowStatusTable.setStatus('mandatory')
mscAtmIfVptTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVptTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmRowStatus.setStatus('mandatory')
mscAtmIfVptTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmComponentName.setStatus('mandatory')
mscAtmIfVptTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmStorageType.setStatus('mandatory')
mscAtmIfVptTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptTmIndex.setStatus('mandatory')
mscAtmIfVptTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100), )
if mibBuilder.loadTexts: mscAtmIfVptTmOperTable.setStatus('mandatory')
mscAtmIfVptTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmOperEntry.setStatus('mandatory')
mscAtmIfVptTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVptTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxQosClass.setStatus('mandatory')
mscAtmIfVptTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxQueueLength.setStatus('mandatory')
mscAtmIfVptTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxQueueCongestionState.setStatus('mandatory')
mscAtmIfVptTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmHoldingPriority.setStatus('mandatory')
mscAtmIfVptTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVptTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14), ("sameAsFwd", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmRxQosClass.setStatus('mandatory')
mscAtmIfVptTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVptTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTrafficShaping.setStatus('mandatory')
mscAtmIfVptTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVptTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVptTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmClippingBbc.setStatus('mandatory')
mscAtmIfVptTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVptTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmBestEffort.setStatus('mandatory')
mscAtmIfVptTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmForceTagging.setStatus('mandatory')
mscAtmIfVptTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmWeight.setStatus('mandatory')
mscAtmIfVptTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVptTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmBandwidthElastic.setStatus('mandatory')
mscAtmIfVptTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmBandwidthReduction.setStatus('mandatory')
mscAtmIfVptTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVptTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 451), )
if mibBuilder.loadTexts: mscAtmIfVptTmTxTdpTable.setStatus('mandatory')
mscAtmIfVptTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 451, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVptTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVptTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxTdpValue.setStatus('mandatory')
mscAtmIfVptTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 452), )
if mibBuilder.loadTexts: mscAtmIfVptTmTxQThreshTable.setStatus('mandatory')
mscAtmIfVptTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 452, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmTxQThreshEntry.setStatus('mandatory')
mscAtmIfVptTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVptTmTxQThreshIndex.setStatus('mandatory')
mscAtmIfVptTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTxQThreshValue.setStatus('mandatory')
mscAtmIfVptTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 453), )
if mibBuilder.loadTexts: mscAtmIfVptTmRxTdpTable.setStatus('mandatory')
mscAtmIfVptTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 453, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVptTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVptTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVptTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmRxTdpValue.setStatus('mandatory')
mscAtmIfVptTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 454), )
if mibBuilder.loadTexts: mscAtmIfVptTmTqpTable.setStatus('mandatory')
mscAtmIfVptTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 454, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmTqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmTqpEntry.setStatus('mandatory')
mscAtmIfVptTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptTmTqpIndex.setStatus('mandatory')
mscAtmIfVptTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmTqpValue.setStatus('mandatory')
mscAtmIfVptTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 455), )
if mibBuilder.loadTexts: mscAtmIfVptTmRqpTable.setStatus('mandatory')
mscAtmIfVptTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 455, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmRqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmRqpEntry.setStatus('mandatory')
mscAtmIfVptTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptTmRqpIndex.setStatus('mandatory')
mscAtmIfVptTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmRqpValue.setStatus('mandatory')
mscAtmIfVptTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2))
mscAtmIfVptTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVptTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrComponentName.setStatus('mandatory')
mscAtmIfVptTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrStorageType.setStatus('mandatory')
mscAtmIfVptTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptTmAbrIndex.setStatus('mandatory')
mscAtmIfVptTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVptTmAbrOperTable.setStatus('mandatory')
mscAtmIfVptTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptTmAbrOperEntry.setStatus('mandatory')
mscAtmIfVptTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVptTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVptTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVptTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVptTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVptTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVptTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
mscAtmIfVptTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVptTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVptTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrForwardRmCellLimit.setStatus('mandatory')
mscAtmIfVptTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrTxRateChangeInfo.setStatus('mandatory')
mscAtmIfVptTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrAcrRateChangeInfo.setStatus('mandatory')
mscAtmIfVptTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrTxFwdRmCells.setStatus('mandatory')
mscAtmIfVptTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 9, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptTmAbrRxEfci.setStatus('mandatory')
mscAtmIfVptVcc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20))
mscAtmIfVptVccRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccRowStatus.setStatus('mandatory')
mscAtmIfVptVccComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccComponentName.setStatus('mandatory')
mscAtmIfVptVccStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStorageType.setStatus('mandatory')
mscAtmIfVptVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mscAtmIfVptVccIndex.setStatus('mandatory')
mscAtmIfVptVccStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccStateTable.setStatus('mandatory')
mscAtmIfVptVccStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccStateEntry.setStatus('mandatory')
mscAtmIfVptVccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccAdminState.setStatus('mandatory')
mscAtmIfVptVccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccOperationalState.setStatus('mandatory')
mscAtmIfVptVccUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccUsageState.setStatus('mandatory')
mscAtmIfVptVccOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVccOperTable.setStatus('mandatory')
mscAtmIfVptVccOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccOperEntry.setStatus('mandatory')
mscAtmIfVptVccConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccConnectionPointType.setStatus('mandatory')
mscAtmIfVptVccConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 115), )
if mibBuilder.loadTexts: mscAtmIfVptVccConnInfoTable.setStatus('mandatory')
mscAtmIfVptVccConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 115, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccConnInfoEntry.setStatus('mandatory')
mscAtmIfVptVccDistributionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 115, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipoint", 1))).clone('pointToPoint')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccDistributionType.setStatus('mandatory')
mscAtmIfVptVccNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 115, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccNumLeaves.setStatus('mandatory')
mscAtmIfVptVccCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 115, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fromLink", 0), ("toLink", 1), ("notApplicable", 2))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccCallDirection.setStatus('mandatory')
mscAtmIfVptVccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120), )
if mibBuilder.loadTexts: mscAtmIfVptVccStatusTable.setStatus('mandatory')
mscAtmIfVptVccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccStatusEntry.setStatus('mandatory')
mscAtmIfVptVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccOperStatus.setStatus('mandatory')
mscAtmIfVptVccLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccLocalFailureCause.setStatus('mandatory')
mscAtmIfVptVccTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTroubled.setStatus('mandatory')
mscAtmIfVptVccSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccSegLinkSideLoopbackState.setStatus('mandatory')
mscAtmIfVptVccSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccSegSwitchSideLoopbackState.setStatus('mandatory')
mscAtmIfVptVccEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccEndToEndLoopbackState.setStatus('mandatory')
mscAtmIfVptVccRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxOamCellCongestionState.setStatus('mandatory')
mscAtmIfVptVccAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccAisState.setStatus('mandatory')
mscAtmIfVptVccRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRdiState.setStatus('mandatory')
mscAtmIfVptVccTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130), )
if mibBuilder.loadTexts: mscAtmIfVptVccTrafficTable.setStatus('mandatory')
mscAtmIfVptVccTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTrafficEntry.setStatus('mandatory')
mscAtmIfVptVccTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxTrafficDescType.setStatus('obsolete')
mscAtmIfVptVccTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxQosClass.setStatus('obsolete')
mscAtmIfVptVccFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccFwdQosClass.setStatus('obsolete')
mscAtmIfVptVccTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxQueueLength.setStatus('obsolete')
mscAtmIfVptVccTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxQueueCongestionState.setStatus('obsolete')
mscAtmIfVptVccHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccHoldingPriority.setStatus('obsolete')
mscAtmIfVptVccRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxTrafficDescType.setStatus('obsolete')
mscAtmIfVptVccRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxQosClass.setStatus('obsolete')
mscAtmIfVptVccBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccBwdQosClass.setStatus('obsolete')
mscAtmIfVptVccAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccAtmServiceCategory.setStatus('obsolete')
mscAtmIfVptVccTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTrafficShaping.setStatus('obsolete')
mscAtmIfVptVccBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccBearerClassBbc.setStatus('obsolete')
mscAtmIfVptVccTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVptVccClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccClippingBbc.setStatus('obsolete')
mscAtmIfVptVccUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVptVccBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccBestEffort.setStatus('obsolete')
mscAtmIfVptVccUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccUsageParameterControl.setStatus('obsolete')
mscAtmIfVptVccTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxFrameDiscard.setStatus('obsolete')
mscAtmIfVptVccRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxFrameDiscard.setStatus('obsolete')
mscAtmIfVptVccBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccBandwidthElastic.setStatus('obsolete')
mscAtmIfVptVccBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccBandwidthReduction.setStatus('obsolete')
mscAtmIfVptVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140), )
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTable.setStatus('mandatory')
mscAtmIfVptVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccStatsEntry.setStatus('mandatory')
mscAtmIfVptVccStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTxCell.setStatus('mandatory')
mscAtmIfVptVccStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTxCellClp.setStatus('mandatory')
mscAtmIfVptVccTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxDiscard.setStatus('obsolete')
mscAtmIfVptVccTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxDiscardClp.setStatus('obsolete')
mscAtmIfVptVccStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTxCellDiscard.setStatus('mandatory')
mscAtmIfVptVccStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTxCellDiscardClp.setStatus('mandatory')
mscAtmIfVptVccStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTxFrameDiscard.setStatus('mandatory')
mscAtmIfVptVccStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsTxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVptVccStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxCell.setStatus('mandatory')
mscAtmIfVptVccStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxCellClp.setStatus('mandatory')
mscAtmIfVptVccRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxDiscard.setStatus('obsolete')
mscAtmIfVptVccRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxDiscardClp.setStatus('obsolete')
mscAtmIfVptVccStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxCellDiscard.setStatus('mandatory')
mscAtmIfVptVccStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxCellDiscardClp.setStatus('mandatory')
mscAtmIfVptVccStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxFrameDiscard.setStatus('mandatory')
mscAtmIfVptVccStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxFrameDiscardClp.setStatus('mandatory')
mscAtmIfVptVccStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
mscAtmIfVptVccStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
mscAtmIfVptVccStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxAal5FrameError.setStatus('mandatory')
mscAtmIfVptVccStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccStatsRxAal5FrameAbort.setStatus('mandatory')
mscAtmIfVptVccTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 294), )
if mibBuilder.loadTexts: mscAtmIfVptVccTxTdpTable.setStatus('obsolete')
mscAtmIfVptVccTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 294, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTxTdpEntry.setStatus('obsolete')
mscAtmIfVptVccTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVccTxTdpIndex.setStatus('obsolete')
mscAtmIfVptVccTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxTdpValue.setStatus('obsolete')
mscAtmIfVptVccRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 295), )
if mibBuilder.loadTexts: mscAtmIfVptVccRxTdpTable.setStatus('obsolete')
mscAtmIfVptVccRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 295, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccRxTdpEntry.setStatus('obsolete')
mscAtmIfVptVccRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVptVccRxTdpIndex.setStatus('obsolete')
mscAtmIfVptVccRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccRxTdpValue.setStatus('obsolete')
mscAtmIfVptVccTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 352), )
if mibBuilder.loadTexts: mscAtmIfVptVccTxQThreshTable.setStatus('obsolete')
mscAtmIfVptVccTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 352, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTxQThreshEntry.setStatus('obsolete')
mscAtmIfVptVccTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVptVccTxQThreshIndex.setStatus('obsolete')
mscAtmIfVptVccTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTxQThreshValue.setStatus('obsolete')
mscAtmIfVptVccFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 357), )
if mibBuilder.loadTexts: mscAtmIfVptVccFqpTable.setStatus('obsolete')
mscAtmIfVptVccFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 357, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccFqpEntry.setStatus('obsolete')
mscAtmIfVptVccFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccFqpIndex.setStatus('obsolete')
mscAtmIfVptVccFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccFqpValue.setStatus('obsolete')
mscAtmIfVptVccBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 358), )
if mibBuilder.loadTexts: mscAtmIfVptVccBqpTable.setStatus('obsolete')
mscAtmIfVptVccBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 358, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccBqpEntry.setStatus('obsolete')
mscAtmIfVptVccBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccBqpIndex.setStatus('obsolete')
mscAtmIfVptVccBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccBqpValue.setStatus('obsolete')
mscAtmIfVptVccVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2))
mscAtmIfVptVccVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRowStatus.setStatus('mandatory')
mscAtmIfVptVccVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdComponentName.setStatus('mandatory')
mscAtmIfVptVccVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdStorageType.setStatus('mandatory')
mscAtmIfVptVccVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccVcdIndex.setStatus('mandatory')
mscAtmIfVptVccVcdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdLbkTable.setStatus('mandatory')
mscAtmIfVptVccVcdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdLbkEntry.setStatus('mandatory')
mscAtmIfVptVccVcdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdSegLinkSideLoopback.setStatus('mandatory')
mscAtmIfVptVccVcdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdSegSwitchSideLoopback.setStatus('mandatory')
mscAtmIfVptVccVcdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdEndToEndLoopback.setStatus('mandatory')
mscAtmIfVptVccVcdMCastConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipointRoot", 1), ("pointToMultipointLeaf", 2))).clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdMCastConnectionType.setStatus('mandatory')
mscAtmIfVptVccVcdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTrafficTable.setStatus('mandatory')
mscAtmIfVptVccVcdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTrafficEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTxTrafficDescType.setStatus('obsolete')
mscAtmIfVptVccVcdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTxQosClass.setStatus('obsolete')
mscAtmIfVptVccVcdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdFwdQosClass.setStatus('obsolete')
mscAtmIfVptVccVcdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdHoldingPriority.setStatus('obsolete')
mscAtmIfVptVccVcdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRxTrafficDescType.setStatus('obsolete')
mscAtmIfVptVccVcdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRxQosClass.setStatus('obsolete')
mscAtmIfVptVccVcdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBwdQosClass.setStatus('obsolete')
mscAtmIfVptVccVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdAtmServiceCategory.setStatus('obsolete')
mscAtmIfVptVccVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTrafficShaping.setStatus('obsolete')
mscAtmIfVptVccVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdUnshapedTransmitQueueing.setStatus('obsolete')
mscAtmIfVptVccVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdUsageParameterControl.setStatus('obsolete')
mscAtmIfVptVccVcdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBearerClassBbc.setStatus('obsolete')
mscAtmIfVptVccVcdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTransferCapabilityBbc.setStatus('obsolete')
mscAtmIfVptVccVcdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdClippingBbc.setStatus('obsolete')
mscAtmIfVptVccVcdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBestEffort.setStatus('obsolete')
mscAtmIfVptVccVcdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdFwdFrameDiscard.setStatus('obsolete')
mscAtmIfVptVccVcdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBwdFrameDiscard.setStatus('obsolete')
mscAtmIfVptVccVcdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 111), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdAcctTable.setStatus('mandatory')
mscAtmIfVptVccVcdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 111, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdAcctEntry.setStatus('mandatory')
mscAtmIfVptVccVcdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdCorrelationTag.setStatus('mandatory')
mscAtmIfVptVccVcdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 297), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTxTdpTable.setStatus('obsolete')
mscAtmIfVptVccVcdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 297, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTxTdpEntry.setStatus('obsolete')
mscAtmIfVptVccVcdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTxTdpIndex.setStatus('obsolete')
mscAtmIfVptVccVcdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTxTdpValue.setStatus('obsolete')
mscAtmIfVptVccVcdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 298), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRxTdpTable.setStatus('obsolete')
mscAtmIfVptVccVcdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 298, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRxTdpEntry.setStatus('obsolete')
mscAtmIfVptVccVcdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRxTdpIndex.setStatus('obsolete')
mscAtmIfVptVccVcdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdRxTdpValue.setStatus('obsolete')
mscAtmIfVptVccVcdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 359), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdFqpTable.setStatus('obsolete')
mscAtmIfVptVccVcdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 359, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdFqpEntry.setStatus('obsolete')
mscAtmIfVptVccVcdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdFqpIndex.setStatus('obsolete')
mscAtmIfVptVccVcdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdFqpValue.setStatus('obsolete')
mscAtmIfVptVccVcdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 360), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBqpTable.setStatus('obsolete')
mscAtmIfVptVccVcdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 360, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBqpEntry.setStatus('obsolete')
mscAtmIfVptVccVcdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBqpIndex.setStatus('obsolete')
mscAtmIfVptVccVcdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdBqpValue.setStatus('obsolete')
mscAtmIfVptVccVcdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2))
mscAtmIfVptVccVcdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRowStatus.setStatus('mandatory')
mscAtmIfVptVccVcdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmComponentName.setStatus('mandatory')
mscAtmIfVptVccVcdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmStorageType.setStatus('mandatory')
mscAtmIfVptVccVcdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmIndex.setStatus('mandatory')
mscAtmIfVptVccVcdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmProvTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmProvEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVptVccVcdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmFwdQosClass.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 512000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxQueueLimit.setStatus('mandatory')
mscAtmIfVptVccVcdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmHoldingPriority.setStatus('mandatory')
mscAtmIfVptVccVcdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVptVccVcdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBwdQosClass.setStatus('mandatory')
mscAtmIfVptVccVcdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVptVccVcdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTrafficShaping.setStatus('mandatory')
mscAtmIfVptVccVcdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVptVccVcdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmWeight.setStatus('mandatory')
mscAtmIfVptVccVcdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmForceTagging.setStatus('mandatory')
mscAtmIfVptVccVcdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVptVccVcdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVptVccVcdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVptVccVcdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmClippingBbc.setStatus('mandatory')
mscAtmIfVptVccVcdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBestEffort.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptVccVcdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 456), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxTdpTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVptVccVcdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmTxTdpValue.setStatus('mandatory')
mscAtmIfVptVccVcdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 457), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRxTdpTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVptVccVcdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmRxTdpValue.setStatus('mandatory')
mscAtmIfVptVccVcdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 458), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmFqpTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmFqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmFqpEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmFqpIndex.setStatus('mandatory')
mscAtmIfVptVccVcdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmFqpValue.setStatus('mandatory')
mscAtmIfVptVccVcdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 459), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBqpTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmBqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBqpEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBqpIndex.setStatus('mandatory')
mscAtmIfVptVccVcdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmBqpValue.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2))
mscAtmIfVptVccVcdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrComponentName.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrStorageType.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrIndex.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrProvTable.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrProvEntry.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrDgcraMaximumDelay.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrDgcraMinimumDelay.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVptVccVcdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdTmAbrFarEndInitialCellRate.setStatus('mandatory')
mscAtmIfVptVccVcdPm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3))
mscAtmIfVptVccVcdPmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccVcdPmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccVcdPmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmRowStatus.setStatus('mandatory')
mscAtmIfVptVccVcdPmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmComponentName.setStatus('mandatory')
mscAtmIfVptVccVcdPmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmStorageType.setStatus('mandatory')
mscAtmIfVptVccVcdPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmIndex.setStatus('mandatory')
mscAtmIfVptVccVcdPmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmProvTable.setStatus('mandatory')
mscAtmIfVptVccVcdPmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccVcdPmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmProvEntry.setStatus('mandatory')
mscAtmIfVptVccVcdPmSegSwitchSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 100, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmSegSwitchSideMeasurement.setStatus('mandatory')
mscAtmIfVptVccVcdPmSegLinkSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 100, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmSegLinkSideMeasurement.setStatus('mandatory')
mscAtmIfVptVccVcdPmControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 2, 3, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("autoStart", 0), ("onDemand", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccVcdPmControlMode.setStatus('mandatory')
mscAtmIfVptVccLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3))
mscAtmIfVptVccLoopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccLoopRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccLoopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccLoopIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccLoopRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccLoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccLoopRowStatus.setStatus('mandatory')
mscAtmIfVptVccLoopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccLoopComponentName.setStatus('mandatory')
mscAtmIfVptVccLoopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccLoopStorageType.setStatus('mandatory')
mscAtmIfVptVccLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccLoopIndex.setStatus('mandatory')
mscAtmIfVptVccNep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5))
mscAtmIfVptVccNepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccNepRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccNepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccNepIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccNepRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccNepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccNepRowStatus.setStatus('mandatory')
mscAtmIfVptVccNepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccNepComponentName.setStatus('mandatory')
mscAtmIfVptVccNepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccNepStorageType.setStatus('mandatory')
mscAtmIfVptVccNepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccNepIndex.setStatus('mandatory')
mscAtmIfVptVccNepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccNepProvTable.setStatus('mandatory')
mscAtmIfVptVccNepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccNepIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccNepProvEntry.setStatus('mandatory')
mscAtmIfVptVccNepApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 5, 100, 1, 10), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccNepApplicationName.setStatus('mandatory')
mscAtmIfVptVccTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6))
mscAtmIfVptVccTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccTestRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTestRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestRowStatus.setStatus('mandatory')
mscAtmIfVptVccTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestComponentName.setStatus('mandatory')
mscAtmIfVptVccTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestStorageType.setStatus('mandatory')
mscAtmIfVptVccTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccTestIndex.setStatus('mandatory')
mscAtmIfVptVccTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccTestStateTable.setStatus('mandatory')
mscAtmIfVptVccTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTestStateEntry.setStatus('mandatory')
mscAtmIfVptVccTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestAdminState.setStatus('mandatory')
mscAtmIfVptVccTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestOperationalState.setStatus('mandatory')
mscAtmIfVptVccTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestUsageState.setStatus('mandatory')
mscAtmIfVptVccTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVccTestSetupTable.setStatus('mandatory')
mscAtmIfVptVccTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTestSetupEntry.setStatus('mandatory')
mscAtmIfVptVccTestFrmTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestFrmTypes.setStatus('mandatory')
mscAtmIfVptVccTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestFrmSize.setStatus('mandatory')
mscAtmIfVptVccTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestFrmPatternType.setStatus('mandatory')
mscAtmIfVptVccTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 40), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestCustomizedPattern.setStatus('mandatory')
mscAtmIfVptVccTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestDuration.setStatus('mandatory')
mscAtmIfVptVccTestBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestBandwidthElastic.setStatus('mandatory')
mscAtmIfVptVccTestOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptVccTestOverrideHoldingPriority.setStatus('mandatory')
mscAtmIfVptVccTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120), )
if mibBuilder.loadTexts: mscAtmIfVptVccTestResultsTable.setStatus('mandatory')
mscAtmIfVptVccTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTestIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTestResultsEntry.setStatus('mandatory')
mscAtmIfVptVccTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestElapsedTime.setStatus('mandatory')
mscAtmIfVptVccTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestTimeRemaining.setStatus('mandatory')
mscAtmIfVptVccTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("neverStarted", 2), ("testRunning", 3))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestCauseOfTermination.setStatus('mandatory')
mscAtmIfVptVccTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestBytesTx.setStatus('mandatory')
mscAtmIfVptVccTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestBytesRx.setStatus('mandatory')
mscAtmIfVptVccTestLoadingFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestLoadingFrmTx.setStatus('mandatory')
mscAtmIfVptVccTestLoadingFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestLoadingFrmRx.setStatus('mandatory')
mscAtmIfVptVccTestLoadingFrmLost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestLoadingFrmLost.setStatus('mandatory')
mscAtmIfVptVccTestVerificationFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestVerificationFrmTx.setStatus('mandatory')
mscAtmIfVptVccTestVerificationFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestVerificationFrmRx.setStatus('mandatory')
mscAtmIfVptVccTestVerificationFrmBad = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 110), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestVerificationFrmBad.setStatus('mandatory')
mscAtmIfVptVccTestUnrecognizableFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 6, 120, 1, 120), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTestUnrecognizableFrmRx.setStatus('mandatory')
mscAtmIfVptVccTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7))
mscAtmIfVptVccTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmRowStatus.setStatus('mandatory')
mscAtmIfVptVccTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmComponentName.setStatus('mandatory')
mscAtmIfVptVccTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmStorageType.setStatus('mandatory')
mscAtmIfVptVccTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccTmIndex.setStatus('mandatory')
mscAtmIfVptVccTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmOperTable.setStatus('mandatory')
mscAtmIfVptVccTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmOperEntry.setStatus('mandatory')
mscAtmIfVptVccTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxTrafficDescType.setStatus('mandatory')
mscAtmIfVptVccTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQosClass.setStatus('mandatory')
mscAtmIfVptVccTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQueueLength.setStatus('mandatory')
mscAtmIfVptVccTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQueueCongestionState.setStatus('mandatory')
mscAtmIfVptVccTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmHoldingPriority.setStatus('mandatory')
mscAtmIfVptVccTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxTrafficDescType.setStatus('mandatory')
mscAtmIfVptVccTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14), ("sameAsFwd", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxQosClass.setStatus('mandatory')
mscAtmIfVptVccTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAtmServiceCategory.setStatus('mandatory')
mscAtmIfVptVccTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTrafficShaping.setStatus('mandatory')
mscAtmIfVptVccTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmBearerClassBbc.setStatus('mandatory')
mscAtmIfVptVccTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTransferCapabilityBbc.setStatus('mandatory')
mscAtmIfVptVccTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmClippingBbc.setStatus('mandatory')
mscAtmIfVptVccTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmUnshapedTransmitQueueing.setStatus('mandatory')
mscAtmIfVptVccTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmBestEffort.setStatus('mandatory')
mscAtmIfVptVccTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmForceTagging.setStatus('mandatory')
mscAtmIfVptVccTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmWeight.setStatus('mandatory')
mscAtmIfVptVccTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmUsageParameterControl.setStatus('mandatory')
mscAtmIfVptVccTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptVccTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxPacketWiseDiscard.setStatus('mandatory')
mscAtmIfVptVccTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmBandwidthElastic.setStatus('mandatory')
mscAtmIfVptVccTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmBandwidthReduction.setStatus('mandatory')
mscAtmIfVptVccTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrConnectionType.setStatus('mandatory')
mscAtmIfVptVccTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 451), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxTdpTable.setStatus('mandatory')
mscAtmIfVptVccTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 451, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmTxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxTdpEntry.setStatus('mandatory')
mscAtmIfVptVccTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxTdpIndex.setStatus('mandatory')
mscAtmIfVptVccTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxTdpValue.setStatus('mandatory')
mscAtmIfVptVccTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 452), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQThreshTable.setStatus('mandatory')
mscAtmIfVptVccTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 452, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmTxQThreshIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQThreshEntry.setStatus('mandatory')
mscAtmIfVptVccTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQThreshIndex.setStatus('mandatory')
mscAtmIfVptVccTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTxQThreshValue.setStatus('mandatory')
mscAtmIfVptVccTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 453), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxTdpTable.setStatus('mandatory')
mscAtmIfVptVccTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 453, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmRxTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxTdpEntry.setStatus('mandatory')
mscAtmIfVptVccTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxTdpIndex.setStatus('mandatory')
mscAtmIfVptVccTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmRxTdpValue.setStatus('mandatory')
mscAtmIfVptVccTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 454), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmTqpTable.setStatus('mandatory')
mscAtmIfVptVccTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 454, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmTqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmTqpEntry.setStatus('mandatory')
mscAtmIfVptVccTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccTmTqpIndex.setStatus('mandatory')
mscAtmIfVptVccTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmTqpValue.setStatus('mandatory')
mscAtmIfVptVccTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 455), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmRqpTable.setStatus('mandatory')
mscAtmIfVptVccTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 455, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmRqpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmRqpEntry.setStatus('mandatory')
mscAtmIfVptVccTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: mscAtmIfVptVccTmRqpIndex.setStatus('mandatory')
mscAtmIfVptVccTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmRqpValue.setStatus('mandatory')
mscAtmIfVptVccTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2))
mscAtmIfVptVccTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrRowStatusTable.setStatus('mandatory')
mscAtmIfVptVccTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrRowStatusEntry.setStatus('mandatory')
mscAtmIfVptVccTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrRowStatus.setStatus('mandatory')
mscAtmIfVptVccTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrComponentName.setStatus('mandatory')
mscAtmIfVptVccTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrStorageType.setStatus('mandatory')
mscAtmIfVptVccTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrIndex.setStatus('mandatory')
mscAtmIfVptVccTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110), )
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrOperTable.setStatus('mandatory')
mscAtmIfVptVccTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptVccTmAbrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrOperEntry.setStatus('mandatory')
mscAtmIfVptVccTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrInitialCellRate.setStatus('mandatory')
mscAtmIfVptVccTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrTransientBufferExposure.setStatus('mandatory')
mscAtmIfVptVccTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrFixedRoundTripTime.setStatus('mandatory')
mscAtmIfVptVccTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrRateDecreaseFactor.setStatus('mandatory')
mscAtmIfVptVccTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrRateIncreaseFactor.setStatus('mandatory')
mscAtmIfVptVccTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrMaxCellPerRmCell.setStatus('mandatory')
mscAtmIfVptVccTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
mscAtmIfVptVccTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrCutoffDecreaseFactor.setStatus('mandatory')
mscAtmIfVptVccTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
mscAtmIfVptVccTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrForwardRmCellLimit.setStatus('mandatory')
mscAtmIfVptVccTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrTxRateChangeInfo.setStatus('mandatory')
mscAtmIfVptVccTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrAcrRateChangeInfo.setStatus('mandatory')
mscAtmIfVptVccTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrTxFwdRmCells.setStatus('mandatory')
mscAtmIfVptVccTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 20, 7, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptVccTmAbrRxEfci.setStatus('mandatory')
mscAtmIfEp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10))
mscAtmIfEpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 1), )
if mibBuilder.loadTexts: mscAtmIfEpRowStatusTable.setStatus('mandatory')
mscAtmIfEpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfEpIndex"))
if mibBuilder.loadTexts: mscAtmIfEpRowStatusEntry.setStatus('mandatory')
mscAtmIfEpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfEpRowStatus.setStatus('mandatory')
mscAtmIfEpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfEpComponentName.setStatus('mandatory')
mscAtmIfEpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfEpStorageType.setStatus('mandatory')
mscAtmIfEpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: mscAtmIfEpIndex.setStatus('mandatory')
mscAtmIfEpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 100), )
if mibBuilder.loadTexts: mscAtmIfEpProvTable.setStatus('mandatory')
mscAtmIfEpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfEpIndex"))
if mibBuilder.loadTexts: mscAtmIfEpProvEntry.setStatus('mandatory')
mscAtmIfEpMinimumBandwidthGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 10, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfEpMinimumBandwidthGuarantee.setStatus('mandatory')
mscAtmIfPm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11))
mscAtmIfPmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 1), )
if mibBuilder.loadTexts: mscAtmIfPmRowStatusTable.setStatus('mandatory')
mscAtmIfPmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfPmIndex"))
if mibBuilder.loadTexts: mscAtmIfPmRowStatusEntry.setStatus('mandatory')
mscAtmIfPmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfPmRowStatus.setStatus('mandatory')
mscAtmIfPmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfPmComponentName.setStatus('mandatory')
mscAtmIfPmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfPmStorageType.setStatus('mandatory')
mscAtmIfPmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfPmIndex.setStatus('mandatory')
mscAtmIfPmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 100), )
if mibBuilder.loadTexts: mscAtmIfPmProvTable.setStatus('mandatory')
mscAtmIfPmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfPmIndex"))
if mibBuilder.loadTexts: mscAtmIfPmProvEntry.setStatus('mandatory')
mscAtmIfPmSegSwitchSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 100, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfPmSegSwitchSideMeasurement.setStatus('mandatory')
mscAtmIfPmSegLinkSideMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 100, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfPmSegLinkSideMeasurement.setStatus('mandatory')
mscAtmIfPmControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 11, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autoStart", 0), ("onDemand", 1))).clone('autoStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfPmControlMode.setStatus('mandatory')
atmCoreGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 1))
atmCoreGroupCB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 1, 2))
atmCoreGroupCB02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 1, 2, 3))
atmCoreGroupCB02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 1, 2, 3, 2))
atmCoreCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 3))
atmCoreCapabilitiesCB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 3, 2))
atmCoreCapabilitiesCB02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 3, 2, 3))
atmCoreCapabilitiesCB02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 123, 3, 2, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfVccVcdTmTxTdpEntry=mscAtmIfVccVcdTmTxTdpEntry, mscAtmIfNAcct=mscAtmIfNAcct, mscAtmIfLastAal5RxAbortConnection=mscAtmIfLastAal5RxAbortConnection, mscAtmIfCACbrOperTable=mscAtmIfCACbrOperTable, mscAtmIfOperEntry=mscAtmIfOperEntry, mscAtmIfVptVccTmAbrAcrDecreaseTimeFactor=mscAtmIfVptVccTmAbrAcrDecreaseTimeFactor, mscAtmIfVptVpdTmAbrRowStatus=mscAtmIfVptVpdTmAbrRowStatus, mscAtmIfVptVccTmAbrRowStatus=mscAtmIfVptVccTmAbrRowStatus, mscAtmIfCARtVbrOperTable=mscAtmIfCARtVbrOperTable, mscAtmIfVccPmBwdAverageClr01=mscAtmIfVccPmBwdAverageClr01, mscAtmIfEpIndex=mscAtmIfEpIndex, mscAtmIfConnMapVccProvEntry=mscAtmIfConnMapVccProvEntry, mscAtmIfVptVccRxTdpEntry=mscAtmIfVptVccRxTdpEntry, mscAtmIfVptVccTestTimeRemaining=mscAtmIfVptVccTestTimeRemaining, mscAtmIfCARtVbrRowStatusEntry=mscAtmIfCARtVbrRowStatusEntry, mscAtmIfVptCANrtVbrRowStatusTable=mscAtmIfVptCANrtVbrRowStatusTable, mscAtmIfVptCAPoolAdmitBwValue=mscAtmIfVptCAPoolAdmitBwValue, mscAtmIfVptStatusEntry=mscAtmIfVptStatusEntry, mscAtmIfVpcVpdTrafficTable=mscAtmIfVpcVpdTrafficTable, mscAtmIfVccTmAbrRowStatusTable=mscAtmIfVccTmAbrRowStatusTable, mscAtmIfVccTxFrameDiscard=mscAtmIfVccTxFrameDiscard, mscAtmIfVptVccVcdPm=mscAtmIfVptVccVcdPm, mscAtmIfVpcPmCurrentAvailabilityStatus=mscAtmIfVpcPmCurrentAvailabilityStatus, mscAtmIfVccTestBytesTx=mscAtmIfVccTestBytesTx, mscAtmIfVpcVpdRowStatusTable=mscAtmIfVpcVpdRowStatusTable, mscAtmIfVccVcdTmRowStatusEntry=mscAtmIfVccVcdTmRowStatusEntry, mscAtmIfVptTmAbrRowStatusTable=mscAtmIfVptTmAbrRowStatusTable, mscAtmIfVptTrafficTable=mscAtmIfVptTrafficTable, mscAtmIfVccDistributionType=mscAtmIfVccDistributionType, mscAtmIfVptVpdFqpTable=mscAtmIfVptVpdFqpTable, mscAtmIfVccPmBwdMaximumClr01=mscAtmIfVccPmBwdMaximumClr01, mscAtmIfVptVpdFwdFrameDiscard=mscAtmIfVptVpdFwdFrameDiscard, mscAtmIfNAcctRowStatusTable=mscAtmIfNAcctRowStatusTable, mscAtmIfVptVpdTmClippingBbc=mscAtmIfVptVpdTmClippingBbc, mscAtmIfVccVcdTmWeight=mscAtmIfVccVcdTmWeight, mscAtmIfVccPerfEntry=mscAtmIfVccPerfEntry, mscAtmIfVccTmRxTdpIndex=mscAtmIfVccTmRxTdpIndex, mscAtmIfVptVpdTmAbrFarEndInitialCellRate=mscAtmIfVptVpdTmAbrFarEndInitialCellRate, mscAtmIfVptVccTmOperEntry=mscAtmIfVptVccTmOperEntry, mscAtmIfVccTestFrmSize=mscAtmIfVccTestFrmSize, mscAtmIfVpcStatsRxAal5FrameError=mscAtmIfVpcStatsRxAal5FrameError, mscAtmIfVpcVpdTmRxTdpIndex=mscAtmIfVpcVpdTmRxTdpIndex, mscAtmIfVptVccTmUsageParameterControl=mscAtmIfVptVccTmUsageParameterControl, mscAtmIfVptTmRxTdpValue=mscAtmIfVptTmRxTdpValue, mscAtmIfCAPoolAdmConnsIndex=mscAtmIfCAPoolAdmConnsIndex, mscAtmIfReceivedCells=mscAtmIfReceivedCells, mscAtmIfVpcTmTqpTable=mscAtmIfVpcTmTqpTable, mscAtmIfVccStatusTable=mscAtmIfVccStatusTable, mscAtmIfVccTxTdpEntry=mscAtmIfVccTxTdpEntry, mscAtmIfVptCAProvTable=mscAtmIfVptCAProvTable, mscAtmIfVptTmTxTrafficDescType=mscAtmIfVptTmTxTrafficDescType, mscAtmIfVpcStatsTxFrameDiscardClp=mscAtmIfVpcStatsTxFrameDiscardClp, mscAtmIfVccVcd=mscAtmIfVccVcd, mscAtmIfVccPmRowStatus=mscAtmIfVccPmRowStatus, mscAtmIfVptVpdTxTrafficDescType=mscAtmIfVptVpdTxTrafficDescType, mscAtmIfVpcRowStatusEntry=mscAtmIfVpcRowStatusEntry, mscAtmIfConnMapOvNumNonZeroVpisForVccs=mscAtmIfConnMapOvNumNonZeroVpisForVccs, mscAtmIfVccPmFwdAverageClr01=mscAtmIfVccPmFwdAverageClr01, mscAtmIfPmProvEntry=mscAtmIfPmProvEntry, mscAtmIfVptCANrtVbrPool=mscAtmIfVptCANrtVbrPool, mscAtmIfVptVccTmAbrTxRateChangeInfo=mscAtmIfVptVccTmAbrTxRateChangeInfo, mscAtmIfConnMapNumVccsForVpiZero=mscAtmIfConnMapNumVccsForVpiZero, mscAtmIfCAAbrUsageParameterControl=mscAtmIfCAAbrUsageParameterControl, mscAtmIfVccTmRqpEntry=mscAtmIfVccTmRqpEntry, mscAtmIfVptVccVcdTmBqpValue=mscAtmIfVptVccVcdTmBqpValue, mscAtmIfVpcVpdRxTdpTable=mscAtmIfVpcVpdRxTdpTable, mscAtmIfVptVccConnInfoEntry=mscAtmIfVptVccConnInfoEntry, mscAtmIfVccLoop=mscAtmIfVccLoop, mscAtmIfVccTmAbrOperTable=mscAtmIfVccTmAbrOperTable, mscAtmIfVptVccTxTdpValue=mscAtmIfVptVccTxTdpValue, mscAtmIfVptVpdTmAbrProvTable=mscAtmIfVptVpdTmAbrProvTable, mscAtmIfCAAbrFrttPortion=mscAtmIfCAAbrFrttPortion, mscAtmIfVptCASwitchedVccs=mscAtmIfVptCASwitchedVccs, mscAtmIfVpcLoopRowStatusEntry=mscAtmIfVpcLoopRowStatusEntry, mscAtmIfVptVpdTmTxTrafficDescType=mscAtmIfVptVpdTmTxTrafficDescType, mscAtmIfVccVcdTmTxPacketWiseDiscard=mscAtmIfVccVcdTmTxPacketWiseDiscard, mscAtmIfVptTmTxTdpValue=mscAtmIfVptTmTxTdpValue, mscAtmIfVptVccDistributionType=mscAtmIfVptVccDistributionType, mscAtmIfVptClippingBbc=mscAtmIfVptClippingBbc, mscAtmIfVptVccVcdPmIndex=mscAtmIfVptVccVcdPmIndex, mscAtmIfVpcStateEntry=mscAtmIfVpcStateEntry, mscAtmIfCAOamCcConnections=mscAtmIfCAOamCcConnections, mscAtmIfCANrtVbrStorageType=mscAtmIfCANrtVbrStorageType, mscAtmIfVccPmBwdTotalUserCellsTx01=mscAtmIfVccPmBwdTotalUserCellsTx01, mscAtmIfVptVccVcdPmRowStatusTable=mscAtmIfVptVccVcdPmRowStatusTable, mscAtmIfVpcTxQueueCongestionState=mscAtmIfVpcTxQueueCongestionState, mscAtmIfVccTestIndex=mscAtmIfVccTestIndex, mscAtmIfCAAbrComponentName=mscAtmIfCAAbrComponentName, mscAtmIfVptVccLoopRowStatus=mscAtmIfVptVccLoopRowStatus, mscAtmIfVccPmBwdClrTable=mscAtmIfVccPmBwdClrTable, mscAtmIfVpcVpdTmAbrProvEntry=mscAtmIfVpcVpdTmAbrProvEntry, mscAtmIfVpcTmRxTdpValue=mscAtmIfVpcTmRxTdpValue, mscAtmIfVccTestFrmPatternType=mscAtmIfVccTestFrmPatternType, mscAtmIfCAPoolRequBwValue=mscAtmIfCAPoolRequBwValue, mscAtmIfVptVpdTmRxTdpEntry=mscAtmIfVptVpdTmRxTdpEntry, mscAtmIfVpc=mscAtmIfVpc, mscAtmIfVptVccTrafficEntry=mscAtmIfVptVccTrafficEntry, mscAtmIfSegSwitchSideLoopback=mscAtmIfSegSwitchSideLoopback, mscAtmIfVpcVpdTmFqpIndex=mscAtmIfVpcVpdTmFqpIndex, mscAtmIfVptVccTmWeight=mscAtmIfVptVccTmWeight, mscAtmIfVptVccVcdRxQosClass=mscAtmIfVptVccVcdRxQosClass, mscAtmIfVccVcdTmAbrConnectionType=mscAtmIfVccVcdTmAbrConnectionType, mscAtmIfVptTmHoldingPriority=mscAtmIfVptTmHoldingPriority, mscAtmIfVptVccLoopStorageType=mscAtmIfVptVccLoopStorageType, mscAtmIfVccTestComponentName=mscAtmIfVccTestComponentName, mscAtmIfVccNepComponentName=mscAtmIfVccNepComponentName, mscAtmIfVptVpdBqpValue=mscAtmIfVptVpdBqpValue, mscAtmIfVccVcdTmBqpTable=mscAtmIfVccVcdTmBqpTable, mscAtmIfVptVccUsageParameterControl=mscAtmIfVptVccUsageParameterControl, mscAtmIfVccFqpEntry=mscAtmIfVccFqpEntry, mscAtmIfCAMaxAutoSelectedVciForVpiZero=mscAtmIfCAMaxAutoSelectedVciForVpiZero, mscAtmIfVccVcdTmIndex=mscAtmIfVccVcdTmIndex, mscAtmIfVptRdiState=mscAtmIfVptRdiState, mscAtmIfVptVpdRxTdpTable=mscAtmIfVptVpdRxTdpTable, mscAtmIfVccVcdTmUnshapedTransmitQueueing=mscAtmIfVccVcdTmUnshapedTransmitQueueing, mscAtmIfVpcTmClippingBbc=mscAtmIfVpcTmClippingBbc, mscAtmIfVccNepStorageType=mscAtmIfVccNepStorageType, mscAtmIfVccTmAbrFixedRoundTripTime=mscAtmIfVccTmAbrFixedRoundTripTime, mscAtmIfVptVccVcdTmRowStatus=mscAtmIfVptVccVcdTmRowStatus, mscAtmIfVptVccNepProvTable=mscAtmIfVptVccNepProvTable, mscAtmIfVptVccAdminState=mscAtmIfVptVccAdminState, mscAtmIfVptVccRxOamCellCongestionState=mscAtmIfVptVccRxOamCellCongestionState, mscAtmIfVpcTmAbrAcrDecreaseTimeFactor=mscAtmIfVpcTmAbrAcrDecreaseTimeFactor, mscAtmIfVpcVpdTmUnshapedTransmitQueueing=mscAtmIfVpcVpdTmUnshapedTransmitQueueing, atmCoreGroup=atmCoreGroup, mscAtmIfVptVccFqpValue=mscAtmIfVptVccFqpValue, mscAtmIfTxFrameDiscardClp=mscAtmIfTxFrameDiscardClp, mscAtmIfVccTmTxTdpValue=mscAtmIfVccTmTxTdpValue, mscAtmIfVptVccVcdTmStorageType=mscAtmIfVptVccVcdTmStorageType, mscAtmIfVccTestTimeRemaining=mscAtmIfVccTestTimeRemaining, mscAtmIfVptCARtVbrProvEntry=mscAtmIfVptCARtVbrProvEntry, mscAtmIfCAAbrRowStatus=mscAtmIfCAAbrRowStatus, mscAtmIfVpcVpdHoldingPriority=mscAtmIfVpcVpdHoldingPriority, mscAtmIfCANrtVbrPerVcQueueLimitReferenceRate=mscAtmIfCANrtVbrPerVcQueueLimitReferenceRate, mscAtmIfVpcLoopStorageType=mscAtmIfVpcLoopStorageType, mscAtmIfCAAbrMaxTimeBetweenRmCell=mscAtmIfCAAbrMaxTimeBetweenRmCell, mscAtmIfVptTmRowStatusEntry=mscAtmIfVptTmRowStatusEntry, mscAtmIfVptTm=mscAtmIfVptTm, mscAtmIfCATroubledVpcs=mscAtmIfCATroubledVpcs, mscAtmIfVptVpdTxTdpEntry=mscAtmIfVptVpdTxTdpEntry, mscAtmIfCAAbrIndex=mscAtmIfCAAbrIndex, mscAtmIfCARtVbrForceTagging=mscAtmIfCARtVbrForceTagging, mscAtmIfVptTmRxTdpTable=mscAtmIfVptTmRxTdpTable, mscAtmIfVpcVpdTmComponentName=mscAtmIfVpcVpdTmComponentName, mscAtmIfVccTmTqpTable=mscAtmIfVccTmTqpTable, mscAtmIfVptVccStateEntry=mscAtmIfVptVccStateEntry, mscAtmIfVptCACbrProvEntry=mscAtmIfVptCACbrProvEntry, mscAtmIfVpcTmAbrIndex=mscAtmIfVpcTmAbrIndex, mscAtmIfVpcTmRqpValue=mscAtmIfVpcTmRqpValue, mscAtmIfVccPmArMeasurementStatus=mscAtmIfVccPmArMeasurementStatus, mscAtmIfVptVccVcdTmAbrRowStatusEntry=mscAtmIfVptVccVcdTmAbrRowStatusEntry, mscAtmIfVpcVpdTmProvEntry=mscAtmIfVpcVpdTmProvEntry, mscAtmIfVptVccStatsRxUpcViolationOnEnforcer1=mscAtmIfVptVccStatsRxUpcViolationOnEnforcer1, mscAtmIfCAUbrEmissionPriority=mscAtmIfCAUbrEmissionPriority, mscAtmIfCAMaxVpcs=mscAtmIfCAMaxVpcs, mscAtmIfVccTmRqpTable=mscAtmIfVccTmRqpTable, mscAtmIfVptTmAbrAcrRateChangeInfo=mscAtmIfVptTmAbrAcrRateChangeInfo, mscAtmIfVpcVpdPmSegLinkSideMeasurement=mscAtmIfVpcVpdPmSegLinkSideMeasurement, mscAtmIfVptVccRxDiscard=mscAtmIfVptVccRxDiscard, mscAtmIfVptBqpEntry=mscAtmIfVptBqpEntry, mscAtmIfVccBqpIndex=mscAtmIfVccBqpIndex, mscAtmIfCAUbrUsageParameterControl=mscAtmIfCAUbrUsageParameterControl, mscAtmIfVccStorageType=mscAtmIfVccStorageType, mscAtmIfCANrtVbrEpdOffset=mscAtmIfCANrtVbrEpdOffset, mscAtmIfVpcBqpValue=mscAtmIfVpcBqpValue, mscAtmIfVptCAUbrRowStatus=mscAtmIfVptCAUbrRowStatus, mscAtmIfVccVcdTmRowStatusTable=mscAtmIfVccVcdTmRowStatusTable, mscAtmIfCAPoolWaitAdmConnsTable=mscAtmIfCAPoolWaitAdmConnsTable, mscAtmIfVptVccVcdEndToEndLoopback=mscAtmIfVptVccVcdEndToEndLoopback, mscAtmIfTransmittedCells=mscAtmIfTransmittedCells, mscAtmIfVptVpdTmFqpEntry=mscAtmIfVptVpdTmFqpEntry, mscAtmIfVpcVpdTxTdpEntry=mscAtmIfVpcVpdTxTdpEntry, mscAtmIfVpcTmAbrRateDecreaseFactor=mscAtmIfVpcTmAbrRateDecreaseFactor, mscAtmIfVccTmTxTrafficDescType=mscAtmIfVccTmTxTrafficDescType, mscAtmIfVptVccTmRxPacketWiseDiscard=mscAtmIfVptVccTmRxPacketWiseDiscard, mscAtmIfVpcRxTdpValue=mscAtmIfVpcRxTdpValue, mscAtmIfVptCAPoolProvBwEntry=mscAtmIfVptCAPoolProvBwEntry, mscAtmIfVptAtmServiceCategory=mscAtmIfVptAtmServiceCategory, mscAtmIfCARtVbrUsageParameterControl=mscAtmIfCARtVbrUsageParameterControl, mscAtmIfVccPmBwdLastSampleUserCellsTx01=mscAtmIfVccPmBwdLastSampleUserCellsTx01, mscAtmIfCAUbrIndex=mscAtmIfCAUbrIndex, mscAtmIfVptStatsTxCellDiscardClp=mscAtmIfVptStatsTxCellDiscardClp, mscAtmIfCAMinAutoSelectedVciForNonZeroVpi=mscAtmIfCAMinAutoSelectedVciForNonZeroVpi, mscAtmIfCAVbrRtCdvt=mscAtmIfCAVbrRtCdvt, mscAtmIfVptVccBqpIndex=mscAtmIfVptVccBqpIndex, mscAtmIfVptCACbrMaxCtd=mscAtmIfVptCACbrMaxCtd, mscAtmIfVptVpdTmAbrDgcraMaximumDelay=mscAtmIfVptVpdTmAbrDgcraMaximumDelay, mscAtmIfVptVccCallDirection=mscAtmIfVptVccCallDirection, mscAtmIfVpcVpdComponentName=mscAtmIfVpcVpdComponentName, mscAtmIfVccTmAbrRateIncreaseFactor=mscAtmIfVccTmAbrRateIncreaseFactor, mscAtmIfVccBqpTable=mscAtmIfVccBqpTable, mscAtmIfVpcVpdTmRowStatusEntry=mscAtmIfVpcVpdTmRowStatusEntry, mscAtmIfVccVcdTmFwdQosClass=mscAtmIfVccVcdTmFwdQosClass, mscAtmIfVptVpdEndToEndLoopback=mscAtmIfVptVpdEndToEndLoopback, mscAtmIfVccPmArAvailabilityRatio=mscAtmIfVccPmArAvailabilityRatio, mscAtmIfVpcVpdTrafficEntry=mscAtmIfVpcVpdTrafficEntry, mscAtmIfVpcTmTxQThreshTable=mscAtmIfVpcTmTxQThreshTable, mscAtmIfVccTestOverrideHoldingPriority=mscAtmIfVccTestOverrideHoldingPriority, mscAtmIfVptCARtVbrRowStatusEntry=mscAtmIfVptCARtVbrRowStatusEntry, mscAtmIfVptVccVcdBqpValue=mscAtmIfVptVccVcdBqpValue, mscAtmIfCAPoolAvailBwIndex=mscAtmIfCAPoolAvailBwIndex, mscAtmIfTxCell=mscAtmIfTxCell, mscAtmIfVccTxQueueLength=mscAtmIfVccTxQueueLength, mscAtmIfVptCAPoolAdmConnsIndex=mscAtmIfVptCAPoolAdmConnsIndex, mscAtmIfVptVccVcdTmAbrDgcraMinimumDelay=mscAtmIfVptVccVcdTmAbrDgcraMinimumDelay, mscAtmIfVptVccTmRxTdpValue=mscAtmIfVptVccTmRxTdpValue, mscAtmIfVptCAPoolAdmConnsTable=mscAtmIfVptCAPoolAdmConnsTable, mscAtmIfVptFwdQosClass=mscAtmIfVptFwdQosClass, mscAtmIfVpcPmBwdTotalClrInterval=mscAtmIfVpcPmBwdTotalClrInterval, mscAtmIfCAVbrRtPool=mscAtmIfCAVbrRtPool, mscAtmIfVccVcdPmRowStatusTable=mscAtmIfVccVcdPmRowStatusTable, mscAtmIfVptVccBandwidthElastic=mscAtmIfVptVccBandwidthElastic, mscAtmIfVccTmTqpIndex=mscAtmIfVccTmTqpIndex, mscAtmIfVccNepRowStatus=mscAtmIfVccNepRowStatus, mscAtmIfVpcPmFwdMinimumClr01=mscAtmIfVpcPmFwdMinimumClr01, mscAtmIfConnMapComponentName=mscAtmIfConnMapComponentName, mscAtmIfVpcPmFwdTotalUserCellsRx01=mscAtmIfVpcPmFwdTotalUserCellsRx01, mscAtmIfVptVpdProvEntry=mscAtmIfVptVpdProvEntry, mscAtmIfVptVccVcdPmControlMode=mscAtmIfVptVccVcdPmControlMode, mscAtmIfVccPmBwdLastSampleClr0=mscAtmIfVccPmBwdLastSampleClr0, mscAtmIfAal5RxErrors=mscAtmIfAal5RxErrors, mscAtmIfVptTxTrafficDescType=mscAtmIfVptTxTrafficDescType, mscAtmIfVptVccStatsEntry=mscAtmIfVptVccStatsEntry, mscAtmIfConnMapOv=mscAtmIfConnMapOv, mscAtmIfVptStatsTxFrameDiscard=mscAtmIfVptStatsTxFrameDiscard, mscAtmIfCAAbrRowStatusEntry=mscAtmIfCAAbrRowStatusEntry, mscAtmIfVptVpdTmTxQueueLimit=mscAtmIfVptVpdTmTxQueueLimit, mscAtmIfVccRxTdpEntry=mscAtmIfVccRxTdpEntry, mscAtmIfVptVccVcdTmTxTdpTable=mscAtmIfVptVccVcdTmTxTdpTable, mscAtmIfVptVccVcdTmAbrMaxCellPerRmCell=mscAtmIfVptVccVcdTmAbrMaxCellPerRmCell, mscAtmIfVccVcdTmAbrAcrDecreaseTimeFactor=mscAtmIfVccVcdTmAbrAcrDecreaseTimeFactor, mscAtmIfStateEntry=mscAtmIfStateEntry, mscAtmIfVptVccTmUnshapedTransmitQueueing=mscAtmIfVptVccTmUnshapedTransmitQueueing, mscAtmIfVpcTmRxTdpTable=mscAtmIfVpcTmRxTdpTable, mscAtmIfVptCABwPoolValue=mscAtmIfVptCABwPoolValue, mscAtmIfVptCAPoolAvailBwValue=mscAtmIfVptCAPoolAvailBwValue, mscAtmIfVptVccVcdComponentName=mscAtmIfVptVccVcdComponentName, mscAtmIfVptVccOperEntry=mscAtmIfVptVccOperEntry, mscAtmIfVptTmAbrStorageType=mscAtmIfVptTmAbrStorageType, mscAtmIfVpcTmForceTagging=mscAtmIfVpcTmForceTagging, mscAtmIfVccTestLoadingFrmTx=mscAtmIfVccTestLoadingFrmTx, mscAtmIfStatsEntry=mscAtmIfStatsEntry, mscAtmIfVptTmForceTagging=mscAtmIfVptTmForceTagging, mscAtmIfLbkTable=mscAtmIfLbkTable, mscAtmIfCAActualMaxVpts=mscAtmIfCAActualMaxVpts, mscAtmIfVccStatsRxAal5FrameAbort=mscAtmIfVccStatsRxAal5FrameAbort, mscAtmIfVpcTmTxQThreshValue=mscAtmIfVpcTmTxQThreshValue, mscAtmIfVptOperationalState=mscAtmIfVptOperationalState, mscAtmIfVccVcdTmBqpIndex=mscAtmIfVccVcdTmBqpIndex, atmCoreGroupCB02=atmCoreGroupCB02, mscAtmIfVptCARtVbrProvTable=mscAtmIfVptCARtVbrProvTable, mscAtmIfCAAbrTxQueueLimit=mscAtmIfCAAbrTxQueueLimit, mscAtmIfVptVccVcdFqpTable=mscAtmIfVptVccVcdFqpTable, mscAtmIfVptOperStatus=mscAtmIfVptOperStatus)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfVpcTmAbrStorageType=mscAtmIfVpcTmAbrStorageType, mscAtmIfVpcPmFwdLastSampleUserCellsTx0=mscAtmIfVpcPmFwdLastSampleUserCellsTx0, mscAtmIfOpShapingRatesTable=mscAtmIfOpShapingRatesTable, mscAtmIfVpcLocalFailureCause=mscAtmIfVpcLocalFailureCause, mscAtmIfVptVccTmAbrRowStatusEntry=mscAtmIfVptVccTmAbrRowStatusEntry, mscAtmIfVccTmRxTdpValue=mscAtmIfVccTmRxTdpValue, mscAtmIfVptVccTestCustomizedPattern=mscAtmIfVptVccTestCustomizedPattern, mscAtmIfVpcVpdTmAbr=mscAtmIfVpcVpdTmAbr, mscAtmIfCANrtVbrUnshapedTransmitQueueing=mscAtmIfCANrtVbrUnshapedTransmitQueueing, mscAtmIfVptStatsRxFrameDiscard=mscAtmIfVptStatsRxFrameDiscard, mscAtmIfVccLastMinimumCtd=mscAtmIfVccLastMinimumCtd, mscAtmIfVpcPmFwdLastSampleUserCellsRx01=mscAtmIfVpcPmFwdLastSampleUserCellsRx01, mscAtmIfVccTmAbrInitialCellRate=mscAtmIfVccTmAbrInitialCellRate, mscAtmIfVpcVpdTmAtmServiceCategory=mscAtmIfVpcVpdTmAtmServiceCategory, mscAtmIfVccTmBandwidthReduction=mscAtmIfVccTmBandwidthReduction, mscAtmIfVccVcdAcctEntry=mscAtmIfVccVcdAcctEntry, mscAtmIfVptVccOperStatus=mscAtmIfVptVccOperStatus, mscAtmIfCAUbrVptUsage=mscAtmIfCAUbrVptUsage, mscAtmIfVptVccVcdFqpIndex=mscAtmIfVptVccVcdFqpIndex, mscAtmIfVptSegSwitchSideLoopbackState=mscAtmIfVptSegSwitchSideLoopbackState, mscAtmIfCAPoolAdmConnsEntry=mscAtmIfCAPoolAdmConnsEntry, mscAtmIfVccVcdTmRxTdpEntry=mscAtmIfVccVcdTmRxTdpEntry, mscAtmIfVptTmAbrConnectionType=mscAtmIfVptTmAbrConnectionType, mscAtmIfVccPmFwdMaximumClr01=mscAtmIfVccPmFwdMaximumClr01, mscAtmIfConnMapOperEntry=mscAtmIfConnMapOperEntry, mscAtmIfIndex=mscAtmIfIndex, mscAtmIfCANrtVbrProvTable=mscAtmIfCANrtVbrProvTable, mscAtmIfVpcVpdTmRowStatusTable=mscAtmIfVpcVpdTmRowStatusTable, mscAtmIfVpcPmClrMeasurementStatus=mscAtmIfVpcPmClrMeasurementStatus, mscAtmIfCARtVbrHoldingPriority=mscAtmIfCARtVbrHoldingPriority, mscAtmIfVpcTmRxTrafficDescType=mscAtmIfVpcTmRxTrafficDescType, mscAtmIfVptVccVcdTmForceTagging=mscAtmIfVptVccVcdTmForceTagging, mscAtmIfVptTmTqpIndex=mscAtmIfVptTmTqpIndex, mscAtmIfCACbrProvPool=mscAtmIfCACbrProvPool, mscAtmIfVpcPmArMeasurementStatus=mscAtmIfVpcPmArMeasurementStatus, mscAtmIfVccCurrentCtd=mscAtmIfVccCurrentCtd, mscAtmIfVptCABwPoolIndex=mscAtmIfVptCABwPoolIndex, mscAtmIfVccStatsTxCellDiscard=mscAtmIfVccStatsTxCellDiscard, mscAtmIfVccPmBwdLastSampleClr01=mscAtmIfVccPmBwdLastSampleClr01, mscAtmIfVccTestSetupEntry=mscAtmIfVccTestSetupEntry, mscAtmIfCAPoolProvBwIndex=mscAtmIfCAPoolProvBwIndex, mscAtmIfTxCellMemoryThresholdTable=mscAtmIfTxCellMemoryThresholdTable, mscAtmIfVptStatsRxCell=mscAtmIfVptStatsRxCell, mscAtmIfVccPmFailureCause=mscAtmIfVccPmFailureCause, mscAtmIfCAPoolWaitAdmConnsIndex=mscAtmIfCAPoolWaitAdmConnsIndex, mscAtmIfVpcVpdTransferCapabilityBbc=mscAtmIfVpcVpdTransferCapabilityBbc, mscAtmIfVptCAActualMaxVccs=mscAtmIfVptCAActualMaxVccs, mscAtmIfVptVccVcdTmAbrCutoffDecreaseFactor=mscAtmIfVptVccVcdTmAbrCutoffDecreaseFactor, mscAtmIfVpcFqpIndex=mscAtmIfVpcFqpIndex, mscAtmIfConnMapNumVccsPerNonZeroVpiOper=mscAtmIfConnMapNumVccsPerNonZeroVpiOper, mscAtmIfVpcTmOperEntry=mscAtmIfVpcTmOperEntry, atmCoreCapabilitiesCB=atmCoreCapabilitiesCB, atmCoreGroupCB=atmCoreGroupCB, mscAtmIfCAOperEntry=mscAtmIfCAOperEntry, mscAtmIfCATroubledVpts=mscAtmIfCATroubledVpts, mscAtmIfVpcTmAbrTxRateChangeInfo=mscAtmIfVpcTmAbrTxRateChangeInfo, mscAtmIfVptTmRqpValue=mscAtmIfVptTmRqpValue, mscAtmIfEpRowStatusTable=mscAtmIfEpRowStatusTable, mscAtmIfVptVpdHoldingPriority=mscAtmIfVptVpdHoldingPriority, mscAtmIfCAUbrRowStatusEntry=mscAtmIfCAUbrRowStatusEntry, mscAtmIfVptCAUbrOperTable=mscAtmIfVptCAUbrOperTable, mscAtmIfVptVpdTmUsageParameterControl=mscAtmIfVptVpdTmUsageParameterControl, mscAtmIfVptVccVcdTmRowStatusTable=mscAtmIfVptVccVcdTmRowStatusTable, mscAtmIfVpcTmIndex=mscAtmIfVpcTmIndex, mscAtmIfVptVccTestLoadingFrmLost=mscAtmIfVptVccTestLoadingFrmLost, mscAtmIfVptCARtVbrCdv=mscAtmIfVptCARtVbrCdv, mscAtmIfVptVccVcdUsageParameterControl=mscAtmIfVptVccVcdUsageParameterControl, mscAtmIfVptVpdTxTdpValue=mscAtmIfVptVpdTxTdpValue, mscAtmIfVptRxDiscard=mscAtmIfVptRxDiscard, mscAtmIfVptVccTxQueueLength=mscAtmIfVptVccTxQueueLength, mscAtmIfEp=mscAtmIfEp, mscAtmIfVptVpdTmAbrRateIncreaseFactor=mscAtmIfVptVpdTmAbrRateIncreaseFactor, mscAtmIfVpcRxOamCellCongestionState=mscAtmIfVpcRxOamCellCongestionState, mscAtmIfVccVcdTrafficEntry=mscAtmIfVccVcdTrafficEntry, mscAtmIfVpcPmBwdClrTable=mscAtmIfVpcPmBwdClrTable, mscAtmIfVccVcdBqpEntry=mscAtmIfVccVcdBqpEntry, mscAtmIfVccVcdCorrelationTag=mscAtmIfVccVcdCorrelationTag, mscAtmIfVccNepApplicationName=mscAtmIfVccNepApplicationName, mscAtmIfVpcPmArAvailabilityRatio=mscAtmIfVpcPmArAvailabilityRatio, mscAtmIfVptVccStatsRxUpcViolationOnEnforcer2=mscAtmIfVptVccStatsRxUpcViolationOnEnforcer2, mscAtmIfPmRowStatusTable=mscAtmIfPmRowStatusTable, mscAtmIfVpcTmTxPacketWiseDiscard=mscAtmIfVpcTmTxPacketWiseDiscard, mscAtmIfVpcVpdTmAbrRateIncreaseFactor=mscAtmIfVpcVpdTmAbrRateIncreaseFactor, mscAtmIfCANrtVbrSvcMpHoldingPriority=mscAtmIfCANrtVbrSvcMpHoldingPriority, mscAtmIfVccPmFwdTotalUserCellsRx0=mscAtmIfVccPmFwdTotalUserCellsRx0, mscAtmIfVptVpdTmRxTrafficDescType=mscAtmIfVptVpdTmRxTrafficDescType, mscAtmIfVccVcdComponentName=mscAtmIfVccVcdComponentName, mscAtmIfVptVccTxQThreshEntry=mscAtmIfVptVccTxQThreshEntry, mscAtmIfVptCAUbrOperEntry=mscAtmIfVptCAUbrOperEntry, mscAtmIfVptVccVcdTrafficEntry=mscAtmIfVptVccVcdTrafficEntry, mscAtmIfVpcUsageState=mscAtmIfVpcUsageState, mscAtmIfVptCAUbrMaxVccs=mscAtmIfVptCAUbrMaxVccs, mscAtmIfVccRxTdpIndex=mscAtmIfVccRxTdpIndex, mscAtmIfVccVcdRxTdpIndex=mscAtmIfVccVcdRxTdpIndex, mscAtmIfVptTxQThreshValue=mscAtmIfVptTxQThreshValue, mscAtmIfVpcVpdFqpValue=mscAtmIfVpcVpdFqpValue, mscAtmIfVptFqpIndex=mscAtmIfVptFqpIndex, mscAtmIfVptCARtVbrCellLossRatio=mscAtmIfVptCARtVbrCellLossRatio, mscAtmIfVptVccTxTdpEntry=mscAtmIfVptVccTxTdpEntry, mscAtmIfVpcVpdLbkEntry=mscAtmIfVpcVpdLbkEntry, mscAtmIfCANrtVbrMinPerVcQueueLimit=mscAtmIfCANrtVbrMinPerVcQueueLimit, mscAtmIfVccVcdHoldingPriority=mscAtmIfVccVcdHoldingPriority, mscAtmIfVccVcdTmAbr=mscAtmIfVccVcdTmAbr, mscAtmIfVptVccStatsRxFrameDiscard=mscAtmIfVptVccStatsRxFrameDiscard, mscAtmIfVccNepIndex=mscAtmIfVccNepIndex, mscAtmIfVccTmAbrRxEfci=mscAtmIfVccTmAbrRxEfci, mscAtmIfVptCAPoolAdmConnsValue=mscAtmIfVptCAPoolAdmConnsValue, mscAtmIfVptVccVcdTmTxTdpEntry=mscAtmIfVptVccVcdTmTxTdpEntry, mscAtmIfVptVccVcdTmAbrIndex=mscAtmIfVptVccVcdTmAbrIndex, mscAtmIfVptVccStatsRxCell=mscAtmIfVptVccStatsRxCell, mscAtmIfVccVcdBqpIndex=mscAtmIfVccVcdBqpIndex, mscAtmIfVptStatsTxCellDiscard=mscAtmIfVptStatsTxCellDiscard, mscAtmIfVptVpdTrafficShaping=mscAtmIfVptVpdTrafficShaping, mscAtmIfRxLinkUtilization=mscAtmIfRxLinkUtilization, mscAtmIfCANrtVbrOperTable=mscAtmIfCANrtVbrOperTable, mscAtmIfVccTmBearerClassBbc=mscAtmIfVccTmBearerClassBbc, mscAtmIfVptVccRowStatusEntry=mscAtmIfVptVccRowStatusEntry, mscAtmIfVptTmRqpEntry=mscAtmIfVptTmRqpEntry, mscAtmIfVptVccNepProvEntry=mscAtmIfVptVccNepProvEntry, mscAtmIfCARtVbrSvcMpHoldingPriority=mscAtmIfCARtVbrSvcMpHoldingPriority, mscAtmIfVptVccVcdHoldingPriority=mscAtmIfVptVccVcdHoldingPriority, mscAtmIfVccNepProvEntry=mscAtmIfVccNepProvEntry, mscAtmIfVptVccVcdTmAbrStorageType=mscAtmIfVptVccVcdTmAbrStorageType, mscAtmIfPmRowStatusEntry=mscAtmIfPmRowStatusEntry, mscAtmIfCACbrCellLossRatio=mscAtmIfCACbrCellLossRatio, mscAtmIfVpcPmFwdMaximumClr01=mscAtmIfVpcPmFwdMaximumClr01, mscAtmIfTxCellMemoryCongestionState=mscAtmIfTxCellMemoryCongestionState, mscAtmIfCACbrStorageType=mscAtmIfCACbrStorageType, mscAtmIfVpcPmBwdTotalUserCellsTx0=mscAtmIfVpcPmBwdTotalUserCellsTx0, mscAtmIfVpcVpdMCastConnectionType=mscAtmIfVpcVpdMCastConnectionType, mscAtmIfVptTmRxTdpEntry=mscAtmIfVptTmRxTdpEntry, mscAtmIfVptVpdTmFqpTable=mscAtmIfVptVpdTmFqpTable, mscAtmIfVpcPm=mscAtmIfVpcPm, mscAtmIfVptCAOperEntry=mscAtmIfVptCAOperEntry, mscAtmIfVpcVpdTmAbrAcrDecreaseTimeFactor=mscAtmIfVpcVpdTmAbrAcrDecreaseTimeFactor, mscAtmIfVptVccLoop=mscAtmIfVptVccLoop, mscAtmIfVpcVpdBwdQosClass=mscAtmIfVpcVpdBwdQosClass, mscAtmIfCAUbrMinimumCellRate=mscAtmIfCAUbrMinimumCellRate, mscAtmIfVccTmRxTdpEntry=mscAtmIfVccTmRxTdpEntry, mscAtmIfVptVpdProvTable=mscAtmIfVptVpdProvTable, mscAtmIfVptVccFqpIndex=mscAtmIfVptVccFqpIndex, mscAtmIfVccTxQThreshIndex=mscAtmIfVccTxQThreshIndex, mscAtmIfVccTestBandwidthElastic=mscAtmIfVccTestBandwidthElastic, mscAtmIfVccTmAbrComponentName=mscAtmIfVccTmAbrComponentName, mscAtmIfVccLoopStorageType=mscAtmIfVccLoopStorageType, mscAtmIfVptVccIndex=mscAtmIfVptVccIndex, mscAtmIfVptTmAbrRowStatusEntry=mscAtmIfVptTmAbrRowStatusEntry, mscAtmIfVptVpdTrafficTable=mscAtmIfVptVpdTrafficTable, mscAtmIfVccVcdStorageType=mscAtmIfVccVcdStorageType, mscAtmIfConnMapNumNonZeroVpisForVccs=mscAtmIfConnMapNumNonZeroVpisForVccs, mscAtmIfVpcTmAbrFixedRoundTripTime=mscAtmIfVpcTmAbrFixedRoundTripTime, mscAtmIfVpcTmRqpIndex=mscAtmIfVpcTmRqpIndex, mscAtmIfVptVccStatusTable=mscAtmIfVptVccStatusTable, mscAtmIfVptVccTmIndex=mscAtmIfVptVccTmIndex, mscAtmIfTxCellMemory=mscAtmIfTxCellMemory, mscAtmIfVpcStateTable=mscAtmIfVpcStateTable, mscAtmIfVccVcdTransferCapabilityBbc=mscAtmIfVccVcdTransferCapabilityBbc, mscAtmIfVpcPmArTable=mscAtmIfVpcPmArTable, mscAtmIfCAActualMaxVccs=mscAtmIfCAActualMaxVccs, mscAtmIfVptVccTestOverrideHoldingPriority=mscAtmIfVptVccTestOverrideHoldingPriority, mscAtmIfVpcVpdFqpEntry=mscAtmIfVpcVpdFqpEntry, mscAtmIfVccPmBwdTotalClrInterval=mscAtmIfVccPmBwdTotalClrInterval, mscAtmIfVptVccVcdFwdFrameDiscard=mscAtmIfVptVccVcdFwdFrameDiscard, mscAtmIfVptVccLoopComponentName=mscAtmIfVptVccLoopComponentName, mscAtmIfVccVcdRowStatusEntry=mscAtmIfVccVcdRowStatusEntry, mscAtmIfVccTmTxQThreshTable=mscAtmIfVccTmTxQThreshTable, mscAtmIfVptVccTmTxQosClass=mscAtmIfVptVccTmTxQosClass, mscAtmIfVpcTmRxPacketWiseDiscard=mscAtmIfVpcTmRxPacketWiseDiscard, mscAtmIfVpcPmFwdTotalUserCellsTx0=mscAtmIfVpcPmFwdTotalUserCellsTx0, mscAtmIfVptVccVcdPmRowStatus=mscAtmIfVptVccVcdPmRowStatus, mscAtmIfVptVpdTmRxTdpIndex=mscAtmIfVptVpdTmRxTdpIndex, mscAtmIfVptVccTestFrmSize=mscAtmIfVptVccTestFrmSize, mscAtmIfProvEntry=mscAtmIfProvEntry, mscAtmIfVpcAdminState=mscAtmIfVpcAdminState, mscAtmIfVccVcdRowStatusTable=mscAtmIfVccVcdRowStatusTable, mscAtmIfVccTmClippingBbc=mscAtmIfVccTmClippingBbc, mscAtmIfVpcTmAbrRxEfci=mscAtmIfVpcTmAbrRxEfci, mscAtmIfVptCAAbr=mscAtmIfVptCAAbr, mscAtmIfCAVbrNrtCellLossRatio=mscAtmIfCAVbrNrtCellLossRatio, mscAtmIfVptVccVcdTmFqpValue=mscAtmIfVptVccVcdTmFqpValue, mscAtmIfVpcVpdTmRxTdpValue=mscAtmIfVpcVpdTmRxTdpValue, mscAtmIfVptCACbrRowStatusTable=mscAtmIfVptCACbrRowStatusTable, mscAtmIfVccVcdUnshapedTransmitQueueing=mscAtmIfVccVcdUnshapedTransmitQueueing, mscAtmIfConnMapVccProvTable=mscAtmIfConnMapVccProvTable, mscAtmIfVccNumLeaves=mscAtmIfVccNumLeaves, mscAtmIfVptVpdTmUnshapedTransmitQueueing=mscAtmIfVptVpdTmUnshapedTransmitQueueing, mscAtmIfVpcVpdTxTdpTable=mscAtmIfVpcVpdTxTdpTable, mscAtmIfVptVpdSegSwitchSideLoopback=mscAtmIfVptVpdSegSwitchSideLoopback, mscAtmIfVptVccVcdTmAbrFixedRoundTripTime=mscAtmIfVptVccVcdTmAbrFixedRoundTripTime, mscAtmIfVccBqpEntry=mscAtmIfVccBqpEntry, mscAtmIfVpcUsageParameterControl=mscAtmIfVpcUsageParameterControl, mscAtmIfVpcPmBwdMaximumClr01=mscAtmIfVpcPmBwdMaximumClr01, mscAtmIfVccVcdTmRxPacketWiseDiscard=mscAtmIfVccVcdTmRxPacketWiseDiscard, mscAtmIfCANrtVbrCdvt=mscAtmIfCANrtVbrCdvt, mscAtmIfVptVccTmAbrStorageType=mscAtmIfVptVccTmAbrStorageType, mscAtmIfCANrtVbrProvEntry=mscAtmIfCANrtVbrProvEntry, mscAtmIfStatsTable=mscAtmIfStatsTable, mscAtmIfVpcVpdTmAbrRowStatusTable=mscAtmIfVpcVpdTmAbrRowStatusTable, mscAtmIfVpcVpdTmForceTagging=mscAtmIfVpcVpdTmForceTagging, mscAtmIfVccTmAbrTransientBufferExposure=mscAtmIfVccTmAbrTransientBufferExposure, mscAtmIfVptCACbrIndex=mscAtmIfVptCACbrIndex, mscAtmIfVptVccRxFrameDiscard=mscAtmIfVptVccRxFrameDiscard, mscAtmIfVpcVpdRxQosClass=mscAtmIfVpcVpdRxQosClass, mscAtmIfVptVpdRowStatusTable=mscAtmIfVptVpdRowStatusTable, mscAtmIfCARowStatus=mscAtmIfCARowStatus, mscAtmIfVpcStatsRxFrameDiscard=mscAtmIfVpcStatsRxFrameDiscard, mscAtmIfVccVcdTmAbrIndex=mscAtmIfVccVcdTmAbrIndex, mscAtmIfVptVccVcdTxQosClass=mscAtmIfVptVccVcdTxQosClass, mscAtmIfVccVcdTmBqpEntry=mscAtmIfVccVcdTmBqpEntry, atmCoreCapabilities=atmCoreCapabilities, mscAtmIfVccVcdIndex=mscAtmIfVccVcdIndex, mscAtmIfVpcTmTxTdpIndex=mscAtmIfVpcTmTxTdpIndex, mscAtmIfVccVcdRxTdpValue=mscAtmIfVccVcdRxTdpValue, mscAtmIfVptAdminState=mscAtmIfVptAdminState, mscAtmIfVptVccTestIndex=mscAtmIfVptVccTestIndex, mscAtmIfVccVcdTxTrafficDescType=mscAtmIfVccVcdTxTrafficDescType, mscAtmIfVccTmUsageParameterControl=mscAtmIfVccTmUsageParameterControl, mscAtmIfVccTmAbrRowStatus=mscAtmIfVccTmAbrRowStatus, mscAtmIfPmComponentName=mscAtmIfPmComponentName, mscAtmIfCAPermanentVccs=mscAtmIfCAPermanentVccs, mscAtmIfMaxVccs=mscAtmIfMaxVccs, mscAtmIfVptVpdRxQosClass=mscAtmIfVptVpdRxQosClass, mscAtmIfVptVccAtmServiceCategory=mscAtmIfVptVccAtmServiceCategory, mscAtmIfVptTxQThreshEntry=mscAtmIfVptTxQThreshEntry, mscAtmIfVccTmOperTable=mscAtmIfVccTmOperTable, mscAtmIfVpcStatsTxCellDiscard=mscAtmIfVpcStatsTxCellDiscard, mscAtmIfVccVcdPmRowStatusEntry=mscAtmIfVccVcdPmRowStatusEntry, mscAtmIfVptVpdBearerClassBbc=mscAtmIfVptVpdBearerClassBbc, mscAtmIfVptCACbrComponentName=mscAtmIfVptCACbrComponentName, mscAtmIfVccTestCauseOfTermination=mscAtmIfVccTestCauseOfTermination, mscAtmIfVccPmFwdLastSampleUserCellsRx0=mscAtmIfVccPmFwdLastSampleUserCellsRx0, mscAtmIfVpcTmTxQueueLength=mscAtmIfVpcTmTxQueueLength, mscAtmIf=mscAtmIf, mscAtmIfVptTmTxTdpIndex=mscAtmIfVptTmTxTdpIndex, mscAtmIfVccTmRxTdpTable=mscAtmIfVccTmRxTdpTable, mscAtmIfVpcVpdBqpValue=mscAtmIfVpcVpdBqpValue, mscAtmIfVptVccTm=mscAtmIfVptVccTm, mscAtmIfVptTmTxQThreshValue=mscAtmIfVptTmTxQThreshValue, mscAtmIfVccStatsRxCellClp=mscAtmIfVccStatsRxCellClp, mscAtmIfVptVccTmTxQThreshTable=mscAtmIfVptVccTmTxQThreshTable, mscAtmIfVptCANrtVbrProvTable=mscAtmIfVptCANrtVbrProvTable, mscAtmIfVptTmAbr=mscAtmIfVptTmAbr, mscAtmIfPmSegSwitchSideMeasurement=mscAtmIfPmSegSwitchSideMeasurement, mscAtmIfVptVccVcdTmFwdQosClass=mscAtmIfVptVccVcdTmFwdQosClass, mscAtmIfVptCAPoolAvailBwTable=mscAtmIfVptCAPoolAvailBwTable, mscAtmIfVccLoopRowStatusEntry=mscAtmIfVccLoopRowStatusEntry, mscAtmIfCARowStatusTable=mscAtmIfCARowStatusTable, mscAtmIfCARtVbrOpUnshapedTransmitQueueing=mscAtmIfCARtVbrOpUnshapedTransmitQueueing, mscAtmIfTxCellMemoryThresholdValue=mscAtmIfTxCellMemoryThresholdValue, mscAtmIfVccLoopRowStatusTable=mscAtmIfVccLoopRowStatusTable, mscAtmIfVpcVpdTmRxTdpTable=mscAtmIfVpcVpdTmRxTdpTable, mscAtmIfCANrtVbrPool=mscAtmIfCANrtVbrPool, mscAtmIfCAPoolAvailableBwEntry=mscAtmIfCAPoolAvailableBwEntry, mscAtmIfVccStatsTxFrameDiscardClp=mscAtmIfVccStatsTxFrameDiscardClp)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfVpcBearerClassBbc=mscAtmIfVpcBearerClassBbc, mscAtmIfCAPoolAdmitBwIndex=mscAtmIfCAPoolAdmitBwIndex, mscAtmIfVccLoopRowStatus=mscAtmIfVccLoopRowStatus, mscAtmIfVptVccTrafficTable=mscAtmIfVptVccTrafficTable, mscAtmIfVptUsageState=mscAtmIfVptUsageState, mscAtmIfVpcVpdTmStorageType=mscAtmIfVpcVpdTmStorageType, mscAtmIfVptVpdAtmServiceCategory=mscAtmIfVptVpdAtmServiceCategory, mscAtmIfVpcPmStatusEntry=mscAtmIfVpcPmStatusEntry, mscAtmIfVptVpdBqpTable=mscAtmIfVptVpdBqpTable, mscAtmIfVccRowStatus=mscAtmIfVccRowStatus, mscAtmIfVptVccTmTxQueueCongestionState=mscAtmIfVptVccTmTxQueueCongestionState, mscAtmIfConnMapOperTable=mscAtmIfConnMapOperTable, mscAtmIfVptCAPoolProvBwIndex=mscAtmIfVptCAPoolProvBwIndex, mscAtmIfVccTmAbrAcrRateChangeInfo=mscAtmIfVccTmAbrAcrRateChangeInfo, mscAtmIfCAPermittedAtmServiceCategories=mscAtmIfCAPermittedAtmServiceCategories, mscAtmIfVpcPmFwdClrTable=mscAtmIfVpcPmFwdClrTable, mscAtmIfVptTmAbrCutoffDecreaseFactor=mscAtmIfVptTmAbrCutoffDecreaseFactor, mscAtmIfVptStatsRxCellDiscard=mscAtmIfVptStatsRxCellDiscard, mscAtmIfCANrtVbr=mscAtmIfCANrtVbr, mscAtmIfCACbrProvTable=mscAtmIfCACbrProvTable, mscAtmIfVpcVpdStorageType=mscAtmIfVpcVpdStorageType, mscAtmIfVptTmTxPacketWiseDiscard=mscAtmIfVptTmTxPacketWiseDiscard, mscAtmIfVptVpdTmAbrTransientBufferExposure=mscAtmIfVptVpdTmAbrTransientBufferExposure, mscAtmIfVpcPmRowStatus=mscAtmIfVpcPmRowStatus, mscAtmIfVptVccStatsTxFrameDiscard=mscAtmIfVptVccStatsTxFrameDiscard, mscAtmIfVptCAUbrPool=mscAtmIfVptCAUbrPool, mscAtmIfVptTmTqpEntry=mscAtmIfVptTmTqpEntry, mscAtmIfVptCAIndex=mscAtmIfVptCAIndex, mscAtmIfVccEndToEndLoopbackState=mscAtmIfVccEndToEndLoopbackState, mscAtmIfVptVccRxTdpIndex=mscAtmIfVptVccRxTdpIndex, mscAtmIfVpcTmAbrRowStatusEntry=mscAtmIfVpcTmAbrRowStatusEntry, mscAtmIfVccAdminState=mscAtmIfVccAdminState, mscAtmIfVpcTmAbrConnectionType=mscAtmIfVpcTmAbrConnectionType, mscAtmIfVpcTmAbrMaxTimeBetweenRmCell=mscAtmIfVpcTmAbrMaxTimeBetweenRmCell, mscAtmIfVptVpdBqpIndex=mscAtmIfVptVpdBqpIndex, mscAtmIfCANrtVbrForceTagging=mscAtmIfCANrtVbrForceTagging, mscAtmIfVptVccBearerClassBbc=mscAtmIfVptVccBearerClassBbc, mscAtmIfVccTm=mscAtmIfVccTm, mscAtmIfVccTmTxQThreshValue=mscAtmIfVccTmTxQThreshValue, mscAtmIfPmProvTable=mscAtmIfPmProvTable, mscAtmIfTxCellMemoryThresholdIndex=mscAtmIfTxCellMemoryThresholdIndex, mscAtmIfRxCellDiscardClp=mscAtmIfRxCellDiscardClp, mscAtmIfVptVccStatsRxFrameDiscardClp=mscAtmIfVptVccStatsRxFrameDiscardClp, mscAtmIfVptTmAbrRxEfci=mscAtmIfVptTmAbrRxEfci, mscAtmIfVptVccTmAbrForwardRmCellLimit=mscAtmIfVptVccTmAbrForwardRmCellLimit, mscAtmIfVptVccVcdTmBearerClassBbc=mscAtmIfVptVccVcdTmBearerClassBbc, mscAtmIfVptVpdTransferCapabilityBbc=mscAtmIfVptVpdTransferCapabilityBbc, mscAtmIfVptVccStatsRxCellDiscard=mscAtmIfVptVccStatsRxCellDiscard, mscAtmIfVccAtmServiceCategory=mscAtmIfVccAtmServiceCategory, mscAtmIfVccVcdTmFqpTable=mscAtmIfVccVcdTmFqpTable, mscAtmIfCARtVbrUnshapedTransmitQueueing=mscAtmIfCARtVbrUnshapedTransmitQueueing, mscAtmIfVccTmAbrForwardRmCellLimit=mscAtmIfVccTmAbrForwardRmCellLimit, mscAtmIfVptVccTmHoldingPriority=mscAtmIfVptVccTmHoldingPriority, mscAtmIfCAUbrStorageType=mscAtmIfCAUbrStorageType, mscAtmIfCAUbrAvailableConnections=mscAtmIfCAUbrAvailableConnections, mscAtmIfVccTmTxTdpTable=mscAtmIfVccTmTxTdpTable, mscAtmIfVpcPmBwdTotalUserCellsTx01=mscAtmIfVpcPmBwdTotalUserCellsTx01, mscAtmIfEpComponentName=mscAtmIfEpComponentName, mscAtmIfVpcTxFrameDiscard=mscAtmIfVpcTxFrameDiscard, mscAtmIfVptVpdTmTxTdpTable=mscAtmIfVptVpdTmTxTdpTable, mscAtmIfVptBandwidthReduction=mscAtmIfVptBandwidthReduction, mscAtmIfVptCA=mscAtmIfVptCA, mscAtmIfVpcTmTxQosClass=mscAtmIfVpcTmTxQosClass, mscAtmIfControlStatus=mscAtmIfControlStatus, mscAtmIfVccNepRowStatusEntry=mscAtmIfVccNepRowStatusEntry, mscAtmIfVccTestLoadingFrmRx=mscAtmIfVccTestLoadingFrmRx, mscAtmIfVpcVpdTmHoldingPriority=mscAtmIfVpcVpdTmHoldingPriority, mscAtmIfVccPmBwdLastSampleUserCellsRx01=mscAtmIfVccPmBwdLastSampleUserCellsRx01, mscAtmIfVccVcdPmIndex=mscAtmIfVccVcdPmIndex, mscAtmIfVccFqpTable=mscAtmIfVccFqpTable, mscAtmIfVptVccTestRowStatusTable=mscAtmIfVptVccTestRowStatusTable, mscAtmIfVptVpdSegLinkSideLoopback=mscAtmIfVptVpdSegLinkSideLoopback, mscAtmIfVptVpdLbkTable=mscAtmIfVptVpdLbkTable, mscAtmIfCustomerIdentifier=mscAtmIfCustomerIdentifier, mscAtmIfVccStatsTxCellClp=mscAtmIfVccStatsTxCellClp, mscAtmIfVccPmFwdTotalUserCellsRx01=mscAtmIfVccPmFwdTotalUserCellsRx01, mscAtmIfVccVcdTmAtmServiceCategory=mscAtmIfVccVcdTmAtmServiceCategory, mscAtmIfVptTmAtmServiceCategory=mscAtmIfVptTmAtmServiceCategory, mscAtmIfVptVccTxDiscard=mscAtmIfVptVccTxDiscard, mscAtmIfVptVccStateTable=mscAtmIfVptVccStateTable, mscAtmIfVpcPmFwdTotalClrInterval=mscAtmIfVpcPmFwdTotalClrInterval, mscAtmIfVccPmBwdTotalUserCellsTx0=mscAtmIfVccPmBwdTotalUserCellsTx0, mscAtmIfRxFrameDiscard=mscAtmIfRxFrameDiscard, mscAtmIfVptCAPoolWaitAdmConnsEntry=mscAtmIfVptCAPoolWaitAdmConnsEntry, mscAtmIfVptEndToEndLoopbackState=mscAtmIfVptEndToEndLoopbackState, mscAtmIfPmSegLinkSideMeasurement=mscAtmIfPmSegLinkSideMeasurement, atmCoreCapabilitiesCB02A=atmCoreCapabilitiesCB02A, mscAtmIfVptVpdFqpEntry=mscAtmIfVptVpdFqpEntry, mscAtmIfVccPmArTotalTime=mscAtmIfVccPmArTotalTime, mscAtmIfVccVcdTmTransferCapabilityBbc=mscAtmIfVccVcdTmTransferCapabilityBbc, mscAtmIfVptVpdTmTxTdpEntry=mscAtmIfVptVpdTmTxTdpEntry, mscAtmIfVptVccAisState=mscAtmIfVptVccAisState, mscAtmIfUnshapedTransmitQueueingOper=mscAtmIfUnshapedTransmitQueueingOper, mscAtmIfVptVccRowStatus=mscAtmIfVptVccRowStatus, mscAtmIfVptCABwPoolTable=mscAtmIfVptCABwPoolTable, mscAtmIfCANrtVbrEmissionPriority=mscAtmIfCANrtVbrEmissionPriority, mscAtmIfVccPmFwdClrEntry=mscAtmIfVccPmFwdClrEntry, mscAtmIfVptVccVcdRowStatusEntry=mscAtmIfVptVccVcdRowStatusEntry, mscAtmIfVccVcdTmComponentName=mscAtmIfVccVcdTmComponentName, mscAtmIfVptVccNep=mscAtmIfVptVccNep, mscAtmIfVptCAPoolWaitAdmConnsIndex=mscAtmIfVptCAPoolWaitAdmConnsIndex, mscAtmIfVpcIndex=mscAtmIfVpcIndex, mscAtmIfCACbrRowStatusTable=mscAtmIfCACbrRowStatusTable, mscAtmIfCACbrSvcHoldingPriority=mscAtmIfCACbrSvcHoldingPriority, mscAtmIfVptVccVcdPmProvEntry=mscAtmIfVptVccVcdPmProvEntry, mscAtmIfVccStatsTxFrameDiscard=mscAtmIfVccStatsTxFrameDiscard, mscAtmIfVptVccVcdTmAbrInitialCellRate=mscAtmIfVptVccVcdTmAbrInitialCellRate, mscAtmIfVptVccVcdTmIndex=mscAtmIfVptVccVcdTmIndex, mscAtmIfNAcctAccountCollection=mscAtmIfNAcctAccountCollection, mscAtmIfVptVccHoldingPriority=mscAtmIfVptVccHoldingPriority, mscAtmIfVpcTmAbrCutoffDecreaseFactor=mscAtmIfVpcTmAbrCutoffDecreaseFactor, mscAtmIfVccStateTable=mscAtmIfVccStateTable, mscAtmIfVccTestRowStatusEntry=mscAtmIfVccTestRowStatusEntry, mscAtmIfCAPoolAdmConnsValue=mscAtmIfCAPoolAdmConnsValue, mscAtmIfCAComponentName=mscAtmIfCAComponentName, mscAtmIfVptVccVcdRowStatusTable=mscAtmIfVptVccVcdRowStatusTable, mscAtmIfVccPmArTable=mscAtmIfVccPmArTable, mscAtmIfVptVccTxTrafficDescType=mscAtmIfVptVccTxTrafficDescType, mscAtmIfVptTmAbrTransientBufferExposure=mscAtmIfVptTmAbrTransientBufferExposure, mscAtmIfVptTmRxPacketWiseDiscard=mscAtmIfVptTmRxPacketWiseDiscard, mscAtmIfRxCellClp=mscAtmIfRxCellClp, mscAtmIfVccRxDiscardClp=mscAtmIfVccRxDiscardClp, mscAtmIfVptVccVcdTmRxTdpIndex=mscAtmIfVptVccVcdTmRxTdpIndex, mscAtmIfVptVccNepRowStatusTable=mscAtmIfVptVccNepRowStatusTable, mscAtmIfVpcTmTxQueueCongestionState=mscAtmIfVpcTmTxQueueCongestionState, mscAtmIfVpcVpdPmRowStatus=mscAtmIfVpcVpdPmRowStatus, mscAtmIfVpcFqpEntry=mscAtmIfVpcFqpEntry, mscAtmIfVptCAUbrComponentName=mscAtmIfVptCAUbrComponentName, mscAtmIfVpcTmAbrMaxCellPerRmCell=mscAtmIfVpcTmAbrMaxCellPerRmCell, mscAtmIfShapeUsageEntry=mscAtmIfShapeUsageEntry, mscAtmIfCAPermanentVpts=mscAtmIfCAPermanentVpts, mscAtmIfUnshapedTransmitQueueing=mscAtmIfUnshapedTransmitQueueing, mscAtmIfCAMinAutoSelectedVpi=mscAtmIfCAMinAutoSelectedVpi, mscAtmIfVccStatsRxUpcViolationOnEnforcer1=mscAtmIfVccStatsRxUpcViolationOnEnforcer1, mscAtmIfVccVcdAtmServiceCategory=mscAtmIfVccVcdAtmServiceCategory, mscAtmIfVpcRxFrameDiscard=mscAtmIfVpcRxFrameDiscard, mscAtmIfVpcTxQThreshValue=mscAtmIfVpcTxQThreshValue, mscAtmIfVccTestVerificationFrmBad=mscAtmIfVccTestVerificationFrmBad, mscAtmIfVptVccTestVerificationFrmBad=mscAtmIfVptVccTestVerificationFrmBad, mscAtmIfCAPoolAdmConnsTable=mscAtmIfCAPoolAdmConnsTable, mscAtmIfVptVccTmRqpTable=mscAtmIfVptVccTmRqpTable, mscAtmIfCAPermittedSvcAtmServiceCategories=mscAtmIfCAPermittedSvcAtmServiceCategories, mscAtmIfVpcTxTrafficDescType=mscAtmIfVpcTxTrafficDescType, mscAtmIfVptCAAbrRowStatus=mscAtmIfVptCAAbrRowStatus, mscAtmIfVptVccUsageState=mscAtmIfVptVccUsageState, mscAtmIfCAUbrSvcMpHoldingPriority=mscAtmIfCAUbrSvcMpHoldingPriority, mscAtmIfVptVccTestLoadingFrmTx=mscAtmIfVptVccTestLoadingFrmTx, mscAtmIfVpcVpdTmBwdQosClass=mscAtmIfVpcVpdTmBwdQosClass, mscAtmIfVptCAAbrProvEntry=mscAtmIfVptCAAbrProvEntry, mscAtmIfVccTmWeight=mscAtmIfVccTmWeight, mscAtmIfVptVccVcdPmSegLinkSideMeasurement=mscAtmIfVptVccVcdPmSegLinkSideMeasurement, mscAtmIfVptCAAbrIndex=mscAtmIfVptCAAbrIndex, mscAtmIfVpcSegLinkSideLoopbackState=mscAtmIfVpcSegLinkSideLoopbackState, mscAtmIfVccTmAbr=mscAtmIfVccTmAbr, mscAtmIfVccTrafficTable=mscAtmIfVccTrafficTable, mscAtmIfVpcVpdTmFqpEntry=mscAtmIfVpcVpdTmFqpEntry, mscAtmIfVptVccTmAbrTransientBufferExposure=mscAtmIfVptVccTmAbrTransientBufferExposure, mscAtmIfVptVccStatsRxAal5FrameError=mscAtmIfVptVccStatsRxAal5FrameError, mscAtmIfVptVccVcdTmAbrAcrDecreaseTimeFactor=mscAtmIfVptVccVcdTmAbrAcrDecreaseTimeFactor, mscAtmIfVpcVpdTmClippingBbc=mscAtmIfVpcVpdTmClippingBbc, mscAtmIfVccTmTransferCapabilityBbc=mscAtmIfVccTmTransferCapabilityBbc, mscAtmIfVccVcdTmAbrFixedRoundTripTime=mscAtmIfVccVcdTmAbrFixedRoundTripTime, mscAtmIfTxCellMemoryAvailable=mscAtmIfTxCellMemoryAvailable, mscAtmIfConnMapRowStatus=mscAtmIfConnMapRowStatus, mscAtmIfVptVccTestStateEntry=mscAtmIfVptVccTestStateEntry, mscAtmIfCASvcVbrNrtHoldingPriority=mscAtmIfCASvcVbrNrtHoldingPriority, mscAtmIfVptCAStorageType=mscAtmIfVptCAStorageType, mscAtmIfVccTmTxTdpIndex=mscAtmIfVccTmTxTdpIndex, mscAtmIfCANrtVbrShapeRecoupPolicy=mscAtmIfCANrtVbrShapeRecoupPolicy, mscAtmIfVptVccStatsRxCellDiscardClp=mscAtmIfVptVccStatsRxCellDiscardClp, mscAtmIfVccTxQThreshEntry=mscAtmIfVccTxQThreshEntry, mscAtmIfVccLoopIndex=mscAtmIfVccLoopIndex, mscAtmIfCANrtVbrTxQueueLimit=mscAtmIfCANrtVbrTxQueueLimit, mscAtmIfVccTmAbrCutoffDecreaseFactor=mscAtmIfVccTmAbrCutoffDecreaseFactor, mscAtmIfVptVccEndToEndLoopbackState=mscAtmIfVptVccEndToEndLoopbackState, mscAtmIfVpcPmBwdMaximumClr0=mscAtmIfVpcPmBwdMaximumClr0, mscAtmIfOpShapingRatesValue=mscAtmIfOpShapingRatesValue, mscAtmIfVptTxTdpTable=mscAtmIfVptTxTdpTable, mscAtmIfVptTmAbrComponentName=mscAtmIfVptTmAbrComponentName, mscAtmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor=mscAtmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor, mscAtmIfVptVpdTmAbrProvEntry=mscAtmIfVptVpdTmAbrProvEntry, mscAtmIfVptVccVcdTmAbrRowStatusTable=mscAtmIfVptVccVcdTmAbrRowStatusTable, mscAtmIfVccPmFwdMinimumClr0=mscAtmIfVccPmFwdMinimumClr0, mscAtmIfVccTmRxTrafficDescType=mscAtmIfVccTmRxTrafficDescType, mscAtmIfCACbrComponentName=mscAtmIfCACbrComponentName, mscAtmIfVpcVpdTmAbrInitialCellRate=mscAtmIfVpcVpdTmAbrInitialCellRate, mscAtmIfVptVccTestBytesTx=mscAtmIfVptVccTestBytesTx, mscAtmIfVpcNumLeaves=mscAtmIfVpcNumLeaves, mscAtmIfVpcVpdTmUsageParameterControl=mscAtmIfVpcVpdTmUsageParameterControl, mscAtmIfVpcVpdTmTransferCapabilityBbc=mscAtmIfVpcVpdTmTransferCapabilityBbc, mscAtmIfVccVcdTmProvTable=mscAtmIfVccVcdTmProvTable, mscAtmIfCACbrUnshapedTransmitQueueing=mscAtmIfCACbrUnshapedTransmitQueueing, mscAtmIfVccTestDuration=mscAtmIfVccTestDuration, mscAtmIfVptStatsRxAal5FrameAbort=mscAtmIfVptStatsRxAal5FrameAbort, mscAtmIfVptStatsRxUpcViolationOnEnforcer2=mscAtmIfVptStatsRxUpcViolationOnEnforcer2, mscAtmIfVptCAAbrProvTable=mscAtmIfVptCAAbrProvTable, mscAtmIfVptTmBestEffort=mscAtmIfVptTmBestEffort, mscAtmIfVccVcdTmBearerClassBbc=mscAtmIfVccVcdTmBearerClassBbc, mscAtmIfVptTmRowStatus=mscAtmIfVptTmRowStatus, mscAtmIfType=mscAtmIfType, mscAtmIfVccBwdQosClass=mscAtmIfVccBwdQosClass, mscAtmIfVpcVpdTmTxTdpIndex=mscAtmIfVpcVpdTmTxTdpIndex, mscAtmIfVptCARowStatusEntry=mscAtmIfVptCARowStatusEntry, mscAtmIfCANrtVbrCellLossRatio=mscAtmIfCANrtVbrCellLossRatio, mscAtmIfCAMaxAutoSelectedVpi=mscAtmIfCAMaxAutoSelectedVpi, mscAtmIfVpcVpdBqpEntry=mscAtmIfVpcVpdBqpEntry, mscAtmIfVpcVpdTmWeight=mscAtmIfVpcVpdTmWeight, mscAtmIfVptCAPoolRequBwValue=mscAtmIfVptCAPoolRequBwValue, mscAtmIfCAAbrEmissionPriority=mscAtmIfCAAbrEmissionPriority, mscAtmIfCAPoolProvBwTable=mscAtmIfCAPoolProvBwTable, mscAtmIfVpcVpdFwdQosClass=mscAtmIfVpcVpdFwdQosClass, mscAtmIfCAAbrOperEntry=mscAtmIfCAAbrOperEntry, mscAtmIfVccPmRowStatusTable=mscAtmIfVccPmRowStatusTable, mscAtmIfCANrtVbrOperEntry=mscAtmIfCANrtVbrOperEntry, mscAtmIfVptRxTrafficDescType=mscAtmIfVptRxTrafficDescType, mscAtmIfVpcConnectionPointType=mscAtmIfVpcConnectionPointType, mscAtmIfVpcStatsRxCellClp=mscAtmIfVpcStatsRxCellClp, mscAtmIfCACbrCdvt=mscAtmIfCACbrCdvt, mscAtmIfVpcPmArTotalTime=mscAtmIfVpcPmArTotalTime, mscAtmIfVpcCallDirection=mscAtmIfVpcCallDirection, mscAtmIfVccVcdRxTrafficDescType=mscAtmIfVccVcdRxTrafficDescType, mscAtmIfVptVccVcdClippingBbc=mscAtmIfVptVccVcdClippingBbc, mscAtmIfVptVccTmAbrMaxCellPerRmCell=mscAtmIfVptVccTmAbrMaxCellPerRmCell, mscAtmIfVpcTxQThreshEntry=mscAtmIfVpcTxQThreshEntry, mscAtmIfVpcPmFwdLastSampleUserCellsTx01=mscAtmIfVpcPmFwdLastSampleUserCellsTx01, mscAtmIfVptTrafficEntry=mscAtmIfVptTrafficEntry, mscAtmIfCAUbrForceTagging=mscAtmIfCAUbrForceTagging, mscAtmIfCAUbrShapeRecoupPolicy=mscAtmIfCAUbrShapeRecoupPolicy, mscAtmIfUsageState=mscAtmIfUsageState, mscAtmIfVpcAtmServiceCategory=mscAtmIfVpcAtmServiceCategory, mscAtmIfVptVpdTmAtmServiceCategory=mscAtmIfVptVpdTmAtmServiceCategory, mscAtmIfVptVccVcdStorageType=mscAtmIfVptVccVcdStorageType, mscAtmIfVpcVpdSegSwitchSideLoopback=mscAtmIfVpcVpdSegSwitchSideLoopback, mscAtmIfSegLinkSideLoopback=mscAtmIfSegLinkSideLoopback, mscAtmIfVccVcdBearerClassBbc=mscAtmIfVccVcdBearerClassBbc, mscAtmIfVptVccStatsTxCell=mscAtmIfVptVccStatsTxCell, mscAtmIfVpcPmArAvailableTime=mscAtmIfVpcPmArAvailableTime, mscAtmIfVptTmUsageParameterControl=mscAtmIfVptTmUsageParameterControl, mscAtmIfVptStatsTxCell=mscAtmIfVptStatsTxCell, mscAtmIfVptTxQosClass=mscAtmIfVptTxQosClass, mscAtmIfVptVccVcdBqpEntry=mscAtmIfVptVccVcdBqpEntry, mscAtmIfVpcVpdBwdFrameDiscard=mscAtmIfVpcVpdBwdFrameDiscard, mscAtmIfVptVccVcdTmFqpIndex=mscAtmIfVptVccVcdTmFqpIndex, mscAtmIfVptVccTmAbrAcrRateChangeInfo=mscAtmIfVptVccTmAbrAcrRateChangeInfo, mscAtmIfCASwitchedVpcs=mscAtmIfCASwitchedVpcs, mscAtmIfVptVpdBwdFrameDiscard=mscAtmIfVptVpdBwdFrameDiscard, mscAtmIfCARtVbrWeightPolicy=mscAtmIfCARtVbrWeightPolicy, mscAtmIfOpShapingRatesEntry=mscAtmIfOpShapingRatesEntry, mscAtmIfVptVccTestUnrecognizableFrmRx=mscAtmIfVptVccTestUnrecognizableFrmRx, mscAtmIfVptTxQThreshTable=mscAtmIfVptTxQThreshTable, mscAtmIfVcc=mscAtmIfVcc, mscAtmIfVptTxTdpEntry=mscAtmIfVptTxTdpEntry, mscAtmIfVptVccTmRqpIndex=mscAtmIfVptVccTmRqpIndex, mscAtmIfVccTmTxQosClass=mscAtmIfVccTmTxQosClass)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfVptVccVcdAcctEntry=mscAtmIfVptVccVcdAcctEntry, mscAtmIfVptVccVcdLbkTable=mscAtmIfVptVccVcdLbkTable, mscAtmIfVccVcdTmRxTdpIndex=mscAtmIfVccVcdTmRxTdpIndex, mscAtmIfVptVpdLbkEntry=mscAtmIfVptVpdLbkEntry, mscAtmIfVpcVpdTmTxQueueLimit=mscAtmIfVpcVpdTmTxQueueLimit, mscAtmIfCAUbrEpdOffset=mscAtmIfCAUbrEpdOffset, mscAtmIfVccStatsTable=mscAtmIfVccStatsTable, mscAtmIfVccVcdRxTdpTable=mscAtmIfVccVcdRxTdpTable, mscAtmIfVptCAUbrMinimumCellRate=mscAtmIfVptCAUbrMinimumCellRate, mscAtmIfVccTestRowStatus=mscAtmIfVccTestRowStatus, mscAtmIfVpcVpdBqpIndex=mscAtmIfVpcVpdBqpIndex, mscAtmIfVccTestCustomizedPattern=mscAtmIfVccTestCustomizedPattern, mscAtmIfVptVccVcdTmTransferCapabilityBbc=mscAtmIfVptVccVcdTmTransferCapabilityBbc, mscAtmIfVpcTxQueueLength=mscAtmIfVpcTxQueueLength, mscAtmIfVccVcdFqpEntry=mscAtmIfVccVcdFqpEntry, mscAtmIfVptVccSegSwitchSideLoopbackState=mscAtmIfVptVccSegSwitchSideLoopbackState, mscAtmIfVptVpdTmFwdQosClass=mscAtmIfVptVpdTmFwdQosClass, mscAtmIfVptVccTestSetupEntry=mscAtmIfVptVccTestSetupEntry, mscAtmIfVptVccBqpTable=mscAtmIfVptVccBqpTable, mscAtmIfVptVccVcdPmRowStatusEntry=mscAtmIfVptVccVcdPmRowStatusEntry, mscAtmIfVptVccTestElapsedTime=mscAtmIfVptVccTestElapsedTime, mscAtmIfVptVpdRxTrafficDescType=mscAtmIfVptVpdRxTrafficDescType, mscAtmIfVptVccNumLeaves=mscAtmIfVptVccNumLeaves, mscAtmIfVccPmComponentName=mscAtmIfVccPmComponentName, mscAtmIfVptCACbrPool=mscAtmIfVptCACbrPool, mscAtmIfVptVccTmRqpValue=mscAtmIfVptVccTmRqpValue, mscAtmIfVptVccConnInfoTable=mscAtmIfVptVccConnInfoTable, mscAtmIfVpcVpdTmAbrCutoffDecreaseFactor=mscAtmIfVpcVpdTmAbrCutoffDecreaseFactor, mscAtmIfPmControlMode=mscAtmIfPmControlMode, mscAtmIfVptVccTmTqpValue=mscAtmIfVptVccTmTqpValue, mscAtmIfVpcPmComponentName=mscAtmIfVpcPmComponentName, mscAtmIfVptTmTxTdpEntry=mscAtmIfVptTmTxTdpEntry, mscAtmIfVpcVpdTmAbrMaxTimeBetweenRmCells=mscAtmIfVpcVpdTmAbrMaxTimeBetweenRmCells, mscAtmIfVptVpdTmAbrRowStatusTable=mscAtmIfVptVpdTmAbrRowStatusTable, mscAtmIfVptCABwPoolEntry=mscAtmIfVptCABwPoolEntry, atmCoreMIB=atmCoreMIB, mscAtmIfRxFrameDiscardClp=mscAtmIfRxFrameDiscardClp, mscAtmIfConnMapOvFirstNonZeroVpiForVccs=mscAtmIfConnMapOvFirstNonZeroVpiForVccs, mscAtmIfVccVcdTmFqpValue=mscAtmIfVccVcdTmFqpValue, mscAtmIfVpcVpdPmStorageType=mscAtmIfVpcVpdPmStorageType, mscAtmIfVccRowStatusTable=mscAtmIfVccRowStatusTable, mscAtmIfVccTmAbrConnectionType=mscAtmIfVccTmAbrConnectionType, mscAtmIfVpcStatsRxCellDiscardClp=mscAtmIfVpcStatsRxCellDiscardClp, mscAtmIfVccVcdTmTxTdpIndex=mscAtmIfVccVcdTmTxTdpIndex, mscAtmIfVptCACbrProvTable=mscAtmIfVptCACbrProvTable, mscAtmIfConnMapStorageType=mscAtmIfConnMapStorageType, mscAtmIfVptVpdUsageParameterControl=mscAtmIfVptVpdUsageParameterControl, mscAtmIfCAUbrProvTable=mscAtmIfCAUbrProvTable, mscAtmIfNAcctProvEntry=mscAtmIfNAcctProvEntry, mscAtmIfVccVcdFqpValue=mscAtmIfVccVcdFqpValue, mscAtmIfVpcVpdIndex=mscAtmIfVpcVpdIndex, mscAtmIfVccTmIndex=mscAtmIfVccTmIndex, mscAtmIfVccVcdBwdFrameDiscard=mscAtmIfVccVcdBwdFrameDiscard, mscAtmIfCAPoolAdmitBwValue=mscAtmIfCAPoolAdmitBwValue, mscAtmIfCACbrForceTagging=mscAtmIfCACbrForceTagging, mscAtmIfVccBearerClassBbc=mscAtmIfVccBearerClassBbc, mscAtmIfVptTmRxTrafficDescType=mscAtmIfVptTmRxTrafficDescType, mscAtmIfConnMapOvRowStatusEntry=mscAtmIfConnMapOvRowStatusEntry, mscAtmIfVccVcdTxQosClass=mscAtmIfVccVcdTxQosClass, mscAtmIfVccVcdRxTdpEntry=mscAtmIfVccVcdRxTdpEntry, mscAtmIfVpcVpdUsageParameterControl=mscAtmIfVpcVpdUsageParameterControl, mscAtmIfVptStatsRxFrameDiscardClp=mscAtmIfVptStatsRxFrameDiscardClp, mscAtmIfRowStatusEntry=mscAtmIfRowStatusEntry, mscAtmIfVptVccVcdTmTxQueueLimit=mscAtmIfVptVccVcdTmTxQueueLimit, mscAtmIfVccTmStorageType=mscAtmIfVccTmStorageType, mscAtmIfCAUbrRowStatus=mscAtmIfCAUbrRowStatus, mscAtmIfCAMinMulticastBranches=mscAtmIfCAMinMulticastBranches, mscAtmIfVptCARtVbrRowStatus=mscAtmIfVptCARtVbrRowStatus, mscAtmIfVpcPmFailureCause=mscAtmIfVpcPmFailureCause, mscAtmIfEpRowStatus=mscAtmIfEpRowStatus, mscAtmIfVpcPerfEntry=mscAtmIfVpcPerfEntry, mscAtmIfVpcPmIndex=mscAtmIfVpcPmIndex, mscAtmIfVpcPmRowStatusEntry=mscAtmIfVpcPmRowStatusEntry, mscAtmIfVpcTmTqpIndex=mscAtmIfVpcTmTqpIndex, mscAtmIfVpcVpdClippingBbc=mscAtmIfVpcVpdClippingBbc, mscAtmIfVccTmOperEntry=mscAtmIfVccTmOperEntry, mscAtmIfCAOamFPmConnections=mscAtmIfCAOamFPmConnections, mscAtmIfVccPerfTable=mscAtmIfVccPerfTable, mscAtmIfVccTmRqpValue=mscAtmIfVccTmRqpValue, mscAtmIfVptVccTmAbrCutoffDecreaseFactor=mscAtmIfVptVccTmAbrCutoffDecreaseFactor, mscAtmIfVptVccVcdTransferCapabilityBbc=mscAtmIfVptVccVcdTransferCapabilityBbc, mscAtmIfVptCAAbrStorageType=mscAtmIfVptCAAbrStorageType, mscAtmIfVccPm=mscAtmIfVccPm, mscAtmIfVccRxFrameDiscard=mscAtmIfVccRxFrameDiscard, mscAtmIfVccTestSetupTable=mscAtmIfVccTestSetupTable, mscAtmIfVptTmStorageType=mscAtmIfVptTmStorageType, mscAtmIfVptCAPoolAdmitBwTable=mscAtmIfVptCAPoolAdmitBwTable, mscAtmIfCAAbrMaxCellPerRmCell=mscAtmIfCAAbrMaxCellPerRmCell, mscAtmIfVptTmBearerClassBbc=mscAtmIfVptTmBearerClassBbc, mscAtmIfVptVccOperationalState=mscAtmIfVptVccOperationalState, mscAtmIfVpcVpdTmBestEffort=mscAtmIfVpcVpdTmBestEffort, mscAtmIfEpProvEntry=mscAtmIfEpProvEntry, mscAtmIfVptVpdTmTxTdpValue=mscAtmIfVptVpdTmTxTdpValue, mscAtmIfStateTable=mscAtmIfStateTable, mscAtmIfCARtVbrMaxCtd=mscAtmIfCARtVbrMaxCtd, mscAtmIfVptCARtVbrStorageType=mscAtmIfVptCARtVbrStorageType, mscAtmIfVptStateEntry=mscAtmIfVptStateEntry, mscAtmIfVptStateTable=mscAtmIfVptStateTable, mscAtmIfVptVccStatsTxCellDiscard=mscAtmIfVptVccStatsTxCellDiscard, mscAtmIfVccPmBwdMinimumClr01=mscAtmIfVccPmBwdMinimumClr01, mscAtmIfVpcTmRqpTable=mscAtmIfVpcTmRqpTable, mscAtmIfCAPoolRequBwIndex=mscAtmIfCAPoolRequBwIndex, mscAtmIfVpcRowStatus=mscAtmIfVpcRowStatus, mscAtmIfVptVpdTxTdpIndex=mscAtmIfVptVpdTxTdpIndex, mscAtmIfVpcTmRxTdpIndex=mscAtmIfVpcTmRxTdpIndex, mscAtmIfCAUbrMaxVpcs=mscAtmIfCAUbrMaxVpcs, mscAtmIfVccTestOperationalState=mscAtmIfVccTestOperationalState, mscAtmIfVptVccTmTxTdpIndex=mscAtmIfVptVccTmTxTdpIndex, mscAtmIfCAAbrProvEntry=mscAtmIfCAAbrProvEntry, mscAtmIfVccTrafficEntry=mscAtmIfVccTrafficEntry, mscAtmIfVccPmStorageType=mscAtmIfVccPmStorageType, mscAtmIfVptTmAbrInitialCellRate=mscAtmIfVptTmAbrInitialCellRate, mscAtmIfVccPmArEntry=mscAtmIfVccPmArEntry, mscAtmIfCA=mscAtmIfCA, mscAtmIfVptCACbrRowStatus=mscAtmIfVptCACbrRowStatus, mscAtmIfVpcStatsTxFrameDiscard=mscAtmIfVpcStatsTxFrameDiscard, mscAtmIfCARtVbrCdvt=mscAtmIfCARtVbrCdvt, mscAtmIfVccPmArAvailableTime=mscAtmIfVccPmArAvailableTime, mscAtmIfCATroubledVccs=mscAtmIfCATroubledVccs, mscAtmIfVpcVpdTmFwdQosClass=mscAtmIfVpcVpdTmFwdQosClass, mscAtmIfVptTxTdpIndex=mscAtmIfVptTxTdpIndex, mscAtmIfVptVccTestCauseOfTermination=mscAtmIfVptVccTestCauseOfTermination, mscAtmIfVccBandwidthReduction=mscAtmIfVccBandwidthReduction, mscAtmIfVccStatsRxCellDiscardClp=mscAtmIfVccStatsRxCellDiscardClp, mscAtmIfVptVpdUnshapedTransmitQueueing=mscAtmIfVptVpdUnshapedTransmitQueueing, mscAtmIfVptVccVcdMCastConnectionType=mscAtmIfVptVccVcdMCastConnectionType, mscAtmIfVccTransferCapabilityBbc=mscAtmIfVccTransferCapabilityBbc, mscAtmIfVptVccTmRowStatusTable=mscAtmIfVptVccTmRowStatusTable, mscAtmIfCACbrOperEntry=mscAtmIfCACbrOperEntry, mscAtmIfVptCAPoolAvailBwEntry=mscAtmIfVptCAPoolAvailBwEntry, mscAtmIfVptVccVcdPmProvTable=mscAtmIfVptVccVcdPmProvTable, mscAtmIfVpcVpdTmRxTrafficDescType=mscAtmIfVpcVpdTmRxTrafficDescType, mscAtmIfCAVbrNrtCdvt=mscAtmIfCAVbrNrtCdvt, mscAtmIfVptVpdTmRowStatus=mscAtmIfVptVpdTmRowStatus, mscAtmIfVptCAPermanentVccs=mscAtmIfVptCAPermanentVccs, mscAtmIfVpcPmBwdLastSampleUserCellsRx0=mscAtmIfVpcPmBwdLastSampleUserCellsRx0, mscAtmIfVptVccTmStorageType=mscAtmIfVptVccTmStorageType, mscAtmIfVccVcdTmTxTdpValue=mscAtmIfVccVcdTmTxTdpValue, mscAtmIfVpcVpdPm=mscAtmIfVpcVpdPm, mscAtmIfVpcPmFwdAverageClr0=mscAtmIfVpcPmFwdAverageClr0, mscAtmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor=mscAtmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor, mscAtmIfVpcCurrentCtd=mscAtmIfVpcCurrentCtd, mscAtmIfCAAbrInitialCellRate=mscAtmIfCAAbrInitialCellRate, mscAtmIfCAUbrMinPerVcQueueLimit=mscAtmIfCAUbrMinPerVcQueueLimit, mscAtmIfVpcPmFwdAverageClr01=mscAtmIfVpcPmFwdAverageClr01, mscAtmIfLastDroppedRxCellConnection=mscAtmIfLastDroppedRxCellConnection, mscAtmIfVptVccTmBearerClassBbc=mscAtmIfVptVccTmBearerClassBbc, mscAtmIfVptVccVcdTmUnshapedTransmitQueueing=mscAtmIfVptVccVcdTmUnshapedTransmitQueueing, mscAtmIfVpcTmBestEffort=mscAtmIfVpcTmBestEffort, mscAtmIfCAAbrRateIncreaseFactor=mscAtmIfCAAbrRateIncreaseFactor, mscAtmIfCARtVbrCdv=mscAtmIfCARtVbrCdv, mscAtmIfVpcPmBwdLastSampleUserCellsRx01=mscAtmIfVpcPmBwdLastSampleUserCellsRx01, mscAtmIfVpcTmAbrAcrRateChangeInfo=mscAtmIfVpcTmAbrAcrRateChangeInfo, mscAtmIfVptTmClippingBbc=mscAtmIfVptTmClippingBbc, mscAtmIfVpcPmBwdLastSampleClr01=mscAtmIfVpcPmBwdLastSampleClr01, mscAtmIfVccBandwidthElastic=mscAtmIfVccBandwidthElastic, mscAtmIfVptCANrtVbrProvEntry=mscAtmIfVptCANrtVbrProvEntry, mscAtmIfVccTestVerificationFrmTx=mscAtmIfVccTestVerificationFrmTx, mscAtmIfVpcPmFwdLastSampleClr01=mscAtmIfVpcPmFwdLastSampleClr01, mscAtmIfVccTmTqpValue=mscAtmIfVccTmTqpValue, mscAtmIfVccVcdBwdQosClass=mscAtmIfVccVcdBwdQosClass, mscAtmIfVptVccTestUsageState=mscAtmIfVptVccTestUsageState, mscAtmIfVptVccVcdBwdFrameDiscard=mscAtmIfVptVccVcdBwdFrameDiscard, mscAtmIfVpcBandwidthReduction=mscAtmIfVpcBandwidthReduction, mscAtmIfVccStatsRxAal5FrameError=mscAtmIfVccStatsRxAal5FrameError, mscAtmIfCAPermanentVpcs=mscAtmIfCAPermanentVpcs, mscAtmIfVccTestStateEntry=mscAtmIfVccTestStateEntry, mscAtmIfVptVccTmTqpIndex=mscAtmIfVptVccTmTqpIndex, mscAtmIfVccVcdTrafficTable=mscAtmIfVccVcdTrafficTable, mscAtmIfRxCellDiscard=mscAtmIfRxCellDiscard, mscAtmIfCACbrEpdOffset=mscAtmIfCACbrEpdOffset, mscAtmIfVptVccVcdTrafficTable=mscAtmIfVptVccVcdTrafficTable, mscAtmIfVccVcdTrafficShaping=mscAtmIfVccVcdTrafficShaping, mscAtmIfVptCAUbrRowStatusTable=mscAtmIfVptCAUbrRowStatusTable, mscAtmIfVpcVpdTmBqpValue=mscAtmIfVpcVpdTmBqpValue, mscAtmIfVptVccStorageType=mscAtmIfVptVccStorageType, mscAtmIfVptRxDiscardClp=mscAtmIfVptRxDiscardClp, mscAtmIfVpcVpdBearerClassBbc=mscAtmIfVpcVpdBearerClassBbc, mscAtmIfVccPmFwdAverageClr0=mscAtmIfVccPmFwdAverageClr0, mscAtmIfVpcPmBwdTotalUserCellsRx01=mscAtmIfVpcPmBwdTotalUserCellsRx01, mscAtmIfVptVccVcdBestEffort=mscAtmIfVptVccVcdBestEffort, mscAtmIfVpcPmArEntry=mscAtmIfVpcPmArEntry, mscAtmIfVccUsageParameterControl=mscAtmIfVccUsageParameterControl, mscAtmIfVptVccTestStateTable=mscAtmIfVptVccTestStateTable, mscAtmIfCAOperTable=mscAtmIfCAOperTable, mscAtmIfVccIndex=mscAtmIfVccIndex, mscAtmIfVptVccTmAtmServiceCategory=mscAtmIfVptVccTmAtmServiceCategory, mscAtmIfVpcPmStorageType=mscAtmIfVpcPmStorageType, mscAtmIfVpcRxDiscardClp=mscAtmIfVpcRxDiscardClp, mscAtmIfVpcVpdTmAbrFixedRoundTripTime=mscAtmIfVpcVpdTmAbrFixedRoundTripTime, mscAtmIfVpt=mscAtmIfVpt, mscAtmIfCANrtVbrRowStatusEntry=mscAtmIfCANrtVbrRowStatusEntry, mscAtmIfVpcPmBwdClrEntry=mscAtmIfVpcPmBwdClrEntry, mscAtmIfVccTmAbrOperEntry=mscAtmIfVccTmAbrOperEntry, mscAtmIfLbkEntry=mscAtmIfLbkEntry, mscAtmIfCABwPoolValue=mscAtmIfCABwPoolValue, mscAtmIfVccPmRowStatusEntry=mscAtmIfVccPmRowStatusEntry, mscAtmIfVptBqpIndex=mscAtmIfVptBqpIndex, mscAtmIfCARtVbrRowStatusTable=mscAtmIfCARtVbrRowStatusTable, mscAtmIfEpProvTable=mscAtmIfEpProvTable, mscAtmIfCAActualMaxVpcs=mscAtmIfCAActualMaxVpcs, mscAtmIfVptVpdTmAbrAcrDecreaseTimeFactor=mscAtmIfVptVpdTmAbrAcrDecreaseTimeFactor, mscAtmIfVptVccVcdTmAbrRowStatus=mscAtmIfVptVccVcdTmAbrRowStatus, mscAtmIfCAPoolAdmitBwTable=mscAtmIfCAPoolAdmitBwTable, mscAtmIfCACbr=mscAtmIfCACbr, mscAtmIfCACbrHoldingPriority=mscAtmIfCACbrHoldingPriority, mscAtmIfVptVccRdiState=mscAtmIfVptVccRdiState, mscAtmIfVptCAPoolProvBwTable=mscAtmIfVptCAPoolProvBwTable, mscAtmIfVccVcdTmTxTrafficDescType=mscAtmIfVccVcdTmTxTrafficDescType, mscAtmIfVptVpdTmBqpIndex=mscAtmIfVptVpdTmBqpIndex, mscAtmIfVptTmComponentName=mscAtmIfVptTmComponentName, mscAtmIfVptCARtVbrMaxCtd=mscAtmIfVptCARtVbrMaxCtd, mscAtmIfVptVccNepStorageType=mscAtmIfVptVccNepStorageType, mscAtmIfConnMapRowStatusTable=mscAtmIfConnMapRowStatusTable, mscAtmIfVptVpdTmTransferCapabilityBbc=mscAtmIfVptVpdTmTransferCapabilityBbc, mscAtmIfVccTmUnshapedTransmitQueueing=mscAtmIfVccTmUnshapedTransmitQueueing, mscAtmIfEpRowStatusEntry=mscAtmIfEpRowStatusEntry, mscAtmIfVptVccStatusEntry=mscAtmIfVptVccStatusEntry, mscAtmIfVptVccTmTrafficShaping=mscAtmIfVptVccTmTrafficShaping, mscAtmIfVpcPmFwdTotalUserCellsRx0=mscAtmIfVpcPmFwdTotalUserCellsRx0, mscAtmIfCAAbrStorageType=mscAtmIfCAAbrStorageType, mscAtmIfVptVccVcdTmTxTrafficDescType=mscAtmIfVptVccVcdTmTxTrafficDescType, mscAtmIfCAPoolAvailableBwValue=mscAtmIfCAPoolAvailableBwValue, mscAtmIfVptCARtVbrRowStatusTable=mscAtmIfVptCARtVbrRowStatusTable, mscAtmIfVccPmFwdMaximumClr0=mscAtmIfVccPmFwdMaximumClr0, mscAtmIfVccVcdTmBqpValue=mscAtmIfVccVcdTmBqpValue, mscAtmIfVptTmTxQThreshTable=mscAtmIfVptTmTxQThreshTable, mscAtmIfVccTrafficShaping=mscAtmIfVccTrafficShaping, mscAtmIfCARtVbrRowStatus=mscAtmIfCARtVbrRowStatus, mscAtmIfVptVccVcdTmBqpEntry=mscAtmIfVptVccVcdTmBqpEntry, mscAtmIfCAAbrFairnessPolicy=mscAtmIfCAAbrFairnessPolicy, mscAtmIfVptVpdTmHoldingPriority=mscAtmIfVptVpdTmHoldingPriority, mscAtmIfLrcFrameErrors=mscAtmIfLrcFrameErrors, mscAtmIfVptCAUbr=mscAtmIfVptCAUbr, mscAtmIfCAUbrUnshapedTransmitQueueing=mscAtmIfCAUbrUnshapedTransmitQueueing, mscAtmIfVptCAPoolProvBwValue=mscAtmIfVptCAPoolProvBwValue, mscAtmIfVptStorageType=mscAtmIfVptStorageType, mscAtmIfVptVccTestFrmPatternType=mscAtmIfVptVccTestFrmPatternType, mscAtmIfVptTxDiscardClp=mscAtmIfVptTxDiscardClp, mscAtmIfVptVccVcdTm=mscAtmIfVptVccVcdTm, mscAtmIfVpcVpdRxTrafficDescType=mscAtmIfVpcVpdRxTrafficDescType, mscAtmIfVpcVpdTmTxTdpEntry=mscAtmIfVpcVpdTmTxTdpEntry, mscAtmIfVccVcdFqpIndex=mscAtmIfVccVcdFqpIndex, mscAtmIfVptVpdRxTdpIndex=mscAtmIfVptVpdRxTdpIndex, mscAtmIfVpcVpdRxTdpIndex=mscAtmIfVpcVpdRxTdpIndex, mscAtmIfVccVcdMCastConnectionType=mscAtmIfVccVcdMCastConnectionType, mscAtmIfVptVccTmAbrComponentName=mscAtmIfVptVccTmAbrComponentName, mscAtmIfVptVccTxTdpTable=mscAtmIfVptVccTxTdpTable, mscAtmIfTxCellEfci=mscAtmIfTxCellEfci, mscAtmIfUnknownStatus=mscAtmIfUnknownStatus, mscAtmIfVpcStatsEntry=mscAtmIfVpcStatsEntry, mscAtmIfCAProvTable=mscAtmIfCAProvTable, mscAtmIfVptVccTmTxQThreshValue=mscAtmIfVptVccTmTxQThreshValue, mscAtmIfVccStatsTxCell=mscAtmIfVccStatsTxCell)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfEpMinimumBandwidthGuarantee=mscAtmIfEpMinimumBandwidthGuarantee, mscAtmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor=mscAtmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor, mscAtmIfVptVccVcdTmAbr=mscAtmIfVptVccVcdTmAbr, mscAtmIfVccRxTdpValue=mscAtmIfVccRxTdpValue, mscAtmIfVpcTmAbrOperTable=mscAtmIfVpcTmAbrOperTable, mscAtmIfVccTmAbrIndex=mscAtmIfVccTmAbrIndex, mscAtmIfVpcVpdFqpIndex=mscAtmIfVpcVpdFqpIndex, mscAtmIfVptVccVcdTmUsageParameterControl=mscAtmIfVptVccVcdTmUsageParameterControl, mscAtmIfVptCACbrCdv=mscAtmIfVptCACbrCdv, mscAtmIfVptVccVcdTmTxPacketWiseDiscard=mscAtmIfVptVccVcdTmTxPacketWiseDiscard, mscAtmIfVpcTmRqpEntry=mscAtmIfVpcTmRqpEntry, mscAtmIfVptVccVcdTxTdpValue=mscAtmIfVptVccVcdTxTdpValue, mscAtmIfVptVccVcdTmClippingBbc=mscAtmIfVptVccVcdTmClippingBbc, mscAtmIfVptVpdTmAbrMaxCellPerRmCell=mscAtmIfVptVpdTmAbrMaxCellPerRmCell, mscAtmIfCAPoolAvailBwEntry=mscAtmIfCAPoolAvailBwEntry, mscAtmIfVccPmFwdLastSampleClr01=mscAtmIfVccPmFwdLastSampleClr01, mscAtmIfVpcVpdTmProvTable=mscAtmIfVpcVpdTmProvTable, mscAtmIfShapeUsageValue=mscAtmIfShapeUsageValue, mscAtmIfConnMapFirstNonZeroVpiForVccsOper=mscAtmIfConnMapFirstNonZeroVpiForVccsOper, mscAtmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor=mscAtmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor, mscAtmIfVccTmAbrTxFwdRmCells=mscAtmIfVccTmAbrTxFwdRmCells, mscAtmIfCAPoolRequBwEntry=mscAtmIfCAPoolRequBwEntry, mscAtmIfVpcTmAbrRateIncreaseFactor=mscAtmIfVpcTmAbrRateIncreaseFactor, mscAtmIfVptVccTestRowStatus=mscAtmIfVptVccTestRowStatus, mscAtmIfVptVccStatsTable=mscAtmIfVptVccStatsTable, mscAtmIfVccTest=mscAtmIfVccTest, mscAtmIfVptVpdClippingBbc=mscAtmIfVptVpdClippingBbc, mscAtmIfCACbrSvcMpHoldingPriority=mscAtmIfCACbrSvcMpHoldingPriority, mscAtmIfVccVcdTmAbrProvTable=mscAtmIfVccVcdTmAbrProvTable, mscAtmIfOamSegmentBoundary=mscAtmIfOamSegmentBoundary, mscAtmIfCAPermanentMulticastBranches=mscAtmIfCAPermanentMulticastBranches, mscAtmIfVptVccFqpTable=mscAtmIfVptVccFqpTable, mscAtmIfVccPmBwdPmCellDiscardCount=mscAtmIfVccPmBwdPmCellDiscardCount, mscAtmIfVptVccTmRowStatus=mscAtmIfVptVccTmRowStatus, mscAtmIfVccPmStatusTable=mscAtmIfVccPmStatusTable, mscAtmIfVpcVpdTmAbrTransientBufferExposure=mscAtmIfVpcVpdTmAbrTransientBufferExposure, mscAtmIfVccVcdFqpTable=mscAtmIfVccVcdFqpTable, mscAtmIfVptVccConnectionPointType=mscAtmIfVptVccConnectionPointType, mscAtmIfVccVcdTxTdpIndex=mscAtmIfVccVcdTxTdpIndex, mscAtmIfVccVcdTmAbrDgcraMaximumDelay=mscAtmIfVccVcdTmAbrDgcraMaximumDelay, mscAtmIfVptTroubled=mscAtmIfVptTroubled, mscAtmIfVptRxTdpIndex=mscAtmIfVptRxTdpIndex, mscAtmIfVccVcdTmTxQueueLimit=mscAtmIfVccVcdTmTxQueueLimit, mscAtmIfVpcTmTxTdpValue=mscAtmIfVpcTmTxTdpValue, mscAtmIfVccTxDiscard=mscAtmIfVccTxDiscard, mscAtmIfVptVccBestEffort=mscAtmIfVptVccBestEffort, mscAtmIfVptVccVcdTmRxTrafficDescType=mscAtmIfVptVccVcdTmRxTrafficDescType, mscAtmIfVccVcdPmRowStatus=mscAtmIfVccVcdPmRowStatus, mscAtmIfVccTmForceTagging=mscAtmIfVccTmForceTagging, mscAtmIfCACbrEmissionPriority=mscAtmIfCACbrEmissionPriority, mscAtmIfVccStatsRxCell=mscAtmIfVccStatsRxCell, mscAtmIfVptVccBwdQosClass=mscAtmIfVptVccBwdQosClass, mscAtmIfCAAbrDgcraMaximumDelay=mscAtmIfCAAbrDgcraMaximumDelay, mscAtmIfCAPoolRequBwTable=mscAtmIfCAPoolRequBwTable, mscAtmIfCAUbrComponentName=mscAtmIfCAUbrComponentName, mscAtmIfVptVccTransferCapabilityBbc=mscAtmIfVptVccTransferCapabilityBbc, mscAtmIfVccPmFwdTotalUserCellsTx01=mscAtmIfVccPmFwdTotalUserCellsTx01, mscAtmIfConnMapFirstNonZeroVpiForVccs=mscAtmIfConnMapFirstNonZeroVpiForVccs, mscAtmIfVccVcdFwdQosClass=mscAtmIfVccVcdFwdQosClass, mscAtmIfVccVcdTmForceTagging=mscAtmIfVccVcdTmForceTagging, mscAtmIfNAcctProvTable=mscAtmIfNAcctProvTable, mscAtmIfVptTmAbrOperEntry=mscAtmIfVptTmAbrOperEntry, mscAtmIfVptVccTmTxTdpEntry=mscAtmIfVptVccTmTxTdpEntry, mscAtmIfVccTmAbrMaxCellPerRmCell=mscAtmIfVccTmAbrMaxCellPerRmCell, mscAtmIfCAUbrPerVcQueueLimitReferenceRate=mscAtmIfCAUbrPerVcQueueLimitReferenceRate, mscAtmIfCAStorageType=mscAtmIfCAStorageType, mscAtmIfCARtVbrStorageType=mscAtmIfCARtVbrStorageType, mscAtmIfVccVcdPmSegSwitchSideMeasurement=mscAtmIfVccVcdPmSegSwitchSideMeasurement, mscAtmIfVptVpdTmBqpEntry=mscAtmIfVptVpdTmBqpEntry, mscAtmIfVpcTmAbrTxFwdRmCells=mscAtmIfVpcTmAbrTxFwdRmCells, mscAtmIfVptCAPoolWaitAdmConnsTable=mscAtmIfVptCAPoolWaitAdmConnsTable, mscAtmIfVptTmTransferCapabilityBbc=mscAtmIfVptTmTransferCapabilityBbc, mscAtmIfVpcOperEntry=mscAtmIfVpcOperEntry, mscAtmIfVpcTmUsageParameterControl=mscAtmIfVpcTmUsageParameterControl, mscAtmIfVptVccTmRxTdpEntry=mscAtmIfVptVccTmRxTdpEntry, mscAtmIfVpcVpdCorrelationTag=mscAtmIfVpcVpdCorrelationTag, mscAtmIfVccTxQThreshTable=mscAtmIfVccTxQThreshTable, mscAtmIfVccLastAverageCtd=mscAtmIfVccLastAverageCtd, mscAtmIfVccTmRqpIndex=mscAtmIfVccTmRqpIndex, mscAtmIfVptVpdMCastConnectionType=mscAtmIfVptVpdMCastConnectionType, mscAtmIfVptVccTmRxTdpIndex=mscAtmIfVptVccTmRxTdpIndex, mscAtmIfVpcVpdTmBqpEntry=mscAtmIfVpcVpdTmBqpEntry, mscAtmIfOpShapingRatesIndex=mscAtmIfOpShapingRatesIndex, mscAtmIfVptBearerClassBbc=mscAtmIfVptBearerClassBbc, mscAtmIfRemoteAtmInterfaceLabel=mscAtmIfRemoteAtmInterfaceLabel, mscAtmIfVptTxTdpValue=mscAtmIfVptTxTdpValue, mscAtmIfVccLastMaximumCtd=mscAtmIfVccLastMaximumCtd, mscAtmIfVptCANrtVbrComponentName=mscAtmIfVptCANrtVbrComponentName, mscAtmIfVptVccVcdRowStatus=mscAtmIfVptVccVcdRowStatus, mscAtmIfConnMapOvRowStatus=mscAtmIfConnMapOvRowStatus, mscAtmIfVptVccVcdTmBqpTable=mscAtmIfVptVccVcdTmBqpTable, mscAtmIfVptVpdBwdQosClass=mscAtmIfVptVpdBwdQosClass, mscAtmIfVpcTxQosClass=mscAtmIfVpcTxQosClass, mscAtmIfVptVccVcdCorrelationTag=mscAtmIfVptVccVcdCorrelationTag, mscAtmIfCABwPoolIndex=mscAtmIfCABwPoolIndex, mscAtmIfVccSegSwitchSideLoopbackState=mscAtmIfVccSegSwitchSideLoopbackState, mscAtmIfVptCAPoolRequBwIndex=mscAtmIfVptCAPoolRequBwIndex, mscAtmIfVptVccVcdTmTrafficShaping=mscAtmIfVptVccVcdTmTrafficShaping, mscAtmIfVpcRxTdpTable=mscAtmIfVpcRxTdpTable, mscAtmIfVpcVpdFwdFrameDiscard=mscAtmIfVpcVpdFwdFrameDiscard, mscAtmIfVpcRxTrafficDescType=mscAtmIfVpcRxTrafficDescType, mscAtmIfVpcPmRowStatusTable=mscAtmIfVpcPmRowStatusTable, mscAtmIfVccTmRowStatusEntry=mscAtmIfVccTmRowStatusEntry, mscAtmIfVccStateEntry=mscAtmIfVccStateEntry, atmCoreGroupCB02A=atmCoreGroupCB02A, mscAtmIfVccTmAbrTxRateChangeInfo=mscAtmIfVccTmAbrTxRateChangeInfo, mscAtmIfCANrtVbrIndex=mscAtmIfCANrtVbrIndex, mscAtmIfVccTmAbrRowStatusEntry=mscAtmIfVccTmAbrRowStatusEntry, mscAtmIfVccSegLinkSideLoopbackState=mscAtmIfVccSegLinkSideLoopbackState, mscAtmIfVptVpdTxQosClass=mscAtmIfVptVpdTxQosClass, mscAtmIfPm=mscAtmIfPm, mscAtmIfVptVccTestResultsEntry=mscAtmIfVptVccTestResultsEntry, mscAtmIfVpcTmRowStatusEntry=mscAtmIfVpcTmRowStatusEntry, mscAtmIfVptCAAbrRowStatusTable=mscAtmIfVptCAAbrRowStatusTable, mscAtmIfVpcLastMaximumCtd=mscAtmIfVpcLastMaximumCtd, mscAtmIfVccStatsRxUpcViolationOnEnforcer2=mscAtmIfVccStatsRxUpcViolationOnEnforcer2, mscAtmIfVpcVpdRxTdpValue=mscAtmIfVpcVpdRxTdpValue, mscAtmIfShapeUsageTable=mscAtmIfShapeUsageTable, mscAtmIfVptVcc=mscAtmIfVptVcc, mscAtmIfVptVccVcdTmAbrFarEndInitialCellRate=mscAtmIfVptVccVcdTmAbrFarEndInitialCellRate, mscAtmIfVptVccTmAbrRateDecreaseFactor=mscAtmIfVptVccTmAbrRateDecreaseFactor, mscAtmIfVptCACbrCellLossRatio=mscAtmIfVptCACbrCellLossRatio, mscAtmIfCAMaxAutoSelectedVciForNonZeroVpi=mscAtmIfCAMaxAutoSelectedVciForNonZeroVpi, mscAtmIfVccUnshapedTransmitQueueing=mscAtmIfVccUnshapedTransmitQueueing, mscAtmIfCAMaxCaVpcs=mscAtmIfCAMaxCaVpcs, mscAtmIfCAAbr=mscAtmIfCAAbr, mscAtmIfVptVccTxTdpIndex=mscAtmIfVptVccTxTdpIndex, mscAtmIfVptVpdFqpIndex=mscAtmIfVptVpdFqpIndex, mscAtmIfVptVccNepIndex=mscAtmIfVptVccNepIndex, mscAtmIfCAAbrAcrDecreaseTimeFactor=mscAtmIfCAAbrAcrDecreaseTimeFactor, mscAtmIfVpcStatsTxCellClp=mscAtmIfVpcStatsTxCellClp, mscAtmIfVccTestUsageState=mscAtmIfVccTestUsageState, mscAtmIfVptCARtVbrIndex=mscAtmIfVptCARtVbrIndex, mscAtmIfVptTmTxTdpTable=mscAtmIfVptTmTxTdpTable, mscAtmIfVptVccTestDuration=mscAtmIfVptVccTestDuration, mscAtmIfVptVccVcdTmRxTdpValue=mscAtmIfVptVccVcdTmRxTdpValue, mscAtmIfVpcPmBwdLastSampleUserCellsTx0=mscAtmIfVpcPmBwdLastSampleUserCellsTx0, mscAtmIfVptVccVcdBwdQosClass=mscAtmIfVptVccVcdBwdQosClass, mscAtmIfVptVccTroubled=mscAtmIfVptVccTroubled, mscAtmIfVpcTmAbrForwardRmCellLimit=mscAtmIfVpcTmAbrForwardRmCellLimit, mscAtmIfVpcPmBwdAverageClr01=mscAtmIfVpcPmBwdAverageClr01, mscAtmIfCANrtVbrWeightPolicy=mscAtmIfCANrtVbrWeightPolicy, mscAtmIfVptCANrtVbrStorageType=mscAtmIfVptCANrtVbrStorageType, mscAtmIfVptVccVcdUnshapedTransmitQueueing=mscAtmIfVptVccVcdUnshapedTransmitQueueing, mscAtmIfVpcVpdLbkTable=mscAtmIfVpcVpdLbkTable, mscAtmIfPmRowStatus=mscAtmIfPmRowStatus, mscAtmIfVptVpdTmRowStatusEntry=mscAtmIfVptVpdTmRowStatusEntry, mscAtmIfVptTmTxQThreshEntry=mscAtmIfVptTmTxQThreshEntry, mscAtmIfVccVcdTmAbrTransientBufferExposure=mscAtmIfVccVcdTmAbrTransientBufferExposure, mscAtmIfVptVccTmTxTrafficDescType=mscAtmIfVptVccTmTxTrafficDescType, mscAtmIfTxCellClp=mscAtmIfTxCellClp, mscAtmIfVptVccRxTdpValue=mscAtmIfVptVccRxTdpValue, mscAtmIfVccVcdTmRxTdpValue=mscAtmIfVccVcdTmRxTdpValue, mscAtmIfCANrtVbrSvcHoldingPriority=mscAtmIfCANrtVbrSvcHoldingPriority, mscAtmIfVpcVpdTmTxPacketWiseDiscard=mscAtmIfVpcVpdTmTxPacketWiseDiscard, mscAtmIfVccVcdTmFqpIndex=mscAtmIfVccVcdTmFqpIndex, mscAtmIfVptCAPermittedAtmServiceCategories=mscAtmIfVptCAPermittedAtmServiceCategories, mscAtmIfVccFwdQosClass=mscAtmIfVccFwdQosClass, mscAtmIfVptVccTestBandwidthElastic=mscAtmIfVptVccTestBandwidthElastic, mscAtmIfVptCAPoolAdmitBwIndex=mscAtmIfVptCAPoolAdmitBwIndex, mscAtmIfCACbrMaxCtd=mscAtmIfCACbrMaxCtd, mscAtmIfCAAbrEpdOffset=mscAtmIfCAAbrEpdOffset, mscAtmIfVpcVpdTmAbrConnectionType=mscAtmIfVpcVpdTmAbrConnectionType, mscAtmIfVptCAPoolAdmitBwEntry=mscAtmIfVptCAPoolAdmitBwEntry, mscAtmIfVptCAUbrStorageType=mscAtmIfVptCAUbrStorageType, mscAtmIfCAPmTable=mscAtmIfCAPmTable, mscAtmIfVptTmBandwidthElastic=mscAtmIfVptTmBandwidthElastic, mscAtmIfVpcTxQThreshTable=mscAtmIfVpcTxQThreshTable, mscAtmIfVccStatsRxCellDiscard=mscAtmIfVccStatsRxCellDiscard, mscAtmIfVccVcdTmClippingBbc=mscAtmIfVccVcdTmClippingBbc, mscAtmIfVccVcdTmTrafficShaping=mscAtmIfVccVcdTmTrafficShaping, mscAtmIfVptVccVcdTxTdpEntry=mscAtmIfVptVccVcdTxTdpEntry, mscAtmIfVccOperationalState=mscAtmIfVccOperationalState, mscAtmIfConnMapOvStorageType=mscAtmIfConnMapOvStorageType, mscAtmIfVptVccSegLinkSideLoopbackState=mscAtmIfVptVccSegLinkSideLoopbackState, mscAtmIfVpcConnInfoEntry=mscAtmIfVpcConnInfoEntry, mscAtmIfVptVccVcdTmAbrComponentName=mscAtmIfVptVccVcdTmAbrComponentName, mscAtmIfVccVcdAcctTable=mscAtmIfVccVcdAcctTable, mscAtmIfVccPmFwdClrTable=mscAtmIfVccPmFwdClrTable, mscAtmIfVccVcdRxQosClass=mscAtmIfVccVcdRxQosClass, mscAtmIfCAUbrOpUnshapedTransmitQueueing=mscAtmIfCAUbrOpUnshapedTransmitQueueing, mscAtmIfVccTestUnrecognizableFrmRx=mscAtmIfVccTestUnrecognizableFrmRx, mscAtmIfVptVpdTmBearerClassBbc=mscAtmIfVptVpdTmBearerClassBbc, mscAtmIfVptVpdTmAbrIndex=mscAtmIfVptVpdTmAbrIndex, mscAtmIfVptCARtVbrComponentName=mscAtmIfVptCARtVbrComponentName, mscAtmIfVpcVpdTmAbrStorageType=mscAtmIfVpcVpdTmAbrStorageType, mscAtmIfCACbrWeightPolicy=mscAtmIfCACbrWeightPolicy, mscAtmIfConnMapRowStatusEntry=mscAtmIfConnMapRowStatusEntry, mscAtmIfCARtVbrMinPerVcQueueLimit=mscAtmIfCARtVbrMinPerVcQueueLimit, mscAtmIfVccPmFwdMinimumClr01=mscAtmIfVccPmFwdMinimumClr01, mscAtmIfVccTxQueueCongestionState=mscAtmIfVccTxQueueCongestionState, mscAtmIfVccPmFwdLastSampleUserCellsRx01=mscAtmIfVccPmFwdLastSampleUserCellsRx01, mscAtmIfVpcVpdTmAbrRowStatusEntry=mscAtmIfVpcVpdTmAbrRowStatusEntry, mscAtmIfVptVpdTmAbrStorageType=mscAtmIfVptVpdTmAbrStorageType, mscAtmIfVccVcdTmStorageType=mscAtmIfVccVcdTmStorageType, mscAtmIfVpcVpdSegLinkSideLoopback=mscAtmIfVpcVpdSegLinkSideLoopback, mscAtmIfVccVcdTmRxTrafficDescType=mscAtmIfVccVcdTmRxTrafficDescType, mscAtmIfVptCARowStatus=mscAtmIfVptCARowStatus, mscAtmIfVccVcdTmAbrDgcraMinimumDelay=mscAtmIfVccVcdTmAbrDgcraMinimumDelay, mscAtmIfCAUbrMaxConnections=mscAtmIfCAUbrMaxConnections, mscAtmIfVptVccVcdRxTdpValue=mscAtmIfVptVccVcdRxTdpValue, mscAtmIfRowStatusTable=mscAtmIfRowStatusTable, mscAtmIfVptVccTmAbrConnectionType=mscAtmIfVptVccTmAbrConnectionType, mscAtmIfVpcBqpEntry=mscAtmIfVpcBqpEntry, mscAtmIfCAAbrCutoffDecreaseFactor=mscAtmIfCAAbrCutoffDecreaseFactor, mscAtmIfVptVccTmAbrRateIncreaseFactor=mscAtmIfVptVccTmAbrRateIncreaseFactor, mscAtmIfVptVccTestResultsTable=mscAtmIfVptVccTestResultsTable, mscAtmIfVccStatsTxCellDiscardClp=mscAtmIfVccStatsTxCellDiscardClp, mscAtmIfVpcTmStorageType=mscAtmIfVpcTmStorageType, mscAtmIfVptStatsEntry=mscAtmIfVptStatsEntry, mscAtmIfVptVccLoopRowStatusTable=mscAtmIfVptVccLoopRowStatusTable, mscAtmIfVptTxQueueLength=mscAtmIfVptTxQueueLength, mscAtmIfVptVccTmTransferCapabilityBbc=mscAtmIfVptVccTmTransferCapabilityBbc, mscAtmIfVpcTmTxQThreshIndex=mscAtmIfVpcTmTxQThreshIndex, mscAtmIfVccPmBwdLastSampleUserCellsTx0=mscAtmIfVccPmBwdLastSampleUserCellsTx0, mscAtmIfVccVcdTxTdpValue=mscAtmIfVccVcdTxTdpValue, mscAtmIfVpcTmAbrInitialCellRate=mscAtmIfVpcTmAbrInitialCellRate, mscAtmIfCAMaxMulticastBranches=mscAtmIfCAMaxMulticastBranches, mscAtmIfVpcVpdTm=mscAtmIfVpcVpdTm, mscAtmIfVptVccTest=mscAtmIfVptVccTest, mscAtmIfVptVccVcdTmBqpIndex=mscAtmIfVptVccVcdTmBqpIndex, mscAtmIfVptVccVcdTmBwdQosClass=mscAtmIfVptVccVcdTmBwdQosClass, mscAtmIfVccTestAdminState=mscAtmIfVccTestAdminState, mscAtmIfVccVcdTm=mscAtmIfVccVcdTm, mscAtmIfVptVccVcdTmHoldingPriority=mscAtmIfVptVccVcdTmHoldingPriority, mscAtmIfVccTxQosClass=mscAtmIfVccTxQosClass, mscAtmIfVptVpdTmAbrMaxTimeBetweenRmCells=mscAtmIfVptVpdTmAbrMaxTimeBetweenRmCells, mscAtmIfCARtVbrEmissionPriority=mscAtmIfCARtVbrEmissionPriority, mscAtmIfVccStatusEntry=mscAtmIfVccStatusEntry, mscAtmIfVptTmRxTdpIndex=mscAtmIfVptTmRxTdpIndex, mscAtmIfCARtVbrOperEntry=mscAtmIfCARtVbrOperEntry, mscAtmIfVptCAUbrProvTable=mscAtmIfVptCAUbrProvTable, mscAtmIfVptRxQosClass=mscAtmIfVptRxQosClass, mscAtmIfVptVpdTmBqpTable=mscAtmIfVptVpdTmBqpTable, mscAtmIfVccVcdRowStatus=mscAtmIfVccVcdRowStatus, mscAtmIfVccRxTdpTable=mscAtmIfVccRxTdpTable, mscAtmIfVptCAAbrRowStatusEntry=mscAtmIfVptCAAbrRowStatusEntry, mscAtmIfVccOperEntry=mscAtmIfVccOperEntry, mscAtmIfTxCellDiscardClp=mscAtmIfTxCellDiscardClp, mscAtmIfVpcVpdRowStatus=mscAtmIfVpcVpdRowStatus, mscAtmIfVptVccTmTqpTable=mscAtmIfVptVccTmTqpTable, mscAtmIfVptVccTmAbrInitialCellRate=mscAtmIfVptVccTmAbrInitialCellRate, mscAtmIfVccVcdTmTxTdpTable=mscAtmIfVccVcdTmTxTdpTable, mscAtmIfVptComponentName=mscAtmIfVptComponentName, mscAtmIfVptRxFrameDiscard=mscAtmIfVptRxFrameDiscard, mscAtmIfCAAbrDgcraMinimumDelay=mscAtmIfCAAbrDgcraMinimumDelay, mscAtmIfVpcTmUnshapedTransmitQueueing=mscAtmIfVpcTmUnshapedTransmitQueueing, mscAtmIfVccVcdTmAbrStorageType=mscAtmIfVccVcdTmAbrStorageType, mscAtmIfVptVpdRowStatus=mscAtmIfVptVpdRowStatus, mscAtmIfInterfaceName=mscAtmIfInterfaceName, mscAtmIfLastAal5RxErrorConnection=mscAtmIfLastAal5RxErrorConnection, mscAtmIfVptVccVcdTmAbrDgcraMaximumDelay=mscAtmIfVptVccVcdTmAbrDgcraMaximumDelay, mscAtmIfVpcUnshapedTransmitQueueing=mscAtmIfVpcUnshapedTransmitQueueing, mscAtmIfVptVccRxDiscardClp=mscAtmIfVptVccRxDiscardClp)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfVccStatsRxFrameDiscardClp=mscAtmIfVccStatsRxFrameDiscardClp, mscAtmIfVptVccTmBandwidthReduction=mscAtmIfVptVccTmBandwidthReduction, mscAtmIfVptVpdTmAbrDgcraMinimumDelay=mscAtmIfVptVpdTmAbrDgcraMinimumDelay, mscAtmIfVccRxQosClass=mscAtmIfVccRxQosClass, mscAtmIfVptVccTmRxTdpTable=mscAtmIfVptVccTmRxTdpTable, mscAtmIfVccTestLoadingFrmLost=mscAtmIfVccTestLoadingFrmLost, mscAtmIfVccFqpIndex=mscAtmIfVccFqpIndex, mscAtmIfVpcVpdTmRxPacketWiseDiscard=mscAtmIfVpcVpdTmRxPacketWiseDiscard, mscAtmIfVccTxTdpIndex=mscAtmIfVccTxTdpIndex, mscAtmIfConnMapNumVccsForVpiZeroOper=mscAtmIfConnMapNumVccsForVpiZeroOper, mscAtmIfCAUbrWeightPolicy=mscAtmIfCAUbrWeightPolicy, mscAtmIfVccVcdLbkEntry=mscAtmIfVccVcdLbkEntry, mscAtmIfVptVccVcdTmAbrTransientBufferExposure=mscAtmIfVptVccVcdTmAbrTransientBufferExposure, mscAtmIfVptCANrtVbrRowStatusEntry=mscAtmIfVptCANrtVbrRowStatusEntry, mscAtmIfVptTmTrafficShaping=mscAtmIfVptTmTrafficShaping, mscAtmIfConnMapNumVccsPerNonZeroVpi=mscAtmIfConnMapNumVccsPerNonZeroVpi, mscAtmIfVptVccLoopRowStatusEntry=mscAtmIfVptVccLoopRowStatusEntry, mscAtmIfVccOperTable=mscAtmIfVccOperTable, mscAtmIfVptFqpValue=mscAtmIfVptFqpValue, mscAtmIfAal5RxAborts=mscAtmIfAal5RxAborts, mscAtmIfVptStatsTxFrameDiscardClp=mscAtmIfVptStatsTxFrameDiscardClp, mscAtmIfVptCAUbrRowStatusEntry=mscAtmIfVptCAUbrRowStatusEntry, mscAtmIfVpcTmTqpEntry=mscAtmIfVpcTmTqpEntry, mscAtmIfVptVccVcdTmRxTdpEntry=mscAtmIfVptVccVcdTmRxTdpEntry, mscAtmIfVptVpdBestEffort=mscAtmIfVptVpdBestEffort, mscAtmIfConnMapOvNumVccsPerNonZeroVpi=mscAtmIfConnMapOvNumVccsPerNonZeroVpi, mscAtmIfVpcStatsRxUpcViolationOnEnforcer2=mscAtmIfVpcStatsRxUpcViolationOnEnforcer2, mscAtmIfVptVccVcdAcctTable=mscAtmIfVptVccVcdAcctTable, mscAtmIfVptFqpTable=mscAtmIfVptFqpTable, mscAtmIfCAUbrRowStatusTable=mscAtmIfCAUbrRowStatusTable, mscAtmIfComponentName=mscAtmIfComponentName, mscAtmIfVpcPmFwdMinimumClr0=mscAtmIfVpcPmFwdMinimumClr0, mscAtmIfCACbrProvCdvt=mscAtmIfCACbrProvCdvt, mscAtmIfVptTmTxQThreshIndex=mscAtmIfVptTmTxQThreshIndex, mscAtmIfVptVpdTmAbrRowStatusEntry=mscAtmIfVptVpdTmAbrRowStatusEntry, mscAtmIfCACbrUsageParameterControl=mscAtmIfCACbrUsageParameterControl, mscAtmIfVpcRxQosClass=mscAtmIfVpcRxQosClass, mscAtmIfVptVccVcdRxTdpEntry=mscAtmIfVptVccVcdRxTdpEntry, mscAtmIfVpcTrafficTable=mscAtmIfVpcTrafficTable, mscAtmIfVpcVpdAcctEntry=mscAtmIfVpcVpdAcctEntry, mscAtmIfVptVccFwdQosClass=mscAtmIfVptVccFwdQosClass, mscAtmIfVccAisState=mscAtmIfVccAisState, mscAtmIfVpcLoopIndex=mscAtmIfVpcLoopIndex, mscAtmIfVptVccClippingBbc=mscAtmIfVptVccClippingBbc, mscAtmIfCAUbr=mscAtmIfCAUbr, mscAtmIfVccConnInfoTable=mscAtmIfVccConnInfoTable, mscAtmIfVpcTmTqpValue=mscAtmIfVpcTmTqpValue, mscAtmIfVptVccVcdFqpValue=mscAtmIfVptVccVcdFqpValue, mscAtmIfVpcVpdUnshapedTransmitQueueing=mscAtmIfVpcVpdUnshapedTransmitQueueing, mscAtmIfVpcVpdFqpTable=mscAtmIfVpcVpdFqpTable, mscAtmIfCAUbrVpcUsage=mscAtmIfCAUbrVpcUsage, mscAtmIfVptTmAbrAcrDecreaseTimeFactor=mscAtmIfVptTmAbrAcrDecreaseTimeFactor, mscAtmIfCACbrPerVcQueueLimitReferenceRate=mscAtmIfCACbrPerVcQueueLimitReferenceRate, mscAtmIfVccTmRowStatusTable=mscAtmIfVccTmRowStatusTable, mscAtmIfVccPmBwdLastSampleUserCellsRx0=mscAtmIfVccPmBwdLastSampleUserCellsRx0, mscAtmIfVpcBwdQosClass=mscAtmIfVpcBwdQosClass, mscAtmIfVptVccRowStatusTable=mscAtmIfVptVccRowStatusTable, mscAtmIfVptVccVcdTmRowStatusEntry=mscAtmIfVptVccVcdTmRowStatusEntry, mscAtmIfCAAbrAbrConnectionType=mscAtmIfCAAbrAbrConnectionType, mscAtmIfVpcPmFwdTotalUserCellsTx01=mscAtmIfVpcPmFwdTotalUserCellsTx01, mscAtmIfVptVpdTmTrafficShaping=mscAtmIfVptVpdTmTrafficShaping, mscAtmIfPmStorageType=mscAtmIfPmStorageType, mscAtmIfVptVccVcdTmAbrConnectionType=mscAtmIfVptVccVcdTmAbrConnectionType, mscAtmIfVptVpdStorageType=mscAtmIfVptVpdStorageType, mscAtmIfTxCellDiscard=mscAtmIfTxCellDiscard, mscAtmIfPmIndex=mscAtmIfPmIndex, mscAtmIfCAUbrPool=mscAtmIfCAUbrPool, mscAtmIfCAAbrRowStatusTable=mscAtmIfCAAbrRowStatusTable, mscAtmIfVpcTmAtmServiceCategory=mscAtmIfVpcTmAtmServiceCategory, mscAtmIfVptVpdTmWeight=mscAtmIfVptVpdTmWeight, mscAtmIfVccPmStatusEntry=mscAtmIfVccPmStatusEntry, mscAtmIfCidDataEntry=mscAtmIfCidDataEntry, mscAtmIfVptTxFrameDiscard=mscAtmIfVptTxFrameDiscard, mscAtmIfCANrtVbrOpUnshapedTransmitQueueing=mscAtmIfCANrtVbrOpUnshapedTransmitQueueing, mscAtmIfVccVcdFwdFrameDiscard=mscAtmIfVccVcdFwdFrameDiscard, mscAtmIfTxCellMemoryThresholdEntry=mscAtmIfTxCellMemoryThresholdEntry, mscAtmIfVptTmAbrMaxTimeBetweenRmCell=mscAtmIfVptTmAbrMaxTimeBetweenRmCell, mscAtmIfCAAbrMinPerVcQueueLimit=mscAtmIfCAAbrMinPerVcQueueLimit, mscAtmIfVpcTxTdpTable=mscAtmIfVpcTxTdpTable, mscAtmIfVpcPmFwdLastSampleUserCellsRx0=mscAtmIfVpcPmFwdLastSampleUserCellsRx0, mscAtmIfVccTmRxQosClass=mscAtmIfVccTmRxQosClass, mscAtmIfVptTmTxQosClass=mscAtmIfVptTmTxQosClass, mscAtmIfVptRxTdpTable=mscAtmIfVptRxTdpTable, mscAtmIfVpcPmBwdMinimumClr01=mscAtmIfVpcPmBwdMinimumClr01, mscAtmIfVccLoopComponentName=mscAtmIfVccLoopComponentName, mscAtmIfVptVpdTmFqpIndex=mscAtmIfVptVpdTmFqpIndex, mscAtmIfVptBqpValue=mscAtmIfVptBqpValue, mscAtmIfVptTmAbrForwardRmCellLimit=mscAtmIfVptTmAbrForwardRmCellLimit, mscAtmIfVptVccStatsTxCellDiscardClp=mscAtmIfVptVccStatsTxCellDiscardClp, mscAtmIfCACbrIndex=mscAtmIfCACbrIndex, mscAtmIfVpcVpdTmAbrRateDecreaseFactor=mscAtmIfVpcVpdTmAbrRateDecreaseFactor, mscAtmIfVccNep=mscAtmIfVccNep, mscAtmIfVptVccNepRowStatus=mscAtmIfVptVccNepRowStatus, mscAtmIfVptUnshapedTransmitQueueing=mscAtmIfVptUnshapedTransmitQueueing, mscAtmIfVptOperTable=mscAtmIfVptOperTable, mscAtmIfVccStatsEntry=mscAtmIfVccStatsEntry, mscAtmIfVptVccVcdTmFqpTable=mscAtmIfVptVccVcdTmFqpTable, mscAtmIfVptVccTmForceTagging=mscAtmIfVptVccTmForceTagging, mscAtmIfVptVccComponentName=mscAtmIfVptVccComponentName, mscAtmIfVccPmFwdLastSampleUserCellsTx01=mscAtmIfVccPmFwdLastSampleUserCellsTx01, mscAtmIfVccVcdTmAbrMaxCellPerRmCell=mscAtmIfVccVcdTmAbrMaxCellPerRmCell, mscAtmIfTxFrameDiscard=mscAtmIfTxFrameDiscard, mscAtmIfCAAbrCdvt=mscAtmIfCAAbrCdvt, mscAtmIfVccTmAbrRateDecreaseFactor=mscAtmIfVccTmAbrRateDecreaseFactor, mscAtmIfVccHoldingPriority=mscAtmIfVccHoldingPriority, mscAtmIfVptTrafficShaping=mscAtmIfVptTrafficShaping, mscAtmIfVccTestResultsEntry=mscAtmIfVccTestResultsEntry, mscAtmIfVptOperEntry=mscAtmIfVptOperEntry, mscAtmIfVpcRxDiscard=mscAtmIfVpcRxDiscard, mscAtmIfVpcTmTrafficShaping=mscAtmIfVpcTmTrafficShaping, mscAtmIfVpcPmStatusTable=mscAtmIfVpcPmStatusTable, mscAtmIfCAOamBrPmConnections=mscAtmIfCAOamBrPmConnections, mscAtmIfVccVcdTmAbrFarEndInitialCellRate=mscAtmIfVccVcdTmAbrFarEndInitialCellRate, mscAtmIfVpcTmAbr=mscAtmIfVpcTmAbr, mscAtmIfCARtVbrCellLossRatio=mscAtmIfCARtVbrCellLossRatio, mscAtmIfVpcVpdTxTdpIndex=mscAtmIfVpcVpdTxTdpIndex, mscAtmIfVptVccVcdTmProvEntry=mscAtmIfVptVccVcdTmProvEntry, mscAtmIfCASwitchedVccs=mscAtmIfCASwitchedVccs, mscAtmIfVpcTmTxTrafficDescType=mscAtmIfVpcTmTxTrafficDescType, mscAtmIfVptVccTmRqpEntry=mscAtmIfVptVccTmRqpEntry, mscAtmIfConnMapOvIndex=mscAtmIfConnMapOvIndex, mscAtmIfCAUbrOperTable=mscAtmIfCAUbrOperTable, mscAtmIfVptTmAbrTxFwdRmCells=mscAtmIfVptTmAbrTxFwdRmCells, mscAtmIfVptTmWeight=mscAtmIfVptTmWeight, mscAtmIfVpcFqpTable=mscAtmIfVpcFqpTable, mscAtmIfVptVccRxQosClass=mscAtmIfVptVccRxQosClass, mscAtmIfVccFqpValue=mscAtmIfVccFqpValue, mscAtmIfVptVccTmBestEffort=mscAtmIfVptVccTmBestEffort, mscAtmIfUsageParameterControl=mscAtmIfUsageParameterControl, mscAtmIfVptVccTmClippingBbc=mscAtmIfVptVccTmClippingBbc, mscAtmIfVpcLastCtdSampleSize=mscAtmIfVpcLastCtdSampleSize, mscAtmIfVpcVpdBqpTable=mscAtmIfVpcVpdBqpTable, mscAtmIfCANrtVbrUsageParameterControl=mscAtmIfCANrtVbrUsageParameterControl, mscAtmIfVccVcdTmAbrRowStatusEntry=mscAtmIfVccVcdTmAbrRowStatusEntry, mscAtmIfVptVpdFwdQosClass=mscAtmIfVptVpdFwdQosClass, mscAtmIfVptTransferCapabilityBbc=mscAtmIfVptTransferCapabilityBbc, mscAtmIfVptVpdAcctEntry=mscAtmIfVptVpdAcctEntry, mscAtmIfVptVpdRxTdpValue=mscAtmIfVptVpdRxTdpValue, mscAtmIfVccTmRxPacketWiseDiscard=mscAtmIfVccTmRxPacketWiseDiscard, mscAtmIfVpcTroubled=mscAtmIfVpcTroubled, mscAtmIfNAcctRowStatusEntry=mscAtmIfNAcctRowStatusEntry, mscAtmIfVptCAComponentName=mscAtmIfVptCAComponentName, mscAtmIfVpcTxQThreshIndex=mscAtmIfVpcTxQThreshIndex, mscAtmIfConnMapNumNonZeroVpisForVccsOper=mscAtmIfConnMapNumNonZeroVpisForVccsOper, mscAtmIfVccVcdTmAbrMaxTimeBetweenRmCells=mscAtmIfVccVcdTmAbrMaxTimeBetweenRmCells, mscAtmIfCASvcVbrRtHoldingPriority=mscAtmIfCASvcVbrRtHoldingPriority, mscAtmIfCARtVbrShapeRecoupPolicy=mscAtmIfCARtVbrShapeRecoupPolicy, mscAtmIfCAPoolWaitAdmConnsEntry=mscAtmIfCAPoolWaitAdmConnsEntry, mscAtmIfCARtVbrTxQueueLimit=mscAtmIfCARtVbrTxQueueLimit, mscAtmIfNAcctAccountClass=mscAtmIfNAcctAccountClass, mscAtmIfCAPoolAdmitBwEntry=mscAtmIfCAPoolAdmitBwEntry, mscAtmIfVpcVpdTmAbrComponentName=mscAtmIfVpcVpdTmAbrComponentName, mscAtmIfVpcClippingBbc=mscAtmIfVpcClippingBbc, mscAtmIfCAMinAutoSelectedVci=mscAtmIfCAMinAutoSelectedVci, mscAtmIfVccTestElapsedTime=mscAtmIfVccTestElapsedTime, mscAtmIfOperationalState=mscAtmIfOperationalState, mscAtmIfVptCAUbrProvEntry=mscAtmIfVptCAUbrProvEntry, mscAtmIfVpcTxDiscard=mscAtmIfVpcTxDiscard, mscAtmIfVpcStatsRxFrameDiscardClp=mscAtmIfVpcStatsRxFrameDiscardClp, mscAtmIfVptTmTqpTable=mscAtmIfVptTmTqpTable, mscAtmIfVpcOperStatus=mscAtmIfVpcOperStatus, mscAtmIfVpcLoopRowStatus=mscAtmIfVpcLoopRowStatus, mscAtmIfVpcStatusEntry=mscAtmIfVpcStatusEntry, mscAtmIfVccPmClrMeasurementStatus=mscAtmIfVccPmClrMeasurementStatus, mscAtmIfVptVccTmAbrTxFwdRmCells=mscAtmIfVptVccTmAbrTxFwdRmCells, mscAtmIfVccTmAbrStorageType=mscAtmIfVccTmAbrStorageType, mscAtmIfVccVcdPmControlMode=mscAtmIfVccVcdPmControlMode, mscAtmIfVptRowStatusTable=mscAtmIfVptRowStatusTable, mscAtmIfVptUsageParameterControl=mscAtmIfVptUsageParameterControl, mscAtmIfProvTable=mscAtmIfProvTable, mscAtmIfVptVccTestVerificationFrmTx=mscAtmIfVptVccTestVerificationFrmTx, mscAtmIfVptConnectionPointType=mscAtmIfVptConnectionPointType, mscAtmIfVptTmOperTable=mscAtmIfVptTmOperTable, mscAtmIfCAUbrHoldingPriority=mscAtmIfCAUbrHoldingPriority, mscAtmIfVptVpdTm=mscAtmIfVptVpdTm, mscAtmIfVptVccTmTqpEntry=mscAtmIfVptVccTmTqpEntry, mscAtmIfVccVcdTmHoldingPriority=mscAtmIfVccVcdTmHoldingPriority, mscAtmIfVptVccVcdTmRxPacketWiseDiscard=mscAtmIfVptVccVcdTmRxPacketWiseDiscard, mscAtmIfCARtVbrSvcHoldingPriority=mscAtmIfCARtVbrSvcHoldingPriority, mscAtmIfRowStatus=mscAtmIfRowStatus, mscAtmIfVpcVpdTmAbrMaxCellPerRmCell=mscAtmIfVpcVpdTmAbrMaxCellPerRmCell, mscAtmIfVptVpdFqpValue=mscAtmIfVptVpdFqpValue, mscAtmIfVccVcdEndToEndLoopback=mscAtmIfVccVcdEndToEndLoopback, mscAtmIfVptRxOamCellCongestionState=mscAtmIfVptRxOamCellCongestionState, mscAtmIfRxCell=mscAtmIfRxCell, mscAtmIfVccTxTdpValue=mscAtmIfVccTxTdpValue, mscAtmIfNAcctAccountConnectionType=mscAtmIfNAcctAccountConnectionType, mscAtmIfVptVccTestLoadingFrmRx=mscAtmIfVptVccTestLoadingFrmRx, mscAtmIfVptTxDiscard=mscAtmIfVptTxDiscard, mscAtmIfVccTmAbrAcrDecreaseTimeFactor=mscAtmIfVccTmAbrAcrDecreaseTimeFactor, mscAtmIfVpcVpdRxTdpEntry=mscAtmIfVpcVpdRxTdpEntry, mscAtmIfVptFqpEntry=mscAtmIfVptFqpEntry, mscAtmIfVpcConnInfoTable=mscAtmIfVpcConnInfoTable, mscAtmIfVccPmBwdClrEntry=mscAtmIfVccPmBwdClrEntry, mscAtmIfVptCARowStatusTable=mscAtmIfVptCARowStatusTable, mscAtmIfCACbrTrafficShaping=mscAtmIfCACbrTrafficShaping, mscAtmIfVccTxDiscardClp=mscAtmIfVccTxDiscardClp, mscAtmIfVccBestEffort=mscAtmIfVccBestEffort, mscAtmIfVpcTmAbrRowStatusTable=mscAtmIfVpcTmAbrRowStatusTable, mscAtmIfVptVpdTmAbrConnectionType=mscAtmIfVptVpdTmAbrConnectionType, mscAtmIfCANrtVbrHoldingPriority=mscAtmIfCANrtVbrHoldingPriority, mscAtmIfVpcVpdPmRowStatusTable=mscAtmIfVpcVpdPmRowStatusTable, mscAtmIfVpcHoldingPriority=mscAtmIfVpcHoldingPriority, mscAtmIfLastLrcFrameErrorConnection=mscAtmIfLastLrcFrameErrorConnection, mscAtmIfVccTroubled=mscAtmIfVccTroubled, mscAtmIfRxCellEfci=mscAtmIfRxCellEfci, mscAtmIfCAPoolWaitAdmConnsValue=mscAtmIfCAPoolWaitAdmConnsValue, mscAtmIfVccTxTrafficDescType=mscAtmIfVccTxTrafficDescType, mscAtmIfVpcOperTable=mscAtmIfVpcOperTable, mscAtmIfVptVccVcdTmAtmServiceCategory=mscAtmIfVptVccVcdTmAtmServiceCategory, mscAtmIfVptVccFqpEntry=mscAtmIfVptVccFqpEntry, mscAtmIfVpcTmBearerClassBbc=mscAtmIfVpcTmBearerClassBbc, mscAtmIfVpcPmFwdLastSampleClr0=mscAtmIfVpcPmFwdLastSampleClr0, mscAtmIfVccVcdTmAbrRowStatus=mscAtmIfVccVcdTmAbrRowStatus, mscAtmIfStorageType=mscAtmIfStorageType, mscAtmIfVpcStatsRxUpcViolationOnEnforcer1=mscAtmIfVpcStatsRxUpcViolationOnEnforcer1, mscAtmIfVccPmBwdMinimumClr0=mscAtmIfVccPmBwdMinimumClr0, mscAtmIfVptVpdTmAbrInitialCellRate=mscAtmIfVptVpdTmAbrInitialCellRate, mscAtmIfVpcTm=mscAtmIfVpcTm, mscAtmIfShapeUsageIndex=mscAtmIfShapeUsageIndex, mscAtmIfVccVcdTmAbrRowStatusTable=mscAtmIfVccVcdTmAbrRowStatusTable, mscAtmIfVptVccTestComponentName=mscAtmIfVptVccTestComponentName, mscAtmIfVptVccTmBandwidthElastic=mscAtmIfVptVccTmBandwidthElastic, mscAtmIfVccTmTxPacketWiseDiscard=mscAtmIfVccTmTxPacketWiseDiscard, mscAtmIfVptVccTmAbrFixedRoundTripTime=mscAtmIfVptVccTmAbrFixedRoundTripTime, mscAtmIfVccPmBwdTotalUserCellsRx0=mscAtmIfVccPmBwdTotalUserCellsRx0, mscAtmIfVptTmAbrFixedRoundTripTime=mscAtmIfVptTmAbrFixedRoundTripTime, mscAtmIfVccStatsRxFrameDiscard=mscAtmIfVccStatsRxFrameDiscard, mscAtmIfCAMaxVpts=mscAtmIfCAMaxVpts, mscAtmIfCARtVbrTrafficShaping=mscAtmIfCARtVbrTrafficShaping, mscAtmIfVptVccVcdTmWeight=mscAtmIfVptVccVcdTmWeight, mscAtmIfVptVccVcdTmTxTdpIndex=mscAtmIfVptVccVcdTmTxTdpIndex, mscAtmIfVccPmFwdTotalUserCellsTx0=mscAtmIfVccPmFwdTotalUserCellsTx0, mscAtmIfVptVpdTmAbrFixedRoundTripTime=mscAtmIfVptVpdTmAbrFixedRoundTripTime, mscAtmIfVpcFqpValue=mscAtmIfVpcFqpValue, mscAtmIfVpcVpd=mscAtmIfVpcVpd, mscAtmIfCARtVbrProvTable=mscAtmIfCARtVbrProvTable, mscAtmIfVccTestVerificationFrmRx=mscAtmIfVccTestVerificationFrmRx, mscAtmIfVpcTmRowStatus=mscAtmIfVpcTmRowStatus, mscAtmIfVptCAPoolAvailBwIndex=mscAtmIfVptCAPoolAvailBwIndex, mscAtmIfVpcTmTxTdpTable=mscAtmIfVpcTmTxTdpTable, mscAtmIfCAConnectionPoolUsage=mscAtmIfCAConnectionPoolUsage, mscAtmIfCABwPoolTable=mscAtmIfCABwPoolTable, mscAtmIfVccVcdPmSegLinkSideMeasurement=mscAtmIfVccVcdPmSegLinkSideMeasurement, mscAtmIfVccTmTxQThreshIndex=mscAtmIfVccTmTxQThreshIndex, mscAtmIfVptTmIndex=mscAtmIfVptTmIndex, mscAtmIfVccTestRowStatusTable=mscAtmIfVccTestRowStatusTable, mscAtmIfVptBestEffort=mscAtmIfVptBestEffort, mscAtmIfVpcPmBwdPmCellDiscardCount=mscAtmIfVpcPmBwdPmCellDiscardCount, mscAtmIfVptVpdTmStorageType=mscAtmIfVptVpdTmStorageType, mscAtmIfVccVcdPmProvTable=mscAtmIfVccVcdPmProvTable, mscAtmIfVpcVpdAtmServiceCategory=mscAtmIfVpcVpdAtmServiceCategory, mscAtmIfVptVccTmAbrRowStatusTable=mscAtmIfVptVccTmAbrRowStatusTable, mscAtmIfVpcPmBwdLastSampleUserCellsTx01=mscAtmIfVpcPmBwdLastSampleUserCellsTx01)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfCAUbrMaxVccs=mscAtmIfCAUbrMaxVccs, mscAtmIfCACbrMinPerVcQueueLimit=mscAtmIfCACbrMinPerVcQueueLimit, mscAtmIfVptVpdTrafficEntry=mscAtmIfVptVpdTrafficEntry, mscAtmIfVptVpdTmBqpValue=mscAtmIfVptVpdTmBqpValue, mscAtmIfVptTmTqpValue=mscAtmIfVptTmTqpValue, mscAtmIfNAcctStorageType=mscAtmIfNAcctStorageType, mscAtmIfVptVpdTmProvTable=mscAtmIfVptVpdTmProvTable, mscAtmIfVpcBqpTable=mscAtmIfVpcBqpTable, mscAtmIfVccTmTxQueueCongestionState=mscAtmIfVccTmTxQueueCongestionState, mscAtmIfCARtVbrPool=mscAtmIfCARtVbrPool, mscAtmIfVptCAPoolRequBwTable=mscAtmIfVptCAPoolRequBwTable, mscAtmIfVpcTmAbrTransientBufferExposure=mscAtmIfVpcTmAbrTransientBufferExposure, mscAtmIfVptVccTmTxPacketWiseDiscard=mscAtmIfVptVccTmTxPacketWiseDiscard, mscAtmIfVpcVpdTmAbrDgcraMaximumDelay=mscAtmIfVpcVpdTmAbrDgcraMaximumDelay, mscAtmIfVptTmRowStatusTable=mscAtmIfVptTmRowStatusTable, mscAtmIfCACbrCdv=mscAtmIfCACbrCdv, mscAtmIfVptVccTxQThreshTable=mscAtmIfVptVccTxQThreshTable, mscAtmIfVpcTmAbrComponentName=mscAtmIfVpcTmAbrComponentName, mscAtmIfCAMinAutoSelectedVciForVpiZero=mscAtmIfCAMinAutoSelectedVciForVpiZero, mscAtmIfVccPmCurrentAvailabilityStatus=mscAtmIfVccPmCurrentAvailabilityStatus, mscAtmIfVpcVpdPmIndex=mscAtmIfVpcVpdPmIndex, mscAtmIfVccRowStatusEntry=mscAtmIfVccRowStatusEntry, mscAtmIfVpcTxTdpEntry=mscAtmIfVpcTxTdpEntry, mscAtmIfVccVcdTmAbrProvEntry=mscAtmIfVccVcdTmAbrProvEntry, mscAtmIfCAUbrCdvt=mscAtmIfCAUbrCdvt, mscAtmIfVptVccUnshapedTransmitQueueing=mscAtmIfVptVccUnshapedTransmitQueueing, mscAtmIfVptCACbrRowStatusEntry=mscAtmIfVptCACbrRowStatusEntry, mscAtmIfConnMapOvProvTable=mscAtmIfConnMapOvProvTable, mscAtmIfVptStatsRxAal5FrameError=mscAtmIfVptStatsRxAal5FrameError, mscAtmIfVpcVpdTmRxTdpEntry=mscAtmIfVpcVpdTmRxTdpEntry, mscAtmIfConnMapIndex=mscAtmIfConnMapIndex, mscAtmIfCARtVbr=mscAtmIfCARtVbr, mscAtmIfVpcPmFwdMaximumClr0=mscAtmIfVpcPmFwdMaximumClr0, mscAtmIfVptRxTdpValue=mscAtmIfVptRxTdpValue, mscAtmIfVccVcdTmAbrCutoffDecreaseFactor=mscAtmIfVccVcdTmAbrCutoffDecreaseFactor, mscAtmIfVccLastCtdSampleSize=mscAtmIfVccLastCtdSampleSize, mscAtmIfVptVccVcdSegLinkSideLoopback=mscAtmIfVptVccVcdSegLinkSideLoopback, mscAtmIfVptVccTestAdminState=mscAtmIfVptVccTestAdminState, mscAtmIfVptVccVcdLbkEntry=mscAtmIfVptVccVcdLbkEntry, mscAtmIfVptVccVcdPmSegSwitchSideMeasurement=mscAtmIfVptVccVcdPmSegSwitchSideMeasurement, mscAtmIfConnMapOvProvEntry=mscAtmIfConnMapOvProvEntry, mscAtmIfVccTestStateTable=mscAtmIfVccTestStateTable, mscAtmIfVptVccVcdTmAbrRateDecreaseFactor=mscAtmIfVptVccVcdTmAbrRateDecreaseFactor, mscAtmIfVptVccLocalFailureCause=mscAtmIfVptVccLocalFailureCause, mscAtmIfVptVccTmAbrOperEntry=mscAtmIfVptVccTmAbrOperEntry, mscAtmIfCAVbrNrtPool=mscAtmIfCAVbrNrtPool, mscAtmIfVpcVpdTmBqpIndex=mscAtmIfVpcVpdTmBqpIndex, mscAtmIfVptStatsTable=mscAtmIfVptStatsTable, mscAtmIfVpcVpdTmAbrRowStatus=mscAtmIfVpcVpdTmAbrRowStatus, mscAtmIfVccVcdPm=mscAtmIfVccVcdPm, mscAtmIfVptTmRqpTable=mscAtmIfVptTmRqpTable, mscAtmIfVptCAPoolRequBwEntry=mscAtmIfVptCAPoolRequBwEntry, mscAtmIfVpcVpdPmSegSwitchSideMeasurement=mscAtmIfVpcVpdPmSegSwitchSideMeasurement, mscAtmIfVptCAProvEntry=mscAtmIfVptCAProvEntry, mscAtmIfVptVpdTmRxTdpTable=mscAtmIfVptVpdTmRxTdpTable, mscAtmIfVpcVpdTmTxTdpValue=mscAtmIfVpcVpdTmTxTdpValue, mscAtmIfVptVccTmRxQosClass=mscAtmIfVptVccTmRxQosClass, mscAtmIfVccTmTrafficShaping=mscAtmIfVccTmTrafficShaping, mscAtmIfVpcTmBandwidthReduction=mscAtmIfVpcTmBandwidthReduction, mscAtmIfVccConnectionPointType=mscAtmIfVccConnectionPointType, mscAtmIfVccVcdTmBestEffort=mscAtmIfVccVcdTmBestEffort, mscAtmIfVccVcdClippingBbc=mscAtmIfVccVcdClippingBbc, mscAtmIfVptTmUnshapedTransmitQueueing=mscAtmIfVptTmUnshapedTransmitQueueing, mscAtmIfCAUbrOperEntry=mscAtmIfCAUbrOperEntry, mscAtmIfVptStatsRxUpcViolationOnEnforcer1=mscAtmIfVptStatsRxUpcViolationOnEnforcer1, mscAtmIfVccCallDirection=mscAtmIfVccCallDirection, mscAtmIfVptVccVcd=mscAtmIfVptVccVcd, mscAtmIfTrafficShaping=mscAtmIfTrafficShaping, mscAtmIfCAIndex=mscAtmIfCAIndex, mscAtmIfVptVccStatsRxCellClp=mscAtmIfVptVccStatsRxCellClp, mscAtmIfVccTestResultsTable=mscAtmIfVccTestResultsTable, mscAtmIfVccVcdTmUsageParameterControl=mscAtmIfVccVcdTmUsageParameterControl, mscAtmIfVccTmTxQThreshEntry=mscAtmIfVccTmTxQThreshEntry, mscAtmIfVptVpdCorrelationTag=mscAtmIfVptVpdCorrelationTag, mscAtmIfVptVccStatsRxAal5FrameAbort=mscAtmIfVptVccStatsRxAal5FrameAbort, mscAtmIfVccRxDiscard=mscAtmIfVccRxDiscard, mscAtmIfVptCAConnectionPoolUsage=mscAtmIfVptCAConnectionPoolUsage, mscAtmIfCACbrProvClr=mscAtmIfCACbrProvClr, mscAtmIfVptIndex=mscAtmIfVptIndex, mscAtmIfCARtVbrIndex=mscAtmIfCARtVbrIndex, mscAtmIfVccVcdPmProvEntry=mscAtmIfVccVcdPmProvEntry, mscAtmIfVptHoldingPriority=mscAtmIfVptHoldingPriority, mscAtmIfCAProvEntry=mscAtmIfCAProvEntry, mscAtmIfVpcPerfTable=mscAtmIfVpcPerfTable, mscAtmIfNAcctRowStatus=mscAtmIfNAcctRowStatus, mscAtmIfVpcVpdTmAbrDgcraMinimumDelay=mscAtmIfVpcVpdTmAbrDgcraMinimumDelay, mscAtmIfVptTmTxQueueLength=mscAtmIfVptTmTxQueueLength, mscAtmIfVpcTransferCapabilityBbc=mscAtmIfVpcTransferCapabilityBbc, mscAtmIfVptVccVcdAtmServiceCategory=mscAtmIfVptVccVcdAtmServiceCategory, mscAtmIfVptCAUbrVccUsage=mscAtmIfVptCAUbrVccUsage, mscAtmIfVptVccStatsTxCellClp=mscAtmIfVptVccStatsTxCellClp, mscAtmIfVptVccTestSetupTable=mscAtmIfVptVccTestSetupTable, mscAtmIfTxLinkUtilization=mscAtmIfTxLinkUtilization, mscAtmIfVpcTmRxQosClass=mscAtmIfVpcTmRxQosClass, mscAtmIfVptSegLinkSideLoopbackState=mscAtmIfVptSegLinkSideLoopbackState, mscAtmIfVccVcdBqpValue=mscAtmIfVccVcdBqpValue, mscAtmIfVptVpdBqpEntry=mscAtmIfVptVpdBqpEntry, mscAtmIfVptVccRxTrafficDescType=mscAtmIfVptVccRxTrafficDescType, mscAtmIfVptVccTmTxTdpValue=mscAtmIfVptVccTmTxTdpValue, mscAtmIfVptTmAbrOperTable=mscAtmIfVptTmAbrOperTable, mscAtmIfVptVccVcdTmAbrProvEntry=mscAtmIfVptVccVcdTmAbrProvEntry, mscAtmIfVccPmIndex=mscAtmIfVccPmIndex, mscAtmIfVpcBestEffort=mscAtmIfVpcBestEffort, mscAtmIfVpcTrafficEntry=mscAtmIfVpcTrafficEntry, mscAtmIfVptVpdTmBwdQosClass=mscAtmIfVptVpdTmBwdQosClass, mscAtmIfVptVccVcdTxTdpIndex=mscAtmIfVptVccVcdTxTdpIndex, mscAtmIfVccVcdPmStorageType=mscAtmIfVccVcdPmStorageType, mscAtmIfCAAbrPool=mscAtmIfCAAbrPool, mscAtmIfVpcTmHoldingPriority=mscAtmIfVpcTmHoldingPriority, mscAtmIfVpcVpdAcctTable=mscAtmIfVpcVpdAcctTable, mscAtmIfCASwitchedMulticastBranches=mscAtmIfCASwitchedMulticastBranches, mscAtmIfCARtVbrEpdOffset=mscAtmIfCARtVbrEpdOffset, mscAtmIfVpcEndToEndLoopbackState=mscAtmIfVpcEndToEndLoopbackState, mscAtmIfCAPoolAvailableBwTable=mscAtmIfCAPoolAvailableBwTable, mscAtmIfVccTestBytesRx=mscAtmIfVccTestBytesRx, mscAtmIfVptVccTmAbr=mscAtmIfVptVccTmAbr, mscAtmIfVpcLastMinimumCtd=mscAtmIfVpcLastMinimumCtd, mscAtmIfVpcStorageType=mscAtmIfVpcStorageType, mscAtmIfCACbrTxQueueLimit=mscAtmIfCACbrTxQueueLimit, mscAtmIfVpcVpdTmFqpTable=mscAtmIfVpcVpdTmFqpTable, mscAtmIfVptTmRqpIndex=mscAtmIfVptTmRqpIndex, mscAtmIfVpcTmComponentName=mscAtmIfVpcTmComponentName, mscAtmIfVpcLastAverageCtd=mscAtmIfVpcLastAverageCtd, mscAtmIfVccVcdTmAbrComponentName=mscAtmIfVccVcdTmAbrComponentName, mscAtmIfCAAbrHoldingPriority=mscAtmIfCAAbrHoldingPriority, mscAtmIfVptTmAbrIndex=mscAtmIfVptTmAbrIndex, mscAtmIfVccBqpValue=mscAtmIfVccBqpValue, mscAtmIfVptVccBandwidthReduction=mscAtmIfVptVccBandwidthReduction, mscAtmIfVpcTxDiscardClp=mscAtmIfVpcTxDiscardClp, mscAtmIfVptVpdTmAbrRateDecreaseFactor=mscAtmIfVptVpdTmAbrRateDecreaseFactor, mscAtmIfCAAbrOperTable=mscAtmIfCAAbrOperTable, mscAtmIfVpcPmFwdClrEntry=mscAtmIfVpcPmFwdClrEntry, mscAtmIfCACbrProvEntry=mscAtmIfCACbrProvEntry, mscAtmIfVccVcdBqpTable=mscAtmIfVccVcdBqpTable, mscAtmIfVptVpdTmBestEffort=mscAtmIfVptVpdTmBestEffort, mscAtmIfVccRxTrafficDescType=mscAtmIfVccRxTrafficDescType, mscAtmIfVccVcdTxTdpEntry=mscAtmIfVccVcdTxTdpEntry, mscAtmIfVccClippingBbc=mscAtmIfVccClippingBbc, mscAtmIfCAPoolProvBwValue=mscAtmIfCAPoolProvBwValue, mscAtmIfVptVccOperTable=mscAtmIfVptVccOperTable, mscAtmIfVptCANrtVbrIndex=mscAtmIfVptCANrtVbrIndex, mscAtmIfVpcVpdTmBearerClassBbc=mscAtmIfVpcVpdTmBearerClassBbc, mscAtmIfVptVccTxQueueCongestionState=mscAtmIfVptVccTxQueueCongestionState, mscAtmIfVccUsageState=mscAtmIfVccUsageState, mscAtmIfVptVccVcdBqpIndex=mscAtmIfVptVccVcdBqpIndex, mscAtmIfVpcPmBwdTotalUserCellsRx0=mscAtmIfVpcPmBwdTotalUserCellsRx0, mscAtmIfVptVccTmRowStatusEntry=mscAtmIfVptVccTmRowStatusEntry, mscAtmIfVpcVpdTmAbrProvTable=mscAtmIfVpcVpdTmAbrProvTable, mscAtmIfVpcLoop=mscAtmIfVpcLoop, mscAtmIfVptTxQThreshIndex=mscAtmIfVptTxQThreshIndex, mscAtmIfVptVccVcdPmStorageType=mscAtmIfVptVccVcdPmStorageType, mscAtmIfVpcTmRxTdpEntry=mscAtmIfVpcTmRxTdpEntry, mscAtmIfVptVccTxQosClass=mscAtmIfVptVccTxQosClass, mscAtmIfVptCACbr=mscAtmIfVptCACbr, mscAtmIfVccVcdTmAbrRateIncreaseFactor=mscAtmIfVccVcdTmAbrRateIncreaseFactor, mscAtmIfVccTmBestEffort=mscAtmIfVccTmBestEffort, mscAtmIfCAPoolAvailBwTable=mscAtmIfCAPoolAvailBwTable, mscAtmIfVccTmHoldingPriority=mscAtmIfVccTmHoldingPriority, mscAtmIfVptCANrtVbrRowStatus=mscAtmIfVptCANrtVbrRowStatus, mscAtmIfVptCACbrCdvt=mscAtmIfVptCACbrCdvt, mscAtmIfCAUbrTxQueueLimit=mscAtmIfCAUbrTxQueueLimit, mscAtmIfVccVcdSegSwitchSideLoopback=mscAtmIfVccVcdSegSwitchSideLoopback, mscAtmIfVptVccBqpValue=mscAtmIfVptVccBqpValue, mscAtmIfVptCAMaxVccs=mscAtmIfVptCAMaxVccs, mscAtmIfVptRxTdpEntry=mscAtmIfVptRxTdpEntry, mscAtmIfVptCARtVbrPool=mscAtmIfVptCARtVbrPool, mscAtmIfVccVcdTmRxTdpTable=mscAtmIfVccVcdTmRxTdpTable, mscAtmIfVpcStatsTxCell=mscAtmIfVpcStatsTxCell, mscAtmIfVptVccTestRowStatusEntry=mscAtmIfVptVccTestRowStatusEntry, mscAtmIfVptBqpTable=mscAtmIfVptBqpTable, mscAtmIfVpcVpdTxTdpValue=mscAtmIfVpcVpdTxTdpValue, mscAtmIfVpcRdiState=mscAtmIfVpcRdiState, mscAtmIfCAPoolAvailableBwIndex=mscAtmIfCAPoolAvailableBwIndex, mscAtmIfVptVccVcdFqpEntry=mscAtmIfVptVccVcdFqpEntry, mscAtmIfVccRdiState=mscAtmIfVccRdiState, mscAtmIfVpcTmAbrOperEntry=mscAtmIfVpcTmAbrOperEntry, mscAtmIfVpcVpdPmRowStatusEntry=mscAtmIfVpcVpdPmRowStatusEntry, mscAtmIfVptVccVcdTrafficShaping=mscAtmIfVptVccVcdTrafficShaping, mscAtmIfVptVccTmComponentName=mscAtmIfVptVccTmComponentName, mscAtmIfCARtVbrComponentName=mscAtmIfCARtVbrComponentName, mscAtmIfVptVccTestFrmTypes=mscAtmIfVptVccTestFrmTypes, mscAtmIfVptVpdTmRxTdpValue=mscAtmIfVptVpdTmRxTdpValue, mscAtmIfVptVpdAcctTable=mscAtmIfVptVpdAcctTable, mscAtmIfConnMapOvComponentName=mscAtmIfConnMapOvComponentName, mscAtmIfVccPmFwdTotalClrInterval=mscAtmIfVccPmFwdTotalClrInterval, mscAtmIfVptVpdTmProvEntry=mscAtmIfVptVpdTmProvEntry, mscAtmIfVptVpdVptType=mscAtmIfVptVpdVptType, mscAtmIfCAVbrRtCellLossRatio=mscAtmIfCAVbrRtCellLossRatio, mscAtmIfVccPmFwdLastSampleClr0=mscAtmIfVccPmFwdLastSampleClr0, mscAtmIfVptVccVcdBearerClassBbc=mscAtmIfVptVccVcdBearerClassBbc, mscAtmIfCACbrShapeRecoupPolicy=mscAtmIfCACbrShapeRecoupPolicy, mscAtmIfVpcComponentName=mscAtmIfVpcComponentName, mscAtmIfVptTmAbrTxRateChangeInfo=mscAtmIfVptTmAbrTxRateChangeInfo, mscAtmIfCANrtVbrComponentName=mscAtmIfCANrtVbrComponentName, mscAtmIfVptVccTxDiscardClp=mscAtmIfVptVccTxDiscardClp, mscAtmIfVpcTxTdpIndex=mscAtmIfVpcTxTdpIndex, mscAtmIfCANrtVbrTrafficShaping=mscAtmIfCANrtVbrTrafficShaping, mscAtmIfVptVpdTmFqpValue=mscAtmIfVptVpdTmFqpValue, mscAtmIfVpcPmFwdPmCellDiscardCount=mscAtmIfVpcPmFwdPmCellDiscardCount, mscAtmIfCAUbrMaxVpts=mscAtmIfCAUbrMaxVpts, mscAtmIfVccTmAtmServiceCategory=mscAtmIfVccTmAtmServiceCategory, mscAtmIfVpcPmBwdMinimumClr0=mscAtmIfVpcPmBwdMinimumClr0, mscAtmIfVpcVpdTmAbrFarEndInitialCellRate=mscAtmIfVpcVpdTmAbrFarEndInitialCellRate, mscAtmIfVccRxOamCellCongestionState=mscAtmIfVccRxOamCellCongestionState, mscAtmIfVccVcdPmComponentName=mscAtmIfVccVcdPmComponentName, mscAtmIfVptTmAbrRateIncreaseFactor=mscAtmIfVptTmAbrRateIncreaseFactor, mscAtmIfVptBwdQosClass=mscAtmIfVptBwdQosClass, mscAtmIfVpcStatsTable=mscAtmIfVpcStatsTable, mscAtmIfVccOperStatus=mscAtmIfVccOperStatus, mscAtmIfVptVccVcdTmAbrRateIncreaseFactor=mscAtmIfVptVccVcdTmAbrRateIncreaseFactor, mscAtmIfVpcLoopRowStatusTable=mscAtmIfVpcLoopRowStatusTable, mscAtmIfVccVcdUsageParameterControl=mscAtmIfVccVcdUsageParameterControl, mscAtmIfVptVccVcdTmAbrProvTable=mscAtmIfVptVccVcdTmAbrProvTable, mscAtmIfVptTmAbrMaxCellPerRmCell=mscAtmIfVptTmAbrMaxCellPerRmCell, mscAtmIfStandbyStatus=mscAtmIfStandbyStatus, mscAtmIfVccVcdTmProvEntry=mscAtmIfVccVcdTmProvEntry, mscAtmIfVpcVpdTmBqpTable=mscAtmIfVpcVpdTmBqpTable, mscAtmIfVptVpdTmTxPacketWiseDiscard=mscAtmIfVptVpdTmTxPacketWiseDiscard, mscAtmIfVptCAAbrPool=mscAtmIfVptCAAbrPool, mscAtmIfVptVccStatsTxFrameDiscardClp=mscAtmIfVptVccStatsTxFrameDiscardClp, mscAtmIfVptCATroubledVccs=mscAtmIfVptCATroubledVccs, mscAtmIfVccPmBwdTotalUserCellsRx01=mscAtmIfVccPmBwdTotalUserCellsRx01, mscAtmIfVptTmRxQosClass=mscAtmIfVptTmRxQosClass, mscAtmIfVccLocalFailureCause=mscAtmIfVccLocalFailureCause, mscAtmIfVptVccVcdPmComponentName=mscAtmIfVptVccVcdPmComponentName, mscAtmIfDroppedRxCells=mscAtmIfDroppedRxCells, mscAtmIfCANrtVbrRowStatusTable=mscAtmIfCANrtVbrRowStatusTable, mscAtmIfVpcTrafficShaping=mscAtmIfVpcTrafficShaping, mscAtmIfVpcRowStatusTable=mscAtmIfVpcRowStatusTable, mscAtmIfVptCANrtVbr=mscAtmIfVptCANrtVbr, mscAtmIfVpcDistributionType=mscAtmIfVpcDistributionType, mscAtmIfVpcStatsRxAal5FrameAbort=mscAtmIfVpcStatsRxAal5FrameAbort, mscAtmIfCACbrRowStatus=mscAtmIfCACbrRowStatus, mscAtmIfCARtVbrProvEntry=mscAtmIfCARtVbrProvEntry, mscAtmIfVccVcdTmAbrInitialCellRate=mscAtmIfVccVcdTmAbrInitialCellRate, mscAtmIfVptVpdRowStatusEntry=mscAtmIfVptVpdRowStatusEntry, mscAtmIfVpcVpdPmProvEntry=mscAtmIfVpcVpdPmProvEntry, mscAtmIfVccTmBandwidthElastic=mscAtmIfVccTmBandwidthElastic, mscAtmIfVpcVpdTmAbrIndex=mscAtmIfVpcVpdTmAbrIndex, mscAtmIfVptVpdTmAbr=mscAtmIfVptVpdTmAbr, mscAtmIfVptVccVcdTmAbrMaxTimeBetweenRmCells=mscAtmIfVptVccVcdTmAbrMaxTimeBetweenRmCells, mscAtmIfVpcVpdTmTxTdpTable=mscAtmIfVpcVpdTmTxTdpTable, mscAtmIfVptVccVcdRxTdpIndex=mscAtmIfVptVccVcdRxTdpIndex, mscAtmIfVpcVpdTrafficShaping=mscAtmIfVpcVpdTrafficShaping, mscAtmIfVpcTmTxQThreshEntry=mscAtmIfVpcTmTxQThreshEntry, mscAtmIfAlarmStatus=mscAtmIfAlarmStatus, mscAtmIfVpcPmBwdLastSampleClr0=mscAtmIfVpcPmBwdLastSampleClr0, mscAtmIfVptVccTxQThreshIndex=mscAtmIfVptVccTxQThreshIndex, mscAtmIfVptVccNepRowStatusEntry=mscAtmIfVptVccNepRowStatusEntry, mscAtmIfVptVccVcdFwdQosClass=mscAtmIfVptVccVcdFwdQosClass, mscAtmIfVpcStatsTxCellDiscardClp=mscAtmIfVpcStatsTxCellDiscardClp, mscAtmIfVptVpdTmRxPacketWiseDiscard=mscAtmIfVptVpdTmRxPacketWiseDiscard, mscAtmIfVccVcdTmRowStatus=mscAtmIfVccVcdTmRowStatus, mscAtmIfVccTmAbrMaxTimeBetweenRmCell=mscAtmIfVccTmAbrMaxTimeBetweenRmCell)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", mscAtmIfVptCAUbrIndex=mscAtmIfVptCAUbrIndex, mscAtmIfNAcctServiceExchange=mscAtmIfNAcctServiceExchange, mscAtmIfVptVccTmOperTable=mscAtmIfVptVccTmOperTable, mscAtmIfVptLocalFailureCause=mscAtmIfVptLocalFailureCause, mscAtmIfVptVpdTmIndex=mscAtmIfVptVpdTmIndex, mscAtmIfVccTestStorageType=mscAtmIfVccTestStorageType, mscAtmIfVccVcdTmFqpEntry=mscAtmIfVccVcdTmFqpEntry, mscAtmIfVpcPmBwdAverageClr0=mscAtmIfVpcPmBwdAverageClr0, mscAtmIfVpcVpdBestEffort=mscAtmIfVpcVpdBestEffort, mscAtmIfVpcTmRowStatusTable=mscAtmIfVpcTmRowStatusTable, mscAtmIfConnMapOvNumVccsForVpiZero=mscAtmIfConnMapOvNumVccsForVpiZero, mscAtmIfCABwPoolEntry=mscAtmIfCABwPoolEntry, mscAtmIfVptVccTestStorageType=mscAtmIfVptVccTestStorageType, mscAtmIfVpcTmOperTable=mscAtmIfVpcTmOperTable, mscAtmIfVptStatsTxCellClp=mscAtmIfVptStatsTxCellClp, mscAtmIfVptVpd=mscAtmIfVptVpd, mscAtmIfAvailabilityStatus=mscAtmIfAvailabilityStatus, mscAtmIfVptCAOperTable=mscAtmIfVptCAOperTable, mscAtmIfVpcStatsRxCell=mscAtmIfVpcStatsRxCell, mscAtmIfVptVccTmAbrOperTable=mscAtmIfVptVccTmAbrOperTable, mscAtmIfVptVpdComponentName=mscAtmIfVptVpdComponentName, mscAtmIfVptVccLoopIndex=mscAtmIfVptVccLoopIndex, mscAtmIfVptVccTestBytesRx=mscAtmIfVptVccTestBytesRx, mscAtmIfConnMapOvRowStatusTable=mscAtmIfConnMapOvRowStatusTable, mscAtmIfVptVccTestVerificationFrmRx=mscAtmIfVptVccTestVerificationFrmRx, mscAtmIfVpcVpdTxTrafficDescType=mscAtmIfVpcVpdTxTrafficDescType, mscAtmIfVptVccVcdTxTrafficDescType=mscAtmIfVptVccVcdTxTrafficDescType, mscAtmIfVccTestFrmTypes=mscAtmIfVccTestFrmTypes, mscAtmIfVccPmFwdLastSampleUserCellsTx0=mscAtmIfVccPmFwdLastSampleUserCellsTx0, mscAtmIfVptVccTmTxTdpTable=mscAtmIfVptVccTmTxTdpTable, mscAtmIfVpcFwdQosClass=mscAtmIfVpcFwdQosClass, mscAtmIfVptVccTmAbrIndex=mscAtmIfVptVccTmAbrIndex, mscAtmIfVpcRxTdpEntry=mscAtmIfVpcRxTdpEntry, mscAtmIfVpcTmTxTdpEntry=mscAtmIfVpcTmTxTdpEntry, mscAtmIfVptVccVcdTxTdpTable=mscAtmIfVptVccVcdTxTdpTable, mscAtmIfVptVccTrafficShaping=mscAtmIfVptVccTrafficShaping, mscAtmIfMaxVpcs=mscAtmIfMaxVpcs, mscAtmIfVptTmOperEntry=mscAtmIfVptTmOperEntry, mscAtmIfVccVcdBestEffort=mscAtmIfVccVcdBestEffort, mscAtmIfVptVccTestOperationalState=mscAtmIfVptVccTestOperationalState, mscAtmIfVptVccTmTxQThreshIndex=mscAtmIfVptVccTmTxQThreshIndex, mscAtmIfCASvcCbrHoldingPriority=mscAtmIfCASvcCbrHoldingPriority, mscAtmIfVpcStatsRxCellDiscard=mscAtmIfVpcStatsRxCellDiscard, mscAtmIfEpStorageType=mscAtmIfEpStorageType, mscAtmIfVptTmAbrRateDecreaseFactor=mscAtmIfVptTmAbrRateDecreaseFactor, mscAtmIfVpcLoopComponentName=mscAtmIfVpcLoopComponentName, mscAtmIfVptBandwidthElastic=mscAtmIfVptBandwidthElastic, mscAtmIfVptRowStatus=mscAtmIfVptRowStatus, mscAtmIfOperTable=mscAtmIfOperTable, mscAtmIfVccVcdSegLinkSideLoopback=mscAtmIfVccVcdSegLinkSideLoopback, mscAtmIfCAMaxCaVpts=mscAtmIfCAMaxCaVpts, mscAtmIfVpcSegSwitchSideLoopbackState=mscAtmIfVpcSegSwitchSideLoopbackState, mscAtmIfVccTmComponentName=mscAtmIfVccTmComponentName, mscAtmIfMaxVpiBits=mscAtmIfMaxVpiBits, mscAtmIfCACbrRowStatusEntry=mscAtmIfCACbrRowStatusEntry, mscAtmIfNAcctComponentName=mscAtmIfNAcctComponentName, mscAtmIfVptVccTmRxTrafficDescType=mscAtmIfVptVccTmRxTrafficDescType, mscAtmIfVptVpdTxTdpTable=mscAtmIfVptVpdTxTdpTable, mscAtmIfVptVccVcdTmFqpEntry=mscAtmIfVptVccVcdTmFqpEntry, mscAtmIfVpcBandwidthElastic=mscAtmIfVpcBandwidthElastic, mscAtmIfVpcTxTdpValue=mscAtmIfVpcTxTdpValue, mscAtmIfVptTmAbrRowStatus=mscAtmIfVptTmAbrRowStatus, mscAtmIfVptVccTxFrameDiscard=mscAtmIfVptVccTxFrameDiscard, mscAtmIfCAPmEntry=mscAtmIfCAPmEntry, mscAtmIfVptVpdRxTdpEntry=mscAtmIfVptVpdRxTdpEntry, mscAtmIfCtdCalculation=mscAtmIfCtdCalculation, mscAtmIfVptCACbrStorageType=mscAtmIfVptCACbrStorageType, mscAtmIfVptVccVcdSegSwitchSideLoopback=mscAtmIfVptVccVcdSegSwitchSideLoopback, mscAtmIfVccVcdTmBwdQosClass=mscAtmIfVccVcdTmBwdQosClass, mscAtmIfVptTmTxQueueCongestionState=mscAtmIfVptTmTxQueueCongestionState, mscAtmIfVccPmBwdMaximumClr0=mscAtmIfVccPmBwdMaximumClr0, mscAtmIfVptVccRxTdpTable=mscAtmIfVptVccRxTdpTable, mscAtmIfCAAbrProvTable=mscAtmIfCAAbrProvTable, mscAtmIfVptVccNepApplicationName=mscAtmIfVptVccNepApplicationName, mscAtmIfVpcVpdTmTxTrafficDescType=mscAtmIfVpcVpdTmTxTrafficDescType, mscAtmIfVccNepRowStatusTable=mscAtmIfVccNepRowStatusTable, mscAtmIfCAPoolAvailBwValue=mscAtmIfCAPoolAvailBwValue, mscAtmIfVptVccNepComponentName=mscAtmIfVptVccNepComponentName, mscAtmIfVptAisState=mscAtmIfVptAisState, mscAtmIfVptTmBandwidthReduction=mscAtmIfVptTmBandwidthReduction, mscAtmIfVptStatsRxCellDiscardClp=mscAtmIfVptStatsRxCellDiscardClp, mscAtmIfVptCANrtVbrCellLossRatio=mscAtmIfVptCANrtVbrCellLossRatio, mscAtmIfVccTmTxTdpEntry=mscAtmIfVccTmTxTdpEntry, mscAtmIfCAUbrVccUsage=mscAtmIfCAUbrVccUsage, mscAtmIfCARtVbrPerVcQueueLimitReferenceRate=mscAtmIfCARtVbrPerVcQueueLimitReferenceRate, mscAtmIfVptVpdTmAbrComponentName=mscAtmIfVptVpdTmAbrComponentName, mscAtmIfVpcTmAbrRowStatus=mscAtmIfVpcTmAbrRowStatus, mscAtmIfVpcVpdTmRowStatus=mscAtmIfVpcVpdTmRowStatus, mscAtmIfVccPmBwdAverageClr0=mscAtmIfVccPmBwdAverageClr0, mscAtmIfVptVccVcdTmTxTdpValue=mscAtmIfVptVccVcdTmTxTdpValue, mscAtmIfVptTxQueueCongestionState=mscAtmIfVptTxQueueCongestionState, mscAtmIfVptVpdTmForceTagging=mscAtmIfVptVpdTmForceTagging, mscAtmIfVptVccTmTxQThreshEntry=mscAtmIfVptVccTmTxQThreshEntry, mscAtmIfVptCAPoolAdmConnsEntry=mscAtmIfVptCAPoolAdmConnsEntry, mscAtmIfVccNepProvTable=mscAtmIfVccNepProvTable, mscAtmIfVccVcdTmAbrRateDecreaseFactor=mscAtmIfVccVcdTmAbrRateDecreaseFactor, mscAtmIfVptVccBqpEntry=mscAtmIfVptVccBqpEntry, mscAtmIfCAUbrTrafficShaping=mscAtmIfCAUbrTrafficShaping, mscAtmIfVccTmTxQueueLength=mscAtmIfVccTmTxQueueLength, mscAtmIfCAMaxVccs=mscAtmIfCAMaxVccs, mscAtmIfVptVccTmAbrMaxTimeBetweenRmCell=mscAtmIfVptVccTmAbrMaxTimeBetweenRmCell, mscAtmIfVpcVpdPmControlMode=mscAtmIfVpcVpdPmControlMode, mscAtmIfVptVpdTmComponentName=mscAtmIfVptVpdTmComponentName, mscAtmIfVptVccVcdIndex=mscAtmIfVptVccVcdIndex, mscAtmIfVccVcdLbkTable=mscAtmIfVccVcdLbkTable, mscAtmIfVptCAAbrComponentName=mscAtmIfVptCAAbrComponentName, mscAtmIfCARowStatusEntry=mscAtmIfCARowStatusEntry, mscAtmIfVccPmFwdPmCellDiscardCount=mscAtmIfVccPmFwdPmCellDiscardCount, mscAtmIfVpcAisState=mscAtmIfVpcAisState, mscAtmIfVptStatsRxCellClp=mscAtmIfVptStatsRxCellClp, mscAtmIfVptVpdTmAbrCutoffDecreaseFactor=mscAtmIfVptVpdTmAbrCutoffDecreaseFactor, mscAtmIfCAUbrProvEntry=mscAtmIfCAUbrProvEntry, mscAtmIfVccTxQThreshValue=mscAtmIfVccTxQThreshValue, mscAtmIfCANrtVbrRowStatus=mscAtmIfCANrtVbrRowStatus, mscAtmIfVccTmRowStatus=mscAtmIfVccTmRowStatus, mscAtmIfNAcctIndex=mscAtmIfNAcctIndex, mscAtmIfEndToEndLoopback=mscAtmIfEndToEndLoopback, mscAtmIfVpcTmTransferCapabilityBbc=mscAtmIfVpcTmTransferCapabilityBbc, mscAtmIfVccTmTqpEntry=mscAtmIfVccTmTqpEntry, mscAtmIfVccComponentName=mscAtmIfVccComponentName, mscAtmIfProceduralStatus=mscAtmIfProceduralStatus, mscAtmIfVptCAPoolWaitAdmConnsValue=mscAtmIfVptCAPoolWaitAdmConnsValue, mscAtmIfVpcVpdTmIndex=mscAtmIfVpcVpdTmIndex, mscAtmIfVpcTmWeight=mscAtmIfVpcTmWeight, mscAtmIfVpcOperationalState=mscAtmIfVpcOperationalState, mscAtmIfVptVpdTmRowStatusTable=mscAtmIfVptVpdTmRowStatusTable, mscAtmIfVpcVpdRowStatusEntry=mscAtmIfVpcVpdRowStatusEntry, mscAtmIfVptVccVcdTmBestEffort=mscAtmIfVptVccVcdTmBestEffort, mscAtmIfVccVcdTxTdpTable=mscAtmIfVccVcdTxTdpTable, mscAtmIfCAPoolProvBwEntry=mscAtmIfCAPoolProvBwEntry, mscAtmIfVpcVpdTxQosClass=mscAtmIfVpcVpdTxQosClass, mscAtmIfVptVccVcdTmProvTable=mscAtmIfVptVccVcdTmProvTable, mscAtmIfVpcRxTdpIndex=mscAtmIfVpcRxTdpIndex, mscAtmIfVptVccTxQThreshValue=mscAtmIfVptVccTxQThreshValue, mscAtmIfCidDataTable=mscAtmIfCidDataTable, mscAtmIfVptRowStatusEntry=mscAtmIfVptRowStatusEntry, mscAtmIfVpcVpdEndToEndLoopback=mscAtmIfVpcVpdEndToEndLoopback, mscAtmIfVpcVpdTmTrafficShaping=mscAtmIfVpcVpdTmTrafficShaping, mscAtmIfVpcVpdPmProvTable=mscAtmIfVpcVpdPmProvTable, atmCoreCapabilitiesCB02=atmCoreCapabilitiesCB02, mscAtmIfVccTxTdpTable=mscAtmIfVccTxTdpTable, mscAtmIfVptVccVcdBqpTable=mscAtmIfVptVccVcdBqpTable, mscAtmIfVptVccTmTxQueueLength=mscAtmIfVptVccTmTxQueueLength, mscAtmIfCAAbrPerVcQueueLimitReferenceRate=mscAtmIfCAAbrPerVcQueueLimitReferenceRate, mscAtmIfConnMap=mscAtmIfConnMap, mscAtmIfVptCARtVbr=mscAtmIfVptCARtVbr, mscAtmIfVpcVpdTmFqpValue=mscAtmIfVpcVpdTmFqpValue, mscAtmIfVptStatusTable=mscAtmIfVptStatusTable, mscAtmIfFaultHoldOffTime=mscAtmIfFaultHoldOffTime, mscAtmIfVptVccVcdRxTrafficDescType=mscAtmIfVptVccVcdRxTrafficDescType, mscAtmIfVptVccVcdRxTdpTable=mscAtmIfVptVccVcdRxTdpTable, mscAtmIfVpcStatusTable=mscAtmIfVpcStatusTable, mscAtmIfVptVccVcdTmComponentName=mscAtmIfVptVccVcdTmComponentName, mscAtmIfVpcVpdPmComponentName=mscAtmIfVpcVpdPmComponentName, mscAtmIfVpcTmBandwidthElastic=mscAtmIfVpcTmBandwidthElastic, mscAtmIfCACbrPool=mscAtmIfCACbrPool, mscAtmIfVccConnInfoEntry=mscAtmIfVccConnInfoEntry, mscAtmIfVpcBqpIndex=mscAtmIfVpcBqpIndex, mscAtmIfVptVccTmAbrRxEfci=mscAtmIfVptVccTmAbrRxEfci, mscAtmIfVptVpdTmTxTdpIndex=mscAtmIfVptVpdTmTxTdpIndex, mscAtmIfVptVpdIndex=mscAtmIfVptVpdIndex, mscAtmIfCAAbrRateDecreaseFactor=mscAtmIfCAAbrRateDecreaseFactor, mscAtmIfAdminState=mscAtmIfAdminState, mscAtmIfVptVccVcdTmRxTdpTable=mscAtmIfVptVccVcdTmRxTdpTable)
