#
# PySNMP MIB module HPNSASOFTWARESUBSYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSASOFTWARESUBSYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, enterprises, NotificationType, Unsigned32, iso, Counter64, TimeTicks, ModuleIdentity, Bits, Integer32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "enterprises", "NotificationType", "Unsigned32", "iso", "Counter64", "TimeTicks", "ModuleIdentity", "Bits", "Integer32", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaSW = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24))
hpnsaSWMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 1))
hpnsaSWManageability = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2))
hpnsaSWDrivers = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3))
hpnsaSWMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWMibRevMajor.setStatus('mandatory')
hpnsaSWMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWMibRevMinor.setStatus('mandatory')
hpnsaSWManageabilityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1), )
if mibBuilder.loadTexts: hpnsaSWManageabilityTable.setStatus('mandatory')
hpnsaSWManageabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1), ).setIndexNames((0, "HPNSASOFTWARESUBSYSTEM-MIB", "hpnsaSWManageabilityIndex"))
if mibBuilder.loadTexts: hpnsaSWManageabilityEntry.setStatus('mandatory')
hpnsaSWManageabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityIndex.setStatus('mandatory')
hpnsaSWManageabilityFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityFileName.setStatus('mandatory')
hpnsaSWManageabilityFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityFileSize.setStatus('mandatory')
hpnsaSWManageabilityFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityFileDate.setStatus('mandatory')
hpnsaSWManageabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityState.setStatus('mandatory')
hpnsaSWManageabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("agent", 1), ("service", 2), ("driver", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityType.setStatus('mandatory')
hpnsaSWManageabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityVersion.setStatus('mandatory')
hpnsaSWManageabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityDescription.setStatus('mandatory')
hpnsaSWDriversTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1), )
if mibBuilder.loadTexts: hpnsaSWDriversTable.setStatus('mandatory')
hpnsaSWDriversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1), ).setIndexNames((0, "HPNSASOFTWARESUBSYSTEM-MIB", "hpnsaSWDriversIndex"))
if mibBuilder.loadTexts: hpnsaSWDriversEntry.setStatus('mandatory')
hpnsaSWDriversIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversIndex.setStatus('mandatory')
hpnsaSWDriversFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversFileName.setStatus('mandatory')
hpnsaSWDriversFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversFileSize.setStatus('mandatory')
hpnsaSWDriversFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversFileDate.setStatus('mandatory')
hpnsaSWDriversState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversState.setStatus('mandatory')
hpnsaSWDriversType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("networkinterfacecard", 1), ("scsi", 2), ("diskarraycontroller", 3), ("system", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversType.setStatus('mandatory')
hpnsaSWDriversVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversVersion.setStatus('mandatory')
hpnsaSWDriversDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversDescription.setStatus('mandatory')
mibBuilder.exportSymbols("HPNSASOFTWARESUBSYSTEM-MIB", hpnsaSWManageabilityVersion=hpnsaSWManageabilityVersion, hpnsaSWManageabilityState=hpnsaSWManageabilityState, hpnsaSWManageabilityType=hpnsaSWManageabilityType, hpnsaSWMibRevMinor=hpnsaSWMibRevMinor, hpnsaSWDriversFileName=hpnsaSWDriversFileName, hpnsaSWManageabilityFileSize=hpnsaSWManageabilityFileSize, hpnsaSWManageabilityTable=hpnsaSWManageabilityTable, hpnsaSWDriversFileSize=hpnsaSWDriversFileSize, hpnsaSWDriversIndex=hpnsaSWDriversIndex, hp=hp, hpnsaSWDriversTable=hpnsaSWDriversTable, hpnsaSWManageabilityFileName=hpnsaSWManageabilityFileName, hpnsaSWDriversState=hpnsaSWDriversState, hpnsaSWManageability=hpnsaSWManageability, hpnsaSWMibRev=hpnsaSWMibRev, hpnsaSWManageabilityFileDate=hpnsaSWManageabilityFileDate, hpnsaSW=hpnsaSW, nm=nm, hpnsaSWDriversType=hpnsaSWDriversType, hpnsaSWDrivers=hpnsaSWDrivers, hpnsaSWManageabilityEntry=hpnsaSWManageabilityEntry, hpnsaSWDriversDescription=hpnsaSWDriversDescription, hpnsaSWDriversVersion=hpnsaSWDriversVersion, hpnsaSWManageabilityIndex=hpnsaSWManageabilityIndex, hpnsaSWDriversFileDate=hpnsaSWDriversFileDate, hpnsa=hpnsa, hpnsaSWManageabilityDescription=hpnsaSWManageabilityDescription, hpnsaSWMibRevMajor=hpnsaSWMibRevMajor, hpnsaSWDriversEntry=hpnsaSWDriversEntry)
