#
# PySNMP MIB module TERAWAVE-terasystem-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-terasystem-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, enterprises, IpAddress, Gauge32, TimeTicks, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, iso, Counter32, Bits, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "IpAddress", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "iso", "Counter32", "Bits", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5))
teraSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemTime.setStatus('mandatory')
teraSystemCurrTime = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemCurrTime.setStatus('mandatory')
teraLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 8))
teraLogNumberTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1), )
if mibBuilder.loadTexts: teraLogNumberTable.setStatus('mandatory')
teraLogNumberTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraLogNumber"))
if mibBuilder.loadTexts: teraLogNumberTableEntry.setStatus('mandatory')
teraLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogNumber.setStatus('mandatory')
teraLogNumberDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogNumberDescr.setStatus('mandatory')
teraLogNumberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogNumberStatus.setStatus('mandatory')
teraLogClear = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogClear.setStatus('mandatory')
teraLogTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3), )
if mibBuilder.loadTexts: teraLogTable.setStatus('mandatory')
teraLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraLogNumber"), (0, "TERAWAVE-terasystem-MIB", "teraLogMsgIndex"))
if mibBuilder.loadTexts: teraLogTableEntry.setStatus('mandatory')
teraLogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogMsgIndex.setStatus('mandatory')
teraLogMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogMsgNumber.setStatus('mandatory')
teraLogNumberOfParams = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogNumberOfParams.setStatus('mandatory')
teraLogParams = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogParams.setStatus('mandatory')
teraLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLogStatus.setStatus('mandatory')
teraAllLogsFilterGroup = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5), )
if mibBuilder.loadTexts: teraAllLogsFilterGroup.setStatus('mandatory')
teraAllLogsFilterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraLogNumber"))
if mibBuilder.loadTexts: teraAllLogsFilterGroupEntry.setStatus('mandatory')
teraLogFilterByNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterByNumber.setStatus('mandatory')
teraLogFilterBySize = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("last20", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterBySize.setStatus('mandatory')
teraLogFilterBySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("nominal", 1), ("minor", 2), ("major", 3), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterBySeverity.setStatus('mandatory')
teraLogFilterByTask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 8, 3, 5, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLogFilterByTask.setStatus('mandatory')
teraSlotInstTablePar = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 3))
teraSlotInstallTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1), )
if mibBuilder.loadTexts: teraSlotInstallTable.setStatus('mandatory')
teraSlotInstallTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"))
if mibBuilder.loadTexts: teraSlotInstallTableEntry.setStatus('mandatory')
teraInstallSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallSlotNumber.setStatus('mandatory')
teraInstallUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstallUnitType.setStatus('mandatory')
teraInstallEquippedUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallEquippedUnitType.setStatus('mandatory')
teraInstallUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("provision", 1), ("none", 2), ("is", 3), ("moos", 4), ("reset", 5), ("trunk", 6), ("moos-trunk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstallUnitAdminStatus.setStatus('mandatory')
teraInstallUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("empty", 1), ("is", 2), ("moos", 3), ("removed", 4), ("unprovisioned", 5), ("mismatch", 6), ("oos", 7), ("init", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitOperStatus.setStatus('mandatory')
teraInstallUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitName.setStatus('mandatory')
teraInstallUnitRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitRevision.setStatus('mandatory')
teraInstallUnitSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitSerial.setStatus('mandatory')
teraInstallUnitSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitSWVersion.setStatus('mandatory')
teraInstallUnitMfgData = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraInstallUnitMfgData.setStatus('mandatory')
teraSystemInstallTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2), )
if mibBuilder.loadTexts: teraSystemInstallTable.setStatus('mandatory')
teraSystemInstallTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraSystemInstallTableEntry.setStatus('mandatory')
teraSystemNEProvisionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("provision", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEProvisionAdminStatus.setStatus('mandatory')
teraSystemNEName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNEName.setStatus('mandatory')
teraSystemNERangingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNERangingCode.setStatus('mandatory')
teraSystemNEType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tw300", 1), ("tw600", 2), ("tw1600", 3), ("tw100", 4), ("tw150RT", 5), ("oat", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNEType.setStatus('mandatory')
teraSystemNEMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEMaxLatency.setStatus('mandatory')
teraSystemNEAponMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEAponMaxLength.setStatus('mandatory')
teraSystemNEOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("empty", 1), ("provisioned", 2), ("linkDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNEOperStatus.setStatus('mandatory')
teraSystemNEEocMinBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 1536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEEocMinBandWidth.setStatus('mandatory')
teraSystemNEEocMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 1536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEEocMaxBandWidth.setStatus('mandatory')
teraSystemNEInventoryOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("olt2ont", 1), ("ont2olt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNEInventoryOverride.setStatus('mandatory')
teraSystemNERanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNERanging.setStatus('mandatory')
teraSystemNECurrentDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSystemNECurrentDistance.setStatus('mandatory')
teraNEInfoTableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3))
teraNEInfoTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1))
teraNERangingCode = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNERangingCode.setStatus('mandatory')
teraNEType = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tw300", 1), ("tw600", 2), ("tw1600", 3), ("tw100", 4), ("tw150RT-ATM", 5), ("tw150RT-TDM", 6), ("oat", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEType.setStatus('mandatory')
teraNEModel = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEModel.setStatus('mandatory')
teraNESWVersion = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNESWVersion.setStatus('mandatory')
teraNESWRevision = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNESWRevision.setStatus('mandatory')
teraClockSyncTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 4))
teraClockSyncPrimarySource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits-A", 1), ("nim", 2), ("freerun", 3), ("holdover", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncPrimarySource.setStatus('mandatory')
teraClockSyncPrimaryNIMSlot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncPrimaryNIMSlot.setStatus('mandatory')
teraClockSyncPrimaryNIMIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncPrimaryNIMIfIndex.setStatus('mandatory')
teraClockSyncSecondarySource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits-B", 1), ("nim", 2), ("freerun", 3), ("holdover", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncSecondarySource.setStatus('mandatory')
teraClockSyncSecondaryNIMSlot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncSecondaryNIMSlot.setStatus('mandatory')
teraClockSyncSecondaryNIMIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncSecondaryNIMIfIndex.setStatus('mandatory')
teraClockSyncLastSource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freerun", 1), ("holdover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncLastSource.setStatus('mandatory')
teraClockSyncRevertive = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncRevertive.setStatus('mandatory')
teraClockSyncActiveSource = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits-A", 1), ("bits-B", 2), ("nim", 3), ("freerun", 4), ("holdover", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveSource.setStatus('mandatory')
teraClockSyncActiveNIMSlot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveNIMSlot.setStatus('mandatory')
teraClockSyncActiveNIMIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveNIMIfIndex.setStatus('mandatory')
teraClockSyncActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncActiveStatus.setStatus('mandatory')
teraClockSyncPrimaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("idle", 2), ("fail", 3), ("oos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncPrimaryStatus.setStatus('mandatory')
teraClockSyncSecondaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("idle", 2), ("fail", 3), ("oos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClockSyncSecondaryStatus.setStatus('mandatory')
teraClockSyncOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configure", 1), ("switchToPrimary", 2), ("switchToSecondary", 3), ("switchToHoldover", 4), ("switchToFreerun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraClockSyncOperStatus.setStatus('mandatory')
teraCommunityGroupTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 5))
teraPublicCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPublicCommunity.setStatus('mandatory')
teraSETCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSETCommunity.setStatus('mandatory')
teraGETCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraGETCommunity.setStatus('mandatory')
teraAdminCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraAdminCommunity.setStatus('mandatory')
teraTestCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 5, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestCommunity.setStatus('mandatory')
teraMasterSlaveTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 6))
teraMasterSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraMasterSlotNumber.setStatus('mandatory')
teraSlaveSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSlaveSlotNumber.setStatus('mandatory')
teraSystemIPGroupTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 7))
teraSystemIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemIPAddress.setStatus('mandatory')
teraSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemIPNetMask.setStatus('mandatory')
teraSystemIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemIPGateway.setStatus('mandatory')
teraNESlotTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 9), )
if mibBuilder.loadTexts: teraNESlotTable.setStatus('mandatory')
teraNESlotTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 9, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"), (0, "TERAWAVE-terasystem-MIB", "teraEventSlot"))
if mibBuilder.loadTexts: teraNESlotTableEntry.setStatus('mandatory')
teraNESlotUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNESlotUnitType.setStatus('mandatory')
teraNESlotUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("provision", 1), ("none", 2), ("is", 3), ("moos", 4), ("reset", 5), ("trunk", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNESlotUnitAdminStatus.setStatus('mandatory')
teraWLinkIPTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 10), )
if mibBuilder.loadTexts: teraWLinkIPTable.setStatus('mandatory')
teraWLinkIPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraWLinkIPTableEntry.setStatus('mandatory')
teraWLinkIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPAddress.setStatus('mandatory')
teraWLinkIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPNetMask.setStatus('mandatory')
teraWLinkIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPGateway.setStatus('mandatory')
teraWLinkIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPStatus.setStatus('mandatory')
teraNEMiscTableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 11))
teraNEMiscTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1))
teraNELevel2Slot = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNELevel2Slot.setStatus('mandatory')
teraNEZipSystem = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("zip-active", 2), ("zip-stby", 3), ("zip-all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNEZipSystem.setStatus('mandatory')
teraNEReset = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNEReset.setStatus('mandatory')
teraNETimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNETimeZone.setStatus('mandatory')
teraNEInventoryOverride = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNEInventoryOverride.setStatus('mandatory')
teraNESerialPortType = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("dbshell", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraNESerialPortType.setStatus('mandatory')
teraSysObjectIdTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 12))
teraTW300 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW300.setStatus('mandatory')
teraTW600 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW600.setStatus('mandatory')
teraTW1600 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW1600.setStatus('mandatory')
teraTW100 = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW100.setStatus('mandatory')
teraTW150RTATM = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW150RTATM.setStatus('mandatory')
teraTW150RTTDM = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTW150RTTDM.setStatus('mandatory')
teraOAT = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 12, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraOAT.setStatus('mandatory')
teraNEIDxTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 13), )
if mibBuilder.loadTexts: teraNEIDxTable.setStatus('mandatory')
teraNEIDxTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 13, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraNEIDxTableEntry.setStatus('mandatory')
teraNEIDxSlotLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEIDxSlotLevel1.setStatus('mandatory')
teraNEIDxPonID = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraNEIDxPonID.setStatus('mandatory')
teraWLinkIPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 14), )
if mibBuilder.loadTexts: teraWLinkIPRangeTable.setStatus('mandatory')
teraWLinkIPRangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraWLinkIPRangeTableEntry.setStatus('mandatory')
teraWLinkIPRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPRangeStart.setStatus('mandatory')
teraWLinkIPRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPRangeEnd.setStatus('mandatory')
teraWLinkIPRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraWLinkIPRangeRowStatus.setStatus('mandatory')
teraSecondaryMasterSlaveTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 16))
teraSecondaryMasterSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSecondaryMasterSlotNumber.setStatus('mandatory')
teraSecondarySlaveSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSecondarySlaveSlotNumber.setStatus('mandatory')
teraMasterSlaveStateTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 17), )
if mibBuilder.loadTexts: teraMasterSlaveStateTable.setStatus('mandatory')
teraMasterSlaveStateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraMasterSlaveStateIndex"))
if mibBuilder.loadTexts: teraMasterSlaveStateTableEntry.setStatus('mandatory')
teraMasterSlaveStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraMasterSlaveStateIndex.setStatus('mandatory')
teraMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("nobody", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraMasterState.setStatus('mandatory')
teraSlaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("nobody", 1), ("slave", 3), ("slaveActive", 4), ("slaveFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSlaveState.setStatus('mandatory')
teraPPPBaudRateTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 20))
teraPPPBaudRateTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1))
teraPPPAdminBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud2400", 0), ("baud4800", 1), ("baud9600", 2), ("baud19200", 3), ("baud38400", 4), ("baud57600", 5), ("baud115200", 6), ("baud230400", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPPPAdminBaudRate.setStatus('mandatory')
teraPPPOperBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud2400", 0), ("baud4800", 1), ("baud9600", 2), ("baud19200", 3), ("baud38400", 4), ("baud57600", 5), ("baud115200", 6), ("baud230400", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraPPPOperBaudRate.setStatus('mandatory')
teraPPPAdminFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("xon-Xoff", 1), ("rTS-CTS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPPPAdminFlowControl.setStatus('mandatory')
teraPPPOperFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("xon-Xoff", 1), ("rTS-CTS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraPPPOperFlowControl.setStatus('mandatory')
teraSystemNATGroupTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 24))
teraSystemNATSubnetAddress = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 24, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNATSubnetAddress.setStatus('mandatory')
teraSystemNATSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 24, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNATSubnetMask.setStatus('mandatory')
teraSystemPCUNumTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 25))
teraSystemNumOfPCU = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pCU4", 0), ("pCU5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraSystemNumOfPCU.setStatus('mandatory')
teraInstalledSystemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 5, 26), )
if mibBuilder.loadTexts: teraInstalledSystemInfoTable.setStatus('mandatory')
teraInstalledSystemInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1), ).setIndexNames((0, "TERAWAVE-terasystem-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-terasystem-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraInstalledSystemInfoTableEntry.setStatus('mandatory')
teraInstalledSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstalledSystemName.setStatus('mandatory')
teraInstalledSystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstalledSystemLocation.setStatus('mandatory')
teraInstalledNEType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 5, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tw300", 1), ("tw600", 2), ("tw1600", 3), ("tw100", 4), ("tw150RT", 5), ("oat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraInstalledNEType.setStatus('mandatory')
teraCraftInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 28))
teraCraftInterfaceTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1))
teraCraftPortStat = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCraftPortStat.setStatus('mandatory')
teraCraftDefaultAddrStat = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCraftDefaultAddrStat.setStatus('mandatory')
teraSNMPState = MibScalar((1, 3, 6, 1, 4, 1, 4513, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("notReady", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraSNMPState.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-terasystem-MIB", teraSecondarySlaveSlotNumber=teraSecondarySlaveSlotNumber, teraInstallEquippedUnitType=teraInstallEquippedUnitType, teraLogFilterByTask=teraLogFilterByTask, teraNEInfoTableGroup=teraNEInfoTableGroup, teraNEMiscTableGroup=teraNEMiscTableGroup, teraClockSyncPrimaryNIMIfIndex=teraClockSyncPrimaryNIMIfIndex, teraNEZipSystem=teraNEZipSystem, teraAllLogsFilterGroupEntry=teraAllLogsFilterGroupEntry, teraTW1600=teraTW1600, teraClockSyncOperStatus=teraClockSyncOperStatus, teraSNMPState=teraSNMPState, teraInstallUnitRevision=teraInstallUnitRevision, teraInstallSlotNumber=teraInstallSlotNumber, teraSystemNATGroupTable=teraSystemNATGroupTable, teraTW150RTTDM=teraTW150RTTDM, teraAdminCommunity=teraAdminCommunity, teraTW600=teraTW600, teraNESerialPortType=teraNESerialPortType, teraLogNumber=teraLogNumber, teraWLinkIPRangeTableEntry=teraWLinkIPRangeTableEntry, teraNESWVersion=teraNESWVersion, teraInstallUnitSerial=teraInstallUnitSerial, teraLogFilterByNumber=teraLogFilterByNumber, teraMasterSlaveStateTableEntry=teraMasterSlaveStateTableEntry, teraSystemNEType=teraSystemNEType, teraNESlotUnitAdminStatus=teraNESlotUnitAdminStatus, teraNEIDxTableEntry=teraNEIDxTableEntry, teraSysObjectIdTable=teraSysObjectIdTable, teraPPPOperBaudRate=teraPPPOperBaudRate, teraInstalledSystemLocation=teraInstalledSystemLocation, teraCraftInterfaceTable=teraCraftInterfaceTable, teraSystemCurrTime=teraSystemCurrTime, teraSystemIPGroupTable=teraSystemIPGroupTable, teraMasterSlaveStateIndex=teraMasterSlaveStateIndex, teraSecondaryMasterSlotNumber=teraSecondaryMasterSlotNumber, teraPPPAdminBaudRate=teraPPPAdminBaudRate, teraInstalledNEType=teraInstalledNEType, teraSystemNERangingCode=teraSystemNERangingCode, teraClockSyncActiveNIMIfIndex=teraClockSyncActiveNIMIfIndex, teraClockSyncLastSource=teraClockSyncLastSource, teraClockSyncSecondaryNIMIfIndex=teraClockSyncSecondaryNIMIfIndex, teraTestCommunity=teraTestCommunity, teraSystem=teraSystem, teraInstallUnitMfgData=teraInstallUnitMfgData, teraSystemInstallTableEntry=teraSystemInstallTableEntry, teraSystemIPNetMask=teraSystemIPNetMask, teraNEIDxTable=teraNEIDxTable, teraCraftInterfaceGroup=teraCraftInterfaceGroup, teraClockSyncRevertive=teraClockSyncRevertive, teraSystemInstallTable=teraSystemInstallTable, teraOAT=teraOAT, teraNEIDxSlotLevel1=teraNEIDxSlotLevel1, teraInstalledSystemInfoTable=teraInstalledSystemInfoTable, teraNEInfoTable=teraNEInfoTable, teraSystemPCUNumTable=teraSystemPCUNumTable, teraClockSyncSecondarySource=teraClockSyncSecondarySource, teraLogNumberOfParams=teraLogNumberOfParams, teraGETCommunity=teraGETCommunity, teraSlaveSlotNumber=teraSlaveSlotNumber, teraSystemIPAddress=teraSystemIPAddress, teraLogMsgIndex=teraLogMsgIndex, teraSlaveState=teraSlaveState, teraLogParams=teraLogParams, teraInstallUnitSWVersion=teraInstallUnitSWVersion, teraSystemNEAponMaxLength=teraSystemNEAponMaxLength, teraSystemNECurrentDistance=teraSystemNECurrentDistance, teraWLinkIPGateway=teraWLinkIPGateway, teraPPPAdminFlowControl=teraPPPAdminFlowControl, teraClockSyncSecondaryStatus=teraClockSyncSecondaryStatus, teraClockSyncActiveSource=teraClockSyncActiveSource, teraSystemNEEocMinBandWidth=teraSystemNEEocMinBandWidth, teraNEIDxPonID=teraNEIDxPonID, teraSystemNATSubnetAddress=teraSystemNATSubnetAddress, teraWLinkIPRangeRowStatus=teraWLinkIPRangeRowStatus, teraNESlotTable=teraNESlotTable, teraMasterState=teraMasterState, teraNEReset=teraNEReset, teraTW300=teraTW300, teraSystemTime=teraSystemTime, teraInstallUnitType=teraInstallUnitType, teraSystemNEInventoryOverride=teraSystemNEInventoryOverride, teraClockSyncActiveNIMSlot=teraClockSyncActiveNIMSlot, teraPPPBaudRateTable=teraPPPBaudRateTable, teraInstalledSystemName=teraInstalledSystemName, teraAllLogsFilterGroup=teraAllLogsFilterGroup, teraSlotInstallTableEntry=teraSlotInstallTableEntry, teraInstalledSystemInfoTableEntry=teraInstalledSystemInfoTableEntry, teraTW100=teraTW100, teraSystemNEMaxLatency=teraSystemNEMaxLatency, teraWLinkIPNetMask=teraWLinkIPNetMask, teraLogNumberTable=teraLogNumberTable, teraInstallUnitOperStatus=teraInstallUnitOperStatus, teraNESlotUnitType=teraNESlotUnitType, teraClockSyncSecondaryNIMSlot=teraClockSyncSecondaryNIMSlot, terawave=terawave, teraMasterSlotNumber=teraMasterSlotNumber, teraNEType=teraNEType, teraInstallUnitAdminStatus=teraInstallUnitAdminStatus, teraLogNumberStatus=teraLogNumberStatus, teraClockSyncActiveStatus=teraClockSyncActiveStatus, teraWLinkIPRangeStart=teraWLinkIPRangeStart, teraClockSyncPrimaryStatus=teraClockSyncPrimaryStatus, teraWLinkIPStatus=teraWLinkIPStatus, teraClockSyncTable=teraClockSyncTable, teraTW150RTATM=teraTW150RTATM, teraNELevel2Slot=teraNELevel2Slot, teraLogStatus=teraLogStatus, teraLogFilterBySeverity=teraLogFilterBySeverity, teraLogNumberDescr=teraLogNumberDescr, teraInstallUnitName=teraInstallUnitName, teraWLinkIPRangeEnd=teraWLinkIPRangeEnd, teraNEMiscTable=teraNEMiscTable, teraSystemNumOfPCU=teraSystemNumOfPCU, teraWLinkIPTableEntry=teraWLinkIPTableEntry, teraMasterSlaveTable=teraMasterSlaveTable, teraPPPOperFlowControl=teraPPPOperFlowControl, teraLogNumberTableEntry=teraLogNumberTableEntry, teraSystemNATSubnetMask=teraSystemNATSubnetMask, teraPPPBaudRateTbl=teraPPPBaudRateTbl, teraSystemNEName=teraSystemNEName, teraCommunityGroupTable=teraCommunityGroupTable, teraLogTable=teraLogTable, teraClockSyncPrimarySource=teraClockSyncPrimarySource, teraNETimeZone=teraNETimeZone, teraSystemIPGateway=teraSystemIPGateway, teraLogClear=teraLogClear, teraWLinkIPAddress=teraWLinkIPAddress, teraMasterSlaveStateTable=teraMasterSlaveStateTable, teraCraftPortStat=teraCraftPortStat, teraSlotInstallTable=teraSlotInstallTable, teraNESWRevision=teraNESWRevision, teraNEInventoryOverride=teraNEInventoryOverride, teraSlotInstTablePar=teraSlotInstTablePar, teraWLinkIPTable=teraWLinkIPTable, teraSystemNEProvisionAdminStatus=teraSystemNEProvisionAdminStatus, teraWLinkIPRangeTable=teraWLinkIPRangeTable, teraSecondaryMasterSlaveTable=teraSecondaryMasterSlaveTable, teraNESlotTableEntry=teraNESlotTableEntry, teraLogGroup=teraLogGroup, teraNEModel=teraNEModel, teraSystemNEOperStatus=teraSystemNEOperStatus, teraLogFilterBySize=teraLogFilterBySize, teraSystemNEEocMaxBandWidth=teraSystemNEEocMaxBandWidth, teraSystemNERanging=teraSystemNERanging, teraCraftDefaultAddrStat=teraCraftDefaultAddrStat, teraLogMsgNumber=teraLogMsgNumber, teraClockSyncPrimaryNIMSlot=teraClockSyncPrimaryNIMSlot, teraNERangingCode=teraNERangingCode, teraLogTableEntry=teraLogTableEntry, teraSETCommunity=teraSETCommunity, teraPublicCommunity=teraPublicCommunity)
