#
# PySNMP MIB module VM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Counter64, Counter32, Integer32, Bits, IpAddress, NotificationType, TimeTicks, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Counter64", "Counter32", "Integer32", "Bits", "IpAddress", "NotificationType", "TimeTicks", "enterprises", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890))
drac2 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5))
identification = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2))
configAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3))
configAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4))
configNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5))
configModem = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7))
voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21))
battery = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25))
healthStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10890, 5, 100))
idManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idManufacturer.setStatus('mandatory')
idProduct = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idProduct.setStatus('mandatory')
idAgentRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idAgentRevMajor.setStatus('mandatory')
idAgentRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idAgentRevMinor.setStatus('mandatory')
idMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idMibRevMajor.setStatus('mandatory')
idMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idMibRevMinor.setStatus('mandatory')
modNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumber.setStatus('mandatory')
modTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2), )
if mibBuilder.loadTexts: modTable.setStatus('mandatory')
modEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1), ).setIndexNames((0, "VM-MIB", "modIndex"))
if mibBuilder.loadTexts: modEntry.setStatus('mandatory')
modIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modIndex.setStatus('mandatory')
modFwRevMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRevMajor.setStatus('mandatory')
modFwRevMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRevMinor.setStatus('mandatory')
modType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("dell-remote-assistant-card-v2-0", 1), ("motherboard", 2), ("processor", 3), ("chassis", 4), ("powerSupply", 5), ("diskDrive", 6), ("cdrom", 7), ("tapeDrive", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modType.setStatus('mandatory')
modFwRelDate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRelDate.setStatus('mandatory')
modPciBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPciBridge.setStatus('mandatory')
modNetworkCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNetworkCtrl.setStatus('mandatory')
modPcmciaHost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcmciaHost.setStatus('mandatory')
modPcCardMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcCardMfgr.setStatus('mandatory')
modPcCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPcCardName.setStatus('mandatory')
modBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modBattery.setStatus('mandatory')
modVoltCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modVoltCount.setStatus('mandatory')
modTempCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modTempCount.setStatus('mandatory')
modFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFanCount.setStatus('mandatory')
modSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modSwitchCount.setStatus('mandatory')
modFaultCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFaultCount.setStatus('mandatory')
modUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modUpTime.setStatus('mandatory')
modStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modStartDelay.setStatus('mandatory')
modRecoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modRecoveryTimeout.setStatus('mandatory')
modAutoRecoveryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modAutoRecoveryEnable.setStatus('mandatory')
modHeartBeatEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modHeartBeatEnable.setStatus('mandatory')
modAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modAccessControl.setStatus('mandatory')
modEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modEthernetAddress.setStatus('mandatory')
cfgAdminNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAdminNumber.setStatus('mandatory')
cfgAdminTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2), )
if mibBuilder.loadTexts: cfgAdminTable.setStatus('mandatory')
cfgAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgAdminModIndex"), (0, "VM-MIB", "cfgAdminIndex"))
if mibBuilder.loadTexts: cfgAdminEntry.setStatus('mandatory')
cfgAdminModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAdminModIndex.setStatus('mandatory')
cfgAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAdminIndex.setStatus('mandatory')
cfgAdminAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminAlias.setStatus('mandatory')
cfgAdminPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPassword.setStatus('mandatory')
cfgAdminSessionCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminSessionCallback.setStatus('mandatory')
cfgAdminPagerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerNumber.setStatus('mandatory')
cfgAdminPagerSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerSubscriber.setStatus('mandatory')
cfgAdminPagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("numeric", 1), ("alphanumeric", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerType.setStatus('mandatory')
cfgAdminPagerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminPagerMask.setStatus('mandatory')
cfgAdminCustomPagerCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminCustomPagerCode.setStatus('mandatory')
cfgAdminTestPager = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAdminTestPager.setStatus('mandatory')
cfgAlertNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAlertNumber.setStatus('mandatory')
cfgAlertTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2), )
if mibBuilder.loadTexts: cfgAlertTable.setStatus('mandatory')
cfgAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgAlertModIndex"), (0, "VM-MIB", "cfgAlertIndex"))
if mibBuilder.loadTexts: cfgAlertEntry.setStatus('mandatory')
cfgAlertModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAlertModIndex.setStatus('mandatory')
cfgAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAlertIndex.setStatus('mandatory')
cfgAlertTrapSendIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAlertTrapSendIPAddress.setStatus('mandatory')
cfgAlertTrapSendCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAlertTrapSendCommunity.setStatus('mandatory')
cfgAlertTrapCallBackNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAlertTrapCallBackNumber.setStatus('mandatory')
cfgNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetNumber.setStatus('mandatory')
cfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2), )
if mibBuilder.loadTexts: cfgNetTable.setStatus('mandatory')
cfgNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgNetModIndex"), (0, "VM-MIB", "cfgNetIndex"))
if mibBuilder.loadTexts: cfgNetEntry.setStatus('mandatory')
cfgNetModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetModIndex.setStatus('mandatory')
cfgNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgNetIndex.setStatus('mandatory')
cfgNetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNetIPAddress.setStatus('mandatory')
cfgNetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNetSubnetMask.setStatus('mandatory')
cfgNetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNetGateway.setStatus('mandatory')
cfgModemNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgModemNumber.setStatus('mandatory')
cfgModemTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2), )
if mibBuilder.loadTexts: cfgModemTable.setStatus('mandatory')
cfgModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1), ).setIndexNames((0, "VM-MIB", "cfgModemModIndex"), (0, "VM-MIB", "cfgModemIndex"))
if mibBuilder.loadTexts: cfgModemEntry.setStatus('mandatory')
cfgModemModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgModemModIndex.setStatus('mandatory')
cfgModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgModemIndex.setStatus('mandatory')
cfgModemBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemBaudRate.setStatus('mandatory')
cfgModemDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemDialMode.setStatus('mandatory')
cfgModemExtraInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemExtraInitString.setStatus('mandatory')
cfgModemPwrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemPwrOnDelay.setStatus('mandatory')
cfgModemSignalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemSignalDelay.setStatus('mandatory')
cfgModemRingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemRingDelay.setStatus('mandatory')
cfgModemCDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemCDDelay.setStatus('mandatory')
cfgModemResponseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemResponseDelay.setStatus('mandatory')
cfgModemHangUpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemHangUpDelay.setStatus('mandatory')
cfgModemConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemConnectTimeout.setStatus('mandatory')
cfgModemDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 6, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgModemDetectTimeout.setStatus('mandatory')
ctlNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNumber.setStatus('mandatory')
ctlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2), )
if mibBuilder.loadTexts: ctlTable.setStatus('mandatory')
ctlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1), ).setIndexNames((0, "VM-MIB", "ctlModIndex"), (0, "VM-MIB", "ctlIndex"))
if mibBuilder.loadTexts: ctlEntry.setStatus('mandatory')
ctlModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlModIndex.setStatus('mandatory')
ctlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlIndex.setStatus('mandatory')
ctlSystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlSystemReset.setStatus('current')
ctlSystemShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlSystemShutdown.setStatus('current')
ctlSystemPwrCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlSystemPwrCycle.setStatus('current')
ctlCardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardShutdown.setStatus('current')
ctlCardSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardSoftReset.setStatus('current')
ctlCardHardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardHardReset.setStatus('current')
ctlCardFlushGPNV = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCardFlushGPNV.setStatus('current')
voltNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNumber.setStatus('mandatory')
voltTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2), )
if mibBuilder.loadTexts: voltTable.setStatus('mandatory')
voltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1), ).setIndexNames((0, "VM-MIB", "voltModIndex"), (0, "VM-MIB", "voltIndex"))
if mibBuilder.loadTexts: voltEntry.setStatus('mandatory')
voltModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltModIndex.setStatus('mandatory')
voltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltIndex.setStatus('mandatory')
voltType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wallAdapter", 0), ("pciVolt", 1), ("plus3", 2), ("plus5", 3), ("minus5", 4), ("plus12", 5), ("minus12", 6), ("plus15", 7), ("minus15", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltType.setStatus('mandatory')
voltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltDescr.setStatus('mandatory')
voltReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltReading.setStatus('mandatory')
voltLimitLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitLowCritical.setStatus('mandatory')
voltLimitHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitHighCritical.setStatus('mandatory')
voltLimitLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitLowWarning.setStatus('mandatory')
voltLimitHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltLimitHighWarning.setStatus('mandatory')
voltItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltItemStatus.setStatus('mandatory')
voltLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltLastAlarm.setStatus('mandatory')
voltTrapSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTrapSystem.setStatus('mandatory')
voltTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTrapGroup.setStatus('mandatory')
voltTrapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 20, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTrapMessage.setStatus('mandatory')
tempNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNumber.setStatus('mandatory')
tempTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2), )
if mibBuilder.loadTexts: tempTable.setStatus('mandatory')
tempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1), ).setIndexNames((0, "VM-MIB", "tempModIndex"), (0, "VM-MIB", "tempIndex"))
if mibBuilder.loadTexts: tempEntry.setStatus('mandatory')
tempModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempModIndex.setStatus('mandatory')
tempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempIndex.setStatus('mandatory')
tempType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ambient", 0), ("zone1", 1), ("zone2", 2), ("zone3", 3), ("zone4", 4), ("zone5", 5), ("zone6", 6), ("zone7", 7), ("zone8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempType.setStatus('mandatory')
tempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempDescr.setStatus('mandatory')
tempReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempReading.setStatus('mandatory')
tempLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowCritical.setStatus('mandatory')
tempHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighCritical.setStatus('mandatory')
tempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowWarning.setStatus('mandatory')
tempHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setUnits('Degrees Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighWarning.setStatus('mandatory')
tempItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempItemStatus.setStatus('mandatory')
tempLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempLastAlarm.setStatus('mandatory')
tempTrapSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTrapSystem.setStatus('mandatory')
tempTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTrapGroup.setStatus('mandatory')
tempTrapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 21, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTrapMessage.setStatus('mandatory')
batteryNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumber.setStatus('mandatory')
batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2), )
if mibBuilder.loadTexts: batteryTable.setStatus('mandatory')
batteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1), ).setIndexNames((0, "VM-MIB", "batteryModIndex"), (0, "VM-MIB", "batteryIndex"))
if mibBuilder.loadTexts: batteryEntry.setStatus('mandatory')
batteryModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryModIndex.setStatus('mandatory')
batteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryIndex.setStatus('mandatory')
batteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("standardDryCell", 1), ("lithiumION", 2), ("nickelCadmium", 3), ("metalHydride", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryType.setStatus('mandatory')
batteryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDescr.setStatus('mandatory')
batteryChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notCharging", 0), ("fastCharging", 1), ("trickleCharging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargeStatus.setStatus('mandatory')
batteryFastChargeCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFastChargeCount.setStatus('mandatory')
batteryChargePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargePercent.setStatus('mandatory')
batteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStatus.setStatus('mandatory')
batteryLastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLastAlarm.setStatus('mandatory')
batteryTrapSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrapSystem.setStatus('mandatory')
batteryTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrapGroup.setStatus('mandatory')
batteryTrapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 25, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrapMessage.setStatus('mandatory')
healthStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthStatusNumber.setStatus('mandatory')
healthTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2), )
if mibBuilder.loadTexts: healthTable.setStatus('mandatory')
healthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1), ).setIndexNames((0, "VM-MIB", "healthModIndex"), (0, "VM-MIB", "healthIndex"))
if mibBuilder.loadTexts: healthEntry.setStatus('mandatory')
healthModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModIndex.setStatus('mandatory')
healthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthIndex.setStatus('mandatory')
healthType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("overallCard", 1), ("overallSystem", 2), ("overallIPMI", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthType.setStatus('mandatory')
overallHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallHealthStatus.setStatus('mandatory')
overallVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallVoltageStatus.setStatus('mandatory')
overallTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallTemperatureStatus.setStatus('mandatory')
overallBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10890, 5, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undetermined", 0), ("other", 1), ("unknown", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("non-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overallBatteryStatus.setStatus('mandatory')
trapVoltageGood = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,4)).setObjects(("VM-MIB", "voltTrapSystem"), ("VM-MIB", "voltTrapGroup"), ("VM-MIB", "voltTrapMessage"), ("VM-MIB", "voltItemStatus"), ("VM-MIB", "voltReading"))
trapVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,5)).setObjects(("VM-MIB", "voltTrapSystem"), ("VM-MIB", "voltTrapGroup"), ("VM-MIB", "voltTrapMessage"), ("VM-MIB", "voltItemStatus"), ("VM-MIB", "voltReading"))
trapVoltageCritical = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,6)).setObjects(("VM-MIB", "voltTrapSystem"), ("VM-MIB", "voltTrapGroup"), ("VM-MIB", "voltTrapMessage"), ("VM-MIB", "voltItemStatus"), ("VM-MIB", "voltReading"))
trapTemperatureGood = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,7)).setObjects(("VM-MIB", "tempTrapSystem"), ("VM-MIB", "tempTrapGroup"), ("VM-MIB", "tempTrapMessage"), ("VM-MIB", "tempItemStatus"), ("VM-MIB", "tempReading"))
trapTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,8)).setObjects(("VM-MIB", "tempTrapSystem"), ("VM-MIB", "tempTrapGroup"), ("VM-MIB", "tempTrapMessage"), ("VM-MIB", "tempItemStatus"), ("VM-MIB", "tempReading"))
trapTemperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,9)).setObjects(("VM-MIB", "tempTrapSystem"), ("VM-MIB", "tempTrapGroup"), ("VM-MIB", "tempTrapMessage"), ("VM-MIB", "tempItemStatus"), ("VM-MIB", "tempReading"))
trapBatteryGood = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,10)).setObjects(("VM-MIB", "batteryTrapSystem"), ("VM-MIB", "batteryTrapGroup"), ("VM-MIB", "batteryTrapMessage"), ("VM-MIB", "batteryStatus"), ("VM-MIB", "batteryChargePercent"))
trapBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10890, 5) + (0,11)).setObjects(("VM-MIB", "batteryTrapSystem"), ("VM-MIB", "batteryTrapGroup"), ("VM-MIB", "batteryTrapMessage"), ("VM-MIB", "batteryStatus"), ("VM-MIB", "batteryChargePercent"))
mibBuilder.exportSymbols("VM-MIB", configModem=configModem, cfgModemDialMode=cfgModemDialMode, overallTemperatureStatus=overallTemperatureStatus, cfgAdminCustomPagerCode=cfgAdminCustomPagerCode, voltTrapMessage=voltTrapMessage, trapVoltageWarning=trapVoltageWarning, cfgAlertEntry=cfgAlertEntry, cfgNetIndex=cfgNetIndex, batteryDescr=batteryDescr, healthStatus=healthStatus, trapVoltageCritical=trapVoltageCritical, cfgNetEntry=cfgNetEntry, tempIndex=tempIndex, cfgAdminPagerSubscriber=cfgAdminPagerSubscriber, voltLimitHighCritical=voltLimitHighCritical, cfgModemCDDelay=cfgModemCDDelay, modAutoRecoveryEnable=modAutoRecoveryEnable, modFwRelDate=modFwRelDate, modTempCount=modTempCount, cfgModemSignalDelay=cfgModemSignalDelay, overallBatteryStatus=overallBatteryStatus, voltLastAlarm=voltLastAlarm, configNetwork=configNetwork, trapTemperatureGood=trapTemperatureGood, tempTrapMessage=tempTrapMessage, overallVoltageStatus=overallVoltageStatus, tempLowWarning=tempLowWarning, modEthernetAddress=modEthernetAddress, voltNumber=voltNumber, idMibRevMajor=idMibRevMajor, cfgAdminNumber=cfgAdminNumber, voltLimitLowWarning=voltLimitLowWarning, server=server, cfgModemNumber=cfgModemNumber, drac2=drac2, cfgNetModIndex=cfgNetModIndex, modVoltCount=modVoltCount, tempEntry=tempEntry, cfgAdminAlias=cfgAdminAlias, cfgAdminEntry=cfgAdminEntry, ctlSystemShutdown=ctlSystemShutdown, cfgModemPwrOnDelay=cfgModemPwrOnDelay, healthModIndex=healthModIndex, batteryEntry=batteryEntry, idManufacturer=idManufacturer, tempNumber=tempNumber, overallHealthStatus=overallHealthStatus, battery=battery, traps=traps, ctlCardHardReset=ctlCardHardReset, trapVoltageGood=trapVoltageGood, voltLimitHighWarning=voltLimitHighWarning, module=module, idAgentRevMajor=idAgentRevMajor, modFaultCount=modFaultCount, voltType=voltType, healthEntry=healthEntry, modPcmciaHost=modPcmciaHost, idAgentRevMinor=idAgentRevMinor, cfgAdminPassword=cfgAdminPassword, modUpTime=modUpTime, cfgModemDetectTimeout=cfgModemDetectTimeout, cfgNetNumber=cfgNetNumber, cfgModemHangUpDelay=cfgModemHangUpDelay, cfgModemRingDelay=cfgModemRingDelay, modRecoveryTimeout=modRecoveryTimeout, batteryTable=batteryTable, tempLastAlarm=tempLastAlarm, cfgModemModIndex=cfgModemModIndex, cfgModemEntry=cfgModemEntry, ctlCardFlushGPNV=ctlCardFlushGPNV, modPcCardName=modPcCardName, cfgModemExtraInitString=cfgModemExtraInitString, cfgModemConnectTimeout=cfgModemConnectTimeout, batteryModIndex=batteryModIndex, dell=dell, configAlert=configAlert, voltTable=voltTable, ctlSystemReset=ctlSystemReset, tempTrapGroup=tempTrapGroup, tempModIndex=tempModIndex, batteryNumber=batteryNumber, healthStatusNumber=healthStatusNumber, ctlTable=ctlTable, trapTemperatureCritical=trapTemperatureCritical, voltage=voltage, voltLimitLowCritical=voltLimitLowCritical, batteryTrapSystem=batteryTrapSystem, voltDescr=voltDescr, cfgAdminPagerMask=cfgAdminPagerMask, tempTable=tempTable, ctlModIndex=ctlModIndex, tempType=tempType, batteryLastAlarm=batteryLastAlarm, cfgModemTable=cfgModemTable, batteryType=batteryType, cfgAdminTestPager=cfgAdminTestPager, modType=modType, cfgAlertNumber=cfgAlertNumber, modPcCardMfgr=modPcCardMfgr, modSwitchCount=modSwitchCount, temperature=temperature, modFwRevMajor=modFwRevMajor, voltItemStatus=voltItemStatus, cfgAdminIndex=cfgAdminIndex, tempHighWarning=tempHighWarning, batteryTrapGroup=batteryTrapGroup, healthType=healthType, trapBatteryGood=trapBatteryGood, trapBatteryLow=trapBatteryLow, voltModIndex=voltModIndex, voltIndex=voltIndex, batteryChargePercent=batteryChargePercent, batteryIndex=batteryIndex, idProduct=idProduct, ctlIndex=ctlIndex, modStartDelay=modStartDelay, tempDescr=tempDescr, tempLowCritical=tempLowCritical, modNetworkCtrl=modNetworkCtrl, modHeartBeatEnable=modHeartBeatEnable, cfgNetIPAddress=cfgNetIPAddress, voltTrapSystem=voltTrapSystem, voltEntry=voltEntry, modTable=modTable, batteryFastChargeCount=batteryFastChargeCount, ctlSystemPwrCycle=ctlSystemPwrCycle, modFwRevMinor=modFwRevMinor, modFanCount=modFanCount, cfgNetSubnetMask=cfgNetSubnetMask, tempReading=tempReading, voltTrapGroup=voltTrapGroup, tempHighCritical=tempHighCritical, batteryStatus=batteryStatus, cfgAdminPagerNumber=cfgAdminPagerNumber, batteryTrapMessage=batteryTrapMessage, healthIndex=healthIndex, cfgNetGateway=cfgNetGateway, control=control, ctlNumber=ctlNumber, modNumber=modNumber, cfgModemIndex=cfgModemIndex, cfgAlertTrapSendCommunity=cfgAlertTrapSendCommunity, healthTable=healthTable, ctlCardSoftReset=ctlCardSoftReset, cfgAlertTable=cfgAlertTable, cfgNetTable=cfgNetTable, tempItemStatus=tempItemStatus, modPciBridge=modPciBridge, cfgModemResponseDelay=cfgModemResponseDelay, configAdmin=configAdmin, cfgAlertTrapSendIPAddress=cfgAlertTrapSendIPAddress, modEntry=modEntry, cfgAdminSessionCallback=cfgAdminSessionCallback, ctlEntry=ctlEntry, trapTemperatureWarning=trapTemperatureWarning, batteryChargeStatus=batteryChargeStatus, modIndex=modIndex, cfgAlertIndex=cfgAlertIndex, cfgAdminTable=cfgAdminTable, cfgModemBaudRate=cfgModemBaudRate, cfgAdminModIndex=cfgAdminModIndex, identification=identification, ctlCardShutdown=ctlCardShutdown, cfgAdminPagerType=cfgAdminPagerType, modBattery=modBattery, modAccessControl=modAccessControl, tempTrapSystem=tempTrapSystem, cfgAlertModIndex=cfgAlertModIndex, cfgAlertTrapCallBackNumber=cfgAlertTrapCallBackNumber, idMibRevMinor=idMibRevMinor, voltReading=voltReading)
