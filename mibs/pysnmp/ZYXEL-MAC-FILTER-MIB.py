#
# PySNMP MIB module ZYXEL-MAC-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MAC-FILTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:44:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Counter32, Unsigned32, ObjectIdentity, MibIdentifier, Counter64, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Counter32", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Counter64", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "IpAddress", "TimeTicks")
TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelMacFilter = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47))
if mibBuilder.loadTexts: zyxelMacFilter.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelMacFilter.setOrganization('Enterprise Solution ZyXEL')
zyxelMacFilterSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1))
zyMacFilterMaxNumberOfRules = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyMacFilterMaxNumberOfRules.setStatus('current')
zyxelMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2), )
if mibBuilder.loadTexts: zyxelMacFilterTable.setStatus('current')
zyxelMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2, 1), ).setIndexNames((0, "ZYXEL-MAC-FILTER-MIB", "zyMacFilterMacAddress"), (0, "ZYXEL-MAC-FILTER-MIB", "zyMacFilterVid"))
if mibBuilder.loadTexts: zyxelMacFilterEntry.setStatus('current')
zyMacFilterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: zyMacFilterMacAddress.setStatus('current')
zyMacFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: zyMacFilterVid.setStatus('current')
zyMacFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMacFilterName.setStatus('current')
zyMacFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discardSource", 1), ("discardDestination", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMacFilterAction.setStatus('current')
zyMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 47, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyMacFilterRowStatus.setStatus('current')
mibBuilder.exportSymbols("ZYXEL-MAC-FILTER-MIB", zyxelMacFilter=zyxelMacFilter, zyMacFilterMacAddress=zyMacFilterMacAddress, zyMacFilterName=zyMacFilterName, zyxelMacFilterSetup=zyxelMacFilterSetup, PYSNMP_MODULE_ID=zyxelMacFilter, zyMacFilterMaxNumberOfRules=zyMacFilterMaxNumberOfRules, zyMacFilterAction=zyMacFilterAction, zyMacFilterVid=zyMacFilterVid, zyxelMacFilterTable=zyxelMacFilterTable, zyxelMacFilterEntry=zyxelMacFilterEntry, zyMacFilterRowStatus=zyMacFilterRowStatus)
